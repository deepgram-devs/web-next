import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "your-first-command", "text": "Your First Command" }, { "depth": 2, "slug": "overwriting-files-automatically", "text": "Overwriting Files Automatically" }, { "depth": 2, "slug": "minimizing-terminal-information", "text": "Minimizing Terminal Information" }, { "depth": 2, "slug": "trimming-audio", "text": "Trimming Audio" }, { "depth": 2, "slug": "simple-filters", "text": "Simple Filters" }, { "depth": 3, "slug": "changing-volume-of-whole-file", "text": "Changing Volume Of Whole File" }, { "depth": 3, "slug": "fading-in-volume", "text": "Fading In Volume" }, { "depth": 3, "slug": "reduce-background-noise", "text": "Reduce Background Noise" }, { "depth": 2, "slug": "complex-filters", "text": "Complex Filters" }, { "depth": 3, "slug": "overlaying-two-audio-files", "text": "Overlaying Two Audio Files" }, { "depth": 3, "slug": "trimming-in-complex-filters", "text": "Trimming In Complex Filters" }, { "depth": 3, "slug": "fading-in-complex-filters", "text": "Fading in Complex Filters" }, { "depth": 3, "slug": "combining-complex-filters", "text": "Combining Complex Filters" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": '\r\nFFmpeg is an open source toolkit for converting and manipulating both audio and video files from the terminal. It\'s the go-to for this kind of work - if you\'ve used any conversion or simple editing tools there is a good chance that it relies on FFmpeg in some way. When I started using FFmpeg I would have loved more audio-focused beginner tutorials, so this is to help those people who are in the same boat I was.\r\n\r\nBefore we begin you will need to download a few things:\r\n\r\n*   A copy of FFmpeg - download it [here](https://ffmpeg.org).\r\n*   Two audio files to work with - you can [download one here](https://static.deepgram.com/examples/nasa-spacewalk-interview.wav) and [the other here](https://static.deepgram.com/examples/Bueller-Life-moves-pretty-fast.wav).\r\n\r\nCreate a new directory on your computer. Pop FFmpeg and both audio files into it. Then, open the directory in your terminal.\r\n\r\n## Your First Command\r\n\r\nFFMpeg takes one or more files as an input and finishes a command by exporting a file. Between these two points we can further manipulate the file and export the result of the manipulations, but to start we will take in a file and spit out a new file in a different file format.\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav output.mp3\r\n```\r\n\r\nYou should see a new file appear in your directory. The `-i` tells FFmpeg that the next string is an **infile** that operations should happen against. You can provide multiple infiles like so:\r\n\r\n```sh\r\n./ffmpeg -i file1.wav -i file2.wav [...] output.wav\r\n```\r\n\r\n## Overwriting Files Automatically\r\n\r\nIf you run the above command more than once, you will be asked if you should overwrite the existing `output.mp3` file. To automatically overwrite add the `-y` flag before any infiles:\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav output.mp3\r\n```\r\n\r\nTo never overwrite you can replace `-y` with `-n`.\r\n\r\n## Minimizing Terminal Information\r\n\r\nThere is a lot of information shown in the terminal when using FFmpeg. When FFmpeg first runs it will tell you about the configuration of your FFmpeg instance followed by the information related to your command. You can hide the configuration by adding `-hide_banner` anywhere in your command:\r\n\r\n    ./ffmpeg -hide_banner -i nasa-spacewalk-interview.wav output.mp3\r\n\r\n## Trimming Audio\r\n\r\nWe have already seen several options which start with `-LETTER` and are followed by a value if required (like the `-i` needing a file name). To trim an audio file we need two options - a starting sample time and either a duration or an ending point.\r\n\r\nRun this command:\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -t 15 output.mp3\r\n```\r\n\r\nThis will start at 10 seconds and create a clip, from that point, that lasts 15 seconds. The following command will create a sample from 10 seconds **to** 15 seconds (effectively lasting 5 seconds):\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -to 15 output.mp3\r\n```\r\n\r\nWe won\'t cover it in great depth, but you can also provide timestamps in the format `HOURS:MINS:SECS.MILLISECONDS` instead of just a number of seconds:\r\n\r\n    ./ffmpeg -i nasa-spacewalk-interview.wav -ss 00:00:10.5 -to 00:00:15.75 output.mp3\r\n\r\nThat\'s 10.5 seconds to 15.75 seconds.\r\n\r\n## Simple Filters\r\n\r\nSimple audio filters (`-af`) have a single input, do a single thing, and provide a single output. Let\'s see how a few work:\r\n\r\n### Changing Volume Of Whole File\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -af "volume=0.25" output.mp3\r\n```\r\n\r\nThis will set the volume to 25% for the whole sample.\r\n\r\n### Fading In Volume\r\n\r\n```sh\r\n./ffmpeg -y -i demo.wav -af "afade=t=in:ss=0:d=15" output.mp3\r\n```\r\n\r\nThis will fade in audio from the start of the file where it will be silent, to 15 seconds where it will be full volume.\r\n\r\n### Reduce Background Noise\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -af "highpass=f=200, lowpass=f=3000" output.mp3\r\n```\r\n\r\nThis uses two audio filters at the same time and allows frequencies **higher** than 200hz to **pass**, and under **3000hz** to pass. You may need to play with the exact values. [Thanks to Stack Overflow user av8r for this one!](https://superuser.com/a/835585)\r\n\r\n## Complex Filters\r\n\r\nComplex filters are both complex in their functionality and their syntax. Unlike simple filters which do a single operation to a single input, complex filters can be chained together. We pass in audio by a variable name, do something to it, and export a new variable which we can then further chain in a single filter.\r\n\r\nThey follow this syntax:\r\n\r\n    [INPUT]operations[OUTPUT1];[OUTPUT1]operations[OUTPUT2]\r\n\r\nAs you can see, `OUTPUT1` is created as a result of the first filter, and fed into the next as an input. Inputs are number-based and zero indexed based on the order they are provided as infiles - that means the first infile is `[0]`, the second `[1]`, and so on.\r\n\r\nLet\'s see how this works in practice:\r\n\r\n### Overlaying Two Audio Files\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex "[0][1]amix=inputs=2" output.mp3\r\n```\r\n\r\n`amix` takes in both infiles and creates an output by directly overlaying them.\r\n\r\n### Trimming In Complex Filters\r\n\r\n```sh\r\n./ffmpeg -y -i Bueller-Life-moves-pretty-fast.wav -filter_complex "[0]atrim=start=0:end=5" output.mp3\r\n```\r\n\r\nThis creates a new audio file with just the first 5 seconds of the infile.\r\n\r\n### Fading in Complex Filters\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav -filter_complex "[0]afade=t=in:ss=0:d=10" output.mp3\r\n```\r\n\r\n### Combining Complex Filters\r\n\r\nYou can trim and fade audio files with simple filters, but what makes compelx filters so exciting is that you can combine them. Try this and we\'ll talk about it after:\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex "[0]afade=t=in:ss=0:d=10[fadeIn];[1]atrim=start=0:end=5[trimmed];[fadeIn][trimmed]amix=inputs=2" output.mp3\r\n```\r\n\r\nThere are three parts to this filter:\r\n\r\n1.  `[0]afade=t=in:ss=0:d=10[fadeIn];` takes the first infile and applies a 10 second fade in.\r\n2.  `[1]atrim=start=0:end=5[trimmed];` takes the second infile and trims it to the first 5 seconds.\r\n3.  `[fadeIn][trimmed]amix=inputs=2` takes the output of the above two steps and overlays them.\r\n\r\n## In Summary\r\n\r\nFFmpeg is hugely powerful, and with that comes a learning curve. We\'ve only scratched the surface of what it can do but hopefully, its syntax makes more sense. If you have any questions please feel free to reach out on Twitter - we\'re [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ', "html": '<p>FFmpeg is an open source toolkit for converting and manipulating both audio and video files from the terminal. It\u2019s the go-to for this kind of work - if you\u2019ve used any conversion or simple editing tools there is a good chance that it relies on FFmpeg in some way. When I started using FFmpeg I would have loved more audio-focused beginner tutorials, so this is to help those people who are in the same boat I was.</p>\n<p>Before we begin you will need to download a few things:</p>\n<ul>\n<li>A copy of FFmpeg - download it <a href="https://ffmpeg.org">here</a>.</li>\n<li>Two audio files to work with - you can <a href="https://static.deepgram.com/examples/nasa-spacewalk-interview.wav">download one here</a> and <a href="https://static.deepgram.com/examples/Bueller-Life-moves-pretty-fast.wav">the other here</a>.</li>\n</ul>\n<p>Create a new directory on your computer. Pop FFmpeg and both audio files into it. Then, open the directory in your terminal.</p>\n<h2 id="your-first-command">Your First Command</h2>\n<p>FFMpeg takes one or more files as an input and finishes a command by exporting a file. Between these two points we can further manipulate the file and export the result of the manipulations, but to start we will take in a file and spit out a new file in a different file format.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav output.mp3</span></span></code></pre>\n<p>You should see a new file appear in your directory. The <code is:raw>-i</code> tells FFmpeg that the next string is an <strong>infile</strong> that operations should happen against. You can provide multiple infiles like so:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i file1.wav -i file2.wav [...] output.wav</span></span></code></pre>\n<h2 id="overwriting-files-automatically">Overwriting Files Automatically</h2>\n<p>If you run the above command more than once, you will be asked if you should overwrite the existing <code is:raw>output.mp3</code> file. To automatically overwrite add the <code is:raw>-y</code> flag before any infiles:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav output.mp3</span></span></code></pre>\n<p>To never overwrite you can replace <code is:raw>-y</code> with <code is:raw>-n</code>.</p>\n<h2 id="minimizing-terminal-information">Minimizing Terminal Information</h2>\n<p>There is a lot of information shown in the terminal when using FFmpeg. When FFmpeg first runs it will tell you about the configuration of your FFmpeg instance followed by the information related to your command. You can hide the configuration by adding <code is:raw>-hide_banner</code> anywhere in your command:</p>\n<p>./ffmpeg -hide_banner -i nasa-spacewalk-interview.wav output.mp3</p>\n<h2 id="trimming-audio">Trimming Audio</h2>\n<p>We have already seen several options which start with <code is:raw>-LETTER</code> and are followed by a value if required (like the <code is:raw>-i</code> needing a file name). To trim an audio file we need two options - a starting sample time and either a duration or an ending point.</p>\n<p>Run this command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -t 15 output.mp3</span></span></code></pre>\n<p>This will start at 10 seconds and create a clip, from that point, that lasts 15 seconds. The following command will create a sample from 10 seconds <strong>to</strong> 15 seconds (effectively lasting 5 seconds):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -to 15 output.mp3</span></span></code></pre>\n<p>We won\u2019t cover it in great depth, but you can also provide timestamps in the format <code is:raw>HOURS:MINS:SECS.MILLISECONDS</code> instead of just a number of seconds:</p>\n<p>./ffmpeg -i nasa-spacewalk-interview.wav -ss 00:00:10.5 -to 00:00:15.75 output.mp3</p>\n<p>That\u2019s 10.5 seconds to 15.75 seconds.</p>\n<h2 id="simple-filters">Simple Filters</h2>\n<p>Simple audio filters (<code is:raw>-af</code>) have a single input, do a single thing, and provide a single output. Let\u2019s see how a few work:</p>\n<h3 id="changing-volume-of-whole-file">Changing Volume Of Whole File</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -af </span><span style="color: #A5D6FF">&quot;volume=0.25&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This will set the volume to 25% for the whole sample.</p>\n<h3 id="fading-in-volume">Fading In Volume</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i demo.wav -af </span><span style="color: #A5D6FF">&quot;afade=t=in:ss=0:d=15&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This will fade in audio from the start of the file where it will be silent, to 15 seconds where it will be full volume.</p>\n<h3 id="reduce-background-noise">Reduce Background Noise</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -af </span><span style="color: #A5D6FF">&quot;highpass=f=200, lowpass=f=3000&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This uses two audio filters at the same time and allows frequencies <strong>higher</strong> than 200hz to <strong>pass</strong>, and under <strong>3000hz</strong> to pass. You may need to play with the exact values. <a href="https://superuser.com/a/835585">Thanks to Stack Overflow user av8r for this one!</a></p>\n<h2 id="complex-filters">Complex Filters</h2>\n<p>Complex filters are both complex in their functionality and their syntax. Unlike simple filters which do a single operation to a single input, complex filters can be chained together. We pass in audio by a variable name, do something to it, and export a new variable which we can then further chain in a single filter.</p>\n<p>They follow this syntax:</p>\n<p>[INPUT]operations[OUTPUT1];[OUTPUT1]operations[OUTPUT2]</p>\n<p>As you can see, <code is:raw>OUTPUT1</code> is created as a result of the first filter, and fed into the next as an input. Inputs are number-based and zero indexed based on the order they are provided as infiles - that means the first infile is <code is:raw>[0]</code>, the second <code is:raw>[1]</code>, and so on.</p>\n<p>Let\u2019s see how this works in practice:</p>\n<h3 id="overlaying-two-audio-files">Overlaying Two Audio Files</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0][1]amix=inputs=2&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p><code is:raw>amix</code> takes in both infiles and creates an output by directly overlaying them.</p>\n<h3 id="trimming-in-complex-filters">Trimming In Complex Filters</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]atrim=start=0:end=5&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This creates a new audio file with just the first 5 seconds of the infile.</p>\n<h3 id="fading-in-complex-filters">Fading in Complex Filters</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]afade=t=in:ss=0:d=10&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<h3 id="combining-complex-filters">Combining Complex Filters</h3>\n<p>You can trim and fade audio files with simple filters, but what makes compelx filters so exciting is that you can combine them. Try this and we\u2019ll talk about it after:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]afade=t=in:ss=0:d=10[fadeIn];[1]atrim=start=0:end=5[trimmed];[fadeIn][trimmed]amix=inputs=2&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>There are three parts to this filter:</p>\n<ol>\n<li><code is:raw>[0]afade=t=in:ss=0:d=10[fadeIn];</code> takes the first infile and applies a 10 second fade in.</li>\n<li><code is:raw>[1]atrim=start=0:end=5[trimmed];</code> takes the second infile and trims it to the first 5 seconds.</li>\n<li><code is:raw>[fadeIn][trimmed]amix=inputs=2</code> takes the output of the above two steps and overlays them.</li>\n</ol>\n<h2 id="in-summary">In Summary</h2>\n<p>FFmpeg is hugely powerful, and with that comes a learning curve. We\u2019ve only scratched the surface of what it can do but hopefully, its syntax makes more sense. If you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Getting Started with ffmpeg for Audio", "description": "Learn about the FFmpeg CLI for working with audio files.", "date": "2021-11-08T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1635801056/blog/2021/11/ffmpeg-beginners/Getting-Started-with-ffmpeg-blog%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["ffmpeg"], "seo": { "title": "Getting Started with ffmpeg for Audio", "description": "Learn about the FFmpeg CLI for working with audio files." }, "shorturls": { "share": "https://dpgr.am/d591b55", "twitter": "https://dpgr.am/57448ea", "linkedin": "https://dpgr.am/cab14a9", "reddit": "https://dpgr.am/ae0bee6", "facebook": "https://dpgr.am/bb519fb" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453799/blog/ffmpeg-beginners/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "your-first-command", "text": "Your First Command" }, { "depth": 2, "slug": "overwriting-files-automatically", "text": "Overwriting Files Automatically" }, { "depth": 2, "slug": "minimizing-terminal-information", "text": "Minimizing Terminal Information" }, { "depth": 2, "slug": "trimming-audio", "text": "Trimming Audio" }, { "depth": 2, "slug": "simple-filters", "text": "Simple Filters" }, { "depth": 3, "slug": "changing-volume-of-whole-file", "text": "Changing Volume Of Whole File" }, { "depth": 3, "slug": "fading-in-volume", "text": "Fading In Volume" }, { "depth": 3, "slug": "reduce-background-noise", "text": "Reduce Background Noise" }, { "depth": 2, "slug": "complex-filters", "text": "Complex Filters" }, { "depth": 3, "slug": "overlaying-two-audio-files", "text": "Overlaying Two Audio Files" }, { "depth": 3, "slug": "trimming-in-complex-filters", "text": "Trimming In Complex Filters" }, { "depth": 3, "slug": "fading-in-complex-filters", "text": "Fading in Complex Filters" }, { "depth": 3, "slug": "combining-complex-filters", "text": "Combining Complex Filters" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": '\r\nFFmpeg is an open source toolkit for converting and manipulating both audio and video files from the terminal. It\'s the go-to for this kind of work - if you\'ve used any conversion or simple editing tools there is a good chance that it relies on FFmpeg in some way. When I started using FFmpeg I would have loved more audio-focused beginner tutorials, so this is to help those people who are in the same boat I was.\r\n\r\nBefore we begin you will need to download a few things:\r\n\r\n*   A copy of FFmpeg - download it [here](https://ffmpeg.org).\r\n*   Two audio files to work with - you can [download one here](https://static.deepgram.com/examples/nasa-spacewalk-interview.wav) and [the other here](https://static.deepgram.com/examples/Bueller-Life-moves-pretty-fast.wav).\r\n\r\nCreate a new directory on your computer. Pop FFmpeg and both audio files into it. Then, open the directory in your terminal.\r\n\r\n## Your First Command\r\n\r\nFFMpeg takes one or more files as an input and finishes a command by exporting a file. Between these two points we can further manipulate the file and export the result of the manipulations, but to start we will take in a file and spit out a new file in a different file format.\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav output.mp3\r\n```\r\n\r\nYou should see a new file appear in your directory. The `-i` tells FFmpeg that the next string is an **infile** that operations should happen against. You can provide multiple infiles like so:\r\n\r\n```sh\r\n./ffmpeg -i file1.wav -i file2.wav [...] output.wav\r\n```\r\n\r\n## Overwriting Files Automatically\r\n\r\nIf you run the above command more than once, you will be asked if you should overwrite the existing `output.mp3` file. To automatically overwrite add the `-y` flag before any infiles:\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav output.mp3\r\n```\r\n\r\nTo never overwrite you can replace `-y` with `-n`.\r\n\r\n## Minimizing Terminal Information\r\n\r\nThere is a lot of information shown in the terminal when using FFmpeg. When FFmpeg first runs it will tell you about the configuration of your FFmpeg instance followed by the information related to your command. You can hide the configuration by adding `-hide_banner` anywhere in your command:\r\n\r\n    ./ffmpeg -hide_banner -i nasa-spacewalk-interview.wav output.mp3\r\n\r\n## Trimming Audio\r\n\r\nWe have already seen several options which start with `-LETTER` and are followed by a value if required (like the `-i` needing a file name). To trim an audio file we need two options - a starting sample time and either a duration or an ending point.\r\n\r\nRun this command:\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -t 15 output.mp3\r\n```\r\n\r\nThis will start at 10 seconds and create a clip, from that point, that lasts 15 seconds. The following command will create a sample from 10 seconds **to** 15 seconds (effectively lasting 5 seconds):\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -to 15 output.mp3\r\n```\r\n\r\nWe won\'t cover it in great depth, but you can also provide timestamps in the format `HOURS:MINS:SECS.MILLISECONDS` instead of just a number of seconds:\r\n\r\n    ./ffmpeg -i nasa-spacewalk-interview.wav -ss 00:00:10.5 -to 00:00:15.75 output.mp3\r\n\r\nThat\'s 10.5 seconds to 15.75 seconds.\r\n\r\n## Simple Filters\r\n\r\nSimple audio filters (`-af`) have a single input, do a single thing, and provide a single output. Let\'s see how a few work:\r\n\r\n### Changing Volume Of Whole File\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -af "volume=0.25" output.mp3\r\n```\r\n\r\nThis will set the volume to 25% for the whole sample.\r\n\r\n### Fading In Volume\r\n\r\n```sh\r\n./ffmpeg -y -i demo.wav -af "afade=t=in:ss=0:d=15" output.mp3\r\n```\r\n\r\nThis will fade in audio from the start of the file where it will be silent, to 15 seconds where it will be full volume.\r\n\r\n### Reduce Background Noise\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -af "highpass=f=200, lowpass=f=3000" output.mp3\r\n```\r\n\r\nThis uses two audio filters at the same time and allows frequencies **higher** than 200hz to **pass**, and under **3000hz** to pass. You may need to play with the exact values. [Thanks to Stack Overflow user av8r for this one!](https://superuser.com/a/835585)\r\n\r\n## Complex Filters\r\n\r\nComplex filters are both complex in their functionality and their syntax. Unlike simple filters which do a single operation to a single input, complex filters can be chained together. We pass in audio by a variable name, do something to it, and export a new variable which we can then further chain in a single filter.\r\n\r\nThey follow this syntax:\r\n\r\n    [INPUT]operations[OUTPUT1];[OUTPUT1]operations[OUTPUT2]\r\n\r\nAs you can see, `OUTPUT1` is created as a result of the first filter, and fed into the next as an input. Inputs are number-based and zero indexed based on the order they are provided as infiles - that means the first infile is `[0]`, the second `[1]`, and so on.\r\n\r\nLet\'s see how this works in practice:\r\n\r\n### Overlaying Two Audio Files\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex "[0][1]amix=inputs=2" output.mp3\r\n```\r\n\r\n`amix` takes in both infiles and creates an output by directly overlaying them.\r\n\r\n### Trimming In Complex Filters\r\n\r\n```sh\r\n./ffmpeg -y -i Bueller-Life-moves-pretty-fast.wav -filter_complex "[0]atrim=start=0:end=5" output.mp3\r\n```\r\n\r\nThis creates a new audio file with just the first 5 seconds of the infile.\r\n\r\n### Fading in Complex Filters\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav -filter_complex "[0]afade=t=in:ss=0:d=10" output.mp3\r\n```\r\n\r\n### Combining Complex Filters\r\n\r\nYou can trim and fade audio files with simple filters, but what makes compelx filters so exciting is that you can combine them. Try this and we\'ll talk about it after:\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex "[0]afade=t=in:ss=0:d=10[fadeIn];[1]atrim=start=0:end=5[trimmed];[fadeIn][trimmed]amix=inputs=2" output.mp3\r\n```\r\n\r\nThere are three parts to this filter:\r\n\r\n1.  `[0]afade=t=in:ss=0:d=10[fadeIn];` takes the first infile and applies a 10 second fade in.\r\n2.  `[1]atrim=start=0:end=5[trimmed];` takes the second infile and trims it to the first 5 seconds.\r\n3.  `[fadeIn][trimmed]amix=inputs=2` takes the output of the above two steps and overlays them.\r\n\r\n## In Summary\r\n\r\nFFmpeg is hugely powerful, and with that comes a learning curve. We\'ve only scratched the surface of what it can do but hopefully, its syntax makes more sense. If you have any questions please feel free to reach out on Twitter - we\'re [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ', "html": '<p>FFmpeg is an open source toolkit for converting and manipulating both audio and video files from the terminal. It\u2019s the go-to for this kind of work - if you\u2019ve used any conversion or simple editing tools there is a good chance that it relies on FFmpeg in some way. When I started using FFmpeg I would have loved more audio-focused beginner tutorials, so this is to help those people who are in the same boat I was.</p>\n<p>Before we begin you will need to download a few things:</p>\n<ul>\n<li>A copy of FFmpeg - download it <a href="https://ffmpeg.org">here</a>.</li>\n<li>Two audio files to work with - you can <a href="https://static.deepgram.com/examples/nasa-spacewalk-interview.wav">download one here</a> and <a href="https://static.deepgram.com/examples/Bueller-Life-moves-pretty-fast.wav">the other here</a>.</li>\n</ul>\n<p>Create a new directory on your computer. Pop FFmpeg and both audio files into it. Then, open the directory in your terminal.</p>\n<h2 id="your-first-command">Your First Command</h2>\n<p>FFMpeg takes one or more files as an input and finishes a command by exporting a file. Between these two points we can further manipulate the file and export the result of the manipulations, but to start we will take in a file and spit out a new file in a different file format.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav output.mp3</span></span></code></pre>\n<p>You should see a new file appear in your directory. The <code is:raw>-i</code> tells FFmpeg that the next string is an <strong>infile</strong> that operations should happen against. You can provide multiple infiles like so:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i file1.wav -i file2.wav [...] output.wav</span></span></code></pre>\n<h2 id="overwriting-files-automatically">Overwriting Files Automatically</h2>\n<p>If you run the above command more than once, you will be asked if you should overwrite the existing <code is:raw>output.mp3</code> file. To automatically overwrite add the <code is:raw>-y</code> flag before any infiles:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav output.mp3</span></span></code></pre>\n<p>To never overwrite you can replace <code is:raw>-y</code> with <code is:raw>-n</code>.</p>\n<h2 id="minimizing-terminal-information">Minimizing Terminal Information</h2>\n<p>There is a lot of information shown in the terminal when using FFmpeg. When FFmpeg first runs it will tell you about the configuration of your FFmpeg instance followed by the information related to your command. You can hide the configuration by adding <code is:raw>-hide_banner</code> anywhere in your command:</p>\n<p>./ffmpeg -hide_banner -i nasa-spacewalk-interview.wav output.mp3</p>\n<h2 id="trimming-audio">Trimming Audio</h2>\n<p>We have already seen several options which start with <code is:raw>-LETTER</code> and are followed by a value if required (like the <code is:raw>-i</code> needing a file name). To trim an audio file we need two options - a starting sample time and either a duration or an ending point.</p>\n<p>Run this command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -t 15 output.mp3</span></span></code></pre>\n<p>This will start at 10 seconds and create a clip, from that point, that lasts 15 seconds. The following command will create a sample from 10 seconds <strong>to</strong> 15 seconds (effectively lasting 5 seconds):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -to 15 output.mp3</span></span></code></pre>\n<p>We won\u2019t cover it in great depth, but you can also provide timestamps in the format <code is:raw>HOURS:MINS:SECS.MILLISECONDS</code> instead of just a number of seconds:</p>\n<p>./ffmpeg -i nasa-spacewalk-interview.wav -ss 00:00:10.5 -to 00:00:15.75 output.mp3</p>\n<p>That\u2019s 10.5 seconds to 15.75 seconds.</p>\n<h2 id="simple-filters">Simple Filters</h2>\n<p>Simple audio filters (<code is:raw>-af</code>) have a single input, do a single thing, and provide a single output. Let\u2019s see how a few work:</p>\n<h3 id="changing-volume-of-whole-file">Changing Volume Of Whole File</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -af </span><span style="color: #A5D6FF">&quot;volume=0.25&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This will set the volume to 25% for the whole sample.</p>\n<h3 id="fading-in-volume">Fading In Volume</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i demo.wav -af </span><span style="color: #A5D6FF">&quot;afade=t=in:ss=0:d=15&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This will fade in audio from the start of the file where it will be silent, to 15 seconds where it will be full volume.</p>\n<h3 id="reduce-background-noise">Reduce Background Noise</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -af </span><span style="color: #A5D6FF">&quot;highpass=f=200, lowpass=f=3000&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This uses two audio filters at the same time and allows frequencies <strong>higher</strong> than 200hz to <strong>pass</strong>, and under <strong>3000hz</strong> to pass. You may need to play with the exact values. <a href="https://superuser.com/a/835585">Thanks to Stack Overflow user av8r for this one!</a></p>\n<h2 id="complex-filters">Complex Filters</h2>\n<p>Complex filters are both complex in their functionality and their syntax. Unlike simple filters which do a single operation to a single input, complex filters can be chained together. We pass in audio by a variable name, do something to it, and export a new variable which we can then further chain in a single filter.</p>\n<p>They follow this syntax:</p>\n<p>[INPUT]operations[OUTPUT1];[OUTPUT1]operations[OUTPUT2]</p>\n<p>As you can see, <code is:raw>OUTPUT1</code> is created as a result of the first filter, and fed into the next as an input. Inputs are number-based and zero indexed based on the order they are provided as infiles - that means the first infile is <code is:raw>[0]</code>, the second <code is:raw>[1]</code>, and so on.</p>\n<p>Let\u2019s see how this works in practice:</p>\n<h3 id="overlaying-two-audio-files">Overlaying Two Audio Files</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0][1]amix=inputs=2&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p><code is:raw>amix</code> takes in both infiles and creates an output by directly overlaying them.</p>\n<h3 id="trimming-in-complex-filters">Trimming In Complex Filters</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]atrim=start=0:end=5&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This creates a new audio file with just the first 5 seconds of the infile.</p>\n<h3 id="fading-in-complex-filters">Fading in Complex Filters</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]afade=t=in:ss=0:d=10&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<h3 id="combining-complex-filters">Combining Complex Filters</h3>\n<p>You can trim and fade audio files with simple filters, but what makes compelx filters so exciting is that you can combine them. Try this and we\u2019ll talk about it after:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]afade=t=in:ss=0:d=10[fadeIn];[1]atrim=start=0:end=5[trimmed];[fadeIn][trimmed]amix=inputs=2&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>There are three parts to this filter:</p>\n<ol>\n<li><code is:raw>[0]afade=t=in:ss=0:d=10[fadeIn];</code> takes the first infile and applies a 10 second fade in.</li>\n<li><code is:raw>[1]atrim=start=0:end=5[trimmed];</code> takes the second infile and trims it to the first 5 seconds.</li>\n<li><code is:raw>[fadeIn][trimmed]amix=inputs=2</code> takes the output of the above two steps and overlays them.</li>\n</ol>\n<h2 id="in-summary">In Summary</h2>\n<p>FFmpeg is hugely powerful, and with that comes a learning curve. We\u2019ve only scratched the surface of what it can do but hopefully, its syntax makes more sense. If you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/ffmpeg-beginners/index.md" };
function rawContent() {
  return '\r\nFFmpeg is an open source toolkit for converting and manipulating both audio and video files from the terminal. It\'s the go-to for this kind of work - if you\'ve used any conversion or simple editing tools there is a good chance that it relies on FFmpeg in some way. When I started using FFmpeg I would have loved more audio-focused beginner tutorials, so this is to help those people who are in the same boat I was.\r\n\r\nBefore we begin you will need to download a few things:\r\n\r\n*   A copy of FFmpeg - download it [here](https://ffmpeg.org).\r\n*   Two audio files to work with - you can [download one here](https://static.deepgram.com/examples/nasa-spacewalk-interview.wav) and [the other here](https://static.deepgram.com/examples/Bueller-Life-moves-pretty-fast.wav).\r\n\r\nCreate a new directory on your computer. Pop FFmpeg and both audio files into it. Then, open the directory in your terminal.\r\n\r\n## Your First Command\r\n\r\nFFMpeg takes one or more files as an input and finishes a command by exporting a file. Between these two points we can further manipulate the file and export the result of the manipulations, but to start we will take in a file and spit out a new file in a different file format.\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav output.mp3\r\n```\r\n\r\nYou should see a new file appear in your directory. The `-i` tells FFmpeg that the next string is an **infile** that operations should happen against. You can provide multiple infiles like so:\r\n\r\n```sh\r\n./ffmpeg -i file1.wav -i file2.wav [...] output.wav\r\n```\r\n\r\n## Overwriting Files Automatically\r\n\r\nIf you run the above command more than once, you will be asked if you should overwrite the existing `output.mp3` file. To automatically overwrite add the `-y` flag before any infiles:\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav output.mp3\r\n```\r\n\r\nTo never overwrite you can replace `-y` with `-n`.\r\n\r\n## Minimizing Terminal Information\r\n\r\nThere is a lot of information shown in the terminal when using FFmpeg. When FFmpeg first runs it will tell you about the configuration of your FFmpeg instance followed by the information related to your command. You can hide the configuration by adding `-hide_banner` anywhere in your command:\r\n\r\n    ./ffmpeg -hide_banner -i nasa-spacewalk-interview.wav output.mp3\r\n\r\n## Trimming Audio\r\n\r\nWe have already seen several options which start with `-LETTER` and are followed by a value if required (like the `-i` needing a file name). To trim an audio file we need two options - a starting sample time and either a duration or an ending point.\r\n\r\nRun this command:\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -t 15 output.mp3\r\n```\r\n\r\nThis will start at 10 seconds and create a clip, from that point, that lasts 15 seconds. The following command will create a sample from 10 seconds **to** 15 seconds (effectively lasting 5 seconds):\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -to 15 output.mp3\r\n```\r\n\r\nWe won\'t cover it in great depth, but you can also provide timestamps in the format `HOURS:MINS:SECS.MILLISECONDS` instead of just a number of seconds:\r\n\r\n    ./ffmpeg -i nasa-spacewalk-interview.wav -ss 00:00:10.5 -to 00:00:15.75 output.mp3\r\n\r\nThat\'s 10.5 seconds to 15.75 seconds.\r\n\r\n## Simple Filters\r\n\r\nSimple audio filters (`-af`) have a single input, do a single thing, and provide a single output. Let\'s see how a few work:\r\n\r\n### Changing Volume Of Whole File\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -af "volume=0.25" output.mp3\r\n```\r\n\r\nThis will set the volume to 25% for the whole sample.\r\n\r\n### Fading In Volume\r\n\r\n```sh\r\n./ffmpeg -y -i demo.wav -af "afade=t=in:ss=0:d=15" output.mp3\r\n```\r\n\r\nThis will fade in audio from the start of the file where it will be silent, to 15 seconds where it will be full volume.\r\n\r\n### Reduce Background Noise\r\n\r\n```sh\r\n./ffmpeg -i nasa-spacewalk-interview.wav -af "highpass=f=200, lowpass=f=3000" output.mp3\r\n```\r\n\r\nThis uses two audio filters at the same time and allows frequencies **higher** than 200hz to **pass**, and under **3000hz** to pass. You may need to play with the exact values. [Thanks to Stack Overflow user av8r for this one!](https://superuser.com/a/835585)\r\n\r\n## Complex Filters\r\n\r\nComplex filters are both complex in their functionality and their syntax. Unlike simple filters which do a single operation to a single input, complex filters can be chained together. We pass in audio by a variable name, do something to it, and export a new variable which we can then further chain in a single filter.\r\n\r\nThey follow this syntax:\r\n\r\n    [INPUT]operations[OUTPUT1];[OUTPUT1]operations[OUTPUT2]\r\n\r\nAs you can see, `OUTPUT1` is created as a result of the first filter, and fed into the next as an input. Inputs are number-based and zero indexed based on the order they are provided as infiles - that means the first infile is `[0]`, the second `[1]`, and so on.\r\n\r\nLet\'s see how this works in practice:\r\n\r\n### Overlaying Two Audio Files\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex "[0][1]amix=inputs=2" output.mp3\r\n```\r\n\r\n`amix` takes in both infiles and creates an output by directly overlaying them.\r\n\r\n### Trimming In Complex Filters\r\n\r\n```sh\r\n./ffmpeg -y -i Bueller-Life-moves-pretty-fast.wav -filter_complex "[0]atrim=start=0:end=5" output.mp3\r\n```\r\n\r\nThis creates a new audio file with just the first 5 seconds of the infile.\r\n\r\n### Fading in Complex Filters\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav -filter_complex "[0]afade=t=in:ss=0:d=10" output.mp3\r\n```\r\n\r\n### Combining Complex Filters\r\n\r\nYou can trim and fade audio files with simple filters, but what makes compelx filters so exciting is that you can combine them. Try this and we\'ll talk about it after:\r\n\r\n```sh\r\n./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex "[0]afade=t=in:ss=0:d=10[fadeIn];[1]atrim=start=0:end=5[trimmed];[fadeIn][trimmed]amix=inputs=2" output.mp3\r\n```\r\n\r\nThere are three parts to this filter:\r\n\r\n1.  `[0]afade=t=in:ss=0:d=10[fadeIn];` takes the first infile and applies a 10 second fade in.\r\n2.  `[1]atrim=start=0:end=5[trimmed];` takes the second infile and trims it to the first 5 seconds.\r\n3.  `[fadeIn][trimmed]amix=inputs=2` takes the output of the above two steps and overlays them.\r\n\r\n## In Summary\r\n\r\nFFmpeg is hugely powerful, and with that comes a learning curve. We\'ve only scratched the surface of what it can do but hopefully, its syntax makes more sense. If you have any questions please feel free to reach out on Twitter - we\'re [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ';
}
function compiledContent() {
  return '<p>FFmpeg is an open source toolkit for converting and manipulating both audio and video files from the terminal. It\u2019s the go-to for this kind of work - if you\u2019ve used any conversion or simple editing tools there is a good chance that it relies on FFmpeg in some way. When I started using FFmpeg I would have loved more audio-focused beginner tutorials, so this is to help those people who are in the same boat I was.</p>\n<p>Before we begin you will need to download a few things:</p>\n<ul>\n<li>A copy of FFmpeg - download it <a href="https://ffmpeg.org">here</a>.</li>\n<li>Two audio files to work with - you can <a href="https://static.deepgram.com/examples/nasa-spacewalk-interview.wav">download one here</a> and <a href="https://static.deepgram.com/examples/Bueller-Life-moves-pretty-fast.wav">the other here</a>.</li>\n</ul>\n<p>Create a new directory on your computer. Pop FFmpeg and both audio files into it. Then, open the directory in your terminal.</p>\n<h2 id="your-first-command">Your First Command</h2>\n<p>FFMpeg takes one or more files as an input and finishes a command by exporting a file. Between these two points we can further manipulate the file and export the result of the manipulations, but to start we will take in a file and spit out a new file in a different file format.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav output.mp3</span></span></code></pre>\n<p>You should see a new file appear in your directory. The <code is:raw>-i</code> tells FFmpeg that the next string is an <strong>infile</strong> that operations should happen against. You can provide multiple infiles like so:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i file1.wav -i file2.wav [...] output.wav</span></span></code></pre>\n<h2 id="overwriting-files-automatically">Overwriting Files Automatically</h2>\n<p>If you run the above command more than once, you will be asked if you should overwrite the existing <code is:raw>output.mp3</code> file. To automatically overwrite add the <code is:raw>-y</code> flag before any infiles:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav output.mp3</span></span></code></pre>\n<p>To never overwrite you can replace <code is:raw>-y</code> with <code is:raw>-n</code>.</p>\n<h2 id="minimizing-terminal-information">Minimizing Terminal Information</h2>\n<p>There is a lot of information shown in the terminal when using FFmpeg. When FFmpeg first runs it will tell you about the configuration of your FFmpeg instance followed by the information related to your command. You can hide the configuration by adding <code is:raw>-hide_banner</code> anywhere in your command:</p>\n<p>./ffmpeg -hide_banner -i nasa-spacewalk-interview.wav output.mp3</p>\n<h2 id="trimming-audio">Trimming Audio</h2>\n<p>We have already seen several options which start with <code is:raw>-LETTER</code> and are followed by a value if required (like the <code is:raw>-i</code> needing a file name). To trim an audio file we need two options - a starting sample time and either a duration or an ending point.</p>\n<p>Run this command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -t 15 output.mp3</span></span></code></pre>\n<p>This will start at 10 seconds and create a clip, from that point, that lasts 15 seconds. The following command will create a sample from 10 seconds <strong>to</strong> 15 seconds (effectively lasting 5 seconds):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -to 15 output.mp3</span></span></code></pre>\n<p>We won\u2019t cover it in great depth, but you can also provide timestamps in the format <code is:raw>HOURS:MINS:SECS.MILLISECONDS</code> instead of just a number of seconds:</p>\n<p>./ffmpeg -i nasa-spacewalk-interview.wav -ss 00:00:10.5 -to 00:00:15.75 output.mp3</p>\n<p>That\u2019s 10.5 seconds to 15.75 seconds.</p>\n<h2 id="simple-filters">Simple Filters</h2>\n<p>Simple audio filters (<code is:raw>-af</code>) have a single input, do a single thing, and provide a single output. Let\u2019s see how a few work:</p>\n<h3 id="changing-volume-of-whole-file">Changing Volume Of Whole File</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -af </span><span style="color: #A5D6FF">&quot;volume=0.25&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This will set the volume to 25% for the whole sample.</p>\n<h3 id="fading-in-volume">Fading In Volume</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i demo.wav -af </span><span style="color: #A5D6FF">&quot;afade=t=in:ss=0:d=15&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This will fade in audio from the start of the file where it will be silent, to 15 seconds where it will be full volume.</p>\n<h3 id="reduce-background-noise">Reduce Background Noise</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -af </span><span style="color: #A5D6FF">&quot;highpass=f=200, lowpass=f=3000&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This uses two audio filters at the same time and allows frequencies <strong>higher</strong> than 200hz to <strong>pass</strong>, and under <strong>3000hz</strong> to pass. You may need to play with the exact values. <a href="https://superuser.com/a/835585">Thanks to Stack Overflow user av8r for this one!</a></p>\n<h2 id="complex-filters">Complex Filters</h2>\n<p>Complex filters are both complex in their functionality and their syntax. Unlike simple filters which do a single operation to a single input, complex filters can be chained together. We pass in audio by a variable name, do something to it, and export a new variable which we can then further chain in a single filter.</p>\n<p>They follow this syntax:</p>\n<p>[INPUT]operations[OUTPUT1];[OUTPUT1]operations[OUTPUT2]</p>\n<p>As you can see, <code is:raw>OUTPUT1</code> is created as a result of the first filter, and fed into the next as an input. Inputs are number-based and zero indexed based on the order they are provided as infiles - that means the first infile is <code is:raw>[0]</code>, the second <code is:raw>[1]</code>, and so on.</p>\n<p>Let\u2019s see how this works in practice:</p>\n<h3 id="overlaying-two-audio-files">Overlaying Two Audio Files</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0][1]amix=inputs=2&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p><code is:raw>amix</code> takes in both infiles and creates an output by directly overlaying them.</p>\n<h3 id="trimming-in-complex-filters">Trimming In Complex Filters</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]atrim=start=0:end=5&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>This creates a new audio file with just the first 5 seconds of the infile.</p>\n<h3 id="fading-in-complex-filters">Fading in Complex Filters</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]afade=t=in:ss=0:d=10&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<h3 id="combining-complex-filters">Combining Complex Filters</h3>\n<p>You can trim and fade audio files with simple filters, but what makes compelx filters so exciting is that you can combine them. Try this and we\u2019ll talk about it after:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]afade=t=in:ss=0:d=10[fadeIn];[1]atrim=start=0:end=5[trimmed];[fadeIn][trimmed]amix=inputs=2&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>\n<p>There are three parts to this filter:</p>\n<ol>\n<li><code is:raw>[0]afade=t=in:ss=0:d=10[fadeIn];</code> takes the first infile and applies a 10 second fade in.</li>\n<li><code is:raw>[1]atrim=start=0:end=5[trimmed];</code> takes the second infile and trims it to the first 5 seconds.</li>\n<li><code is:raw>[fadeIn][trimmed]amix=inputs=2</code> takes the output of the above two steps and overlays them.</li>\n</ol>\n<h2 id="in-summary">In Summary</h2>\n<p>FFmpeg is hugely powerful, and with that comes a learning curve. We\u2019ve only scratched the surface of what it can do but hopefully, its syntax makes more sense. If you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/ffmpeg-beginners/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>FFmpeg is an open source toolkit for converting and manipulating both audio and video files from the terminal. It’s the go-to for this kind of work - if you’ve used any conversion or simple editing tools there is a good chance that it relies on FFmpeg in some way. When I started using FFmpeg I would have loved more audio-focused beginner tutorials, so this is to help those people who are in the same boat I was.</p>
<p>Before we begin you will need to download a few things:</p>
<ul>
<li>A copy of FFmpeg - download it <a href="https://ffmpeg.org">here</a>.</li>
<li>Two audio files to work with - you can <a href="https://static.deepgram.com/examples/nasa-spacewalk-interview.wav">download one here</a> and <a href="https://static.deepgram.com/examples/Bueller-Life-moves-pretty-fast.wav">the other here</a>.</li>
</ul>
<p>Create a new directory on your computer. Pop FFmpeg and both audio files into it. Then, open the directory in your terminal.</p>
<h2 id="your-first-command">Your First Command</h2>
<p>FFMpeg takes one or more files as an input and finishes a command by exporting a file. Between these two points we can further manipulate the file and export the result of the manipulations, but to start we will take in a file and spit out a new file in a different file format.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav output.mp3</span></span></code></pre>
<p>You should see a new file appear in your directory. The <code>-i</code> tells FFmpeg that the next string is an <strong>infile</strong> that operations should happen against. You can provide multiple infiles like so:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i file1.wav -i file2.wav [...] output.wav</span></span></code></pre>
<h2 id="overwriting-files-automatically">Overwriting Files Automatically</h2>
<p>If you run the above command more than once, you will be asked if you should overwrite the existing <code>output.mp3</code> file. To automatically overwrite add the <code>-y</code> flag before any infiles:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav output.mp3</span></span></code></pre>
<p>To never overwrite you can replace <code>-y</code> with <code>-n</code>.</p>
<h2 id="minimizing-terminal-information">Minimizing Terminal Information</h2>
<p>There is a lot of information shown in the terminal when using FFmpeg. When FFmpeg first runs it will tell you about the configuration of your FFmpeg instance followed by the information related to your command. You can hide the configuration by adding <code>-hide_banner</code> anywhere in your command:</p>
<p>./ffmpeg -hide_banner -i nasa-spacewalk-interview.wav output.mp3</p>
<h2 id="trimming-audio">Trimming Audio</h2>
<p>We have already seen several options which start with <code>-LETTER</code> and are followed by a value if required (like the <code>-i</code> needing a file name). To trim an audio file we need two options - a starting sample time and either a duration or an ending point.</p>
<p>Run this command:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -t 15 output.mp3</span></span></code></pre>
<p>This will start at 10 seconds and create a clip, from that point, that lasts 15 seconds. The following command will create a sample from 10 seconds <strong>to</strong> 15 seconds (effectively lasting 5 seconds):</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -ss 10 -to 15 output.mp3</span></span></code></pre>
<p>We won’t cover it in great depth, but you can also provide timestamps in the format <code>HOURS:MINS:SECS.MILLISECONDS</code> instead of just a number of seconds:</p>
<p>./ffmpeg -i nasa-spacewalk-interview.wav -ss 00:00:10.5 -to 00:00:15.75 output.mp3</p>
<p>That’s 10.5 seconds to 15.75 seconds.</p>
<h2 id="simple-filters">Simple Filters</h2>
<p>Simple audio filters (<code>-af</code>) have a single input, do a single thing, and provide a single output. Let’s see how a few work:</p>
<h3 id="changing-volume-of-whole-file">Changing Volume Of Whole File</h3>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -af </span><span style="color: #A5D6FF">&quot;volume=0.25&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>
<p>This will set the volume to 25% for the whole sample.</p>
<h3 id="fading-in-volume">Fading In Volume</h3>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i demo.wav -af </span><span style="color: #A5D6FF">&quot;afade=t=in:ss=0:d=15&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>
<p>This will fade in audio from the start of the file where it will be silent, to 15 seconds where it will be full volume.</p>
<h3 id="reduce-background-noise">Reduce Background Noise</h3>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -i nasa-spacewalk-interview.wav -af </span><span style="color: #A5D6FF">&quot;highpass=f=200, lowpass=f=3000&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>
<p>This uses two audio filters at the same time and allows frequencies <strong>higher</strong> than 200hz to <strong>pass</strong>, and under <strong>3000hz</strong> to pass. You may need to play with the exact values. <a href="https://superuser.com/a/835585">Thanks to Stack Overflow user av8r for this one!</a></p>
<h2 id="complex-filters">Complex Filters</h2>
<p>Complex filters are both complex in their functionality and their syntax. Unlike simple filters which do a single operation to a single input, complex filters can be chained together. We pass in audio by a variable name, do something to it, and export a new variable which we can then further chain in a single filter.</p>
<p>They follow this syntax:</p>
<p>[INPUT]operations[OUTPUT1];[OUTPUT1]operations[OUTPUT2]</p>
<p>As you can see, <code>OUTPUT1</code> is created as a result of the first filter, and fed into the next as an input. Inputs are number-based and zero indexed based on the order they are provided as infiles - that means the first infile is <code>[0]</code>, the second <code>[1]</code>, and so on.</p>
<p>Let’s see how this works in practice:</p>
<h3 id="overlaying-two-audio-files">Overlaying Two Audio Files</h3>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0][1]amix=inputs=2&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>
<p><code>amix</code> takes in both infiles and creates an output by directly overlaying them.</p>
<h3 id="trimming-in-complex-filters">Trimming In Complex Filters</h3>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]atrim=start=0:end=5&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>
<p>This creates a new audio file with just the first 5 seconds of the infile.</p>
<h3 id="fading-in-complex-filters">Fading in Complex Filters</h3>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]afade=t=in:ss=0:d=10&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>
<h3 id="combining-complex-filters">Combining Complex Filters</h3>
<p>You can trim and fade audio files with simple filters, but what makes compelx filters so exciting is that you can combine them. Try this and we’ll talk about it after:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">./ffmpeg -y -i nasa-spacewalk-interview.wav -i Bueller-Life-moves-pretty-fast.wav -filter_complex </span><span style="color: #A5D6FF">&quot;[0]afade=t=in:ss=0:d=10[fadeIn];[1]atrim=start=0:end=5[trimmed];[fadeIn][trimmed]amix=inputs=2&quot;</span><span style="color: #C9D1D9"> output.mp3</span></span></code></pre>
<p>There are three parts to this filter:</p>
<ol>
<li><code>[0]afade=t=in:ss=0:d=10[fadeIn];</code> takes the first infile and applies a 10 second fade in.</li>
<li><code>[1]atrim=start=0:end=5[trimmed];</code> takes the second infile and trims it to the first 5 seconds.</li>
<li><code>[fadeIn][trimmed]amix=inputs=2</code> takes the output of the above two steps and overlays them.</li>
</ol>
<h2 id="in-summary">In Summary</h2>
<p>FFmpeg is hugely powerful, and with that comes a learning curve. We’ve only scratched the surface of what it can do but hopefully, its syntax makes more sense. If you have any questions please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/ffmpeg-beginners/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
