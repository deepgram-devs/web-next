import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 2, "slug": "the-code", "text": "The Code" }], "source": "Imagine having the ability to transcribe your voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Twilio with Deepgram.\n\nWith Twilio, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.\n\nHere\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.\n\n![Deepgram voice-to-text with Twilio](https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/deepgram_twilio_transcribe.png)\n\n## Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our [Deepgram console](https://console.deepgram.com/signup?jump=keys). Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\n\nMake sure to go to [Twilio](https://www.twilio.com/login?g=%2Fconsole-zen%3F&t=9de6cbac864dd16dddf0f56899857674d172ed98651d03476c82bc96f0bf39e0) and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities.\n\nWe\u2019ll also need two phones to make the outgoing call and another to receive a call.\n\nIn our project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in our application. Ngrok will forward requests to our application that is running locally. You can download it [here](https://ngrok.com/).\n\nNext, let\u2019s make a directory anywhere we\u2019d like.\n\n```bash\nmkdir deepgram-twilio\n```\n\nThen change into that directory so we can start adding things to it.\n\n```bash\ncd deepgram-twilio\n```\n\nWe\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n<Panel> Panel with important note\nIt\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide. </Panel>\n\nEnsure our virtual environment is activated because we\u2019ll install dependencies inside. If our virtual environment is named `venv`, then activate it.\n\n```bash\nsource venv/bin/activate\n```\n\nLet\u2019s install our dependencies for our project by running the below `pip` installs from our terminal inside our virtual environment.\n\n```bash\n pip install deepgram-sdk\n pip install twilio\n pip install python-dotenv\n pip install Flask\n pip install 'flask[async]'\n pip install pysondb\n```\n\nNow we can open up our favorite editor and create a file called `deepgram-twilio-call.py`. If you\u2019d like to make it from the command line, do this:\n\n```\ntouch deepgram-twilio-call.py\n```\n\n## The Code\n\nNow to the fun part! Open our script called `deepgram-twilio-call.py` and add the following code to make sure our Flask application runs without errors:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.get(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\nRun our Flask application by typing this into the terminal `python deepgram-twilio-call.py`.\n\nThen pull up the browser window by going to `http://127.0.0.1:5000/` and we should see the text `Hello World`.\n\nAt the same time our application is running, open a new terminal window and type ![ngrok terminal with python flask](https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/ngrok-terminal-with-python-flask.png):\n\n```\nngrok http 127.0.0.1:5000\n```\n\nCopy the ngrok url and add it to Twilio by navigating to \u2018Phone Numbers -> Manage -> Active Numbers\u2019, then click on your Twilio phone number.\n\n![manage Twilio phone number](https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/active-twilio-numbers.png)\n\nScroll down to the \u2018Voice\u2019 section and add the webhook, our ngrok URL with the recordings endpoint and save. Like this `https://6d71-104-6-9-133.ngrok.io/recordings`\n\n![twilio webhook ngrok](https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/twilio-webhook-ngrok.png)\n\nWe\u2019ll implement the `/recordings` endpoint in a few.\n\nLeave both terminals running as we\u2019ll need these to run our application and receive the phone call.\n\nLet\u2019s store our environment variables in a `.env` file with the following:\n\n```\nDEEPGRAM_API_KEY=[\u2018YOUR_API_KEY\u2019]\nRECEIVER_NUMBER=[\u2018PHONE_NUMBER_TO_RECEIVE_CALL\u2019]\n```\n\nWe can replace `YOUR_API_KEY` with the API key we received from signing up in the Deepgram console, and the `PHONE_NUMBER_TO_RECEIVE_CALL` is the phone number we would like to receive the call.\n\nLet\u2019s replace the code in our `deepgram-twilio-call.py` with the following:\n\n```python\nimport asyncio\nimport json\nimport os\n\nfrom flask import Flask, request, render_template\nfrom deepgram import Deepgram\nfrom twilio.twiml.voice_response import Dial, VoiceResponse\nfrom twilio.rest import Client\nfrom pysondb import db\nfrom dotenv import load_dotenv\n\napp = Flask(__name__)\n\ncalls_db=db.getDb('calls')\n\nload_dotenv()\n\n@app.post(\"/inbound\")\ndef inbound_call():\n  response = VoiceResponse()\n  dial = Dial(\n      record='record-from-answer-dual',\n      recording_status_callback='https://6d71-104-6-9-133.ngrok.io/recordings'\n      )\n\n  dial.number(os.getenv(\"RECEIVER_NUMBER\"))\n  response.append(dial)\n\n  return str(response)\n```\n\nHere we are importing our libraries and creating a new instance of a Flask application. Then we create a new database named `calls`. We are using a lightweight JSON database called [PysonDB](https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija).\n\nWe create the `/inbound` endpoint, which allows us to make a voice call. The parameter `record='record-from-answer-dual'` will help us make a dual call or a phone that can call another.\n\nNext, in our `/recordings` route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of our call and using speech recognition to transcribe the audio. We check if `results` is in the response and format it by using a list comprehension and storing the results in `utterances`. We then add the `utterances` to the `calls` database.\n\n```python\n@app.route(\"/recordings\", methods=['GET', 'POST'])\nasync def get_recordings():\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\n\n   recording_url = request.form['RecordingUrl']\n   source = {'url': recording_url}\n   transcript_data = await deepgram.transcription.prerecorded(source, {'punctuate': True,\n    'utterances': True,\n    'model': 'phonecall',\n    'multichannel': True\n  })\n\n   if 'results' in transcript_data:\n       utterances = [\n           {\n               'channel': utterance['channel'],\n               'transcript': utterance['transcript']\n           } for utterance in transcript_data['results']['utterances']\n       ]\n\n       calls_db.addMany(utterances)\n\n       return json.dumps(utterances, indent=4)\n```\n\nWe can see how the utterances will look after they\u2019re formatted:\n\n```\n[{'channel': 0, 'transcript': 'Hello?', 'id': 288397603074461838},\n{'channel': 1, 'transcript': 'Hello?', 'id': 109089630999017748},\n{'channel': 0, 'transcript': \"Hey. How's it going? It's good to hear from you.\", 'id': 124620676610936565},\n{'channel': 0, 'transcript': 'Thanks. You too.', 'id': 182036969834868158},\n{'channel': 1, 'transcript': 'Thanks. You too.', 'id': 817052835121297399}]\n```\n\nLastly, let\u2019s add our `/transcribe` route and a templates folder with an `index.html` file that will display our phone speech-to-text transcript.\n\nIn our Python file, add the following code, which will get the voice-to-text transcript from the database and renders them in the HTML template.\n\n```python\n@app.route(\"/transcribe\", methods=['GET', 'POST'])\ndef transcribe_call():\n   context = calls_db.getAll()\n   return render_template(\"index.html\", context=context )\n\n\nif __name__ == \"__main__\":\n   app.run(debug=True)\n```\n\nCreate a folder in our project directory called `templates` and add an `index.html` file. In that file, add the following HTML and Jinja code:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    {% for c in context %} {{ c.transcript }} <br />\n    {% endfor %}\n  </body>\n</html>\n```\n\nHere we loop through every transcript and display it on the screen.\n\nFinally, let\u2019s try making a phone call and using your non-Twilio phone to initiate a phone conversation with the phone number you provided in the environment variable `RECEIVER_NUMBER`. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in our browser.\n\nCongratulations on building a speech-to-text Python project with Twilio and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).", "html": `<p>Imagine having the ability to transcribe your voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Twilio with Deepgram.</p>
<p>With Twilio, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.</p>
<p>Here\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/deepgram_twilio_transcribe.png" alt="Deepgram voice-to-text with Twilio"></p>
<h2 id="getting-started">Getting Started</h2>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Make sure to go to <a href="https://www.twilio.com/login?g=%2Fconsole-zen%3F&#x26;t=9de6cbac864dd16dddf0f56899857674d172ed98651d03476c82bc96f0bf39e0">Twilio</a> and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities.</p>
<p>We\u2019ll also need two phones to make the outgoing call and another to receive a call.</p>
<p>In our project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in our application. Ngrok will forward requests to our application that is running locally. You can download it <a href="https://ngrok.com/">here</a>.</p>
<p>Next, let\u2019s make a directory anywhere we\u2019d like.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mkdir deepgram-twilio</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> deepgram-twilio</span></span></code></pre>
<p>We\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<Panel> Panel with important note
It\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide. </Panel>
<p>Ensure our virtual environment is activated because we\u2019ll install dependencies inside. If our virtual environment is named <code is:raw>venv</code>, then activate it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> venv/bin/activate</span></span></code></pre>
<p>Let\u2019s install our dependencies for our project by running the below <code is:raw>pip</code> installs from our terminal inside our virtual environment.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install twilio</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install python-dotenv</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install Flask</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install </span><span style="color: #A5D6FF">&#39;flask[async]&#39;</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install pysondb</span></span></code></pre>
<p>Now we can open up our favorite editor and create a file called <code is:raw>deepgram-twilio-call.py</code>. If you\u2019d like to make it from the command line, do this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch deepgram-twilio-call.py</span></span></code></pre>
<h2 id="the-code">The Code</h2>
<p>Now to the fun part! Open our script called <code is:raw>deepgram-twilio-call.py</code> and add the following code to make sure our Flask application runs without errors:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">hello</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello World!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">    app.run()</span></span></code></pre>
<p>Run our Flask application by typing this into the terminal <code is:raw>python deepgram-twilio-call.py</code>.</p>
<p>Then pull up the browser window by going to <code is:raw>http://127.0.0.1:5000/</code> and we should see the text <code is:raw>Hello World</code>.</p>
<p>At the same time our application is running, open a new terminal window and type <img src="https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/ngrok-terminal-with-python-flask.png" alt="ngrok terminal with python flask">:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">ngrok http 127.0.0.1:5000</span></span></code></pre>
<p>Copy the ngrok url and add it to Twilio by navigating to \u2018Phone Numbers -> Manage -> Active Numbers\u2019, then click on your Twilio phone number.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/active-twilio-numbers.png" alt="manage Twilio phone number"></p>
<p>Scroll down to the \u2018Voice\u2019 section and add the webhook, our ngrok URL with the recordings endpoint and save. Like this <code is:raw>https://6d71-104-6-9-133.ngrok.io/recordings</code></p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/twilio-webhook-ngrok.png" alt="twilio webhook ngrok"></p>
<p>We\u2019ll implement the <code is:raw>/recordings</code> endpoint in a few.</p>
<p>Leave both terminals running as we\u2019ll need these to run our application and receive the phone call.</p>
<p>Let\u2019s store our environment variables in a <code is:raw>.env</code> file with the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY=[\u2018YOUR_API_KEY\u2019]</span></span>
<span class="line"><span style="color: #c9d1d9">RECEIVER_NUMBER=[\u2018PHONE_NUMBER_TO_RECEIVE_CALL\u2019]</span></span></code></pre>
<p>We can replace <code is:raw>YOUR_API_KEY</code> with the API key we received from signing up in the Deepgram console, and the <code is:raw>PHONE_NUMBER_TO_RECEIVE_CALL</code> is the phone number we would like to receive the call.</p>
<p>Let\u2019s replace the code in our <code is:raw>deepgram-twilio-call.py</code> with the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, request, render_template</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> twilio.twiml.voice_response </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dial, VoiceResponse</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> twilio.rest </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Client</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pysondb </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> db</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">calls_db</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">db.getDb(</span><span style="color: #A5D6FF">&#39;calls&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/inbound&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">inbound_call</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">  response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> VoiceResponse()</span></span>
<span class="line"><span style="color: #C9D1D9">  dial </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Dial(</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA657">record</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;record-from-answer-dual&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA657">recording_status_callback</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;https://6d71-104-6-9-133.ngrok.io/recordings&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">      )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  dial.number(os.getenv(</span><span style="color: #A5D6FF">&quot;RECEIVER_NUMBER&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  response.append(dial)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">str</span><span style="color: #C9D1D9">(response)</span></span></code></pre>
<p>Here we are importing our libraries and creating a new instance of a Flask application. Then we create a new database named <code is:raw>calls</code>. We are using a lightweight JSON database called <a href="https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija">PysonDB</a>.</p>
<p>We create the <code is:raw>/inbound</code> endpoint, which allows us to make a voice call. The parameter <code is:raw>record='record-from-answer-dual'</code> will help us make a dual call or a phone that can call another.</p>
<p>Next, in our <code is:raw>/recordings</code> route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of our call and using speech recognition to transcribe the audio. We check if <code is:raw>results</code> is in the response and format it by using a list comprehension and storing the results in <code is:raw>utterances</code>. We then add the <code is:raw>utterances</code> to the <code is:raw>calls</code> database.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/recordings&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_recordings</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   recording_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;RecordingUrl&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">   source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: recording_url}</span></span>
<span class="line"><span style="color: #C9D1D9">   transcript_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;model&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;multichannel&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       utterances </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">           {</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           } </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">       ]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       calls_db.addMany(utterances)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> json.dumps(utterances, </span><span style="color: #FFA657">indent</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>We can see how the utterances will look after they\u2019re formatted:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">[{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 288397603074461838},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 109089630999017748},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 0, &#39;transcript&#39;: &quot;Hey. How&#39;s it going? It&#39;s good to hear from you.&quot;, &#39;id&#39;: 124620676610936565},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Thanks. You too.&#39;, &#39;id&#39;: 182036969834868158},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Thanks. You too.&#39;, &#39;id&#39;: 817052835121297399}]</span></span></code></pre>
<p>Lastly, let\u2019s add our <code is:raw>/transcribe</code> route and a templates folder with an <code is:raw>index.html</code> file that will display our phone speech-to-text transcript.</p>
<p>In our Python file, add the following code, which will get the voice-to-text transcript from the database and renders them in the HTML template.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/transcribe&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribe_call</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   context </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> calls_db.getAll()</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&quot;index.html&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">context )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   app.run(</span><span style="color: #FFA657">debug</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Create a folder in our project directory called <code is:raw>templates</code> and add an <code is:raw>index.html</code> file. In that file, add the following HTML and Jinja code:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Document&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% for c in context %} {{ c.transcript }} &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Here we loop through every transcript and display it on the screen.</p>
<p>Finally, let\u2019s try making a phone call and using your non-Twilio phone to initiate a phone conversation with the phone number you provided in the environment variable <code is:raw>RECEIVER_NUMBER</code>. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in our browser.</p>
<p>Congratulations on building a speech-to-text Python project with Twilio and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>` };
const frontmatter = { "title": "Speech Recognition with Twilio and Python", "description": "Use Deepgram's speech-to-text features with Python and Twilio to transcribe audio such as incoming phone calls.", "date": "2022-04-13T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1649274528/blog/2022/04/python-deepgram-twilio/Speech-Analytics-Real-Time-Audio-w-Twilio-Python%402x.jpg", "authors": ["tonya-sims"], "category": "tutorial", "tags": ["python", "twilio"], "seo": { "title": "Speech Recognition with Twilio and Python", "description": "Use Deepgram's speech-to-text features with Python and Twilio to transcribe audio such as incoming phone calls." }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454075/blog/python-deepgram-twilio/ograph.png" }, "shorturls": { "share": "https://dpgr.am/8ff4f6b", "twitter": "https://dpgr.am/0abeb3e", "linkedin": "https://dpgr.am/4674338", "reddit": "https://dpgr.am/25a704d", "facebook": "https://dpgr.am/a3fa9d8" }, "astro": { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 2, "slug": "the-code", "text": "The Code" }], "source": "Imagine having the ability to transcribe your voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Twilio with Deepgram.\n\nWith Twilio, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.\n\nHere\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.\n\n![Deepgram voice-to-text with Twilio](https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/deepgram_twilio_transcribe.png)\n\n## Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our [Deepgram console](https://console.deepgram.com/signup?jump=keys). Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\n\nMake sure to go to [Twilio](https://www.twilio.com/login?g=%2Fconsole-zen%3F&t=9de6cbac864dd16dddf0f56899857674d172ed98651d03476c82bc96f0bf39e0) and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities.\n\nWe\u2019ll also need two phones to make the outgoing call and another to receive a call.\n\nIn our project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in our application. Ngrok will forward requests to our application that is running locally. You can download it [here](https://ngrok.com/).\n\nNext, let\u2019s make a directory anywhere we\u2019d like.\n\n```bash\nmkdir deepgram-twilio\n```\n\nThen change into that directory so we can start adding things to it.\n\n```bash\ncd deepgram-twilio\n```\n\nWe\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n<Panel> Panel with important note\nIt\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide. </Panel>\n\nEnsure our virtual environment is activated because we\u2019ll install dependencies inside. If our virtual environment is named `venv`, then activate it.\n\n```bash\nsource venv/bin/activate\n```\n\nLet\u2019s install our dependencies for our project by running the below `pip` installs from our terminal inside our virtual environment.\n\n```bash\n pip install deepgram-sdk\n pip install twilio\n pip install python-dotenv\n pip install Flask\n pip install 'flask[async]'\n pip install pysondb\n```\n\nNow we can open up our favorite editor and create a file called `deepgram-twilio-call.py`. If you\u2019d like to make it from the command line, do this:\n\n```\ntouch deepgram-twilio-call.py\n```\n\n## The Code\n\nNow to the fun part! Open our script called `deepgram-twilio-call.py` and add the following code to make sure our Flask application runs without errors:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.get(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\nRun our Flask application by typing this into the terminal `python deepgram-twilio-call.py`.\n\nThen pull up the browser window by going to `http://127.0.0.1:5000/` and we should see the text `Hello World`.\n\nAt the same time our application is running, open a new terminal window and type ![ngrok terminal with python flask](https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/ngrok-terminal-with-python-flask.png):\n\n```\nngrok http 127.0.0.1:5000\n```\n\nCopy the ngrok url and add it to Twilio by navigating to \u2018Phone Numbers -> Manage -> Active Numbers\u2019, then click on your Twilio phone number.\n\n![manage Twilio phone number](https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/active-twilio-numbers.png)\n\nScroll down to the \u2018Voice\u2019 section and add the webhook, our ngrok URL with the recordings endpoint and save. Like this `https://6d71-104-6-9-133.ngrok.io/recordings`\n\n![twilio webhook ngrok](https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/twilio-webhook-ngrok.png)\n\nWe\u2019ll implement the `/recordings` endpoint in a few.\n\nLeave both terminals running as we\u2019ll need these to run our application and receive the phone call.\n\nLet\u2019s store our environment variables in a `.env` file with the following:\n\n```\nDEEPGRAM_API_KEY=[\u2018YOUR_API_KEY\u2019]\nRECEIVER_NUMBER=[\u2018PHONE_NUMBER_TO_RECEIVE_CALL\u2019]\n```\n\nWe can replace `YOUR_API_KEY` with the API key we received from signing up in the Deepgram console, and the `PHONE_NUMBER_TO_RECEIVE_CALL` is the phone number we would like to receive the call.\n\nLet\u2019s replace the code in our `deepgram-twilio-call.py` with the following:\n\n```python\nimport asyncio\nimport json\nimport os\n\nfrom flask import Flask, request, render_template\nfrom deepgram import Deepgram\nfrom twilio.twiml.voice_response import Dial, VoiceResponse\nfrom twilio.rest import Client\nfrom pysondb import db\nfrom dotenv import load_dotenv\n\napp = Flask(__name__)\n\ncalls_db=db.getDb('calls')\n\nload_dotenv()\n\n@app.post(\"/inbound\")\ndef inbound_call():\n  response = VoiceResponse()\n  dial = Dial(\n      record='record-from-answer-dual',\n      recording_status_callback='https://6d71-104-6-9-133.ngrok.io/recordings'\n      )\n\n  dial.number(os.getenv(\"RECEIVER_NUMBER\"))\n  response.append(dial)\n\n  return str(response)\n```\n\nHere we are importing our libraries and creating a new instance of a Flask application. Then we create a new database named `calls`. We are using a lightweight JSON database called [PysonDB](https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija).\n\nWe create the `/inbound` endpoint, which allows us to make a voice call. The parameter `record='record-from-answer-dual'` will help us make a dual call or a phone that can call another.\n\nNext, in our `/recordings` route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of our call and using speech recognition to transcribe the audio. We check if `results` is in the response and format it by using a list comprehension and storing the results in `utterances`. We then add the `utterances` to the `calls` database.\n\n```python\n@app.route(\"/recordings\", methods=['GET', 'POST'])\nasync def get_recordings():\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\n\n   recording_url = request.form['RecordingUrl']\n   source = {'url': recording_url}\n   transcript_data = await deepgram.transcription.prerecorded(source, {'punctuate': True,\n    'utterances': True,\n    'model': 'phonecall',\n    'multichannel': True\n  })\n\n   if 'results' in transcript_data:\n       utterances = [\n           {\n               'channel': utterance['channel'],\n               'transcript': utterance['transcript']\n           } for utterance in transcript_data['results']['utterances']\n       ]\n\n       calls_db.addMany(utterances)\n\n       return json.dumps(utterances, indent=4)\n```\n\nWe can see how the utterances will look after they\u2019re formatted:\n\n```\n[{'channel': 0, 'transcript': 'Hello?', 'id': 288397603074461838},\n{'channel': 1, 'transcript': 'Hello?', 'id': 109089630999017748},\n{'channel': 0, 'transcript': \"Hey. How's it going? It's good to hear from you.\", 'id': 124620676610936565},\n{'channel': 0, 'transcript': 'Thanks. You too.', 'id': 182036969834868158},\n{'channel': 1, 'transcript': 'Thanks. You too.', 'id': 817052835121297399}]\n```\n\nLastly, let\u2019s add our `/transcribe` route and a templates folder with an `index.html` file that will display our phone speech-to-text transcript.\n\nIn our Python file, add the following code, which will get the voice-to-text transcript from the database and renders them in the HTML template.\n\n```python\n@app.route(\"/transcribe\", methods=['GET', 'POST'])\ndef transcribe_call():\n   context = calls_db.getAll()\n   return render_template(\"index.html\", context=context )\n\n\nif __name__ == \"__main__\":\n   app.run(debug=True)\n```\n\nCreate a folder in our project directory called `templates` and add an `index.html` file. In that file, add the following HTML and Jinja code:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    {% for c in context %} {{ c.transcript }} <br />\n    {% endfor %}\n  </body>\n</html>\n```\n\nHere we loop through every transcript and display it on the screen.\n\nFinally, let\u2019s try making a phone call and using your non-Twilio phone to initiate a phone conversation with the phone number you provided in the environment variable `RECEIVER_NUMBER`. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in our browser.\n\nCongratulations on building a speech-to-text Python project with Twilio and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).", "html": `<p>Imagine having the ability to transcribe your voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Twilio with Deepgram.</p>
<p>With Twilio, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.</p>
<p>Here\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/deepgram_twilio_transcribe.png" alt="Deepgram voice-to-text with Twilio"></p>
<h2 id="getting-started">Getting Started</h2>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Make sure to go to <a href="https://www.twilio.com/login?g=%2Fconsole-zen%3F&#x26;t=9de6cbac864dd16dddf0f56899857674d172ed98651d03476c82bc96f0bf39e0">Twilio</a> and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities.</p>
<p>We\u2019ll also need two phones to make the outgoing call and another to receive a call.</p>
<p>In our project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in our application. Ngrok will forward requests to our application that is running locally. You can download it <a href="https://ngrok.com/">here</a>.</p>
<p>Next, let\u2019s make a directory anywhere we\u2019d like.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mkdir deepgram-twilio</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> deepgram-twilio</span></span></code></pre>
<p>We\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<Panel> Panel with important note
It\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide. </Panel>
<p>Ensure our virtual environment is activated because we\u2019ll install dependencies inside. If our virtual environment is named <code is:raw>venv</code>, then activate it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> venv/bin/activate</span></span></code></pre>
<p>Let\u2019s install our dependencies for our project by running the below <code is:raw>pip</code> installs from our terminal inside our virtual environment.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install twilio</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install python-dotenv</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install Flask</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install </span><span style="color: #A5D6FF">&#39;flask[async]&#39;</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install pysondb</span></span></code></pre>
<p>Now we can open up our favorite editor and create a file called <code is:raw>deepgram-twilio-call.py</code>. If you\u2019d like to make it from the command line, do this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch deepgram-twilio-call.py</span></span></code></pre>
<h2 id="the-code">The Code</h2>
<p>Now to the fun part! Open our script called <code is:raw>deepgram-twilio-call.py</code> and add the following code to make sure our Flask application runs without errors:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">hello</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello World!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">    app.run()</span></span></code></pre>
<p>Run our Flask application by typing this into the terminal <code is:raw>python deepgram-twilio-call.py</code>.</p>
<p>Then pull up the browser window by going to <code is:raw>http://127.0.0.1:5000/</code> and we should see the text <code is:raw>Hello World</code>.</p>
<p>At the same time our application is running, open a new terminal window and type <img src="https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/ngrok-terminal-with-python-flask.png" alt="ngrok terminal with python flask">:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">ngrok http 127.0.0.1:5000</span></span></code></pre>
<p>Copy the ngrok url and add it to Twilio by navigating to \u2018Phone Numbers -> Manage -> Active Numbers\u2019, then click on your Twilio phone number.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/active-twilio-numbers.png" alt="manage Twilio phone number"></p>
<p>Scroll down to the \u2018Voice\u2019 section and add the webhook, our ngrok URL with the recordings endpoint and save. Like this <code is:raw>https://6d71-104-6-9-133.ngrok.io/recordings</code></p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/twilio-webhook-ngrok.png" alt="twilio webhook ngrok"></p>
<p>We\u2019ll implement the <code is:raw>/recordings</code> endpoint in a few.</p>
<p>Leave both terminals running as we\u2019ll need these to run our application and receive the phone call.</p>
<p>Let\u2019s store our environment variables in a <code is:raw>.env</code> file with the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY=[\u2018YOUR_API_KEY\u2019]</span></span>
<span class="line"><span style="color: #c9d1d9">RECEIVER_NUMBER=[\u2018PHONE_NUMBER_TO_RECEIVE_CALL\u2019]</span></span></code></pre>
<p>We can replace <code is:raw>YOUR_API_KEY</code> with the API key we received from signing up in the Deepgram console, and the <code is:raw>PHONE_NUMBER_TO_RECEIVE_CALL</code> is the phone number we would like to receive the call.</p>
<p>Let\u2019s replace the code in our <code is:raw>deepgram-twilio-call.py</code> with the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, request, render_template</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> twilio.twiml.voice_response </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dial, VoiceResponse</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> twilio.rest </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Client</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pysondb </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> db</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">calls_db</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">db.getDb(</span><span style="color: #A5D6FF">&#39;calls&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/inbound&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">inbound_call</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">  response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> VoiceResponse()</span></span>
<span class="line"><span style="color: #C9D1D9">  dial </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Dial(</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA657">record</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;record-from-answer-dual&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA657">recording_status_callback</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;https://6d71-104-6-9-133.ngrok.io/recordings&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">      )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  dial.number(os.getenv(</span><span style="color: #A5D6FF">&quot;RECEIVER_NUMBER&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  response.append(dial)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">str</span><span style="color: #C9D1D9">(response)</span></span></code></pre>
<p>Here we are importing our libraries and creating a new instance of a Flask application. Then we create a new database named <code is:raw>calls</code>. We are using a lightweight JSON database called <a href="https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija">PysonDB</a>.</p>
<p>We create the <code is:raw>/inbound</code> endpoint, which allows us to make a voice call. The parameter <code is:raw>record='record-from-answer-dual'</code> will help us make a dual call or a phone that can call another.</p>
<p>Next, in our <code is:raw>/recordings</code> route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of our call and using speech recognition to transcribe the audio. We check if <code is:raw>results</code> is in the response and format it by using a list comprehension and storing the results in <code is:raw>utterances</code>. We then add the <code is:raw>utterances</code> to the <code is:raw>calls</code> database.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/recordings&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_recordings</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   recording_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;RecordingUrl&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">   source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: recording_url}</span></span>
<span class="line"><span style="color: #C9D1D9">   transcript_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;model&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;multichannel&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       utterances </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">           {</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           } </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">       ]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       calls_db.addMany(utterances)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> json.dumps(utterances, </span><span style="color: #FFA657">indent</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>We can see how the utterances will look after they\u2019re formatted:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">[{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 288397603074461838},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 109089630999017748},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 0, &#39;transcript&#39;: &quot;Hey. How&#39;s it going? It&#39;s good to hear from you.&quot;, &#39;id&#39;: 124620676610936565},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Thanks. You too.&#39;, &#39;id&#39;: 182036969834868158},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Thanks. You too.&#39;, &#39;id&#39;: 817052835121297399}]</span></span></code></pre>
<p>Lastly, let\u2019s add our <code is:raw>/transcribe</code> route and a templates folder with an <code is:raw>index.html</code> file that will display our phone speech-to-text transcript.</p>
<p>In our Python file, add the following code, which will get the voice-to-text transcript from the database and renders them in the HTML template.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/transcribe&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribe_call</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   context </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> calls_db.getAll()</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&quot;index.html&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">context )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   app.run(</span><span style="color: #FFA657">debug</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Create a folder in our project directory called <code is:raw>templates</code> and add an <code is:raw>index.html</code> file. In that file, add the following HTML and Jinja code:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Document&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% for c in context %} {{ c.transcript }} &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Here we loop through every transcript and display it on the screen.</p>
<p>Finally, let\u2019s try making a phone call and using your non-Twilio phone to initiate a phone conversation with the phone number you provided in the environment variable <code is:raw>RECEIVER_NUMBER</code>. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in our browser.</p>
<p>Congratulations on building a speech-to-text Python project with Twilio and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>` }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/python-deepgram-twilio/index.md" };
function rawContent() {
  return "Imagine having the ability to transcribe your voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Twilio with Deepgram.\n\nWith Twilio, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.\n\nHere\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.\n\n![Deepgram voice-to-text with Twilio](https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/deepgram_twilio_transcribe.png)\n\n## Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our [Deepgram console](https://console.deepgram.com/signup?jump=keys). Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\n\nMake sure to go to [Twilio](https://www.twilio.com/login?g=%2Fconsole-zen%3F&t=9de6cbac864dd16dddf0f56899857674d172ed98651d03476c82bc96f0bf39e0) and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities.\n\nWe\u2019ll also need two phones to make the outgoing call and another to receive a call.\n\nIn our project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in our application. Ngrok will forward requests to our application that is running locally. You can download it [here](https://ngrok.com/).\n\nNext, let\u2019s make a directory anywhere we\u2019d like.\n\n```bash\nmkdir deepgram-twilio\n```\n\nThen change into that directory so we can start adding things to it.\n\n```bash\ncd deepgram-twilio\n```\n\nWe\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n<Panel> Panel with important note\nIt\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide. </Panel>\n\nEnsure our virtual environment is activated because we\u2019ll install dependencies inside. If our virtual environment is named `venv`, then activate it.\n\n```bash\nsource venv/bin/activate\n```\n\nLet\u2019s install our dependencies for our project by running the below `pip` installs from our terminal inside our virtual environment.\n\n```bash\n pip install deepgram-sdk\n pip install twilio\n pip install python-dotenv\n pip install Flask\n pip install 'flask[async]'\n pip install pysondb\n```\n\nNow we can open up our favorite editor and create a file called `deepgram-twilio-call.py`. If you\u2019d like to make it from the command line, do this:\n\n```\ntouch deepgram-twilio-call.py\n```\n\n## The Code\n\nNow to the fun part! Open our script called `deepgram-twilio-call.py` and add the following code to make sure our Flask application runs without errors:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.get(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\nRun our Flask application by typing this into the terminal `python deepgram-twilio-call.py`.\n\nThen pull up the browser window by going to `http://127.0.0.1:5000/` and we should see the text `Hello World`.\n\nAt the same time our application is running, open a new terminal window and type ![ngrok terminal with python flask](https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/ngrok-terminal-with-python-flask.png):\n\n```\nngrok http 127.0.0.1:5000\n```\n\nCopy the ngrok url and add it to Twilio by navigating to \u2018Phone Numbers -> Manage -> Active Numbers\u2019, then click on your Twilio phone number.\n\n![manage Twilio phone number](https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/active-twilio-numbers.png)\n\nScroll down to the \u2018Voice\u2019 section and add the webhook, our ngrok URL with the recordings endpoint and save. Like this `https://6d71-104-6-9-133.ngrok.io/recordings`\n\n![twilio webhook ngrok](https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/twilio-webhook-ngrok.png)\n\nWe\u2019ll implement the `/recordings` endpoint in a few.\n\nLeave both terminals running as we\u2019ll need these to run our application and receive the phone call.\n\nLet\u2019s store our environment variables in a `.env` file with the following:\n\n```\nDEEPGRAM_API_KEY=[\u2018YOUR_API_KEY\u2019]\nRECEIVER_NUMBER=[\u2018PHONE_NUMBER_TO_RECEIVE_CALL\u2019]\n```\n\nWe can replace `YOUR_API_KEY` with the API key we received from signing up in the Deepgram console, and the `PHONE_NUMBER_TO_RECEIVE_CALL` is the phone number we would like to receive the call.\n\nLet\u2019s replace the code in our `deepgram-twilio-call.py` with the following:\n\n```python\nimport asyncio\nimport json\nimport os\n\nfrom flask import Flask, request, render_template\nfrom deepgram import Deepgram\nfrom twilio.twiml.voice_response import Dial, VoiceResponse\nfrom twilio.rest import Client\nfrom pysondb import db\nfrom dotenv import load_dotenv\n\napp = Flask(__name__)\n\ncalls_db=db.getDb('calls')\n\nload_dotenv()\n\n@app.post(\"/inbound\")\ndef inbound_call():\n  response = VoiceResponse()\n  dial = Dial(\n      record='record-from-answer-dual',\n      recording_status_callback='https://6d71-104-6-9-133.ngrok.io/recordings'\n      )\n\n  dial.number(os.getenv(\"RECEIVER_NUMBER\"))\n  response.append(dial)\n\n  return str(response)\n```\n\nHere we are importing our libraries and creating a new instance of a Flask application. Then we create a new database named `calls`. We are using a lightweight JSON database called [PysonDB](https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija).\n\nWe create the `/inbound` endpoint, which allows us to make a voice call. The parameter `record='record-from-answer-dual'` will help us make a dual call or a phone that can call another.\n\nNext, in our `/recordings` route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of our call and using speech recognition to transcribe the audio. We check if `results` is in the response and format it by using a list comprehension and storing the results in `utterances`. We then add the `utterances` to the `calls` database.\n\n```python\n@app.route(\"/recordings\", methods=['GET', 'POST'])\nasync def get_recordings():\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\n\n   recording_url = request.form['RecordingUrl']\n   source = {'url': recording_url}\n   transcript_data = await deepgram.transcription.prerecorded(source, {'punctuate': True,\n    'utterances': True,\n    'model': 'phonecall',\n    'multichannel': True\n  })\n\n   if 'results' in transcript_data:\n       utterances = [\n           {\n               'channel': utterance['channel'],\n               'transcript': utterance['transcript']\n           } for utterance in transcript_data['results']['utterances']\n       ]\n\n       calls_db.addMany(utterances)\n\n       return json.dumps(utterances, indent=4)\n```\n\nWe can see how the utterances will look after they\u2019re formatted:\n\n```\n[{'channel': 0, 'transcript': 'Hello?', 'id': 288397603074461838},\n{'channel': 1, 'transcript': 'Hello?', 'id': 109089630999017748},\n{'channel': 0, 'transcript': \"Hey. How's it going? It's good to hear from you.\", 'id': 124620676610936565},\n{'channel': 0, 'transcript': 'Thanks. You too.', 'id': 182036969834868158},\n{'channel': 1, 'transcript': 'Thanks. You too.', 'id': 817052835121297399}]\n```\n\nLastly, let\u2019s add our `/transcribe` route and a templates folder with an `index.html` file that will display our phone speech-to-text transcript.\n\nIn our Python file, add the following code, which will get the voice-to-text transcript from the database and renders them in the HTML template.\n\n```python\n@app.route(\"/transcribe\", methods=['GET', 'POST'])\ndef transcribe_call():\n   context = calls_db.getAll()\n   return render_template(\"index.html\", context=context )\n\n\nif __name__ == \"__main__\":\n   app.run(debug=True)\n```\n\nCreate a folder in our project directory called `templates` and add an `index.html` file. In that file, add the following HTML and Jinja code:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    {% for c in context %} {{ c.transcript }} <br />\n    {% endfor %}\n  </body>\n</html>\n```\n\nHere we loop through every transcript and display it on the screen.\n\nFinally, let\u2019s try making a phone call and using your non-Twilio phone to initiate a phone conversation with the phone number you provided in the environment variable `RECEIVER_NUMBER`. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in our browser.\n\nCongratulations on building a speech-to-text Python project with Twilio and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).";
}
function compiledContent() {
  return `<p>Imagine having the ability to transcribe your voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Twilio with Deepgram.</p>
<p>With Twilio, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.</p>
<p>Here\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/deepgram_twilio_transcribe.png" alt="Deepgram voice-to-text with Twilio"></p>
<h2 id="getting-started">Getting Started</h2>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Make sure to go to <a href="https://www.twilio.com/login?g=%2Fconsole-zen%3F&#x26;t=9de6cbac864dd16dddf0f56899857674d172ed98651d03476c82bc96f0bf39e0">Twilio</a> and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities.</p>
<p>We\u2019ll also need two phones to make the outgoing call and another to receive a call.</p>
<p>In our project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in our application. Ngrok will forward requests to our application that is running locally. You can download it <a href="https://ngrok.com/">here</a>.</p>
<p>Next, let\u2019s make a directory anywhere we\u2019d like.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mkdir deepgram-twilio</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> deepgram-twilio</span></span></code></pre>
<p>We\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<Panel> Panel with important note
It\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide. </Panel>
<p>Ensure our virtual environment is activated because we\u2019ll install dependencies inside. If our virtual environment is named <code is:raw>venv</code>, then activate it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> venv/bin/activate</span></span></code></pre>
<p>Let\u2019s install our dependencies for our project by running the below <code is:raw>pip</code> installs from our terminal inside our virtual environment.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install twilio</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install python-dotenv</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install Flask</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install </span><span style="color: #A5D6FF">&#39;flask[async]&#39;</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install pysondb</span></span></code></pre>
<p>Now we can open up our favorite editor and create a file called <code is:raw>deepgram-twilio-call.py</code>. If you\u2019d like to make it from the command line, do this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch deepgram-twilio-call.py</span></span></code></pre>
<h2 id="the-code">The Code</h2>
<p>Now to the fun part! Open our script called <code is:raw>deepgram-twilio-call.py</code> and add the following code to make sure our Flask application runs without errors:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">hello</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello World!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">    app.run()</span></span></code></pre>
<p>Run our Flask application by typing this into the terminal <code is:raw>python deepgram-twilio-call.py</code>.</p>
<p>Then pull up the browser window by going to <code is:raw>http://127.0.0.1:5000/</code> and we should see the text <code is:raw>Hello World</code>.</p>
<p>At the same time our application is running, open a new terminal window and type <img src="https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/ngrok-terminal-with-python-flask.png" alt="ngrok terminal with python flask">:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">ngrok http 127.0.0.1:5000</span></span></code></pre>
<p>Copy the ngrok url and add it to Twilio by navigating to \u2018Phone Numbers -> Manage -> Active Numbers\u2019, then click on your Twilio phone number.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/active-twilio-numbers.png" alt="manage Twilio phone number"></p>
<p>Scroll down to the \u2018Voice\u2019 section and add the webhook, our ngrok URL with the recordings endpoint and save. Like this <code is:raw>https://6d71-104-6-9-133.ngrok.io/recordings</code></p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/twilio-webhook-ngrok.png" alt="twilio webhook ngrok"></p>
<p>We\u2019ll implement the <code is:raw>/recordings</code> endpoint in a few.</p>
<p>Leave both terminals running as we\u2019ll need these to run our application and receive the phone call.</p>
<p>Let\u2019s store our environment variables in a <code is:raw>.env</code> file with the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY=[\u2018YOUR_API_KEY\u2019]</span></span>
<span class="line"><span style="color: #c9d1d9">RECEIVER_NUMBER=[\u2018PHONE_NUMBER_TO_RECEIVE_CALL\u2019]</span></span></code></pre>
<p>We can replace <code is:raw>YOUR_API_KEY</code> with the API key we received from signing up in the Deepgram console, and the <code is:raw>PHONE_NUMBER_TO_RECEIVE_CALL</code> is the phone number we would like to receive the call.</p>
<p>Let\u2019s replace the code in our <code is:raw>deepgram-twilio-call.py</code> with the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, request, render_template</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> twilio.twiml.voice_response </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dial, VoiceResponse</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> twilio.rest </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Client</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pysondb </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> db</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">calls_db</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">db.getDb(</span><span style="color: #A5D6FF">&#39;calls&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/inbound&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">inbound_call</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">  response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> VoiceResponse()</span></span>
<span class="line"><span style="color: #C9D1D9">  dial </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Dial(</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA657">record</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;record-from-answer-dual&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA657">recording_status_callback</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;https://6d71-104-6-9-133.ngrok.io/recordings&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">      )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  dial.number(os.getenv(</span><span style="color: #A5D6FF">&quot;RECEIVER_NUMBER&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  response.append(dial)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">str</span><span style="color: #C9D1D9">(response)</span></span></code></pre>
<p>Here we are importing our libraries and creating a new instance of a Flask application. Then we create a new database named <code is:raw>calls</code>. We are using a lightweight JSON database called <a href="https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija">PysonDB</a>.</p>
<p>We create the <code is:raw>/inbound</code> endpoint, which allows us to make a voice call. The parameter <code is:raw>record='record-from-answer-dual'</code> will help us make a dual call or a phone that can call another.</p>
<p>Next, in our <code is:raw>/recordings</code> route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of our call and using speech recognition to transcribe the audio. We check if <code is:raw>results</code> is in the response and format it by using a list comprehension and storing the results in <code is:raw>utterances</code>. We then add the <code is:raw>utterances</code> to the <code is:raw>calls</code> database.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/recordings&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_recordings</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   recording_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;RecordingUrl&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">   source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: recording_url}</span></span>
<span class="line"><span style="color: #C9D1D9">   transcript_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;model&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;multichannel&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       utterances </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">           {</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           } </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">       ]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       calls_db.addMany(utterances)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> json.dumps(utterances, </span><span style="color: #FFA657">indent</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>We can see how the utterances will look after they\u2019re formatted:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">[{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 288397603074461838},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 109089630999017748},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 0, &#39;transcript&#39;: &quot;Hey. How&#39;s it going? It&#39;s good to hear from you.&quot;, &#39;id&#39;: 124620676610936565},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Thanks. You too.&#39;, &#39;id&#39;: 182036969834868158},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Thanks. You too.&#39;, &#39;id&#39;: 817052835121297399}]</span></span></code></pre>
<p>Lastly, let\u2019s add our <code is:raw>/transcribe</code> route and a templates folder with an <code is:raw>index.html</code> file that will display our phone speech-to-text transcript.</p>
<p>In our Python file, add the following code, which will get the voice-to-text transcript from the database and renders them in the HTML template.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/transcribe&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribe_call</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   context </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> calls_db.getAll()</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&quot;index.html&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">context )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   app.run(</span><span style="color: #FFA657">debug</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Create a folder in our project directory called <code is:raw>templates</code> and add an <code is:raw>index.html</code> file. In that file, add the following HTML and Jinja code:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Document&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% for c in context %} {{ c.transcript }} &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Here we loop through every transcript and display it on the screen.</p>
<p>Finally, let\u2019s try making a phone call and using your non-Twilio phone to initiate a phone conversation with the phone number you provided in the environment variable <code is:raw>RECEIVER_NUMBER</code>. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in our browser.</p>
<p>Congratulations on building a speech-to-text Python project with Twilio and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/python-deepgram-twilio/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Imagine having the ability to transcribe your voice calls. Look no further because we’ll learn how to do that in this article by combining Twilio with Deepgram.</p>
<p>With Twilio, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We’ll use the Deepgram Python SDK in this example.</p>
<p>Here’s a snapshot of what we’ll see in the browser after making the phone call and using Deepgram voice-to-text.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/deepgram_twilio_transcribe.png" alt="Deepgram voice-to-text with Twilio"></p>
<h2 id="getting-started">Getting Started</h2>
<p>Before we start, it’s essential to generate a Deepgram API key to use in our project. We can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won’t be able to retrieve it again and will have to create a new one. In this tutorial, we’ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Make sure to go to <a href="https://www.twilio.com/login?g=%2Fconsole-zen%3F&t=9de6cbac864dd16dddf0f56899857674d172ed98651d03476c82bc96f0bf39e0">Twilio</a> and sign up for an account. We’ll need to purchase a phone number with voice capabilities.</p>
<p>We’ll also need two phones to make the outgoing call and another to receive a call.</p>
<p>In our project, we’ll use Ngrok, which provides a temporary URL that will act as the webhook in our application. Ngrok will forward requests to our application that is running locally. You can download it <a href="https://ngrok.com/">here</a>.</p>
<p>Next, let’s make a directory anywhere we’d like.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mkdir deepgram-twilio</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> deepgram-twilio</span></span></code></pre>
<p>We’ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
${renderComponent($$result, "Panel", Panel, {}, { "default": () => renderTemplate` Panel with important note
It’s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide. ` })}
<p>Ensure our virtual environment is activated because we’ll install dependencies inside. If our virtual environment is named <code>venv</code>, then activate it.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> venv/bin/activate</span></span></code></pre>
<p>Let’s install our dependencies for our project by running the below <code>pip</code> installs from our terminal inside our virtual environment.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install twilio</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install python-dotenv</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install Flask</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install </span><span style="color: #A5D6FF">&#39;flask[async]&#39;</span></span>
<span class="line"><span style="color: #C9D1D9"> pip install pysondb</span></span></code></pre>
<p>Now we can open up our favorite editor and create a file called <code>deepgram-twilio-call.py</code>. If you’d like to make it from the command line, do this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch deepgram-twilio-call.py</span></span></code></pre>
<h2 id="the-code">The Code</h2>
<p>Now to the fun part! Open our script called <code>deepgram-twilio-call.py</code> and add the following code to make sure our Flask application runs without errors:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">hello</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello World!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">    app.run()</span></span></code></pre>
<p>Run our Flask application by typing this into the terminal <code>python deepgram-twilio-call.py</code>.</p>
<p>Then pull up the browser window by going to <code>http://127.0.0.1:5000/</code> and we should see the text <code>Hello World</code>.</p>
<p>At the same time our application is running, open a new terminal window and type <img src="https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/ngrok-terminal-with-python-flask.png" alt="ngrok terminal with python flask">:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">ngrok http 127.0.0.1:5000</span></span></code></pre>
<p>Copy the ngrok url and add it to Twilio by navigating to ‘Phone Numbers -> Manage -> Active Numbers’, then click on your Twilio phone number.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274531/blog/2022/04/python-deepgram-twilio/active-twilio-numbers.png" alt="manage Twilio phone number"></p>
<p>Scroll down to the ‘Voice’ section and add the webhook, our ngrok URL with the recordings endpoint and save. Like this <code>https://6d71-104-6-9-133.ngrok.io/recordings</code></p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649274530/blog/2022/04/python-deepgram-twilio/twilio-webhook-ngrok.png" alt="twilio webhook ngrok"></p>
<p>We’ll implement the <code>/recordings</code> endpoint in a few.</p>
<p>Leave both terminals running as we’ll need these to run our application and receive the phone call.</p>
<p>Let’s store our environment variables in a <code>.env</code> file with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY=[‘YOUR_API_KEY’]</span></span>
<span class="line"><span style="color: #c9d1d9">RECEIVER_NUMBER=[‘PHONE_NUMBER_TO_RECEIVE_CALL’]</span></span></code></pre>
<p>We can replace <code>YOUR_API_KEY</code> with the API key we received from signing up in the Deepgram console, and the <code>PHONE_NUMBER_TO_RECEIVE_CALL</code> is the phone number we would like to receive the call.</p>
<p>Let’s replace the code in our <code>deepgram-twilio-call.py</code> with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, request, render_template</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> twilio.twiml.voice_response </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dial, VoiceResponse</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> twilio.rest </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Client</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pysondb </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> db</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">calls_db</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">db.getDb(</span><span style="color: #A5D6FF">&#39;calls&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/inbound&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">inbound_call</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">  response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> VoiceResponse()</span></span>
<span class="line"><span style="color: #C9D1D9">  dial </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Dial(</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA657">record</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;record-from-answer-dual&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA657">recording_status_callback</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;https://6d71-104-6-9-133.ngrok.io/recordings&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">      )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  dial.number(os.getenv(</span><span style="color: #A5D6FF">&quot;RECEIVER_NUMBER&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  response.append(dial)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">str</span><span style="color: #C9D1D9">(response)</span></span></code></pre>
<p>Here we are importing our libraries and creating a new instance of a Flask application. Then we create a new database named <code>calls</code>. We are using a lightweight JSON database called <a href="https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija">PysonDB</a>.</p>
<p>We create the <code>/inbound</code> endpoint, which allows us to make a voice call. The parameter <code>record='record-from-answer-dual'</code> will help us make a dual call or a phone that can call another.</p>
<p>Next, in our <code>/recordings</code> route below, we tap into Deepgram’s speech-to-text feature by getting the recording of our call and using speech recognition to transcribe the audio. We check if <code>results</code> is in the response and format it by using a list comprehension and storing the results in <code>utterances</code>. We then add the <code>utterances</code> to the <code>calls</code> database.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/recordings&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_recordings</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   recording_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;RecordingUrl&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">   source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: recording_url}</span></span>
<span class="line"><span style="color: #C9D1D9">   transcript_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;model&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;multichannel&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       utterances </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">           {</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           } </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">       ]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       calls_db.addMany(utterances)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> json.dumps(utterances, </span><span style="color: #FFA657">indent</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>We can see how the utterances will look after they’re formatted:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">[{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 288397603074461838},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 109089630999017748},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 0, &#39;transcript&#39;: &quot;Hey. How&#39;s it going? It&#39;s good to hear from you.&quot;, &#39;id&#39;: 124620676610936565},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Thanks. You too.&#39;, &#39;id&#39;: 182036969834868158},</span></span>
<span class="line"><span style="color: #c9d1d9">{&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Thanks. You too.&#39;, &#39;id&#39;: 817052835121297399}]</span></span></code></pre>
<p>Lastly, let’s add our <code>/transcribe</code> route and a templates folder with an <code>index.html</code> file that will display our phone speech-to-text transcript.</p>
<p>In our Python file, add the following code, which will get the voice-to-text transcript from the database and renders them in the HTML template.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/transcribe&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribe_call</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   context </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> calls_db.getAll()</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&quot;index.html&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">context )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   app.run(</span><span style="color: #FFA657">debug</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Create a folder in our project directory called <code>templates</code> and add an <code>index.html</code> file. In that file, add the following HTML and Jinja code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Document&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% for c in context %} {{ c.transcript }} &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Here we loop through every transcript and display it on the screen.</p>
<p>Finally, let’s try making a phone call and using your non-Twilio phone to initiate a phone conversation with the phone number you provided in the environment variable <code>RECEIVER_NUMBER</code>. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in our browser.</p>
<p>Congratulations on building a speech-to-text Python project with Twilio and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/python-deepgram-twilio/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
