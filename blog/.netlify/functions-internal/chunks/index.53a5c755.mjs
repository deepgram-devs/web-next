import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "sign-up-for-missioncontrol", "text": "Sign up for MissionControl" }, { "depth": 2, "slug": "create-an-api-key", "text": "Create an API Key" }, { "depth": 2, "slug": "create-a-dataset", "text": "Create a dataset" }, { "depth": 2, "slug": "record-and-upload-your-audio-and-labels", "text": "Record and upload your audio and labels" }, { "depth": 3, "slug": "with-the-deepgram-missioncontrol-recorder", "text": "With the Deepgram MissionControl Recorder" }, { "depth": 3, "slug": "with-the-command-line", "text": "With the command line" }, { "depth": 2, "slug": "train-a-custom-model-with-your-dataset", "text": "Train a Custom Model with your dataset" }], "source": 'Here we\'ll train a speech recognition model to transcribe a phrase that it previously failed to recognize. To do this, we\'ll record some audio files and train a model using <a target="_blank" rel="noopener noreferrer">Deepgram MissionControl</a> - Deepgram\'s all-in-one platform for custom training and deploying custom trained speech recognition. To explore custom training with MissionControl, we\'ll train our model to recognize the phrase: "The proof is in the pudding." We\'ll do this by recording 50 audio files, pairing those files with accurate labels, and then training a model. That should get us from Deepgram General models belief that I\'m saying, "is this in this footing" to a model that knows "The proof is in the pudding."\n\n## Sign up for MissionControl\n\nFirst, you\'ll want to [create an account](https://missioncontrol.deepgram.com/signup). Your account comes preloaded with a few freebies:\n\n```\n1\\. 20 audio hours per month of Automatic Speech Recognition  \n2\\. The ability to create 2 Custom-Trained Models  \n3\\. The ability to deploy 1 of your Custom-Trained Models  \n4\\. 10 minutes of professional data labeling to help create training data  \n5\\. 2 Free Training-ready datasets  \n6\\. Access to 3 of Deepgram\'s General models  \n```\n\n## Create an API Key\n\nTo avoid reusing your username and password in requests, it can be helpful to create a new API key to use for development. You can do this at [in MissionControl](https://missioncontrol.deepgram.com/accounts-and-billing) or by running the following request in the command line, being sure to swap in your credentials and a name of your choosing. We highly recommend running these requests through `jq` for easy-to-read outputs.\n\n```\ncurl -X POST -u USERNAME:PASSWORD https://missioncontrol.deepgram.com/v1/keys?name="test"  \n```\n\n## Create a dataset\n\nFirst, we\'ll create a new dataset. This dataset will hold all our example recordings and labels so that we can use them for training. Use the following command, being sure to give your dataset a useful name.\n\n```\ncurl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/datasets?name="Proof"  \n```\n\nIn no time, you\'ll get back a response telling you your new dataset\'s `dataset-id`. Grab that `dataset-id` for later.\n\n## Record and upload your audio and labels\n\nYou can go about this step a number of ways. Ultimately, you want to record and label 50 files of yourself saying, "The proof is in the pudding." This tutorial walks you through two ways to do that:\n\n1. With the Deepgram MissionControl Recorder\n2. With the Command Line\n\n### With the Deepgram MissionControl Recorder\n\nFirst, navigate to the Deepgram MissionControl Recorder. There, you\'ll be asked to to fill in some information so that we can send your recordings to your dataset in your MissionControl account. Paste in the `dataset-id` that you received earlier, as well as your API credentials to authenticate your resulting POST requests. For the sentence, we\'ll be entering in our "The proof is in the pudding." Once you\'ve filled in all the fields, go ahead and click next. You\'ll see your script displayed, as well as a counter for how many recordings you have left to record. Record and submit yourself saying this phrase until you see a surprise. \n\nIn the background, the app uses the information you supplied to submit each recording to your selected dataset. It then submits the supplied alongside that recording for its label. You can check that your recordings are being captured by viewing your dataset in your [DataFactory in MissionControl](https://missioncontrol.deepgram.com/data). \n\n### With the command line\n\nTo install a tool to record from command line, use SoX (Sound eXchange).\n\n```\nsudo apt install sox  \nbrew install sox  \n```\n\nAnd, to record a file in your current directory in your terminal, do this (using SoX\'s built in rec command):\n\n```\nrec -b 16 -r 16000 -c 1 yourFile.wav  \n```\n\nThis will record a wav file from your computer\'s onboard microphone (make sure it has an onboard microphone that is in your proximity, this will not work on a remote server, gotta use a laptop or workstation). The wav file has these properties: 16 bit depth, 16,000 Hertz sample rate, mono channel and is recorded to the file yourFile.wav (you should might want to pick a better name than that!). Record yourself saying "The proof is in the pudding." 50 times, giving the resulting file a unique name for each recording. Now you\'re ready to upload your recordings and labels to your MissionControl dataset. You can upload your recordings to MissionControl using this command:\n\n```\n    curl -X POST -u SECRET:KEY --data-binary @path/to/yourFile.wav "https://missioncontrol.deepgram.com/v1/resources?name=myfile.wav&dataset-id=dddddddd-1111-2222-3333-444444444444"  \n```\n\nUsing the resulting `resource-id`s, you\'ll then want to pair labels with each recording. This can be uploaded with the following command:\n\n```\n    curl -X PUT -u SECRET:KEY -H "Content-Type: text/plain" -d\'The proof is in the pudding.\'  \n     "https://missioncontrol.deepgram.com/v1/resources/{resource-id}/transcript" \n```\n\nRepeat with all of your recordings.\n\n## Train a Custom Model with your dataset\n\nNow that your dataset is training-ready, you\'re ready to build your Custom Model. Go ahead and submit a `curl` command that names your model and associates the dataset you prepared with it.\n\n```\n    curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/models?dataset-id=dddddddd-1111-2222-3333-444444444444 -H \'content-type: application/json\' -d \'{"name": "Proof-in-the-Pudding"}\'  \n```\n\nTo associate additional datasets to your model, take advantage of [`PUT /models/{model-id}/datasets`](https://missioncontrol.deepgram.com/docs). You\'ll quickly get back a response that shows your new model.\n\n```\n    {\n      "model_id": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",\n      "version_id": "12345678-1234-1234-1234-1234567890ab",\n      "model_name": "Proof-in-the-Pudding",\n      "created": "2020-05-01T18:56:40.316185Z",\n      "model_type": "USER",\n      "wer": null,\n      "trained_at": null,\n      "status": "CANCELLED"\n    }\n```\n\nGo ahead and copy the `model_id`. We\'ll use that to submit the model for training. Perfect, plug that `model_id` in and run the following command:\n\n```\n    curl -X POST -u SECRET:KEY "https://missioncontrol.deepgram.com/v1/train?model-id={model-id}&base-model-id=e1eea600-6c6b-400a-a707-a491509e52f1"  \n```\n\nYou\'ll see a response confirming that your model has been submitted and its status has changed to `PENDING`\n\n```\n    {\n     "id":"a21e82a7-5bac-4b2a-a816-cb2f84e08ca8",\n     "model_id":"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",\n     "submitted":"2020-05-01T19:12:24.913587Z",\n     "finished": null,\n     "status":"PENDING"\n    }\n```\n\nTraining will take some time, but you\'ll be emailed once your model has finished. Once it\'s finished training, take a look at the steps for [reviewing your custom model\'s performance and deploying it for use at scale](https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/). To transcribe with your new model, you\'ll need to [deploy it to SpeechEngine](https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/).\n\n![]()', "html": '<p>Here we\u2019ll train a speech recognition model to transcribe a phrase that it previously failed to recognize. To do this, we\u2019ll record some audio files and train a model using <a target="_blank" rel="noopener noreferrer">Deepgram MissionControl</a> - Deepgram\u2019s all-in-one platform for custom training and deploying custom trained speech recognition. To explore custom training with MissionControl, we\u2019ll train our model to recognize the phrase: \u201CThe proof is in the pudding.\u201D We\u2019ll do this by recording 50 audio files, pairing those files with accurate labels, and then training a model. That should get us from Deepgram General models belief that I\u2019m saying, \u201Cis this in this footing\u201D to a model that knows \u201CThe proof is in the pudding.\u201D</p>\n<h2 id="sign-up-for-missioncontrol">Sign up for MissionControl</h2>\n<p>First, you\u2019ll want to <a href="https://missioncontrol.deepgram.com/signup">create an account</a>. Your account comes preloaded with a few freebies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">1\\. 20 audio hours per month of Automatic Speech Recognition  </span></span>\n<span class="line"><span style="color: #c9d1d9">2\\. The ability to create 2 Custom-Trained Models  </span></span>\n<span class="line"><span style="color: #c9d1d9">3\\. The ability to deploy 1 of your Custom-Trained Models  </span></span>\n<span class="line"><span style="color: #c9d1d9">4\\. 10 minutes of professional data labeling to help create training data  </span></span>\n<span class="line"><span style="color: #c9d1d9">5\\. 2 Free Training-ready datasets  </span></span>\n<span class="line"><span style="color: #c9d1d9">6\\. Access to 3 of Deepgram&#39;s General models  </span></span></code></pre>\n<h2 id="create-an-api-key">Create an API Key</h2>\n<p>To avoid reusing your username and password in requests, it can be helpful to create a new API key to use for development. You can do this at <a href="https://missioncontrol.deepgram.com/accounts-and-billing">in MissionControl</a> or by running the following request in the command line, being sure to swap in your credentials and a name of your choosing. We highly recommend running these requests through <code is:raw>jq</code> for easy-to-read outputs.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">curl -X POST -u USERNAME:PASSWORD https://missioncontrol.deepgram.com/v1/keys?name=&quot;test&quot;  </span></span></code></pre>\n<h2 id="create-a-dataset">Create a dataset</h2>\n<p>First, we\u2019ll create a new dataset. This dataset will hold all our example recordings and labels so that we can use them for training. Use the following command, being sure to give your dataset a useful name.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/datasets?name=&quot;Proof&quot;  </span></span></code></pre>\n<p>In no time, you\u2019ll get back a response telling you your new dataset\u2019s <code is:raw>dataset-id</code>. Grab that <code is:raw>dataset-id</code> for later.</p>\n<h2 id="record-and-upload-your-audio-and-labels">Record and upload your audio and labels</h2>\n<p>You can go about this step a number of ways. Ultimately, you want to record and label 50 files of yourself saying, \u201CThe proof is in the pudding.\u201D This tutorial walks you through two ways to do that:</p>\n<ol>\n<li>With the Deepgram MissionControl Recorder</li>\n<li>With the Command Line</li>\n</ol>\n<h3 id="with-the-deepgram-missioncontrol-recorder">With the Deepgram MissionControl Recorder</h3>\n<p>First, navigate to the Deepgram MissionControl Recorder. There, you\u2019ll be asked to to fill in some information so that we can send your recordings to your dataset in your MissionControl account. Paste in the <code is:raw>dataset-id</code> that you received earlier, as well as your API credentials to authenticate your resulting POST requests. For the sentence, we\u2019ll be entering in our \u201CThe proof is in the pudding.\u201D Once you\u2019ve filled in all the fields, go ahead and click next. You\u2019ll see your script displayed, as well as a counter for how many recordings you have left to record. Record and submit yourself saying this phrase until you see a surprise.</p>\n<p>In the background, the app uses the information you supplied to submit each recording to your selected dataset. It then submits the supplied alongside that recording for its label. You can check that your recordings are being captured by viewing your dataset in your <a href="https://missioncontrol.deepgram.com/data">DataFactory in MissionControl</a>.</p>\n<h3 id="with-the-command-line">With the command line</h3>\n<p>To install a tool to record from command line, use SoX (Sound eXchange).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">sudo apt install sox  </span></span>\n<span class="line"><span style="color: #c9d1d9">brew install sox  </span></span></code></pre>\n<p>And, to record a file in your current directory in your terminal, do this (using SoX\u2019s built in rec command):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">rec -b 16 -r 16000 -c 1 yourFile.wav  </span></span></code></pre>\n<p>This will record a wav file from your computer\u2019s onboard microphone (make sure it has an onboard microphone that is in your proximity, this will not work on a remote server, gotta use a laptop or workstation). The wav file has these properties: 16 bit depth, 16,000 Hertz sample rate, mono channel and is recorded to the file yourFile.wav (you should might want to pick a better name than that!). Record yourself saying \u201CThe proof is in the pudding.\u201D 50 times, giving the resulting file a unique name for each recording. Now you\u2019re ready to upload your recordings and labels to your MissionControl dataset. You can upload your recordings to MissionControl using this command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY --data-binary @path/to/yourFile.wav &quot;https://missioncontrol.deepgram.com/v1/resources?name=myfile.wav&amp;dataset-id=dddddddd-1111-2222-3333-444444444444&quot;  </span></span></code></pre>\n<p>Using the resulting <code is:raw>resource-id</code>s, you\u2019ll then want to pair labels with each recording. This can be uploaded with the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X PUT -u SECRET:KEY -H &quot;Content-Type: text/plain&quot; -d&#39;The proof is in the pudding.&#39;  </span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;https://missioncontrol.deepgram.com/v1/resources/{resource-id}/transcript&quot; </span></span></code></pre>\n<p>Repeat with all of your recordings.</p>\n<h2 id="train-a-custom-model-with-your-dataset">Train a Custom Model with your dataset</h2>\n<p>Now that your dataset is training-ready, you\u2019re ready to build your Custom Model. Go ahead and submit a <code is:raw>curl</code> command that names your model and associates the dataset you prepared with it.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/models?dataset-id=dddddddd-1111-2222-3333-444444444444 -H &#39;content-type: application/json&#39; -d &#39;{&quot;name&quot;: &quot;Proof-in-the-Pudding&quot;}&#39;  </span></span></code></pre>\n<p>To associate additional datasets to your model, take advantage of <a href="https://missioncontrol.deepgram.com/docs"><code is:raw>PUT /models/{model-id}/datasets</code></a>. You\u2019ll quickly get back a response that shows your new model.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;model_id&quot;: &quot;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;version_id&quot;: &quot;12345678-1234-1234-1234-1234567890ab&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;model_name&quot;: &quot;Proof-in-the-Pudding&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;created&quot;: &quot;2020-05-01T18:56:40.316185Z&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;model_type&quot;: &quot;USER&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;wer&quot;: null,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;trained_at&quot;: null,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;status&quot;: &quot;CANCELLED&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Go ahead and copy the <code is:raw>model_id</code>. We\u2019ll use that to submit the model for training. Perfect, plug that <code is:raw>model_id</code> in and run the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY &quot;https://missioncontrol.deepgram.com/v1/train?model-id={model-id}&amp;base-model-id=e1eea600-6c6b-400a-a707-a491509e52f1&quot;  </span></span></code></pre>\n<p>You\u2019ll see a response confirming that your model has been submitted and its status has changed to <code is:raw>PENDING</code></p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;id&quot;:&quot;a21e82a7-5bac-4b2a-a816-cb2f84e08ca8&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;model_id&quot;:&quot;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;submitted&quot;:&quot;2020-05-01T19:12:24.913587Z&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;finished&quot;: null,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;status&quot;:&quot;PENDING&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Training will take some time, but you\u2019ll be emailed once your model has finished. Once it\u2019s finished training, take a look at the steps for <a href="https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/">reviewing your custom model\u2019s performance and deploying it for use at scale</a>. To transcribe with your new model, you\u2019ll need to <a href="https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/">deploy it to SpeechEngine</a>.</p>\n<p><img src="" alt=""></p>' };
const frontmatter = { "title": "Train a Deep Learning Speech Recognition Model to Understand Your Voice", "description": "Learn how to build a speech recognition system to understand your voice with the power of deep learning.", "date": "2020-06-19T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1661981354/blog/train-a-deep-learning-speech-recognition-model-to-understand-your-voice/trouble-w-wer%402x.jpg", "authors": ["natalie-rutgers"], "category": "ai-and-engineering", "tags": ["deep-learning"], "seo": { "title": "Train a Deep Learning Speech Recognition model to understand your voice", "description": "" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661981354/blog/train-a-deep-learning-speech-recognition-model-to-understand-your-voice/trouble-w-wer%402x.jpg" }, "shorturls": { "share": "https://dpgr.am/2bbab35", "twitter": "https://dpgr.am/6ff1b78", "linkedin": "https://dpgr.am/fa3e037", "reddit": "https://dpgr.am/c8e778b", "facebook": "https://dpgr.am/758e888" }, "astro": { "headings": [{ "depth": 2, "slug": "sign-up-for-missioncontrol", "text": "Sign up for MissionControl" }, { "depth": 2, "slug": "create-an-api-key", "text": "Create an API Key" }, { "depth": 2, "slug": "create-a-dataset", "text": "Create a dataset" }, { "depth": 2, "slug": "record-and-upload-your-audio-and-labels", "text": "Record and upload your audio and labels" }, { "depth": 3, "slug": "with-the-deepgram-missioncontrol-recorder", "text": "With the Deepgram MissionControl Recorder" }, { "depth": 3, "slug": "with-the-command-line", "text": "With the command line" }, { "depth": 2, "slug": "train-a-custom-model-with-your-dataset", "text": "Train a Custom Model with your dataset" }], "source": 'Here we\'ll train a speech recognition model to transcribe a phrase that it previously failed to recognize. To do this, we\'ll record some audio files and train a model using <a target="_blank" rel="noopener noreferrer">Deepgram MissionControl</a> - Deepgram\'s all-in-one platform for custom training and deploying custom trained speech recognition. To explore custom training with MissionControl, we\'ll train our model to recognize the phrase: "The proof is in the pudding." We\'ll do this by recording 50 audio files, pairing those files with accurate labels, and then training a model. That should get us from Deepgram General models belief that I\'m saying, "is this in this footing" to a model that knows "The proof is in the pudding."\n\n## Sign up for MissionControl\n\nFirst, you\'ll want to [create an account](https://missioncontrol.deepgram.com/signup). Your account comes preloaded with a few freebies:\n\n```\n1\\. 20 audio hours per month of Automatic Speech Recognition  \n2\\. The ability to create 2 Custom-Trained Models  \n3\\. The ability to deploy 1 of your Custom-Trained Models  \n4\\. 10 minutes of professional data labeling to help create training data  \n5\\. 2 Free Training-ready datasets  \n6\\. Access to 3 of Deepgram\'s General models  \n```\n\n## Create an API Key\n\nTo avoid reusing your username and password in requests, it can be helpful to create a new API key to use for development. You can do this at [in MissionControl](https://missioncontrol.deepgram.com/accounts-and-billing) or by running the following request in the command line, being sure to swap in your credentials and a name of your choosing. We highly recommend running these requests through `jq` for easy-to-read outputs.\n\n```\ncurl -X POST -u USERNAME:PASSWORD https://missioncontrol.deepgram.com/v1/keys?name="test"  \n```\n\n## Create a dataset\n\nFirst, we\'ll create a new dataset. This dataset will hold all our example recordings and labels so that we can use them for training. Use the following command, being sure to give your dataset a useful name.\n\n```\ncurl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/datasets?name="Proof"  \n```\n\nIn no time, you\'ll get back a response telling you your new dataset\'s `dataset-id`. Grab that `dataset-id` for later.\n\n## Record and upload your audio and labels\n\nYou can go about this step a number of ways. Ultimately, you want to record and label 50 files of yourself saying, "The proof is in the pudding." This tutorial walks you through two ways to do that:\n\n1. With the Deepgram MissionControl Recorder\n2. With the Command Line\n\n### With the Deepgram MissionControl Recorder\n\nFirst, navigate to the Deepgram MissionControl Recorder. There, you\'ll be asked to to fill in some information so that we can send your recordings to your dataset in your MissionControl account. Paste in the `dataset-id` that you received earlier, as well as your API credentials to authenticate your resulting POST requests. For the sentence, we\'ll be entering in our "The proof is in the pudding." Once you\'ve filled in all the fields, go ahead and click next. You\'ll see your script displayed, as well as a counter for how many recordings you have left to record. Record and submit yourself saying this phrase until you see a surprise. \n\nIn the background, the app uses the information you supplied to submit each recording to your selected dataset. It then submits the supplied alongside that recording for its label. You can check that your recordings are being captured by viewing your dataset in your [DataFactory in MissionControl](https://missioncontrol.deepgram.com/data). \n\n### With the command line\n\nTo install a tool to record from command line, use SoX (Sound eXchange).\n\n```\nsudo apt install sox  \nbrew install sox  \n```\n\nAnd, to record a file in your current directory in your terminal, do this (using SoX\'s built in rec command):\n\n```\nrec -b 16 -r 16000 -c 1 yourFile.wav  \n```\n\nThis will record a wav file from your computer\'s onboard microphone (make sure it has an onboard microphone that is in your proximity, this will not work on a remote server, gotta use a laptop or workstation). The wav file has these properties: 16 bit depth, 16,000 Hertz sample rate, mono channel and is recorded to the file yourFile.wav (you should might want to pick a better name than that!). Record yourself saying "The proof is in the pudding." 50 times, giving the resulting file a unique name for each recording. Now you\'re ready to upload your recordings and labels to your MissionControl dataset. You can upload your recordings to MissionControl using this command:\n\n```\n    curl -X POST -u SECRET:KEY --data-binary @path/to/yourFile.wav "https://missioncontrol.deepgram.com/v1/resources?name=myfile.wav&dataset-id=dddddddd-1111-2222-3333-444444444444"  \n```\n\nUsing the resulting `resource-id`s, you\'ll then want to pair labels with each recording. This can be uploaded with the following command:\n\n```\n    curl -X PUT -u SECRET:KEY -H "Content-Type: text/plain" -d\'The proof is in the pudding.\'  \n     "https://missioncontrol.deepgram.com/v1/resources/{resource-id}/transcript" \n```\n\nRepeat with all of your recordings.\n\n## Train a Custom Model with your dataset\n\nNow that your dataset is training-ready, you\'re ready to build your Custom Model. Go ahead and submit a `curl` command that names your model and associates the dataset you prepared with it.\n\n```\n    curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/models?dataset-id=dddddddd-1111-2222-3333-444444444444 -H \'content-type: application/json\' -d \'{"name": "Proof-in-the-Pudding"}\'  \n```\n\nTo associate additional datasets to your model, take advantage of [`PUT /models/{model-id}/datasets`](https://missioncontrol.deepgram.com/docs). You\'ll quickly get back a response that shows your new model.\n\n```\n    {\n      "model_id": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",\n      "version_id": "12345678-1234-1234-1234-1234567890ab",\n      "model_name": "Proof-in-the-Pudding",\n      "created": "2020-05-01T18:56:40.316185Z",\n      "model_type": "USER",\n      "wer": null,\n      "trained_at": null,\n      "status": "CANCELLED"\n    }\n```\n\nGo ahead and copy the `model_id`. We\'ll use that to submit the model for training. Perfect, plug that `model_id` in and run the following command:\n\n```\n    curl -X POST -u SECRET:KEY "https://missioncontrol.deepgram.com/v1/train?model-id={model-id}&base-model-id=e1eea600-6c6b-400a-a707-a491509e52f1"  \n```\n\nYou\'ll see a response confirming that your model has been submitted and its status has changed to `PENDING`\n\n```\n    {\n     "id":"a21e82a7-5bac-4b2a-a816-cb2f84e08ca8",\n     "model_id":"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",\n     "submitted":"2020-05-01T19:12:24.913587Z",\n     "finished": null,\n     "status":"PENDING"\n    }\n```\n\nTraining will take some time, but you\'ll be emailed once your model has finished. Once it\'s finished training, take a look at the steps for [reviewing your custom model\'s performance and deploying it for use at scale](https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/). To transcribe with your new model, you\'ll need to [deploy it to SpeechEngine](https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/).\n\n![]()', "html": '<p>Here we\u2019ll train a speech recognition model to transcribe a phrase that it previously failed to recognize. To do this, we\u2019ll record some audio files and train a model using <a target="_blank" rel="noopener noreferrer">Deepgram MissionControl</a> - Deepgram\u2019s all-in-one platform for custom training and deploying custom trained speech recognition. To explore custom training with MissionControl, we\u2019ll train our model to recognize the phrase: \u201CThe proof is in the pudding.\u201D We\u2019ll do this by recording 50 audio files, pairing those files with accurate labels, and then training a model. That should get us from Deepgram General models belief that I\u2019m saying, \u201Cis this in this footing\u201D to a model that knows \u201CThe proof is in the pudding.\u201D</p>\n<h2 id="sign-up-for-missioncontrol">Sign up for MissionControl</h2>\n<p>First, you\u2019ll want to <a href="https://missioncontrol.deepgram.com/signup">create an account</a>. Your account comes preloaded with a few freebies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">1\\. 20 audio hours per month of Automatic Speech Recognition  </span></span>\n<span class="line"><span style="color: #c9d1d9">2\\. The ability to create 2 Custom-Trained Models  </span></span>\n<span class="line"><span style="color: #c9d1d9">3\\. The ability to deploy 1 of your Custom-Trained Models  </span></span>\n<span class="line"><span style="color: #c9d1d9">4\\. 10 minutes of professional data labeling to help create training data  </span></span>\n<span class="line"><span style="color: #c9d1d9">5\\. 2 Free Training-ready datasets  </span></span>\n<span class="line"><span style="color: #c9d1d9">6\\. Access to 3 of Deepgram&#39;s General models  </span></span></code></pre>\n<h2 id="create-an-api-key">Create an API Key</h2>\n<p>To avoid reusing your username and password in requests, it can be helpful to create a new API key to use for development. You can do this at <a href="https://missioncontrol.deepgram.com/accounts-and-billing">in MissionControl</a> or by running the following request in the command line, being sure to swap in your credentials and a name of your choosing. We highly recommend running these requests through <code is:raw>jq</code> for easy-to-read outputs.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">curl -X POST -u USERNAME:PASSWORD https://missioncontrol.deepgram.com/v1/keys?name=&quot;test&quot;  </span></span></code></pre>\n<h2 id="create-a-dataset">Create a dataset</h2>\n<p>First, we\u2019ll create a new dataset. This dataset will hold all our example recordings and labels so that we can use them for training. Use the following command, being sure to give your dataset a useful name.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/datasets?name=&quot;Proof&quot;  </span></span></code></pre>\n<p>In no time, you\u2019ll get back a response telling you your new dataset\u2019s <code is:raw>dataset-id</code>. Grab that <code is:raw>dataset-id</code> for later.</p>\n<h2 id="record-and-upload-your-audio-and-labels">Record and upload your audio and labels</h2>\n<p>You can go about this step a number of ways. Ultimately, you want to record and label 50 files of yourself saying, \u201CThe proof is in the pudding.\u201D This tutorial walks you through two ways to do that:</p>\n<ol>\n<li>With the Deepgram MissionControl Recorder</li>\n<li>With the Command Line</li>\n</ol>\n<h3 id="with-the-deepgram-missioncontrol-recorder">With the Deepgram MissionControl Recorder</h3>\n<p>First, navigate to the Deepgram MissionControl Recorder. There, you\u2019ll be asked to to fill in some information so that we can send your recordings to your dataset in your MissionControl account. Paste in the <code is:raw>dataset-id</code> that you received earlier, as well as your API credentials to authenticate your resulting POST requests. For the sentence, we\u2019ll be entering in our \u201CThe proof is in the pudding.\u201D Once you\u2019ve filled in all the fields, go ahead and click next. You\u2019ll see your script displayed, as well as a counter for how many recordings you have left to record. Record and submit yourself saying this phrase until you see a surprise.</p>\n<p>In the background, the app uses the information you supplied to submit each recording to your selected dataset. It then submits the supplied alongside that recording for its label. You can check that your recordings are being captured by viewing your dataset in your <a href="https://missioncontrol.deepgram.com/data">DataFactory in MissionControl</a>.</p>\n<h3 id="with-the-command-line">With the command line</h3>\n<p>To install a tool to record from command line, use SoX (Sound eXchange).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">sudo apt install sox  </span></span>\n<span class="line"><span style="color: #c9d1d9">brew install sox  </span></span></code></pre>\n<p>And, to record a file in your current directory in your terminal, do this (using SoX\u2019s built in rec command):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">rec -b 16 -r 16000 -c 1 yourFile.wav  </span></span></code></pre>\n<p>This will record a wav file from your computer\u2019s onboard microphone (make sure it has an onboard microphone that is in your proximity, this will not work on a remote server, gotta use a laptop or workstation). The wav file has these properties: 16 bit depth, 16,000 Hertz sample rate, mono channel and is recorded to the file yourFile.wav (you should might want to pick a better name than that!). Record yourself saying \u201CThe proof is in the pudding.\u201D 50 times, giving the resulting file a unique name for each recording. Now you\u2019re ready to upload your recordings and labels to your MissionControl dataset. You can upload your recordings to MissionControl using this command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY --data-binary @path/to/yourFile.wav &quot;https://missioncontrol.deepgram.com/v1/resources?name=myfile.wav&amp;dataset-id=dddddddd-1111-2222-3333-444444444444&quot;  </span></span></code></pre>\n<p>Using the resulting <code is:raw>resource-id</code>s, you\u2019ll then want to pair labels with each recording. This can be uploaded with the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X PUT -u SECRET:KEY -H &quot;Content-Type: text/plain&quot; -d&#39;The proof is in the pudding.&#39;  </span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;https://missioncontrol.deepgram.com/v1/resources/{resource-id}/transcript&quot; </span></span></code></pre>\n<p>Repeat with all of your recordings.</p>\n<h2 id="train-a-custom-model-with-your-dataset">Train a Custom Model with your dataset</h2>\n<p>Now that your dataset is training-ready, you\u2019re ready to build your Custom Model. Go ahead and submit a <code is:raw>curl</code> command that names your model and associates the dataset you prepared with it.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/models?dataset-id=dddddddd-1111-2222-3333-444444444444 -H &#39;content-type: application/json&#39; -d &#39;{&quot;name&quot;: &quot;Proof-in-the-Pudding&quot;}&#39;  </span></span></code></pre>\n<p>To associate additional datasets to your model, take advantage of <a href="https://missioncontrol.deepgram.com/docs"><code is:raw>PUT /models/{model-id}/datasets</code></a>. You\u2019ll quickly get back a response that shows your new model.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;model_id&quot;: &quot;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;version_id&quot;: &quot;12345678-1234-1234-1234-1234567890ab&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;model_name&quot;: &quot;Proof-in-the-Pudding&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;created&quot;: &quot;2020-05-01T18:56:40.316185Z&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;model_type&quot;: &quot;USER&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;wer&quot;: null,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;trained_at&quot;: null,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;status&quot;: &quot;CANCELLED&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Go ahead and copy the <code is:raw>model_id</code>. We\u2019ll use that to submit the model for training. Perfect, plug that <code is:raw>model_id</code> in and run the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY &quot;https://missioncontrol.deepgram.com/v1/train?model-id={model-id}&amp;base-model-id=e1eea600-6c6b-400a-a707-a491509e52f1&quot;  </span></span></code></pre>\n<p>You\u2019ll see a response confirming that your model has been submitted and its status has changed to <code is:raw>PENDING</code></p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;id&quot;:&quot;a21e82a7-5bac-4b2a-a816-cb2f84e08ca8&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;model_id&quot;:&quot;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;submitted&quot;:&quot;2020-05-01T19:12:24.913587Z&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;finished&quot;: null,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;status&quot;:&quot;PENDING&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Training will take some time, but you\u2019ll be emailed once your model has finished. Once it\u2019s finished training, take a look at the steps for <a href="https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/">reviewing your custom model\u2019s performance and deploying it for use at scale</a>. To transcribe with your new model, you\u2019ll need to <a href="https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/">deploy it to SpeechEngine</a>.</p>\n<p><img src="" alt=""></p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/train-a-deep-learning-speech-recognition-model-to-understand-your-voice/index.md" };
function rawContent() {
  return 'Here we\'ll train a speech recognition model to transcribe a phrase that it previously failed to recognize. To do this, we\'ll record some audio files and train a model using <a target="_blank" rel="noopener noreferrer">Deepgram MissionControl</a> - Deepgram\'s all-in-one platform for custom training and deploying custom trained speech recognition. To explore custom training with MissionControl, we\'ll train our model to recognize the phrase: "The proof is in the pudding." We\'ll do this by recording 50 audio files, pairing those files with accurate labels, and then training a model. That should get us from Deepgram General models belief that I\'m saying, "is this in this footing" to a model that knows "The proof is in the pudding."\n\n## Sign up for MissionControl\n\nFirst, you\'ll want to [create an account](https://missioncontrol.deepgram.com/signup). Your account comes preloaded with a few freebies:\n\n```\n1\\. 20 audio hours per month of Automatic Speech Recognition  \n2\\. The ability to create 2 Custom-Trained Models  \n3\\. The ability to deploy 1 of your Custom-Trained Models  \n4\\. 10 minutes of professional data labeling to help create training data  \n5\\. 2 Free Training-ready datasets  \n6\\. Access to 3 of Deepgram\'s General models  \n```\n\n## Create an API Key\n\nTo avoid reusing your username and password in requests, it can be helpful to create a new API key to use for development. You can do this at [in MissionControl](https://missioncontrol.deepgram.com/accounts-and-billing) or by running the following request in the command line, being sure to swap in your credentials and a name of your choosing. We highly recommend running these requests through `jq` for easy-to-read outputs.\n\n```\ncurl -X POST -u USERNAME:PASSWORD https://missioncontrol.deepgram.com/v1/keys?name="test"  \n```\n\n## Create a dataset\n\nFirst, we\'ll create a new dataset. This dataset will hold all our example recordings and labels so that we can use them for training. Use the following command, being sure to give your dataset a useful name.\n\n```\ncurl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/datasets?name="Proof"  \n```\n\nIn no time, you\'ll get back a response telling you your new dataset\'s `dataset-id`. Grab that `dataset-id` for later.\n\n## Record and upload your audio and labels\n\nYou can go about this step a number of ways. Ultimately, you want to record and label 50 files of yourself saying, "The proof is in the pudding." This tutorial walks you through two ways to do that:\n\n1. With the Deepgram MissionControl Recorder\n2. With the Command Line\n\n### With the Deepgram MissionControl Recorder\n\nFirst, navigate to the Deepgram MissionControl Recorder. There, you\'ll be asked to to fill in some information so that we can send your recordings to your dataset in your MissionControl account. Paste in the `dataset-id` that you received earlier, as well as your API credentials to authenticate your resulting POST requests. For the sentence, we\'ll be entering in our "The proof is in the pudding." Once you\'ve filled in all the fields, go ahead and click next. You\'ll see your script displayed, as well as a counter for how many recordings you have left to record. Record and submit yourself saying this phrase until you see a surprise. \n\nIn the background, the app uses the information you supplied to submit each recording to your selected dataset. It then submits the supplied alongside that recording for its label. You can check that your recordings are being captured by viewing your dataset in your [DataFactory in MissionControl](https://missioncontrol.deepgram.com/data). \n\n### With the command line\n\nTo install a tool to record from command line, use SoX (Sound eXchange).\n\n```\nsudo apt install sox  \nbrew install sox  \n```\n\nAnd, to record a file in your current directory in your terminal, do this (using SoX\'s built in rec command):\n\n```\nrec -b 16 -r 16000 -c 1 yourFile.wav  \n```\n\nThis will record a wav file from your computer\'s onboard microphone (make sure it has an onboard microphone that is in your proximity, this will not work on a remote server, gotta use a laptop or workstation). The wav file has these properties: 16 bit depth, 16,000 Hertz sample rate, mono channel and is recorded to the file yourFile.wav (you should might want to pick a better name than that!). Record yourself saying "The proof is in the pudding." 50 times, giving the resulting file a unique name for each recording. Now you\'re ready to upload your recordings and labels to your MissionControl dataset. You can upload your recordings to MissionControl using this command:\n\n```\n    curl -X POST -u SECRET:KEY --data-binary @path/to/yourFile.wav "https://missioncontrol.deepgram.com/v1/resources?name=myfile.wav&dataset-id=dddddddd-1111-2222-3333-444444444444"  \n```\n\nUsing the resulting `resource-id`s, you\'ll then want to pair labels with each recording. This can be uploaded with the following command:\n\n```\n    curl -X PUT -u SECRET:KEY -H "Content-Type: text/plain" -d\'The proof is in the pudding.\'  \n     "https://missioncontrol.deepgram.com/v1/resources/{resource-id}/transcript" \n```\n\nRepeat with all of your recordings.\n\n## Train a Custom Model with your dataset\n\nNow that your dataset is training-ready, you\'re ready to build your Custom Model. Go ahead and submit a `curl` command that names your model and associates the dataset you prepared with it.\n\n```\n    curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/models?dataset-id=dddddddd-1111-2222-3333-444444444444 -H \'content-type: application/json\' -d \'{"name": "Proof-in-the-Pudding"}\'  \n```\n\nTo associate additional datasets to your model, take advantage of [`PUT /models/{model-id}/datasets`](https://missioncontrol.deepgram.com/docs). You\'ll quickly get back a response that shows your new model.\n\n```\n    {\n      "model_id": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",\n      "version_id": "12345678-1234-1234-1234-1234567890ab",\n      "model_name": "Proof-in-the-Pudding",\n      "created": "2020-05-01T18:56:40.316185Z",\n      "model_type": "USER",\n      "wer": null,\n      "trained_at": null,\n      "status": "CANCELLED"\n    }\n```\n\nGo ahead and copy the `model_id`. We\'ll use that to submit the model for training. Perfect, plug that `model_id` in and run the following command:\n\n```\n    curl -X POST -u SECRET:KEY "https://missioncontrol.deepgram.com/v1/train?model-id={model-id}&base-model-id=e1eea600-6c6b-400a-a707-a491509e52f1"  \n```\n\nYou\'ll see a response confirming that your model has been submitted and its status has changed to `PENDING`\n\n```\n    {\n     "id":"a21e82a7-5bac-4b2a-a816-cb2f84e08ca8",\n     "model_id":"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",\n     "submitted":"2020-05-01T19:12:24.913587Z",\n     "finished": null,\n     "status":"PENDING"\n    }\n```\n\nTraining will take some time, but you\'ll be emailed once your model has finished. Once it\'s finished training, take a look at the steps for [reviewing your custom model\'s performance and deploying it for use at scale](https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/). To transcribe with your new model, you\'ll need to [deploy it to SpeechEngine](https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/).\n\n![]()';
}
function compiledContent() {
  return '<p>Here we\u2019ll train a speech recognition model to transcribe a phrase that it previously failed to recognize. To do this, we\u2019ll record some audio files and train a model using <a target="_blank" rel="noopener noreferrer">Deepgram MissionControl</a> - Deepgram\u2019s all-in-one platform for custom training and deploying custom trained speech recognition. To explore custom training with MissionControl, we\u2019ll train our model to recognize the phrase: \u201CThe proof is in the pudding.\u201D We\u2019ll do this by recording 50 audio files, pairing those files with accurate labels, and then training a model. That should get us from Deepgram General models belief that I\u2019m saying, \u201Cis this in this footing\u201D to a model that knows \u201CThe proof is in the pudding.\u201D</p>\n<h2 id="sign-up-for-missioncontrol">Sign up for MissionControl</h2>\n<p>First, you\u2019ll want to <a href="https://missioncontrol.deepgram.com/signup">create an account</a>. Your account comes preloaded with a few freebies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">1\\. 20 audio hours per month of Automatic Speech Recognition  </span></span>\n<span class="line"><span style="color: #c9d1d9">2\\. The ability to create 2 Custom-Trained Models  </span></span>\n<span class="line"><span style="color: #c9d1d9">3\\. The ability to deploy 1 of your Custom-Trained Models  </span></span>\n<span class="line"><span style="color: #c9d1d9">4\\. 10 minutes of professional data labeling to help create training data  </span></span>\n<span class="line"><span style="color: #c9d1d9">5\\. 2 Free Training-ready datasets  </span></span>\n<span class="line"><span style="color: #c9d1d9">6\\. Access to 3 of Deepgram&#39;s General models  </span></span></code></pre>\n<h2 id="create-an-api-key">Create an API Key</h2>\n<p>To avoid reusing your username and password in requests, it can be helpful to create a new API key to use for development. You can do this at <a href="https://missioncontrol.deepgram.com/accounts-and-billing">in MissionControl</a> or by running the following request in the command line, being sure to swap in your credentials and a name of your choosing. We highly recommend running these requests through <code is:raw>jq</code> for easy-to-read outputs.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">curl -X POST -u USERNAME:PASSWORD https://missioncontrol.deepgram.com/v1/keys?name=&quot;test&quot;  </span></span></code></pre>\n<h2 id="create-a-dataset">Create a dataset</h2>\n<p>First, we\u2019ll create a new dataset. This dataset will hold all our example recordings and labels so that we can use them for training. Use the following command, being sure to give your dataset a useful name.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/datasets?name=&quot;Proof&quot;  </span></span></code></pre>\n<p>In no time, you\u2019ll get back a response telling you your new dataset\u2019s <code is:raw>dataset-id</code>. Grab that <code is:raw>dataset-id</code> for later.</p>\n<h2 id="record-and-upload-your-audio-and-labels">Record and upload your audio and labels</h2>\n<p>You can go about this step a number of ways. Ultimately, you want to record and label 50 files of yourself saying, \u201CThe proof is in the pudding.\u201D This tutorial walks you through two ways to do that:</p>\n<ol>\n<li>With the Deepgram MissionControl Recorder</li>\n<li>With the Command Line</li>\n</ol>\n<h3 id="with-the-deepgram-missioncontrol-recorder">With the Deepgram MissionControl Recorder</h3>\n<p>First, navigate to the Deepgram MissionControl Recorder. There, you\u2019ll be asked to to fill in some information so that we can send your recordings to your dataset in your MissionControl account. Paste in the <code is:raw>dataset-id</code> that you received earlier, as well as your API credentials to authenticate your resulting POST requests. For the sentence, we\u2019ll be entering in our \u201CThe proof is in the pudding.\u201D Once you\u2019ve filled in all the fields, go ahead and click next. You\u2019ll see your script displayed, as well as a counter for how many recordings you have left to record. Record and submit yourself saying this phrase until you see a surprise.</p>\n<p>In the background, the app uses the information you supplied to submit each recording to your selected dataset. It then submits the supplied alongside that recording for its label. You can check that your recordings are being captured by viewing your dataset in your <a href="https://missioncontrol.deepgram.com/data">DataFactory in MissionControl</a>.</p>\n<h3 id="with-the-command-line">With the command line</h3>\n<p>To install a tool to record from command line, use SoX (Sound eXchange).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">sudo apt install sox  </span></span>\n<span class="line"><span style="color: #c9d1d9">brew install sox  </span></span></code></pre>\n<p>And, to record a file in your current directory in your terminal, do this (using SoX\u2019s built in rec command):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">rec -b 16 -r 16000 -c 1 yourFile.wav  </span></span></code></pre>\n<p>This will record a wav file from your computer\u2019s onboard microphone (make sure it has an onboard microphone that is in your proximity, this will not work on a remote server, gotta use a laptop or workstation). The wav file has these properties: 16 bit depth, 16,000 Hertz sample rate, mono channel and is recorded to the file yourFile.wav (you should might want to pick a better name than that!). Record yourself saying \u201CThe proof is in the pudding.\u201D 50 times, giving the resulting file a unique name for each recording. Now you\u2019re ready to upload your recordings and labels to your MissionControl dataset. You can upload your recordings to MissionControl using this command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY --data-binary @path/to/yourFile.wav &quot;https://missioncontrol.deepgram.com/v1/resources?name=myfile.wav&amp;dataset-id=dddddddd-1111-2222-3333-444444444444&quot;  </span></span></code></pre>\n<p>Using the resulting <code is:raw>resource-id</code>s, you\u2019ll then want to pair labels with each recording. This can be uploaded with the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X PUT -u SECRET:KEY -H &quot;Content-Type: text/plain&quot; -d&#39;The proof is in the pudding.&#39;  </span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;https://missioncontrol.deepgram.com/v1/resources/{resource-id}/transcript&quot; </span></span></code></pre>\n<p>Repeat with all of your recordings.</p>\n<h2 id="train-a-custom-model-with-your-dataset">Train a Custom Model with your dataset</h2>\n<p>Now that your dataset is training-ready, you\u2019re ready to build your Custom Model. Go ahead and submit a <code is:raw>curl</code> command that names your model and associates the dataset you prepared with it.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/models?dataset-id=dddddddd-1111-2222-3333-444444444444 -H &#39;content-type: application/json&#39; -d &#39;{&quot;name&quot;: &quot;Proof-in-the-Pudding&quot;}&#39;  </span></span></code></pre>\n<p>To associate additional datasets to your model, take advantage of <a href="https://missioncontrol.deepgram.com/docs"><code is:raw>PUT /models/{model-id}/datasets</code></a>. You\u2019ll quickly get back a response that shows your new model.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;model_id&quot;: &quot;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;version_id&quot;: &quot;12345678-1234-1234-1234-1234567890ab&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;model_name&quot;: &quot;Proof-in-the-Pudding&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;created&quot;: &quot;2020-05-01T18:56:40.316185Z&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;model_type&quot;: &quot;USER&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;wer&quot;: null,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;trained_at&quot;: null,</span></span>\n<span class="line"><span style="color: #c9d1d9">      &quot;status&quot;: &quot;CANCELLED&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Go ahead and copy the <code is:raw>model_id</code>. We\u2019ll use that to submit the model for training. Perfect, plug that <code is:raw>model_id</code> in and run the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY &quot;https://missioncontrol.deepgram.com/v1/train?model-id={model-id}&amp;base-model-id=e1eea600-6c6b-400a-a707-a491509e52f1&quot;  </span></span></code></pre>\n<p>You\u2019ll see a response confirming that your model has been submitted and its status has changed to <code is:raw>PENDING</code></p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;id&quot;:&quot;a21e82a7-5bac-4b2a-a816-cb2f84e08ca8&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;model_id&quot;:&quot;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;submitted&quot;:&quot;2020-05-01T19:12:24.913587Z&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;finished&quot;: null,</span></span>\n<span class="line"><span style="color: #c9d1d9">     &quot;status&quot;:&quot;PENDING&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Training will take some time, but you\u2019ll be emailed once your model has finished. Once it\u2019s finished training, take a look at the steps for <a href="https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/">reviewing your custom model\u2019s performance and deploying it for use at scale</a>. To transcribe with your new model, you\u2019ll need to <a href="https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/">deploy it to SpeechEngine</a>.</p>\n<p><img src="" alt=""></p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/train-a-deep-learning-speech-recognition-model-to-understand-your-voice/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Here we’ll train a speech recognition model to transcribe a phrase that it previously failed to recognize. To do this, we’ll record some audio files and train a model using <a target="_blank" rel="noopener noreferrer">Deepgram MissionControl</a> - Deepgram’s all-in-one platform for custom training and deploying custom trained speech recognition. To explore custom training with MissionControl, we’ll train our model to recognize the phrase: “The proof is in the pudding.” We’ll do this by recording 50 audio files, pairing those files with accurate labels, and then training a model. That should get us from Deepgram General models belief that I’m saying, “is this in this footing” to a model that knows “The proof is in the pudding.”</p>
<h2 id="sign-up-for-missioncontrol">Sign up for MissionControl</h2>
<p>First, you’ll want to <a href="https://missioncontrol.deepgram.com/signup">create an account</a>. Your account comes preloaded with a few freebies:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">1\\. 20 audio hours per month of Automatic Speech Recognition  </span></span>
<span class="line"><span style="color: #c9d1d9">2\\. The ability to create 2 Custom-Trained Models  </span></span>
<span class="line"><span style="color: #c9d1d9">3\\. The ability to deploy 1 of your Custom-Trained Models  </span></span>
<span class="line"><span style="color: #c9d1d9">4\\. 10 minutes of professional data labeling to help create training data  </span></span>
<span class="line"><span style="color: #c9d1d9">5\\. 2 Free Training-ready datasets  </span></span>
<span class="line"><span style="color: #c9d1d9">6\\. Access to 3 of Deepgram&#39;s General models  </span></span></code></pre>
<h2 id="create-an-api-key">Create an API Key</h2>
<p>To avoid reusing your username and password in requests, it can be helpful to create a new API key to use for development. You can do this at <a href="https://missioncontrol.deepgram.com/accounts-and-billing">in MissionControl</a> or by running the following request in the command line, being sure to swap in your credentials and a name of your choosing. We highly recommend running these requests through <code>jq</code> for easy-to-read outputs.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">curl -X POST -u USERNAME:PASSWORD https://missioncontrol.deepgram.com/v1/keys?name=&quot;test&quot;  </span></span></code></pre>
<h2 id="create-a-dataset">Create a dataset</h2>
<p>First, we’ll create a new dataset. This dataset will hold all our example recordings and labels so that we can use them for training. Use the following command, being sure to give your dataset a useful name.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/datasets?name=&quot;Proof&quot;  </span></span></code></pre>
<p>In no time, you’ll get back a response telling you your new dataset’s <code>dataset-id</code>. Grab that <code>dataset-id</code> for later.</p>
<h2 id="record-and-upload-your-audio-and-labels">Record and upload your audio and labels</h2>
<p>You can go about this step a number of ways. Ultimately, you want to record and label 50 files of yourself saying, “The proof is in the pudding.” This tutorial walks you through two ways to do that:</p>
<ol>
<li>With the Deepgram MissionControl Recorder</li>
<li>With the Command Line</li>
</ol>
<h3 id="with-the-deepgram-missioncontrol-recorder">With the Deepgram MissionControl Recorder</h3>
<p>First, navigate to the Deepgram MissionControl Recorder. There, you’ll be asked to to fill in some information so that we can send your recordings to your dataset in your MissionControl account. Paste in the <code>dataset-id</code> that you received earlier, as well as your API credentials to authenticate your resulting POST requests. For the sentence, we’ll be entering in our “The proof is in the pudding.” Once you’ve filled in all the fields, go ahead and click next. You’ll see your script displayed, as well as a counter for how many recordings you have left to record. Record and submit yourself saying this phrase until you see a surprise.</p>
<p>In the background, the app uses the information you supplied to submit each recording to your selected dataset. It then submits the supplied alongside that recording for its label. You can check that your recordings are being captured by viewing your dataset in your <a href="https://missioncontrol.deepgram.com/data">DataFactory in MissionControl</a>.</p>
<h3 id="with-the-command-line">With the command line</h3>
<p>To install a tool to record from command line, use SoX (Sound eXchange).</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">sudo apt install sox  </span></span>
<span class="line"><span style="color: #c9d1d9">brew install sox  </span></span></code></pre>
<p>And, to record a file in your current directory in your terminal, do this (using SoX’s built in rec command):</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">rec -b 16 -r 16000 -c 1 yourFile.wav  </span></span></code></pre>
<p>This will record a wav file from your computer’s onboard microphone (make sure it has an onboard microphone that is in your proximity, this will not work on a remote server, gotta use a laptop or workstation). The wav file has these properties: 16 bit depth, 16,000 Hertz sample rate, mono channel and is recorded to the file yourFile.wav (you should might want to pick a better name than that!). Record yourself saying “The proof is in the pudding.” 50 times, giving the resulting file a unique name for each recording. Now you’re ready to upload your recordings and labels to your MissionControl dataset. You can upload your recordings to MissionControl using this command:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY --data-binary @path/to/yourFile.wav &quot;https://missioncontrol.deepgram.com/v1/resources?name=myfile.wav&amp;dataset-id=dddddddd-1111-2222-3333-444444444444&quot;  </span></span></code></pre>
<p>Using the resulting <code>resource-id</code>s, you’ll then want to pair labels with each recording. This can be uploaded with the following command:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X PUT -u SECRET:KEY -H &quot;Content-Type: text/plain&quot; -d&#39;The proof is in the pudding.&#39;  </span></span>
<span class="line"><span style="color: #c9d1d9">     &quot;https://missioncontrol.deepgram.com/v1/resources/{resource-id}/transcript&quot; </span></span></code></pre>
<p>Repeat with all of your recordings.</p>
<h2 id="train-a-custom-model-with-your-dataset">Train a Custom Model with your dataset</h2>
<p>Now that your dataset is training-ready, you’re ready to build your Custom Model. Go ahead and submit a <code>curl</code> command that names your model and associates the dataset you prepared with it.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY https://missioncontrol.deepgram.com/v1/models?dataset-id=dddddddd-1111-2222-3333-444444444444 -H &#39;content-type: application/json&#39; -d &#39;{&quot;name&quot;: &quot;Proof-in-the-Pudding&quot;}&#39;  </span></span></code></pre>
<p>To associate additional datasets to your model, take advantage of <a href="https://missioncontrol.deepgram.com/docs"><code>PUT /models/{model-id}/datasets</code></a>. You’ll quickly get back a response that shows your new model.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    {</span></span>
<span class="line"><span style="color: #c9d1d9">      &quot;model_id&quot;: &quot;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&quot;,</span></span>
<span class="line"><span style="color: #c9d1d9">      &quot;version_id&quot;: &quot;12345678-1234-1234-1234-1234567890ab&quot;,</span></span>
<span class="line"><span style="color: #c9d1d9">      &quot;model_name&quot;: &quot;Proof-in-the-Pudding&quot;,</span></span>
<span class="line"><span style="color: #c9d1d9">      &quot;created&quot;: &quot;2020-05-01T18:56:40.316185Z&quot;,</span></span>
<span class="line"><span style="color: #c9d1d9">      &quot;model_type&quot;: &quot;USER&quot;,</span></span>
<span class="line"><span style="color: #c9d1d9">      &quot;wer&quot;: null,</span></span>
<span class="line"><span style="color: #c9d1d9">      &quot;trained_at&quot;: null,</span></span>
<span class="line"><span style="color: #c9d1d9">      &quot;status&quot;: &quot;CANCELLED&quot;</span></span>
<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>
<p>Go ahead and copy the <code>model_id</code>. We’ll use that to submit the model for training. Perfect, plug that <code>model_id</code> in and run the following command:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl -X POST -u SECRET:KEY &quot;https://missioncontrol.deepgram.com/v1/train?model-id={model-id}&amp;base-model-id=e1eea600-6c6b-400a-a707-a491509e52f1&quot;  </span></span></code></pre>
<p>You’ll see a response confirming that your model has been submitted and its status has changed to <code>PENDING</code></p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    {</span></span>
<span class="line"><span style="color: #c9d1d9">     &quot;id&quot;:&quot;a21e82a7-5bac-4b2a-a816-cb2f84e08ca8&quot;,</span></span>
<span class="line"><span style="color: #c9d1d9">     &quot;model_id&quot;:&quot;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&quot;,</span></span>
<span class="line"><span style="color: #c9d1d9">     &quot;submitted&quot;:&quot;2020-05-01T19:12:24.913587Z&quot;,</span></span>
<span class="line"><span style="color: #c9d1d9">     &quot;finished&quot;: null,</span></span>
<span class="line"><span style="color: #c9d1d9">     &quot;status&quot;:&quot;PENDING&quot;</span></span>
<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>
<p>Training will take some time, but you’ll be emailed once your model has finished. Once it’s finished training, take a look at the steps for <a href="https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/">reviewing your custom model’s performance and deploying it for use at scale</a>. To transcribe with your new model, you’ll need to <a href="https://blog.deepgram.com/quickstart-guide-for-the-deepgram-missioncontrol-api/">deploy it to SpeechEngine</a>.</p>
<p><img src="" alt=""></p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/train-a-deep-learning-speech-recognition-model-to-understand-your-voice/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
