import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "what-well-need-to-play-voice-controlled-music-using-ai", "text": "What We\u2019ll Need to Play Voice-Controlled Music Using AI" }, { "depth": 3, "slug": "fluidsynth", "text": "FluidSynth" }, { "depth": 3, "slug": "deepgram-api-key", "text": "Deepgram API Key" }, { "depth": 2, "slug": "create-a-python-virtual-environment", "text": "Create a Python Virtual Environment" }, { "depth": 2, "slug": "the-code-to-play-voice-controlled-music-with-python-and-ai", "text": "The Code to Play Voice-Controlled Music with Python and AI" }, { "depth": 2, "slug": "deepgram-python-code-explanation", "text": "Deepgram Python Code Explanation" }, { "depth": 2, "slug": "next-steps-to-extend-the-voice-controlled-python-ai-music-example", "text": "Next Steps to Extend the Voice-Controlled Python AI Music Example" }, { "depth": 2, "slug": "the-entire-python-code-for-the-voice-controlled-music-example", "text": "The Entire Python Code for the Voice-Controlled Music Example" }], "source": "\r\nMove over Beethoven. This tutorial will use Python and the Deepgram API speech-to-text audio transcription to play a piano with your voice. The song we\u2019ll play is the first few phrases of [Lady Gaga\u2019s Bad Romance](https://youtu.be/-bsMuWw-v6c). It\u2019s a simple piece in C Major, meaning no flats and sharps! We\u2019ll only use pitches C, D, E, F, G, A, and B, and no black keys. What a beautiful chance for someone learning how to play the piano without a keyboard, tapping into the power of voice to play music!\r\n\r\nAfter running the project, we'll see the GIF below when running the project as a PyGame application. A window will appear, and the piano will play the song. We'll hear the notes, which also light up on the keyboard.\r\n\r\n![Python and Deepgram API playing voice-controlled music with the piano](https://res.cloudinary.com/deepgram/image/upload/v1659451110/blog/2022/08/voice-controlled-music-with-python/python-voice-controlled-music.gif)\r\n\r\nLet\u2019s get started!\r\n\r\n## What We\u2019ll Need to Play Voice-Controlled Music Using AI\r\n\r\nThis project requires macOS but is also possible with a Windows or Linux machine. We\u2019ll also use Python 3.10 and other tools like FluidSynth and Deepgram Python SDK speech-to-text audio transcription.\r\n\r\n### FluidSynth\r\n\r\nWe need to install [FluidSynth](https://www.fluidsynth.org/), a free, open-source MIDI software synthesizer that creates sound in digital format, usually for music. **MIDI** or **Musical Instrument Digital Interface** is a protocol that allows musical gear like computers, software, and instruments to communicate with one another. **FluidSynth** uses **SoundFont** files to generate audio. These files have samples of musical instruments like a piano that play MIDI files.\r\n\r\nThere are various options to install FluidSynth on a Mac. In this tutorial, we\u2019ll use [Homebrew](https://brew.sh/) for the installation. After installing Homebrew, run this command anywhere in the terminal:\r\n\r\n    brew install fluidsynth\r\n\r\nNow that FluidSynth is installed, let\u2019s get our Deepgram API Key.\r\n\r\n### Deepgram API Key\r\n\r\nWe need to grab a [Deepgram API Key from the console](https://console.deepgram.com/signup?jump=keys). It\u2019s effortless to sign up and create an API Key here. Deepgram is an AI automated speech recognition voice-to-text company that allows us to build applications that transcribe speech-to-text. We\u2019ll use Deepgram\u2019s Python SDK and the [Numerals feature](https://developers.deepgram.com/documentation/features/numerals/), which converts a number from written format to numerical format. For example, if we say the number \u201Cthree\u201D, it would appear in our transcript as \u201C3\u201D.\r\n\r\nOne of the many reasons to choose Deepgram over other providers is that we build better voice applications with faster, more accurate transcription through AI Speech Recognition. We offer real-time transcription and pre-recorded speech-to-text. The latter allows uploading a file that contains audio voice data for transcribing.\r\n\r\nNow that we have our Deepgram API Key let\u2019s set up our Python AI piano project so we can start making music!\r\n\r\n## Create a Python Virtual Environment\r\n\r\nMake a Python directory called `play-piano` to hold our project. Inside of it, create a new file called `piano-with-deepgram.py`, which will have our main code for the project.\r\n\r\nWe need to create a virtual environment and activate it so we can `pip` install our Python packages. We have a more in-depth article about virtual environments on our Deepgram Developer [blog](https://blog.deepgram.com/python-virtual-environments/).\r\n\r\nActivate the virtual environment after it\u2019s created and install the following Python packages from the terminal.\r\n\r\n    pip install deepgram-sdk\r\n    pip install python-dotenv\r\n    pip install mingus\r\n    pip install pygame\r\n    pip install sounddevice\r\n    pip install scipy\r\n\r\nLet\u2019s go through each of the Python packages.\r\n\r\n*   `deepgram-sdk` is the Deepgram Python SDK installation that allows us to transcribe speech audio, or voice, to a text transcript.\r\n*   `python-dotenv` helps us work with environment variables and our Deepgram API KEY, which we\u2019ll pull from the `.env` file.\r\n*   `mingus` is a package for Python used by programmers and musicians to make and play music.\r\n*   `pygame` is an open-sourced Python engine to help us make games or other multimedia applications.\r\n*   `sounddevice` helps get audio from our device\u2019s microphone and records it as a NumPy array.\r\n*   `scipy` helps writes the NumPy array into a WAV file.\r\n\r\nWe need to download a few files, including [**keys.png**](https://github.com/bspaans/python-mingus/blob/master/mingus_examples/pygame-piano/keys.png), which is the image of the piano GUI. The other file we need is the **Yamaha-Grand-ios-v1.2** from [this site](https://sites.google.com/site/soundfonts4u/). A SoundFont contains a sample of musical instruments; in our case, we\u2019ll need a piano sound.\r\n\r\n## The Code to Play Voice-Controlled Music with Python and AI\r\n\r\nWe\u2019ll only cover the Deepgram code in this section but will provide the entire code for the project at the end of this post.\r\n\r\n```python\r\nfile_name = input(\"Name the output WAV file: \")\r\n\r\nAUDIO_FILE = file_name\r\n\r\nfs = 44100\r\nduration = 30.0\r\n\r\n\r\ndef record_song_with_voice():\r\n   print(\"Recording.....\")\r\n   record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n   sd.wait()\r\n   write(AUDIO_FILE, fs,record_voice)\r\n   print(\"Finished.....Please check your output file\")\r\n\r\nasync def get_deepgram_transcript():\r\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n  \r\n   record_song_with_voice() \r\n   with open(AUDIO_FILE, \"rb\") as audio:\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n\r\nasync def get_note_data():\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n \r\n   get_numbers = await get_deepgram_transcript()\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n  \r\n   return [note_dictonary [x['word']] for x in data]\r\n\r\ndata = asyncio.run(get_note_data())\r\n```\r\n\r\n## Deepgram Python Code Explanation\r\n\r\nThis line of code prompts the user to create a name of the audio file so that the file will save in `.wav` format:\r\n\r\n```python\r\nfile_name = input(\"Name the output WAV file: \")\r\n```\r\n\r\nOnce the file is created the function `record_song_with_voice` gets called inside the `get_deepgram_transcript` method.\r\n\r\n```python\r\ndef record_song_with_voice():\r\n   print(\"Recording.....\")\r\n   record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n   sd.wait()\r\n   write(AUDIO_FILE, fs,record_voice)\r\n   print(\"Finished.....Please check your output file\")\r\n```\r\n\r\nInside the `record_song_with_voice` function, this line records the audio.\r\n\r\n```python\r\n record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n```\r\n\r\nWhere `duration` is the number of seconds it takes to record an audio file, and `fs` represents the sampling frequency. We set both of these as constants near the top of the code.\r\n\r\nThen we write the voice recording to an audio file using the `.write()` method. That line of code looks like this:\r\n\r\n```python\r\n   write(AUDIO_FILE, fs,record_voice)\r\n```\r\n\r\nOnce the file is done writing, this message will print to the terminal `\u201DFinished.....Please check your output file\"`, which means the recording is complete.\r\n\r\nThe function `get_deepgram_transcript` is where most of the magic happens. Let\u2019s walk through the code.\r\n\r\n```python\r\nasync def get_deepgram_transcript():\r\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n  \r\n   record_song_with_voice() \r\n\r\n   with open(AUDIO_FILE, \"rb\") as audio:\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n```\r\n\r\nHere we initialize the Deepgram Python SDK. That\u2019s why it\u2019s essential to grab a [Deepgram API Key from the console](https://console.deepgram.com/signup?jump=keys).\r\n\r\n```python\r\ndeepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n```\r\n\r\nWe store our Deepgram API Key in a `.env` file like so:\r\n\r\n```python\r\nDEEPGRAM_API_KEY=\"abc123\"\r\n```\r\n\r\nThe `abc123` represents the API Key Deepgram assigns us.\r\n\r\nNext, we call the external function `record_song_with_voice()`, which allows us to record our voice and create a `.wav` file that will pass into Deepgram as pre-recorded audio.\r\n\r\nFinally, we open the newly created audio file in binary format for reading. We provide key/values pairs for `buffer` and a `mimetype` using a Python dictionary. The buffer\u2019s value is `audio`, the object we assigned it in this line `with open(AUDIO_FILE, \"rb\") as audio:` The mimetype value is `audio/wav`, which is the file format we\u2019re using, which one of 40+ different file formats that Deepgram supports. We then call Deepgram and perform a pre-recorded transcription in this line: `response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})`. We pass in the `numerals` parameter so that when we say a number, it will process in numeric form.\r\n\r\n```python\r\n with open(AUDIO_FILE, \"rb\") as audio:\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n```\r\n\r\nThe last bit of code to review is the `get_note_data` function, doing precisely that: getting the note data.\r\n\r\n```python\r\nasync def get_note_data():\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n \r\n   get_numbers = await get_deepgram_transcript()\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n  \r\n   return [note_dictonary [x['word']] for x in data]\r\n\r\ndata = asyncio.run(get_note_data())\r\n```\r\n\r\nWe have a Python dictionary with keys from \u20181\u2019 to \u20187\u2019 corresponding to every note in the C Major scale. For example, when we say the number `1` that plays the note `C`, saying the number `2` will play the \u2018D\u2019 note, and so on:\r\n\r\n```python\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n```\r\n\r\nHere\u2019s how that would look on a piano. Each note in C Major is labeled, and located above is a corresponding number. The numbers 1 - 7 are critical, representing a single note in our melody.\r\n\r\n![Piano Keys with Deepgram API to play voice-controlled music with Python](https://res.cloudinary.com/deepgram/image/upload/v1659450623/blog/2022/08/voice-controlled-music-with-python/Musical-Keyboard-Python-Deepgram.png)\r\n\r\nNext, we get the numerals from the Deepgram pre-recorded transcript `get_numbers = await get_deepgram_transcript()`.\r\n\r\nWe then create an empty list called `data` and check if there are any `results` in the parsed response we get back from Deepgram. If results exist, we get that result and store it in `data`:\r\n\r\n```python\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n```\r\n\r\nExample output may look like the below, depending on which song we create.\r\n\r\n```\r\n    [\r\n    {'word': '1', 'start': 2.0552316, 'end': 2.4942129, 'confidence': 0.99902344, 'punctuated_word': '1'}, \r\n    {'word': '4', 'start': 2.8533795, 'end': 3.172639, 'confidence': 0.9980469, 'punctuated_word': '4'}, \r\n    {'word': '3', 'start': 3.6116204, 'end': 4.1116204, 'confidence': 0.9975586, 'punctuated_word': '3'}\r\n    ]\r\n```\r\n\r\nWe notice that the `word` key in the above response correlates to a numeral we speak into the microphone when recording the song.\r\n\r\nWe can now create a new list that maps each numeral to a note on the piano, using a list comprehension `return [note_dictonary [x['word']] for x in data]`.\r\n\r\nTo run the project, we\u2019ll need all the code. See the end of this post.\r\n\r\nThen in our terminal, we can run the project by typing:\r\n\r\n```\r\npython3 piano-with-deepgram.py\r\n```\r\nNow, use our voice to say the following numerals, which correspond to piano notes, to play the first few phrases from Lady Gaga\u2019s song Bad Romance:\r\n\r\n`12314 3333211 12314 3333211`\r\n\r\n## Next Steps to Extend the Voice-Controlled Python AI Music Example\r\n\r\nCongratulations on getting to the end of the tutorial! We encourage you to try and extend the project to do the following:\r\n\r\n*   Play around with the code to play songs in different octaves\r\n*   Play voice-controlled music that has flats and sharps\r\n*   Tweak the code to play voice-controlled music using whole notes and half notes\r\n\r\nWhen you have your new masterpiece, please send us a Tweet at [@DeepgramAI](https://twitter.com/DeepgramAI) and showcase your work!\r\n\r\n## The Entire Python Code for the Voice-Controlled Music Example\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom pygame.locals import *\r\nfrom mingus.core import notes, chords\r\nfrom mingus.containers import *\r\nfrom mingus.midi import fluidsynth\r\nfrom os import sys\r\nfrom scipy.io.wavfile import write\r\nfrom deepgram import Deepgram\r\nfrom dotenv import load_dotenv\r\nimport asyncio, json\r\nimport pygame\r\nimport os\r\nimport time\r\nimport sounddevice as sd\r\n\r\n\r\nload_dotenv()\r\nfile_name = input(\"Name the output WAV file: \")\r\n\r\n# Audio File with song\r\nAUDIO_FILE = file_name\r\nSF2 = \"soundfont.sf2\"\r\nOCTAVES = 5 # number of octaves to show\r\nLOWEST = 2 # lowest octave to show\r\nFADEOUT = 0.25 # 1.0 # coloration fadeout time (1 tick = 0.001)\r\nWHITE_KEY = 0\r\nBLACK_KEY = 1\r\n\r\nWHITE_KEYS = [\r\n  \"C\",\r\n  \"D\",\r\n  \"E\",\r\n  \"F\",\r\n  \"G\",\r\n  \"A\",\r\n  \"B\",\r\n]\r\n\r\nBLACK_KEYS = [\"C#\", \"D#\", \"F#\", \"G#\", \"A#\"]\r\n\r\nfs = 44100\r\nduration = 30.0\r\n\r\ndef record_song_with_voice():\r\n   print(\"Recording.....\")\r\n   record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n   sd.wait()\r\n   write(AUDIO_FILE, fs,record_voice)\r\n   print(\"Finished.....Please check your output file\")\r\n\r\nasync def get_deepgram_transcript():\r\n   # Initializes the Deepgram SDK\r\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n  \r\n   # call the external function\r\n   record_song_with_voice()\r\n   # Open the audio file\r\n   with open(AUDIO_FILE, \"rb\") as audio:\r\n       # ...or replace mimetype as appropriate\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n\r\ndef load_img(name):\r\n  \"\"\"Load image and return an image object\"\"\"\r\n  fullname = name\r\n  try:\r\n      image = pygame.image.load(fullname)\r\n      if image.get_alpha() is None:\r\n          image = image.convert()\r\n      else:\r\n          image = image.convert_alpha()\r\n  except pygame.error as message:\r\n      print(\"Error: couldn't load image: \", fullname)\r\n      raise SystemExit(message)\r\n  return (image, image.get_rect())\r\nif not fluidsynth.init(SF2):\r\n  print(\"Couldn't load soundfont\", SF2)\r\n  sys.exit(1)\r\n  \r\npygame.init()\r\npygame.font.init()\r\nfont = pygame.font.SysFont(\"monospace\", 12)\r\nscreen = pygame.display.set_mode((640, 480))\r\n(key_graphic, kgrect) = load_img(\"keys.png\")\r\n(width, height) = (kgrect.width, kgrect.height)\r\nwhite_key_width = width / 7\r\n\r\n# Reset display to wrap around the keyboard image\r\npygame.display.set_mode((OCTAVES * width, height + 20))\r\npygame.display.set_caption(\"mingus piano\")\r\noctave = 4\r\nchannel = 8\r\n\r\n# pressed is a surface that is used to show where a key has been pressed\r\npressed = pygame.Surface((white_key_width, height))\r\npressed.fill((0, 230, 0))\r\n\r\n# text is the surface displaying the determined chord\r\ntext = pygame.Surface((width * OCTAVES, 20))\r\ntext.fill((255, 255, 255))\r\n\r\nplaying_w = [] # white keys being played right now\r\nplaying_b = [] # black keys being played right now\r\nquit = False\r\ntick = 0.0\r\n\r\ndef play_note(note):\r\n  \"\"\"play_note determines the coordinates of a note on the keyboard image\r\n  and sends a request to play the note to the fluidsynth server\"\"\"\r\n  global text\r\n  octave_offset = (note.octave - LOWEST) * width\r\n  if note.name in WHITE_KEYS:\r\n      # Getting the x coordinate of a white key can be done automatically\r\n      w = WHITE_KEYS.index(note.name) * white_key_width\r\n      w = w + octave_offset\r\n      # Add a list containing the x coordinate, the tick at the current time\r\n      # and of course the note itself to playing_w\r\n      playing_w.append([w, tick, note])\r\n  else:\r\n      # For black keys I hard coded the x coordinates. It's ugly.\r\n      i = BLACK_KEYS.index(note.name)\r\n      if i == 0:\r\n          w = 18\r\n      elif i == 1:\r\n          w = 58\r\n      elif i == 2:\r\n          w = 115\r\n      elif i == 3:\r\n          w = 151\r\n      else:\r\n          w = 187\r\n      w = w + octave_offset\r\n      playing_b.append([w, tick, note])\r\n  # To find out what sort of chord is being played we have to look at both the\r\n  # white and black keys, obviously:\r\n  notes = playing_w + playing_b\r\n  notes.sort()\r\n  notenames = []\r\n  for n in notes:\r\n      notenames.append(n[2].name)\r\n  # Determine the chord\r\n  det = chords.determine(notenames)\r\n  if det != []:\r\n      det = det[0]\r\n  else:\r\n      det = \"\"\r\n  # And render it onto the text surface\r\n  t = font.render(det, 2, (0, 0, 0))\r\n  text.fill((255, 255, 255))\r\n  text.blit(t, (0, 0))\r\n  # Play the note\r\n  fluidsynth.play_Note(note, channel, 100)\r\n  time.sleep(0.50)\r\n\r\nasync def get_note_data():\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n \r\n   get_numbers = await get_deepgram_transcript()\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n\r\n  \r\n   return [note_dictonary [x['word']] for x in data]\r\ndata = asyncio.run(get_note_data())\r\ni = 0\r\n\r\nwhile i < len(data):\r\n   # Blit the picture of one octave OCTAVES times.\r\n   for x in range(OCTAVES):\r\n       screen.blit(key_graphic, (x * width, 0))\r\n   # Blit the text surface\r\n   screen.blit(text, (0, height))\r\n  # Check all the white keys\r\n   for note in playing_w:\r\n      diff = tick - note[1]\r\n      # If a is past its prime, remove it, otherwise blit the pressed surface\r\n      # with a 'cool' fading effect.\r\n      if diff > FADEOUT:\r\n          fluidsynth.stop_Note(note[2], channel)\r\n          playing_w.remove(note)\r\n      else:\r\n          pressed.fill((0, ((FADEOUT - diff) / FADEOUT) * 255, 124))\r\n          screen.blit(pressed, (note[0], 0), None, pygame.BLEND_SUB)\r\n   if tick > i/4:\r\n       play_note(Note(data[i], octave))\r\n       i += 1\r\n      # if i == len(data):\r\n      # i = 0\r\n  \r\n \r\n   pygame.display.update()\r\n   tick += 0.005 # or 0.001 or 0.0001\r\n```\r\n\r\n", "html": `<p>Move over Beethoven. This tutorial will use Python and the Deepgram API speech-to-text audio transcription to play a piano with your voice. The song we\u2019ll play is the first few phrases of <a href="https://youtu.be/-bsMuWw-v6c">Lady Gaga\u2019s Bad Romance</a>. It\u2019s a simple piece in C Major, meaning no flats and sharps! We\u2019ll only use pitches C, D, E, F, G, A, and B, and no black keys. What a beautiful chance for someone learning how to play the piano without a keyboard, tapping into the power of voice to play music!</p>
<p>After running the project, we\u2019ll see the GIF below when running the project as a PyGame application. A window will appear, and the piano will play the song. We\u2019ll hear the notes, which also light up on the keyboard.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1659451110/blog/2022/08/voice-controlled-music-with-python/python-voice-controlled-music.gif" alt="Python and Deepgram API playing voice-controlled music with the piano"></p>
<p>Let\u2019s get started!</p>
<h2 id="what-well-need-to-play-voice-controlled-music-using-ai">What We\u2019ll Need to Play Voice-Controlled Music Using AI</h2>
<p>This project requires macOS but is also possible with a Windows or Linux machine. We\u2019ll also use Python 3.10 and other tools like FluidSynth and Deepgram Python SDK speech-to-text audio transcription.</p>
<h3 id="fluidsynth">FluidSynth</h3>
<p>We need to install <a href="https://www.fluidsynth.org/">FluidSynth</a>, a free, open-source MIDI software synthesizer that creates sound in digital format, usually for music. <strong>MIDI</strong> or <strong>Musical Instrument Digital Interface</strong> is a protocol that allows musical gear like computers, software, and instruments to communicate with one another. <strong>FluidSynth</strong> uses <strong>SoundFont</strong> files to generate audio. These files have samples of musical instruments like a piano that play MIDI files.</p>
<p>There are various options to install FluidSynth on a Mac. In this tutorial, we\u2019ll use <a href="https://brew.sh/">Homebrew</a> for the installation. After installing Homebrew, run this command anywhere in the terminal:</p>
<p>brew install fluidsynth</p>
<p>Now that FluidSynth is installed, let\u2019s get our Deepgram API Key.</p>
<h3 id="deepgram-api-key">Deepgram API Key</h3>
<p>We need to grab a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key from the console</a>. It\u2019s effortless to sign up and create an API Key here. Deepgram is an AI automated speech recognition voice-to-text company that allows us to build applications that transcribe speech-to-text. We\u2019ll use Deepgram\u2019s Python SDK and the <a href="https://developers.deepgram.com/documentation/features/numerals/">Numerals feature</a>, which converts a number from written format to numerical format. For example, if we say the number \u201Cthree\u201D, it would appear in our transcript as \u201C3\u201D.</p>
<p>One of the many reasons to choose Deepgram over other providers is that we build better voice applications with faster, more accurate transcription through AI Speech Recognition. We offer real-time transcription and pre-recorded speech-to-text. The latter allows uploading a file that contains audio voice data for transcribing.</p>
<p>Now that we have our Deepgram API Key let\u2019s set up our Python AI piano project so we can start making music!</p>
<h2 id="create-a-python-virtual-environment">Create a Python Virtual Environment</h2>
<p>Make a Python directory called <code is:raw>play-piano</code> to hold our project. Inside of it, create a new file called <code is:raw>piano-with-deepgram.py</code>, which will have our main code for the project.</p>
<p>We need to create a virtual environment and activate it so we can <code is:raw>pip</code> install our Python packages. We have a more in-depth article about virtual environments on our Deepgram Developer <a href="https://blog.deepgram.com/python-virtual-environments/">blog</a>.</p>
<p>Activate the virtual environment after it\u2019s created and install the following Python packages from the terminal.</p>
<p>pip install deepgram-sdk\r
pip install python-dotenv\r
pip install mingus\r
pip install pygame\r
pip install sounddevice\r
pip install scipy</p>
<p>Let\u2019s go through each of the Python packages.</p>
<ul>
<li><code is:raw>deepgram-sdk</code> is the Deepgram Python SDK installation that allows us to transcribe speech audio, or voice, to a text transcript.</li>
<li><code is:raw>python-dotenv</code> helps us work with environment variables and our Deepgram API KEY, which we\u2019ll pull from the <code is:raw>.env</code> file.</li>
<li><code is:raw>mingus</code> is a package for Python used by programmers and musicians to make and play music.</li>
<li><code is:raw>pygame</code> is an open-sourced Python engine to help us make games or other multimedia applications.</li>
<li><code is:raw>sounddevice</code> helps get audio from our device\u2019s microphone and records it as a NumPy array.</li>
<li><code is:raw>scipy</code> helps writes the NumPy array into a WAV file.</li>
</ul>
<p>We need to download a few files, including <a href="https://github.com/bspaans/python-mingus/blob/master/mingus_examples/pygame-piano/keys.png"><strong>keys.png</strong></a>, which is the image of the piano GUI. The other file we need is the <strong>Yamaha-Grand-ios-v1.2</strong> from <a href="https://sites.google.com/site/soundfonts4u/">this site</a>. A SoundFont contains a sample of musical instruments; in our case, we\u2019ll need a piano sound.</p>
<h2 id="the-code-to-play-voice-controlled-music-with-python-and-ai">The Code to Play Voice-Controlled Music with Python and AI</h2>
<p>We\u2019ll only cover the Deepgram code in this section but will provide the entire code for the project at the end of this post.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> file_name</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">fs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">44100</span></span>
<span class="line"><span style="color: #C9D1D9">duration </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30.0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice() </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span></code></pre>
<h2 id="deepgram-python-code-explanation">Deepgram Python Code Explanation</h2>
<p>This line of code prompts the user to create a name of the audio file so that the file will save in <code is:raw>.wav</code> format:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Once the file is created the function <code is:raw>record_song_with_voice</code> gets called inside the <code is:raw>get_deepgram_transcript</code> method.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Inside the <code is:raw>record_song_with_voice</code> function, this line records the audio.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Where <code is:raw>duration</code> is the number of seconds it takes to record an audio file, and <code is:raw>fs</code> represents the sampling frequency. We set both of these as constants near the top of the code.</p>
<p>Then we write the voice recording to an audio file using the <code is:raw>.write()</code> method. That line of code looks like this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span></code></pre>
<p>Once the file is done writing, this message will print to the terminal <code is:raw>\u201DFinished.....Please check your output file"</code>, which means the recording is complete.</p>
<p>The function <code is:raw>get_deepgram_transcript</code> is where most of the magic happens. Let\u2019s walk through the code.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice() </span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span></code></pre>
<p>Here we initialize the Deepgram Python SDK. That\u2019s why it\u2019s essential to grab a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key from the console</a>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>We store our Deepgram API Key in a <code is:raw>.env</code> file like so:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;abc123&quot;</span></span></code></pre>
<p>The <code is:raw>abc123</code> represents the API Key Deepgram assigns us.</p>
<p>Next, we call the external function <code is:raw>record_song_with_voice()</code>, which allows us to record our voice and create a <code is:raw>.wav</code> file that will pass into Deepgram as pre-recorded audio.</p>
<p>Finally, we open the newly created audio file in binary format for reading. We provide key/values pairs for <code is:raw>buffer</code> and a <code is:raw>mimetype</code> using a Python dictionary. The buffer\u2019s value is <code is:raw>audio</code>, the object we assigned it in this line <code is:raw>with open(AUDIO_FILE, "rb") as audio:</code> The mimetype value is <code is:raw>audio/wav</code>, which is the file format we\u2019re using, which one of 40+ different file formats that Deepgram supports. We then call Deepgram and perform a pre-recorded transcription in this line: <code is:raw>response = await deepgram.transcription.prerecorded(source, {"punctuate": True, "numerals": True})</code>. We pass in the <code is:raw>numerals</code> parameter so that when we say a number, it will process in numeric form.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span></code></pre>
<p>The last bit of code to review is the <code is:raw>get_note_data</code> function, doing precisely that: getting the note data.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span></code></pre>
<p>We have a Python dictionary with keys from \u20181\u2019 to \u20187\u2019 corresponding to every note in the C Major scale. For example, when we say the number <code is:raw>1</code> that plays the note <code is:raw>C</code>, saying the number <code is:raw>2</code> will play the \u2018D\u2019 note, and so on:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span></code></pre>
<p>Here\u2019s how that would look on a piano. Each note in C Major is labeled, and located above is a corresponding number. The numbers 1 - 7 are critical, representing a single note in our melody.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1659450623/blog/2022/08/voice-controlled-music-with-python/Musical-Keyboard-Python-Deepgram.png" alt="Piano Keys with Deepgram API to play voice-controlled music with Python"></p>
<p>Next, we get the numerals from the Deepgram pre-recorded transcript <code is:raw>get_numbers = await get_deepgram_transcript()</code>.</p>
<p>We then create an empty list called <code is:raw>data</code> and check if there are any <code is:raw>results</code> in the parsed response we get back from Deepgram. If results exist, we get that result and store it in <code is:raw>data</code>:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Example output may look like the below, depending on which song we create.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    [</span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;1&#39;, &#39;start&#39;: 2.0552316, &#39;end&#39;: 2.4942129, &#39;confidence&#39;: 0.99902344, &#39;punctuated_word&#39;: &#39;1&#39;}, </span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;4&#39;, &#39;start&#39;: 2.8533795, &#39;end&#39;: 3.172639, &#39;confidence&#39;: 0.9980469, &#39;punctuated_word&#39;: &#39;4&#39;}, </span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;3&#39;, &#39;start&#39;: 3.6116204, &#39;end&#39;: 4.1116204, &#39;confidence&#39;: 0.9975586, &#39;punctuated_word&#39;: &#39;3&#39;}</span></span>
<span class="line"><span style="color: #c9d1d9">    ]</span></span></code></pre>
<p>We notice that the <code is:raw>word</code> key in the above response correlates to a numeral we speak into the microphone when recording the song.</p>
<p>We can now create a new list that maps each numeral to a note on the piano, using a list comprehension <code is:raw>return [note_dictonary [x['word']] for x in data]</code>.</p>
<p>To run the project, we\u2019ll need all the code. See the end of this post.</p>
<p>Then in our terminal, we can run the project by typing:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">python3 piano-with-deepgram.py</span></span></code></pre>
<p>Now, use our voice to say the following numerals, which correspond to piano notes, to play the first few phrases from Lady Gaga\u2019s song Bad Romance:</p>
<p><code is:raw>12314 3333211 12314 3333211</code></p>
<h2 id="next-steps-to-extend-the-voice-controlled-python-ai-music-example">Next Steps to Extend the Voice-Controlled Python AI Music Example</h2>
<p>Congratulations on getting to the end of the tutorial! We encourage you to try and extend the project to do the following:</p>
<ul>
<li>Play around with the code to play songs in different octaves</li>
<li>Play voice-controlled music that has flats and sharps</li>
<li>Tweak the code to play voice-controlled music using whole notes and half notes</li>
</ul>
<p>When you have your new masterpiece, please send us a Tweet at <a href="https://twitter.com/DeepgramAI">@DeepgramAI</a> and showcase your work!</p>
<h2 id="the-entire-python-code-for-the-voice-controlled-music-example">The Entire Python Code for the Voice-Controlled Music Example</h2>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pygame.locals </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.core </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> notes, chords</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.containers </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.midi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> fluidsynth</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> os </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> sys</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> scipy.io.wavfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> write</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio, json</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> pygame</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> time</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> sounddevice </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> sd</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># Audio File with song</span></span>
<span class="line"><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> file_name</span></span>
<span class="line"><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;soundfont.sf2&quot;</span></span>
<span class="line"><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># number of octaves to show</span></span>
<span class="line"><span style="color: #79C0FF">LOWEST</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># lowest octave to show</span></span>
<span class="line"><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.25</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># 1.0 # coloration fadeout time (1 tick = 0.001)</span></span>
<span class="line"><span style="color: #79C0FF">WHITE_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #79C0FF">BLACK_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;C&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;D&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;E&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;F&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;G&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;A&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;B&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">BLACK_KEYS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&quot;C#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;D#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;F#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;G#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;A#&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">fs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">44100</span></span>
<span class="line"><span style="color: #C9D1D9">duration </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30.0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Initializes the Deepgram SDK</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># call the external function</span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice()</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Open the audio file</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #8B949E"># ...or replace mimetype as appropriate</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">load_img</span><span style="color: #C9D1D9">(name):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;&quot;&quot;Load image and return an image object&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  fullname </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> name</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.image.load(fullname)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> image.get_alpha() </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> image.convert()</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> image.convert_alpha()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> pygame.error </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> message:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Error: couldn&#39;t load image: &quot;</span><span style="color: #C9D1D9">, fullname)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SystemExit</span><span style="color: #C9D1D9">(message)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> (image, image.get_rect())</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> fluidsynth.init(</span><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Couldn&#39;t load soundfont&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  sys.exit(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">pygame.init()</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.font.init()</span></span>
<span class="line"><span style="color: #C9D1D9">font </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.font.SysFont(</span><span style="color: #A5D6FF">&quot;monospace&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">screen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.display.set_mode((</span><span style="color: #79C0FF">640</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">480</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">(key_graphic, kgrect) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> load_img(</span><span style="color: #A5D6FF">&quot;keys.png&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">(width, height) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (kgrect.width, kgrect.height)</span></span>
<span class="line"><span style="color: #C9D1D9">white_key_width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">7</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># Reset display to wrap around the keyboard image</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.display.set_mode((</span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width, height </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.display.set_caption(</span><span style="color: #A5D6FF">&quot;mingus piano&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">octave </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">4</span></span>
<span class="line"><span style="color: #C9D1D9">channel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">8</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># pressed is a surface that is used to show where a key has been pressed</span></span>
<span class="line"><span style="color: #C9D1D9">pressed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.Surface((white_key_width, height))</span></span>
<span class="line"><span style="color: #C9D1D9">pressed.fill((</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">230</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># text is the surface displaying the determined chord</span></span>
<span class="line"><span style="color: #C9D1D9">text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.Surface((width </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">text.fill((</span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">playing_w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [] </span><span style="color: #8B949E"># white keys being played right now</span></span>
<span class="line"><span style="color: #C9D1D9">playing_b </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [] </span><span style="color: #8B949E"># black keys being played right now</span></span>
<span class="line"><span style="color: #79C0FF">quit</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">False</span></span>
<span class="line"><span style="color: #C9D1D9">tick </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">play_note</span><span style="color: #C9D1D9">(note):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;&quot;&quot;play_note determines the coordinates of a note on the keyboard image</span></span>
<span class="line"><span style="color: #A5D6FF">  and sends a request to play the note to the fluidsynth server&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">global</span><span style="color: #C9D1D9"> text</span></span>
<span class="line"><span style="color: #C9D1D9">  octave_offset </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (note.octave </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">LOWEST</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> note.name </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># Getting the x coordinate of a white key can be done automatically</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9">.index(note.name) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> white_key_width</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> octave_offset</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># Add a list containing the x coordinate, the tick at the current time</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># and of course the note itself to playing_w</span></span>
<span class="line"><span style="color: #C9D1D9">      playing_w.append([w, tick, note])</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># For black keys I hard coded the x coordinates. It&#39;s ugly.</span></span>
<span class="line"><span style="color: #C9D1D9">      i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">BLACK_KEYS</span><span style="color: #C9D1D9">.index(note.name)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">18</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">58</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">115</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">151</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">187</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> octave_offset</span></span>
<span class="line"><span style="color: #C9D1D9">      playing_b.append([w, tick, note])</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># To find out what sort of chord is being played we have to look at both the</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># white and black keys, obviously:</span></span>
<span class="line"><span style="color: #C9D1D9">  notes </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> playing_w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> playing_b</span></span>
<span class="line"><span style="color: #C9D1D9">  notes.sort()</span></span>
<span class="line"><span style="color: #C9D1D9">  notenames </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> n </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> notes:</span></span>
<span class="line"><span style="color: #C9D1D9">      notenames.append(n[</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">].name)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Determine the chord</span></span>
<span class="line"><span style="color: #C9D1D9">  det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> chords.determine(notenames)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> det </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> []:</span></span>
<span class="line"><span style="color: #C9D1D9">      det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> det[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># And render it onto the text surface</span></span>
<span class="line"><span style="color: #C9D1D9">  t </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> font.render(det, </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  text.fill((</span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  text.blit(t, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Play the note</span></span>
<span class="line"><span style="color: #C9D1D9">  fluidsynth.play_Note(note, channel, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  time.sleep(</span><span style="color: #79C0FF">0.50</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span>
<span class="line"><span style="color: #C9D1D9">i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(data):</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Blit the picture of one octave OCTAVES times.</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">range</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">       screen.blit(key_graphic, (x </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Blit the text surface</span></span>
<span class="line"><span style="color: #C9D1D9">   screen.blit(text, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, height))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Check all the white keys</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> note </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> playing_w:</span></span>
<span class="line"><span style="color: #C9D1D9">      diff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> tick </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> note[</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># If a is past its prime, remove it, otherwise blit the pressed surface</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># with a &#39;cool&#39; fading effect.</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> diff </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          fluidsynth.stop_Note(note[</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">], channel)</span></span>
<span class="line"><span style="color: #C9D1D9">          playing_w.remove(note)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          pressed.fill((</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, ((</span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> diff) </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">124</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">          screen.blit(pressed, (note[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">), </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">, pygame.</span><span style="color: #79C0FF">BLEND_SUB</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> tick </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       play_note(Note(data[i], octave))</span></span>
<span class="line"><span style="color: #C9D1D9">       i </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># if i == len(data):</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># i = 0</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   pygame.display.update()</span></span>
<span class="line"><span style="color: #C9D1D9">   tick </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.005</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># or 0.001 or 0.0001</span></span></code></pre>` };
const frontmatter = { "title": "How to Use Voice to Control Music with Python and Deepgram", "description": "This tutorial will use Python and the Deepgram API speech-to-text audio transcription to play voice-controlled music with the piano.", "date": "2022-08-18T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1660765739/blog/2022/08/voice-controlled-music-with-python/2208-How-to-Use-Voice-to-Control-Music-with-Python-and-Deepgram-blog%402x.jpg", "authors": ["tonya-sims"], "category": "tutorial", "tags": ["python"], "seo": { "title": "How to Use Voice to Control Music with Python and Deepgram", "description": "This tutorial will use Python and the Deepgram API speech-to-text audio transcription to play voice-controlled music with the piano." }, "shorturls": { "share": "https://dpgr.am/3eb1ffd", "twitter": "https://dpgr.am/568a128", "linkedin": "https://dpgr.am/b4afffb", "reddit": "https://dpgr.am/345ca5a", "facebook": "https://dpgr.am/67e6c9c" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454126/blog/voice-controlled-music-with-python/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "what-well-need-to-play-voice-controlled-music-using-ai", "text": "What We\u2019ll Need to Play Voice-Controlled Music Using AI" }, { "depth": 3, "slug": "fluidsynth", "text": "FluidSynth" }, { "depth": 3, "slug": "deepgram-api-key", "text": "Deepgram API Key" }, { "depth": 2, "slug": "create-a-python-virtual-environment", "text": "Create a Python Virtual Environment" }, { "depth": 2, "slug": "the-code-to-play-voice-controlled-music-with-python-and-ai", "text": "The Code to Play Voice-Controlled Music with Python and AI" }, { "depth": 2, "slug": "deepgram-python-code-explanation", "text": "Deepgram Python Code Explanation" }, { "depth": 2, "slug": "next-steps-to-extend-the-voice-controlled-python-ai-music-example", "text": "Next Steps to Extend the Voice-Controlled Python AI Music Example" }, { "depth": 2, "slug": "the-entire-python-code-for-the-voice-controlled-music-example", "text": "The Entire Python Code for the Voice-Controlled Music Example" }], "source": "\r\nMove over Beethoven. This tutorial will use Python and the Deepgram API speech-to-text audio transcription to play a piano with your voice. The song we\u2019ll play is the first few phrases of [Lady Gaga\u2019s Bad Romance](https://youtu.be/-bsMuWw-v6c). It\u2019s a simple piece in C Major, meaning no flats and sharps! We\u2019ll only use pitches C, D, E, F, G, A, and B, and no black keys. What a beautiful chance for someone learning how to play the piano without a keyboard, tapping into the power of voice to play music!\r\n\r\nAfter running the project, we'll see the GIF below when running the project as a PyGame application. A window will appear, and the piano will play the song. We'll hear the notes, which also light up on the keyboard.\r\n\r\n![Python and Deepgram API playing voice-controlled music with the piano](https://res.cloudinary.com/deepgram/image/upload/v1659451110/blog/2022/08/voice-controlled-music-with-python/python-voice-controlled-music.gif)\r\n\r\nLet\u2019s get started!\r\n\r\n## What We\u2019ll Need to Play Voice-Controlled Music Using AI\r\n\r\nThis project requires macOS but is also possible with a Windows or Linux machine. We\u2019ll also use Python 3.10 and other tools like FluidSynth and Deepgram Python SDK speech-to-text audio transcription.\r\n\r\n### FluidSynth\r\n\r\nWe need to install [FluidSynth](https://www.fluidsynth.org/), a free, open-source MIDI software synthesizer that creates sound in digital format, usually for music. **MIDI** or **Musical Instrument Digital Interface** is a protocol that allows musical gear like computers, software, and instruments to communicate with one another. **FluidSynth** uses **SoundFont** files to generate audio. These files have samples of musical instruments like a piano that play MIDI files.\r\n\r\nThere are various options to install FluidSynth on a Mac. In this tutorial, we\u2019ll use [Homebrew](https://brew.sh/) for the installation. After installing Homebrew, run this command anywhere in the terminal:\r\n\r\n    brew install fluidsynth\r\n\r\nNow that FluidSynth is installed, let\u2019s get our Deepgram API Key.\r\n\r\n### Deepgram API Key\r\n\r\nWe need to grab a [Deepgram API Key from the console](https://console.deepgram.com/signup?jump=keys). It\u2019s effortless to sign up and create an API Key here. Deepgram is an AI automated speech recognition voice-to-text company that allows us to build applications that transcribe speech-to-text. We\u2019ll use Deepgram\u2019s Python SDK and the [Numerals feature](https://developers.deepgram.com/documentation/features/numerals/), which converts a number from written format to numerical format. For example, if we say the number \u201Cthree\u201D, it would appear in our transcript as \u201C3\u201D.\r\n\r\nOne of the many reasons to choose Deepgram over other providers is that we build better voice applications with faster, more accurate transcription through AI Speech Recognition. We offer real-time transcription and pre-recorded speech-to-text. The latter allows uploading a file that contains audio voice data for transcribing.\r\n\r\nNow that we have our Deepgram API Key let\u2019s set up our Python AI piano project so we can start making music!\r\n\r\n## Create a Python Virtual Environment\r\n\r\nMake a Python directory called `play-piano` to hold our project. Inside of it, create a new file called `piano-with-deepgram.py`, which will have our main code for the project.\r\n\r\nWe need to create a virtual environment and activate it so we can `pip` install our Python packages. We have a more in-depth article about virtual environments on our Deepgram Developer [blog](https://blog.deepgram.com/python-virtual-environments/).\r\n\r\nActivate the virtual environment after it\u2019s created and install the following Python packages from the terminal.\r\n\r\n    pip install deepgram-sdk\r\n    pip install python-dotenv\r\n    pip install mingus\r\n    pip install pygame\r\n    pip install sounddevice\r\n    pip install scipy\r\n\r\nLet\u2019s go through each of the Python packages.\r\n\r\n*   `deepgram-sdk` is the Deepgram Python SDK installation that allows us to transcribe speech audio, or voice, to a text transcript.\r\n*   `python-dotenv` helps us work with environment variables and our Deepgram API KEY, which we\u2019ll pull from the `.env` file.\r\n*   `mingus` is a package for Python used by programmers and musicians to make and play music.\r\n*   `pygame` is an open-sourced Python engine to help us make games or other multimedia applications.\r\n*   `sounddevice` helps get audio from our device\u2019s microphone and records it as a NumPy array.\r\n*   `scipy` helps writes the NumPy array into a WAV file.\r\n\r\nWe need to download a few files, including [**keys.png**](https://github.com/bspaans/python-mingus/blob/master/mingus_examples/pygame-piano/keys.png), which is the image of the piano GUI. The other file we need is the **Yamaha-Grand-ios-v1.2** from [this site](https://sites.google.com/site/soundfonts4u/). A SoundFont contains a sample of musical instruments; in our case, we\u2019ll need a piano sound.\r\n\r\n## The Code to Play Voice-Controlled Music with Python and AI\r\n\r\nWe\u2019ll only cover the Deepgram code in this section but will provide the entire code for the project at the end of this post.\r\n\r\n```python\r\nfile_name = input(\"Name the output WAV file: \")\r\n\r\nAUDIO_FILE = file_name\r\n\r\nfs = 44100\r\nduration = 30.0\r\n\r\n\r\ndef record_song_with_voice():\r\n   print(\"Recording.....\")\r\n   record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n   sd.wait()\r\n   write(AUDIO_FILE, fs,record_voice)\r\n   print(\"Finished.....Please check your output file\")\r\n\r\nasync def get_deepgram_transcript():\r\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n  \r\n   record_song_with_voice() \r\n   with open(AUDIO_FILE, \"rb\") as audio:\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n\r\nasync def get_note_data():\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n \r\n   get_numbers = await get_deepgram_transcript()\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n  \r\n   return [note_dictonary [x['word']] for x in data]\r\n\r\ndata = asyncio.run(get_note_data())\r\n```\r\n\r\n## Deepgram Python Code Explanation\r\n\r\nThis line of code prompts the user to create a name of the audio file so that the file will save in `.wav` format:\r\n\r\n```python\r\nfile_name = input(\"Name the output WAV file: \")\r\n```\r\n\r\nOnce the file is created the function `record_song_with_voice` gets called inside the `get_deepgram_transcript` method.\r\n\r\n```python\r\ndef record_song_with_voice():\r\n   print(\"Recording.....\")\r\n   record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n   sd.wait()\r\n   write(AUDIO_FILE, fs,record_voice)\r\n   print(\"Finished.....Please check your output file\")\r\n```\r\n\r\nInside the `record_song_with_voice` function, this line records the audio.\r\n\r\n```python\r\n record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n```\r\n\r\nWhere `duration` is the number of seconds it takes to record an audio file, and `fs` represents the sampling frequency. We set both of these as constants near the top of the code.\r\n\r\nThen we write the voice recording to an audio file using the `.write()` method. That line of code looks like this:\r\n\r\n```python\r\n   write(AUDIO_FILE, fs,record_voice)\r\n```\r\n\r\nOnce the file is done writing, this message will print to the terminal `\u201DFinished.....Please check your output file\"`, which means the recording is complete.\r\n\r\nThe function `get_deepgram_transcript` is where most of the magic happens. Let\u2019s walk through the code.\r\n\r\n```python\r\nasync def get_deepgram_transcript():\r\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n  \r\n   record_song_with_voice() \r\n\r\n   with open(AUDIO_FILE, \"rb\") as audio:\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n```\r\n\r\nHere we initialize the Deepgram Python SDK. That\u2019s why it\u2019s essential to grab a [Deepgram API Key from the console](https://console.deepgram.com/signup?jump=keys).\r\n\r\n```python\r\ndeepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n```\r\n\r\nWe store our Deepgram API Key in a `.env` file like so:\r\n\r\n```python\r\nDEEPGRAM_API_KEY=\"abc123\"\r\n```\r\n\r\nThe `abc123` represents the API Key Deepgram assigns us.\r\n\r\nNext, we call the external function `record_song_with_voice()`, which allows us to record our voice and create a `.wav` file that will pass into Deepgram as pre-recorded audio.\r\n\r\nFinally, we open the newly created audio file in binary format for reading. We provide key/values pairs for `buffer` and a `mimetype` using a Python dictionary. The buffer\u2019s value is `audio`, the object we assigned it in this line `with open(AUDIO_FILE, \"rb\") as audio:` The mimetype value is `audio/wav`, which is the file format we\u2019re using, which one of 40+ different file formats that Deepgram supports. We then call Deepgram and perform a pre-recorded transcription in this line: `response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})`. We pass in the `numerals` parameter so that when we say a number, it will process in numeric form.\r\n\r\n```python\r\n with open(AUDIO_FILE, \"rb\") as audio:\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n```\r\n\r\nThe last bit of code to review is the `get_note_data` function, doing precisely that: getting the note data.\r\n\r\n```python\r\nasync def get_note_data():\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n \r\n   get_numbers = await get_deepgram_transcript()\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n  \r\n   return [note_dictonary [x['word']] for x in data]\r\n\r\ndata = asyncio.run(get_note_data())\r\n```\r\n\r\nWe have a Python dictionary with keys from \u20181\u2019 to \u20187\u2019 corresponding to every note in the C Major scale. For example, when we say the number `1` that plays the note `C`, saying the number `2` will play the \u2018D\u2019 note, and so on:\r\n\r\n```python\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n```\r\n\r\nHere\u2019s how that would look on a piano. Each note in C Major is labeled, and located above is a corresponding number. The numbers 1 - 7 are critical, representing a single note in our melody.\r\n\r\n![Piano Keys with Deepgram API to play voice-controlled music with Python](https://res.cloudinary.com/deepgram/image/upload/v1659450623/blog/2022/08/voice-controlled-music-with-python/Musical-Keyboard-Python-Deepgram.png)\r\n\r\nNext, we get the numerals from the Deepgram pre-recorded transcript `get_numbers = await get_deepgram_transcript()`.\r\n\r\nWe then create an empty list called `data` and check if there are any `results` in the parsed response we get back from Deepgram. If results exist, we get that result and store it in `data`:\r\n\r\n```python\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n```\r\n\r\nExample output may look like the below, depending on which song we create.\r\n\r\n```\r\n    [\r\n    {'word': '1', 'start': 2.0552316, 'end': 2.4942129, 'confidence': 0.99902344, 'punctuated_word': '1'}, \r\n    {'word': '4', 'start': 2.8533795, 'end': 3.172639, 'confidence': 0.9980469, 'punctuated_word': '4'}, \r\n    {'word': '3', 'start': 3.6116204, 'end': 4.1116204, 'confidence': 0.9975586, 'punctuated_word': '3'}\r\n    ]\r\n```\r\n\r\nWe notice that the `word` key in the above response correlates to a numeral we speak into the microphone when recording the song.\r\n\r\nWe can now create a new list that maps each numeral to a note on the piano, using a list comprehension `return [note_dictonary [x['word']] for x in data]`.\r\n\r\nTo run the project, we\u2019ll need all the code. See the end of this post.\r\n\r\nThen in our terminal, we can run the project by typing:\r\n\r\n```\r\npython3 piano-with-deepgram.py\r\n```\r\nNow, use our voice to say the following numerals, which correspond to piano notes, to play the first few phrases from Lady Gaga\u2019s song Bad Romance:\r\n\r\n`12314 3333211 12314 3333211`\r\n\r\n## Next Steps to Extend the Voice-Controlled Python AI Music Example\r\n\r\nCongratulations on getting to the end of the tutorial! We encourage you to try and extend the project to do the following:\r\n\r\n*   Play around with the code to play songs in different octaves\r\n*   Play voice-controlled music that has flats and sharps\r\n*   Tweak the code to play voice-controlled music using whole notes and half notes\r\n\r\nWhen you have your new masterpiece, please send us a Tweet at [@DeepgramAI](https://twitter.com/DeepgramAI) and showcase your work!\r\n\r\n## The Entire Python Code for the Voice-Controlled Music Example\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom pygame.locals import *\r\nfrom mingus.core import notes, chords\r\nfrom mingus.containers import *\r\nfrom mingus.midi import fluidsynth\r\nfrom os import sys\r\nfrom scipy.io.wavfile import write\r\nfrom deepgram import Deepgram\r\nfrom dotenv import load_dotenv\r\nimport asyncio, json\r\nimport pygame\r\nimport os\r\nimport time\r\nimport sounddevice as sd\r\n\r\n\r\nload_dotenv()\r\nfile_name = input(\"Name the output WAV file: \")\r\n\r\n# Audio File with song\r\nAUDIO_FILE = file_name\r\nSF2 = \"soundfont.sf2\"\r\nOCTAVES = 5 # number of octaves to show\r\nLOWEST = 2 # lowest octave to show\r\nFADEOUT = 0.25 # 1.0 # coloration fadeout time (1 tick = 0.001)\r\nWHITE_KEY = 0\r\nBLACK_KEY = 1\r\n\r\nWHITE_KEYS = [\r\n  \"C\",\r\n  \"D\",\r\n  \"E\",\r\n  \"F\",\r\n  \"G\",\r\n  \"A\",\r\n  \"B\",\r\n]\r\n\r\nBLACK_KEYS = [\"C#\", \"D#\", \"F#\", \"G#\", \"A#\"]\r\n\r\nfs = 44100\r\nduration = 30.0\r\n\r\ndef record_song_with_voice():\r\n   print(\"Recording.....\")\r\n   record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n   sd.wait()\r\n   write(AUDIO_FILE, fs,record_voice)\r\n   print(\"Finished.....Please check your output file\")\r\n\r\nasync def get_deepgram_transcript():\r\n   # Initializes the Deepgram SDK\r\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n  \r\n   # call the external function\r\n   record_song_with_voice()\r\n   # Open the audio file\r\n   with open(AUDIO_FILE, \"rb\") as audio:\r\n       # ...or replace mimetype as appropriate\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n\r\ndef load_img(name):\r\n  \"\"\"Load image and return an image object\"\"\"\r\n  fullname = name\r\n  try:\r\n      image = pygame.image.load(fullname)\r\n      if image.get_alpha() is None:\r\n          image = image.convert()\r\n      else:\r\n          image = image.convert_alpha()\r\n  except pygame.error as message:\r\n      print(\"Error: couldn't load image: \", fullname)\r\n      raise SystemExit(message)\r\n  return (image, image.get_rect())\r\nif not fluidsynth.init(SF2):\r\n  print(\"Couldn't load soundfont\", SF2)\r\n  sys.exit(1)\r\n  \r\npygame.init()\r\npygame.font.init()\r\nfont = pygame.font.SysFont(\"monospace\", 12)\r\nscreen = pygame.display.set_mode((640, 480))\r\n(key_graphic, kgrect) = load_img(\"keys.png\")\r\n(width, height) = (kgrect.width, kgrect.height)\r\nwhite_key_width = width / 7\r\n\r\n# Reset display to wrap around the keyboard image\r\npygame.display.set_mode((OCTAVES * width, height + 20))\r\npygame.display.set_caption(\"mingus piano\")\r\noctave = 4\r\nchannel = 8\r\n\r\n# pressed is a surface that is used to show where a key has been pressed\r\npressed = pygame.Surface((white_key_width, height))\r\npressed.fill((0, 230, 0))\r\n\r\n# text is the surface displaying the determined chord\r\ntext = pygame.Surface((width * OCTAVES, 20))\r\ntext.fill((255, 255, 255))\r\n\r\nplaying_w = [] # white keys being played right now\r\nplaying_b = [] # black keys being played right now\r\nquit = False\r\ntick = 0.0\r\n\r\ndef play_note(note):\r\n  \"\"\"play_note determines the coordinates of a note on the keyboard image\r\n  and sends a request to play the note to the fluidsynth server\"\"\"\r\n  global text\r\n  octave_offset = (note.octave - LOWEST) * width\r\n  if note.name in WHITE_KEYS:\r\n      # Getting the x coordinate of a white key can be done automatically\r\n      w = WHITE_KEYS.index(note.name) * white_key_width\r\n      w = w + octave_offset\r\n      # Add a list containing the x coordinate, the tick at the current time\r\n      # and of course the note itself to playing_w\r\n      playing_w.append([w, tick, note])\r\n  else:\r\n      # For black keys I hard coded the x coordinates. It's ugly.\r\n      i = BLACK_KEYS.index(note.name)\r\n      if i == 0:\r\n          w = 18\r\n      elif i == 1:\r\n          w = 58\r\n      elif i == 2:\r\n          w = 115\r\n      elif i == 3:\r\n          w = 151\r\n      else:\r\n          w = 187\r\n      w = w + octave_offset\r\n      playing_b.append([w, tick, note])\r\n  # To find out what sort of chord is being played we have to look at both the\r\n  # white and black keys, obviously:\r\n  notes = playing_w + playing_b\r\n  notes.sort()\r\n  notenames = []\r\n  for n in notes:\r\n      notenames.append(n[2].name)\r\n  # Determine the chord\r\n  det = chords.determine(notenames)\r\n  if det != []:\r\n      det = det[0]\r\n  else:\r\n      det = \"\"\r\n  # And render it onto the text surface\r\n  t = font.render(det, 2, (0, 0, 0))\r\n  text.fill((255, 255, 255))\r\n  text.blit(t, (0, 0))\r\n  # Play the note\r\n  fluidsynth.play_Note(note, channel, 100)\r\n  time.sleep(0.50)\r\n\r\nasync def get_note_data():\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n \r\n   get_numbers = await get_deepgram_transcript()\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n\r\n  \r\n   return [note_dictonary [x['word']] for x in data]\r\ndata = asyncio.run(get_note_data())\r\ni = 0\r\n\r\nwhile i < len(data):\r\n   # Blit the picture of one octave OCTAVES times.\r\n   for x in range(OCTAVES):\r\n       screen.blit(key_graphic, (x * width, 0))\r\n   # Blit the text surface\r\n   screen.blit(text, (0, height))\r\n  # Check all the white keys\r\n   for note in playing_w:\r\n      diff = tick - note[1]\r\n      # If a is past its prime, remove it, otherwise blit the pressed surface\r\n      # with a 'cool' fading effect.\r\n      if diff > FADEOUT:\r\n          fluidsynth.stop_Note(note[2], channel)\r\n          playing_w.remove(note)\r\n      else:\r\n          pressed.fill((0, ((FADEOUT - diff) / FADEOUT) * 255, 124))\r\n          screen.blit(pressed, (note[0], 0), None, pygame.BLEND_SUB)\r\n   if tick > i/4:\r\n       play_note(Note(data[i], octave))\r\n       i += 1\r\n      # if i == len(data):\r\n      # i = 0\r\n  \r\n \r\n   pygame.display.update()\r\n   tick += 0.005 # or 0.001 or 0.0001\r\n```\r\n\r\n", "html": `<p>Move over Beethoven. This tutorial will use Python and the Deepgram API speech-to-text audio transcription to play a piano with your voice. The song we\u2019ll play is the first few phrases of <a href="https://youtu.be/-bsMuWw-v6c">Lady Gaga\u2019s Bad Romance</a>. It\u2019s a simple piece in C Major, meaning no flats and sharps! We\u2019ll only use pitches C, D, E, F, G, A, and B, and no black keys. What a beautiful chance for someone learning how to play the piano without a keyboard, tapping into the power of voice to play music!</p>
<p>After running the project, we\u2019ll see the GIF below when running the project as a PyGame application. A window will appear, and the piano will play the song. We\u2019ll hear the notes, which also light up on the keyboard.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1659451110/blog/2022/08/voice-controlled-music-with-python/python-voice-controlled-music.gif" alt="Python and Deepgram API playing voice-controlled music with the piano"></p>
<p>Let\u2019s get started!</p>
<h2 id="what-well-need-to-play-voice-controlled-music-using-ai">What We\u2019ll Need to Play Voice-Controlled Music Using AI</h2>
<p>This project requires macOS but is also possible with a Windows or Linux machine. We\u2019ll also use Python 3.10 and other tools like FluidSynth and Deepgram Python SDK speech-to-text audio transcription.</p>
<h3 id="fluidsynth">FluidSynth</h3>
<p>We need to install <a href="https://www.fluidsynth.org/">FluidSynth</a>, a free, open-source MIDI software synthesizer that creates sound in digital format, usually for music. <strong>MIDI</strong> or <strong>Musical Instrument Digital Interface</strong> is a protocol that allows musical gear like computers, software, and instruments to communicate with one another. <strong>FluidSynth</strong> uses <strong>SoundFont</strong> files to generate audio. These files have samples of musical instruments like a piano that play MIDI files.</p>
<p>There are various options to install FluidSynth on a Mac. In this tutorial, we\u2019ll use <a href="https://brew.sh/">Homebrew</a> for the installation. After installing Homebrew, run this command anywhere in the terminal:</p>
<p>brew install fluidsynth</p>
<p>Now that FluidSynth is installed, let\u2019s get our Deepgram API Key.</p>
<h3 id="deepgram-api-key">Deepgram API Key</h3>
<p>We need to grab a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key from the console</a>. It\u2019s effortless to sign up and create an API Key here. Deepgram is an AI automated speech recognition voice-to-text company that allows us to build applications that transcribe speech-to-text. We\u2019ll use Deepgram\u2019s Python SDK and the <a href="https://developers.deepgram.com/documentation/features/numerals/">Numerals feature</a>, which converts a number from written format to numerical format. For example, if we say the number \u201Cthree\u201D, it would appear in our transcript as \u201C3\u201D.</p>
<p>One of the many reasons to choose Deepgram over other providers is that we build better voice applications with faster, more accurate transcription through AI Speech Recognition. We offer real-time transcription and pre-recorded speech-to-text. The latter allows uploading a file that contains audio voice data for transcribing.</p>
<p>Now that we have our Deepgram API Key let\u2019s set up our Python AI piano project so we can start making music!</p>
<h2 id="create-a-python-virtual-environment">Create a Python Virtual Environment</h2>
<p>Make a Python directory called <code is:raw>play-piano</code> to hold our project. Inside of it, create a new file called <code is:raw>piano-with-deepgram.py</code>, which will have our main code for the project.</p>
<p>We need to create a virtual environment and activate it so we can <code is:raw>pip</code> install our Python packages. We have a more in-depth article about virtual environments on our Deepgram Developer <a href="https://blog.deepgram.com/python-virtual-environments/">blog</a>.</p>
<p>Activate the virtual environment after it\u2019s created and install the following Python packages from the terminal.</p>
<p>pip install deepgram-sdk\r
pip install python-dotenv\r
pip install mingus\r
pip install pygame\r
pip install sounddevice\r
pip install scipy</p>
<p>Let\u2019s go through each of the Python packages.</p>
<ul>
<li><code is:raw>deepgram-sdk</code> is the Deepgram Python SDK installation that allows us to transcribe speech audio, or voice, to a text transcript.</li>
<li><code is:raw>python-dotenv</code> helps us work with environment variables and our Deepgram API KEY, which we\u2019ll pull from the <code is:raw>.env</code> file.</li>
<li><code is:raw>mingus</code> is a package for Python used by programmers and musicians to make and play music.</li>
<li><code is:raw>pygame</code> is an open-sourced Python engine to help us make games or other multimedia applications.</li>
<li><code is:raw>sounddevice</code> helps get audio from our device\u2019s microphone and records it as a NumPy array.</li>
<li><code is:raw>scipy</code> helps writes the NumPy array into a WAV file.</li>
</ul>
<p>We need to download a few files, including <a href="https://github.com/bspaans/python-mingus/blob/master/mingus_examples/pygame-piano/keys.png"><strong>keys.png</strong></a>, which is the image of the piano GUI. The other file we need is the <strong>Yamaha-Grand-ios-v1.2</strong> from <a href="https://sites.google.com/site/soundfonts4u/">this site</a>. A SoundFont contains a sample of musical instruments; in our case, we\u2019ll need a piano sound.</p>
<h2 id="the-code-to-play-voice-controlled-music-with-python-and-ai">The Code to Play Voice-Controlled Music with Python and AI</h2>
<p>We\u2019ll only cover the Deepgram code in this section but will provide the entire code for the project at the end of this post.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> file_name</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">fs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">44100</span></span>
<span class="line"><span style="color: #C9D1D9">duration </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30.0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice() </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span></code></pre>
<h2 id="deepgram-python-code-explanation">Deepgram Python Code Explanation</h2>
<p>This line of code prompts the user to create a name of the audio file so that the file will save in <code is:raw>.wav</code> format:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Once the file is created the function <code is:raw>record_song_with_voice</code> gets called inside the <code is:raw>get_deepgram_transcript</code> method.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Inside the <code is:raw>record_song_with_voice</code> function, this line records the audio.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Where <code is:raw>duration</code> is the number of seconds it takes to record an audio file, and <code is:raw>fs</code> represents the sampling frequency. We set both of these as constants near the top of the code.</p>
<p>Then we write the voice recording to an audio file using the <code is:raw>.write()</code> method. That line of code looks like this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span></code></pre>
<p>Once the file is done writing, this message will print to the terminal <code is:raw>\u201DFinished.....Please check your output file"</code>, which means the recording is complete.</p>
<p>The function <code is:raw>get_deepgram_transcript</code> is where most of the magic happens. Let\u2019s walk through the code.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice() </span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span></code></pre>
<p>Here we initialize the Deepgram Python SDK. That\u2019s why it\u2019s essential to grab a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key from the console</a>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>We store our Deepgram API Key in a <code is:raw>.env</code> file like so:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;abc123&quot;</span></span></code></pre>
<p>The <code is:raw>abc123</code> represents the API Key Deepgram assigns us.</p>
<p>Next, we call the external function <code is:raw>record_song_with_voice()</code>, which allows us to record our voice and create a <code is:raw>.wav</code> file that will pass into Deepgram as pre-recorded audio.</p>
<p>Finally, we open the newly created audio file in binary format for reading. We provide key/values pairs for <code is:raw>buffer</code> and a <code is:raw>mimetype</code> using a Python dictionary. The buffer\u2019s value is <code is:raw>audio</code>, the object we assigned it in this line <code is:raw>with open(AUDIO_FILE, "rb") as audio:</code> The mimetype value is <code is:raw>audio/wav</code>, which is the file format we\u2019re using, which one of 40+ different file formats that Deepgram supports. We then call Deepgram and perform a pre-recorded transcription in this line: <code is:raw>response = await deepgram.transcription.prerecorded(source, {"punctuate": True, "numerals": True})</code>. We pass in the <code is:raw>numerals</code> parameter so that when we say a number, it will process in numeric form.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span></code></pre>
<p>The last bit of code to review is the <code is:raw>get_note_data</code> function, doing precisely that: getting the note data.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span></code></pre>
<p>We have a Python dictionary with keys from \u20181\u2019 to \u20187\u2019 corresponding to every note in the C Major scale. For example, when we say the number <code is:raw>1</code> that plays the note <code is:raw>C</code>, saying the number <code is:raw>2</code> will play the \u2018D\u2019 note, and so on:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span></code></pre>
<p>Here\u2019s how that would look on a piano. Each note in C Major is labeled, and located above is a corresponding number. The numbers 1 - 7 are critical, representing a single note in our melody.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1659450623/blog/2022/08/voice-controlled-music-with-python/Musical-Keyboard-Python-Deepgram.png" alt="Piano Keys with Deepgram API to play voice-controlled music with Python"></p>
<p>Next, we get the numerals from the Deepgram pre-recorded transcript <code is:raw>get_numbers = await get_deepgram_transcript()</code>.</p>
<p>We then create an empty list called <code is:raw>data</code> and check if there are any <code is:raw>results</code> in the parsed response we get back from Deepgram. If results exist, we get that result and store it in <code is:raw>data</code>:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Example output may look like the below, depending on which song we create.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    [</span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;1&#39;, &#39;start&#39;: 2.0552316, &#39;end&#39;: 2.4942129, &#39;confidence&#39;: 0.99902344, &#39;punctuated_word&#39;: &#39;1&#39;}, </span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;4&#39;, &#39;start&#39;: 2.8533795, &#39;end&#39;: 3.172639, &#39;confidence&#39;: 0.9980469, &#39;punctuated_word&#39;: &#39;4&#39;}, </span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;3&#39;, &#39;start&#39;: 3.6116204, &#39;end&#39;: 4.1116204, &#39;confidence&#39;: 0.9975586, &#39;punctuated_word&#39;: &#39;3&#39;}</span></span>
<span class="line"><span style="color: #c9d1d9">    ]</span></span></code></pre>
<p>We notice that the <code is:raw>word</code> key in the above response correlates to a numeral we speak into the microphone when recording the song.</p>
<p>We can now create a new list that maps each numeral to a note on the piano, using a list comprehension <code is:raw>return [note_dictonary [x['word']] for x in data]</code>.</p>
<p>To run the project, we\u2019ll need all the code. See the end of this post.</p>
<p>Then in our terminal, we can run the project by typing:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">python3 piano-with-deepgram.py</span></span></code></pre>
<p>Now, use our voice to say the following numerals, which correspond to piano notes, to play the first few phrases from Lady Gaga\u2019s song Bad Romance:</p>
<p><code is:raw>12314 3333211 12314 3333211</code></p>
<h2 id="next-steps-to-extend-the-voice-controlled-python-ai-music-example">Next Steps to Extend the Voice-Controlled Python AI Music Example</h2>
<p>Congratulations on getting to the end of the tutorial! We encourage you to try and extend the project to do the following:</p>
<ul>
<li>Play around with the code to play songs in different octaves</li>
<li>Play voice-controlled music that has flats and sharps</li>
<li>Tweak the code to play voice-controlled music using whole notes and half notes</li>
</ul>
<p>When you have your new masterpiece, please send us a Tweet at <a href="https://twitter.com/DeepgramAI">@DeepgramAI</a> and showcase your work!</p>
<h2 id="the-entire-python-code-for-the-voice-controlled-music-example">The Entire Python Code for the Voice-Controlled Music Example</h2>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pygame.locals </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.core </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> notes, chords</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.containers </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.midi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> fluidsynth</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> os </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> sys</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> scipy.io.wavfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> write</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio, json</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> pygame</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> time</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> sounddevice </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> sd</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># Audio File with song</span></span>
<span class="line"><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> file_name</span></span>
<span class="line"><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;soundfont.sf2&quot;</span></span>
<span class="line"><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># number of octaves to show</span></span>
<span class="line"><span style="color: #79C0FF">LOWEST</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># lowest octave to show</span></span>
<span class="line"><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.25</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># 1.0 # coloration fadeout time (1 tick = 0.001)</span></span>
<span class="line"><span style="color: #79C0FF">WHITE_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #79C0FF">BLACK_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;C&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;D&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;E&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;F&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;G&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;A&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;B&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">BLACK_KEYS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&quot;C#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;D#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;F#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;G#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;A#&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">fs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">44100</span></span>
<span class="line"><span style="color: #C9D1D9">duration </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30.0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Initializes the Deepgram SDK</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># call the external function</span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice()</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Open the audio file</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #8B949E"># ...or replace mimetype as appropriate</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">load_img</span><span style="color: #C9D1D9">(name):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;&quot;&quot;Load image and return an image object&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  fullname </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> name</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.image.load(fullname)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> image.get_alpha() </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> image.convert()</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> image.convert_alpha()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> pygame.error </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> message:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Error: couldn&#39;t load image: &quot;</span><span style="color: #C9D1D9">, fullname)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SystemExit</span><span style="color: #C9D1D9">(message)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> (image, image.get_rect())</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> fluidsynth.init(</span><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Couldn&#39;t load soundfont&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  sys.exit(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">pygame.init()</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.font.init()</span></span>
<span class="line"><span style="color: #C9D1D9">font </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.font.SysFont(</span><span style="color: #A5D6FF">&quot;monospace&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">screen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.display.set_mode((</span><span style="color: #79C0FF">640</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">480</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">(key_graphic, kgrect) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> load_img(</span><span style="color: #A5D6FF">&quot;keys.png&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">(width, height) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (kgrect.width, kgrect.height)</span></span>
<span class="line"><span style="color: #C9D1D9">white_key_width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">7</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># Reset display to wrap around the keyboard image</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.display.set_mode((</span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width, height </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.display.set_caption(</span><span style="color: #A5D6FF">&quot;mingus piano&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">octave </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">4</span></span>
<span class="line"><span style="color: #C9D1D9">channel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">8</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># pressed is a surface that is used to show where a key has been pressed</span></span>
<span class="line"><span style="color: #C9D1D9">pressed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.Surface((white_key_width, height))</span></span>
<span class="line"><span style="color: #C9D1D9">pressed.fill((</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">230</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># text is the surface displaying the determined chord</span></span>
<span class="line"><span style="color: #C9D1D9">text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.Surface((width </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">text.fill((</span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">playing_w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [] </span><span style="color: #8B949E"># white keys being played right now</span></span>
<span class="line"><span style="color: #C9D1D9">playing_b </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [] </span><span style="color: #8B949E"># black keys being played right now</span></span>
<span class="line"><span style="color: #79C0FF">quit</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">False</span></span>
<span class="line"><span style="color: #C9D1D9">tick </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">play_note</span><span style="color: #C9D1D9">(note):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;&quot;&quot;play_note determines the coordinates of a note on the keyboard image</span></span>
<span class="line"><span style="color: #A5D6FF">  and sends a request to play the note to the fluidsynth server&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">global</span><span style="color: #C9D1D9"> text</span></span>
<span class="line"><span style="color: #C9D1D9">  octave_offset </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (note.octave </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">LOWEST</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> note.name </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># Getting the x coordinate of a white key can be done automatically</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9">.index(note.name) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> white_key_width</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> octave_offset</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># Add a list containing the x coordinate, the tick at the current time</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># and of course the note itself to playing_w</span></span>
<span class="line"><span style="color: #C9D1D9">      playing_w.append([w, tick, note])</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># For black keys I hard coded the x coordinates. It&#39;s ugly.</span></span>
<span class="line"><span style="color: #C9D1D9">      i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">BLACK_KEYS</span><span style="color: #C9D1D9">.index(note.name)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">18</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">58</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">115</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">151</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">187</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> octave_offset</span></span>
<span class="line"><span style="color: #C9D1D9">      playing_b.append([w, tick, note])</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># To find out what sort of chord is being played we have to look at both the</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># white and black keys, obviously:</span></span>
<span class="line"><span style="color: #C9D1D9">  notes </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> playing_w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> playing_b</span></span>
<span class="line"><span style="color: #C9D1D9">  notes.sort()</span></span>
<span class="line"><span style="color: #C9D1D9">  notenames </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> n </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> notes:</span></span>
<span class="line"><span style="color: #C9D1D9">      notenames.append(n[</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">].name)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Determine the chord</span></span>
<span class="line"><span style="color: #C9D1D9">  det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> chords.determine(notenames)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> det </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> []:</span></span>
<span class="line"><span style="color: #C9D1D9">      det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> det[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># And render it onto the text surface</span></span>
<span class="line"><span style="color: #C9D1D9">  t </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> font.render(det, </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  text.fill((</span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  text.blit(t, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Play the note</span></span>
<span class="line"><span style="color: #C9D1D9">  fluidsynth.play_Note(note, channel, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  time.sleep(</span><span style="color: #79C0FF">0.50</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span>
<span class="line"><span style="color: #C9D1D9">i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(data):</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Blit the picture of one octave OCTAVES times.</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">range</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">       screen.blit(key_graphic, (x </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Blit the text surface</span></span>
<span class="line"><span style="color: #C9D1D9">   screen.blit(text, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, height))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Check all the white keys</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> note </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> playing_w:</span></span>
<span class="line"><span style="color: #C9D1D9">      diff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> tick </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> note[</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># If a is past its prime, remove it, otherwise blit the pressed surface</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># with a &#39;cool&#39; fading effect.</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> diff </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          fluidsynth.stop_Note(note[</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">], channel)</span></span>
<span class="line"><span style="color: #C9D1D9">          playing_w.remove(note)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          pressed.fill((</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, ((</span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> diff) </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">124</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">          screen.blit(pressed, (note[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">), </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">, pygame.</span><span style="color: #79C0FF">BLEND_SUB</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> tick </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       play_note(Note(data[i], octave))</span></span>
<span class="line"><span style="color: #C9D1D9">       i </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># if i == len(data):</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># i = 0</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   pygame.display.update()</span></span>
<span class="line"><span style="color: #C9D1D9">   tick </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.005</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># or 0.001 or 0.0001</span></span></code></pre>` }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/voice-controlled-music-with-python/index.md" };
function rawContent() {
  return "\r\nMove over Beethoven. This tutorial will use Python and the Deepgram API speech-to-text audio transcription to play a piano with your voice. The song we\u2019ll play is the first few phrases of [Lady Gaga\u2019s Bad Romance](https://youtu.be/-bsMuWw-v6c). It\u2019s a simple piece in C Major, meaning no flats and sharps! We\u2019ll only use pitches C, D, E, F, G, A, and B, and no black keys. What a beautiful chance for someone learning how to play the piano without a keyboard, tapping into the power of voice to play music!\r\n\r\nAfter running the project, we'll see the GIF below when running the project as a PyGame application. A window will appear, and the piano will play the song. We'll hear the notes, which also light up on the keyboard.\r\n\r\n![Python and Deepgram API playing voice-controlled music with the piano](https://res.cloudinary.com/deepgram/image/upload/v1659451110/blog/2022/08/voice-controlled-music-with-python/python-voice-controlled-music.gif)\r\n\r\nLet\u2019s get started!\r\n\r\n## What We\u2019ll Need to Play Voice-Controlled Music Using AI\r\n\r\nThis project requires macOS but is also possible with a Windows or Linux machine. We\u2019ll also use Python 3.10 and other tools like FluidSynth and Deepgram Python SDK speech-to-text audio transcription.\r\n\r\n### FluidSynth\r\n\r\nWe need to install [FluidSynth](https://www.fluidsynth.org/), a free, open-source MIDI software synthesizer that creates sound in digital format, usually for music. **MIDI** or **Musical Instrument Digital Interface** is a protocol that allows musical gear like computers, software, and instruments to communicate with one another. **FluidSynth** uses **SoundFont** files to generate audio. These files have samples of musical instruments like a piano that play MIDI files.\r\n\r\nThere are various options to install FluidSynth on a Mac. In this tutorial, we\u2019ll use [Homebrew](https://brew.sh/) for the installation. After installing Homebrew, run this command anywhere in the terminal:\r\n\r\n    brew install fluidsynth\r\n\r\nNow that FluidSynth is installed, let\u2019s get our Deepgram API Key.\r\n\r\n### Deepgram API Key\r\n\r\nWe need to grab a [Deepgram API Key from the console](https://console.deepgram.com/signup?jump=keys). It\u2019s effortless to sign up and create an API Key here. Deepgram is an AI automated speech recognition voice-to-text company that allows us to build applications that transcribe speech-to-text. We\u2019ll use Deepgram\u2019s Python SDK and the [Numerals feature](https://developers.deepgram.com/documentation/features/numerals/), which converts a number from written format to numerical format. For example, if we say the number \u201Cthree\u201D, it would appear in our transcript as \u201C3\u201D.\r\n\r\nOne of the many reasons to choose Deepgram over other providers is that we build better voice applications with faster, more accurate transcription through AI Speech Recognition. We offer real-time transcription and pre-recorded speech-to-text. The latter allows uploading a file that contains audio voice data for transcribing.\r\n\r\nNow that we have our Deepgram API Key let\u2019s set up our Python AI piano project so we can start making music!\r\n\r\n## Create a Python Virtual Environment\r\n\r\nMake a Python directory called `play-piano` to hold our project. Inside of it, create a new file called `piano-with-deepgram.py`, which will have our main code for the project.\r\n\r\nWe need to create a virtual environment and activate it so we can `pip` install our Python packages. We have a more in-depth article about virtual environments on our Deepgram Developer [blog](https://blog.deepgram.com/python-virtual-environments/).\r\n\r\nActivate the virtual environment after it\u2019s created and install the following Python packages from the terminal.\r\n\r\n    pip install deepgram-sdk\r\n    pip install python-dotenv\r\n    pip install mingus\r\n    pip install pygame\r\n    pip install sounddevice\r\n    pip install scipy\r\n\r\nLet\u2019s go through each of the Python packages.\r\n\r\n*   `deepgram-sdk` is the Deepgram Python SDK installation that allows us to transcribe speech audio, or voice, to a text transcript.\r\n*   `python-dotenv` helps us work with environment variables and our Deepgram API KEY, which we\u2019ll pull from the `.env` file.\r\n*   `mingus` is a package for Python used by programmers and musicians to make and play music.\r\n*   `pygame` is an open-sourced Python engine to help us make games or other multimedia applications.\r\n*   `sounddevice` helps get audio from our device\u2019s microphone and records it as a NumPy array.\r\n*   `scipy` helps writes the NumPy array into a WAV file.\r\n\r\nWe need to download a few files, including [**keys.png**](https://github.com/bspaans/python-mingus/blob/master/mingus_examples/pygame-piano/keys.png), which is the image of the piano GUI. The other file we need is the **Yamaha-Grand-ios-v1.2** from [this site](https://sites.google.com/site/soundfonts4u/). A SoundFont contains a sample of musical instruments; in our case, we\u2019ll need a piano sound.\r\n\r\n## The Code to Play Voice-Controlled Music with Python and AI\r\n\r\nWe\u2019ll only cover the Deepgram code in this section but will provide the entire code for the project at the end of this post.\r\n\r\n```python\r\nfile_name = input(\"Name the output WAV file: \")\r\n\r\nAUDIO_FILE = file_name\r\n\r\nfs = 44100\r\nduration = 30.0\r\n\r\n\r\ndef record_song_with_voice():\r\n   print(\"Recording.....\")\r\n   record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n   sd.wait()\r\n   write(AUDIO_FILE, fs,record_voice)\r\n   print(\"Finished.....Please check your output file\")\r\n\r\nasync def get_deepgram_transcript():\r\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n  \r\n   record_song_with_voice() \r\n   with open(AUDIO_FILE, \"rb\") as audio:\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n\r\nasync def get_note_data():\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n \r\n   get_numbers = await get_deepgram_transcript()\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n  \r\n   return [note_dictonary [x['word']] for x in data]\r\n\r\ndata = asyncio.run(get_note_data())\r\n```\r\n\r\n## Deepgram Python Code Explanation\r\n\r\nThis line of code prompts the user to create a name of the audio file so that the file will save in `.wav` format:\r\n\r\n```python\r\nfile_name = input(\"Name the output WAV file: \")\r\n```\r\n\r\nOnce the file is created the function `record_song_with_voice` gets called inside the `get_deepgram_transcript` method.\r\n\r\n```python\r\ndef record_song_with_voice():\r\n   print(\"Recording.....\")\r\n   record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n   sd.wait()\r\n   write(AUDIO_FILE, fs,record_voice)\r\n   print(\"Finished.....Please check your output file\")\r\n```\r\n\r\nInside the `record_song_with_voice` function, this line records the audio.\r\n\r\n```python\r\n record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n```\r\n\r\nWhere `duration` is the number of seconds it takes to record an audio file, and `fs` represents the sampling frequency. We set both of these as constants near the top of the code.\r\n\r\nThen we write the voice recording to an audio file using the `.write()` method. That line of code looks like this:\r\n\r\n```python\r\n   write(AUDIO_FILE, fs,record_voice)\r\n```\r\n\r\nOnce the file is done writing, this message will print to the terminal `\u201DFinished.....Please check your output file\"`, which means the recording is complete.\r\n\r\nThe function `get_deepgram_transcript` is where most of the magic happens. Let\u2019s walk through the code.\r\n\r\n```python\r\nasync def get_deepgram_transcript():\r\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n  \r\n   record_song_with_voice() \r\n\r\n   with open(AUDIO_FILE, \"rb\") as audio:\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n```\r\n\r\nHere we initialize the Deepgram Python SDK. That\u2019s why it\u2019s essential to grab a [Deepgram API Key from the console](https://console.deepgram.com/signup?jump=keys).\r\n\r\n```python\r\ndeepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n```\r\n\r\nWe store our Deepgram API Key in a `.env` file like so:\r\n\r\n```python\r\nDEEPGRAM_API_KEY=\"abc123\"\r\n```\r\n\r\nThe `abc123` represents the API Key Deepgram assigns us.\r\n\r\nNext, we call the external function `record_song_with_voice()`, which allows us to record our voice and create a `.wav` file that will pass into Deepgram as pre-recorded audio.\r\n\r\nFinally, we open the newly created audio file in binary format for reading. We provide key/values pairs for `buffer` and a `mimetype` using a Python dictionary. The buffer\u2019s value is `audio`, the object we assigned it in this line `with open(AUDIO_FILE, \"rb\") as audio:` The mimetype value is `audio/wav`, which is the file format we\u2019re using, which one of 40+ different file formats that Deepgram supports. We then call Deepgram and perform a pre-recorded transcription in this line: `response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})`. We pass in the `numerals` parameter so that when we say a number, it will process in numeric form.\r\n\r\n```python\r\n with open(AUDIO_FILE, \"rb\") as audio:\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n```\r\n\r\nThe last bit of code to review is the `get_note_data` function, doing precisely that: getting the note data.\r\n\r\n```python\r\nasync def get_note_data():\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n \r\n   get_numbers = await get_deepgram_transcript()\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n  \r\n   return [note_dictonary [x['word']] for x in data]\r\n\r\ndata = asyncio.run(get_note_data())\r\n```\r\n\r\nWe have a Python dictionary with keys from \u20181\u2019 to \u20187\u2019 corresponding to every note in the C Major scale. For example, when we say the number `1` that plays the note `C`, saying the number `2` will play the \u2018D\u2019 note, and so on:\r\n\r\n```python\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n```\r\n\r\nHere\u2019s how that would look on a piano. Each note in C Major is labeled, and located above is a corresponding number. The numbers 1 - 7 are critical, representing a single note in our melody.\r\n\r\n![Piano Keys with Deepgram API to play voice-controlled music with Python](https://res.cloudinary.com/deepgram/image/upload/v1659450623/blog/2022/08/voice-controlled-music-with-python/Musical-Keyboard-Python-Deepgram.png)\r\n\r\nNext, we get the numerals from the Deepgram pre-recorded transcript `get_numbers = await get_deepgram_transcript()`.\r\n\r\nWe then create an empty list called `data` and check if there are any `results` in the parsed response we get back from Deepgram. If results exist, we get that result and store it in `data`:\r\n\r\n```python\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n```\r\n\r\nExample output may look like the below, depending on which song we create.\r\n\r\n```\r\n    [\r\n    {'word': '1', 'start': 2.0552316, 'end': 2.4942129, 'confidence': 0.99902344, 'punctuated_word': '1'}, \r\n    {'word': '4', 'start': 2.8533795, 'end': 3.172639, 'confidence': 0.9980469, 'punctuated_word': '4'}, \r\n    {'word': '3', 'start': 3.6116204, 'end': 4.1116204, 'confidence': 0.9975586, 'punctuated_word': '3'}\r\n    ]\r\n```\r\n\r\nWe notice that the `word` key in the above response correlates to a numeral we speak into the microphone when recording the song.\r\n\r\nWe can now create a new list that maps each numeral to a note on the piano, using a list comprehension `return [note_dictonary [x['word']] for x in data]`.\r\n\r\nTo run the project, we\u2019ll need all the code. See the end of this post.\r\n\r\nThen in our terminal, we can run the project by typing:\r\n\r\n```\r\npython3 piano-with-deepgram.py\r\n```\r\nNow, use our voice to say the following numerals, which correspond to piano notes, to play the first few phrases from Lady Gaga\u2019s song Bad Romance:\r\n\r\n`12314 3333211 12314 3333211`\r\n\r\n## Next Steps to Extend the Voice-Controlled Python AI Music Example\r\n\r\nCongratulations on getting to the end of the tutorial! We encourage you to try and extend the project to do the following:\r\n\r\n*   Play around with the code to play songs in different octaves\r\n*   Play voice-controlled music that has flats and sharps\r\n*   Tweak the code to play voice-controlled music using whole notes and half notes\r\n\r\nWhen you have your new masterpiece, please send us a Tweet at [@DeepgramAI](https://twitter.com/DeepgramAI) and showcase your work!\r\n\r\n## The Entire Python Code for the Voice-Controlled Music Example\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom pygame.locals import *\r\nfrom mingus.core import notes, chords\r\nfrom mingus.containers import *\r\nfrom mingus.midi import fluidsynth\r\nfrom os import sys\r\nfrom scipy.io.wavfile import write\r\nfrom deepgram import Deepgram\r\nfrom dotenv import load_dotenv\r\nimport asyncio, json\r\nimport pygame\r\nimport os\r\nimport time\r\nimport sounddevice as sd\r\n\r\n\r\nload_dotenv()\r\nfile_name = input(\"Name the output WAV file: \")\r\n\r\n# Audio File with song\r\nAUDIO_FILE = file_name\r\nSF2 = \"soundfont.sf2\"\r\nOCTAVES = 5 # number of octaves to show\r\nLOWEST = 2 # lowest octave to show\r\nFADEOUT = 0.25 # 1.0 # coloration fadeout time (1 tick = 0.001)\r\nWHITE_KEY = 0\r\nBLACK_KEY = 1\r\n\r\nWHITE_KEYS = [\r\n  \"C\",\r\n  \"D\",\r\n  \"E\",\r\n  \"F\",\r\n  \"G\",\r\n  \"A\",\r\n  \"B\",\r\n]\r\n\r\nBLACK_KEYS = [\"C#\", \"D#\", \"F#\", \"G#\", \"A#\"]\r\n\r\nfs = 44100\r\nduration = 30.0\r\n\r\ndef record_song_with_voice():\r\n   print(\"Recording.....\")\r\n   record_voice = sd.rec(int(duration * fs) , samplerate = fs , channels = 1)\r\n   sd.wait()\r\n   write(AUDIO_FILE, fs,record_voice)\r\n   print(\"Finished.....Please check your output file\")\r\n\r\nasync def get_deepgram_transcript():\r\n   # Initializes the Deepgram SDK\r\n   deepgram = Deepgram(os.getenv(\"DEEPGRAM_API_KEY\"))\r\n  \r\n   # call the external function\r\n   record_song_with_voice()\r\n   # Open the audio file\r\n   with open(AUDIO_FILE, \"rb\") as audio:\r\n       # ...or replace mimetype as appropriate\r\n       source = {\"buffer\": audio, \"mimetype\": \"audio/wav\"}\r\n       response = await deepgram.transcription.prerecorded(source, {\"punctuate\": True, \"numerals\": True})\r\n  \r\n   return response\r\n\r\ndef load_img(name):\r\n  \"\"\"Load image and return an image object\"\"\"\r\n  fullname = name\r\n  try:\r\n      image = pygame.image.load(fullname)\r\n      if image.get_alpha() is None:\r\n          image = image.convert()\r\n      else:\r\n          image = image.convert_alpha()\r\n  except pygame.error as message:\r\n      print(\"Error: couldn't load image: \", fullname)\r\n      raise SystemExit(message)\r\n  return (image, image.get_rect())\r\nif not fluidsynth.init(SF2):\r\n  print(\"Couldn't load soundfont\", SF2)\r\n  sys.exit(1)\r\n  \r\npygame.init()\r\npygame.font.init()\r\nfont = pygame.font.SysFont(\"monospace\", 12)\r\nscreen = pygame.display.set_mode((640, 480))\r\n(key_graphic, kgrect) = load_img(\"keys.png\")\r\n(width, height) = (kgrect.width, kgrect.height)\r\nwhite_key_width = width / 7\r\n\r\n# Reset display to wrap around the keyboard image\r\npygame.display.set_mode((OCTAVES * width, height + 20))\r\npygame.display.set_caption(\"mingus piano\")\r\noctave = 4\r\nchannel = 8\r\n\r\n# pressed is a surface that is used to show where a key has been pressed\r\npressed = pygame.Surface((white_key_width, height))\r\npressed.fill((0, 230, 0))\r\n\r\n# text is the surface displaying the determined chord\r\ntext = pygame.Surface((width * OCTAVES, 20))\r\ntext.fill((255, 255, 255))\r\n\r\nplaying_w = [] # white keys being played right now\r\nplaying_b = [] # black keys being played right now\r\nquit = False\r\ntick = 0.0\r\n\r\ndef play_note(note):\r\n  \"\"\"play_note determines the coordinates of a note on the keyboard image\r\n  and sends a request to play the note to the fluidsynth server\"\"\"\r\n  global text\r\n  octave_offset = (note.octave - LOWEST) * width\r\n  if note.name in WHITE_KEYS:\r\n      # Getting the x coordinate of a white key can be done automatically\r\n      w = WHITE_KEYS.index(note.name) * white_key_width\r\n      w = w + octave_offset\r\n      # Add a list containing the x coordinate, the tick at the current time\r\n      # and of course the note itself to playing_w\r\n      playing_w.append([w, tick, note])\r\n  else:\r\n      # For black keys I hard coded the x coordinates. It's ugly.\r\n      i = BLACK_KEYS.index(note.name)\r\n      if i == 0:\r\n          w = 18\r\n      elif i == 1:\r\n          w = 58\r\n      elif i == 2:\r\n          w = 115\r\n      elif i == 3:\r\n          w = 151\r\n      else:\r\n          w = 187\r\n      w = w + octave_offset\r\n      playing_b.append([w, tick, note])\r\n  # To find out what sort of chord is being played we have to look at both the\r\n  # white and black keys, obviously:\r\n  notes = playing_w + playing_b\r\n  notes.sort()\r\n  notenames = []\r\n  for n in notes:\r\n      notenames.append(n[2].name)\r\n  # Determine the chord\r\n  det = chords.determine(notenames)\r\n  if det != []:\r\n      det = det[0]\r\n  else:\r\n      det = \"\"\r\n  # And render it onto the text surface\r\n  t = font.render(det, 2, (0, 0, 0))\r\n  text.fill((255, 255, 255))\r\n  text.blit(t, (0, 0))\r\n  # Play the note\r\n  fluidsynth.play_Note(note, channel, 100)\r\n  time.sleep(0.50)\r\n\r\nasync def get_note_data():\r\n   note_dictonary = {\r\n          '1': 'C',\r\n          '2': 'D',\r\n          '3': 'E',\r\n          '4': 'F',\r\n          '5': 'G',\r\n          '6': 'A',\r\n          '7': 'B'\r\n  }\r\n \r\n   get_numbers = await get_deepgram_transcript()\r\n   data = []\r\n   if 'results' in get_numbers:\r\n       data = get_numbers['results']['channels'][0]['alternatives'][0]['words']\r\n\r\n  \r\n   return [note_dictonary [x['word']] for x in data]\r\ndata = asyncio.run(get_note_data())\r\ni = 0\r\n\r\nwhile i < len(data):\r\n   # Blit the picture of one octave OCTAVES times.\r\n   for x in range(OCTAVES):\r\n       screen.blit(key_graphic, (x * width, 0))\r\n   # Blit the text surface\r\n   screen.blit(text, (0, height))\r\n  # Check all the white keys\r\n   for note in playing_w:\r\n      diff = tick - note[1]\r\n      # If a is past its prime, remove it, otherwise blit the pressed surface\r\n      # with a 'cool' fading effect.\r\n      if diff > FADEOUT:\r\n          fluidsynth.stop_Note(note[2], channel)\r\n          playing_w.remove(note)\r\n      else:\r\n          pressed.fill((0, ((FADEOUT - diff) / FADEOUT) * 255, 124))\r\n          screen.blit(pressed, (note[0], 0), None, pygame.BLEND_SUB)\r\n   if tick > i/4:\r\n       play_note(Note(data[i], octave))\r\n       i += 1\r\n      # if i == len(data):\r\n      # i = 0\r\n  \r\n \r\n   pygame.display.update()\r\n   tick += 0.005 # or 0.001 or 0.0001\r\n```\r\n\r\n";
}
function compiledContent() {
  return `<p>Move over Beethoven. This tutorial will use Python and the Deepgram API speech-to-text audio transcription to play a piano with your voice. The song we\u2019ll play is the first few phrases of <a href="https://youtu.be/-bsMuWw-v6c">Lady Gaga\u2019s Bad Romance</a>. It\u2019s a simple piece in C Major, meaning no flats and sharps! We\u2019ll only use pitches C, D, E, F, G, A, and B, and no black keys. What a beautiful chance for someone learning how to play the piano without a keyboard, tapping into the power of voice to play music!</p>
<p>After running the project, we\u2019ll see the GIF below when running the project as a PyGame application. A window will appear, and the piano will play the song. We\u2019ll hear the notes, which also light up on the keyboard.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1659451110/blog/2022/08/voice-controlled-music-with-python/python-voice-controlled-music.gif" alt="Python and Deepgram API playing voice-controlled music with the piano"></p>
<p>Let\u2019s get started!</p>
<h2 id="what-well-need-to-play-voice-controlled-music-using-ai">What We\u2019ll Need to Play Voice-Controlled Music Using AI</h2>
<p>This project requires macOS but is also possible with a Windows or Linux machine. We\u2019ll also use Python 3.10 and other tools like FluidSynth and Deepgram Python SDK speech-to-text audio transcription.</p>
<h3 id="fluidsynth">FluidSynth</h3>
<p>We need to install <a href="https://www.fluidsynth.org/">FluidSynth</a>, a free, open-source MIDI software synthesizer that creates sound in digital format, usually for music. <strong>MIDI</strong> or <strong>Musical Instrument Digital Interface</strong> is a protocol that allows musical gear like computers, software, and instruments to communicate with one another. <strong>FluidSynth</strong> uses <strong>SoundFont</strong> files to generate audio. These files have samples of musical instruments like a piano that play MIDI files.</p>
<p>There are various options to install FluidSynth on a Mac. In this tutorial, we\u2019ll use <a href="https://brew.sh/">Homebrew</a> for the installation. After installing Homebrew, run this command anywhere in the terminal:</p>
<p>brew install fluidsynth</p>
<p>Now that FluidSynth is installed, let\u2019s get our Deepgram API Key.</p>
<h3 id="deepgram-api-key">Deepgram API Key</h3>
<p>We need to grab a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key from the console</a>. It\u2019s effortless to sign up and create an API Key here. Deepgram is an AI automated speech recognition voice-to-text company that allows us to build applications that transcribe speech-to-text. We\u2019ll use Deepgram\u2019s Python SDK and the <a href="https://developers.deepgram.com/documentation/features/numerals/">Numerals feature</a>, which converts a number from written format to numerical format. For example, if we say the number \u201Cthree\u201D, it would appear in our transcript as \u201C3\u201D.</p>
<p>One of the many reasons to choose Deepgram over other providers is that we build better voice applications with faster, more accurate transcription through AI Speech Recognition. We offer real-time transcription and pre-recorded speech-to-text. The latter allows uploading a file that contains audio voice data for transcribing.</p>
<p>Now that we have our Deepgram API Key let\u2019s set up our Python AI piano project so we can start making music!</p>
<h2 id="create-a-python-virtual-environment">Create a Python Virtual Environment</h2>
<p>Make a Python directory called <code is:raw>play-piano</code> to hold our project. Inside of it, create a new file called <code is:raw>piano-with-deepgram.py</code>, which will have our main code for the project.</p>
<p>We need to create a virtual environment and activate it so we can <code is:raw>pip</code> install our Python packages. We have a more in-depth article about virtual environments on our Deepgram Developer <a href="https://blog.deepgram.com/python-virtual-environments/">blog</a>.</p>
<p>Activate the virtual environment after it\u2019s created and install the following Python packages from the terminal.</p>
<p>pip install deepgram-sdk\r
pip install python-dotenv\r
pip install mingus\r
pip install pygame\r
pip install sounddevice\r
pip install scipy</p>
<p>Let\u2019s go through each of the Python packages.</p>
<ul>
<li><code is:raw>deepgram-sdk</code> is the Deepgram Python SDK installation that allows us to transcribe speech audio, or voice, to a text transcript.</li>
<li><code is:raw>python-dotenv</code> helps us work with environment variables and our Deepgram API KEY, which we\u2019ll pull from the <code is:raw>.env</code> file.</li>
<li><code is:raw>mingus</code> is a package for Python used by programmers and musicians to make and play music.</li>
<li><code is:raw>pygame</code> is an open-sourced Python engine to help us make games or other multimedia applications.</li>
<li><code is:raw>sounddevice</code> helps get audio from our device\u2019s microphone and records it as a NumPy array.</li>
<li><code is:raw>scipy</code> helps writes the NumPy array into a WAV file.</li>
</ul>
<p>We need to download a few files, including <a href="https://github.com/bspaans/python-mingus/blob/master/mingus_examples/pygame-piano/keys.png"><strong>keys.png</strong></a>, which is the image of the piano GUI. The other file we need is the <strong>Yamaha-Grand-ios-v1.2</strong> from <a href="https://sites.google.com/site/soundfonts4u/">this site</a>. A SoundFont contains a sample of musical instruments; in our case, we\u2019ll need a piano sound.</p>
<h2 id="the-code-to-play-voice-controlled-music-with-python-and-ai">The Code to Play Voice-Controlled Music with Python and AI</h2>
<p>We\u2019ll only cover the Deepgram code in this section but will provide the entire code for the project at the end of this post.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> file_name</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">fs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">44100</span></span>
<span class="line"><span style="color: #C9D1D9">duration </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30.0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice() </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span></code></pre>
<h2 id="deepgram-python-code-explanation">Deepgram Python Code Explanation</h2>
<p>This line of code prompts the user to create a name of the audio file so that the file will save in <code is:raw>.wav</code> format:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Once the file is created the function <code is:raw>record_song_with_voice</code> gets called inside the <code is:raw>get_deepgram_transcript</code> method.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Inside the <code is:raw>record_song_with_voice</code> function, this line records the audio.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Where <code is:raw>duration</code> is the number of seconds it takes to record an audio file, and <code is:raw>fs</code> represents the sampling frequency. We set both of these as constants near the top of the code.</p>
<p>Then we write the voice recording to an audio file using the <code is:raw>.write()</code> method. That line of code looks like this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span></code></pre>
<p>Once the file is done writing, this message will print to the terminal <code is:raw>\u201DFinished.....Please check your output file"</code>, which means the recording is complete.</p>
<p>The function <code is:raw>get_deepgram_transcript</code> is where most of the magic happens. Let\u2019s walk through the code.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice() </span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span></code></pre>
<p>Here we initialize the Deepgram Python SDK. That\u2019s why it\u2019s essential to grab a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key from the console</a>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>We store our Deepgram API Key in a <code is:raw>.env</code> file like so:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;abc123&quot;</span></span></code></pre>
<p>The <code is:raw>abc123</code> represents the API Key Deepgram assigns us.</p>
<p>Next, we call the external function <code is:raw>record_song_with_voice()</code>, which allows us to record our voice and create a <code is:raw>.wav</code> file that will pass into Deepgram as pre-recorded audio.</p>
<p>Finally, we open the newly created audio file in binary format for reading. We provide key/values pairs for <code is:raw>buffer</code> and a <code is:raw>mimetype</code> using a Python dictionary. The buffer\u2019s value is <code is:raw>audio</code>, the object we assigned it in this line <code is:raw>with open(AUDIO_FILE, "rb") as audio:</code> The mimetype value is <code is:raw>audio/wav</code>, which is the file format we\u2019re using, which one of 40+ different file formats that Deepgram supports. We then call Deepgram and perform a pre-recorded transcription in this line: <code is:raw>response = await deepgram.transcription.prerecorded(source, {"punctuate": True, "numerals": True})</code>. We pass in the <code is:raw>numerals</code> parameter so that when we say a number, it will process in numeric form.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span></code></pre>
<p>The last bit of code to review is the <code is:raw>get_note_data</code> function, doing precisely that: getting the note data.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span></code></pre>
<p>We have a Python dictionary with keys from \u20181\u2019 to \u20187\u2019 corresponding to every note in the C Major scale. For example, when we say the number <code is:raw>1</code> that plays the note <code is:raw>C</code>, saying the number <code is:raw>2</code> will play the \u2018D\u2019 note, and so on:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span></code></pre>
<p>Here\u2019s how that would look on a piano. Each note in C Major is labeled, and located above is a corresponding number. The numbers 1 - 7 are critical, representing a single note in our melody.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1659450623/blog/2022/08/voice-controlled-music-with-python/Musical-Keyboard-Python-Deepgram.png" alt="Piano Keys with Deepgram API to play voice-controlled music with Python"></p>
<p>Next, we get the numerals from the Deepgram pre-recorded transcript <code is:raw>get_numbers = await get_deepgram_transcript()</code>.</p>
<p>We then create an empty list called <code is:raw>data</code> and check if there are any <code is:raw>results</code> in the parsed response we get back from Deepgram. If results exist, we get that result and store it in <code is:raw>data</code>:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Example output may look like the below, depending on which song we create.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    [</span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;1&#39;, &#39;start&#39;: 2.0552316, &#39;end&#39;: 2.4942129, &#39;confidence&#39;: 0.99902344, &#39;punctuated_word&#39;: &#39;1&#39;}, </span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;4&#39;, &#39;start&#39;: 2.8533795, &#39;end&#39;: 3.172639, &#39;confidence&#39;: 0.9980469, &#39;punctuated_word&#39;: &#39;4&#39;}, </span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;3&#39;, &#39;start&#39;: 3.6116204, &#39;end&#39;: 4.1116204, &#39;confidence&#39;: 0.9975586, &#39;punctuated_word&#39;: &#39;3&#39;}</span></span>
<span class="line"><span style="color: #c9d1d9">    ]</span></span></code></pre>
<p>We notice that the <code is:raw>word</code> key in the above response correlates to a numeral we speak into the microphone when recording the song.</p>
<p>We can now create a new list that maps each numeral to a note on the piano, using a list comprehension <code is:raw>return [note_dictonary [x['word']] for x in data]</code>.</p>
<p>To run the project, we\u2019ll need all the code. See the end of this post.</p>
<p>Then in our terminal, we can run the project by typing:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">python3 piano-with-deepgram.py</span></span></code></pre>
<p>Now, use our voice to say the following numerals, which correspond to piano notes, to play the first few phrases from Lady Gaga\u2019s song Bad Romance:</p>
<p><code is:raw>12314 3333211 12314 3333211</code></p>
<h2 id="next-steps-to-extend-the-voice-controlled-python-ai-music-example">Next Steps to Extend the Voice-Controlled Python AI Music Example</h2>
<p>Congratulations on getting to the end of the tutorial! We encourage you to try and extend the project to do the following:</p>
<ul>
<li>Play around with the code to play songs in different octaves</li>
<li>Play voice-controlled music that has flats and sharps</li>
<li>Tweak the code to play voice-controlled music using whole notes and half notes</li>
</ul>
<p>When you have your new masterpiece, please send us a Tweet at <a href="https://twitter.com/DeepgramAI">@DeepgramAI</a> and showcase your work!</p>
<h2 id="the-entire-python-code-for-the-voice-controlled-music-example">The Entire Python Code for the Voice-Controlled Music Example</h2>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pygame.locals </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.core </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> notes, chords</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.containers </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.midi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> fluidsynth</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> os </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> sys</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> scipy.io.wavfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> write</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio, json</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> pygame</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> time</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> sounddevice </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> sd</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># Audio File with song</span></span>
<span class="line"><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> file_name</span></span>
<span class="line"><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;soundfont.sf2&quot;</span></span>
<span class="line"><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># number of octaves to show</span></span>
<span class="line"><span style="color: #79C0FF">LOWEST</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># lowest octave to show</span></span>
<span class="line"><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.25</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># 1.0 # coloration fadeout time (1 tick = 0.001)</span></span>
<span class="line"><span style="color: #79C0FF">WHITE_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #79C0FF">BLACK_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;C&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;D&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;E&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;F&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;G&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;A&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;B&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">BLACK_KEYS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&quot;C#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;D#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;F#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;G#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;A#&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">fs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">44100</span></span>
<span class="line"><span style="color: #C9D1D9">duration </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30.0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Initializes the Deepgram SDK</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># call the external function</span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice()</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Open the audio file</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #8B949E"># ...or replace mimetype as appropriate</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">load_img</span><span style="color: #C9D1D9">(name):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;&quot;&quot;Load image and return an image object&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  fullname </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> name</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.image.load(fullname)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> image.get_alpha() </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> image.convert()</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> image.convert_alpha()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> pygame.error </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> message:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Error: couldn&#39;t load image: &quot;</span><span style="color: #C9D1D9">, fullname)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SystemExit</span><span style="color: #C9D1D9">(message)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> (image, image.get_rect())</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> fluidsynth.init(</span><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Couldn&#39;t load soundfont&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  sys.exit(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">pygame.init()</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.font.init()</span></span>
<span class="line"><span style="color: #C9D1D9">font </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.font.SysFont(</span><span style="color: #A5D6FF">&quot;monospace&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">screen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.display.set_mode((</span><span style="color: #79C0FF">640</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">480</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">(key_graphic, kgrect) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> load_img(</span><span style="color: #A5D6FF">&quot;keys.png&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">(width, height) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (kgrect.width, kgrect.height)</span></span>
<span class="line"><span style="color: #C9D1D9">white_key_width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">7</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># Reset display to wrap around the keyboard image</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.display.set_mode((</span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width, height </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.display.set_caption(</span><span style="color: #A5D6FF">&quot;mingus piano&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">octave </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">4</span></span>
<span class="line"><span style="color: #C9D1D9">channel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">8</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># pressed is a surface that is used to show where a key has been pressed</span></span>
<span class="line"><span style="color: #C9D1D9">pressed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.Surface((white_key_width, height))</span></span>
<span class="line"><span style="color: #C9D1D9">pressed.fill((</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">230</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># text is the surface displaying the determined chord</span></span>
<span class="line"><span style="color: #C9D1D9">text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.Surface((width </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">text.fill((</span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">playing_w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [] </span><span style="color: #8B949E"># white keys being played right now</span></span>
<span class="line"><span style="color: #C9D1D9">playing_b </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [] </span><span style="color: #8B949E"># black keys being played right now</span></span>
<span class="line"><span style="color: #79C0FF">quit</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">False</span></span>
<span class="line"><span style="color: #C9D1D9">tick </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">play_note</span><span style="color: #C9D1D9">(note):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;&quot;&quot;play_note determines the coordinates of a note on the keyboard image</span></span>
<span class="line"><span style="color: #A5D6FF">  and sends a request to play the note to the fluidsynth server&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">global</span><span style="color: #C9D1D9"> text</span></span>
<span class="line"><span style="color: #C9D1D9">  octave_offset </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (note.octave </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">LOWEST</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> note.name </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># Getting the x coordinate of a white key can be done automatically</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9">.index(note.name) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> white_key_width</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> octave_offset</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># Add a list containing the x coordinate, the tick at the current time</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># and of course the note itself to playing_w</span></span>
<span class="line"><span style="color: #C9D1D9">      playing_w.append([w, tick, note])</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># For black keys I hard coded the x coordinates. It&#39;s ugly.</span></span>
<span class="line"><span style="color: #C9D1D9">      i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">BLACK_KEYS</span><span style="color: #C9D1D9">.index(note.name)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">18</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">58</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">115</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">151</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">187</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> octave_offset</span></span>
<span class="line"><span style="color: #C9D1D9">      playing_b.append([w, tick, note])</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># To find out what sort of chord is being played we have to look at both the</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># white and black keys, obviously:</span></span>
<span class="line"><span style="color: #C9D1D9">  notes </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> playing_w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> playing_b</span></span>
<span class="line"><span style="color: #C9D1D9">  notes.sort()</span></span>
<span class="line"><span style="color: #C9D1D9">  notenames </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> n </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> notes:</span></span>
<span class="line"><span style="color: #C9D1D9">      notenames.append(n[</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">].name)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Determine the chord</span></span>
<span class="line"><span style="color: #C9D1D9">  det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> chords.determine(notenames)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> det </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> []:</span></span>
<span class="line"><span style="color: #C9D1D9">      det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> det[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># And render it onto the text surface</span></span>
<span class="line"><span style="color: #C9D1D9">  t </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> font.render(det, </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  text.fill((</span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  text.blit(t, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Play the note</span></span>
<span class="line"><span style="color: #C9D1D9">  fluidsynth.play_Note(note, channel, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  time.sleep(</span><span style="color: #79C0FF">0.50</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span>
<span class="line"><span style="color: #C9D1D9">i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(data):</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Blit the picture of one octave OCTAVES times.</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">range</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">       screen.blit(key_graphic, (x </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Blit the text surface</span></span>
<span class="line"><span style="color: #C9D1D9">   screen.blit(text, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, height))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Check all the white keys</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> note </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> playing_w:</span></span>
<span class="line"><span style="color: #C9D1D9">      diff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> tick </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> note[</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># If a is past its prime, remove it, otherwise blit the pressed surface</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># with a &#39;cool&#39; fading effect.</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> diff </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          fluidsynth.stop_Note(note[</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">], channel)</span></span>
<span class="line"><span style="color: #C9D1D9">          playing_w.remove(note)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          pressed.fill((</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, ((</span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> diff) </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">124</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">          screen.blit(pressed, (note[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">), </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">, pygame.</span><span style="color: #79C0FF">BLEND_SUB</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> tick </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       play_note(Note(data[i], octave))</span></span>
<span class="line"><span style="color: #C9D1D9">       i </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># if i == len(data):</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># i = 0</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   pygame.display.update()</span></span>
<span class="line"><span style="color: #C9D1D9">   tick </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.005</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># or 0.001 or 0.0001</span></span></code></pre>`;
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/voice-controlled-music-with-python/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Move over Beethoven. This tutorial will use Python and the Deepgram API speech-to-text audio transcription to play a piano with your voice. The song we’ll play is the first few phrases of <a href="https://youtu.be/-bsMuWw-v6c">Lady Gaga’s Bad Romance</a>. It’s a simple piece in C Major, meaning no flats and sharps! We’ll only use pitches C, D, E, F, G, A, and B, and no black keys. What a beautiful chance for someone learning how to play the piano without a keyboard, tapping into the power of voice to play music!</p>
<p>After running the project, we’ll see the GIF below when running the project as a PyGame application. A window will appear, and the piano will play the song. We’ll hear the notes, which also light up on the keyboard.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1659451110/blog/2022/08/voice-controlled-music-with-python/python-voice-controlled-music.gif" alt="Python and Deepgram API playing voice-controlled music with the piano"></p>
<p>Let’s get started!</p>
<h2 id="what-well-need-to-play-voice-controlled-music-using-ai">What We’ll Need to Play Voice-Controlled Music Using AI</h2>
<p>This project requires macOS but is also possible with a Windows or Linux machine. We’ll also use Python 3.10 and other tools like FluidSynth and Deepgram Python SDK speech-to-text audio transcription.</p>
<h3 id="fluidsynth">FluidSynth</h3>
<p>We need to install <a href="https://www.fluidsynth.org/">FluidSynth</a>, a free, open-source MIDI software synthesizer that creates sound in digital format, usually for music. <strong>MIDI</strong> or <strong>Musical Instrument Digital Interface</strong> is a protocol that allows musical gear like computers, software, and instruments to communicate with one another. <strong>FluidSynth</strong> uses <strong>SoundFont</strong> files to generate audio. These files have samples of musical instruments like a piano that play MIDI files.</p>
<p>There are various options to install FluidSynth on a Mac. In this tutorial, we’ll use <a href="https://brew.sh/">Homebrew</a> for the installation. After installing Homebrew, run this command anywhere in the terminal:</p>
<p>brew install fluidsynth</p>
<p>Now that FluidSynth is installed, let’s get our Deepgram API Key.</p>
<h3 id="deepgram-api-key">Deepgram API Key</h3>
<p>We need to grab a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key from the console</a>. It’s effortless to sign up and create an API Key here. Deepgram is an AI automated speech recognition voice-to-text company that allows us to build applications that transcribe speech-to-text. We’ll use Deepgram’s Python SDK and the <a href="https://developers.deepgram.com/documentation/features/numerals/">Numerals feature</a>, which converts a number from written format to numerical format. For example, if we say the number “three”, it would appear in our transcript as “3”.</p>
<p>One of the many reasons to choose Deepgram over other providers is that we build better voice applications with faster, more accurate transcription through AI Speech Recognition. We offer real-time transcription and pre-recorded speech-to-text. The latter allows uploading a file that contains audio voice data for transcribing.</p>
<p>Now that we have our Deepgram API Key let’s set up our Python AI piano project so we can start making music!</p>
<h2 id="create-a-python-virtual-environment">Create a Python Virtual Environment</h2>
<p>Make a Python directory called <code>play-piano</code> to hold our project. Inside of it, create a new file called <code>piano-with-deepgram.py</code>, which will have our main code for the project.</p>
<p>We need to create a virtual environment and activate it so we can <code>pip</code> install our Python packages. We have a more in-depth article about virtual environments on our Deepgram Developer <a href="https://blog.deepgram.com/python-virtual-environments/">blog</a>.</p>
<p>Activate the virtual environment after it’s created and install the following Python packages from the terminal.</p>
<p>pip install deepgram-sdk
pip install python-dotenv
pip install mingus
pip install pygame
pip install sounddevice
pip install scipy</p>
<p>Let’s go through each of the Python packages.</p>
<ul>
<li><code>deepgram-sdk</code> is the Deepgram Python SDK installation that allows us to transcribe speech audio, or voice, to a text transcript.</li>
<li><code>python-dotenv</code> helps us work with environment variables and our Deepgram API KEY, which we’ll pull from the <code>.env</code> file.</li>
<li><code>mingus</code> is a package for Python used by programmers and musicians to make and play music.</li>
<li><code>pygame</code> is an open-sourced Python engine to help us make games or other multimedia applications.</li>
<li><code>sounddevice</code> helps get audio from our device’s microphone and records it as a NumPy array.</li>
<li><code>scipy</code> helps writes the NumPy array into a WAV file.</li>
</ul>
<p>We need to download a few files, including <a href="https://github.com/bspaans/python-mingus/blob/master/mingus_examples/pygame-piano/keys.png"><strong>keys.png</strong></a>, which is the image of the piano GUI. The other file we need is the <strong>Yamaha-Grand-ios-v1.2</strong> from <a href="https://sites.google.com/site/soundfonts4u/">this site</a>. A SoundFont contains a sample of musical instruments; in our case, we’ll need a piano sound.</p>
<h2 id="the-code-to-play-voice-controlled-music-with-python-and-ai">The Code to Play Voice-Controlled Music with Python and AI</h2>
<p>We’ll only cover the Deepgram code in this section but will provide the entire code for the project at the end of this post.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> file_name</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">fs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">44100</span></span>
<span class="line"><span style="color: #C9D1D9">duration </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30.0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice() </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span></code></pre>
<h2 id="deepgram-python-code-explanation">Deepgram Python Code Explanation</h2>
<p>This line of code prompts the user to create a name of the audio file so that the file will save in <code>.wav</code> format:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Once the file is created the function <code>record_song_with_voice</code> gets called inside the <code>get_deepgram_transcript</code> method.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Inside the <code>record_song_with_voice</code> function, this line records the audio.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Where <code>duration</code> is the number of seconds it takes to record an audio file, and <code>fs</code> represents the sampling frequency. We set both of these as constants near the top of the code.</p>
<p>Then we write the voice recording to an audio file using the <code>.write()</code> method. That line of code looks like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span></code></pre>
<p>Once the file is done writing, this message will print to the terminal <code>”Finished.....Please check your output file"</code>, which means the recording is complete.</p>
<p>The function <code>get_deepgram_transcript</code> is where most of the magic happens. Let’s walk through the code.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice() </span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span></code></pre>
<p>Here we initialize the Deepgram Python SDK. That’s why it’s essential to grab a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key from the console</a>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>We store our Deepgram API Key in a <code>.env</code> file like so:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;abc123&quot;</span></span></code></pre>
<p>The <code>abc123</code> represents the API Key Deepgram assigns us.</p>
<p>Next, we call the external function <code>record_song_with_voice()</code>, which allows us to record our voice and create a <code>.wav</code> file that will pass into Deepgram as pre-recorded audio.</p>
<p>Finally, we open the newly created audio file in binary format for reading. We provide key/values pairs for <code>buffer</code> and a <code>mimetype</code> using a Python dictionary. The buffer’s value is <code>audio</code>, the object we assigned it in this line <code>with open(AUDIO_FILE, "rb") as audio:</code> The mimetype value is <code>audio/wav</code>, which is the file format we’re using, which one of 40+ different file formats that Deepgram supports. We then call Deepgram and perform a pre-recorded transcription in this line: <code>response = await deepgram.transcription.prerecorded(source, {"punctuate": True, "numerals": True})</code>. We pass in the <code>numerals</code> parameter so that when we say a number, it will process in numeric form.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span></code></pre>
<p>The last bit of code to review is the <code>get_note_data</code> function, doing precisely that: getting the note data.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span></code></pre>
<p>We have a Python dictionary with keys from ‘1’ to ‘7’ corresponding to every note in the C Major scale. For example, when we say the number <code>1</code> that plays the note <code>C</code>, saying the number <code>2</code> will play the ‘D’ note, and so on:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span></code></pre>
<p>Here’s how that would look on a piano. Each note in C Major is labeled, and located above is a corresponding number. The numbers 1 - 7 are critical, representing a single note in our melody.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1659450623/blog/2022/08/voice-controlled-music-with-python/Musical-Keyboard-Python-Deepgram.png" alt="Piano Keys with Deepgram API to play voice-controlled music with Python"></p>
<p>Next, we get the numerals from the Deepgram pre-recorded transcript <code>get_numbers = await get_deepgram_transcript()</code>.</p>
<p>We then create an empty list called <code>data</code> and check if there are any <code>results</code> in the parsed response we get back from Deepgram. If results exist, we get that result and store it in <code>data</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Example output may look like the below, depending on which song we create.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    [</span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;1&#39;, &#39;start&#39;: 2.0552316, &#39;end&#39;: 2.4942129, &#39;confidence&#39;: 0.99902344, &#39;punctuated_word&#39;: &#39;1&#39;}, </span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;4&#39;, &#39;start&#39;: 2.8533795, &#39;end&#39;: 3.172639, &#39;confidence&#39;: 0.9980469, &#39;punctuated_word&#39;: &#39;4&#39;}, </span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;word&#39;: &#39;3&#39;, &#39;start&#39;: 3.6116204, &#39;end&#39;: 4.1116204, &#39;confidence&#39;: 0.9975586, &#39;punctuated_word&#39;: &#39;3&#39;}</span></span>
<span class="line"><span style="color: #c9d1d9">    ]</span></span></code></pre>
<p>We notice that the <code>word</code> key in the above response correlates to a numeral we speak into the microphone when recording the song.</p>
<p>We can now create a new list that maps each numeral to a note on the piano, using a list comprehension <code>return [note_dictonary [x['word']] for x in data]</code>.</p>
<p>To run the project, we’ll need all the code. See the end of this post.</p>
<p>Then in our terminal, we can run the project by typing:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">python3 piano-with-deepgram.py</span></span></code></pre>
<p>Now, use our voice to say the following numerals, which correspond to piano notes, to play the first few phrases from Lady Gaga’s song Bad Romance:</p>
<p><code>12314 3333211 12314 3333211</code></p>
<h2 id="next-steps-to-extend-the-voice-controlled-python-ai-music-example">Next Steps to Extend the Voice-Controlled Python AI Music Example</h2>
<p>Congratulations on getting to the end of the tutorial! We encourage you to try and extend the project to do the following:</p>
<ul>
<li>Play around with the code to play songs in different octaves</li>
<li>Play voice-controlled music that has flats and sharps</li>
<li>Tweak the code to play voice-controlled music using whole notes and half notes</li>
</ul>
<p>When you have your new masterpiece, please send us a Tweet at <a href="https://twitter.com/DeepgramAI">@DeepgramAI</a> and showcase your work!</p>
<h2 id="the-entire-python-code-for-the-voice-controlled-music-example">The Entire Python Code for the Voice-Controlled Music Example</h2>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pygame.locals </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.core </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> notes, chords</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.containers </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> mingus.midi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> fluidsynth</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> os </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> sys</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> scipy.io.wavfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> write</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio, json</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> pygame</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> time</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> sounddevice </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> sd</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"><span style="color: #C9D1D9">file_name </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">input</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Name the output WAV file: &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># Audio File with song</span></span>
<span class="line"><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> file_name</span></span>
<span class="line"><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;soundfont.sf2&quot;</span></span>
<span class="line"><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># number of octaves to show</span></span>
<span class="line"><span style="color: #79C0FF">LOWEST</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># lowest octave to show</span></span>
<span class="line"><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.25</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># 1.0 # coloration fadeout time (1 tick = 0.001)</span></span>
<span class="line"><span style="color: #79C0FF">WHITE_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #79C0FF">BLACK_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;C&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;D&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;E&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;F&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;G&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;A&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;B&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">BLACK_KEYS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&quot;C#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;D#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;F#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;G#&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;A#&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">fs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">44100</span></span>
<span class="line"><span style="color: #C9D1D9">duration </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30.0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">record_song_with_voice</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Recording.....&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   record_voice </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> sd.rec(</span><span style="color: #79C0FF">int</span><span style="color: #C9D1D9">(duration </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> fs) , </span><span style="color: #FFA657">samplerate</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs , </span><span style="color: #FFA657">channels</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   sd.wait()</span></span>
<span class="line"><span style="color: #C9D1D9">   write(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, fs,record_voice)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Finished.....Please check your output file&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_deepgram_transcript</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Initializes the Deepgram SDK</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># call the external function</span></span>
<span class="line"><span style="color: #C9D1D9">   record_song_with_voice()</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Open the audio file</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AUDIO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #8B949E"># ...or replace mimetype as appropriate</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&quot;buffer&quot;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&quot;mimetype&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;audio/wav&quot;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&quot;punctuate&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;numerals&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">load_img</span><span style="color: #C9D1D9">(name):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;&quot;&quot;Load image and return an image object&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  fullname </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> name</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.image.load(fullname)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> image.get_alpha() </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> image.convert()</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          image </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> image.convert_alpha()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> pygame.error </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> message:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Error: couldn&#39;t load image: &quot;</span><span style="color: #C9D1D9">, fullname)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SystemExit</span><span style="color: #C9D1D9">(message)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> (image, image.get_rect())</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> fluidsynth.init(</span><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Couldn&#39;t load soundfont&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">SF2</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  sys.exit(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">pygame.init()</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.font.init()</span></span>
<span class="line"><span style="color: #C9D1D9">font </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.font.SysFont(</span><span style="color: #A5D6FF">&quot;monospace&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">screen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.display.set_mode((</span><span style="color: #79C0FF">640</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">480</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">(key_graphic, kgrect) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> load_img(</span><span style="color: #A5D6FF">&quot;keys.png&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">(width, height) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (kgrect.width, kgrect.height)</span></span>
<span class="line"><span style="color: #C9D1D9">white_key_width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">7</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># Reset display to wrap around the keyboard image</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.display.set_mode((</span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width, height </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">pygame.display.set_caption(</span><span style="color: #A5D6FF">&quot;mingus piano&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">octave </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">4</span></span>
<span class="line"><span style="color: #C9D1D9">channel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">8</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># pressed is a surface that is used to show where a key has been pressed</span></span>
<span class="line"><span style="color: #C9D1D9">pressed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.Surface((white_key_width, height))</span></span>
<span class="line"><span style="color: #C9D1D9">pressed.fill((</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">230</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># text is the surface displaying the determined chord</span></span>
<span class="line"><span style="color: #C9D1D9">text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> pygame.Surface((width </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">text.fill((</span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">playing_w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [] </span><span style="color: #8B949E"># white keys being played right now</span></span>
<span class="line"><span style="color: #C9D1D9">playing_b </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [] </span><span style="color: #8B949E"># black keys being played right now</span></span>
<span class="line"><span style="color: #79C0FF">quit</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">False</span></span>
<span class="line"><span style="color: #C9D1D9">tick </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">play_note</span><span style="color: #C9D1D9">(note):</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&quot;&quot;&quot;play_note determines the coordinates of a note on the keyboard image</span></span>
<span class="line"><span style="color: #A5D6FF">  and sends a request to play the note to the fluidsynth server&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">global</span><span style="color: #C9D1D9"> text</span></span>
<span class="line"><span style="color: #C9D1D9">  octave_offset </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (note.octave </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">LOWEST</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> note.name </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># Getting the x coordinate of a white key can be done automatically</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">WHITE_KEYS</span><span style="color: #C9D1D9">.index(note.name) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> white_key_width</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> octave_offset</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># Add a list containing the x coordinate, the tick at the current time</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># and of course the note itself to playing_w</span></span>
<span class="line"><span style="color: #C9D1D9">      playing_w.append([w, tick, note])</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># For black keys I hard coded the x coordinates. It&#39;s ugly.</span></span>
<span class="line"><span style="color: #C9D1D9">      i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">BLACK_KEYS</span><span style="color: #C9D1D9">.index(note.name)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">18</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">58</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">115</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">elif</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">151</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">187</span></span>
<span class="line"><span style="color: #C9D1D9">      w </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> octave_offset</span></span>
<span class="line"><span style="color: #C9D1D9">      playing_b.append([w, tick, note])</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># To find out what sort of chord is being played we have to look at both the</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># white and black keys, obviously:</span></span>
<span class="line"><span style="color: #C9D1D9">  notes </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> playing_w </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> playing_b</span></span>
<span class="line"><span style="color: #C9D1D9">  notes.sort()</span></span>
<span class="line"><span style="color: #C9D1D9">  notenames </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> n </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> notes:</span></span>
<span class="line"><span style="color: #C9D1D9">      notenames.append(n[</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">].name)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Determine the chord</span></span>
<span class="line"><span style="color: #C9D1D9">  det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> chords.determine(notenames)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> det </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> []:</span></span>
<span class="line"><span style="color: #C9D1D9">      det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> det[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">      det </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># And render it onto the text surface</span></span>
<span class="line"><span style="color: #C9D1D9">  t </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> font.render(det, </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  text.fill((</span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  text.blit(t, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Play the note</span></span>
<span class="line"><span style="color: #C9D1D9">  fluidsynth.play_Note(note, channel, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  time.sleep(</span><span style="color: #79C0FF">0.50</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_note_data</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   note_dictonary </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;C&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;2&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;D&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;3&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;E&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;4&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;F&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;5&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;G&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;6&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;A&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #A5D6FF">&#39;7&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;B&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   get_numbers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> get_deepgram_transcript()</span></span>
<span class="line"><span style="color: #C9D1D9">   data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> get_numbers:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> get_numbers[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> [note_dictonary [x[</span><span style="color: #A5D6FF">&#39;word&#39;</span><span style="color: #C9D1D9">]] </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data]</span></span>
<span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.run(get_note_data())</span></span>
<span class="line"><span style="color: #C9D1D9">i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(data):</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Blit the picture of one octave OCTAVES times.</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> x </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">range</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">OCTAVES</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">       screen.blit(key_graphic, (x </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #8B949E"># Blit the text surface</span></span>
<span class="line"><span style="color: #C9D1D9">   screen.blit(text, (</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, height))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># Check all the white keys</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> note </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> playing_w:</span></span>
<span class="line"><span style="color: #C9D1D9">      diff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> tick </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> note[</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># If a is past its prime, remove it, otherwise blit the pressed surface</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># with a &#39;cool&#39; fading effect.</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> diff </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          fluidsynth.stop_Note(note[</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">], channel)</span></span>
<span class="line"><span style="color: #C9D1D9">          playing_w.remove(note)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">          pressed.fill((</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, ((</span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> diff) </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FADEOUT</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">255</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">124</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">          screen.blit(pressed, (note[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">), </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">, pygame.</span><span style="color: #79C0FF">BLEND_SUB</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> tick </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       play_note(Note(data[i], octave))</span></span>
<span class="line"><span style="color: #C9D1D9">       i </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># if i == len(data):</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E"># i = 0</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">   pygame.display.update()</span></span>
<span class="line"><span style="color: #C9D1D9">   tick </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.005</span><span style="color: #C9D1D9"> </span><span style="color: #8B949E"># or 0.001 or 0.0001</span></span></code></pre>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/voice-controlled-music-with-python/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
