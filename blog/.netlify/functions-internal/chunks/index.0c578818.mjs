import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
/* empty css                           */import 'axios';
/* empty css                          *//* empty css                           *//* empty css                          *//* empty css                              *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           *//* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "download-audio-from-youtube-video-with-youtube_dl", "text": "Download Audio From YouTube Video with youtube_dl" }, { "depth": 2, "slug": "transcribe-with-deepgram", "text": "Transcribe With Deepgram" }, { "depth": 2, "slug": "delete-audio-file", "text": "Delete Audio File" }, { "depth": 2, "slug": "bringing-it-all-together", "text": "Bringing It All Together" }], "source": 'In our internal Deepgram Slack workspace, there\'s a channel where folks can share fun and wacky things they\'ve achieved on the terminal (`#bash-hall-of-fame`). Over five years ago, our CEO Scott shared a nice little snippet that allows you to download just the audio from a YouTube video. Today, I\'m going to take that still-functional piece of code and show you how to download audio from a YouTube video and then transcribe it with Deepgram\'s Speech Recognition API.\n\nThe steps are remarkably similar to our [Transcribing YouTube Videos with Node.js](https://blog.deepgram.com/transcribe-youtube-videos-nodejs/) post, but entirely on the terminal.\n\nYou will need to download [`youtube-dl`](http://ytdl-org.github.io/youtube-dl/download.html), [`ffmpeg`](http://ffmpeg.org/download.html), and [`jq`](https://stedolan.github.io/jq/) for this tutorial to work. If you use macOS and have homebrew installed, this is `brew install youtube-dl`, `brew install ffmpeg`, and `brew install jq`. You will also need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\n## Download Audio From YouTube Video with youtube_dl\n\nWe\'ll use the following YouTube ID: `9NZDwZbyDus`. Starting with Scott\'s original snippet:\n\n```bash\nyoutube-dl 9NZDwZbyDus --extract-audio --audio-format wav -o 9NZDwZbyDus.wav\n```\n\nGiven that we use the same value twice, let\'s abstract the video ID into a variable:\n\n```bash\nVIDEO_ID=9NZDwZbyDus; youtube-dl $VIDEO_ID --extract-audio --audio-format wav -o $VIDEO_ID.wav\n```\n\n## Transcribe With Deepgram\n\nNow that we have a local file and know its file format, we can use cURL to get a transcript from Deepgram:\n\n```bash\ncurl https://api.deepgram.com/v1/listen?punctuate=true -H "Authorization: Token YOUR_DEEPGRAM_API_KEY" -H "Content-Type: audio/wav" --data-binary @${VIDEO_ID}.wav\n```\n\nUsing `jq` to extract just the transcript text and saving that to a file:\n\n```bash\ncurl https://api.deepgram.com/v1/listen?punctuate=true -H "Authorization: Token YOUR_DEEPGRAM_API_KEY" -H "Content-Type: audio/wav" --data-binary @${VIDEO_ID}.wav | jq \'.results.channels[0].alternatives[0].transcript\' > "$VIDEO_ID.txt"\n```\n\n## Delete Audio File\n\nFinally, if you no longer require the audio file, delete it:\n\n```bash\nrm $VIDEO_ID.wav\n```\n\n## Bringing It All Together\n\nWhen we first introduced a variable to this script, we separated the declaration and the cURL command with a semicolon. We can do exactly the same with all subsequent steps. The one-liner for this project is:\n\n```bash\nVIDEO_ID=EmIhbFeJgiE; youtube-dl ${VIDEO_ID} --extract-audio --audio-format wav -o ${VIDEO_ID}.wav; curl https://api.deepgram.com/v1/listen\\?punctuate\\=true -H "Authorization: Token YOUR_DEEPGRAM_API_KEY" -H "Content-Type: audio/wav" --data-binary @${VIDEO_ID}.wav | jq \'.results.channels[0].alternatives[0].transcript\' > "$VIDEO_ID.txt"; rm "$VIDEO_ID.wav"\n```\n\nIf you have any questions, please let us know - we love to help!', "html": '<p>In our internal Deepgram Slack workspace, there\u2019s a channel where folks can share fun and wacky things they\u2019ve achieved on the terminal (<code is:raw>#bash-hall-of-fame</code>). Over five years ago, our CEO Scott shared a nice little snippet that allows you to download just the audio from a YouTube video. Today, I\u2019m going to take that still-functional piece of code and show you how to download audio from a YouTube video and then transcribe it with Deepgram\u2019s Speech Recognition API.</p>\n<p>The steps are remarkably similar to our <a href="https://blog.deepgram.com/transcribe-youtube-videos-nodejs/">Transcribing YouTube Videos with Node.js</a> post, but entirely on the terminal.</p>\n<p>You will need to download <a href="http://ytdl-org.github.io/youtube-dl/download.html"><code is:raw>youtube-dl</code></a>, <a href="http://ffmpeg.org/download.html"><code is:raw>ffmpeg</code></a>, and <a href="https://stedolan.github.io/jq/"><code is:raw>jq</code></a> for this tutorial to work. If you use macOS and have homebrew installed, this is <code is:raw>brew install youtube-dl</code>, <code is:raw>brew install ffmpeg</code>, and <code is:raw>brew install jq</code>. You will also need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<h2 id="download-audio-from-youtube-video-with-youtube_dl">Download Audio From YouTube Video with youtube_dl</h2>\n<p>We\u2019ll use the following YouTube ID: <code is:raw>9NZDwZbyDus</code>. Starting with Scott\u2019s original snippet:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">youtube-dl 9NZDwZbyDus --extract-audio --audio-format wav -o 9NZDwZbyDus.wav</span></span></code></pre>\n<p>Given that we use the same value twice, let\u2019s abstract the video ID into a variable:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">VIDEO_ID=9NZDwZbyDus</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> youtube-dl $VIDEO_ID --extract-audio --audio-format wav -o $VIDEO_ID.wav</span></span></code></pre>\n<h2 id="transcribe-with-deepgram">Transcribe With Deepgram</h2>\n<p>Now that we have a local file and know its file format, we can use cURL to get a transcript from Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl https://api.deepgram.com/v1/listen</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">punctuate=true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @${VIDEO_ID}.wav</span></span></code></pre>\n<p>Using <code is:raw>jq</code> to extract just the transcript text and saving that to a file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl https://api.deepgram.com/v1/listen</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">punctuate=true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @${VIDEO_ID}.wav </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> jq </span><span style="color: #A5D6FF">&#39;.results.channels[0].alternatives[0].transcript&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.txt&quot;</span></span></code></pre>\n<h2 id="delete-audio-file">Delete Audio File</h2>\n<p>Finally, if you no longer require the audio file, delete it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">rm $VIDEO_ID.wav</span></span></code></pre>\n<h2 id="bringing-it-all-together">Bringing It All Together</h2>\n<p>When we first introduced a variable to this script, we separated the declaration and the cURL command with a semicolon. We can do exactly the same with all subsequent steps. The one-liner for this project is:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">VIDEO_ID=EmIhbFeJgiE</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> youtube-dl ${VIDEO_ID} --extract-audio --audio-format wav -o ${VIDEO_ID}.wav</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> curl https://api.deepgram.com/v1/listen</span><span style="color: #79C0FF">\\?</span><span style="color: #C9D1D9">punctuate</span><span style="color: #79C0FF">\\=</span><span style="color: #C9D1D9">true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @${VIDEO_ID}.wav </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> jq </span><span style="color: #A5D6FF">&#39;.results.channels[0].alternatives[0].transcript&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.txt&quot;</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> rm </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.wav&quot;</span></span></code></pre>\n<p>If you have any questions, please let us know - we love to help!</p>' };
const frontmatter = { "title": "How To Transcribe YouTube Videos From Your Terminal", "description": "A five-year old snippet shared by our CEO still stacks up. Learn how to transcribe a YouTube video entirely from the terminal with youtube-dl and jq.", "date": "2022-08-22T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1661178745/blog/2022/08/transcribe-youtube-videos-from-terminal/2208-Transcribing-YouTube-Videos-From-Your-Terminal-blog%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["youtube"], "seo": { "title": "How To Transcribe YouTube Videos From Your Terminal", "description": "A five-year old snippet shared by our CEO still stacks up. Learn how to transcribe a YouTube video entirely from the terminal with youtube-dl and jq." }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454124/blog/transcribe-youtube-videos-from-terminal/ograph.png" }, "shorturls": { "share": "https://dpgr.am/0efb794", "twitter": "https://dpgr.am/bf6fe19", "linkedin": "https://dpgr.am/59d015d", "reddit": "https://dpgr.am/fb31c03", "facebook": "https://dpgr.am/2d52871" }, "astro": { "headings": [{ "depth": 2, "slug": "download-audio-from-youtube-video-with-youtube_dl", "text": "Download Audio From YouTube Video with youtube_dl" }, { "depth": 2, "slug": "transcribe-with-deepgram", "text": "Transcribe With Deepgram" }, { "depth": 2, "slug": "delete-audio-file", "text": "Delete Audio File" }, { "depth": 2, "slug": "bringing-it-all-together", "text": "Bringing It All Together" }], "source": 'In our internal Deepgram Slack workspace, there\'s a channel where folks can share fun and wacky things they\'ve achieved on the terminal (`#bash-hall-of-fame`). Over five years ago, our CEO Scott shared a nice little snippet that allows you to download just the audio from a YouTube video. Today, I\'m going to take that still-functional piece of code and show you how to download audio from a YouTube video and then transcribe it with Deepgram\'s Speech Recognition API.\n\nThe steps are remarkably similar to our [Transcribing YouTube Videos with Node.js](https://blog.deepgram.com/transcribe-youtube-videos-nodejs/) post, but entirely on the terminal.\n\nYou will need to download [`youtube-dl`](http://ytdl-org.github.io/youtube-dl/download.html), [`ffmpeg`](http://ffmpeg.org/download.html), and [`jq`](https://stedolan.github.io/jq/) for this tutorial to work. If you use macOS and have homebrew installed, this is `brew install youtube-dl`, `brew install ffmpeg`, and `brew install jq`. You will also need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\n## Download Audio From YouTube Video with youtube_dl\n\nWe\'ll use the following YouTube ID: `9NZDwZbyDus`. Starting with Scott\'s original snippet:\n\n```bash\nyoutube-dl 9NZDwZbyDus --extract-audio --audio-format wav -o 9NZDwZbyDus.wav\n```\n\nGiven that we use the same value twice, let\'s abstract the video ID into a variable:\n\n```bash\nVIDEO_ID=9NZDwZbyDus; youtube-dl $VIDEO_ID --extract-audio --audio-format wav -o $VIDEO_ID.wav\n```\n\n## Transcribe With Deepgram\n\nNow that we have a local file and know its file format, we can use cURL to get a transcript from Deepgram:\n\n```bash\ncurl https://api.deepgram.com/v1/listen?punctuate=true -H "Authorization: Token YOUR_DEEPGRAM_API_KEY" -H "Content-Type: audio/wav" --data-binary @${VIDEO_ID}.wav\n```\n\nUsing `jq` to extract just the transcript text and saving that to a file:\n\n```bash\ncurl https://api.deepgram.com/v1/listen?punctuate=true -H "Authorization: Token YOUR_DEEPGRAM_API_KEY" -H "Content-Type: audio/wav" --data-binary @${VIDEO_ID}.wav | jq \'.results.channels[0].alternatives[0].transcript\' > "$VIDEO_ID.txt"\n```\n\n## Delete Audio File\n\nFinally, if you no longer require the audio file, delete it:\n\n```bash\nrm $VIDEO_ID.wav\n```\n\n## Bringing It All Together\n\nWhen we first introduced a variable to this script, we separated the declaration and the cURL command with a semicolon. We can do exactly the same with all subsequent steps. The one-liner for this project is:\n\n```bash\nVIDEO_ID=EmIhbFeJgiE; youtube-dl ${VIDEO_ID} --extract-audio --audio-format wav -o ${VIDEO_ID}.wav; curl https://api.deepgram.com/v1/listen\\?punctuate\\=true -H "Authorization: Token YOUR_DEEPGRAM_API_KEY" -H "Content-Type: audio/wav" --data-binary @${VIDEO_ID}.wav | jq \'.results.channels[0].alternatives[0].transcript\' > "$VIDEO_ID.txt"; rm "$VIDEO_ID.wav"\n```\n\nIf you have any questions, please let us know - we love to help!', "html": '<p>In our internal Deepgram Slack workspace, there\u2019s a channel where folks can share fun and wacky things they\u2019ve achieved on the terminal (<code is:raw>#bash-hall-of-fame</code>). Over five years ago, our CEO Scott shared a nice little snippet that allows you to download just the audio from a YouTube video. Today, I\u2019m going to take that still-functional piece of code and show you how to download audio from a YouTube video and then transcribe it with Deepgram\u2019s Speech Recognition API.</p>\n<p>The steps are remarkably similar to our <a href="https://blog.deepgram.com/transcribe-youtube-videos-nodejs/">Transcribing YouTube Videos with Node.js</a> post, but entirely on the terminal.</p>\n<p>You will need to download <a href="http://ytdl-org.github.io/youtube-dl/download.html"><code is:raw>youtube-dl</code></a>, <a href="http://ffmpeg.org/download.html"><code is:raw>ffmpeg</code></a>, and <a href="https://stedolan.github.io/jq/"><code is:raw>jq</code></a> for this tutorial to work. If you use macOS and have homebrew installed, this is <code is:raw>brew install youtube-dl</code>, <code is:raw>brew install ffmpeg</code>, and <code is:raw>brew install jq</code>. You will also need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<h2 id="download-audio-from-youtube-video-with-youtube_dl">Download Audio From YouTube Video with youtube_dl</h2>\n<p>We\u2019ll use the following YouTube ID: <code is:raw>9NZDwZbyDus</code>. Starting with Scott\u2019s original snippet:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">youtube-dl 9NZDwZbyDus --extract-audio --audio-format wav -o 9NZDwZbyDus.wav</span></span></code></pre>\n<p>Given that we use the same value twice, let\u2019s abstract the video ID into a variable:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">VIDEO_ID=9NZDwZbyDus</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> youtube-dl $VIDEO_ID --extract-audio --audio-format wav -o $VIDEO_ID.wav</span></span></code></pre>\n<h2 id="transcribe-with-deepgram">Transcribe With Deepgram</h2>\n<p>Now that we have a local file and know its file format, we can use cURL to get a transcript from Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl https://api.deepgram.com/v1/listen</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">punctuate=true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @${VIDEO_ID}.wav</span></span></code></pre>\n<p>Using <code is:raw>jq</code> to extract just the transcript text and saving that to a file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl https://api.deepgram.com/v1/listen</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">punctuate=true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @${VIDEO_ID}.wav </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> jq </span><span style="color: #A5D6FF">&#39;.results.channels[0].alternatives[0].transcript&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.txt&quot;</span></span></code></pre>\n<h2 id="delete-audio-file">Delete Audio File</h2>\n<p>Finally, if you no longer require the audio file, delete it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">rm $VIDEO_ID.wav</span></span></code></pre>\n<h2 id="bringing-it-all-together">Bringing It All Together</h2>\n<p>When we first introduced a variable to this script, we separated the declaration and the cURL command with a semicolon. We can do exactly the same with all subsequent steps. The one-liner for this project is:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">VIDEO_ID=EmIhbFeJgiE</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> youtube-dl ${VIDEO_ID} --extract-audio --audio-format wav -o ${VIDEO_ID}.wav</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> curl https://api.deepgram.com/v1/listen</span><span style="color: #79C0FF">\\?</span><span style="color: #C9D1D9">punctuate</span><span style="color: #79C0FF">\\=</span><span style="color: #C9D1D9">true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @${VIDEO_ID}.wav </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> jq </span><span style="color: #A5D6FF">&#39;.results.channels[0].alternatives[0].transcript&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.txt&quot;</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> rm </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.wav&quot;</span></span></code></pre>\n<p>If you have any questions, please let us know - we love to help!</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribe-youtube-videos-from-terminal/index.md" };
function rawContent() {
  return 'In our internal Deepgram Slack workspace, there\'s a channel where folks can share fun and wacky things they\'ve achieved on the terminal (`#bash-hall-of-fame`). Over five years ago, our CEO Scott shared a nice little snippet that allows you to download just the audio from a YouTube video. Today, I\'m going to take that still-functional piece of code and show you how to download audio from a YouTube video and then transcribe it with Deepgram\'s Speech Recognition API.\n\nThe steps are remarkably similar to our [Transcribing YouTube Videos with Node.js](https://blog.deepgram.com/transcribe-youtube-videos-nodejs/) post, but entirely on the terminal.\n\nYou will need to download [`youtube-dl`](http://ytdl-org.github.io/youtube-dl/download.html), [`ffmpeg`](http://ffmpeg.org/download.html), and [`jq`](https://stedolan.github.io/jq/) for this tutorial to work. If you use macOS and have homebrew installed, this is `brew install youtube-dl`, `brew install ffmpeg`, and `brew install jq`. You will also need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\n## Download Audio From YouTube Video with youtube_dl\n\nWe\'ll use the following YouTube ID: `9NZDwZbyDus`. Starting with Scott\'s original snippet:\n\n```bash\nyoutube-dl 9NZDwZbyDus --extract-audio --audio-format wav -o 9NZDwZbyDus.wav\n```\n\nGiven that we use the same value twice, let\'s abstract the video ID into a variable:\n\n```bash\nVIDEO_ID=9NZDwZbyDus; youtube-dl $VIDEO_ID --extract-audio --audio-format wav -o $VIDEO_ID.wav\n```\n\n## Transcribe With Deepgram\n\nNow that we have a local file and know its file format, we can use cURL to get a transcript from Deepgram:\n\n```bash\ncurl https://api.deepgram.com/v1/listen?punctuate=true -H "Authorization: Token YOUR_DEEPGRAM_API_KEY" -H "Content-Type: audio/wav" --data-binary @${VIDEO_ID}.wav\n```\n\nUsing `jq` to extract just the transcript text and saving that to a file:\n\n```bash\ncurl https://api.deepgram.com/v1/listen?punctuate=true -H "Authorization: Token YOUR_DEEPGRAM_API_KEY" -H "Content-Type: audio/wav" --data-binary @${VIDEO_ID}.wav | jq \'.results.channels[0].alternatives[0].transcript\' > "$VIDEO_ID.txt"\n```\n\n## Delete Audio File\n\nFinally, if you no longer require the audio file, delete it:\n\n```bash\nrm $VIDEO_ID.wav\n```\n\n## Bringing It All Together\n\nWhen we first introduced a variable to this script, we separated the declaration and the cURL command with a semicolon. We can do exactly the same with all subsequent steps. The one-liner for this project is:\n\n```bash\nVIDEO_ID=EmIhbFeJgiE; youtube-dl ${VIDEO_ID} --extract-audio --audio-format wav -o ${VIDEO_ID}.wav; curl https://api.deepgram.com/v1/listen\\?punctuate\\=true -H "Authorization: Token YOUR_DEEPGRAM_API_KEY" -H "Content-Type: audio/wav" --data-binary @${VIDEO_ID}.wav | jq \'.results.channels[0].alternatives[0].transcript\' > "$VIDEO_ID.txt"; rm "$VIDEO_ID.wav"\n```\n\nIf you have any questions, please let us know - we love to help!';
}
function compiledContent() {
  return '<p>In our internal Deepgram Slack workspace, there\u2019s a channel where folks can share fun and wacky things they\u2019ve achieved on the terminal (<code is:raw>#bash-hall-of-fame</code>). Over five years ago, our CEO Scott shared a nice little snippet that allows you to download just the audio from a YouTube video. Today, I\u2019m going to take that still-functional piece of code and show you how to download audio from a YouTube video and then transcribe it with Deepgram\u2019s Speech Recognition API.</p>\n<p>The steps are remarkably similar to our <a href="https://blog.deepgram.com/transcribe-youtube-videos-nodejs/">Transcribing YouTube Videos with Node.js</a> post, but entirely on the terminal.</p>\n<p>You will need to download <a href="http://ytdl-org.github.io/youtube-dl/download.html"><code is:raw>youtube-dl</code></a>, <a href="http://ffmpeg.org/download.html"><code is:raw>ffmpeg</code></a>, and <a href="https://stedolan.github.io/jq/"><code is:raw>jq</code></a> for this tutorial to work. If you use macOS and have homebrew installed, this is <code is:raw>brew install youtube-dl</code>, <code is:raw>brew install ffmpeg</code>, and <code is:raw>brew install jq</code>. You will also need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<h2 id="download-audio-from-youtube-video-with-youtube_dl">Download Audio From YouTube Video with youtube_dl</h2>\n<p>We\u2019ll use the following YouTube ID: <code is:raw>9NZDwZbyDus</code>. Starting with Scott\u2019s original snippet:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">youtube-dl 9NZDwZbyDus --extract-audio --audio-format wav -o 9NZDwZbyDus.wav</span></span></code></pre>\n<p>Given that we use the same value twice, let\u2019s abstract the video ID into a variable:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">VIDEO_ID=9NZDwZbyDus</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> youtube-dl $VIDEO_ID --extract-audio --audio-format wav -o $VIDEO_ID.wav</span></span></code></pre>\n<h2 id="transcribe-with-deepgram">Transcribe With Deepgram</h2>\n<p>Now that we have a local file and know its file format, we can use cURL to get a transcript from Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl https://api.deepgram.com/v1/listen</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">punctuate=true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @${VIDEO_ID}.wav</span></span></code></pre>\n<p>Using <code is:raw>jq</code> to extract just the transcript text and saving that to a file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl https://api.deepgram.com/v1/listen</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">punctuate=true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @${VIDEO_ID}.wav </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> jq </span><span style="color: #A5D6FF">&#39;.results.channels[0].alternatives[0].transcript&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.txt&quot;</span></span></code></pre>\n<h2 id="delete-audio-file">Delete Audio File</h2>\n<p>Finally, if you no longer require the audio file, delete it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">rm $VIDEO_ID.wav</span></span></code></pre>\n<h2 id="bringing-it-all-together">Bringing It All Together</h2>\n<p>When we first introduced a variable to this script, we separated the declaration and the cURL command with a semicolon. We can do exactly the same with all subsequent steps. The one-liner for this project is:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">VIDEO_ID=EmIhbFeJgiE</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> youtube-dl ${VIDEO_ID} --extract-audio --audio-format wav -o ${VIDEO_ID}.wav</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> curl https://api.deepgram.com/v1/listen</span><span style="color: #79C0FF">\\?</span><span style="color: #C9D1D9">punctuate</span><span style="color: #79C0FF">\\=</span><span style="color: #C9D1D9">true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @${VIDEO_ID}.wav </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> jq </span><span style="color: #A5D6FF">&#39;.results.channels[0].alternatives[0].transcript&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.txt&quot;</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> rm </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.wav&quot;</span></span></code></pre>\n<p>If you have any questions, please let us know - we love to help!</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribe-youtube-videos-from-terminal/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>In our internal Deepgram Slack workspace, there’s a channel where folks can share fun and wacky things they’ve achieved on the terminal (<code>#bash-hall-of-fame</code>). Over five years ago, our CEO Scott shared a nice little snippet that allows you to download just the audio from a YouTube video. Today, I’m going to take that still-functional piece of code and show you how to download audio from a YouTube video and then transcribe it with Deepgram’s Speech Recognition API.</p>
<p>The steps are remarkably similar to our <a href="https://blog.deepgram.com/transcribe-youtube-videos-nodejs/">Transcribing YouTube Videos with Node.js</a> post, but entirely on the terminal.</p>
<p>You will need to download <a href="http://ytdl-org.github.io/youtube-dl/download.html"><code>youtube-dl</code></a>, <a href="http://ffmpeg.org/download.html"><code>ffmpeg</code></a>, and <a href="https://stedolan.github.io/jq/"><code>jq</code></a> for this tutorial to work. If you use macOS and have homebrew installed, this is <code>brew install youtube-dl</code>, <code>brew install ffmpeg</code>, and <code>brew install jq</code>. You will also need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>
<h2 id="download-audio-from-youtube-video-with-youtube_dl">Download Audio From YouTube Video with youtube_dl</h2>
<p>We’ll use the following YouTube ID: <code>9NZDwZbyDus</code>. Starting with Scott’s original snippet:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">youtube-dl 9NZDwZbyDus --extract-audio --audio-format wav -o 9NZDwZbyDus.wav</span></span></code></pre>
<p>Given that we use the same value twice, let’s abstract the video ID into a variable:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">VIDEO_ID=9NZDwZbyDus</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> youtube-dl $VIDEO_ID --extract-audio --audio-format wav -o $VIDEO_ID.wav</span></span></code></pre>
<h2 id="transcribe-with-deepgram">Transcribe With Deepgram</h2>
<p>Now that we have a local file and know its file format, we can use cURL to get a transcript from Deepgram:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl https://api.deepgram.com/v1/listen</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">punctuate=true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @\${VIDEO_ID}.wav</span></span></code></pre>
<p>Using <code>jq</code> to extract just the transcript text and saving that to a file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl https://api.deepgram.com/v1/listen</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">punctuate=true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @\${VIDEO_ID}.wav </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> jq </span><span style="color: #A5D6FF">&#39;.results.channels[0].alternatives[0].transcript&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.txt&quot;</span></span></code></pre>
<h2 id="delete-audio-file">Delete Audio File</h2>
<p>Finally, if you no longer require the audio file, delete it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">rm $VIDEO_ID.wav</span></span></code></pre>
<h2 id="bringing-it-all-together">Bringing It All Together</h2>
<p>When we first introduced a variable to this script, we separated the declaration and the cURL command with a semicolon. We can do exactly the same with all subsequent steps. The one-liner for this project is:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">VIDEO_ID=EmIhbFeJgiE</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> youtube-dl \${VIDEO_ID} --extract-audio --audio-format wav -o \${VIDEO_ID}.wav</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> curl https://api.deepgram.com/v1/listen</span><span style="color: #79C0FF">\\?</span><span style="color: #C9D1D9">punctuate</span><span style="color: #79C0FF">\\=</span><span style="color: #C9D1D9">true -H </span><span style="color: #A5D6FF">&quot;Authorization: Token YOUR_DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9"> -H </span><span style="color: #A5D6FF">&quot;Content-Type: audio/wav&quot;</span><span style="color: #C9D1D9"> --data-binary @\${VIDEO_ID}.wav </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> jq </span><span style="color: #A5D6FF">&#39;.results.channels[0].alternatives[0].transcript&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.txt&quot;</span><span style="color: #FF7B72">;</span><span style="color: #C9D1D9"> rm </span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">$VIDEO_ID</span><span style="color: #A5D6FF">.wav&quot;</span></span></code></pre>
<p>If you have any questions, please let us know - we love to help!</p>`;
});

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
