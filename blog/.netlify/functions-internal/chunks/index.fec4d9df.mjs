import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "preparing-dependencies", "text": "Preparing Dependencies" }, { "depth": 2, "slug": "creating-a-main-function", "text": "Creating a Main Function" }, { "depth": 2, "slug": "get-transcript-and-profanity", "text": "Get Transcript and Profanity" }, { "depth": 2, "slug": "determine-clean-audio-timings", "text": "Determine Clean Audio Timings" }, { "depth": 2, "slug": "ffmpeg-complex-filters", "text": "FFmpeg Complex Filters" }, { "depth": 2, "slug": "create-censored-file", "text": "Create Censored File" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nHere at Deepgram we run GRAM JAM - a series of internal hackathons to have Deepgrammers build cool projects using our own API. Sometimes the projects lead to product improvements, sometimes they get a laugh, and other times they are just super useful. This blog post is based on one of those projects - Bleepgram - built by the very interdisciplinary team of Faye Donnelley, Mike Stivaletti , Conner Goodrum, Claudia Ring, and Anthony Deschamps.\n\nSometimes we all let \"unprovoked or unintended utterances\" slip out of our mouth, and often it's the job of an editor to go through recordings and overlay a bleep so no one has to hear the original word. Historically this has been a manual process, but with Deepgram's Speech Recognition API we can work to censor them automatically.\n\nIf you want to look at the final project code you can find it at <a href=\"https://github.com/deepgram-devs/censor-audio\">https://github.com/deepgram-devs/censor-audio</a>.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   An audio file to censor - [here's one you can download](https://github.com/deepgram-devs/censor-audio-js/blob/main/input.m4a) and place in your new project directory.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n    npm install @deepgram/sdk ffmpeg-static profane-words\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these packages:\n\n```js\nconst fs = require('fs')\nconst { exec } = require('child_process')\nconst { Deepgram } = require('@deepgram/sdk')\nconst profanities = require('profane-words')\nconst ffmpegStatic = require('ffmpeg-static')\n```\n\n*   `fs` is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post.\n*   `exec` allows us to fire off terminal commands from our Node.js script.\n*   `profane-words` exports an array of, perhaps unsurprisingly, profane words.\n*   `ffmpeg-static` includes a version of FFmpeg in our node\\_modules directory, and requiring it returns the file path.\n\n[FFmpeg](https://ffmpeg.org) is a terminal-based toolkit for developers to work with audio and video files, which can include some quite complex manipulation. We'll be using `exec` to run it.\n\nInitialize the Deepgram client:\n\n```js\nconst deepgram = new Deepgram('YOUR DEEPGRAM KEY')\n```\n\n## Creating a Main Function\n\nSince Node.js 14.8 you can use `await` anywhere, even outside of an asynchronous function, if you are creating a module. For this blog post I'll assume that's not the case, so we'll create a `main()` function for our logic to sit in:\n\n```js\nasync function main() {\n  try {\n    // Logic goes here\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nmain()\n```\n\n## Get Transcript and Profanity\n\nInside of our `main()` function get a transcript using the Deepgram Node.js SDK, and then find the profanities:\n\n```js\nconst transcript = await deepgram.transcription.preRecorded({\n  buffer: fs.readFileSync('./input.m4a'),\n  mimetype: 'audio/m4a',\n})\nconst words = transcript.results.channels[0].alternatives[0].words\nconst bleeps = words.filter((word) => profanities.find((w) => word.word == w))\nconsole.log(bleeps)\n```\n\nBleeps will return words that appear in the `profane-words` list. Test this code by running `node index.js` in your terminal and you should see a result like this:\n\n![A terminal showing an array with four items. Each has a word, start, end, and confidence. Each of the words is clearly profanity but has been edited to obscure the actual words.](https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/profane-words.png)\n\nOnce you have done this, remove the `console.log()` statement.\n\n## Determine Clean Audio Timings\n\nNext, we want the inverse start and end times - where the audio is 'clean' and doesn't need bleeping. Add this to the `main()` function:\n\n```js\nconst noBleeps = [{ start: 0, end: bleeps[0].start }]\nfor (let i = 0; i < bleeps.length; i++) {\n  if (i < bleeps.length - 1) {\n    noBleeps.push({ start: bleeps[i].end, end: bleeps[i + 1].start })\n  } else {\n    noBleeps.push({ start: bleeps[i].end })\n  }\n}\n\nconsole.log(noBleeps)\n```\n\nRun this again with `node index.js` and you should have the following result:\n\n![A terminal showing an array of 5 objects, each with a start and end except the last which only has a start.](https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/no-bleeps.png)\n\n## FFmpeg Complex Filters\n\nFFmpeg allows complex manipulation of audio files, and works by chaining smaller manipulations known as filters. We pass in audio by a variable name, do something, and export a new variable which we can then further chain. This might feel complex, so let's talk through what we will do.\n\n1.  Take the original audio file and drop the volume to 0 during times where we have profanity.\n2.  Generate a constant beep with a sine wave.\n3.  Make the constant beep end when the final profanity finishes.\n4.  Drop the volume of the beep to 0 whenever there is not profanity.\n5.  Mix the bleep and the vocals to one final track which at any point in time will have a bleep or vocals - never both.\n\nIn our `main()` function let's do this with code. Starting with dropping the volume wherever we have profanity:\n\n```js\nconst dippedVocals = `[0]volume=0:enable='${bleeps\n  .map((b) => `between(t,${b.start},${b.end})`)\n  .join('+')}'[dippedVocals]`\n```\n\n`dippedVocals` will now look something like:\n\n    [0]volume=0:enable='between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)'[dippedVocals]\n\nThis takes the provided file (which here is `[0]`), makes the volume 0 between the provided times, and makes this altered version available to future parts of this filter as `[dippedVocals]`\n\nDelete `dippedVocals` and create `filter` which contains all parts of our complex filter with the value of `dippedVocals` as the first item, and then creates a valid string for FFmpeg:\n\n```js\nconst filter = [\n  `[0]volume=0:enable='${bleeps\n    .map((b) => `between(t,${b.start},${b.end})`)\n    .join('+')}'[dippedVocals]`,\n  'sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep]',\n  `[constantBleep]atrim=start=0:end=${\n    noBleeps[noBleeps.length - 1].start\n  }[shortenedBleep]`,\n  `[shortenedBleep]volume=0:enable='${noBleeps\n    .slice(0, -1)\n    .map((b) => `between(t,${b.start},${b.end})`)\n    .join('+')}'[dippedBleep]`,\n  '[dippedVocals][dippedBleep]amix=inputs=2',\n].join(';')\n```\n\nThat's all five steps above built into one complex filter. The final filter looks like this:\n\n    [0]volume=0:enable='between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)'[dippedVocals];sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep];[constantBleep]atrim=start=0:end=6.7704773[shortenedBleep];[shortenedBleep]volume=0:enable='between(t,0,1.5777808)+between(t,1.977219,4.7732863)+between(t,5.2732863,5.3724437)+between(t,5.8724437,6.371039)'[dippedBleep];[dippedVocals][dippedBleep]amix=inputs=2\n\nYeah. We did it in an array for a reason.\n\n## Create Censored File\n\nThe very final step is to actually run FFmpeg via `exec` with the above filter. Add this line to the bottom of your `main()` function:\n\n```js\nexec(`${ffmpegStatic} -y -i input.m4a -filter_complex \"${filter}\" output.wav`)\n```\n\nAnd run your script with `node index.js`. Once completed, your `output.wav` file should be your original file with automatic transcription.\n\n## Wrapping Up\n\nA transcript is not always the final step in a project - you can use the structured data returned by Deepgram to do further processing or analysis, as demonstrated by this post. I hope you found it interesting.\n\nThe complete project is available at <a href=\"https://github.com/deepgram-devs/censor-audio\">https://github.com/deepgram-devs/censor-audio</a> and if you have any questions please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>Here at Deepgram we run GRAM JAM - a series of internal hackathons to have Deepgrammers build cool projects using our own API. Sometimes the projects lead to product improvements, sometimes they get a laugh, and other times they are just super useful. This blog post is based on one of those projects - Bleepgram - built by the very interdisciplinary team of Faye Donnelley, Mike Stivaletti , Conner Goodrum, Claudia Ring, and Anthony Deschamps.</p>\n<p>Sometimes we all let \u201Cunprovoked or unintended utterances\u201D slip out of our mouth, and often it\u2019s the job of an editor to go through recordings and overlay a bleep so no one has to hear the original word. Historically this has been a manual process, but with Deepgram\u2019s Speech Recognition API we can work to censor them automatically.</p>\n<p>If you want to look at the final project code you can find it at <a href="https://github.com/deepgram-devs/censor-audio">https://github.com/deepgram-devs/censor-audio</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>An audio file to censor - <a href="https://github.com/deepgram-devs/censor-audio-js/blob/main/input.m4a">here\u2019s one you can download</a> and place in your new project directory.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<p>npm install @deepgram/sdk ffmpeg-static profane-words</p>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">exec</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;child_process&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">profanities</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;profane-words&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpegStatic</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<ul>\n<li><code is:raw>fs</code> is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post.</li>\n<li><code is:raw>exec</code> allows us to fire off terminal commands from our Node.js script.</li>\n<li><code is:raw>profane-words</code> exports an array of, perhaps unsurprisingly, profane words.</li>\n<li><code is:raw>ffmpeg-static</code> includes a version of FFmpeg in our node_modules directory, and requiring it returns the file path.</li>\n</ul>\n<p><a href="https://ffmpeg.org">FFmpeg</a> is a terminal-based toolkit for developers to work with audio and video files, which can include some quite complex manipulation. We\u2019ll be using <code is:raw>exec</code> to run it.</p>\n<p>Initialize the Deepgram client:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="creating-a-main-function">Creating a Main Function</h2>\n<p>Since Node.js 14.8 you can use <code is:raw>await</code> anywhere, even outside of an asynchronous function, if you are creating a module. For this blog post I\u2019ll assume that\u2019s not the case, so we\u2019ll create a <code is:raw>main()</code> function for our logic to sit in:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Logic goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">error</span><span style="color: #C9D1D9">(error)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<h2 id="get-transcript-and-profanity">Get Transcript and Profanity</h2>\n<p>Inside of our <code is:raw>main()</code> function get a transcript using the Deepgram Node.js SDK, and then find the profanities:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./input.m4a&#39;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">  mimetype: </span><span style="color: #A5D6FF">&#39;audio/m4a&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">words</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].words</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bleeps</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> words.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">word</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> profanities.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">w</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> word.word </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> w))</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(bleeps)</span></span></code></pre>\n<p>Bleeps will return words that appear in the <code is:raw>profane-words</code> list. Test this code by running <code is:raw>node index.js</code> in your terminal and you should see a result like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/profane-words.png" alt="A terminal showing an array with four items. Each has a word, start, end, and confidence. Each of the words is clearly profanity but has been edited to obscure the actual words."></p>\n<p>Once you have done this, remove the <code is:raw>console.log()</code> statement.</p>\n<h2 id="determine-clean-audio-timings">Determine Clean Audio Timings</h2>\n<p>Next, we want the inverse start and end times - where the audio is \u2018clean\u2019 and doesn\u2019t need bleeping. Add this to the <code is:raw>main()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">noBleeps</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [{ start: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, end: bleeps[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start }]</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> bleeps.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> bleeps.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    noBleeps.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ start: bleeps[i].end, end: bleeps[i </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].start })</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    noBleeps.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ start: bleeps[i].end })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(noBleeps)</span></span></code></pre>\n<p>Run this again with <code is:raw>node index.js</code> and you should have the following result:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/no-bleeps.png" alt="A terminal showing an array of 5 objects, each with a start and end except the last which only has a start."></p>\n<h2 id="ffmpeg-complex-filters">FFmpeg Complex Filters</h2>\n<p>FFmpeg allows complex manipulation of audio files, and works by chaining smaller manipulations known as filters. We pass in audio by a variable name, do something, and export a new variable which we can then further chain. This might feel complex, so let\u2019s talk through what we will do.</p>\n<ol>\n<li>Take the original audio file and drop the volume to 0 during times where we have profanity.</li>\n<li>Generate a constant beep with a sine wave.</li>\n<li>Make the constant beep end when the final profanity finishes.</li>\n<li>Drop the volume of the beep to 0 whenever there is not profanity.</li>\n<li>Mix the bleep and the vocals to one final track which at any point in time will have a bleep or vocals - never both.</li>\n</ol>\n<p>In our <code is:raw>main()</code> function let\u2019s do this with code. Starting with dropping the volume wherever we have profanity:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dippedVocals</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`[0]volume=0:enable=&#39;${</span><span style="color: #C9D1D9">bleeps</span></span>\n<span class="line"><span style="color: #A5D6FF">  .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">`between(t,${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})`</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">  .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedVocals]`</span></span></code></pre>\n<p><code is:raw>dippedVocals</code> will now look something like:</p>\n<p>[0]volume=0:enable=\u2018between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)\u2018[dippedVocals]</p>\n<p>This takes the provided file (which here is <code is:raw>[0]</code>), makes the volume 0 between the provided times, and makes this altered version available to future parts of this filter as <code is:raw>[dippedVocals]</code></p>\n<p>Delete <code is:raw>dippedVocals</code> and create <code is:raw>filter</code> which contains all parts of our complex filter with the value of <code is:raw>dippedVocals</code> as the first item, and then creates a valid string for FFmpeg:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">filter</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`[0]volume=0:enable=&#39;${</span><span style="color: #C9D1D9">bleeps</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">`between(t,${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})`</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedVocals]`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep]&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`[constantBleep]atrim=start=0:end=${</span></span>\n<span class="line"><span style="color: #A5D6FF">    </span><span style="color: #C9D1D9">noBleeps</span><span style="color: #A5D6FF">[</span><span style="color: #C9D1D9">noBleeps</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">length</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">-</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">].</span><span style="color: #C9D1D9">start</span></span>\n<span class="line"><span style="color: #A5D6FF">  </span><span style="color: #A5D6FF">}[shortenedBleep]`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`[shortenedBleep]volume=0:enable=&#39;${</span><span style="color: #C9D1D9">noBleeps</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">slice</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">0</span><span style="color: #A5D6FF">, </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">`between(t,${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})`</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedBleep]`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;[dippedVocals][dippedBleep]amix=inputs=2&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;;&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>That\u2019s all five steps above built into one complex filter. The final filter looks like this:</p>\n<p>[0]volume=0:enable=\u2018between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)\u2018[dippedVocals];sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep];[constantBleep]atrim=start=0:end=6.7704773[shortenedBleep];[shortenedBleep]volume=0:enable=\u2018between(t,0,1.5777808)+between(t,1.977219,4.7732863)+between(t,5.2732863,5.3724437)+between(t,5.8724437,6.371039)\u2018[dippedBleep];[dippedVocals][dippedBleep]amix=inputs=2</p>\n<p>Yeah. We did it in an array for a reason.</p>\n<h2 id="create-censored-file">Create Censored File</h2>\n<p>The very final step is to actually run FFmpeg via <code is:raw>exec</code> with the above filter. Add this line to the bottom of your <code is:raw>main()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">exec</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">ffmpegStatic</span><span style="color: #A5D6FF">} -y -i input.m4a -filter_complex &quot;${</span><span style="color: #C9D1D9">filter</span><span style="color: #A5D6FF">}&quot; output.wav`</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>And run your script with <code is:raw>node index.js</code>. Once completed, your <code is:raw>output.wav</code> file should be your original file with automatic transcription.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>A transcript is not always the final step in a project - you can use the structured data returned by Deepgram to do further processing or analysis, as demonstrated by this post. I hope you found it interesting.</p>\n<p>The complete project is available at <a href="https://github.com/deepgram-devs/censor-audio">https://github.com/deepgram-devs/censor-audio</a> and if you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Automatically Censor Profanity with Node.js", "description": "Learn how to create censored audio files automatically.", "date": "2021-11-04T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1635438532/blog/2021/11/censor-profanity-nodejs/automatically-censor-profanity-with-nodejs-blog%402x.png", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["nodejs"], "seo": { "title": "Automatically Censor Profanity with Node.js", "description": "Learn how to create censored audio files automatically." }, "shorturls": { "share": "https://dpgr.am/562fccf", "twitter": "https://dpgr.am/f751da2", "linkedin": "https://dpgr.am/b3df202", "reddit": "https://dpgr.am/afc2f1d", "facebook": "https://dpgr.am/d4e7bb9" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453797/blog/censor-profanity-nodejs/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "preparing-dependencies", "text": "Preparing Dependencies" }, { "depth": 2, "slug": "creating-a-main-function", "text": "Creating a Main Function" }, { "depth": 2, "slug": "get-transcript-and-profanity", "text": "Get Transcript and Profanity" }, { "depth": 2, "slug": "determine-clean-audio-timings", "text": "Determine Clean Audio Timings" }, { "depth": 2, "slug": "ffmpeg-complex-filters", "text": "FFmpeg Complex Filters" }, { "depth": 2, "slug": "create-censored-file", "text": "Create Censored File" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nHere at Deepgram we run GRAM JAM - a series of internal hackathons to have Deepgrammers build cool projects using our own API. Sometimes the projects lead to product improvements, sometimes they get a laugh, and other times they are just super useful. This blog post is based on one of those projects - Bleepgram - built by the very interdisciplinary team of Faye Donnelley, Mike Stivaletti , Conner Goodrum, Claudia Ring, and Anthony Deschamps.\n\nSometimes we all let \"unprovoked or unintended utterances\" slip out of our mouth, and often it's the job of an editor to go through recordings and overlay a bleep so no one has to hear the original word. Historically this has been a manual process, but with Deepgram's Speech Recognition API we can work to censor them automatically.\n\nIf you want to look at the final project code you can find it at <a href=\"https://github.com/deepgram-devs/censor-audio\">https://github.com/deepgram-devs/censor-audio</a>.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   An audio file to censor - [here's one you can download](https://github.com/deepgram-devs/censor-audio-js/blob/main/input.m4a) and place in your new project directory.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n    npm install @deepgram/sdk ffmpeg-static profane-words\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these packages:\n\n```js\nconst fs = require('fs')\nconst { exec } = require('child_process')\nconst { Deepgram } = require('@deepgram/sdk')\nconst profanities = require('profane-words')\nconst ffmpegStatic = require('ffmpeg-static')\n```\n\n*   `fs` is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post.\n*   `exec` allows us to fire off terminal commands from our Node.js script.\n*   `profane-words` exports an array of, perhaps unsurprisingly, profane words.\n*   `ffmpeg-static` includes a version of FFmpeg in our node\\_modules directory, and requiring it returns the file path.\n\n[FFmpeg](https://ffmpeg.org) is a terminal-based toolkit for developers to work with audio and video files, which can include some quite complex manipulation. We'll be using `exec` to run it.\n\nInitialize the Deepgram client:\n\n```js\nconst deepgram = new Deepgram('YOUR DEEPGRAM KEY')\n```\n\n## Creating a Main Function\n\nSince Node.js 14.8 you can use `await` anywhere, even outside of an asynchronous function, if you are creating a module. For this blog post I'll assume that's not the case, so we'll create a `main()` function for our logic to sit in:\n\n```js\nasync function main() {\n  try {\n    // Logic goes here\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nmain()\n```\n\n## Get Transcript and Profanity\n\nInside of our `main()` function get a transcript using the Deepgram Node.js SDK, and then find the profanities:\n\n```js\nconst transcript = await deepgram.transcription.preRecorded({\n  buffer: fs.readFileSync('./input.m4a'),\n  mimetype: 'audio/m4a',\n})\nconst words = transcript.results.channels[0].alternatives[0].words\nconst bleeps = words.filter((word) => profanities.find((w) => word.word == w))\nconsole.log(bleeps)\n```\n\nBleeps will return words that appear in the `profane-words` list. Test this code by running `node index.js` in your terminal and you should see a result like this:\n\n![A terminal showing an array with four items. Each has a word, start, end, and confidence. Each of the words is clearly profanity but has been edited to obscure the actual words.](https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/profane-words.png)\n\nOnce you have done this, remove the `console.log()` statement.\n\n## Determine Clean Audio Timings\n\nNext, we want the inverse start and end times - where the audio is 'clean' and doesn't need bleeping. Add this to the `main()` function:\n\n```js\nconst noBleeps = [{ start: 0, end: bleeps[0].start }]\nfor (let i = 0; i < bleeps.length; i++) {\n  if (i < bleeps.length - 1) {\n    noBleeps.push({ start: bleeps[i].end, end: bleeps[i + 1].start })\n  } else {\n    noBleeps.push({ start: bleeps[i].end })\n  }\n}\n\nconsole.log(noBleeps)\n```\n\nRun this again with `node index.js` and you should have the following result:\n\n![A terminal showing an array of 5 objects, each with a start and end except the last which only has a start.](https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/no-bleeps.png)\n\n## FFmpeg Complex Filters\n\nFFmpeg allows complex manipulation of audio files, and works by chaining smaller manipulations known as filters. We pass in audio by a variable name, do something, and export a new variable which we can then further chain. This might feel complex, so let's talk through what we will do.\n\n1.  Take the original audio file and drop the volume to 0 during times where we have profanity.\n2.  Generate a constant beep with a sine wave.\n3.  Make the constant beep end when the final profanity finishes.\n4.  Drop the volume of the beep to 0 whenever there is not profanity.\n5.  Mix the bleep and the vocals to one final track which at any point in time will have a bleep or vocals - never both.\n\nIn our `main()` function let's do this with code. Starting with dropping the volume wherever we have profanity:\n\n```js\nconst dippedVocals = `[0]volume=0:enable='${bleeps\n  .map((b) => `between(t,${b.start},${b.end})`)\n  .join('+')}'[dippedVocals]`\n```\n\n`dippedVocals` will now look something like:\n\n    [0]volume=0:enable='between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)'[dippedVocals]\n\nThis takes the provided file (which here is `[0]`), makes the volume 0 between the provided times, and makes this altered version available to future parts of this filter as `[dippedVocals]`\n\nDelete `dippedVocals` and create `filter` which contains all parts of our complex filter with the value of `dippedVocals` as the first item, and then creates a valid string for FFmpeg:\n\n```js\nconst filter = [\n  `[0]volume=0:enable='${bleeps\n    .map((b) => `between(t,${b.start},${b.end})`)\n    .join('+')}'[dippedVocals]`,\n  'sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep]',\n  `[constantBleep]atrim=start=0:end=${\n    noBleeps[noBleeps.length - 1].start\n  }[shortenedBleep]`,\n  `[shortenedBleep]volume=0:enable='${noBleeps\n    .slice(0, -1)\n    .map((b) => `between(t,${b.start},${b.end})`)\n    .join('+')}'[dippedBleep]`,\n  '[dippedVocals][dippedBleep]amix=inputs=2',\n].join(';')\n```\n\nThat's all five steps above built into one complex filter. The final filter looks like this:\n\n    [0]volume=0:enable='between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)'[dippedVocals];sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep];[constantBleep]atrim=start=0:end=6.7704773[shortenedBleep];[shortenedBleep]volume=0:enable='between(t,0,1.5777808)+between(t,1.977219,4.7732863)+between(t,5.2732863,5.3724437)+between(t,5.8724437,6.371039)'[dippedBleep];[dippedVocals][dippedBleep]amix=inputs=2\n\nYeah. We did it in an array for a reason.\n\n## Create Censored File\n\nThe very final step is to actually run FFmpeg via `exec` with the above filter. Add this line to the bottom of your `main()` function:\n\n```js\nexec(`${ffmpegStatic} -y -i input.m4a -filter_complex \"${filter}\" output.wav`)\n```\n\nAnd run your script with `node index.js`. Once completed, your `output.wav` file should be your original file with automatic transcription.\n\n## Wrapping Up\n\nA transcript is not always the final step in a project - you can use the structured data returned by Deepgram to do further processing or analysis, as demonstrated by this post. I hope you found it interesting.\n\nThe complete project is available at <a href=\"https://github.com/deepgram-devs/censor-audio\">https://github.com/deepgram-devs/censor-audio</a> and if you have any questions please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>Here at Deepgram we run GRAM JAM - a series of internal hackathons to have Deepgrammers build cool projects using our own API. Sometimes the projects lead to product improvements, sometimes they get a laugh, and other times they are just super useful. This blog post is based on one of those projects - Bleepgram - built by the very interdisciplinary team of Faye Donnelley, Mike Stivaletti , Conner Goodrum, Claudia Ring, and Anthony Deschamps.</p>\n<p>Sometimes we all let \u201Cunprovoked or unintended utterances\u201D slip out of our mouth, and often it\u2019s the job of an editor to go through recordings and overlay a bleep so no one has to hear the original word. Historically this has been a manual process, but with Deepgram\u2019s Speech Recognition API we can work to censor them automatically.</p>\n<p>If you want to look at the final project code you can find it at <a href="https://github.com/deepgram-devs/censor-audio">https://github.com/deepgram-devs/censor-audio</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>An audio file to censor - <a href="https://github.com/deepgram-devs/censor-audio-js/blob/main/input.m4a">here\u2019s one you can download</a> and place in your new project directory.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<p>npm install @deepgram/sdk ffmpeg-static profane-words</p>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">exec</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;child_process&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">profanities</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;profane-words&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpegStatic</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<ul>\n<li><code is:raw>fs</code> is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post.</li>\n<li><code is:raw>exec</code> allows us to fire off terminal commands from our Node.js script.</li>\n<li><code is:raw>profane-words</code> exports an array of, perhaps unsurprisingly, profane words.</li>\n<li><code is:raw>ffmpeg-static</code> includes a version of FFmpeg in our node_modules directory, and requiring it returns the file path.</li>\n</ul>\n<p><a href="https://ffmpeg.org">FFmpeg</a> is a terminal-based toolkit for developers to work with audio and video files, which can include some quite complex manipulation. We\u2019ll be using <code is:raw>exec</code> to run it.</p>\n<p>Initialize the Deepgram client:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="creating-a-main-function">Creating a Main Function</h2>\n<p>Since Node.js 14.8 you can use <code is:raw>await</code> anywhere, even outside of an asynchronous function, if you are creating a module. For this blog post I\u2019ll assume that\u2019s not the case, so we\u2019ll create a <code is:raw>main()</code> function for our logic to sit in:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Logic goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">error</span><span style="color: #C9D1D9">(error)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<h2 id="get-transcript-and-profanity">Get Transcript and Profanity</h2>\n<p>Inside of our <code is:raw>main()</code> function get a transcript using the Deepgram Node.js SDK, and then find the profanities:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./input.m4a&#39;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">  mimetype: </span><span style="color: #A5D6FF">&#39;audio/m4a&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">words</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].words</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bleeps</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> words.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">word</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> profanities.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">w</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> word.word </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> w))</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(bleeps)</span></span></code></pre>\n<p>Bleeps will return words that appear in the <code is:raw>profane-words</code> list. Test this code by running <code is:raw>node index.js</code> in your terminal and you should see a result like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/profane-words.png" alt="A terminal showing an array with four items. Each has a word, start, end, and confidence. Each of the words is clearly profanity but has been edited to obscure the actual words."></p>\n<p>Once you have done this, remove the <code is:raw>console.log()</code> statement.</p>\n<h2 id="determine-clean-audio-timings">Determine Clean Audio Timings</h2>\n<p>Next, we want the inverse start and end times - where the audio is \u2018clean\u2019 and doesn\u2019t need bleeping. Add this to the <code is:raw>main()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">noBleeps</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [{ start: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, end: bleeps[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start }]</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> bleeps.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> bleeps.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    noBleeps.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ start: bleeps[i].end, end: bleeps[i </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].start })</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    noBleeps.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ start: bleeps[i].end })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(noBleeps)</span></span></code></pre>\n<p>Run this again with <code is:raw>node index.js</code> and you should have the following result:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/no-bleeps.png" alt="A terminal showing an array of 5 objects, each with a start and end except the last which only has a start."></p>\n<h2 id="ffmpeg-complex-filters">FFmpeg Complex Filters</h2>\n<p>FFmpeg allows complex manipulation of audio files, and works by chaining smaller manipulations known as filters. We pass in audio by a variable name, do something, and export a new variable which we can then further chain. This might feel complex, so let\u2019s talk through what we will do.</p>\n<ol>\n<li>Take the original audio file and drop the volume to 0 during times where we have profanity.</li>\n<li>Generate a constant beep with a sine wave.</li>\n<li>Make the constant beep end when the final profanity finishes.</li>\n<li>Drop the volume of the beep to 0 whenever there is not profanity.</li>\n<li>Mix the bleep and the vocals to one final track which at any point in time will have a bleep or vocals - never both.</li>\n</ol>\n<p>In our <code is:raw>main()</code> function let\u2019s do this with code. Starting with dropping the volume wherever we have profanity:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dippedVocals</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`[0]volume=0:enable=&#39;${</span><span style="color: #C9D1D9">bleeps</span></span>\n<span class="line"><span style="color: #A5D6FF">  .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">`between(t,${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})`</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">  .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedVocals]`</span></span></code></pre>\n<p><code is:raw>dippedVocals</code> will now look something like:</p>\n<p>[0]volume=0:enable=\u2018between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)\u2018[dippedVocals]</p>\n<p>This takes the provided file (which here is <code is:raw>[0]</code>), makes the volume 0 between the provided times, and makes this altered version available to future parts of this filter as <code is:raw>[dippedVocals]</code></p>\n<p>Delete <code is:raw>dippedVocals</code> and create <code is:raw>filter</code> which contains all parts of our complex filter with the value of <code is:raw>dippedVocals</code> as the first item, and then creates a valid string for FFmpeg:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">filter</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`[0]volume=0:enable=&#39;${</span><span style="color: #C9D1D9">bleeps</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">`between(t,${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})`</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedVocals]`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep]&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`[constantBleep]atrim=start=0:end=${</span></span>\n<span class="line"><span style="color: #A5D6FF">    </span><span style="color: #C9D1D9">noBleeps</span><span style="color: #A5D6FF">[</span><span style="color: #C9D1D9">noBleeps</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">length</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">-</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">].</span><span style="color: #C9D1D9">start</span></span>\n<span class="line"><span style="color: #A5D6FF">  </span><span style="color: #A5D6FF">}[shortenedBleep]`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`[shortenedBleep]volume=0:enable=&#39;${</span><span style="color: #C9D1D9">noBleeps</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">slice</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">0</span><span style="color: #A5D6FF">, </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">`between(t,${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})`</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedBleep]`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;[dippedVocals][dippedBleep]amix=inputs=2&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;;&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>That\u2019s all five steps above built into one complex filter. The final filter looks like this:</p>\n<p>[0]volume=0:enable=\u2018between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)\u2018[dippedVocals];sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep];[constantBleep]atrim=start=0:end=6.7704773[shortenedBleep];[shortenedBleep]volume=0:enable=\u2018between(t,0,1.5777808)+between(t,1.977219,4.7732863)+between(t,5.2732863,5.3724437)+between(t,5.8724437,6.371039)\u2018[dippedBleep];[dippedVocals][dippedBleep]amix=inputs=2</p>\n<p>Yeah. We did it in an array for a reason.</p>\n<h2 id="create-censored-file">Create Censored File</h2>\n<p>The very final step is to actually run FFmpeg via <code is:raw>exec</code> with the above filter. Add this line to the bottom of your <code is:raw>main()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">exec</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">ffmpegStatic</span><span style="color: #A5D6FF">} -y -i input.m4a -filter_complex &quot;${</span><span style="color: #C9D1D9">filter</span><span style="color: #A5D6FF">}&quot; output.wav`</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>And run your script with <code is:raw>node index.js</code>. Once completed, your <code is:raw>output.wav</code> file should be your original file with automatic transcription.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>A transcript is not always the final step in a project - you can use the structured data returned by Deepgram to do further processing or analysis, as demonstrated by this post. I hope you found it interesting.</p>\n<p>The complete project is available at <a href="https://github.com/deepgram-devs/censor-audio">https://github.com/deepgram-devs/censor-audio</a> and if you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/censor-profanity-nodejs/index.md" };
function rawContent() {
  return "\nHere at Deepgram we run GRAM JAM - a series of internal hackathons to have Deepgrammers build cool projects using our own API. Sometimes the projects lead to product improvements, sometimes they get a laugh, and other times they are just super useful. This blog post is based on one of those projects - Bleepgram - built by the very interdisciplinary team of Faye Donnelley, Mike Stivaletti , Conner Goodrum, Claudia Ring, and Anthony Deschamps.\n\nSometimes we all let \"unprovoked or unintended utterances\" slip out of our mouth, and often it's the job of an editor to go through recordings and overlay a bleep so no one has to hear the original word. Historically this has been a manual process, but with Deepgram's Speech Recognition API we can work to censor them automatically.\n\nIf you want to look at the final project code you can find it at <a href=\"https://github.com/deepgram-devs/censor-audio\">https://github.com/deepgram-devs/censor-audio</a>.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   An audio file to censor - [here's one you can download](https://github.com/deepgram-devs/censor-audio-js/blob/main/input.m4a) and place in your new project directory.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n    npm install @deepgram/sdk ffmpeg-static profane-words\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these packages:\n\n```js\nconst fs = require('fs')\nconst { exec } = require('child_process')\nconst { Deepgram } = require('@deepgram/sdk')\nconst profanities = require('profane-words')\nconst ffmpegStatic = require('ffmpeg-static')\n```\n\n*   `fs` is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post.\n*   `exec` allows us to fire off terminal commands from our Node.js script.\n*   `profane-words` exports an array of, perhaps unsurprisingly, profane words.\n*   `ffmpeg-static` includes a version of FFmpeg in our node\\_modules directory, and requiring it returns the file path.\n\n[FFmpeg](https://ffmpeg.org) is a terminal-based toolkit for developers to work with audio and video files, which can include some quite complex manipulation. We'll be using `exec` to run it.\n\nInitialize the Deepgram client:\n\n```js\nconst deepgram = new Deepgram('YOUR DEEPGRAM KEY')\n```\n\n## Creating a Main Function\n\nSince Node.js 14.8 you can use `await` anywhere, even outside of an asynchronous function, if you are creating a module. For this blog post I'll assume that's not the case, so we'll create a `main()` function for our logic to sit in:\n\n```js\nasync function main() {\n  try {\n    // Logic goes here\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nmain()\n```\n\n## Get Transcript and Profanity\n\nInside of our `main()` function get a transcript using the Deepgram Node.js SDK, and then find the profanities:\n\n```js\nconst transcript = await deepgram.transcription.preRecorded({\n  buffer: fs.readFileSync('./input.m4a'),\n  mimetype: 'audio/m4a',\n})\nconst words = transcript.results.channels[0].alternatives[0].words\nconst bleeps = words.filter((word) => profanities.find((w) => word.word == w))\nconsole.log(bleeps)\n```\n\nBleeps will return words that appear in the `profane-words` list. Test this code by running `node index.js` in your terminal and you should see a result like this:\n\n![A terminal showing an array with four items. Each has a word, start, end, and confidence. Each of the words is clearly profanity but has been edited to obscure the actual words.](https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/profane-words.png)\n\nOnce you have done this, remove the `console.log()` statement.\n\n## Determine Clean Audio Timings\n\nNext, we want the inverse start and end times - where the audio is 'clean' and doesn't need bleeping. Add this to the `main()` function:\n\n```js\nconst noBleeps = [{ start: 0, end: bleeps[0].start }]\nfor (let i = 0; i < bleeps.length; i++) {\n  if (i < bleeps.length - 1) {\n    noBleeps.push({ start: bleeps[i].end, end: bleeps[i + 1].start })\n  } else {\n    noBleeps.push({ start: bleeps[i].end })\n  }\n}\n\nconsole.log(noBleeps)\n```\n\nRun this again with `node index.js` and you should have the following result:\n\n![A terminal showing an array of 5 objects, each with a start and end except the last which only has a start.](https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/no-bleeps.png)\n\n## FFmpeg Complex Filters\n\nFFmpeg allows complex manipulation of audio files, and works by chaining smaller manipulations known as filters. We pass in audio by a variable name, do something, and export a new variable which we can then further chain. This might feel complex, so let's talk through what we will do.\n\n1.  Take the original audio file and drop the volume to 0 during times where we have profanity.\n2.  Generate a constant beep with a sine wave.\n3.  Make the constant beep end when the final profanity finishes.\n4.  Drop the volume of the beep to 0 whenever there is not profanity.\n5.  Mix the bleep and the vocals to one final track which at any point in time will have a bleep or vocals - never both.\n\nIn our `main()` function let's do this with code. Starting with dropping the volume wherever we have profanity:\n\n```js\nconst dippedVocals = `[0]volume=0:enable='${bleeps\n  .map((b) => `between(t,${b.start},${b.end})`)\n  .join('+')}'[dippedVocals]`\n```\n\n`dippedVocals` will now look something like:\n\n    [0]volume=0:enable='between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)'[dippedVocals]\n\nThis takes the provided file (which here is `[0]`), makes the volume 0 between the provided times, and makes this altered version available to future parts of this filter as `[dippedVocals]`\n\nDelete `dippedVocals` and create `filter` which contains all parts of our complex filter with the value of `dippedVocals` as the first item, and then creates a valid string for FFmpeg:\n\n```js\nconst filter = [\n  `[0]volume=0:enable='${bleeps\n    .map((b) => `between(t,${b.start},${b.end})`)\n    .join('+')}'[dippedVocals]`,\n  'sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep]',\n  `[constantBleep]atrim=start=0:end=${\n    noBleeps[noBleeps.length - 1].start\n  }[shortenedBleep]`,\n  `[shortenedBleep]volume=0:enable='${noBleeps\n    .slice(0, -1)\n    .map((b) => `between(t,${b.start},${b.end})`)\n    .join('+')}'[dippedBleep]`,\n  '[dippedVocals][dippedBleep]amix=inputs=2',\n].join(';')\n```\n\nThat's all five steps above built into one complex filter. The final filter looks like this:\n\n    [0]volume=0:enable='between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)'[dippedVocals];sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep];[constantBleep]atrim=start=0:end=6.7704773[shortenedBleep];[shortenedBleep]volume=0:enable='between(t,0,1.5777808)+between(t,1.977219,4.7732863)+between(t,5.2732863,5.3724437)+between(t,5.8724437,6.371039)'[dippedBleep];[dippedVocals][dippedBleep]amix=inputs=2\n\nYeah. We did it in an array for a reason.\n\n## Create Censored File\n\nThe very final step is to actually run FFmpeg via `exec` with the above filter. Add this line to the bottom of your `main()` function:\n\n```js\nexec(`${ffmpegStatic} -y -i input.m4a -filter_complex \"${filter}\" output.wav`)\n```\n\nAnd run your script with `node index.js`. Once completed, your `output.wav` file should be your original file with automatic transcription.\n\n## Wrapping Up\n\nA transcript is not always the final step in a project - you can use the structured data returned by Deepgram to do further processing or analysis, as demonstrated by this post. I hope you found it interesting.\n\nThe complete project is available at <a href=\"https://github.com/deepgram-devs/censor-audio\">https://github.com/deepgram-devs/censor-audio</a> and if you have any questions please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ";
}
function compiledContent() {
  return '<p>Here at Deepgram we run GRAM JAM - a series of internal hackathons to have Deepgrammers build cool projects using our own API. Sometimes the projects lead to product improvements, sometimes they get a laugh, and other times they are just super useful. This blog post is based on one of those projects - Bleepgram - built by the very interdisciplinary team of Faye Donnelley, Mike Stivaletti , Conner Goodrum, Claudia Ring, and Anthony Deschamps.</p>\n<p>Sometimes we all let \u201Cunprovoked or unintended utterances\u201D slip out of our mouth, and often it\u2019s the job of an editor to go through recordings and overlay a bleep so no one has to hear the original word. Historically this has been a manual process, but with Deepgram\u2019s Speech Recognition API we can work to censor them automatically.</p>\n<p>If you want to look at the final project code you can find it at <a href="https://github.com/deepgram-devs/censor-audio">https://github.com/deepgram-devs/censor-audio</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>An audio file to censor - <a href="https://github.com/deepgram-devs/censor-audio-js/blob/main/input.m4a">here\u2019s one you can download</a> and place in your new project directory.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<p>npm install @deepgram/sdk ffmpeg-static profane-words</p>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">exec</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;child_process&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">profanities</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;profane-words&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpegStatic</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<ul>\n<li><code is:raw>fs</code> is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post.</li>\n<li><code is:raw>exec</code> allows us to fire off terminal commands from our Node.js script.</li>\n<li><code is:raw>profane-words</code> exports an array of, perhaps unsurprisingly, profane words.</li>\n<li><code is:raw>ffmpeg-static</code> includes a version of FFmpeg in our node_modules directory, and requiring it returns the file path.</li>\n</ul>\n<p><a href="https://ffmpeg.org">FFmpeg</a> is a terminal-based toolkit for developers to work with audio and video files, which can include some quite complex manipulation. We\u2019ll be using <code is:raw>exec</code> to run it.</p>\n<p>Initialize the Deepgram client:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="creating-a-main-function">Creating a Main Function</h2>\n<p>Since Node.js 14.8 you can use <code is:raw>await</code> anywhere, even outside of an asynchronous function, if you are creating a module. For this blog post I\u2019ll assume that\u2019s not the case, so we\u2019ll create a <code is:raw>main()</code> function for our logic to sit in:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Logic goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">error</span><span style="color: #C9D1D9">(error)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<h2 id="get-transcript-and-profanity">Get Transcript and Profanity</h2>\n<p>Inside of our <code is:raw>main()</code> function get a transcript using the Deepgram Node.js SDK, and then find the profanities:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./input.m4a&#39;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">  mimetype: </span><span style="color: #A5D6FF">&#39;audio/m4a&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">words</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].words</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bleeps</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> words.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">word</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> profanities.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">w</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> word.word </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> w))</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(bleeps)</span></span></code></pre>\n<p>Bleeps will return words that appear in the <code is:raw>profane-words</code> list. Test this code by running <code is:raw>node index.js</code> in your terminal and you should see a result like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/profane-words.png" alt="A terminal showing an array with four items. Each has a word, start, end, and confidence. Each of the words is clearly profanity but has been edited to obscure the actual words."></p>\n<p>Once you have done this, remove the <code is:raw>console.log()</code> statement.</p>\n<h2 id="determine-clean-audio-timings">Determine Clean Audio Timings</h2>\n<p>Next, we want the inverse start and end times - where the audio is \u2018clean\u2019 and doesn\u2019t need bleeping. Add this to the <code is:raw>main()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">noBleeps</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [{ start: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, end: bleeps[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start }]</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> bleeps.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> bleeps.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    noBleeps.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ start: bleeps[i].end, end: bleeps[i </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].start })</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    noBleeps.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ start: bleeps[i].end })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(noBleeps)</span></span></code></pre>\n<p>Run this again with <code is:raw>node index.js</code> and you should have the following result:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/no-bleeps.png" alt="A terminal showing an array of 5 objects, each with a start and end except the last which only has a start."></p>\n<h2 id="ffmpeg-complex-filters">FFmpeg Complex Filters</h2>\n<p>FFmpeg allows complex manipulation of audio files, and works by chaining smaller manipulations known as filters. We pass in audio by a variable name, do something, and export a new variable which we can then further chain. This might feel complex, so let\u2019s talk through what we will do.</p>\n<ol>\n<li>Take the original audio file and drop the volume to 0 during times where we have profanity.</li>\n<li>Generate a constant beep with a sine wave.</li>\n<li>Make the constant beep end when the final profanity finishes.</li>\n<li>Drop the volume of the beep to 0 whenever there is not profanity.</li>\n<li>Mix the bleep and the vocals to one final track which at any point in time will have a bleep or vocals - never both.</li>\n</ol>\n<p>In our <code is:raw>main()</code> function let\u2019s do this with code. Starting with dropping the volume wherever we have profanity:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dippedVocals</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`[0]volume=0:enable=&#39;${</span><span style="color: #C9D1D9">bleeps</span></span>\n<span class="line"><span style="color: #A5D6FF">  .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">`between(t,${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})`</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">  .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedVocals]`</span></span></code></pre>\n<p><code is:raw>dippedVocals</code> will now look something like:</p>\n<p>[0]volume=0:enable=\u2018between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)\u2018[dippedVocals]</p>\n<p>This takes the provided file (which here is <code is:raw>[0]</code>), makes the volume 0 between the provided times, and makes this altered version available to future parts of this filter as <code is:raw>[dippedVocals]</code></p>\n<p>Delete <code is:raw>dippedVocals</code> and create <code is:raw>filter</code> which contains all parts of our complex filter with the value of <code is:raw>dippedVocals</code> as the first item, and then creates a valid string for FFmpeg:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">filter</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`[0]volume=0:enable=&#39;${</span><span style="color: #C9D1D9">bleeps</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">`between(t,${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})`</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedVocals]`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep]&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`[constantBleep]atrim=start=0:end=${</span></span>\n<span class="line"><span style="color: #A5D6FF">    </span><span style="color: #C9D1D9">noBleeps</span><span style="color: #A5D6FF">[</span><span style="color: #C9D1D9">noBleeps</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">length</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">-</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">].</span><span style="color: #C9D1D9">start</span></span>\n<span class="line"><span style="color: #A5D6FF">  </span><span style="color: #A5D6FF">}[shortenedBleep]`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`[shortenedBleep]volume=0:enable=&#39;${</span><span style="color: #C9D1D9">noBleeps</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">slice</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">0</span><span style="color: #A5D6FF">, </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">`between(t,${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})`</span><span style="color: #A5D6FF">)</span></span>\n<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedBleep]`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;[dippedVocals][dippedBleep]amix=inputs=2&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;;&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>That\u2019s all five steps above built into one complex filter. The final filter looks like this:</p>\n<p>[0]volume=0:enable=\u2018between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)\u2018[dippedVocals];sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep];[constantBleep]atrim=start=0:end=6.7704773[shortenedBleep];[shortenedBleep]volume=0:enable=\u2018between(t,0,1.5777808)+between(t,1.977219,4.7732863)+between(t,5.2732863,5.3724437)+between(t,5.8724437,6.371039)\u2018[dippedBleep];[dippedVocals][dippedBleep]amix=inputs=2</p>\n<p>Yeah. We did it in an array for a reason.</p>\n<h2 id="create-censored-file">Create Censored File</h2>\n<p>The very final step is to actually run FFmpeg via <code is:raw>exec</code> with the above filter. Add this line to the bottom of your <code is:raw>main()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">exec</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">ffmpegStatic</span><span style="color: #A5D6FF">} -y -i input.m4a -filter_complex &quot;${</span><span style="color: #C9D1D9">filter</span><span style="color: #A5D6FF">}&quot; output.wav`</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>And run your script with <code is:raw>node index.js</code>. Once completed, your <code is:raw>output.wav</code> file should be your original file with automatic transcription.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>A transcript is not always the final step in a project - you can use the structured data returned by Deepgram to do further processing or analysis, as demonstrated by this post. I hope you found it interesting.</p>\n<p>The complete project is available at <a href="https://github.com/deepgram-devs/censor-audio">https://github.com/deepgram-devs/censor-audio</a> and if you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/censor-profanity-nodejs/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Here at Deepgram we run GRAM JAM - a series of internal hackathons to have Deepgrammers build cool projects using our own API. Sometimes the projects lead to product improvements, sometimes they get a laugh, and other times they are just super useful. This blog post is based on one of those projects - Bleepgram - built by the very interdisciplinary team of Faye Donnelley, Mike Stivaletti , Conner Goodrum, Claudia Ring, and Anthony Deschamps.</p>
<p>Sometimes we all let “unprovoked or unintended utterances” slip out of our mouth, and often it’s the job of an editor to go through recordings and overlay a bleep so no one has to hear the original word. Historically this has been a manual process, but with Deepgram’s Speech Recognition API we can work to censor them automatically.</p>
<p>If you want to look at the final project code you can find it at <a href="https://github.com/deepgram-devs/censor-audio">https://github.com/deepgram-devs/censor-audio</a>.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>
<li>An audio file to censor - <a href="https://github.com/deepgram-devs/censor-audio-js/blob/main/input.m4a">here’s one you can download</a> and place in your new project directory.</li>
</ul>
<p>Create a new directory and navigate to it with your terminal. Run <code>npm init -y</code> to create a <code>package.json</code> file and then install the following packages:</p>
<p>npm install @deepgram/sdk ffmpeg-static profane-words</p>
<p>Create an <code>index.js</code> file, and open it in your code editor.</p>
<h2 id="preparing-dependencies">Preparing Dependencies</h2>
<p>At the top of your file require these packages:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">exec</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;child_process&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">profanities</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;profane-words&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpegStatic</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<ul>
<li><code>fs</code> is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post.</li>
<li><code>exec</code> allows us to fire off terminal commands from our Node.js script.</li>
<li><code>profane-words</code> exports an array of, perhaps unsurprisingly, profane words.</li>
<li><code>ffmpeg-static</code> includes a version of FFmpeg in our node_modules directory, and requiring it returns the file path.</li>
</ul>
<p><a href="https://ffmpeg.org">FFmpeg</a> is a terminal-based toolkit for developers to work with audio and video files, which can include some quite complex manipulation. We’ll be using <code>exec</code> to run it.</p>
<p>Initialize the Deepgram client:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="creating-a-main-function">Creating a Main Function</h2>
<p>Since Node.js 14.8 you can use <code>await</code> anywhere, even outside of an asynchronous function, if you are creating a module. For this blog post I’ll assume that’s not the case, so we’ll create a <code>main()</code> function for our logic to sit in:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Logic goes here</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">error</span><span style="color: #C9D1D9">(error)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>
<h2 id="get-transcript-and-profanity">Get Transcript and Profanity</h2>
<p>Inside of our <code>main()</code> function get a transcript using the Deepgram Node.js SDK, and then find the profanities:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./input.m4a&#39;</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">  mimetype: </span><span style="color: #A5D6FF">&#39;audio/m4a&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">words</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].words</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bleeps</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> words.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">word</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> profanities.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">w</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> word.word </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> w))</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(bleeps)</span></span></code></pre>
<p>Bleeps will return words that appear in the <code>profane-words</code> list. Test this code by running <code>node index.js</code> in your terminal and you should see a result like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/profane-words.png" alt="A terminal showing an array with four items. Each has a word, start, end, and confidence. Each of the words is clearly profanity but has been edited to obscure the actual words."></p>
<p>Once you have done this, remove the <code>console.log()</code> statement.</p>
<h2 id="determine-clean-audio-timings">Determine Clean Audio Timings</h2>
<p>Next, we want the inverse start and end times - where the audio is ‘clean’ and doesn’t need bleeping. Add this to the <code>main()</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">noBleeps</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [{ start: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, end: bleeps[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start }]</span></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> bleeps.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> bleeps.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    noBleeps.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ start: bleeps[i].end, end: bleeps[i </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].start })</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    noBleeps.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ start: bleeps[i].end })</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(noBleeps)</span></span></code></pre>
<p>Run this again with <code>node index.js</code> and you should have the following result:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635438533/blog/2021/11/censor-profanity-nodejs/no-bleeps.png" alt="A terminal showing an array of 5 objects, each with a start and end except the last which only has a start."></p>
<h2 id="ffmpeg-complex-filters">FFmpeg Complex Filters</h2>
<p>FFmpeg allows complex manipulation of audio files, and works by chaining smaller manipulations known as filters. We pass in audio by a variable name, do something, and export a new variable which we can then further chain. This might feel complex, so let’s talk through what we will do.</p>
<ol>
<li>Take the original audio file and drop the volume to 0 during times where we have profanity.</li>
<li>Generate a constant beep with a sine wave.</li>
<li>Make the constant beep end when the final profanity finishes.</li>
<li>Drop the volume of the beep to 0 whenever there is not profanity.</li>
<li>Mix the bleep and the vocals to one final track which at any point in time will have a bleep or vocals - never both.</li>
</ol>
<p>In our <code>main()</code> function let’s do this with code. Starting with dropping the volume wherever we have profanity:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dippedVocals</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">\`[0]volume=0:enable=&#39;\${</span><span style="color: #C9D1D9">bleeps</span></span>
<span class="line"><span style="color: #A5D6FF">  .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">\`between(t,\${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},\${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})\`</span><span style="color: #A5D6FF">)</span></span>
<span class="line"><span style="color: #A5D6FF">  .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedVocals]\`</span></span></code></pre>
<p><code>dippedVocals</code> will now look something like:</p>
<p>[0]volume=0:enable=‘between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)‘[dippedVocals]</p>
<p>This takes the provided file (which here is <code>[0]</code>), makes the volume 0 between the provided times, and makes this altered version available to future parts of this filter as <code>[dippedVocals]</code></p>
<p>Delete <code>dippedVocals</code> and create <code>filter</code> which contains all parts of our complex filter with the value of <code>dippedVocals</code> as the first item, and then creates a valid string for FFmpeg:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">filter</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">\`[0]volume=0:enable=&#39;\${</span><span style="color: #C9D1D9">bleeps</span></span>
<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">\`between(t,\${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},\${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})\`</span><span style="color: #A5D6FF">)</span></span>
<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedVocals]\`</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep]&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">\`[constantBleep]atrim=start=0:end=\${</span></span>
<span class="line"><span style="color: #A5D6FF">    </span><span style="color: #C9D1D9">noBleeps</span><span style="color: #A5D6FF">[</span><span style="color: #C9D1D9">noBleeps</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">length</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">-</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">].</span><span style="color: #C9D1D9">start</span></span>
<span class="line"><span style="color: #A5D6FF">  </span><span style="color: #A5D6FF">}[shortenedBleep]\`</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">\`[shortenedBleep]volume=0:enable=&#39;\${</span><span style="color: #C9D1D9">noBleeps</span></span>
<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">slice</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">0</span><span style="color: #A5D6FF">, </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">)</span></span>
<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">map</span><span style="color: #A5D6FF">((</span><span style="color: #79C0FF">b</span><span style="color: #A5D6FF">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #A5D6FF"> </span><span style="color: #A5D6FF">\`between(t,\${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">},\${</span><span style="color: #C9D1D9">b</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">})\`</span><span style="color: #A5D6FF">)</span></span>
<span class="line"><span style="color: #A5D6FF">    .</span><span style="color: #D2A8FF">join</span><span style="color: #A5D6FF">(</span><span style="color: #A5D6FF">&#39;+&#39;</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}&#39;[dippedBleep]\`</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;[dippedVocals][dippedBleep]amix=inputs=2&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;;&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>That’s all five steps above built into one complex filter. The final filter looks like this:</p>
<p>[0]volume=0:enable=‘between(t,1.5777808,1.977219)+between(t,4.7732863,5.2732863)+between(t,5.3724437,5.8724437)+between(t,6.371039,6.7704773)‘[dippedVocals];sine=d=5:f=800,pan=stereo|FL=c0|FR=c0[constantBleep];[constantBleep]atrim=start=0:end=6.7704773[shortenedBleep];[shortenedBleep]volume=0:enable=‘between(t,0,1.5777808)+between(t,1.977219,4.7732863)+between(t,5.2732863,5.3724437)+between(t,5.8724437,6.371039)‘[dippedBleep];[dippedVocals][dippedBleep]amix=inputs=2</p>
<p>Yeah. We did it in an array for a reason.</p>
<h2 id="create-censored-file">Create Censored File</h2>
<p>The very final step is to actually run FFmpeg via <code>exec</code> with the above filter. Add this line to the bottom of your <code>main()</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">exec</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`\${</span><span style="color: #C9D1D9">ffmpegStatic</span><span style="color: #A5D6FF">} -y -i input.m4a -filter_complex &quot;\${</span><span style="color: #C9D1D9">filter</span><span style="color: #A5D6FF">}&quot; output.wav\`</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>And run your script with <code>node index.js</code>. Once completed, your <code>output.wav</code> file should be your original file with automatic transcription.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>A transcript is not always the final step in a project - you can use the structured data returned by Deepgram to do further processing or analysis, as demonstrated by this post. I hope you found it interesting.</p>
<p>The complete project is available at <a href="https://github.com/deepgram-devs/censor-audio">https://github.com/deepgram-devs/censor-audio</a> and if you have any questions please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/censor-profanity-nodejs/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
