import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "the-project", "text": "The Project" }, { "depth": 2, "slug": "getting-started-with-pinia", "text": "Getting Started with Pinia" }, { "depth": 2, "slug": "pinia---what-is-it", "text": "Pinia - What is it?" }, { "depth": 2, "slug": "define-a-pinia-store", "text": "Define a Pinia Store" }, { "depth": 2, "slug": "state-getters-and-actions", "text": "State, Getters, and Actions" }, { "depth": 3, "slug": "create-initial-state", "text": "Create Initial State" }, { "depth": 3, "slug": "actions---add-and-delete-an-item", "text": "Actions - Add and Delete an Item" }, { "depth": 3, "slug": "input-form-to-add-an-item", "text": "Input Form to Add an Item" }, { "depth": 2, "slug": "access-pinia-store-from-a-component", "text": "Access Pinia Store from a Component" }, { "depth": 2, "slug": "reactive-properties-in-pinia", "text": "Reactive Properties in Pinia" }, { "depth": 3, "slug": "todo-list---show-item", "text": "Todo List - Show Item" }, { "depth": 3, "slug": "to-do-list---mark-as-completed", "text": "To-do List - Mark as Completed" }, { "depth": 3, "slug": "to-do-list---delete-item", "text": "To-Do List - Delete Item" }, { "depth": 2, "slug": "bonus-section-add-typescript", "text": "Bonus Section: Add Typescript" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": "\nI was building a Vue 3 project for my recent blog series on [how to build a full-stack live streaming web app](https://blog.deepgram.com/build-a-livestream-web-application-vue-and-express-setup/). I wanted to use Vuex to manage some global state properties. It was my first time using Vuex with Vue 3 since I began my journey to learn the Composition API.\n\nWhen I arrived at the [Vuex documentation page](https://vuex.vuejs.org/), I saw this:\n\n![Announcement: The official state management library for Vue has changed to Pinia ](https://res.cloudinary.com/deepgram/image/upload/v1649699509/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/announcement-pinia-official_.png)\n\nWell, that was a surprise! I had been hearing the word \"Pinia\" in relation to Vue but didn't know exactly what it was. **Pinia is now the official state management library for Vue**!\n\nI pushed onwards with using Vuex in that project but made a mental note to come back soon to Pinia to find out what it is all about.\n\nSoon is now! Today I will learn a little about Pinia by building a to-do list. I'll show how I build it and provide some of my thoughts about the experience. Let's dive in!\n\n## The Project\n\nHere is a screenshot of the final project. It's a to-do list that lets me **add**, **delete**, and **check off** an item on the list.\n\nThe project repo can be found [here](https://github.com/SandraRodgers/todo-pinia).\n\n![Example of the to-do list app I'll build](https://res.cloudinary.com/deepgram/image/upload/v1649860305/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example1.png)\n\n## Getting Started with Pinia\n\nI'll create my Vue project (making sure to select Vue 3 since I want to use the Composition API). Pinia also works with Vue 2, but I've personally gone totally in on Vue 3 (and haven't looked back - check out [my series on Vue 3](https://blog.deepgram.com/diving-into-vue-3-getting-started/) to read about my journey).\n\n```bash\nvue create todo-pinia\n```\n\nAfter I `cd` into the project folder, I'll install pinia:\n\n```bash\nnpm install pinia\n```\n\nThen I'll go into the `main.js` file and import `createPinia`. This creates a Pinia instance to be used by my application. The `.use()` tells the Vue app to install Pinia as a plugin.\n\n```js\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\n\ncreateApp(App).use(createPinia()).mount('#app')\n```\n\nIn the `src` folder, in `components`, I'll create the three components that will make up my todo list app - `TodoApp.vue` (the parent component), `TodoForm.vue` (a child component), and `TodoList.vue` (another child component).\n\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/components-folder-with-files.png\" alt=\"Components folder with files\" style=\"width:50%\" />\n\nHere is the plan for how these components will be organized in the browser:\n\n![Example of the to-do list app with component outline](https://res.cloudinary.com/deepgram/image/upload/v1649861642/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example_components.png)\n\nIn each component, I can quickly scaffold out the basic code structure for my template and script. I do that with an extension in VS Code called [Vue VSCode Snippets](https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets). Since I have that, I just type the letters **vbase-3**, and the code writes itself for me:\n\n![vbase-3 snippet to scaffold out my code](https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/vbase-snippet.png)\n\nNow I'll import each component to where it needs to be -`TodoForm.vue` and `TodoList.vue` into the `TodoApp.vue` - and I'll import the `TodoApp.vue` component into `App.vue`. I like to write the name of the component in each to start so I can see them on the screen.\n\nHere's my screen now. The layout is there, but no logic or styles yet:\n\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/component-layout-browser.png\" alt=\"Component layout in browser\" style=\"width:50%\" />\n\n## Pinia - What is it?\n\nNext, I'll create a store and set up my global state with [Pinia](https://pinia.vuejs.org/).\n\nThe concept of a Pinia store is the same as it is for Vuex or Redux - **it is a place to hold global state**, and it makes it easy for any component in the project to track changes to that global state.\n\nNot all state needs to go in the store - just state properties that I want to make available throughout the app. This is especially useful when I want to share state between two sibling components like the `TodoForm.vue` and `TodoList.vue` because I can avoid sending props down ('prop drilling') and emitting events up through the parent.\n\n## Define a Pinia Store\n\nI will create a `store` folder in `src`, and in the folder, I'll make a file called `useTodoListStore.js`. I'm naming it starting with the word 'use' because a common convention of Vue 3, both for Pinia store files and for Vue composables, is to start the file name with 'use'.\n\nI can have as many stores as I want; in fact, **I should have separate stores for separate logical concerns**, similar to how Vue 3 composables are built around distinct logical concerns. Each store should be in a different file.\n\nHowever, since this is such a small project, I only need one store - **one store for the to-do list logic**.\n\nI will first import the `defineStore` function from Pinia. Under the hood, this is going to create the `useStore` function that I will need in my components to retrieve the store I made.\n\n```js\nimport { defineStore } from 'pinia'\n```\n\nI set it to a `const` and use the keyword `export` since I'll need to be able to import it into my components.\n\nThis `defineStore` function will take two arguments: a string (the unique name of the store) and an object (options such as state, getters, and actions).\n\n```js\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  // state\n  // getters\n  // actions\n})\n```\n\n## State, Getters, and Actions\n\nThe options that I pass to the `defineStore` function are my store's `state`, `getters`, and `actions`. Unlike Vuex, there is no longer the need for `mutations`. This makes me happy!\n\nI always found `mutations` confusing because it felt like I was repeating myself when I had to write an action to commit a mutation, which would then make the state change. Pinia has gotten rid of that middleman, and instead, the flow is just **action -> change state**.\n\nI already have a mental model around the way `methods`, `data`, and `computed` work in Vue 2. The `methods` make stuff happen, the `data` contains my state properties, and the `computed` returns an automatically updated property that has had a calculation performed on it.\n\nPinia's options follow the same mental model - I can think of the `state` as being like `data` in the Vue Options API, the `actions` like `methods`, and the `getters` like `computed` properties.\n\nI really like this change, and it's one of the first things that made me think, \"Wow, I think I'm really going to like Pinia!\"\n\n### Create Initial State\n\nNow I'll start creating a global state object in my `useTodoListStore`.\n\nThe state is actually a function, and it's recommended that I use an arrow function (this is because Pinia has excellent Typescript integration, and using an arrow function will allow Typescript inference to work on the state properties).\n\nI'll add a `todoList` property, which will be an array meant to contain each to-do item (each item is going to be an object, but there's nothing in the `todoList` array at the moment).\n\n```js\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  state: () => ({\n    todoList: [],\n  }),\n})\n```\n\n### Actions - Add and Delete an Item\n\nI can also set up my first action. I know the main logic to start will be adding an item to the to-do list. I'll write a function `addTodo` that will perform the logic of pushing an item object into the `todoList` array.\n\nIndividual `actions` are methods within the `actions` object in the store.\n\nI will also add an `id` property to state since I will want each item to have an id that increments each time a new item is pushed into the `toDoList` array:\n\n```js\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  state: () => ({\n    todoList: [],\n    id: 0,\n  }),\n  actions: {\n    addTodo(item) {\n      this.todoList.push({ item, id: this.id++, completed: false })\n    },\n  },\n})\n```\n\nMaybe while I'm here, I should go ahead and write an action to delete an item from the to-do list since I know I'll want to have a delete feature. Under the last line of code in the `addToDo` action, I'll add a `deleteTodo`:\n\n```js\ndeleteTodo(itemID) {\n  this.todoList = this.todoList.filter((object) => {\n    return object.id !== itemID;\n  });\n},\n```\n\n### Input Form to Add an Item\n\nI'll jump back into the `TodoForm.vue` component now. I want to write a form to enter a to-do item. I'll use the dev-tools to check that the item is getting into the `state` I set up in the Pinia store.\n\nIn the `template`, I'll create the basic form:\n\n```html\n{/*<!-- TodoForm.vue -->*/}\n\n<template>\n  <form @submit.prevent=\"\">\n    <input v-model=\"todo\" type=\"text\" /><button>Add</button>\n  </form>\n</template>\n```\n\nThe input has a `v-model=\"todo\"` which I'll connect to a `ref` in the `script` to make this property reactive so it updates as the user types the item into the input:\n\n```js\n// TodoForm.vue\n\n<script>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const todo = ref(\"\");\n    return { todo };\n  },\n};\n<\/script>\n```\n\nI haven't added a method yet for the `@submit` event listener because I need to set up the logic in the `script` first. The submit button is going to trigger a function to add an item to the todo list, so I'll need to somehow invoke the `addTodo` action in the store.\n\n## Access Pinia Store from a Component\n\nTo use a Pinia store in a component, I need to import the store and then set a `const store` to the invoked store function:\n\n```js\n// TodoForm.vue\n\nimport { useTodoListStore } from '@/store/useTodoListStore'\nexport default {\n  setup() {\n    const todo = ref('')\n    // use Pinia store:\n    const store = useTodoListStore()\n\n    return { todo }\n  },\n}\n```\n\nNow I will have access to state, actions, and getters in the store through that `const store`.\n\nI'll write a method in the `TodoForm.vue` component that will be triggered when the submit button is clicked. I want that method to do two things: add an item to the `todoList` array in the store, and clear the `todo` `ref` so it returns to being an empty string after the item is added to the list:\n\n```js\n// in setup function in script in TodoForm.vue:\n\nfunction addItemAndClear(item) {\n  if (item.length === 0) {\n    return\n  }\n  // invokes function in the store:\n  store.addTodo(item)\n  todo.value = ''\n}\n```\n\nAnd I'll make sure that function is added to the form's `@submit` event listener in the template:\n\n```js\n<form @submit.prevent=\"addItemAndClear(todo)\">\n```\n\nI'll type `npm run serve` in the terminal to start up the Vue development server.\n\nNow I can open the Vue dev-tools and see that the item is being added to the `todoList` array in the store.\n\n![Gif showing an item added to the to-do list and data in the store](https://res.cloudinary.com/deepgram/image/upload/v1649704298/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-todo.gif)\n\n## Reactive Properties in Pinia\n\nIn the previous section, I used an action from the Pinia store - `addTodo` - in my `todoForm.vue` component. In this section, I'll use a state property in the `todoList.vue` component, and I need it to be reactive to changes that might happen. I'll be using it in the component `template`, and it has to be reactive so it updates in sync with the state change.\n\nThere's an important function I'll want to use that comes with the Pinia library - `storeToRefs`. Each to-do list item displayed in the `todoList` component will actually come from the store, and since the store's state is an object, I will use this helper method to destructure the returned object without losing reactivity. It is similar to Vue 3's [utility function `toRefs`](https://vuejs.org/api/reactivity-utilities.html#torefs). I'll demonstrate its usage as I build the next feature.\n\n### Todo List - Show Item\n\nI want access to the `todoList` that's in the store (which now has data to represent the items I've added to the list), so in the `todoList.vue` component I'll need to bring in the store, just like I did in `todoForm.vue`. I'll also set `const store` to the invoked store function.\n\nThen I need to wrap the `todoList` property that I want to pull from the store in the function `storeToRefs`:\n\n```js\n<script>\nimport { useTodoListStore } from \"../store/useTodoListStore\";\nimport { storeToRefs } from \"pinia\";\nexport default {\n  setup() {\n    const store = useTodoListStore();\n    // storeToRefs lets todoList keep reactivity:\n    const { todoList } = storeToRefs(store);\n\n    return { todoList };\n  },\n};\n<\/script>\n```\n\nNow I can use `todoList` in my `template`, and it will stay in sync with the store. I'll write a `v-for` loop to create the list:\n\n```html\n<template>\n  <div v-for=\"todo in todoList\" :key=\"todo.id\">\n    <div>{{ todo.item }}</div>\n  </div>\n</template>\n```\n\nAnd the list is displaying now:\n\n![Gif showing the list as items are added](https://res.cloudinary.com/deepgram/image/upload/v1649863854/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/show-list-example_.gif)\n\n### To-do List - Mark as Completed\n\nI want to add some styles to each item to show if the to-do item has been completed.\n\nFirst, I need the logic to toggle an item to be complete or not complete. Right now, in the store, each item that is added to the list also has a `completed` property set to `false`:\n\n```js\n// useTodoListStore.js\n\nthis.todoList.push({ item, id: this.id++, completed: false })\n```\n\nI can write an action in the store to toggle that to true:\n\n```js\ntoggleCompleted(idToFind) {\n      const todo = this.todoList.find((obj) => obj.id === idToFind);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n```\n\nIn the `todoList.vue` component, I'll add a checkmark emoji as a `span` to the `template` with an event listener to listen for a click on the checkmark. The Unicode is `&#10004;` for a checkmark.\n\n```js\n<div v-for=\"todo in todoList\" :key=\"todo.id\">\n    <div>\n      <span>{{ todo.item }}</span>\n      <span @click.stop=\"toggleCompleted(todo.id)\">&#10004;</span>\n    </div>\n  </div>\n```\n\nHowever, I need to make sure that I have brought `toggleCompleted` into the component. Since it's an **action** method and not a reactive state property, I won't use `storeToRefs` for `toggleCompleted`:\n\n```js\n<script>\nimport { useTodoListStore } from \"../store/useTodoListStore\";\nimport { storeToRefs } from \"pinia\";\nexport default {\n  setup() {\n    const store = useTodoListStore();\n    const { todoList } = storeToRefs(store);\n    // destructuring action method doesn't require using storeToRefs:\n    const { toggleCompleted } = store;\n\n    return { todoList, toggleCompleted };\n  },\n};\n<\/script>\n```\n\nTo add the styles, I first will add a dynamic class to the to-do item `span` in the template:\n\n```js\n<span :class=\"{ completed: todo.completed }\">{{ todo.item }}</span>\n```\n\nAnd CSS to change the look of the item as it is toggled true and false:\n\n```css\n/* CSS Styles */\n\n.completed {\n  text-decoration: line-through;\n}\n```\n\n![Gif showing an item marked complete with checkmark](https://res.cloudinary.com/deepgram/image/upload/v1649864263/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/check-complete.gif)\n\n### To-Do List - Delete Item\n\nI had already added the `deleteTodo` function to the store, so I can jump into writing the delete feature in the `todoList.vue` component.\n\nI'll do the same thing I did in the previous section, bringing in the store's action `deleteTodo` and using a cross mark emoji for the delete button. I won't explain every step since I just need to repeat what I did in the previous section for marking an item complete, but this time hooking it up to the delete action. But I'll show the code.\n\nHere's the `todoList.vue` component after I added the delete feature:\n\n```js\n// todoList.vue\n\n<template>\n  <div v-for=\"todo in todoList\" :key=\"todo.id\">\n    <div>\n      <span :class=\"{ completed: todo.completed }\">{{ todo.item }}</span>\n      <span @click.stop=\"toggleCompleted(todo.id)\">&#10004;</span>\n      <span @click=\"deleteTodo(todo.id)\">&#10060;</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useTodoListStore } from \"../store/useTodoListStore\";\nimport { storeToRefs } from \"pinia\";\nexport default {\n  setup() {\n    const store = useTodoListStore();\n    const { todoList } = storeToRefs(store);\n    const { toggleCompleted, deleteTodo } = store;\n\n    return { todoList, toggleCompleted, deleteTodo };\n  },\n};\n<\/script>\n\n<style>\n.completed {\n  text-decoration: line-through;\n}\n</style>\n\n```\n\nAnd here is the **store** now that I have all the logic working:\n\n```js\n// useTodoListStore\n\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  state: () => ({\n    todoList: [],\n    id: 0,\n  }),\n  actions: {\n    addTodo(item) {\n      this.todoList.push({ item, id: this.id++, completed: false })\n    },\n    deleteTodo(itemID) {\n      this.todoList = this.todoList.filter((object) => {\n        return object.id !== itemID\n      })\n    },\n    toggleCompleted(idToFind) {\n      const todo = this.todoList.find((obj) => obj.id === idToFind)\n      if (todo) {\n        todo.completed = !todo.completed\n      }\n    },\n  },\n})\n```\n\nI've finished a barebones to-do list app with Pinia, minus styling. This code is available on the 'just-pinia' branch of [my project repo](https://github.com/SandraRodgers/todo-pinia/tree/just-pinia) for anyone who would like to see it in its entirety.\n\n## Bonus Section: Add Typescript\n\nOne of the best features of Pinia is that **it works very well with Typescript**. I first chose to build the to-do list without Typescript so I could just focus on how to use Pinia, but I also want to demonstrate how it works with Typescript since that is a huge advantage of Pinia.\n\nSetting up Vuex with Typescript was always challenging for me because of the need to create custom complex wrappers. It wasn't easy to just dive in.\n\nBut with Pinia, I don't have to do that. I can just add Typescript to my project and start using it.\n\nI'll add Typescript to my existing project with this command:\n\n```js\nvue add Typescript\n```\n\nWhen it prompts me to make some choices, I'll be sure to say yes to \"Convert all .js files to .ts\". That way it will turn the store file into a `.ts` file.\n\n![Prompts when adding Typescript to Vue project](https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-typescript-to-vue-prompts.png)\n\nThen I'll delete the `HelloWorld` file because I don't need that. I might need to delete one of the `extends` properties from the `.eslintrc.js` file.\n\nI'll go to the store file and see that Typescript is pointing out all the missing types I need to add.\n\n![Store with Typescript errors](https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/store-with-typescript-errors.png)\n\nI'm not going to go through how to use Typescript since this blog post isn't meant to teach how to write Typescript. But I'll add the types and show how my store looks after I revise it to include Typescript:\n\n```js\nimport { defineStore } from \"pinia\";\n\ninterface ToDoItem {\n  item: string;\n  id: number;\n  completed: boolean;\n}\n\nexport const useTodoListStore = defineStore(\"todoList\", {\n  state: () => ({\n    todoList: [] as ToDoItem[],\n    id: 0,\n  }),\n  actions: {\n    addTodo(item: string) {\n      this.todoList.push({ item, id: this.id++, completed: false });\n    },\n    deleteTodo(itemID: number) {\n      this.todoList = this.todoList.filter((object) => {\n        return object.id !== itemID;\n      });\n    },\n    toggleCompleted(idToFind: number) {\n      const todo = this.todoList.find((obj) => obj.id === idToFind);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n  },\n});\n```\n\nIn the components, I'll need to add `lang=\"ts\"` to the script and import `defineComponent`. The export will need to be wrapped in the `defineComponent` function.\n\n```js\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nexport default defineComponent({\n...\n});\n<\/script>\n```\n\nAnd that's how I would add Typescript to my project after-the fact; although I highly recommend starting the project from the beginning with Typescript, since it will help with the developer experience of catching errors and thinking about types.\n\nThe Typescript version of the to-do list can be found in my repo on the branch called [pinia-typescript](https://github.com/SandraRodgers/todo-pinia/tree/pinia-typescript).\n\n## Conclusion\n\nI went through creating a to-do list using just Pinia and then I also showed how to build one with Typescript. I've since added styles and an alert feature to the application, and the most updated code can be found on the main branch of the [project repo](https://github.com/SandraRodgers/todo-pinia/tree/main).\n\nI hope this blog post has been helpful. I'm very excited about Pinia because of how straightforward it was to jump in and start using, especially with Typescript.\n\nIf you have any questions, feel free to reach out on [Twitter](https://twitter.com/sandra_rodgers_)!\n\n        ", "html": '<p>I was building a Vue 3 project for my recent blog series on <a href="https://blog.deepgram.com/build-a-livestream-web-application-vue-and-express-setup/">how to build a full-stack live streaming web app</a>. I wanted to use Vuex to manage some global state properties. It was my first time using Vuex with Vue 3 since I began my journey to learn the Composition API.</p>\n<p>When I arrived at the <a href="https://vuex.vuejs.org/">Vuex documentation page</a>, I saw this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649699509/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/announcement-pinia-official_.png" alt="Announcement: The official state management library for Vue has changed to Pinia "></p>\n<p>Well, that was a surprise! I had been hearing the word \u201CPinia\u201D in relation to Vue but didn\u2019t know exactly what it was. <strong>Pinia is now the official state management library for Vue</strong>!</p>\n<p>I pushed onwards with using Vuex in that project but made a mental note to come back soon to Pinia to find out what it is all about.</p>\n<p>Soon is now! Today I will learn a little about Pinia by building a to-do list. I\u2019ll show how I build it and provide some of my thoughts about the experience. Let\u2019s dive in!</p>\n<h2 id="the-project">The Project</h2>\n<p>Here is a screenshot of the final project. It\u2019s a to-do list that lets me <strong>add</strong>, <strong>delete</strong>, and <strong>check off</strong> an item on the list.</p>\n<p>The project repo can be found <a href="https://github.com/SandraRodgers/todo-pinia">here</a>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649860305/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example1.png" alt="Example of the to-do list app I&#x27;ll build"></p>\n<h2 id="getting-started-with-pinia">Getting Started with Pinia</h2>\n<p>I\u2019ll create my Vue project (making sure to select Vue 3 since I want to use the Composition API). Pinia also works with Vue 2, but I\u2019ve personally gone totally in on Vue 3 (and haven\u2019t looked back - check out <a href="https://blog.deepgram.com/diving-into-vue-3-getting-started/">my series on Vue 3</a> to read about my journey).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue create todo-pinia</span></span></code></pre>\n<p>After I <code is:raw>cd</code> into the project folder, I\u2019ll install pinia:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm install pinia</span></span></code></pre>\n<p>Then I\u2019ll go into the <code is:raw>main.js</code> file and import <code is:raw>createPinia</code>. This creates a Pinia instance to be used by my application. The <code is:raw>.use()</code> tells the Vue app to install Pinia as a plugin.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createPinia } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">createPinia</span><span style="color: #C9D1D9">()).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>In the <code is:raw>src</code> folder, in <code is:raw>components</code>, I\u2019ll create the three components that will make up my todo list app - <code is:raw>TodoApp.vue</code> (the parent component), <code is:raw>TodoForm.vue</code> (a child component), and <code is:raw>TodoList.vue</code> (another child component).</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/components-folder-with-files.png" alt="Components folder with files" style="width:50%" />\n<p>Here is the plan for how these components will be organized in the browser:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649861642/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example_components.png" alt="Example of the to-do list app with component outline"></p>\n<p>In each component, I can quickly scaffold out the basic code structure for my template and script. I do that with an extension in VS Code called <a href="https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets">Vue VSCode Snippets</a>. Since I have that, I just type the letters <strong>vbase-3</strong>, and the code writes itself for me:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/vbase-snippet.png" alt="vbase-3 snippet to scaffold out my code"></p>\n<p>Now I\u2019ll import each component to where it needs to be -<code is:raw>TodoForm.vue</code> and <code is:raw>TodoList.vue</code> into the <code is:raw>TodoApp.vue</code> - and I\u2019ll import the <code is:raw>TodoApp.vue</code> component into <code is:raw>App.vue</code>. I like to write the name of the component in each to start so I can see them on the screen.</p>\n<p>Here\u2019s my screen now. The layout is there, but no logic or styles yet:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/component-layout-browser.png" alt="Component layout in browser" style="width:50%" />\n<h2 id="pinia---what-is-it">Pinia - What is it?</h2>\n<p>Next, I\u2019ll create a store and set up my global state with <a href="https://pinia.vuejs.org/">Pinia</a>.</p>\n<p>The concept of a Pinia store is the same as it is for Vuex or Redux - <strong>it is a place to hold global state</strong>, and it makes it easy for any component in the project to track changes to that global state.</p>\n<p>Not all state needs to go in the store - just state properties that I want to make available throughout the app. This is especially useful when I want to share state between two sibling components like the <code is:raw>TodoForm.vue</code> and <code is:raw>TodoList.vue</code> because I can avoid sending props down (\u2018prop drilling\u2019) and emitting events up through the parent.</p>\n<h2 id="define-a-pinia-store">Define a Pinia Store</h2>\n<p>I will create a <code is:raw>store</code> folder in <code is:raw>src</code>, and in the folder, I\u2019ll make a file called <code is:raw>useTodoListStore.js</code>. I\u2019m naming it starting with the word \u2018use\u2019 because a common convention of Vue 3, both for Pinia store files and for Vue composables, is to start the file name with \u2018use\u2019.</p>\n<p>I can have as many stores as I want; in fact, <strong>I should have separate stores for separate logical concerns</strong>, similar to how Vue 3 composables are built around distinct logical concerns. Each store should be in a different file.</p>\n<p>However, since this is such a small project, I only need one store - <strong>one store for the to-do list logic</strong>.</p>\n<p>I will first import the <code is:raw>defineStore</code> function from Pinia. Under the hood, this is going to create the <code is:raw>useStore</code> function that I will need in my components to retrieve the store I made.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span></code></pre>\n<p>I set it to a <code is:raw>const</code> and use the keyword <code is:raw>export</code> since I\u2019ll need to be able to import it into my components.</p>\n<p>This <code is:raw>defineStore</code> function will take two arguments: a string (the unique name of the store) and an object (options such as state, getters, and actions).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// state</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// getters</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// actions</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="state-getters-and-actions">State, Getters, and Actions</h2>\n<p>The options that I pass to the <code is:raw>defineStore</code> function are my store\u2019s <code is:raw>state</code>, <code is:raw>getters</code>, and <code is:raw>actions</code>. Unlike Vuex, there is no longer the need for <code is:raw>mutations</code>. This makes me happy!</p>\n<p>I always found <code is:raw>mutations</code> confusing because it felt like I was repeating myself when I had to write an action to commit a mutation, which would then make the state change. Pinia has gotten rid of that middleman, and instead, the flow is just <strong>action -> change state</strong>.</p>\n<p>I already have a mental model around the way <code is:raw>methods</code>, <code is:raw>data</code>, and <code is:raw>computed</code> work in Vue 2. The <code is:raw>methods</code> make stuff happen, the <code is:raw>data</code> contains my state properties, and the <code is:raw>computed</code> returns an automatically updated property that has had a calculation performed on it.</p>\n<p>Pinia\u2019s options follow the same mental model - I can think of the <code is:raw>state</code> as being like <code is:raw>data</code> in the Vue Options API, the <code is:raw>actions</code> like <code is:raw>methods</code>, and the <code is:raw>getters</code> like <code is:raw>computed</code> properties.</p>\n<p>I really like this change, and it\u2019s one of the first things that made me think, \u201CWow, I think I\u2019m really going to like Pinia!\u201D</p>\n<h3 id="create-initial-state">Create Initial State</h3>\n<p>Now I\u2019ll start creating a global state object in my <code is:raw>useTodoListStore</code>.</p>\n<p>The state is actually a function, and it\u2019s recommended that I use an arrow function (this is because Pinia has excellent Typescript integration, and using an arrow function will allow Typescript inference to work on the state properties).</p>\n<p>I\u2019ll add a <code is:raw>todoList</code> property, which will be an array meant to contain each to-do item (each item is going to be an object, but there\u2019s nothing in the <code is:raw>todoList</code> array at the moment).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h3 id="actions---add-and-delete-an-item">Actions - Add and Delete an Item</h3>\n<p>I can also set up my first action. I know the main logic to start will be adding an item to the to-do list. I\u2019ll write a function <code is:raw>addTodo</code> that will perform the logic of pushing an item object into the <code is:raw>todoList</code> array.</p>\n<p>Individual <code is:raw>actions</code> are methods within the <code is:raw>actions</code> object in the store.</p>\n<p>I will also add an <code is:raw>id</code> property to state since I will want each item to have an id that increments each time a new item is pushed into the <code is:raw>toDoList</code> array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Maybe while I\u2019m here, I should go ahead and write an action to delete an item from the to-do list since I know I\u2019ll want to have a delete feature. Under the last line of code in the <code is:raw>addToDo</code> action, I\u2019ll add a <code is:raw>deleteTodo</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(itemID) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID;</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<h3 id="input-form-to-add-an-item">Input Form to Add an Item</h3>\n<p>I\u2019ll jump back into the <code is:raw>TodoForm.vue</code> component now. I want to write a form to enter a to-do item. I\u2019ll use the dev-tools to check that the item is getting into the <code is:raw>state</code> I set up in the Pinia store.</p>\n<p>In the <code is:raw>template</code>, I\u2019ll create the basic form:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- TodoForm.vue --&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@submit.prevent</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Add&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The input has a <code is:raw>v-model="todo"</code> which I\u2019ll connect to a <code is:raw>ref</code> in the <code is:raw>script</code> to make this property reactive so it updates as the user types the item into the input:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// TodoForm.vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const todo </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    return { todo };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>I haven\u2019t added a method yet for the <code is:raw>@submit</code> event listener because I need to set up the logic in the <code is:raw>script</code> first. The submit button is going to trigger a function to add an item to the todo list, so I\u2019ll need to somehow invoke the <code is:raw>addTodo</code> action in the store.</p>\n<h2 id="access-pinia-store-from-a-component">Access Pinia Store from a Component</h2>\n<p>To use a Pinia store in a component, I need to import the store and then set a <code is:raw>const store</code> to the invoked store function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// TodoForm.vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { useTodoListStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@/store/useTodoListStore&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> {</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #D2A8FF">setup</span><span style="color: #FFA657">() </span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// use Pinia store:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">store</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { todo }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">}</span></span></code></pre>\n<p>Now I will have access to state, actions, and getters in the store through that <code is:raw>const store</code>.</p>\n<p>I\u2019ll write a method in the <code is:raw>TodoForm.vue</code> component that will be triggered when the submit button is clicked. I want that method to do two things: add an item to the <code is:raw>todoList</code> array in the store, and clear the <code is:raw>todo</code> <code is:raw>ref</code> so it returns to being an empty string after the item is added to the list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in setup function in script in TodoForm.vue:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addItemAndClear</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (item.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// invokes function in the store:</span></span>\n<span class="line"><span style="color: #C9D1D9">  store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(item)</span></span>\n<span class="line"><span style="color: #C9D1D9">  todo.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>And I\u2019ll make sure that function is added to the form\u2019s <code is:raw>@submit</code> event listener in the template:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@submit.prevent=&quot;addItemAndClear(todo)&quot;&gt;</span></span></code></pre>\n<p>I\u2019ll type <code is:raw>npm run serve</code> in the terminal to start up the Vue development server.</p>\n<p>Now I can open the Vue dev-tools and see that the item is being added to the <code is:raw>todoList</code> array in the store.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649704298/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-todo.gif" alt="Gif showing an item added to the to-do list and data in the store"></p>\n<h2 id="reactive-properties-in-pinia">Reactive Properties in Pinia</h2>\n<p>In the previous section, I used an action from the Pinia store - <code is:raw>addTodo</code> - in my <code is:raw>todoForm.vue</code> component. In this section, I\u2019ll use a state property in the <code is:raw>todoList.vue</code> component, and I need it to be reactive to changes that might happen. I\u2019ll be using it in the component <code is:raw>template</code>, and it has to be reactive so it updates in sync with the state change.</p>\n<p>There\u2019s an important function I\u2019ll want to use that comes with the Pinia library - <code is:raw>storeToRefs</code>. Each to-do list item displayed in the <code is:raw>todoList</code> component will actually come from the store, and since the store\u2019s state is an object, I will use this helper method to destructure the returned object without losing reactivity. It is similar to Vue 3\u2019s <a href="https://vuejs.org/api/reactivity-utilities.html#torefs">utility function <code is:raw>toRefs</code></a>. I\u2019ll demonstrate its usage as I build the next feature.</p>\n<h3 id="todo-list---show-item">Todo List - Show Item</h3>\n<p>I want access to the <code is:raw>todoList</code> that\u2019s in the store (which now has data to represent the items I\u2019ve added to the list), so in the <code is:raw>todoList.vue</code> component I\u2019ll need to bring in the store, just like I did in <code is:raw>todoForm.vue</code>. I\u2019ll also set <code is:raw>const store</code> to the invoked store function.</p>\n<p>Then I need to wrap the <code is:raw>todoList</code> property that I want to pull from the store in the function <code is:raw>storeToRefs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;pinia&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// storeToRefs lets todoList keep reactivity:</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { todoList };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Now I can use <code is:raw>todoList</code> in my <code is:raw>template</code>, and it will stay in sync with the store. I\u2019ll write a <code is:raw>v-for</code> loop to create the list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">:key</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo.id&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;{{ todo.item }}&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>And the list is displaying now:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649863854/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/show-list-example_.gif" alt="Gif showing the list as items are added"></p>\n<h3 id="to-do-list---mark-as-completed">To-do List - Mark as Completed</h3>\n<p>I want to add some styles to each item to show if the to-do item has been completed.</p>\n<p>First, I need the logic to toggle an item to be complete or not complete. Right now, in the store, each item that is added to the list also has a <code is:raw>completed</code> property set to <code is:raw>false</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// useTodoListStore.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>I can write an action in the store to toggle that to true:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(idToFind) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind);</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span></code></pre>\n<p>In the <code is:raw>todoList.vue</code> component, I\u2019ll add a checkmark emoji as a <code is:raw>span</code> to the <code is:raw>template</code> with an event listener to listen for a click on the checkmark. The Unicode is <code is:raw>&amp;#10004;</code> for a checkmark.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:key=&quot;todo.id&quot;&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click.stop=&quot;toggleCompleted(todo.id)&quot;&gt;&amp;#10004;&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span></code></pre>\n<p>However, I need to make sure that I have brought <code is:raw>toggleCompleted</code> into the component. Since it\u2019s an <strong>action</strong> method and not a reactive state property, I won\u2019t use <code is:raw>storeToRefs</code> for <code is:raw>toggleCompleted</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;pinia&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// destructuring action method doesn&#39;t require using storeToRefs:</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { toggleCompleted } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { todoList, toggleCompleted };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>To add the styles, I first will add a dynamic class to the to-do item <code is:raw>span</code> in the template:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:class=&quot;{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">completed:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}&quot;&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span></code></pre>\n<p>And CSS to change the look of the item as it is toggled true and false:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">/* CSS Styles */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">.completed</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">text-decoration</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">line-through</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649864263/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/check-complete.gif" alt="Gif showing an item marked complete with checkmark"></p>\n<h3 id="to-do-list---delete-item">To-Do List - Delete Item</h3>\n<p>I had already added the <code is:raw>deleteTodo</code> function to the store, so I can jump into writing the delete feature in the <code is:raw>todoList.vue</code> component.</p>\n<p>I\u2019ll do the same thing I did in the previous section, bringing in the store\u2019s action <code is:raw>deleteTodo</code> and using a cross mark emoji for the delete button. I won\u2019t explain every step since I just need to repeat what I did in the previous section for marking an item complete, but this time hooking it up to the delete action. But I\u2019ll show the code.</p>\n<p>Here\u2019s the <code is:raw>todoList.vue</code> component after I added the delete feature:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// todoList.vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:key=&quot;todo.id&quot;&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:class=&quot;{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">completed:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}&quot;&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click.stop=&quot;toggleCompleted(todo.id)&quot;&gt;&amp;#10004;&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;deleteTodo(todo.id)&quot;&gt;&amp;#10060;&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/template&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA198">&lt;script&gt;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;../store/useTodoListStore&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;pinia&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"><span style="color: #79C0FF">export</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { toggleCompleted, deleteTodo } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { todoList, toggleCompleted, deleteTodo };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #FFA198">,</span></span>\n<span class="line"><span style="color: #FFA198">};</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/script&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA198">&lt;style&gt;</span></span>\n<span class="line"><span style="color: #FFA198">.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  text</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">decoration: line</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">through;</span></span>\n<span class="line"><span style="color: #FF7B72">}</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/style&gt;</span></span>\n<span class="line"></span></code></pre>\n<p>And here is the <strong>store</strong> now that I have all the logic working:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// useTodoListStore</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">itemID</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">idToFind</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>I\u2019ve finished a barebones to-do list app with Pinia, minus styling. This code is available on the \u2018just-pinia\u2019 branch of <a href="https://github.com/SandraRodgers/todo-pinia/tree/just-pinia">my project repo</a> for anyone who would like to see it in its entirety.</p>\n<h2 id="bonus-section-add-typescript">Bonus Section: Add Typescript</h2>\n<p>One of the best features of Pinia is that <strong>it works very well with Typescript</strong>. I first chose to build the to-do list without Typescript so I could just focus on how to use Pinia, but I also want to demonstrate how it works with Typescript since that is a huge advantage of Pinia.</p>\n<p>Setting up Vuex with Typescript was always challenging for me because of the need to create custom complex wrappers. It wasn\u2019t easy to just dive in.</p>\n<p>But with Pinia, I don\u2019t have to do that. I can just add Typescript to my project and start using it.</p>\n<p>I\u2019ll add Typescript to my existing project with this command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue add Typescript</span></span></code></pre>\n<p>When it prompts me to make some choices, I\u2019ll be sure to say yes to \u201CConvert all .js files to .ts\u201D. That way it will turn the store file into a <code is:raw>.ts</code> file.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-typescript-to-vue-prompts.png" alt="Prompts when adding Typescript to Vue project"></p>\n<p>Then I\u2019ll delete the <code is:raw>HelloWorld</code> file because I don\u2019t need that. I might need to delete one of the <code is:raw>extends</code> properties from the <code is:raw>.eslintrc.js</code> file.</p>\n<p>I\u2019ll go to the store file and see that Typescript is pointing out all the missing types I need to add.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/store-with-typescript-errors.png" alt="Store with Typescript errors"></p>\n<p>I\u2019m not going to go through how to use Typescript since this blog post isn\u2019t meant to teach how to write Typescript. But I\u2019ll add the types and show how my store looks after I revise it to include Typescript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;pinia&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">interface</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">ToDoItem</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">string</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">id</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">completed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">boolean</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;todoList&quot;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [] </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">ToDoItem</span><span style="color: #C9D1D9">[],</span></span>\n<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">string</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> });</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">itemID</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID;</span></span>\n<span class="line"><span style="color: #C9D1D9">      });</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">idToFind</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind);</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">});</span></span></code></pre>\n<p>In the components, I\u2019ll need to add <code is:raw>lang="ts"</code> to the script and import <code is:raw>defineComponent</code>. The export will need to be wrapped in the <code is:raw>defineComponent</code> function.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;ts&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> defineComponent </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default defineComponent(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>And that\u2019s how I would add Typescript to my project after-the fact; although I highly recommend starting the project from the beginning with Typescript, since it will help with the developer experience of catching errors and thinking about types.</p>\n<p>The Typescript version of the to-do list can be found in my repo on the branch called <a href="https://github.com/SandraRodgers/todo-pinia/tree/pinia-typescript">pinia-typescript</a>.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>I went through creating a to-do list using just Pinia and then I also showed how to build one with Typescript. I\u2019ve since added styles and an alert feature to the application, and the most updated code can be found on the main branch of the <a href="https://github.com/SandraRodgers/todo-pinia/tree/main">project repo</a>.</p>\n<p>I hope this blog post has been helpful. I\u2019m very excited about Pinia because of how straightforward it was to jump in and start using, especially with Typescript.</p>\n<p>If you have any questions, feel free to reach out on <a href="https://twitter.com/sandra_rodgers_">Twitter</a>!</p>' };
const frontmatter = { "title": "Build a To-do List App with Pinia and Vue 3", "description": "Learn about Vue 3's new official state management system Pinia while building a to-do list app. Bonus - add typescript!", "date": "2022-04-15T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1649693948/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/Build-Todo-list-w-Vue3-Pinia%402x.jpg", "authors": ["sandra-rodgers"], "category": "tutorial", "tags": ["vuejs", "javascript", "typescript"], "seo": { "title": "Build a To-do List App with Pinia and Vue 3", "description": "Learn about Vue 3's new official state management system Pinia while building a to-do list app. Bonus - add typescript!" }, "shorturls": { "share": "https://dpgr.am/9d6a0bc", "twitter": "https://dpgr.am/9218baf", "linkedin": "https://dpgr.am/b0575b7", "reddit": "https://dpgr.am/8761a94", "facebook": "https://dpgr.am/f7cf134" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453154/blog/build-a-todo-list-with-pinia-and-vue-3/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "the-project", "text": "The Project" }, { "depth": 2, "slug": "getting-started-with-pinia", "text": "Getting Started with Pinia" }, { "depth": 2, "slug": "pinia---what-is-it", "text": "Pinia - What is it?" }, { "depth": 2, "slug": "define-a-pinia-store", "text": "Define a Pinia Store" }, { "depth": 2, "slug": "state-getters-and-actions", "text": "State, Getters, and Actions" }, { "depth": 3, "slug": "create-initial-state", "text": "Create Initial State" }, { "depth": 3, "slug": "actions---add-and-delete-an-item", "text": "Actions - Add and Delete an Item" }, { "depth": 3, "slug": "input-form-to-add-an-item", "text": "Input Form to Add an Item" }, { "depth": 2, "slug": "access-pinia-store-from-a-component", "text": "Access Pinia Store from a Component" }, { "depth": 2, "slug": "reactive-properties-in-pinia", "text": "Reactive Properties in Pinia" }, { "depth": 3, "slug": "todo-list---show-item", "text": "Todo List - Show Item" }, { "depth": 3, "slug": "to-do-list---mark-as-completed", "text": "To-do List - Mark as Completed" }, { "depth": 3, "slug": "to-do-list---delete-item", "text": "To-Do List - Delete Item" }, { "depth": 2, "slug": "bonus-section-add-typescript", "text": "Bonus Section: Add Typescript" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": "\nI was building a Vue 3 project for my recent blog series on [how to build a full-stack live streaming web app](https://blog.deepgram.com/build-a-livestream-web-application-vue-and-express-setup/). I wanted to use Vuex to manage some global state properties. It was my first time using Vuex with Vue 3 since I began my journey to learn the Composition API.\n\nWhen I arrived at the [Vuex documentation page](https://vuex.vuejs.org/), I saw this:\n\n![Announcement: The official state management library for Vue has changed to Pinia ](https://res.cloudinary.com/deepgram/image/upload/v1649699509/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/announcement-pinia-official_.png)\n\nWell, that was a surprise! I had been hearing the word \"Pinia\" in relation to Vue but didn't know exactly what it was. **Pinia is now the official state management library for Vue**!\n\nI pushed onwards with using Vuex in that project but made a mental note to come back soon to Pinia to find out what it is all about.\n\nSoon is now! Today I will learn a little about Pinia by building a to-do list. I'll show how I build it and provide some of my thoughts about the experience. Let's dive in!\n\n## The Project\n\nHere is a screenshot of the final project. It's a to-do list that lets me **add**, **delete**, and **check off** an item on the list.\n\nThe project repo can be found [here](https://github.com/SandraRodgers/todo-pinia).\n\n![Example of the to-do list app I'll build](https://res.cloudinary.com/deepgram/image/upload/v1649860305/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example1.png)\n\n## Getting Started with Pinia\n\nI'll create my Vue project (making sure to select Vue 3 since I want to use the Composition API). Pinia also works with Vue 2, but I've personally gone totally in on Vue 3 (and haven't looked back - check out [my series on Vue 3](https://blog.deepgram.com/diving-into-vue-3-getting-started/) to read about my journey).\n\n```bash\nvue create todo-pinia\n```\n\nAfter I `cd` into the project folder, I'll install pinia:\n\n```bash\nnpm install pinia\n```\n\nThen I'll go into the `main.js` file and import `createPinia`. This creates a Pinia instance to be used by my application. The `.use()` tells the Vue app to install Pinia as a plugin.\n\n```js\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\n\ncreateApp(App).use(createPinia()).mount('#app')\n```\n\nIn the `src` folder, in `components`, I'll create the three components that will make up my todo list app - `TodoApp.vue` (the parent component), `TodoForm.vue` (a child component), and `TodoList.vue` (another child component).\n\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/components-folder-with-files.png\" alt=\"Components folder with files\" style=\"width:50%\" />\n\nHere is the plan for how these components will be organized in the browser:\n\n![Example of the to-do list app with component outline](https://res.cloudinary.com/deepgram/image/upload/v1649861642/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example_components.png)\n\nIn each component, I can quickly scaffold out the basic code structure for my template and script. I do that with an extension in VS Code called [Vue VSCode Snippets](https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets). Since I have that, I just type the letters **vbase-3**, and the code writes itself for me:\n\n![vbase-3 snippet to scaffold out my code](https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/vbase-snippet.png)\n\nNow I'll import each component to where it needs to be -`TodoForm.vue` and `TodoList.vue` into the `TodoApp.vue` - and I'll import the `TodoApp.vue` component into `App.vue`. I like to write the name of the component in each to start so I can see them on the screen.\n\nHere's my screen now. The layout is there, but no logic or styles yet:\n\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/component-layout-browser.png\" alt=\"Component layout in browser\" style=\"width:50%\" />\n\n## Pinia - What is it?\n\nNext, I'll create a store and set up my global state with [Pinia](https://pinia.vuejs.org/).\n\nThe concept of a Pinia store is the same as it is for Vuex or Redux - **it is a place to hold global state**, and it makes it easy for any component in the project to track changes to that global state.\n\nNot all state needs to go in the store - just state properties that I want to make available throughout the app. This is especially useful when I want to share state between two sibling components like the `TodoForm.vue` and `TodoList.vue` because I can avoid sending props down ('prop drilling') and emitting events up through the parent.\n\n## Define a Pinia Store\n\nI will create a `store` folder in `src`, and in the folder, I'll make a file called `useTodoListStore.js`. I'm naming it starting with the word 'use' because a common convention of Vue 3, both for Pinia store files and for Vue composables, is to start the file name with 'use'.\n\nI can have as many stores as I want; in fact, **I should have separate stores for separate logical concerns**, similar to how Vue 3 composables are built around distinct logical concerns. Each store should be in a different file.\n\nHowever, since this is such a small project, I only need one store - **one store for the to-do list logic**.\n\nI will first import the `defineStore` function from Pinia. Under the hood, this is going to create the `useStore` function that I will need in my components to retrieve the store I made.\n\n```js\nimport { defineStore } from 'pinia'\n```\n\nI set it to a `const` and use the keyword `export` since I'll need to be able to import it into my components.\n\nThis `defineStore` function will take two arguments: a string (the unique name of the store) and an object (options such as state, getters, and actions).\n\n```js\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  // state\n  // getters\n  // actions\n})\n```\n\n## State, Getters, and Actions\n\nThe options that I pass to the `defineStore` function are my store's `state`, `getters`, and `actions`. Unlike Vuex, there is no longer the need for `mutations`. This makes me happy!\n\nI always found `mutations` confusing because it felt like I was repeating myself when I had to write an action to commit a mutation, which would then make the state change. Pinia has gotten rid of that middleman, and instead, the flow is just **action -> change state**.\n\nI already have a mental model around the way `methods`, `data`, and `computed` work in Vue 2. The `methods` make stuff happen, the `data` contains my state properties, and the `computed` returns an automatically updated property that has had a calculation performed on it.\n\nPinia's options follow the same mental model - I can think of the `state` as being like `data` in the Vue Options API, the `actions` like `methods`, and the `getters` like `computed` properties.\n\nI really like this change, and it's one of the first things that made me think, \"Wow, I think I'm really going to like Pinia!\"\n\n### Create Initial State\n\nNow I'll start creating a global state object in my `useTodoListStore`.\n\nThe state is actually a function, and it's recommended that I use an arrow function (this is because Pinia has excellent Typescript integration, and using an arrow function will allow Typescript inference to work on the state properties).\n\nI'll add a `todoList` property, which will be an array meant to contain each to-do item (each item is going to be an object, but there's nothing in the `todoList` array at the moment).\n\n```js\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  state: () => ({\n    todoList: [],\n  }),\n})\n```\n\n### Actions - Add and Delete an Item\n\nI can also set up my first action. I know the main logic to start will be adding an item to the to-do list. I'll write a function `addTodo` that will perform the logic of pushing an item object into the `todoList` array.\n\nIndividual `actions` are methods within the `actions` object in the store.\n\nI will also add an `id` property to state since I will want each item to have an id that increments each time a new item is pushed into the `toDoList` array:\n\n```js\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  state: () => ({\n    todoList: [],\n    id: 0,\n  }),\n  actions: {\n    addTodo(item) {\n      this.todoList.push({ item, id: this.id++, completed: false })\n    },\n  },\n})\n```\n\nMaybe while I'm here, I should go ahead and write an action to delete an item from the to-do list since I know I'll want to have a delete feature. Under the last line of code in the `addToDo` action, I'll add a `deleteTodo`:\n\n```js\ndeleteTodo(itemID) {\n  this.todoList = this.todoList.filter((object) => {\n    return object.id !== itemID;\n  });\n},\n```\n\n### Input Form to Add an Item\n\nI'll jump back into the `TodoForm.vue` component now. I want to write a form to enter a to-do item. I'll use the dev-tools to check that the item is getting into the `state` I set up in the Pinia store.\n\nIn the `template`, I'll create the basic form:\n\n```html\n{/*<!-- TodoForm.vue -->*/}\n\n<template>\n  <form @submit.prevent=\"\">\n    <input v-model=\"todo\" type=\"text\" /><button>Add</button>\n  </form>\n</template>\n```\n\nThe input has a `v-model=\"todo\"` which I'll connect to a `ref` in the `script` to make this property reactive so it updates as the user types the item into the input:\n\n```js\n// TodoForm.vue\n\n<script>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const todo = ref(\"\");\n    return { todo };\n  },\n};\n<\/script>\n```\n\nI haven't added a method yet for the `@submit` event listener because I need to set up the logic in the `script` first. The submit button is going to trigger a function to add an item to the todo list, so I'll need to somehow invoke the `addTodo` action in the store.\n\n## Access Pinia Store from a Component\n\nTo use a Pinia store in a component, I need to import the store and then set a `const store` to the invoked store function:\n\n```js\n// TodoForm.vue\n\nimport { useTodoListStore } from '@/store/useTodoListStore'\nexport default {\n  setup() {\n    const todo = ref('')\n    // use Pinia store:\n    const store = useTodoListStore()\n\n    return { todo }\n  },\n}\n```\n\nNow I will have access to state, actions, and getters in the store through that `const store`.\n\nI'll write a method in the `TodoForm.vue` component that will be triggered when the submit button is clicked. I want that method to do two things: add an item to the `todoList` array in the store, and clear the `todo` `ref` so it returns to being an empty string after the item is added to the list:\n\n```js\n// in setup function in script in TodoForm.vue:\n\nfunction addItemAndClear(item) {\n  if (item.length === 0) {\n    return\n  }\n  // invokes function in the store:\n  store.addTodo(item)\n  todo.value = ''\n}\n```\n\nAnd I'll make sure that function is added to the form's `@submit` event listener in the template:\n\n```js\n<form @submit.prevent=\"addItemAndClear(todo)\">\n```\n\nI'll type `npm run serve` in the terminal to start up the Vue development server.\n\nNow I can open the Vue dev-tools and see that the item is being added to the `todoList` array in the store.\n\n![Gif showing an item added to the to-do list and data in the store](https://res.cloudinary.com/deepgram/image/upload/v1649704298/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-todo.gif)\n\n## Reactive Properties in Pinia\n\nIn the previous section, I used an action from the Pinia store - `addTodo` - in my `todoForm.vue` component. In this section, I'll use a state property in the `todoList.vue` component, and I need it to be reactive to changes that might happen. I'll be using it in the component `template`, and it has to be reactive so it updates in sync with the state change.\n\nThere's an important function I'll want to use that comes with the Pinia library - `storeToRefs`. Each to-do list item displayed in the `todoList` component will actually come from the store, and since the store's state is an object, I will use this helper method to destructure the returned object without losing reactivity. It is similar to Vue 3's [utility function `toRefs`](https://vuejs.org/api/reactivity-utilities.html#torefs). I'll demonstrate its usage as I build the next feature.\n\n### Todo List - Show Item\n\nI want access to the `todoList` that's in the store (which now has data to represent the items I've added to the list), so in the `todoList.vue` component I'll need to bring in the store, just like I did in `todoForm.vue`. I'll also set `const store` to the invoked store function.\n\nThen I need to wrap the `todoList` property that I want to pull from the store in the function `storeToRefs`:\n\n```js\n<script>\nimport { useTodoListStore } from \"../store/useTodoListStore\";\nimport { storeToRefs } from \"pinia\";\nexport default {\n  setup() {\n    const store = useTodoListStore();\n    // storeToRefs lets todoList keep reactivity:\n    const { todoList } = storeToRefs(store);\n\n    return { todoList };\n  },\n};\n<\/script>\n```\n\nNow I can use `todoList` in my `template`, and it will stay in sync with the store. I'll write a `v-for` loop to create the list:\n\n```html\n<template>\n  <div v-for=\"todo in todoList\" :key=\"todo.id\">\n    <div>{{ todo.item }}</div>\n  </div>\n</template>\n```\n\nAnd the list is displaying now:\n\n![Gif showing the list as items are added](https://res.cloudinary.com/deepgram/image/upload/v1649863854/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/show-list-example_.gif)\n\n### To-do List - Mark as Completed\n\nI want to add some styles to each item to show if the to-do item has been completed.\n\nFirst, I need the logic to toggle an item to be complete or not complete. Right now, in the store, each item that is added to the list also has a `completed` property set to `false`:\n\n```js\n// useTodoListStore.js\n\nthis.todoList.push({ item, id: this.id++, completed: false })\n```\n\nI can write an action in the store to toggle that to true:\n\n```js\ntoggleCompleted(idToFind) {\n      const todo = this.todoList.find((obj) => obj.id === idToFind);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n```\n\nIn the `todoList.vue` component, I'll add a checkmark emoji as a `span` to the `template` with an event listener to listen for a click on the checkmark. The Unicode is `&#10004;` for a checkmark.\n\n```js\n<div v-for=\"todo in todoList\" :key=\"todo.id\">\n    <div>\n      <span>{{ todo.item }}</span>\n      <span @click.stop=\"toggleCompleted(todo.id)\">&#10004;</span>\n    </div>\n  </div>\n```\n\nHowever, I need to make sure that I have brought `toggleCompleted` into the component. Since it's an **action** method and not a reactive state property, I won't use `storeToRefs` for `toggleCompleted`:\n\n```js\n<script>\nimport { useTodoListStore } from \"../store/useTodoListStore\";\nimport { storeToRefs } from \"pinia\";\nexport default {\n  setup() {\n    const store = useTodoListStore();\n    const { todoList } = storeToRefs(store);\n    // destructuring action method doesn't require using storeToRefs:\n    const { toggleCompleted } = store;\n\n    return { todoList, toggleCompleted };\n  },\n};\n<\/script>\n```\n\nTo add the styles, I first will add a dynamic class to the to-do item `span` in the template:\n\n```js\n<span :class=\"{ completed: todo.completed }\">{{ todo.item }}</span>\n```\n\nAnd CSS to change the look of the item as it is toggled true and false:\n\n```css\n/* CSS Styles */\n\n.completed {\n  text-decoration: line-through;\n}\n```\n\n![Gif showing an item marked complete with checkmark](https://res.cloudinary.com/deepgram/image/upload/v1649864263/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/check-complete.gif)\n\n### To-Do List - Delete Item\n\nI had already added the `deleteTodo` function to the store, so I can jump into writing the delete feature in the `todoList.vue` component.\n\nI'll do the same thing I did in the previous section, bringing in the store's action `deleteTodo` and using a cross mark emoji for the delete button. I won't explain every step since I just need to repeat what I did in the previous section for marking an item complete, but this time hooking it up to the delete action. But I'll show the code.\n\nHere's the `todoList.vue` component after I added the delete feature:\n\n```js\n// todoList.vue\n\n<template>\n  <div v-for=\"todo in todoList\" :key=\"todo.id\">\n    <div>\n      <span :class=\"{ completed: todo.completed }\">{{ todo.item }}</span>\n      <span @click.stop=\"toggleCompleted(todo.id)\">&#10004;</span>\n      <span @click=\"deleteTodo(todo.id)\">&#10060;</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useTodoListStore } from \"../store/useTodoListStore\";\nimport { storeToRefs } from \"pinia\";\nexport default {\n  setup() {\n    const store = useTodoListStore();\n    const { todoList } = storeToRefs(store);\n    const { toggleCompleted, deleteTodo } = store;\n\n    return { todoList, toggleCompleted, deleteTodo };\n  },\n};\n<\/script>\n\n<style>\n.completed {\n  text-decoration: line-through;\n}\n</style>\n\n```\n\nAnd here is the **store** now that I have all the logic working:\n\n```js\n// useTodoListStore\n\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  state: () => ({\n    todoList: [],\n    id: 0,\n  }),\n  actions: {\n    addTodo(item) {\n      this.todoList.push({ item, id: this.id++, completed: false })\n    },\n    deleteTodo(itemID) {\n      this.todoList = this.todoList.filter((object) => {\n        return object.id !== itemID\n      })\n    },\n    toggleCompleted(idToFind) {\n      const todo = this.todoList.find((obj) => obj.id === idToFind)\n      if (todo) {\n        todo.completed = !todo.completed\n      }\n    },\n  },\n})\n```\n\nI've finished a barebones to-do list app with Pinia, minus styling. This code is available on the 'just-pinia' branch of [my project repo](https://github.com/SandraRodgers/todo-pinia/tree/just-pinia) for anyone who would like to see it in its entirety.\n\n## Bonus Section: Add Typescript\n\nOne of the best features of Pinia is that **it works very well with Typescript**. I first chose to build the to-do list without Typescript so I could just focus on how to use Pinia, but I also want to demonstrate how it works with Typescript since that is a huge advantage of Pinia.\n\nSetting up Vuex with Typescript was always challenging for me because of the need to create custom complex wrappers. It wasn't easy to just dive in.\n\nBut with Pinia, I don't have to do that. I can just add Typescript to my project and start using it.\n\nI'll add Typescript to my existing project with this command:\n\n```js\nvue add Typescript\n```\n\nWhen it prompts me to make some choices, I'll be sure to say yes to \"Convert all .js files to .ts\". That way it will turn the store file into a `.ts` file.\n\n![Prompts when adding Typescript to Vue project](https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-typescript-to-vue-prompts.png)\n\nThen I'll delete the `HelloWorld` file because I don't need that. I might need to delete one of the `extends` properties from the `.eslintrc.js` file.\n\nI'll go to the store file and see that Typescript is pointing out all the missing types I need to add.\n\n![Store with Typescript errors](https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/store-with-typescript-errors.png)\n\nI'm not going to go through how to use Typescript since this blog post isn't meant to teach how to write Typescript. But I'll add the types and show how my store looks after I revise it to include Typescript:\n\n```js\nimport { defineStore } from \"pinia\";\n\ninterface ToDoItem {\n  item: string;\n  id: number;\n  completed: boolean;\n}\n\nexport const useTodoListStore = defineStore(\"todoList\", {\n  state: () => ({\n    todoList: [] as ToDoItem[],\n    id: 0,\n  }),\n  actions: {\n    addTodo(item: string) {\n      this.todoList.push({ item, id: this.id++, completed: false });\n    },\n    deleteTodo(itemID: number) {\n      this.todoList = this.todoList.filter((object) => {\n        return object.id !== itemID;\n      });\n    },\n    toggleCompleted(idToFind: number) {\n      const todo = this.todoList.find((obj) => obj.id === idToFind);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n  },\n});\n```\n\nIn the components, I'll need to add `lang=\"ts\"` to the script and import `defineComponent`. The export will need to be wrapped in the `defineComponent` function.\n\n```js\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nexport default defineComponent({\n...\n});\n<\/script>\n```\n\nAnd that's how I would add Typescript to my project after-the fact; although I highly recommend starting the project from the beginning with Typescript, since it will help with the developer experience of catching errors and thinking about types.\n\nThe Typescript version of the to-do list can be found in my repo on the branch called [pinia-typescript](https://github.com/SandraRodgers/todo-pinia/tree/pinia-typescript).\n\n## Conclusion\n\nI went through creating a to-do list using just Pinia and then I also showed how to build one with Typescript. I've since added styles and an alert feature to the application, and the most updated code can be found on the main branch of the [project repo](https://github.com/SandraRodgers/todo-pinia/tree/main).\n\nI hope this blog post has been helpful. I'm very excited about Pinia because of how straightforward it was to jump in and start using, especially with Typescript.\n\nIf you have any questions, feel free to reach out on [Twitter](https://twitter.com/sandra_rodgers_)!\n\n        ", "html": '<p>I was building a Vue 3 project for my recent blog series on <a href="https://blog.deepgram.com/build-a-livestream-web-application-vue-and-express-setup/">how to build a full-stack live streaming web app</a>. I wanted to use Vuex to manage some global state properties. It was my first time using Vuex with Vue 3 since I began my journey to learn the Composition API.</p>\n<p>When I arrived at the <a href="https://vuex.vuejs.org/">Vuex documentation page</a>, I saw this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649699509/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/announcement-pinia-official_.png" alt="Announcement: The official state management library for Vue has changed to Pinia "></p>\n<p>Well, that was a surprise! I had been hearing the word \u201CPinia\u201D in relation to Vue but didn\u2019t know exactly what it was. <strong>Pinia is now the official state management library for Vue</strong>!</p>\n<p>I pushed onwards with using Vuex in that project but made a mental note to come back soon to Pinia to find out what it is all about.</p>\n<p>Soon is now! Today I will learn a little about Pinia by building a to-do list. I\u2019ll show how I build it and provide some of my thoughts about the experience. Let\u2019s dive in!</p>\n<h2 id="the-project">The Project</h2>\n<p>Here is a screenshot of the final project. It\u2019s a to-do list that lets me <strong>add</strong>, <strong>delete</strong>, and <strong>check off</strong> an item on the list.</p>\n<p>The project repo can be found <a href="https://github.com/SandraRodgers/todo-pinia">here</a>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649860305/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example1.png" alt="Example of the to-do list app I&#x27;ll build"></p>\n<h2 id="getting-started-with-pinia">Getting Started with Pinia</h2>\n<p>I\u2019ll create my Vue project (making sure to select Vue 3 since I want to use the Composition API). Pinia also works with Vue 2, but I\u2019ve personally gone totally in on Vue 3 (and haven\u2019t looked back - check out <a href="https://blog.deepgram.com/diving-into-vue-3-getting-started/">my series on Vue 3</a> to read about my journey).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue create todo-pinia</span></span></code></pre>\n<p>After I <code is:raw>cd</code> into the project folder, I\u2019ll install pinia:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm install pinia</span></span></code></pre>\n<p>Then I\u2019ll go into the <code is:raw>main.js</code> file and import <code is:raw>createPinia</code>. This creates a Pinia instance to be used by my application. The <code is:raw>.use()</code> tells the Vue app to install Pinia as a plugin.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createPinia } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">createPinia</span><span style="color: #C9D1D9">()).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>In the <code is:raw>src</code> folder, in <code is:raw>components</code>, I\u2019ll create the three components that will make up my todo list app - <code is:raw>TodoApp.vue</code> (the parent component), <code is:raw>TodoForm.vue</code> (a child component), and <code is:raw>TodoList.vue</code> (another child component).</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/components-folder-with-files.png" alt="Components folder with files" style="width:50%" />\n<p>Here is the plan for how these components will be organized in the browser:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649861642/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example_components.png" alt="Example of the to-do list app with component outline"></p>\n<p>In each component, I can quickly scaffold out the basic code structure for my template and script. I do that with an extension in VS Code called <a href="https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets">Vue VSCode Snippets</a>. Since I have that, I just type the letters <strong>vbase-3</strong>, and the code writes itself for me:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/vbase-snippet.png" alt="vbase-3 snippet to scaffold out my code"></p>\n<p>Now I\u2019ll import each component to where it needs to be -<code is:raw>TodoForm.vue</code> and <code is:raw>TodoList.vue</code> into the <code is:raw>TodoApp.vue</code> - and I\u2019ll import the <code is:raw>TodoApp.vue</code> component into <code is:raw>App.vue</code>. I like to write the name of the component in each to start so I can see them on the screen.</p>\n<p>Here\u2019s my screen now. The layout is there, but no logic or styles yet:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/component-layout-browser.png" alt="Component layout in browser" style="width:50%" />\n<h2 id="pinia---what-is-it">Pinia - What is it?</h2>\n<p>Next, I\u2019ll create a store and set up my global state with <a href="https://pinia.vuejs.org/">Pinia</a>.</p>\n<p>The concept of a Pinia store is the same as it is for Vuex or Redux - <strong>it is a place to hold global state</strong>, and it makes it easy for any component in the project to track changes to that global state.</p>\n<p>Not all state needs to go in the store - just state properties that I want to make available throughout the app. This is especially useful when I want to share state between two sibling components like the <code is:raw>TodoForm.vue</code> and <code is:raw>TodoList.vue</code> because I can avoid sending props down (\u2018prop drilling\u2019) and emitting events up through the parent.</p>\n<h2 id="define-a-pinia-store">Define a Pinia Store</h2>\n<p>I will create a <code is:raw>store</code> folder in <code is:raw>src</code>, and in the folder, I\u2019ll make a file called <code is:raw>useTodoListStore.js</code>. I\u2019m naming it starting with the word \u2018use\u2019 because a common convention of Vue 3, both for Pinia store files and for Vue composables, is to start the file name with \u2018use\u2019.</p>\n<p>I can have as many stores as I want; in fact, <strong>I should have separate stores for separate logical concerns</strong>, similar to how Vue 3 composables are built around distinct logical concerns. Each store should be in a different file.</p>\n<p>However, since this is such a small project, I only need one store - <strong>one store for the to-do list logic</strong>.</p>\n<p>I will first import the <code is:raw>defineStore</code> function from Pinia. Under the hood, this is going to create the <code is:raw>useStore</code> function that I will need in my components to retrieve the store I made.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span></code></pre>\n<p>I set it to a <code is:raw>const</code> and use the keyword <code is:raw>export</code> since I\u2019ll need to be able to import it into my components.</p>\n<p>This <code is:raw>defineStore</code> function will take two arguments: a string (the unique name of the store) and an object (options such as state, getters, and actions).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// state</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// getters</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// actions</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="state-getters-and-actions">State, Getters, and Actions</h2>\n<p>The options that I pass to the <code is:raw>defineStore</code> function are my store\u2019s <code is:raw>state</code>, <code is:raw>getters</code>, and <code is:raw>actions</code>. Unlike Vuex, there is no longer the need for <code is:raw>mutations</code>. This makes me happy!</p>\n<p>I always found <code is:raw>mutations</code> confusing because it felt like I was repeating myself when I had to write an action to commit a mutation, which would then make the state change. Pinia has gotten rid of that middleman, and instead, the flow is just <strong>action -> change state</strong>.</p>\n<p>I already have a mental model around the way <code is:raw>methods</code>, <code is:raw>data</code>, and <code is:raw>computed</code> work in Vue 2. The <code is:raw>methods</code> make stuff happen, the <code is:raw>data</code> contains my state properties, and the <code is:raw>computed</code> returns an automatically updated property that has had a calculation performed on it.</p>\n<p>Pinia\u2019s options follow the same mental model - I can think of the <code is:raw>state</code> as being like <code is:raw>data</code> in the Vue Options API, the <code is:raw>actions</code> like <code is:raw>methods</code>, and the <code is:raw>getters</code> like <code is:raw>computed</code> properties.</p>\n<p>I really like this change, and it\u2019s one of the first things that made me think, \u201CWow, I think I\u2019m really going to like Pinia!\u201D</p>\n<h3 id="create-initial-state">Create Initial State</h3>\n<p>Now I\u2019ll start creating a global state object in my <code is:raw>useTodoListStore</code>.</p>\n<p>The state is actually a function, and it\u2019s recommended that I use an arrow function (this is because Pinia has excellent Typescript integration, and using an arrow function will allow Typescript inference to work on the state properties).</p>\n<p>I\u2019ll add a <code is:raw>todoList</code> property, which will be an array meant to contain each to-do item (each item is going to be an object, but there\u2019s nothing in the <code is:raw>todoList</code> array at the moment).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h3 id="actions---add-and-delete-an-item">Actions - Add and Delete an Item</h3>\n<p>I can also set up my first action. I know the main logic to start will be adding an item to the to-do list. I\u2019ll write a function <code is:raw>addTodo</code> that will perform the logic of pushing an item object into the <code is:raw>todoList</code> array.</p>\n<p>Individual <code is:raw>actions</code> are methods within the <code is:raw>actions</code> object in the store.</p>\n<p>I will also add an <code is:raw>id</code> property to state since I will want each item to have an id that increments each time a new item is pushed into the <code is:raw>toDoList</code> array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Maybe while I\u2019m here, I should go ahead and write an action to delete an item from the to-do list since I know I\u2019ll want to have a delete feature. Under the last line of code in the <code is:raw>addToDo</code> action, I\u2019ll add a <code is:raw>deleteTodo</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(itemID) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID;</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<h3 id="input-form-to-add-an-item">Input Form to Add an Item</h3>\n<p>I\u2019ll jump back into the <code is:raw>TodoForm.vue</code> component now. I want to write a form to enter a to-do item. I\u2019ll use the dev-tools to check that the item is getting into the <code is:raw>state</code> I set up in the Pinia store.</p>\n<p>In the <code is:raw>template</code>, I\u2019ll create the basic form:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- TodoForm.vue --&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@submit.prevent</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Add&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The input has a <code is:raw>v-model="todo"</code> which I\u2019ll connect to a <code is:raw>ref</code> in the <code is:raw>script</code> to make this property reactive so it updates as the user types the item into the input:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// TodoForm.vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const todo </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    return { todo };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>I haven\u2019t added a method yet for the <code is:raw>@submit</code> event listener because I need to set up the logic in the <code is:raw>script</code> first. The submit button is going to trigger a function to add an item to the todo list, so I\u2019ll need to somehow invoke the <code is:raw>addTodo</code> action in the store.</p>\n<h2 id="access-pinia-store-from-a-component">Access Pinia Store from a Component</h2>\n<p>To use a Pinia store in a component, I need to import the store and then set a <code is:raw>const store</code> to the invoked store function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// TodoForm.vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { useTodoListStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@/store/useTodoListStore&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> {</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #D2A8FF">setup</span><span style="color: #FFA657">() </span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// use Pinia store:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">store</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { todo }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">}</span></span></code></pre>\n<p>Now I will have access to state, actions, and getters in the store through that <code is:raw>const store</code>.</p>\n<p>I\u2019ll write a method in the <code is:raw>TodoForm.vue</code> component that will be triggered when the submit button is clicked. I want that method to do two things: add an item to the <code is:raw>todoList</code> array in the store, and clear the <code is:raw>todo</code> <code is:raw>ref</code> so it returns to being an empty string after the item is added to the list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in setup function in script in TodoForm.vue:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addItemAndClear</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (item.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// invokes function in the store:</span></span>\n<span class="line"><span style="color: #C9D1D9">  store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(item)</span></span>\n<span class="line"><span style="color: #C9D1D9">  todo.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>And I\u2019ll make sure that function is added to the form\u2019s <code is:raw>@submit</code> event listener in the template:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@submit.prevent=&quot;addItemAndClear(todo)&quot;&gt;</span></span></code></pre>\n<p>I\u2019ll type <code is:raw>npm run serve</code> in the terminal to start up the Vue development server.</p>\n<p>Now I can open the Vue dev-tools and see that the item is being added to the <code is:raw>todoList</code> array in the store.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649704298/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-todo.gif" alt="Gif showing an item added to the to-do list and data in the store"></p>\n<h2 id="reactive-properties-in-pinia">Reactive Properties in Pinia</h2>\n<p>In the previous section, I used an action from the Pinia store - <code is:raw>addTodo</code> - in my <code is:raw>todoForm.vue</code> component. In this section, I\u2019ll use a state property in the <code is:raw>todoList.vue</code> component, and I need it to be reactive to changes that might happen. I\u2019ll be using it in the component <code is:raw>template</code>, and it has to be reactive so it updates in sync with the state change.</p>\n<p>There\u2019s an important function I\u2019ll want to use that comes with the Pinia library - <code is:raw>storeToRefs</code>. Each to-do list item displayed in the <code is:raw>todoList</code> component will actually come from the store, and since the store\u2019s state is an object, I will use this helper method to destructure the returned object without losing reactivity. It is similar to Vue 3\u2019s <a href="https://vuejs.org/api/reactivity-utilities.html#torefs">utility function <code is:raw>toRefs</code></a>. I\u2019ll demonstrate its usage as I build the next feature.</p>\n<h3 id="todo-list---show-item">Todo List - Show Item</h3>\n<p>I want access to the <code is:raw>todoList</code> that\u2019s in the store (which now has data to represent the items I\u2019ve added to the list), so in the <code is:raw>todoList.vue</code> component I\u2019ll need to bring in the store, just like I did in <code is:raw>todoForm.vue</code>. I\u2019ll also set <code is:raw>const store</code> to the invoked store function.</p>\n<p>Then I need to wrap the <code is:raw>todoList</code> property that I want to pull from the store in the function <code is:raw>storeToRefs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;pinia&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// storeToRefs lets todoList keep reactivity:</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { todoList };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Now I can use <code is:raw>todoList</code> in my <code is:raw>template</code>, and it will stay in sync with the store. I\u2019ll write a <code is:raw>v-for</code> loop to create the list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">:key</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo.id&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;{{ todo.item }}&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>And the list is displaying now:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649863854/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/show-list-example_.gif" alt="Gif showing the list as items are added"></p>\n<h3 id="to-do-list---mark-as-completed">To-do List - Mark as Completed</h3>\n<p>I want to add some styles to each item to show if the to-do item has been completed.</p>\n<p>First, I need the logic to toggle an item to be complete or not complete. Right now, in the store, each item that is added to the list also has a <code is:raw>completed</code> property set to <code is:raw>false</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// useTodoListStore.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>I can write an action in the store to toggle that to true:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(idToFind) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind);</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span></code></pre>\n<p>In the <code is:raw>todoList.vue</code> component, I\u2019ll add a checkmark emoji as a <code is:raw>span</code> to the <code is:raw>template</code> with an event listener to listen for a click on the checkmark. The Unicode is <code is:raw>&amp;#10004;</code> for a checkmark.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:key=&quot;todo.id&quot;&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click.stop=&quot;toggleCompleted(todo.id)&quot;&gt;&amp;#10004;&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span></code></pre>\n<p>However, I need to make sure that I have brought <code is:raw>toggleCompleted</code> into the component. Since it\u2019s an <strong>action</strong> method and not a reactive state property, I won\u2019t use <code is:raw>storeToRefs</code> for <code is:raw>toggleCompleted</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;pinia&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// destructuring action method doesn&#39;t require using storeToRefs:</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { toggleCompleted } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { todoList, toggleCompleted };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>To add the styles, I first will add a dynamic class to the to-do item <code is:raw>span</code> in the template:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:class=&quot;{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">completed:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}&quot;&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span></code></pre>\n<p>And CSS to change the look of the item as it is toggled true and false:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">/* CSS Styles */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">.completed</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">text-decoration</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">line-through</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649864263/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/check-complete.gif" alt="Gif showing an item marked complete with checkmark"></p>\n<h3 id="to-do-list---delete-item">To-Do List - Delete Item</h3>\n<p>I had already added the <code is:raw>deleteTodo</code> function to the store, so I can jump into writing the delete feature in the <code is:raw>todoList.vue</code> component.</p>\n<p>I\u2019ll do the same thing I did in the previous section, bringing in the store\u2019s action <code is:raw>deleteTodo</code> and using a cross mark emoji for the delete button. I won\u2019t explain every step since I just need to repeat what I did in the previous section for marking an item complete, but this time hooking it up to the delete action. But I\u2019ll show the code.</p>\n<p>Here\u2019s the <code is:raw>todoList.vue</code> component after I added the delete feature:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// todoList.vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:key=&quot;todo.id&quot;&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:class=&quot;{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">completed:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}&quot;&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click.stop=&quot;toggleCompleted(todo.id)&quot;&gt;&amp;#10004;&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;deleteTodo(todo.id)&quot;&gt;&amp;#10060;&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/template&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA198">&lt;script&gt;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;../store/useTodoListStore&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;pinia&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"><span style="color: #79C0FF">export</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { toggleCompleted, deleteTodo } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { todoList, toggleCompleted, deleteTodo };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #FFA198">,</span></span>\n<span class="line"><span style="color: #FFA198">};</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/script&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA198">&lt;style&gt;</span></span>\n<span class="line"><span style="color: #FFA198">.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  text</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">decoration: line</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">through;</span></span>\n<span class="line"><span style="color: #FF7B72">}</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/style&gt;</span></span>\n<span class="line"></span></code></pre>\n<p>And here is the <strong>store</strong> now that I have all the logic working:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// useTodoListStore</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">itemID</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">idToFind</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>I\u2019ve finished a barebones to-do list app with Pinia, minus styling. This code is available on the \u2018just-pinia\u2019 branch of <a href="https://github.com/SandraRodgers/todo-pinia/tree/just-pinia">my project repo</a> for anyone who would like to see it in its entirety.</p>\n<h2 id="bonus-section-add-typescript">Bonus Section: Add Typescript</h2>\n<p>One of the best features of Pinia is that <strong>it works very well with Typescript</strong>. I first chose to build the to-do list without Typescript so I could just focus on how to use Pinia, but I also want to demonstrate how it works with Typescript since that is a huge advantage of Pinia.</p>\n<p>Setting up Vuex with Typescript was always challenging for me because of the need to create custom complex wrappers. It wasn\u2019t easy to just dive in.</p>\n<p>But with Pinia, I don\u2019t have to do that. I can just add Typescript to my project and start using it.</p>\n<p>I\u2019ll add Typescript to my existing project with this command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue add Typescript</span></span></code></pre>\n<p>When it prompts me to make some choices, I\u2019ll be sure to say yes to \u201CConvert all .js files to .ts\u201D. That way it will turn the store file into a <code is:raw>.ts</code> file.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-typescript-to-vue-prompts.png" alt="Prompts when adding Typescript to Vue project"></p>\n<p>Then I\u2019ll delete the <code is:raw>HelloWorld</code> file because I don\u2019t need that. I might need to delete one of the <code is:raw>extends</code> properties from the <code is:raw>.eslintrc.js</code> file.</p>\n<p>I\u2019ll go to the store file and see that Typescript is pointing out all the missing types I need to add.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/store-with-typescript-errors.png" alt="Store with Typescript errors"></p>\n<p>I\u2019m not going to go through how to use Typescript since this blog post isn\u2019t meant to teach how to write Typescript. But I\u2019ll add the types and show how my store looks after I revise it to include Typescript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;pinia&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">interface</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">ToDoItem</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">string</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">id</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">completed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">boolean</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;todoList&quot;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [] </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">ToDoItem</span><span style="color: #C9D1D9">[],</span></span>\n<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">string</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> });</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">itemID</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID;</span></span>\n<span class="line"><span style="color: #C9D1D9">      });</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">idToFind</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind);</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">});</span></span></code></pre>\n<p>In the components, I\u2019ll need to add <code is:raw>lang="ts"</code> to the script and import <code is:raw>defineComponent</code>. The export will need to be wrapped in the <code is:raw>defineComponent</code> function.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;ts&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> defineComponent </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default defineComponent(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>And that\u2019s how I would add Typescript to my project after-the fact; although I highly recommend starting the project from the beginning with Typescript, since it will help with the developer experience of catching errors and thinking about types.</p>\n<p>The Typescript version of the to-do list can be found in my repo on the branch called <a href="https://github.com/SandraRodgers/todo-pinia/tree/pinia-typescript">pinia-typescript</a>.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>I went through creating a to-do list using just Pinia and then I also showed how to build one with Typescript. I\u2019ve since added styles and an alert feature to the application, and the most updated code can be found on the main branch of the <a href="https://github.com/SandraRodgers/todo-pinia/tree/main">project repo</a>.</p>\n<p>I hope this blog post has been helpful. I\u2019m very excited about Pinia because of how straightforward it was to jump in and start using, especially with Typescript.</p>\n<p>If you have any questions, feel free to reach out on <a href="https://twitter.com/sandra_rodgers_">Twitter</a>!</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-a-todo-list-with-pinia-and-vue-3/index.md" };
function rawContent() {
  return "\nI was building a Vue 3 project for my recent blog series on [how to build a full-stack live streaming web app](https://blog.deepgram.com/build-a-livestream-web-application-vue-and-express-setup/). I wanted to use Vuex to manage some global state properties. It was my first time using Vuex with Vue 3 since I began my journey to learn the Composition API.\n\nWhen I arrived at the [Vuex documentation page](https://vuex.vuejs.org/), I saw this:\n\n![Announcement: The official state management library for Vue has changed to Pinia ](https://res.cloudinary.com/deepgram/image/upload/v1649699509/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/announcement-pinia-official_.png)\n\nWell, that was a surprise! I had been hearing the word \"Pinia\" in relation to Vue but didn't know exactly what it was. **Pinia is now the official state management library for Vue**!\n\nI pushed onwards with using Vuex in that project but made a mental note to come back soon to Pinia to find out what it is all about.\n\nSoon is now! Today I will learn a little about Pinia by building a to-do list. I'll show how I build it and provide some of my thoughts about the experience. Let's dive in!\n\n## The Project\n\nHere is a screenshot of the final project. It's a to-do list that lets me **add**, **delete**, and **check off** an item on the list.\n\nThe project repo can be found [here](https://github.com/SandraRodgers/todo-pinia).\n\n![Example of the to-do list app I'll build](https://res.cloudinary.com/deepgram/image/upload/v1649860305/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example1.png)\n\n## Getting Started with Pinia\n\nI'll create my Vue project (making sure to select Vue 3 since I want to use the Composition API). Pinia also works with Vue 2, but I've personally gone totally in on Vue 3 (and haven't looked back - check out [my series on Vue 3](https://blog.deepgram.com/diving-into-vue-3-getting-started/) to read about my journey).\n\n```bash\nvue create todo-pinia\n```\n\nAfter I `cd` into the project folder, I'll install pinia:\n\n```bash\nnpm install pinia\n```\n\nThen I'll go into the `main.js` file and import `createPinia`. This creates a Pinia instance to be used by my application. The `.use()` tells the Vue app to install Pinia as a plugin.\n\n```js\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\n\ncreateApp(App).use(createPinia()).mount('#app')\n```\n\nIn the `src` folder, in `components`, I'll create the three components that will make up my todo list app - `TodoApp.vue` (the parent component), `TodoForm.vue` (a child component), and `TodoList.vue` (another child component).\n\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/components-folder-with-files.png\" alt=\"Components folder with files\" style=\"width:50%\" />\n\nHere is the plan for how these components will be organized in the browser:\n\n![Example of the to-do list app with component outline](https://res.cloudinary.com/deepgram/image/upload/v1649861642/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example_components.png)\n\nIn each component, I can quickly scaffold out the basic code structure for my template and script. I do that with an extension in VS Code called [Vue VSCode Snippets](https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets). Since I have that, I just type the letters **vbase-3**, and the code writes itself for me:\n\n![vbase-3 snippet to scaffold out my code](https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/vbase-snippet.png)\n\nNow I'll import each component to where it needs to be -`TodoForm.vue` and `TodoList.vue` into the `TodoApp.vue` - and I'll import the `TodoApp.vue` component into `App.vue`. I like to write the name of the component in each to start so I can see them on the screen.\n\nHere's my screen now. The layout is there, but no logic or styles yet:\n\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/component-layout-browser.png\" alt=\"Component layout in browser\" style=\"width:50%\" />\n\n## Pinia - What is it?\n\nNext, I'll create a store and set up my global state with [Pinia](https://pinia.vuejs.org/).\n\nThe concept of a Pinia store is the same as it is for Vuex or Redux - **it is a place to hold global state**, and it makes it easy for any component in the project to track changes to that global state.\n\nNot all state needs to go in the store - just state properties that I want to make available throughout the app. This is especially useful when I want to share state between two sibling components like the `TodoForm.vue` and `TodoList.vue` because I can avoid sending props down ('prop drilling') and emitting events up through the parent.\n\n## Define a Pinia Store\n\nI will create a `store` folder in `src`, and in the folder, I'll make a file called `useTodoListStore.js`. I'm naming it starting with the word 'use' because a common convention of Vue 3, both for Pinia store files and for Vue composables, is to start the file name with 'use'.\n\nI can have as many stores as I want; in fact, **I should have separate stores for separate logical concerns**, similar to how Vue 3 composables are built around distinct logical concerns. Each store should be in a different file.\n\nHowever, since this is such a small project, I only need one store - **one store for the to-do list logic**.\n\nI will first import the `defineStore` function from Pinia. Under the hood, this is going to create the `useStore` function that I will need in my components to retrieve the store I made.\n\n```js\nimport { defineStore } from 'pinia'\n```\n\nI set it to a `const` and use the keyword `export` since I'll need to be able to import it into my components.\n\nThis `defineStore` function will take two arguments: a string (the unique name of the store) and an object (options such as state, getters, and actions).\n\n```js\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  // state\n  // getters\n  // actions\n})\n```\n\n## State, Getters, and Actions\n\nThe options that I pass to the `defineStore` function are my store's `state`, `getters`, and `actions`. Unlike Vuex, there is no longer the need for `mutations`. This makes me happy!\n\nI always found `mutations` confusing because it felt like I was repeating myself when I had to write an action to commit a mutation, which would then make the state change. Pinia has gotten rid of that middleman, and instead, the flow is just **action -> change state**.\n\nI already have a mental model around the way `methods`, `data`, and `computed` work in Vue 2. The `methods` make stuff happen, the `data` contains my state properties, and the `computed` returns an automatically updated property that has had a calculation performed on it.\n\nPinia's options follow the same mental model - I can think of the `state` as being like `data` in the Vue Options API, the `actions` like `methods`, and the `getters` like `computed` properties.\n\nI really like this change, and it's one of the first things that made me think, \"Wow, I think I'm really going to like Pinia!\"\n\n### Create Initial State\n\nNow I'll start creating a global state object in my `useTodoListStore`.\n\nThe state is actually a function, and it's recommended that I use an arrow function (this is because Pinia has excellent Typescript integration, and using an arrow function will allow Typescript inference to work on the state properties).\n\nI'll add a `todoList` property, which will be an array meant to contain each to-do item (each item is going to be an object, but there's nothing in the `todoList` array at the moment).\n\n```js\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  state: () => ({\n    todoList: [],\n  }),\n})\n```\n\n### Actions - Add and Delete an Item\n\nI can also set up my first action. I know the main logic to start will be adding an item to the to-do list. I'll write a function `addTodo` that will perform the logic of pushing an item object into the `todoList` array.\n\nIndividual `actions` are methods within the `actions` object in the store.\n\nI will also add an `id` property to state since I will want each item to have an id that increments each time a new item is pushed into the `toDoList` array:\n\n```js\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  state: () => ({\n    todoList: [],\n    id: 0,\n  }),\n  actions: {\n    addTodo(item) {\n      this.todoList.push({ item, id: this.id++, completed: false })\n    },\n  },\n})\n```\n\nMaybe while I'm here, I should go ahead and write an action to delete an item from the to-do list since I know I'll want to have a delete feature. Under the last line of code in the `addToDo` action, I'll add a `deleteTodo`:\n\n```js\ndeleteTodo(itemID) {\n  this.todoList = this.todoList.filter((object) => {\n    return object.id !== itemID;\n  });\n},\n```\n\n### Input Form to Add an Item\n\nI'll jump back into the `TodoForm.vue` component now. I want to write a form to enter a to-do item. I'll use the dev-tools to check that the item is getting into the `state` I set up in the Pinia store.\n\nIn the `template`, I'll create the basic form:\n\n```html\n{/*<!-- TodoForm.vue -->*/}\n\n<template>\n  <form @submit.prevent=\"\">\n    <input v-model=\"todo\" type=\"text\" /><button>Add</button>\n  </form>\n</template>\n```\n\nThe input has a `v-model=\"todo\"` which I'll connect to a `ref` in the `script` to make this property reactive so it updates as the user types the item into the input:\n\n```js\n// TodoForm.vue\n\n<script>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const todo = ref(\"\");\n    return { todo };\n  },\n};\n<\/script>\n```\n\nI haven't added a method yet for the `@submit` event listener because I need to set up the logic in the `script` first. The submit button is going to trigger a function to add an item to the todo list, so I'll need to somehow invoke the `addTodo` action in the store.\n\n## Access Pinia Store from a Component\n\nTo use a Pinia store in a component, I need to import the store and then set a `const store` to the invoked store function:\n\n```js\n// TodoForm.vue\n\nimport { useTodoListStore } from '@/store/useTodoListStore'\nexport default {\n  setup() {\n    const todo = ref('')\n    // use Pinia store:\n    const store = useTodoListStore()\n\n    return { todo }\n  },\n}\n```\n\nNow I will have access to state, actions, and getters in the store through that `const store`.\n\nI'll write a method in the `TodoForm.vue` component that will be triggered when the submit button is clicked. I want that method to do two things: add an item to the `todoList` array in the store, and clear the `todo` `ref` so it returns to being an empty string after the item is added to the list:\n\n```js\n// in setup function in script in TodoForm.vue:\n\nfunction addItemAndClear(item) {\n  if (item.length === 0) {\n    return\n  }\n  // invokes function in the store:\n  store.addTodo(item)\n  todo.value = ''\n}\n```\n\nAnd I'll make sure that function is added to the form's `@submit` event listener in the template:\n\n```js\n<form @submit.prevent=\"addItemAndClear(todo)\">\n```\n\nI'll type `npm run serve` in the terminal to start up the Vue development server.\n\nNow I can open the Vue dev-tools and see that the item is being added to the `todoList` array in the store.\n\n![Gif showing an item added to the to-do list and data in the store](https://res.cloudinary.com/deepgram/image/upload/v1649704298/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-todo.gif)\n\n## Reactive Properties in Pinia\n\nIn the previous section, I used an action from the Pinia store - `addTodo` - in my `todoForm.vue` component. In this section, I'll use a state property in the `todoList.vue` component, and I need it to be reactive to changes that might happen. I'll be using it in the component `template`, and it has to be reactive so it updates in sync with the state change.\n\nThere's an important function I'll want to use that comes with the Pinia library - `storeToRefs`. Each to-do list item displayed in the `todoList` component will actually come from the store, and since the store's state is an object, I will use this helper method to destructure the returned object without losing reactivity. It is similar to Vue 3's [utility function `toRefs`](https://vuejs.org/api/reactivity-utilities.html#torefs). I'll demonstrate its usage as I build the next feature.\n\n### Todo List - Show Item\n\nI want access to the `todoList` that's in the store (which now has data to represent the items I've added to the list), so in the `todoList.vue` component I'll need to bring in the store, just like I did in `todoForm.vue`. I'll also set `const store` to the invoked store function.\n\nThen I need to wrap the `todoList` property that I want to pull from the store in the function `storeToRefs`:\n\n```js\n<script>\nimport { useTodoListStore } from \"../store/useTodoListStore\";\nimport { storeToRefs } from \"pinia\";\nexport default {\n  setup() {\n    const store = useTodoListStore();\n    // storeToRefs lets todoList keep reactivity:\n    const { todoList } = storeToRefs(store);\n\n    return { todoList };\n  },\n};\n<\/script>\n```\n\nNow I can use `todoList` in my `template`, and it will stay in sync with the store. I'll write a `v-for` loop to create the list:\n\n```html\n<template>\n  <div v-for=\"todo in todoList\" :key=\"todo.id\">\n    <div>{{ todo.item }}</div>\n  </div>\n</template>\n```\n\nAnd the list is displaying now:\n\n![Gif showing the list as items are added](https://res.cloudinary.com/deepgram/image/upload/v1649863854/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/show-list-example_.gif)\n\n### To-do List - Mark as Completed\n\nI want to add some styles to each item to show if the to-do item has been completed.\n\nFirst, I need the logic to toggle an item to be complete or not complete. Right now, in the store, each item that is added to the list also has a `completed` property set to `false`:\n\n```js\n// useTodoListStore.js\n\nthis.todoList.push({ item, id: this.id++, completed: false })\n```\n\nI can write an action in the store to toggle that to true:\n\n```js\ntoggleCompleted(idToFind) {\n      const todo = this.todoList.find((obj) => obj.id === idToFind);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n```\n\nIn the `todoList.vue` component, I'll add a checkmark emoji as a `span` to the `template` with an event listener to listen for a click on the checkmark. The Unicode is `&#10004;` for a checkmark.\n\n```js\n<div v-for=\"todo in todoList\" :key=\"todo.id\">\n    <div>\n      <span>{{ todo.item }}</span>\n      <span @click.stop=\"toggleCompleted(todo.id)\">&#10004;</span>\n    </div>\n  </div>\n```\n\nHowever, I need to make sure that I have brought `toggleCompleted` into the component. Since it's an **action** method and not a reactive state property, I won't use `storeToRefs` for `toggleCompleted`:\n\n```js\n<script>\nimport { useTodoListStore } from \"../store/useTodoListStore\";\nimport { storeToRefs } from \"pinia\";\nexport default {\n  setup() {\n    const store = useTodoListStore();\n    const { todoList } = storeToRefs(store);\n    // destructuring action method doesn't require using storeToRefs:\n    const { toggleCompleted } = store;\n\n    return { todoList, toggleCompleted };\n  },\n};\n<\/script>\n```\n\nTo add the styles, I first will add a dynamic class to the to-do item `span` in the template:\n\n```js\n<span :class=\"{ completed: todo.completed }\">{{ todo.item }}</span>\n```\n\nAnd CSS to change the look of the item as it is toggled true and false:\n\n```css\n/* CSS Styles */\n\n.completed {\n  text-decoration: line-through;\n}\n```\n\n![Gif showing an item marked complete with checkmark](https://res.cloudinary.com/deepgram/image/upload/v1649864263/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/check-complete.gif)\n\n### To-Do List - Delete Item\n\nI had already added the `deleteTodo` function to the store, so I can jump into writing the delete feature in the `todoList.vue` component.\n\nI'll do the same thing I did in the previous section, bringing in the store's action `deleteTodo` and using a cross mark emoji for the delete button. I won't explain every step since I just need to repeat what I did in the previous section for marking an item complete, but this time hooking it up to the delete action. But I'll show the code.\n\nHere's the `todoList.vue` component after I added the delete feature:\n\n```js\n// todoList.vue\n\n<template>\n  <div v-for=\"todo in todoList\" :key=\"todo.id\">\n    <div>\n      <span :class=\"{ completed: todo.completed }\">{{ todo.item }}</span>\n      <span @click.stop=\"toggleCompleted(todo.id)\">&#10004;</span>\n      <span @click=\"deleteTodo(todo.id)\">&#10060;</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useTodoListStore } from \"../store/useTodoListStore\";\nimport { storeToRefs } from \"pinia\";\nexport default {\n  setup() {\n    const store = useTodoListStore();\n    const { todoList } = storeToRefs(store);\n    const { toggleCompleted, deleteTodo } = store;\n\n    return { todoList, toggleCompleted, deleteTodo };\n  },\n};\n<\/script>\n\n<style>\n.completed {\n  text-decoration: line-through;\n}\n</style>\n\n```\n\nAnd here is the **store** now that I have all the logic working:\n\n```js\n// useTodoListStore\n\nimport { defineStore } from 'pinia'\n\nexport const useTodoListStore = defineStore('todoList', {\n  state: () => ({\n    todoList: [],\n    id: 0,\n  }),\n  actions: {\n    addTodo(item) {\n      this.todoList.push({ item, id: this.id++, completed: false })\n    },\n    deleteTodo(itemID) {\n      this.todoList = this.todoList.filter((object) => {\n        return object.id !== itemID\n      })\n    },\n    toggleCompleted(idToFind) {\n      const todo = this.todoList.find((obj) => obj.id === idToFind)\n      if (todo) {\n        todo.completed = !todo.completed\n      }\n    },\n  },\n})\n```\n\nI've finished a barebones to-do list app with Pinia, minus styling. This code is available on the 'just-pinia' branch of [my project repo](https://github.com/SandraRodgers/todo-pinia/tree/just-pinia) for anyone who would like to see it in its entirety.\n\n## Bonus Section: Add Typescript\n\nOne of the best features of Pinia is that **it works very well with Typescript**. I first chose to build the to-do list without Typescript so I could just focus on how to use Pinia, but I also want to demonstrate how it works with Typescript since that is a huge advantage of Pinia.\n\nSetting up Vuex with Typescript was always challenging for me because of the need to create custom complex wrappers. It wasn't easy to just dive in.\n\nBut with Pinia, I don't have to do that. I can just add Typescript to my project and start using it.\n\nI'll add Typescript to my existing project with this command:\n\n```js\nvue add Typescript\n```\n\nWhen it prompts me to make some choices, I'll be sure to say yes to \"Convert all .js files to .ts\". That way it will turn the store file into a `.ts` file.\n\n![Prompts when adding Typescript to Vue project](https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-typescript-to-vue-prompts.png)\n\nThen I'll delete the `HelloWorld` file because I don't need that. I might need to delete one of the `extends` properties from the `.eslintrc.js` file.\n\nI'll go to the store file and see that Typescript is pointing out all the missing types I need to add.\n\n![Store with Typescript errors](https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/store-with-typescript-errors.png)\n\nI'm not going to go through how to use Typescript since this blog post isn't meant to teach how to write Typescript. But I'll add the types and show how my store looks after I revise it to include Typescript:\n\n```js\nimport { defineStore } from \"pinia\";\n\ninterface ToDoItem {\n  item: string;\n  id: number;\n  completed: boolean;\n}\n\nexport const useTodoListStore = defineStore(\"todoList\", {\n  state: () => ({\n    todoList: [] as ToDoItem[],\n    id: 0,\n  }),\n  actions: {\n    addTodo(item: string) {\n      this.todoList.push({ item, id: this.id++, completed: false });\n    },\n    deleteTodo(itemID: number) {\n      this.todoList = this.todoList.filter((object) => {\n        return object.id !== itemID;\n      });\n    },\n    toggleCompleted(idToFind: number) {\n      const todo = this.todoList.find((obj) => obj.id === idToFind);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n  },\n});\n```\n\nIn the components, I'll need to add `lang=\"ts\"` to the script and import `defineComponent`. The export will need to be wrapped in the `defineComponent` function.\n\n```js\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nexport default defineComponent({\n...\n});\n<\/script>\n```\n\nAnd that's how I would add Typescript to my project after-the fact; although I highly recommend starting the project from the beginning with Typescript, since it will help with the developer experience of catching errors and thinking about types.\n\nThe Typescript version of the to-do list can be found in my repo on the branch called [pinia-typescript](https://github.com/SandraRodgers/todo-pinia/tree/pinia-typescript).\n\n## Conclusion\n\nI went through creating a to-do list using just Pinia and then I also showed how to build one with Typescript. I've since added styles and an alert feature to the application, and the most updated code can be found on the main branch of the [project repo](https://github.com/SandraRodgers/todo-pinia/tree/main).\n\nI hope this blog post has been helpful. I'm very excited about Pinia because of how straightforward it was to jump in and start using, especially with Typescript.\n\nIf you have any questions, feel free to reach out on [Twitter](https://twitter.com/sandra_rodgers_)!\n\n        ";
}
function compiledContent() {
  return '<p>I was building a Vue 3 project for my recent blog series on <a href="https://blog.deepgram.com/build-a-livestream-web-application-vue-and-express-setup/">how to build a full-stack live streaming web app</a>. I wanted to use Vuex to manage some global state properties. It was my first time using Vuex with Vue 3 since I began my journey to learn the Composition API.</p>\n<p>When I arrived at the <a href="https://vuex.vuejs.org/">Vuex documentation page</a>, I saw this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649699509/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/announcement-pinia-official_.png" alt="Announcement: The official state management library for Vue has changed to Pinia "></p>\n<p>Well, that was a surprise! I had been hearing the word \u201CPinia\u201D in relation to Vue but didn\u2019t know exactly what it was. <strong>Pinia is now the official state management library for Vue</strong>!</p>\n<p>I pushed onwards with using Vuex in that project but made a mental note to come back soon to Pinia to find out what it is all about.</p>\n<p>Soon is now! Today I will learn a little about Pinia by building a to-do list. I\u2019ll show how I build it and provide some of my thoughts about the experience. Let\u2019s dive in!</p>\n<h2 id="the-project">The Project</h2>\n<p>Here is a screenshot of the final project. It\u2019s a to-do list that lets me <strong>add</strong>, <strong>delete</strong>, and <strong>check off</strong> an item on the list.</p>\n<p>The project repo can be found <a href="https://github.com/SandraRodgers/todo-pinia">here</a>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649860305/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example1.png" alt="Example of the to-do list app I&#x27;ll build"></p>\n<h2 id="getting-started-with-pinia">Getting Started with Pinia</h2>\n<p>I\u2019ll create my Vue project (making sure to select Vue 3 since I want to use the Composition API). Pinia also works with Vue 2, but I\u2019ve personally gone totally in on Vue 3 (and haven\u2019t looked back - check out <a href="https://blog.deepgram.com/diving-into-vue-3-getting-started/">my series on Vue 3</a> to read about my journey).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue create todo-pinia</span></span></code></pre>\n<p>After I <code is:raw>cd</code> into the project folder, I\u2019ll install pinia:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm install pinia</span></span></code></pre>\n<p>Then I\u2019ll go into the <code is:raw>main.js</code> file and import <code is:raw>createPinia</code>. This creates a Pinia instance to be used by my application. The <code is:raw>.use()</code> tells the Vue app to install Pinia as a plugin.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createPinia } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">createPinia</span><span style="color: #C9D1D9">()).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>In the <code is:raw>src</code> folder, in <code is:raw>components</code>, I\u2019ll create the three components that will make up my todo list app - <code is:raw>TodoApp.vue</code> (the parent component), <code is:raw>TodoForm.vue</code> (a child component), and <code is:raw>TodoList.vue</code> (another child component).</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/components-folder-with-files.png" alt="Components folder with files" style="width:50%" />\n<p>Here is the plan for how these components will be organized in the browser:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649861642/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example_components.png" alt="Example of the to-do list app with component outline"></p>\n<p>In each component, I can quickly scaffold out the basic code structure for my template and script. I do that with an extension in VS Code called <a href="https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets">Vue VSCode Snippets</a>. Since I have that, I just type the letters <strong>vbase-3</strong>, and the code writes itself for me:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/vbase-snippet.png" alt="vbase-3 snippet to scaffold out my code"></p>\n<p>Now I\u2019ll import each component to where it needs to be -<code is:raw>TodoForm.vue</code> and <code is:raw>TodoList.vue</code> into the <code is:raw>TodoApp.vue</code> - and I\u2019ll import the <code is:raw>TodoApp.vue</code> component into <code is:raw>App.vue</code>. I like to write the name of the component in each to start so I can see them on the screen.</p>\n<p>Here\u2019s my screen now. The layout is there, but no logic or styles yet:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/component-layout-browser.png" alt="Component layout in browser" style="width:50%" />\n<h2 id="pinia---what-is-it">Pinia - What is it?</h2>\n<p>Next, I\u2019ll create a store and set up my global state with <a href="https://pinia.vuejs.org/">Pinia</a>.</p>\n<p>The concept of a Pinia store is the same as it is for Vuex or Redux - <strong>it is a place to hold global state</strong>, and it makes it easy for any component in the project to track changes to that global state.</p>\n<p>Not all state needs to go in the store - just state properties that I want to make available throughout the app. This is especially useful when I want to share state between two sibling components like the <code is:raw>TodoForm.vue</code> and <code is:raw>TodoList.vue</code> because I can avoid sending props down (\u2018prop drilling\u2019) and emitting events up through the parent.</p>\n<h2 id="define-a-pinia-store">Define a Pinia Store</h2>\n<p>I will create a <code is:raw>store</code> folder in <code is:raw>src</code>, and in the folder, I\u2019ll make a file called <code is:raw>useTodoListStore.js</code>. I\u2019m naming it starting with the word \u2018use\u2019 because a common convention of Vue 3, both for Pinia store files and for Vue composables, is to start the file name with \u2018use\u2019.</p>\n<p>I can have as many stores as I want; in fact, <strong>I should have separate stores for separate logical concerns</strong>, similar to how Vue 3 composables are built around distinct logical concerns. Each store should be in a different file.</p>\n<p>However, since this is such a small project, I only need one store - <strong>one store for the to-do list logic</strong>.</p>\n<p>I will first import the <code is:raw>defineStore</code> function from Pinia. Under the hood, this is going to create the <code is:raw>useStore</code> function that I will need in my components to retrieve the store I made.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span></code></pre>\n<p>I set it to a <code is:raw>const</code> and use the keyword <code is:raw>export</code> since I\u2019ll need to be able to import it into my components.</p>\n<p>This <code is:raw>defineStore</code> function will take two arguments: a string (the unique name of the store) and an object (options such as state, getters, and actions).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// state</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// getters</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// actions</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="state-getters-and-actions">State, Getters, and Actions</h2>\n<p>The options that I pass to the <code is:raw>defineStore</code> function are my store\u2019s <code is:raw>state</code>, <code is:raw>getters</code>, and <code is:raw>actions</code>. Unlike Vuex, there is no longer the need for <code is:raw>mutations</code>. This makes me happy!</p>\n<p>I always found <code is:raw>mutations</code> confusing because it felt like I was repeating myself when I had to write an action to commit a mutation, which would then make the state change. Pinia has gotten rid of that middleman, and instead, the flow is just <strong>action -> change state</strong>.</p>\n<p>I already have a mental model around the way <code is:raw>methods</code>, <code is:raw>data</code>, and <code is:raw>computed</code> work in Vue 2. The <code is:raw>methods</code> make stuff happen, the <code is:raw>data</code> contains my state properties, and the <code is:raw>computed</code> returns an automatically updated property that has had a calculation performed on it.</p>\n<p>Pinia\u2019s options follow the same mental model - I can think of the <code is:raw>state</code> as being like <code is:raw>data</code> in the Vue Options API, the <code is:raw>actions</code> like <code is:raw>methods</code>, and the <code is:raw>getters</code> like <code is:raw>computed</code> properties.</p>\n<p>I really like this change, and it\u2019s one of the first things that made me think, \u201CWow, I think I\u2019m really going to like Pinia!\u201D</p>\n<h3 id="create-initial-state">Create Initial State</h3>\n<p>Now I\u2019ll start creating a global state object in my <code is:raw>useTodoListStore</code>.</p>\n<p>The state is actually a function, and it\u2019s recommended that I use an arrow function (this is because Pinia has excellent Typescript integration, and using an arrow function will allow Typescript inference to work on the state properties).</p>\n<p>I\u2019ll add a <code is:raw>todoList</code> property, which will be an array meant to contain each to-do item (each item is going to be an object, but there\u2019s nothing in the <code is:raw>todoList</code> array at the moment).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h3 id="actions---add-and-delete-an-item">Actions - Add and Delete an Item</h3>\n<p>I can also set up my first action. I know the main logic to start will be adding an item to the to-do list. I\u2019ll write a function <code is:raw>addTodo</code> that will perform the logic of pushing an item object into the <code is:raw>todoList</code> array.</p>\n<p>Individual <code is:raw>actions</code> are methods within the <code is:raw>actions</code> object in the store.</p>\n<p>I will also add an <code is:raw>id</code> property to state since I will want each item to have an id that increments each time a new item is pushed into the <code is:raw>toDoList</code> array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Maybe while I\u2019m here, I should go ahead and write an action to delete an item from the to-do list since I know I\u2019ll want to have a delete feature. Under the last line of code in the <code is:raw>addToDo</code> action, I\u2019ll add a <code is:raw>deleteTodo</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(itemID) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID;</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<h3 id="input-form-to-add-an-item">Input Form to Add an Item</h3>\n<p>I\u2019ll jump back into the <code is:raw>TodoForm.vue</code> component now. I want to write a form to enter a to-do item. I\u2019ll use the dev-tools to check that the item is getting into the <code is:raw>state</code> I set up in the Pinia store.</p>\n<p>In the <code is:raw>template</code>, I\u2019ll create the basic form:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- TodoForm.vue --&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@submit.prevent</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Add&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The input has a <code is:raw>v-model="todo"</code> which I\u2019ll connect to a <code is:raw>ref</code> in the <code is:raw>script</code> to make this property reactive so it updates as the user types the item into the input:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// TodoForm.vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const todo </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    return { todo };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>I haven\u2019t added a method yet for the <code is:raw>@submit</code> event listener because I need to set up the logic in the <code is:raw>script</code> first. The submit button is going to trigger a function to add an item to the todo list, so I\u2019ll need to somehow invoke the <code is:raw>addTodo</code> action in the store.</p>\n<h2 id="access-pinia-store-from-a-component">Access Pinia Store from a Component</h2>\n<p>To use a Pinia store in a component, I need to import the store and then set a <code is:raw>const store</code> to the invoked store function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// TodoForm.vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { useTodoListStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@/store/useTodoListStore&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> {</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #D2A8FF">setup</span><span style="color: #FFA657">() </span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// use Pinia store:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">store</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { todo }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">}</span></span></code></pre>\n<p>Now I will have access to state, actions, and getters in the store through that <code is:raw>const store</code>.</p>\n<p>I\u2019ll write a method in the <code is:raw>TodoForm.vue</code> component that will be triggered when the submit button is clicked. I want that method to do two things: add an item to the <code is:raw>todoList</code> array in the store, and clear the <code is:raw>todo</code> <code is:raw>ref</code> so it returns to being an empty string after the item is added to the list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in setup function in script in TodoForm.vue:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addItemAndClear</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (item.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// invokes function in the store:</span></span>\n<span class="line"><span style="color: #C9D1D9">  store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(item)</span></span>\n<span class="line"><span style="color: #C9D1D9">  todo.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>And I\u2019ll make sure that function is added to the form\u2019s <code is:raw>@submit</code> event listener in the template:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@submit.prevent=&quot;addItemAndClear(todo)&quot;&gt;</span></span></code></pre>\n<p>I\u2019ll type <code is:raw>npm run serve</code> in the terminal to start up the Vue development server.</p>\n<p>Now I can open the Vue dev-tools and see that the item is being added to the <code is:raw>todoList</code> array in the store.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649704298/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-todo.gif" alt="Gif showing an item added to the to-do list and data in the store"></p>\n<h2 id="reactive-properties-in-pinia">Reactive Properties in Pinia</h2>\n<p>In the previous section, I used an action from the Pinia store - <code is:raw>addTodo</code> - in my <code is:raw>todoForm.vue</code> component. In this section, I\u2019ll use a state property in the <code is:raw>todoList.vue</code> component, and I need it to be reactive to changes that might happen. I\u2019ll be using it in the component <code is:raw>template</code>, and it has to be reactive so it updates in sync with the state change.</p>\n<p>There\u2019s an important function I\u2019ll want to use that comes with the Pinia library - <code is:raw>storeToRefs</code>. Each to-do list item displayed in the <code is:raw>todoList</code> component will actually come from the store, and since the store\u2019s state is an object, I will use this helper method to destructure the returned object without losing reactivity. It is similar to Vue 3\u2019s <a href="https://vuejs.org/api/reactivity-utilities.html#torefs">utility function <code is:raw>toRefs</code></a>. I\u2019ll demonstrate its usage as I build the next feature.</p>\n<h3 id="todo-list---show-item">Todo List - Show Item</h3>\n<p>I want access to the <code is:raw>todoList</code> that\u2019s in the store (which now has data to represent the items I\u2019ve added to the list), so in the <code is:raw>todoList.vue</code> component I\u2019ll need to bring in the store, just like I did in <code is:raw>todoForm.vue</code>. I\u2019ll also set <code is:raw>const store</code> to the invoked store function.</p>\n<p>Then I need to wrap the <code is:raw>todoList</code> property that I want to pull from the store in the function <code is:raw>storeToRefs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;pinia&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// storeToRefs lets todoList keep reactivity:</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { todoList };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Now I can use <code is:raw>todoList</code> in my <code is:raw>template</code>, and it will stay in sync with the store. I\u2019ll write a <code is:raw>v-for</code> loop to create the list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">:key</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo.id&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;{{ todo.item }}&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>And the list is displaying now:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649863854/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/show-list-example_.gif" alt="Gif showing the list as items are added"></p>\n<h3 id="to-do-list---mark-as-completed">To-do List - Mark as Completed</h3>\n<p>I want to add some styles to each item to show if the to-do item has been completed.</p>\n<p>First, I need the logic to toggle an item to be complete or not complete. Right now, in the store, each item that is added to the list also has a <code is:raw>completed</code> property set to <code is:raw>false</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// useTodoListStore.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>I can write an action in the store to toggle that to true:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(idToFind) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind);</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span></code></pre>\n<p>In the <code is:raw>todoList.vue</code> component, I\u2019ll add a checkmark emoji as a <code is:raw>span</code> to the <code is:raw>template</code> with an event listener to listen for a click on the checkmark. The Unicode is <code is:raw>&amp;#10004;</code> for a checkmark.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:key=&quot;todo.id&quot;&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click.stop=&quot;toggleCompleted(todo.id)&quot;&gt;&amp;#10004;&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span></code></pre>\n<p>However, I need to make sure that I have brought <code is:raw>toggleCompleted</code> into the component. Since it\u2019s an <strong>action</strong> method and not a reactive state property, I won\u2019t use <code is:raw>storeToRefs</code> for <code is:raw>toggleCompleted</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;pinia&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// destructuring action method doesn&#39;t require using storeToRefs:</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { toggleCompleted } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { todoList, toggleCompleted };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>To add the styles, I first will add a dynamic class to the to-do item <code is:raw>span</code> in the template:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:class=&quot;{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">completed:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}&quot;&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span></code></pre>\n<p>And CSS to change the look of the item as it is toggled true and false:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">/* CSS Styles */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">.completed</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">text-decoration</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">line-through</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649864263/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/check-complete.gif" alt="Gif showing an item marked complete with checkmark"></p>\n<h3 id="to-do-list---delete-item">To-Do List - Delete Item</h3>\n<p>I had already added the <code is:raw>deleteTodo</code> function to the store, so I can jump into writing the delete feature in the <code is:raw>todoList.vue</code> component.</p>\n<p>I\u2019ll do the same thing I did in the previous section, bringing in the store\u2019s action <code is:raw>deleteTodo</code> and using a cross mark emoji for the delete button. I won\u2019t explain every step since I just need to repeat what I did in the previous section for marking an item complete, but this time hooking it up to the delete action. But I\u2019ll show the code.</p>\n<p>Here\u2019s the <code is:raw>todoList.vue</code> component after I added the delete feature:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// todoList.vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:key=&quot;todo.id&quot;&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:class=&quot;{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">completed:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}&quot;&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click.stop=&quot;toggleCompleted(todo.id)&quot;&gt;&amp;#10004;&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;deleteTodo(todo.id)&quot;&gt;&amp;#10060;&lt;/span&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/template&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA198">&lt;script&gt;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;../store/useTodoListStore&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;pinia&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"><span style="color: #79C0FF">export</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { toggleCompleted, deleteTodo } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { todoList, toggleCompleted, deleteTodo };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #FFA198">,</span></span>\n<span class="line"><span style="color: #FFA198">};</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/script&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA198">&lt;style&gt;</span></span>\n<span class="line"><span style="color: #FFA198">.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  text</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">decoration: line</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">through;</span></span>\n<span class="line"><span style="color: #FF7B72">}</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/style&gt;</span></span>\n<span class="line"></span></code></pre>\n<p>And here is the <strong>store</strong> now that I have all the logic working:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// useTodoListStore</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">itemID</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">idToFind</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>I\u2019ve finished a barebones to-do list app with Pinia, minus styling. This code is available on the \u2018just-pinia\u2019 branch of <a href="https://github.com/SandraRodgers/todo-pinia/tree/just-pinia">my project repo</a> for anyone who would like to see it in its entirety.</p>\n<h2 id="bonus-section-add-typescript">Bonus Section: Add Typescript</h2>\n<p>One of the best features of Pinia is that <strong>it works very well with Typescript</strong>. I first chose to build the to-do list without Typescript so I could just focus on how to use Pinia, but I also want to demonstrate how it works with Typescript since that is a huge advantage of Pinia.</p>\n<p>Setting up Vuex with Typescript was always challenging for me because of the need to create custom complex wrappers. It wasn\u2019t easy to just dive in.</p>\n<p>But with Pinia, I don\u2019t have to do that. I can just add Typescript to my project and start using it.</p>\n<p>I\u2019ll add Typescript to my existing project with this command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue add Typescript</span></span></code></pre>\n<p>When it prompts me to make some choices, I\u2019ll be sure to say yes to \u201CConvert all .js files to .ts\u201D. That way it will turn the store file into a <code is:raw>.ts</code> file.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-typescript-to-vue-prompts.png" alt="Prompts when adding Typescript to Vue project"></p>\n<p>Then I\u2019ll delete the <code is:raw>HelloWorld</code> file because I don\u2019t need that. I might need to delete one of the <code is:raw>extends</code> properties from the <code is:raw>.eslintrc.js</code> file.</p>\n<p>I\u2019ll go to the store file and see that Typescript is pointing out all the missing types I need to add.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/store-with-typescript-errors.png" alt="Store with Typescript errors"></p>\n<p>I\u2019m not going to go through how to use Typescript since this blog post isn\u2019t meant to teach how to write Typescript. But I\u2019ll add the types and show how my store looks after I revise it to include Typescript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;pinia&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">interface</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">ToDoItem</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">string</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">id</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">completed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">boolean</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;todoList&quot;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    todoList: [] </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">ToDoItem</span><span style="color: #C9D1D9">[],</span></span>\n<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">string</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> });</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">itemID</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID;</span></span>\n<span class="line"><span style="color: #C9D1D9">      });</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">idToFind</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind);</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">});</span></span></code></pre>\n<p>In the components, I\u2019ll need to add <code is:raw>lang="ts"</code> to the script and import <code is:raw>defineComponent</code>. The export will need to be wrapped in the <code is:raw>defineComponent</code> function.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;ts&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> defineComponent </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">export default defineComponent(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>And that\u2019s how I would add Typescript to my project after-the fact; although I highly recommend starting the project from the beginning with Typescript, since it will help with the developer experience of catching errors and thinking about types.</p>\n<p>The Typescript version of the to-do list can be found in my repo on the branch called <a href="https://github.com/SandraRodgers/todo-pinia/tree/pinia-typescript">pinia-typescript</a>.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>I went through creating a to-do list using just Pinia and then I also showed how to build one with Typescript. I\u2019ve since added styles and an alert feature to the application, and the most updated code can be found on the main branch of the <a href="https://github.com/SandraRodgers/todo-pinia/tree/main">project repo</a>.</p>\n<p>I hope this blog post has been helpful. I\u2019m very excited about Pinia because of how straightforward it was to jump in and start using, especially with Typescript.</p>\n<p>If you have any questions, feel free to reach out on <a href="https://twitter.com/sandra_rodgers_">Twitter</a>!</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-a-todo-list-with-pinia-and-vue-3/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>I was building a Vue 3 project for my recent blog series on <a href="https://blog.deepgram.com/build-a-livestream-web-application-vue-and-express-setup/">how to build a full-stack live streaming web app</a>. I wanted to use Vuex to manage some global state properties. It was my first time using Vuex with Vue 3 since I began my journey to learn the Composition API.</p>
<p>When I arrived at the <a href="https://vuex.vuejs.org/">Vuex documentation page</a>, I saw this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649699509/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/announcement-pinia-official_.png" alt="Announcement: The official state management library for Vue has changed to Pinia "></p>
<p>Well, that was a surprise! I had been hearing the word “Pinia” in relation to Vue but didn’t know exactly what it was. <strong>Pinia is now the official state management library for Vue</strong>!</p>
<p>I pushed onwards with using Vuex in that project but made a mental note to come back soon to Pinia to find out what it is all about.</p>
<p>Soon is now! Today I will learn a little about Pinia by building a to-do list. I’ll show how I build it and provide some of my thoughts about the experience. Let’s dive in!</p>
<h2 id="the-project">The Project</h2>
<p>Here is a screenshot of the final project. It’s a to-do list that lets me <strong>add</strong>, <strong>delete</strong>, and <strong>check off</strong> an item on the list.</p>
<p>The project repo can be found <a href="https://github.com/SandraRodgers/todo-pinia">here</a>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649860305/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example1.png" alt="Example of the to-do list app I'll build"></p>
<h2 id="getting-started-with-pinia">Getting Started with Pinia</h2>
<p>I’ll create my Vue project (making sure to select Vue 3 since I want to use the Composition API). Pinia also works with Vue 2, but I’ve personally gone totally in on Vue 3 (and haven’t looked back - check out <a href="https://blog.deepgram.com/diving-into-vue-3-getting-started/">my series on Vue 3</a> to read about my journey).</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue create todo-pinia</span></span></code></pre>
<p>After I <code>cd</code> into the project folder, I’ll install pinia:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm install pinia</span></span></code></pre>
<p>Then I’ll go into the <code>main.js</code> file and import <code>createPinia</code>. This creates a Pinia instance to be used by my application. The <code>.use()</code> tells the Vue app to install Pinia as a plugin.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createPinia } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">createPinia</span><span style="color: #C9D1D9">()).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>In the <code>src</code> folder, in <code>components</code>, I’ll create the three components that will make up my todo list app - <code>TodoApp.vue</code> (the parent component), <code>TodoForm.vue</code> (a child component), and <code>TodoList.vue</code> (another child component).</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/components-folder-with-files.png" alt="Components folder with files" style="width:50%">
<p>Here is the plan for how these components will be organized in the browser:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649861642/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/todo-list-example_components.png" alt="Example of the to-do list app with component outline"></p>
<p>In each component, I can quickly scaffold out the basic code structure for my template and script. I do that with an extension in VS Code called <a href="https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets">Vue VSCode Snippets</a>. Since I have that, I just type the letters <strong>vbase-3</strong>, and the code writes itself for me:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/vbase-snippet.png" alt="vbase-3 snippet to scaffold out my code"></p>
<p>Now I’ll import each component to where it needs to be -<code>TodoForm.vue</code> and <code>TodoList.vue</code> into the <code>TodoApp.vue</code> - and I’ll import the <code>TodoApp.vue</code> component into <code>App.vue</code>. I like to write the name of the component in each to start so I can see them on the screen.</p>
<p>Here’s my screen now. The layout is there, but no logic or styles yet:</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/component-layout-browser.png" alt="Component layout in browser" style="width:50%">
<h2 id="pinia---what-is-it">Pinia - What is it?</h2>
<p>Next, I’ll create a store and set up my global state with <a href="https://pinia.vuejs.org/">Pinia</a>.</p>
<p>The concept of a Pinia store is the same as it is for Vuex or Redux - <strong>it is a place to hold global state</strong>, and it makes it easy for any component in the project to track changes to that global state.</p>
<p>Not all state needs to go in the store - just state properties that I want to make available throughout the app. This is especially useful when I want to share state between two sibling components like the <code>TodoForm.vue</code> and <code>TodoList.vue</code> because I can avoid sending props down (‘prop drilling’) and emitting events up through the parent.</p>
<h2 id="define-a-pinia-store">Define a Pinia Store</h2>
<p>I will create a <code>store</code> folder in <code>src</code>, and in the folder, I’ll make a file called <code>useTodoListStore.js</code>. I’m naming it starting with the word ‘use’ because a common convention of Vue 3, both for Pinia store files and for Vue composables, is to start the file name with ‘use’.</p>
<p>I can have as many stores as I want; in fact, <strong>I should have separate stores for separate logical concerns</strong>, similar to how Vue 3 composables are built around distinct logical concerns. Each store should be in a different file.</p>
<p>However, since this is such a small project, I only need one store - <strong>one store for the to-do list logic</strong>.</p>
<p>I will first import the <code>defineStore</code> function from Pinia. Under the hood, this is going to create the <code>useStore</code> function that I will need in my components to retrieve the store I made.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span></code></pre>
<p>I set it to a <code>const</code> and use the keyword <code>export</code> since I’ll need to be able to import it into my components.</p>
<p>This <code>defineStore</code> function will take two arguments: a string (the unique name of the store) and an object (options such as state, getters, and actions).</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// state</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// getters</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// actions</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<h2 id="state-getters-and-actions">State, Getters, and Actions</h2>
<p>The options that I pass to the <code>defineStore</code> function are my store’s <code>state</code>, <code>getters</code>, and <code>actions</code>. Unlike Vuex, there is no longer the need for <code>mutations</code>. This makes me happy!</p>
<p>I always found <code>mutations</code> confusing because it felt like I was repeating myself when I had to write an action to commit a mutation, which would then make the state change. Pinia has gotten rid of that middleman, and instead, the flow is just <strong>action -> change state</strong>.</p>
<p>I already have a mental model around the way <code>methods</code>, <code>data</code>, and <code>computed</code> work in Vue 2. The <code>methods</code> make stuff happen, the <code>data</code> contains my state properties, and the <code>computed</code> returns an automatically updated property that has had a calculation performed on it.</p>
<p>Pinia’s options follow the same mental model - I can think of the <code>state</code> as being like <code>data</code> in the Vue Options API, the <code>actions</code> like <code>methods</code>, and the <code>getters</code> like <code>computed</code> properties.</p>
<p>I really like this change, and it’s one of the first things that made me think, “Wow, I think I’m really going to like Pinia!”</p>
<h3 id="create-initial-state">Create Initial State</h3>
<p>Now I’ll start creating a global state object in my <code>useTodoListStore</code>.</p>
<p>The state is actually a function, and it’s recommended that I use an arrow function (this is because Pinia has excellent Typescript integration, and using an arrow function will allow Typescript inference to work on the state properties).</p>
<p>I’ll add a <code>todoList</code> property, which will be an array meant to contain each to-do item (each item is going to be an object, but there’s nothing in the <code>todoList</code> array at the moment).</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>
<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>
<span class="line"><span style="color: #C9D1D9">  }),</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<h3 id="actions---add-and-delete-an-item">Actions - Add and Delete an Item</h3>
<p>I can also set up my first action. I know the main logic to start will be adding an item to the to-do list. I’ll write a function <code>addTodo</code> that will perform the logic of pushing an item object into the <code>todoList</code> array.</p>
<p>Individual <code>actions</code> are methods within the <code>actions</code> object in the store.</p>
<p>I will also add an <code>id</code> property to state since I will want each item to have an id that increments each time a new item is pushed into the <code>toDoList</code> array:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>
<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>
<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  }),</span></span>
<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Maybe while I’m here, I should go ahead and write an action to delete an item from the to-do list since I know I’ll want to have a delete feature. Under the last line of code in the <code>addToDo</code> action, I’ll add a <code>deleteTodo</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(itemID) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID;</span></span>
<span class="line"><span style="color: #C9D1D9">  });</span></span>
<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>
<h3 id="input-form-to-add-an-item">Input Form to Add an Item</h3>
<p>I’ll jump back into the <code>TodoForm.vue</code> component now. I want to write a form to enter a to-do item. I’ll use the dev-tools to check that the item is getting into the <code>state</code> I set up in the Pinia store.</p>
<p>In the <code>template</code>, I’ll create the basic form:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- TodoForm.vue --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@submit.prevent</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Add&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>The input has a <code>v-model="todo"</code> which I’ll connect to a <code>ref</code> in the <code>script</code> to make this property reactive so it updates as the user types the item into the input:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// TodoForm.vue</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>
<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    const todo </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">    return { todo };</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>I haven’t added a method yet for the <code>@submit</code> event listener because I need to set up the logic in the <code>script</code> first. The submit button is going to trigger a function to add an item to the todo list, so I’ll need to somehow invoke the <code>addTodo</code> action in the store.</p>
<h2 id="access-pinia-store-from-a-component">Access Pinia Store from a Component</h2>
<p>To use a Pinia store in a component, I need to import the store and then set a <code>const store</code> to the invoked store function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// TodoForm.vue</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { useTodoListStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@/store/useTodoListStore&#39;</span></span>
<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> {</span></span>
<span class="line"><span style="color: #FFA657">  </span><span style="color: #D2A8FF">setup</span><span style="color: #FFA657">() </span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// use Pinia store:</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">store</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { todo }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span><span style="color: #FFA657">,</span></span>
<span class="line"><span style="color: #FFA657">}</span></span></code></pre>
<p>Now I will have access to state, actions, and getters in the store through that <code>const store</code>.</p>
<p>I’ll write a method in the <code>TodoForm.vue</code> component that will be triggered when the submit button is clicked. I want that method to do two things: add an item to the <code>todoList</code> array in the store, and clear the <code>todo</code> <code>ref</code> so it returns to being an empty string after the item is added to the list:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in setup function in script in TodoForm.vue:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addItemAndClear</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (item.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// invokes function in the store:</span></span>
<span class="line"><span style="color: #C9D1D9">  store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(item)</span></span>
<span class="line"><span style="color: #C9D1D9">  todo.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>And I’ll make sure that function is added to the form’s <code>@submit</code> event listener in the template:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@submit.prevent=&quot;addItemAndClear(todo)&quot;&gt;</span></span></code></pre>
<p>I’ll type <code>npm run serve</code> in the terminal to start up the Vue development server.</p>
<p>Now I can open the Vue dev-tools and see that the item is being added to the <code>todoList</code> array in the store.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649704298/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-todo.gif" alt="Gif showing an item added to the to-do list and data in the store"></p>
<h2 id="reactive-properties-in-pinia">Reactive Properties in Pinia</h2>
<p>In the previous section, I used an action from the Pinia store - <code>addTodo</code> - in my <code>todoForm.vue</code> component. In this section, I’ll use a state property in the <code>todoList.vue</code> component, and I need it to be reactive to changes that might happen. I’ll be using it in the component <code>template</code>, and it has to be reactive so it updates in sync with the state change.</p>
<p>There’s an important function I’ll want to use that comes with the Pinia library - <code>storeToRefs</code>. Each to-do list item displayed in the <code>todoList</code> component will actually come from the store, and since the store’s state is an object, I will use this helper method to destructure the returned object without losing reactivity. It is similar to Vue 3’s <a href="https://vuejs.org/api/reactivity-utilities.html#torefs">utility function <code>toRefs</code></a>. I’ll demonstrate its usage as I build the next feature.</p>
<h3 id="todo-list---show-item">Todo List - Show Item</h3>
<p>I want access to the <code>todoList</code> that’s in the store (which now has data to represent the items I’ve added to the list), so in the <code>todoList.vue</code> component I’ll need to bring in the store, just like I did in <code>todoForm.vue</code>. I’ll also set <code>const store</code> to the invoked store function.</p>
<p>Then I need to wrap the <code>todoList</code> property that I want to pull from the store in the function <code>storeToRefs</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>
<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;pinia&quot;;</span></span>
<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// storeToRefs lets todoList keep reactivity:</span></span>
<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    return { todoList };</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Now I can use <code>todoList</code> in my <code>template</code>, and it will stay in sync with the store. I’ll write a <code>v-for</code> loop to create the list:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">:key</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todo.id&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;{{ todo.item }}&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>And the list is displaying now:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649863854/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/show-list-example_.gif" alt="Gif showing the list as items are added"></p>
<h3 id="to-do-list---mark-as-completed">To-do List - Mark as Completed</h3>
<p>I want to add some styles to each item to show if the to-do item has been completed.</p>
<p>First, I need the logic to toggle an item to be complete or not complete. Right now, in the store, each item that is added to the list also has a <code>completed</code> property set to <code>false</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// useTodoListStore.js</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span></code></pre>
<p>I can write an action in the store to toggle that to true:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(idToFind) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind);</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>
<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed;</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span></code></pre>
<p>In the <code>todoList.vue</code> component, I’ll add a checkmark emoji as a <code>span</code> to the <code>template</code> with an event listener to listen for a click on the checkmark. The Unicode is <code>&amp;#10004;</code> for a checkmark.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:key=&quot;todo.id&quot;&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click.stop=&quot;toggleCompleted(todo.id)&quot;&gt;&amp;#10004;&lt;/span&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;/div&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span></code></pre>
<p>However, I need to make sure that I have brought <code>toggleCompleted</code> into the component. Since it’s an <strong>action</strong> method and not a reactive state property, I won’t use <code>storeToRefs</code> for <code>toggleCompleted</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>
<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;pinia&quot;;</span></span>
<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// destructuring action method doesn&#39;t require using storeToRefs:</span></span>
<span class="line"><span style="color: #C9D1D9">    const { toggleCompleted } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    return { todoList, toggleCompleted };</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>To add the styles, I first will add a dynamic class to the to-do item <code>span</code> in the template:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:class=&quot;{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">completed:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}&quot;&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span></code></pre>
<p>And CSS to change the look of the item as it is toggled true and false:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">/* CSS Styles */</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">.completed</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">text-decoration</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">line-through</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649864263/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/check-complete.gif" alt="Gif showing an item marked complete with checkmark"></p>
<h3 id="to-do-list---delete-item">To-Do List - Delete Item</h3>
<p>I had already added the <code>deleteTodo</code> function to the store, so I can jump into writing the delete feature in the <code>todoList.vue</code> component.</p>
<p>I’ll do the same thing I did in the previous section, bringing in the store’s action <code>deleteTodo</code> and using a cross mark emoji for the delete button. I won’t explain every step since I just need to repeat what I did in the previous section for marking an item complete, but this time hooking it up to the delete action. But I’ll show the code.</p>
<p>Here’s the <code>todoList.vue</code> component after I added the delete feature:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// todoList.vue</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;todo in todoList&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:key=&quot;todo.id&quot;&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:class=&quot;{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">completed:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}&quot;&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">todo.item</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/span&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click.stop=&quot;toggleCompleted(todo.id)&quot;&gt;&amp;#10004;&lt;/span&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FFA198">&lt;span</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;deleteTodo(todo.id)&quot;&gt;&amp;#10060;&lt;/span&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;/div&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>
<span class="line"><span style="color: #FFA198">&lt;/template&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFA198">&lt;script&gt;</span></span>
<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;../store/useTodoListStore&quot;</span><span style="color: #FFA198">;</span></span>
<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> storeToRefs </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;pinia&quot;</span><span style="color: #FFA198">;</span></span>
<span class="line"><span style="color: #79C0FF">export</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">    const { todoList } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">storeToRefs</span><span style="color: #C9D1D9">(store);</span></span>
<span class="line"><span style="color: #C9D1D9">    const { toggleCompleted, deleteTodo } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    return { todoList, toggleCompleted, deleteTodo };</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #FFA198">,</span></span>
<span class="line"><span style="color: #FFA198">};</span></span>
<span class="line"><span style="color: #FFA198">&lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFA198">&lt;style&gt;</span></span>
<span class="line"><span style="color: #FFA198">.completed</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">  text</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">decoration: line</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">through;</span></span>
<span class="line"><span style="color: #FF7B72">}</span></span>
<span class="line"><span style="color: #FFA198">&lt;/style&gt;</span></span>
<span class="line"></span></code></pre>
<p>And here is the <strong>store</strong> now that I have all the logic working:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// useTodoListStore</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;todoList&#39;</span><span style="color: #C9D1D9">, {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>
<span class="line"><span style="color: #C9D1D9">    todoList: [],</span></span>
<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  }),</span></span>
<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">itemID</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">idToFind</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>
<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>I’ve finished a barebones to-do list app with Pinia, minus styling. This code is available on the ‘just-pinia’ branch of <a href="https://github.com/SandraRodgers/todo-pinia/tree/just-pinia">my project repo</a> for anyone who would like to see it in its entirety.</p>
<h2 id="bonus-section-add-typescript">Bonus Section: Add Typescript</h2>
<p>One of the best features of Pinia is that <strong>it works very well with Typescript</strong>. I first chose to build the to-do list without Typescript so I could just focus on how to use Pinia, but I also want to demonstrate how it works with Typescript since that is a huge advantage of Pinia.</p>
<p>Setting up Vuex with Typescript was always challenging for me because of the need to create custom complex wrappers. It wasn’t easy to just dive in.</p>
<p>But with Pinia, I don’t have to do that. I can just add Typescript to my project and start using it.</p>
<p>I’ll add Typescript to my existing project with this command:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue add Typescript</span></span></code></pre>
<p>When it prompts me to make some choices, I’ll be sure to say yes to “Convert all .js files to .ts”. That way it will turn the store file into a <code>.ts</code> file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/add-typescript-to-vue-prompts.png" alt="Prompts when adding Typescript to Vue project"></p>
<p>Then I’ll delete the <code>HelloWorld</code> file because I don’t need that. I might need to delete one of the <code>extends</code> properties from the <code>.eslintrc.js</code> file.</p>
<p>I’ll go to the store file and see that Typescript is pointing out all the missing types I need to add.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649694505/blog/2022/04/build-a-todo-list-with-pinia-and-vue-3/store-with-typescript-errors.png" alt="Store with Typescript errors"></p>
<p>I’m not going to go through how to use Typescript since this blog post isn’t meant to teach how to write Typescript. But I’ll add the types and show how my store looks after I revise it to include Typescript:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { defineStore } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;pinia&quot;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">interface</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">ToDoItem</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">string</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">id</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">completed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">boolean</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">export</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useTodoListStore</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">defineStore</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;todoList&quot;</span><span style="color: #C9D1D9">, {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">state</span><span style="color: #C9D1D9">: () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>
<span class="line"><span style="color: #C9D1D9">    todoList: [] </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">ToDoItem</span><span style="color: #C9D1D9">[],</span></span>
<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  }),</span></span>
<span class="line"><span style="color: #C9D1D9">  actions: {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">string</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ item, id: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.id</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">, completed: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> });</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">itemID</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">object</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> object.id </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> itemID;</span></span>
<span class="line"><span style="color: #C9D1D9">      });</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">idToFind</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">number</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.todoList.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">obj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> obj.id </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> idToFind);</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (todo) {</span></span>
<span class="line"><span style="color: #C9D1D9">        todo.completed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">todo.completed;</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span>
<span class="line"><span style="color: #C9D1D9">});</span></span></code></pre>
<p>In the components, I’ll need to add <code>lang="ts"</code> to the script and import <code>defineComponent</code>. The export will need to be wrapped in the <code>defineComponent</code> function.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;ts&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> defineComponent </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>
<span class="line"><span style="color: #C9D1D9">export default defineComponent(</span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #FF7B72">...</span></span>
<span class="line"><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>And that’s how I would add Typescript to my project after-the fact; although I highly recommend starting the project from the beginning with Typescript, since it will help with the developer experience of catching errors and thinking about types.</p>
<p>The Typescript version of the to-do list can be found in my repo on the branch called <a href="https://github.com/SandraRodgers/todo-pinia/tree/pinia-typescript">pinia-typescript</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I went through creating a to-do list using just Pinia and then I also showed how to build one with Typescript. I’ve since added styles and an alert feature to the application, and the most updated code can be found on the main branch of the <a href="https://github.com/SandraRodgers/todo-pinia/tree/main">project repo</a>.</p>
<p>I hope this blog post has been helpful. I’m very excited about Pinia because of how straightforward it was to jump in and start using, especially with Typescript.</p>
<p>If you have any questions, feel free to reach out on <a href="https://twitter.com/sandra_rodgers_">Twitter</a>!</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-a-todo-list-with-pinia-and-vue-3/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
