import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                          *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
/* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 3, "slug": "properties", "text": "Properties" }, { "depth": 3, "slug": "methods", "text": "Methods" }, { "depth": 3, "slug": "events", "text": "Events" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": '\r\nWhen building web applications, you will sometimes need to work with audio and/or video inputs. You\'ll need to understand the MediaStream API, which is the web API that supports streaming both audio and video information. In this post, we\'ll cover the basics of the MediaStream API.\r\n\r\n## Getting Started\r\n\r\nTo get started, you\'ll need to gain access to the user\'s audio/video devices which provide data in a \'stream.\' A common use case would be getting access to the user\'s microphone and camera. One of the most common ways to do this is through the [getUserMedia](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia) method that is built into the browser. This post is more about understanding the different parts of the API. To see this method used in action, refer to [Kevin\'s post about getting audio in the browser](https://blog.deepgram.com/live-transcription-mic-browser/).\r\n\r\nLet\'s take the following code, insert it into an HTML file, and then open that file in the browser.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <body>\r\n    <h1>Getting Started With MediaStream</h1>\r\n    <script>\r\n      navigator.mediaDevices\r\n        .getUserMedia({ audio: true })\r\n        .then((stream) => {\r\n          console.log(\'MEDIA STREAM: \', stream)\r\n        })\r\n        .catch((err) => {\r\n          alert(\'PERMISSION DENIED\')\r\n        })\r\n    <\/script>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThis will prompt you to allow access to the microphone on your machine. If you reject it, you\'ll get an alert saying `PERMISSION DENIED.` If you allow that, then you will see the following in your console:\r\n\r\n![Devtools console result showing the MediaStream object that is initialized on page load](https://res.cloudinary.com/deepgram/image/upload/v1638906691/blog/2021/12/getting-started-with-mediastream-api/initial-console-log.png)\r\n\r\nAs you can see, there are several properties and methods available on the MediaStream object. Before we dive into these, I want to clarify a couple of definitions.\r\n\r\n*   **stream**: A stream of media content. Regarding what we\'ll be discussing, this refers to the stream of information coming from a user\'s device. The stream will be coming from either the device\'s microphone or the camera, or both at the same time. A stream will consist of one or more \'tracks.\'\r\n*   **track**: A `track` is a piece of media within a stream. These are typically audio or video tracks. If we get access to both a microphone and a camera, our stream will consist of both an audio and a video track.\r\n\r\n### Properties\r\n\r\n*   **active**\r\n\r\n    The first one we see is the `active` property. This property is simply a boolean value indicating if any part of the MediaStream object is currently active or being used. Most MediaStream objects you\'ll encounter will contain audio and/or video tracks. If any of these tracks is `active,` then the `active` property on the MediaStream object will be true.\r\n\r\n*   **id**\r\n\r\n    The other property available on our MediaStream object is the id, a unique identifier for the object and contains 36 characters. This will be helpful if you need to keep track of multiple streams and do different things with them.\r\n\r\n### Methods\r\n\r\n*   **addTrack**\r\n\r\n    This method takes in a `MediaStreamTrack` as an argument and adds it to the MediaStream object.\r\n\r\n![image showing that a track gets added to the MediaStream object when addTrack is called](https://res.cloudinary.com/deepgram/image/upload/v1638975710/blog/2021/12/getting-started-with-mediastream-api/addTrack.png)\r\n\r\n*   **getTracks**\r\n\r\n    This returns a list of all `MediaStreamTrack` objects associated with the stream. To test it out, let\'s add the `getTracks` method to our code. I\'ve included the `video: true` in the constraints so we can see multiple tracks.\r\n\r\n    ```html\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <body>\r\n        <h1>Getting Started With MediaStream</h1>\r\n        <script>\r\n          navigator.mediaDevices\r\n            .getUserMedia({ audio: true, video: true })\r\n            .then((stream) => {\r\n              console.log("tracks", stream.getTracks());\r\n            .catch((err) => {\r\n              console.log("ERROR", err);\r\n              alert("PERMISSION DENIED");\r\n            });\r\n        <\/script>\r\n      </body>\r\n    </html>\r\n    ```\r\n\r\n    You can see in the screenshot below that we get both the audio and the video tracks showing:\r\n    ![Console showing the results of the stream.getTracks() call](https://res.cloudinary.com/deepgram/image/upload/v1638911657/blog/2021/12/getting-started-with-mediastream-api/getTracks.png)\r\n\r\n*   **getAudioTracks**\r\n\r\n    This returns a list of `MediaStreamTrack` objects that are **audio** types. If we used this instead of `getTracks` above, we would have gotten the list with only the audio track showing.\r\n\r\n*   **getVideoTracks**\r\n    This returns a list of `MediaStreamTrack` objects that are **video** types.\r\n\r\n*   **getTrackById**\r\n    This method takes in a string and will return the track from the MediaStream object with the corresponding id.\r\n\r\n    ```html\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <body>\r\n        <h1>Getting Started With MediaStream</h1>\r\n        <script>\r\n          navigator.mediaDevices\r\n            .getUserMedia({ audio: true, video: true })\r\n            .then((stream) => {\r\n              const trackId = stream.getAudioTracks()[0].id;\r\n              console.log("getTrackById", stream.getTrackById(trackId))\r\n            .catch((err) => {\r\n              console.log("ERROR", err);\r\n              alert("PERMISSION DENIED");\r\n            });\r\n        <\/script>\r\n      </body>\r\n    </html>\r\n    ```\r\n\r\n*   **removeTrack**\r\n    This method removes the given track from the `MediaStream` object. When we add a button to remove the track to our code and then log the `MediaStream.getTracks` to the dev tools console, we can see it is no longer there. If we were displaying a video stream to a div on our page and removed the video track, then the stream would no longer appear.\r\n\r\n    ```html\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <body>\r\n        <h1>Getting Started With MediaStream</h1>\r\n        <script>\r\n          navigator.mediaDevices\r\n            .getUserMedia({ audio: true, video: true })\r\n            .then((stream) => {\r\n              const tracks = stream.getTracks()\r\n              console.log("tracks before remove", tracks);\r\n              // remove both tracks\r\n              stream.removeTrack(tracks[1])\r\n              stream.removeTrack(tracks[0])\r\n              console.log("tracks after remove", stream.getTracks());\r\n            .catch((err) => {\r\n              console.log("ERROR", err);\r\n              alert("PERMISSION DENIED");\r\n            });\r\n        <\/script>\r\n      </body>\r\n    </html>\r\n    ```\r\n\r\n    ![browser devtools console showing the MediaStream object before and after the removeTrack has been called](https://res.cloudinary.com/deepgram/image/upload/v1638976221/blog/2021/12/getting-started-with-mediastream-api/removeTrack.png)\r\n\r\n### Events\r\n\r\n[Events](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events) are simply actions that happen in the system you are programming, which the system tells you about so your code can react to them if needed. An `event listener is a function that runs when a specific event occurs`.\r\n\r\nYou should be aware of a few events on the `MediaStream` object.\r\n\r\n*   **addtrack**\r\n    Fired when a new track object is added.\r\n\r\n    *   *Event listener:* `onaddtrack` is fired when a new track is added. To use the event listener, assign it to a function that you want to be called whenever a track is added\r\n\r\n    ```js\r\n    navigator.mediaDevices\r\n      .getUserMedia({ audio: true, video: true })\r\n      .then((stream) => {\r\n        stream.onaddtrack = function(event) {\r\n          // code to execute when track is added\r\n        }\r\n      .catch((err) => {\r\n        console.log("ERROR", err);\r\n        alert("PERMISSION DENIED");\r\n      });\r\n    ```\r\n\r\n*   **removetrack**\r\n    Fired when a new track object is added.\r\n    *   *Event listener:* `onremovetrack` is fired when a new track is removed. To use the event listener, assign it to a function you want to be called whenever a track is removed.\r\n\r\n## Conclusion\r\n\r\nThe `MediaStream` API is beneficial and can be utilized in the applications that you build. I hope this has been informative and helped you as a web developer.\r\n\r\n        ', "html": '<p>When building web applications, you will sometimes need to work with audio and/or video inputs. You\u2019ll need to understand the MediaStream API, which is the web API that supports streaming both audio and video information. In this post, we\u2019ll cover the basics of the MediaStream API.</p>\n<h2 id="getting-started">Getting Started</h2>\n<p>To get started, you\u2019ll need to gain access to the user\u2019s audio/video devices which provide data in a \u2018stream.\u2019 A common use case would be getting access to the user\u2019s microphone and camera. One of the most common ways to do this is through the <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia">getUserMedia</a> method that is built into the browser. This post is more about understanding the different parts of the API. To see this method used in action, refer to <a href="https://blog.deepgram.com/live-transcription-mic-browser/">Kevin\u2019s post about getting audio in the browser</a>.</p>\n<p>Let\u2019s take the following code, insert it into an HTML file, and then open that file in the browser.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;MEDIA STREAM: &#39;</span><span style="color: #C9D1D9">, stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;PERMISSION DENIED&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This will prompt you to allow access to the microphone on your machine. If you reject it, you\u2019ll get an alert saying <code is:raw>PERMISSION DENIED.</code> If you allow that, then you will see the following in your console:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638906691/blog/2021/12/getting-started-with-mediastream-api/initial-console-log.png" alt="Devtools console result showing the MediaStream object that is initialized on page load"></p>\n<p>As you can see, there are several properties and methods available on the MediaStream object. Before we dive into these, I want to clarify a couple of definitions.</p>\n<ul>\n<li><strong>stream</strong>: A stream of media content. Regarding what we\u2019ll be discussing, this refers to the stream of information coming from a user\u2019s device. The stream will be coming from either the device\u2019s microphone or the camera, or both at the same time. A stream will consist of one or more \u2018tracks.\u2019</li>\n<li><strong>track</strong>: A <code is:raw>track</code> is a piece of media within a stream. These are typically audio or video tracks. If we get access to both a microphone and a camera, our stream will consist of both an audio and a video track.</li>\n</ul>\n<h3 id="properties">Properties</h3>\n<ul>\n<li>\n<p><strong>active</strong></p>\n<p>The first one we see is the <code is:raw>active</code> property. This property is simply a boolean value indicating if any part of the MediaStream object is currently active or being used. Most MediaStream objects you\u2019ll encounter will contain audio and/or video tracks. If any of these tracks is <code is:raw>active,</code> then the <code is:raw>active</code> property on the MediaStream object will be true.</p>\n</li>\n<li>\n<p><strong>id</strong></p>\n<p>The other property available on our MediaStream object is the id, a unique identifier for the object and contains 36 characters. This will be helpful if you need to keep track of multiple streams and do different things with them.</p>\n</li>\n</ul>\n<h3 id="methods">Methods</h3>\n<ul>\n<li>\n<p><strong>addTrack</strong></p>\n<p>This method takes in a <code is:raw>MediaStreamTrack</code> as an argument and adds it to the MediaStream object.</p>\n</li>\n</ul>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638975710/blog/2021/12/getting-started-with-mediastream-api/addTrack.png" alt="image showing that a track gets added to the MediaStream object when addTrack is called"></p>\n<ul>\n<li>\n<p><strong>getTracks</strong></p>\n<p>This returns a list of all <code is:raw>MediaStreamTrack</code> objects associated with the stream. To test it out, let\u2019s add the <code is:raw>getTracks</code> method to our code. I\u2019ve included the <code is:raw>video: true</code> in the constraints so we can see multiple tracks.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>\n<p>You can see in the screenshot below that we get both the audio and the video tracks showing:\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1638911657/blog/2021/12/getting-started-with-mediastream-api/getTracks.png" alt="Console showing the results of the stream.getTracks() call"></p>\n</li>\n<li>\n<p><strong>getAudioTracks</strong></p>\n<p>This returns a list of <code is:raw>MediaStreamTrack</code> objects that are <strong>audio</strong> types. If we used this instead of <code is:raw>getTracks</code> above, we would have gotten the list with only the audio track showing.</p>\n</li>\n<li>\n<p><strong>getVideoTracks</strong>\r\nThis returns a list of <code is:raw>MediaStreamTrack</code> objects that are <strong>video</strong> types.</p>\n</li>\n<li>\n<p><strong>getTrackById</strong>\r\nThis method takes in a string and will return the track from the MediaStream object with the corresponding id.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">trackId</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> stream.</span><span style="color: #D2A8FF">getAudioTracks</span><span style="color: #C9D1D9">()[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].id;</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;getTrackById&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTrackById</span><span style="color: #C9D1D9">(trackId))</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>\n</li>\n<li>\n<p><strong>removeTrack</strong>\r\nThis method removes the given track from the <code is:raw>MediaStream</code> object. When we add a button to remove the track to our code and then log the <code is:raw>MediaStream.getTracks</code> to the dev tools console, we can see it is no longer there. If we were displaying a video stream to a div on our page and removed the video track, then the stream would no longer appear.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tracks</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks before remove&quot;</span><span style="color: #C9D1D9">, tracks);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// remove both tracks</span></span>\n<span class="line"><span style="color: #C9D1D9">          stream.</span><span style="color: #D2A8FF">removeTrack</span><span style="color: #C9D1D9">(tracks[</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">          stream.</span><span style="color: #D2A8FF">removeTrack</span><span style="color: #C9D1D9">(tracks[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks after remove&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638976221/blog/2021/12/getting-started-with-mediastream-api/removeTrack.png" alt="browser devtools console showing the MediaStream object before and after the removeTrack has been called"></p>\n</li>\n</ul>\n<h3 id="events">Events</h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events">Events</a> are simply actions that happen in the system you are programming, which the system tells you about so your code can react to them if needed. An <code is:raw>event listener is a function that runs when a specific event occurs</code>.</p>\n<p>You should be aware of a few events on the <code is:raw>MediaStream</code> object.</p>\n<ul>\n<li>\n<p><strong>addtrack</strong>\r\nFired when a new track object is added.</p>\n<ul>\n<li><em>Event listener:</em> <code is:raw>onaddtrack</code> is fired when a new track is added. To use the event listener, assign it to a function that you want to be called whenever a track is added</li>\n</ul>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    stream.</span><span style="color: #D2A8FF">onaddtrack</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// code to execute when track is added</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span></code></pre>\n</li>\n<li>\n<p><strong>removetrack</strong>\r\nFired when a new track object is added.</p>\n<ul>\n<li><em>Event listener:</em> <code is:raw>onremovetrack</code> is fired when a new track is removed. To use the event listener, assign it to a function you want to be called whenever a track is removed.</li>\n</ul>\n</li>\n</ul>\n<h2 id="conclusion">Conclusion</h2>\n<p>The <code is:raw>MediaStream</code> API is beneficial and can be utilized in the applications that you build. I hope this has been informative and helped you as a web developer.</p>' };
const frontmatter = { "title": "Getting Started with the MediaStream API", "description": "Get to know the basics of the MediaStream API", "date": "2021-12-13T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1638832562/blog/2021/12/getting-started-with-mediastream-api/getting-started-w-mediastream-API%402x.jpg", "authors": ["brian-barrow"], "category": "tutorial", "tags": ["mediastream", "javascript"], "seo": { "title": "Getting Started with the MediaStream API", "description": "Get to know the basics of the MediaStream API" }, "shorturls": { "share": "https://dpgr.am/93e84dc", "twitter": "https://dpgr.am/e6dcf20", "linkedin": "https://dpgr.am/8e652ff", "reddit": "https://dpgr.am/34e806b", "facebook": "https://dpgr.am/b3cff01" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453829/blog/getting-started-with-mediastream-api/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 3, "slug": "properties", "text": "Properties" }, { "depth": 3, "slug": "methods", "text": "Methods" }, { "depth": 3, "slug": "events", "text": "Events" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": '\r\nWhen building web applications, you will sometimes need to work with audio and/or video inputs. You\'ll need to understand the MediaStream API, which is the web API that supports streaming both audio and video information. In this post, we\'ll cover the basics of the MediaStream API.\r\n\r\n## Getting Started\r\n\r\nTo get started, you\'ll need to gain access to the user\'s audio/video devices which provide data in a \'stream.\' A common use case would be getting access to the user\'s microphone and camera. One of the most common ways to do this is through the [getUserMedia](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia) method that is built into the browser. This post is more about understanding the different parts of the API. To see this method used in action, refer to [Kevin\'s post about getting audio in the browser](https://blog.deepgram.com/live-transcription-mic-browser/).\r\n\r\nLet\'s take the following code, insert it into an HTML file, and then open that file in the browser.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <body>\r\n    <h1>Getting Started With MediaStream</h1>\r\n    <script>\r\n      navigator.mediaDevices\r\n        .getUserMedia({ audio: true })\r\n        .then((stream) => {\r\n          console.log(\'MEDIA STREAM: \', stream)\r\n        })\r\n        .catch((err) => {\r\n          alert(\'PERMISSION DENIED\')\r\n        })\r\n    <\/script>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThis will prompt you to allow access to the microphone on your machine. If you reject it, you\'ll get an alert saying `PERMISSION DENIED.` If you allow that, then you will see the following in your console:\r\n\r\n![Devtools console result showing the MediaStream object that is initialized on page load](https://res.cloudinary.com/deepgram/image/upload/v1638906691/blog/2021/12/getting-started-with-mediastream-api/initial-console-log.png)\r\n\r\nAs you can see, there are several properties and methods available on the MediaStream object. Before we dive into these, I want to clarify a couple of definitions.\r\n\r\n*   **stream**: A stream of media content. Regarding what we\'ll be discussing, this refers to the stream of information coming from a user\'s device. The stream will be coming from either the device\'s microphone or the camera, or both at the same time. A stream will consist of one or more \'tracks.\'\r\n*   **track**: A `track` is a piece of media within a stream. These are typically audio or video tracks. If we get access to both a microphone and a camera, our stream will consist of both an audio and a video track.\r\n\r\n### Properties\r\n\r\n*   **active**\r\n\r\n    The first one we see is the `active` property. This property is simply a boolean value indicating if any part of the MediaStream object is currently active or being used. Most MediaStream objects you\'ll encounter will contain audio and/or video tracks. If any of these tracks is `active,` then the `active` property on the MediaStream object will be true.\r\n\r\n*   **id**\r\n\r\n    The other property available on our MediaStream object is the id, a unique identifier for the object and contains 36 characters. This will be helpful if you need to keep track of multiple streams and do different things with them.\r\n\r\n### Methods\r\n\r\n*   **addTrack**\r\n\r\n    This method takes in a `MediaStreamTrack` as an argument and adds it to the MediaStream object.\r\n\r\n![image showing that a track gets added to the MediaStream object when addTrack is called](https://res.cloudinary.com/deepgram/image/upload/v1638975710/blog/2021/12/getting-started-with-mediastream-api/addTrack.png)\r\n\r\n*   **getTracks**\r\n\r\n    This returns a list of all `MediaStreamTrack` objects associated with the stream. To test it out, let\'s add the `getTracks` method to our code. I\'ve included the `video: true` in the constraints so we can see multiple tracks.\r\n\r\n    ```html\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <body>\r\n        <h1>Getting Started With MediaStream</h1>\r\n        <script>\r\n          navigator.mediaDevices\r\n            .getUserMedia({ audio: true, video: true })\r\n            .then((stream) => {\r\n              console.log("tracks", stream.getTracks());\r\n            .catch((err) => {\r\n              console.log("ERROR", err);\r\n              alert("PERMISSION DENIED");\r\n            });\r\n        <\/script>\r\n      </body>\r\n    </html>\r\n    ```\r\n\r\n    You can see in the screenshot below that we get both the audio and the video tracks showing:\r\n    ![Console showing the results of the stream.getTracks() call](https://res.cloudinary.com/deepgram/image/upload/v1638911657/blog/2021/12/getting-started-with-mediastream-api/getTracks.png)\r\n\r\n*   **getAudioTracks**\r\n\r\n    This returns a list of `MediaStreamTrack` objects that are **audio** types. If we used this instead of `getTracks` above, we would have gotten the list with only the audio track showing.\r\n\r\n*   **getVideoTracks**\r\n    This returns a list of `MediaStreamTrack` objects that are **video** types.\r\n\r\n*   **getTrackById**\r\n    This method takes in a string and will return the track from the MediaStream object with the corresponding id.\r\n\r\n    ```html\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <body>\r\n        <h1>Getting Started With MediaStream</h1>\r\n        <script>\r\n          navigator.mediaDevices\r\n            .getUserMedia({ audio: true, video: true })\r\n            .then((stream) => {\r\n              const trackId = stream.getAudioTracks()[0].id;\r\n              console.log("getTrackById", stream.getTrackById(trackId))\r\n            .catch((err) => {\r\n              console.log("ERROR", err);\r\n              alert("PERMISSION DENIED");\r\n            });\r\n        <\/script>\r\n      </body>\r\n    </html>\r\n    ```\r\n\r\n*   **removeTrack**\r\n    This method removes the given track from the `MediaStream` object. When we add a button to remove the track to our code and then log the `MediaStream.getTracks` to the dev tools console, we can see it is no longer there. If we were displaying a video stream to a div on our page and removed the video track, then the stream would no longer appear.\r\n\r\n    ```html\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <body>\r\n        <h1>Getting Started With MediaStream</h1>\r\n        <script>\r\n          navigator.mediaDevices\r\n            .getUserMedia({ audio: true, video: true })\r\n            .then((stream) => {\r\n              const tracks = stream.getTracks()\r\n              console.log("tracks before remove", tracks);\r\n              // remove both tracks\r\n              stream.removeTrack(tracks[1])\r\n              stream.removeTrack(tracks[0])\r\n              console.log("tracks after remove", stream.getTracks());\r\n            .catch((err) => {\r\n              console.log("ERROR", err);\r\n              alert("PERMISSION DENIED");\r\n            });\r\n        <\/script>\r\n      </body>\r\n    </html>\r\n    ```\r\n\r\n    ![browser devtools console showing the MediaStream object before and after the removeTrack has been called](https://res.cloudinary.com/deepgram/image/upload/v1638976221/blog/2021/12/getting-started-with-mediastream-api/removeTrack.png)\r\n\r\n### Events\r\n\r\n[Events](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events) are simply actions that happen in the system you are programming, which the system tells you about so your code can react to them if needed. An `event listener is a function that runs when a specific event occurs`.\r\n\r\nYou should be aware of a few events on the `MediaStream` object.\r\n\r\n*   **addtrack**\r\n    Fired when a new track object is added.\r\n\r\n    *   *Event listener:* `onaddtrack` is fired when a new track is added. To use the event listener, assign it to a function that you want to be called whenever a track is added\r\n\r\n    ```js\r\n    navigator.mediaDevices\r\n      .getUserMedia({ audio: true, video: true })\r\n      .then((stream) => {\r\n        stream.onaddtrack = function(event) {\r\n          // code to execute when track is added\r\n        }\r\n      .catch((err) => {\r\n        console.log("ERROR", err);\r\n        alert("PERMISSION DENIED");\r\n      });\r\n    ```\r\n\r\n*   **removetrack**\r\n    Fired when a new track object is added.\r\n    *   *Event listener:* `onremovetrack` is fired when a new track is removed. To use the event listener, assign it to a function you want to be called whenever a track is removed.\r\n\r\n## Conclusion\r\n\r\nThe `MediaStream` API is beneficial and can be utilized in the applications that you build. I hope this has been informative and helped you as a web developer.\r\n\r\n        ', "html": '<p>When building web applications, you will sometimes need to work with audio and/or video inputs. You\u2019ll need to understand the MediaStream API, which is the web API that supports streaming both audio and video information. In this post, we\u2019ll cover the basics of the MediaStream API.</p>\n<h2 id="getting-started">Getting Started</h2>\n<p>To get started, you\u2019ll need to gain access to the user\u2019s audio/video devices which provide data in a \u2018stream.\u2019 A common use case would be getting access to the user\u2019s microphone and camera. One of the most common ways to do this is through the <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia">getUserMedia</a> method that is built into the browser. This post is more about understanding the different parts of the API. To see this method used in action, refer to <a href="https://blog.deepgram.com/live-transcription-mic-browser/">Kevin\u2019s post about getting audio in the browser</a>.</p>\n<p>Let\u2019s take the following code, insert it into an HTML file, and then open that file in the browser.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;MEDIA STREAM: &#39;</span><span style="color: #C9D1D9">, stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;PERMISSION DENIED&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This will prompt you to allow access to the microphone on your machine. If you reject it, you\u2019ll get an alert saying <code is:raw>PERMISSION DENIED.</code> If you allow that, then you will see the following in your console:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638906691/blog/2021/12/getting-started-with-mediastream-api/initial-console-log.png" alt="Devtools console result showing the MediaStream object that is initialized on page load"></p>\n<p>As you can see, there are several properties and methods available on the MediaStream object. Before we dive into these, I want to clarify a couple of definitions.</p>\n<ul>\n<li><strong>stream</strong>: A stream of media content. Regarding what we\u2019ll be discussing, this refers to the stream of information coming from a user\u2019s device. The stream will be coming from either the device\u2019s microphone or the camera, or both at the same time. A stream will consist of one or more \u2018tracks.\u2019</li>\n<li><strong>track</strong>: A <code is:raw>track</code> is a piece of media within a stream. These are typically audio or video tracks. If we get access to both a microphone and a camera, our stream will consist of both an audio and a video track.</li>\n</ul>\n<h3 id="properties">Properties</h3>\n<ul>\n<li>\n<p><strong>active</strong></p>\n<p>The first one we see is the <code is:raw>active</code> property. This property is simply a boolean value indicating if any part of the MediaStream object is currently active or being used. Most MediaStream objects you\u2019ll encounter will contain audio and/or video tracks. If any of these tracks is <code is:raw>active,</code> then the <code is:raw>active</code> property on the MediaStream object will be true.</p>\n</li>\n<li>\n<p><strong>id</strong></p>\n<p>The other property available on our MediaStream object is the id, a unique identifier for the object and contains 36 characters. This will be helpful if you need to keep track of multiple streams and do different things with them.</p>\n</li>\n</ul>\n<h3 id="methods">Methods</h3>\n<ul>\n<li>\n<p><strong>addTrack</strong></p>\n<p>This method takes in a <code is:raw>MediaStreamTrack</code> as an argument and adds it to the MediaStream object.</p>\n</li>\n</ul>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638975710/blog/2021/12/getting-started-with-mediastream-api/addTrack.png" alt="image showing that a track gets added to the MediaStream object when addTrack is called"></p>\n<ul>\n<li>\n<p><strong>getTracks</strong></p>\n<p>This returns a list of all <code is:raw>MediaStreamTrack</code> objects associated with the stream. To test it out, let\u2019s add the <code is:raw>getTracks</code> method to our code. I\u2019ve included the <code is:raw>video: true</code> in the constraints so we can see multiple tracks.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>\n<p>You can see in the screenshot below that we get both the audio and the video tracks showing:\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1638911657/blog/2021/12/getting-started-with-mediastream-api/getTracks.png" alt="Console showing the results of the stream.getTracks() call"></p>\n</li>\n<li>\n<p><strong>getAudioTracks</strong></p>\n<p>This returns a list of <code is:raw>MediaStreamTrack</code> objects that are <strong>audio</strong> types. If we used this instead of <code is:raw>getTracks</code> above, we would have gotten the list with only the audio track showing.</p>\n</li>\n<li>\n<p><strong>getVideoTracks</strong>\r\nThis returns a list of <code is:raw>MediaStreamTrack</code> objects that are <strong>video</strong> types.</p>\n</li>\n<li>\n<p><strong>getTrackById</strong>\r\nThis method takes in a string and will return the track from the MediaStream object with the corresponding id.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">trackId</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> stream.</span><span style="color: #D2A8FF">getAudioTracks</span><span style="color: #C9D1D9">()[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].id;</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;getTrackById&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTrackById</span><span style="color: #C9D1D9">(trackId))</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>\n</li>\n<li>\n<p><strong>removeTrack</strong>\r\nThis method removes the given track from the <code is:raw>MediaStream</code> object. When we add a button to remove the track to our code and then log the <code is:raw>MediaStream.getTracks</code> to the dev tools console, we can see it is no longer there. If we were displaying a video stream to a div on our page and removed the video track, then the stream would no longer appear.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tracks</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks before remove&quot;</span><span style="color: #C9D1D9">, tracks);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// remove both tracks</span></span>\n<span class="line"><span style="color: #C9D1D9">          stream.</span><span style="color: #D2A8FF">removeTrack</span><span style="color: #C9D1D9">(tracks[</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">          stream.</span><span style="color: #D2A8FF">removeTrack</span><span style="color: #C9D1D9">(tracks[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks after remove&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638976221/blog/2021/12/getting-started-with-mediastream-api/removeTrack.png" alt="browser devtools console showing the MediaStream object before and after the removeTrack has been called"></p>\n</li>\n</ul>\n<h3 id="events">Events</h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events">Events</a> are simply actions that happen in the system you are programming, which the system tells you about so your code can react to them if needed. An <code is:raw>event listener is a function that runs when a specific event occurs</code>.</p>\n<p>You should be aware of a few events on the <code is:raw>MediaStream</code> object.</p>\n<ul>\n<li>\n<p><strong>addtrack</strong>\r\nFired when a new track object is added.</p>\n<ul>\n<li><em>Event listener:</em> <code is:raw>onaddtrack</code> is fired when a new track is added. To use the event listener, assign it to a function that you want to be called whenever a track is added</li>\n</ul>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    stream.</span><span style="color: #D2A8FF">onaddtrack</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// code to execute when track is added</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span></code></pre>\n</li>\n<li>\n<p><strong>removetrack</strong>\r\nFired when a new track object is added.</p>\n<ul>\n<li><em>Event listener:</em> <code is:raw>onremovetrack</code> is fired when a new track is removed. To use the event listener, assign it to a function you want to be called whenever a track is removed.</li>\n</ul>\n</li>\n</ul>\n<h2 id="conclusion">Conclusion</h2>\n<p>The <code is:raw>MediaStream</code> API is beneficial and can be utilized in the applications that you build. I hope this has been informative and helped you as a web developer.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/getting-started-with-mediastream-api/index.md" };
function rawContent() {
  return '\r\nWhen building web applications, you will sometimes need to work with audio and/or video inputs. You\'ll need to understand the MediaStream API, which is the web API that supports streaming both audio and video information. In this post, we\'ll cover the basics of the MediaStream API.\r\n\r\n## Getting Started\r\n\r\nTo get started, you\'ll need to gain access to the user\'s audio/video devices which provide data in a \'stream.\' A common use case would be getting access to the user\'s microphone and camera. One of the most common ways to do this is through the [getUserMedia](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia) method that is built into the browser. This post is more about understanding the different parts of the API. To see this method used in action, refer to [Kevin\'s post about getting audio in the browser](https://blog.deepgram.com/live-transcription-mic-browser/).\r\n\r\nLet\'s take the following code, insert it into an HTML file, and then open that file in the browser.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <body>\r\n    <h1>Getting Started With MediaStream</h1>\r\n    <script>\r\n      navigator.mediaDevices\r\n        .getUserMedia({ audio: true })\r\n        .then((stream) => {\r\n          console.log(\'MEDIA STREAM: \', stream)\r\n        })\r\n        .catch((err) => {\r\n          alert(\'PERMISSION DENIED\')\r\n        })\r\n    <\/script>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThis will prompt you to allow access to the microphone on your machine. If you reject it, you\'ll get an alert saying `PERMISSION DENIED.` If you allow that, then you will see the following in your console:\r\n\r\n![Devtools console result showing the MediaStream object that is initialized on page load](https://res.cloudinary.com/deepgram/image/upload/v1638906691/blog/2021/12/getting-started-with-mediastream-api/initial-console-log.png)\r\n\r\nAs you can see, there are several properties and methods available on the MediaStream object. Before we dive into these, I want to clarify a couple of definitions.\r\n\r\n*   **stream**: A stream of media content. Regarding what we\'ll be discussing, this refers to the stream of information coming from a user\'s device. The stream will be coming from either the device\'s microphone or the camera, or both at the same time. A stream will consist of one or more \'tracks.\'\r\n*   **track**: A `track` is a piece of media within a stream. These are typically audio or video tracks. If we get access to both a microphone and a camera, our stream will consist of both an audio and a video track.\r\n\r\n### Properties\r\n\r\n*   **active**\r\n\r\n    The first one we see is the `active` property. This property is simply a boolean value indicating if any part of the MediaStream object is currently active or being used. Most MediaStream objects you\'ll encounter will contain audio and/or video tracks. If any of these tracks is `active,` then the `active` property on the MediaStream object will be true.\r\n\r\n*   **id**\r\n\r\n    The other property available on our MediaStream object is the id, a unique identifier for the object and contains 36 characters. This will be helpful if you need to keep track of multiple streams and do different things with them.\r\n\r\n### Methods\r\n\r\n*   **addTrack**\r\n\r\n    This method takes in a `MediaStreamTrack` as an argument and adds it to the MediaStream object.\r\n\r\n![image showing that a track gets added to the MediaStream object when addTrack is called](https://res.cloudinary.com/deepgram/image/upload/v1638975710/blog/2021/12/getting-started-with-mediastream-api/addTrack.png)\r\n\r\n*   **getTracks**\r\n\r\n    This returns a list of all `MediaStreamTrack` objects associated with the stream. To test it out, let\'s add the `getTracks` method to our code. I\'ve included the `video: true` in the constraints so we can see multiple tracks.\r\n\r\n    ```html\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <body>\r\n        <h1>Getting Started With MediaStream</h1>\r\n        <script>\r\n          navigator.mediaDevices\r\n            .getUserMedia({ audio: true, video: true })\r\n            .then((stream) => {\r\n              console.log("tracks", stream.getTracks());\r\n            .catch((err) => {\r\n              console.log("ERROR", err);\r\n              alert("PERMISSION DENIED");\r\n            });\r\n        <\/script>\r\n      </body>\r\n    </html>\r\n    ```\r\n\r\n    You can see in the screenshot below that we get both the audio and the video tracks showing:\r\n    ![Console showing the results of the stream.getTracks() call](https://res.cloudinary.com/deepgram/image/upload/v1638911657/blog/2021/12/getting-started-with-mediastream-api/getTracks.png)\r\n\r\n*   **getAudioTracks**\r\n\r\n    This returns a list of `MediaStreamTrack` objects that are **audio** types. If we used this instead of `getTracks` above, we would have gotten the list with only the audio track showing.\r\n\r\n*   **getVideoTracks**\r\n    This returns a list of `MediaStreamTrack` objects that are **video** types.\r\n\r\n*   **getTrackById**\r\n    This method takes in a string and will return the track from the MediaStream object with the corresponding id.\r\n\r\n    ```html\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <body>\r\n        <h1>Getting Started With MediaStream</h1>\r\n        <script>\r\n          navigator.mediaDevices\r\n            .getUserMedia({ audio: true, video: true })\r\n            .then((stream) => {\r\n              const trackId = stream.getAudioTracks()[0].id;\r\n              console.log("getTrackById", stream.getTrackById(trackId))\r\n            .catch((err) => {\r\n              console.log("ERROR", err);\r\n              alert("PERMISSION DENIED");\r\n            });\r\n        <\/script>\r\n      </body>\r\n    </html>\r\n    ```\r\n\r\n*   **removeTrack**\r\n    This method removes the given track from the `MediaStream` object. When we add a button to remove the track to our code and then log the `MediaStream.getTracks` to the dev tools console, we can see it is no longer there. If we were displaying a video stream to a div on our page and removed the video track, then the stream would no longer appear.\r\n\r\n    ```html\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <body>\r\n        <h1>Getting Started With MediaStream</h1>\r\n        <script>\r\n          navigator.mediaDevices\r\n            .getUserMedia({ audio: true, video: true })\r\n            .then((stream) => {\r\n              const tracks = stream.getTracks()\r\n              console.log("tracks before remove", tracks);\r\n              // remove both tracks\r\n              stream.removeTrack(tracks[1])\r\n              stream.removeTrack(tracks[0])\r\n              console.log("tracks after remove", stream.getTracks());\r\n            .catch((err) => {\r\n              console.log("ERROR", err);\r\n              alert("PERMISSION DENIED");\r\n            });\r\n        <\/script>\r\n      </body>\r\n    </html>\r\n    ```\r\n\r\n    ![browser devtools console showing the MediaStream object before and after the removeTrack has been called](https://res.cloudinary.com/deepgram/image/upload/v1638976221/blog/2021/12/getting-started-with-mediastream-api/removeTrack.png)\r\n\r\n### Events\r\n\r\n[Events](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events) are simply actions that happen in the system you are programming, which the system tells you about so your code can react to them if needed. An `event listener is a function that runs when a specific event occurs`.\r\n\r\nYou should be aware of a few events on the `MediaStream` object.\r\n\r\n*   **addtrack**\r\n    Fired when a new track object is added.\r\n\r\n    *   *Event listener:* `onaddtrack` is fired when a new track is added. To use the event listener, assign it to a function that you want to be called whenever a track is added\r\n\r\n    ```js\r\n    navigator.mediaDevices\r\n      .getUserMedia({ audio: true, video: true })\r\n      .then((stream) => {\r\n        stream.onaddtrack = function(event) {\r\n          // code to execute when track is added\r\n        }\r\n      .catch((err) => {\r\n        console.log("ERROR", err);\r\n        alert("PERMISSION DENIED");\r\n      });\r\n    ```\r\n\r\n*   **removetrack**\r\n    Fired when a new track object is added.\r\n    *   *Event listener:* `onremovetrack` is fired when a new track is removed. To use the event listener, assign it to a function you want to be called whenever a track is removed.\r\n\r\n## Conclusion\r\n\r\nThe `MediaStream` API is beneficial and can be utilized in the applications that you build. I hope this has been informative and helped you as a web developer.\r\n\r\n        ';
}
function compiledContent() {
  return '<p>When building web applications, you will sometimes need to work with audio and/or video inputs. You\u2019ll need to understand the MediaStream API, which is the web API that supports streaming both audio and video information. In this post, we\u2019ll cover the basics of the MediaStream API.</p>\n<h2 id="getting-started">Getting Started</h2>\n<p>To get started, you\u2019ll need to gain access to the user\u2019s audio/video devices which provide data in a \u2018stream.\u2019 A common use case would be getting access to the user\u2019s microphone and camera. One of the most common ways to do this is through the <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia">getUserMedia</a> method that is built into the browser. This post is more about understanding the different parts of the API. To see this method used in action, refer to <a href="https://blog.deepgram.com/live-transcription-mic-browser/">Kevin\u2019s post about getting audio in the browser</a>.</p>\n<p>Let\u2019s take the following code, insert it into an HTML file, and then open that file in the browser.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;MEDIA STREAM: &#39;</span><span style="color: #C9D1D9">, stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;PERMISSION DENIED&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This will prompt you to allow access to the microphone on your machine. If you reject it, you\u2019ll get an alert saying <code is:raw>PERMISSION DENIED.</code> If you allow that, then you will see the following in your console:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638906691/blog/2021/12/getting-started-with-mediastream-api/initial-console-log.png" alt="Devtools console result showing the MediaStream object that is initialized on page load"></p>\n<p>As you can see, there are several properties and methods available on the MediaStream object. Before we dive into these, I want to clarify a couple of definitions.</p>\n<ul>\n<li><strong>stream</strong>: A stream of media content. Regarding what we\u2019ll be discussing, this refers to the stream of information coming from a user\u2019s device. The stream will be coming from either the device\u2019s microphone or the camera, or both at the same time. A stream will consist of one or more \u2018tracks.\u2019</li>\n<li><strong>track</strong>: A <code is:raw>track</code> is a piece of media within a stream. These are typically audio or video tracks. If we get access to both a microphone and a camera, our stream will consist of both an audio and a video track.</li>\n</ul>\n<h3 id="properties">Properties</h3>\n<ul>\n<li>\n<p><strong>active</strong></p>\n<p>The first one we see is the <code is:raw>active</code> property. This property is simply a boolean value indicating if any part of the MediaStream object is currently active or being used. Most MediaStream objects you\u2019ll encounter will contain audio and/or video tracks. If any of these tracks is <code is:raw>active,</code> then the <code is:raw>active</code> property on the MediaStream object will be true.</p>\n</li>\n<li>\n<p><strong>id</strong></p>\n<p>The other property available on our MediaStream object is the id, a unique identifier for the object and contains 36 characters. This will be helpful if you need to keep track of multiple streams and do different things with them.</p>\n</li>\n</ul>\n<h3 id="methods">Methods</h3>\n<ul>\n<li>\n<p><strong>addTrack</strong></p>\n<p>This method takes in a <code is:raw>MediaStreamTrack</code> as an argument and adds it to the MediaStream object.</p>\n</li>\n</ul>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638975710/blog/2021/12/getting-started-with-mediastream-api/addTrack.png" alt="image showing that a track gets added to the MediaStream object when addTrack is called"></p>\n<ul>\n<li>\n<p><strong>getTracks</strong></p>\n<p>This returns a list of all <code is:raw>MediaStreamTrack</code> objects associated with the stream. To test it out, let\u2019s add the <code is:raw>getTracks</code> method to our code. I\u2019ve included the <code is:raw>video: true</code> in the constraints so we can see multiple tracks.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>\n<p>You can see in the screenshot below that we get both the audio and the video tracks showing:\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1638911657/blog/2021/12/getting-started-with-mediastream-api/getTracks.png" alt="Console showing the results of the stream.getTracks() call"></p>\n</li>\n<li>\n<p><strong>getAudioTracks</strong></p>\n<p>This returns a list of <code is:raw>MediaStreamTrack</code> objects that are <strong>audio</strong> types. If we used this instead of <code is:raw>getTracks</code> above, we would have gotten the list with only the audio track showing.</p>\n</li>\n<li>\n<p><strong>getVideoTracks</strong>\r\nThis returns a list of <code is:raw>MediaStreamTrack</code> objects that are <strong>video</strong> types.</p>\n</li>\n<li>\n<p><strong>getTrackById</strong>\r\nThis method takes in a string and will return the track from the MediaStream object with the corresponding id.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">trackId</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> stream.</span><span style="color: #D2A8FF">getAudioTracks</span><span style="color: #C9D1D9">()[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].id;</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;getTrackById&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTrackById</span><span style="color: #C9D1D9">(trackId))</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>\n</li>\n<li>\n<p><strong>removeTrack</strong>\r\nThis method removes the given track from the <code is:raw>MediaStream</code> object. When we add a button to remove the track to our code and then log the <code is:raw>MediaStream.getTracks</code> to the dev tools console, we can see it is no longer there. If we were displaying a video stream to a div on our page and removed the video track, then the stream would no longer appear.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tracks</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks before remove&quot;</span><span style="color: #C9D1D9">, tracks);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// remove both tracks</span></span>\n<span class="line"><span style="color: #C9D1D9">          stream.</span><span style="color: #D2A8FF">removeTrack</span><span style="color: #C9D1D9">(tracks[</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">          stream.</span><span style="color: #D2A8FF">removeTrack</span><span style="color: #C9D1D9">(tracks[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks after remove&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638976221/blog/2021/12/getting-started-with-mediastream-api/removeTrack.png" alt="browser devtools console showing the MediaStream object before and after the removeTrack has been called"></p>\n</li>\n</ul>\n<h3 id="events">Events</h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events">Events</a> are simply actions that happen in the system you are programming, which the system tells you about so your code can react to them if needed. An <code is:raw>event listener is a function that runs when a specific event occurs</code>.</p>\n<p>You should be aware of a few events on the <code is:raw>MediaStream</code> object.</p>\n<ul>\n<li>\n<p><strong>addtrack</strong>\r\nFired when a new track object is added.</p>\n<ul>\n<li><em>Event listener:</em> <code is:raw>onaddtrack</code> is fired when a new track is added. To use the event listener, assign it to a function that you want to be called whenever a track is added</li>\n</ul>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    stream.</span><span style="color: #D2A8FF">onaddtrack</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// code to execute when track is added</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span></code></pre>\n</li>\n<li>\n<p><strong>removetrack</strong>\r\nFired when a new track object is added.</p>\n<ul>\n<li><em>Event listener:</em> <code is:raw>onremovetrack</code> is fired when a new track is removed. To use the event listener, assign it to a function you want to be called whenever a track is removed.</li>\n</ul>\n</li>\n</ul>\n<h2 id="conclusion">Conclusion</h2>\n<p>The <code is:raw>MediaStream</code> API is beneficial and can be utilized in the applications that you build. I hope this has been informative and helped you as a web developer.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/getting-started-with-mediastream-api/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>When building web applications, you will sometimes need to work with audio and/or video inputs. You’ll need to understand the MediaStream API, which is the web API that supports streaming both audio and video information. In this post, we’ll cover the basics of the MediaStream API.</p>
<h2 id="getting-started">Getting Started</h2>
<p>To get started, you’ll need to gain access to the user’s audio/video devices which provide data in a ‘stream.’ A common use case would be getting access to the user’s microphone and camera. One of the most common ways to do this is through the <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia">getUserMedia</a> method that is built into the browser. This post is more about understanding the different parts of the API. To see this method used in action, refer to <a href="https://blog.deepgram.com/live-transcription-mic-browser/">Kevin’s post about getting audio in the browser</a>.</p>
<p>Let’s take the following code, insert it into an HTML file, and then open that file in the browser.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;MEDIA STREAM: &#39;</span><span style="color: #C9D1D9">, stream)</span></span>
<span class="line"><span style="color: #C9D1D9">        })</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;PERMISSION DENIED&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        })</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>This will prompt you to allow access to the microphone on your machine. If you reject it, you’ll get an alert saying <code>PERMISSION DENIED.</code> If you allow that, then you will see the following in your console:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638906691/blog/2021/12/getting-started-with-mediastream-api/initial-console-log.png" alt="Devtools console result showing the MediaStream object that is initialized on page load"></p>
<p>As you can see, there are several properties and methods available on the MediaStream object. Before we dive into these, I want to clarify a couple of definitions.</p>
<ul>
<li><strong>stream</strong>: A stream of media content. Regarding what we’ll be discussing, this refers to the stream of information coming from a user’s device. The stream will be coming from either the device’s microphone or the camera, or both at the same time. A stream will consist of one or more ‘tracks.’</li>
<li><strong>track</strong>: A <code>track</code> is a piece of media within a stream. These are typically audio or video tracks. If we get access to both a microphone and a camera, our stream will consist of both an audio and a video track.</li>
</ul>
<h3 id="properties">Properties</h3>
<ul>
<li>
<p><strong>active</strong></p>
<p>The first one we see is the <code>active</code> property. This property is simply a boolean value indicating if any part of the MediaStream object is currently active or being used. Most MediaStream objects you’ll encounter will contain audio and/or video tracks. If any of these tracks is <code>active,</code> then the <code>active</code> property on the MediaStream object will be true.</p>
</li>
<li>
<p><strong>id</strong></p>
<p>The other property available on our MediaStream object is the id, a unique identifier for the object and contains 36 characters. This will be helpful if you need to keep track of multiple streams and do different things with them.</p>
</li>
</ul>
<h3 id="methods">Methods</h3>
<ul>
<li>
<p><strong>addTrack</strong></p>
<p>This method takes in a <code>MediaStreamTrack</code> as an argument and adds it to the MediaStream object.</p>
</li>
</ul>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638975710/blog/2021/12/getting-started-with-mediastream-api/addTrack.png" alt="image showing that a track gets added to the MediaStream object when addTrack is called"></p>
<ul>
<li>
<p><strong>getTracks</strong></p>
<p>This returns a list of all <code>MediaStreamTrack</code> objects associated with the stream. To test it out, let’s add the <code>getTracks</code> method to our code. I’ve included the <code>video: true</code> in the constraints so we can see multiple tracks.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">());</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">        });</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>
<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>
<p>You can see in the screenshot below that we get both the audio and the video tracks showing:
<img src="https://res.cloudinary.com/deepgram/image/upload/v1638911657/blog/2021/12/getting-started-with-mediastream-api/getTracks.png" alt="Console showing the results of the stream.getTracks() call"></p>
</li>
<li>
<p><strong>getAudioTracks</strong></p>
<p>This returns a list of <code>MediaStreamTrack</code> objects that are <strong>audio</strong> types. If we used this instead of <code>getTracks</code> above, we would have gotten the list with only the audio track showing.</p>
</li>
<li>
<p><strong>getVideoTracks</strong>
This returns a list of <code>MediaStreamTrack</code> objects that are <strong>video</strong> types.</p>
</li>
<li>
<p><strong>getTrackById</strong>
This method takes in a string and will return the track from the MediaStream object with the corresponding id.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">trackId</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> stream.</span><span style="color: #D2A8FF">getAudioTracks</span><span style="color: #C9D1D9">()[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].id;</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;getTrackById&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTrackById</span><span style="color: #C9D1D9">(trackId))</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">        });</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>
<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>
</li>
<li>
<p><strong>removeTrack</strong>
This method removes the given track from the <code>MediaStream</code> object. When we add a button to remove the track to our code and then log the <code>MediaStream.getTracks</code> to the dev tools console, we can see it is no longer there. If we were displaying a video stream to a div on our page and removed the video track, then the stream would no longer appear.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Getting Started With MediaStream&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tracks</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks before remove&quot;</span><span style="color: #C9D1D9">, tracks);</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// remove both tracks</span></span>
<span class="line"><span style="color: #C9D1D9">          stream.</span><span style="color: #D2A8FF">removeTrack</span><span style="color: #C9D1D9">(tracks[</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">          stream.</span><span style="color: #D2A8FF">removeTrack</span><span style="color: #C9D1D9">(tracks[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;tracks after remove&quot;</span><span style="color: #C9D1D9">, stream.</span><span style="color: #D2A8FF">getTracks</span><span style="color: #C9D1D9">());</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">        });</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">script</span><span style="color: #FF7B72">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">body</span><span style="color: #FF7B72">&gt;</span></span>
<span class="line"><span style="color: #FF7B72">&lt;/</span><span style="color: #C9D1D9">html</span><span style="color: #FF7B72">&gt;</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638976221/blog/2021/12/getting-started-with-mediastream-api/removeTrack.png" alt="browser devtools console showing the MediaStream object before and after the removeTrack has been called"></p>
</li>
</ul>
<h3 id="events">Events</h3>
<p><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events">Events</a> are simply actions that happen in the system you are programming, which the system tells you about so your code can react to them if needed. An <code>event listener is a function that runs when a specific event occurs</code>.</p>
<p>You should be aware of a few events on the <code>MediaStream</code> object.</p>
<ul>
<li>
<p><strong>addtrack</strong>
Fired when a new track object is added.</p>
<ul>
<li><em>Event listener:</em> <code>onaddtrack</code> is fired when a new track is added. To use the event listener, assign it to a function that you want to be called whenever a track is added</li>
</ul>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    stream.</span><span style="color: #D2A8FF">onaddtrack</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// code to execute when track is added</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;ERROR&quot;</span><span style="color: #C9D1D9">, err);</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PERMISSION DENIED&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">  });</span></span></code></pre>
</li>
<li>
<p><strong>removetrack</strong>
Fired when a new track object is added.</p>
<ul>
<li><em>Event listener:</em> <code>onremovetrack</code> is fired when a new track is removed. To use the event listener, assign it to a function you want to be called whenever a track is removed.</li>
</ul>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>The <code>MediaStream</code> API is beneficial and can be utilized in the applications that you build. I hope this has been informative and helped you as a web developer.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/getting-started-with-mediastream-api/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
