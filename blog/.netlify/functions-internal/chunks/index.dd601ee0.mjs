import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "creating-an-npm-package", "text": "Creating an npm Package" }, { "depth": 2, "slug": "publishing-an-npm-package", "text": "Publishing an npm Package" }, { "depth": 2, "slug": "testing-your-npm-package", "text": "Testing Your npm Package" }, { "depth": 2, "slug": "using-your-npm-package", "text": "Using Your npm Package" }, { "depth": 2, "slug": "exporting-functions", "text": "Exporting Functions" }, { "depth": 2, "slug": "exporting-classes", "text": "Exporting Classes" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\r\nIf you're a JavaScript developer, you've almost certainly used npm before. The Node Package Manager is a registry that allows developers to package up code and share it using a common set of commands - most commonly `npm install package-name`. Our own Node.js SDK is available on npm under [@deepgram/sdk](https://www.npmjs.com/package/@deepgram/sdk).\r\n\r\nIn this post, we'll create, publish, install, and use our first npm package. We'll then extend the functionality and end up with a more complex package that will let users query [The Open Movie Database](http://www.omdbapi.com).\r\n\r\nOur final class-based package code can be found at <a href=\"https://github.com/deepgram-devs/npm-package\">https://github.com/deepgram-devs/npm-package</a>.\r\n\r\n## Before We Start\r\n\r\nYou will need:\r\n\r\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\r\n*   An npm account - [get one here](https://www.npmjs.com/signup).\r\n*   An Open Movie Database API Key - [get one here](http://www.omdbapi.com/apikey.aspx) and be sure to use the verification link in the email with the key.\r\n\r\nCreate a new directory and open it in your code editor of choice.\r\n\r\n## Creating an npm Package\r\n\r\nCreate a `package.json` file and populate it with minimal information required for an npm package:\r\n\r\n```json\r\n{\r\n  \"name\": \"@username/first-package\",\r\n  \"version\": \"0.0.1\"\r\n}\r\n```\r\n\r\nThe `name` must be unique across all of npm. To aid this, and help list packages with the same author, we can 'scope' packages to a user or organization. Replace `username` with your npm username to scope it. Some other notes about choosing your package name:\r\n\r\n*   You cannot use uppercase letters.\r\n*   You can only use URL-safe characters.\r\n*   The maximum character length is 214.\r\n\r\nThe `version` should follow [semantic versioning](https://docs.npmjs.com/about-semantic-versioning), which is `NUMBER.NUMBER.NUMBER`. Every time we publish an update to our package, the version must be different from previously-published versions.\r\n\r\nIf not specified, the default file for your project will be `index.js`. Create a file and open it in your code editor:\r\n\r\n```js\r\nconst value = 42\r\nmodule.exports = value\r\n```\r\n\r\nThis is a viable, though not terribly useful, npm package - it will always return a fixed value of `42`. The `module.exports` value can be anything - a fixed value, an object with multiple values, a function, a class, or any other data.\r\n\r\nWhile fixed values may have limited use, they are useful in some contexts - the `profane-words` package I used in my [automatic profanity censoring](https://blog.deepgram.com/censor-profanity-nodejs/) post used a fixed array value to include a list of almost 3000 profanities instead of me needing to include them a more manual way.\r\n\r\n## Publishing an npm Package\r\n\r\nOpen your terminal and navigate to your project directory and run the following commands:\r\n\r\n```bash\r\nnpm login\r\nnpm publish --access=public\r\n```\r\n\r\nYou have now published your first ever npm package - congratulations! If you go to <a href=\"https://www.npmjs.com/package/@username/first-package\">https://www.npmjs.com/package/@username/first-package</a> you should see it. Reminder: if ever you are publishing again, you must increase the version in `package.json`,or you will get an error.\r\n\r\n## Testing Your npm Package\r\n\r\nWant to use your package locally to test it before publishing? Create a new file in your repository called `scratchpad.js` (you can call it anything - this is what I use) and open it on your code editor:\r\n\r\n```js\r\nconst firstPackage = require('./index.js')\r\nconsole.log(firstPackage) // 42\r\n```\r\n\r\nRun this file with `node scratchpad.js`.\r\n\r\nIf you want to exclude this file from being downloaded by users when they install your package, add it to a `.gitignore` file. Create one now and enter the filenames you want to be excluded (one per line):\r\n\r\n    scratchpad.js\r\n\r\n## Using Your npm Package\r\n\r\nCreate a brand new directory outside of this project. Navigate to it in a terminal, and type:\r\n\r\n    npm install @username/first-package\r\n\r\nCreate an `index.js` file to require and use the package:\r\n\r\n```js\r\nconst firstPackage = require('@username/first-package')\r\nconsole.log(firstPackage) // 42\r\n```\r\n\r\n## Exporting Functions\r\n\r\nAs mentioned above, you can export any JavaScript value or datatype in your package. Replace the content of your `index.js` with the following:\r\n\r\n```js\r\nconst value = 42\r\n\r\nfunction sum(a, b) {\r\n  return a + b\r\n}\r\n\r\nmodule.exports = {\r\n  value,\r\n  sum,\r\n}\r\n```\r\n\r\nThis is exporting an object with both the fixed value and the function. Update `scratchpad.js` and then rerun it:\r\n\r\n```js\r\nconst firstPackage = require('./index.js')\r\nconsole.log(firstPackage) // { value: 42, sum: [Function: sum] }\r\nconsole.log(firstPackage.sum(1, 3)) // 4\r\n```\r\n\r\nYou may have seen object destructing when requiring packages. Here's how it looks:\r\n\r\n```js\r\nconst { sum } = require('./index.js')\r\nconsole.log(sum(1, 3)) // 4\r\n```\r\n\r\nThis takes the `sum` property in the object returned by our package and makes it available as a top-level variable called `sum`. This is what we do with our [Deepgram Node.js SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/):\r\n\r\n```js\r\nconst { Deepgram } = require('@deepgram/sdk')\r\n```\r\n\r\n## Exporting Classes\r\n\r\nExporting one or more functions is quite a common behavior of npm packages, as is exporting a class. Here's what interacting with a class-based package looks like courtesy of the Deepgram Node.js SDK:\r\n\r\n```js\r\nconst { Deepgram } = require('@deepgram/sdk')\r\nconst deepgram = new Deepgram('DEEPGRAM_API_KEY')\r\ndeepgram.transcription\r\n  .preRecorded({\r\n    url: 'https://static.deepgram.com/examples/nasa-spacewalk-interview.wav',\r\n  })\r\n  .then((transcript) => {\r\n    console.log(transcript)\r\n  })\r\n```\r\n\r\nLet's create our own exported class for the Open Movie Database. First, install the `axios` package that will help us make API calls. In your terminal:\r\n\r\n    npm install axios\r\n\r\nOnce you do this take a look at `package.json` - the `dependencies` section will be created for you. When users install your package, it will also install axios for them, along with axios' dependencies, and so on.\r\n\r\nReplace the whole content of `index.js` with the following:\r\n\r\n```js\r\nconst axios = require('axios')\r\n\r\nclass OpenMovieDatabase {\r\n  constructor(apiKey) {\r\n    this.apiKey = apiKey\r\n  }\r\n\r\n  async get(parameters) {\r\n    try {\r\n      const { data } = await axios({\r\n        method: 'GET',\r\n        url: 'http://www.omdbapi.com',\r\n        params: { apikey: this.apiKey, ...parameters },\r\n      })\r\n      return data\r\n    } catch (error) {\r\n      console.log(error.response)\r\n      throw error.response.data\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = OpenMovieDatabase\r\n```\r\n\r\nReplace `scratchpad.js` with the following:\r\n\r\n```js\r\nconst OpenMovieDatabase = require('./index')\r\nconst omdb = new OpenMovieDatabase('YOUR_KEY_HERE')\r\n\r\nomdb\r\n  .get({ t: 'Inside Out' })\r\n  .then((results) => {\r\n    console.log({ results })\r\n  })\r\n  .catch((error) => {\r\n    console.log({ error })\r\n  })\r\n```\r\n\r\nOnce the package is required, an instance needs to be created. The `constructor` we define expects an `apiKey` which is then stored in that instance. When using the package, we only need to provide the key once and then use `omdb.get()` as many times as we want without needing to provide our key as it is automatically included in the API request `params`. Nifty, right?\r\n\r\nBefore publishing this again, be sure to add `node_modules` to a new line in your `.gitignore`.\r\n\r\n## Wrapping Up\r\n\r\nThis package lacks lots of features I would expect as a user:\r\n\r\n*   More robust error handling.\r\n*   Checking required parameters are provided and providing useful errors if not.\r\n*   Splitting the 'get' and 'search' requests.\r\n\r\nOur final class-based package code can be found at <a href=\"https://github.com/deepgram-devs/npm-package\">https://github.com/deepgram-devs/npm-package</a>.\r\n\r\nWhen putting together my first npm packages, I found most tutorials stopped at the most basic examples or assumed lots of additional knowledge. I hope this has provided more helpful context and helped you get your first package published. If it did - please let us know what you've published so we can celebrate together - we are [@DeepgramDevs](https://twitter.com/DeepgramDevs) on Twitter or <a href=\"mailto:devrel@deepgram.com\">devrel@deepgram.com</a> via email. \r\n\r\n        ", "html": '<p>If you\u2019re a JavaScript developer, you\u2019ve almost certainly used npm before. The Node Package Manager is a registry that allows developers to package up code and share it using a common set of commands - most commonly <code is:raw>npm install package-name</code>. Our own Node.js SDK is available on npm under <a href="https://www.npmjs.com/package/@deepgram/sdk">@deepgram/sdk</a>.</p>\n<p>In this post, we\u2019ll create, publish, install, and use our first npm package. We\u2019ll then extend the functionality and end up with a more complex package that will let users query <a href="http://www.omdbapi.com">The Open Movie Database</a>.</p>\n<p>Our final class-based package code can be found at <a href="https://github.com/deepgram-devs/npm-package">https://github.com/deepgram-devs/npm-package</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>An npm account - <a href="https://www.npmjs.com/signup">get one here</a>.</li>\n<li>An Open Movie Database API Key - <a href="http://www.omdbapi.com/apikey.aspx">get one here</a> and be sure to use the verification link in the email with the key.</li>\n</ul>\n<p>Create a new directory and open it in your code editor of choice.</p>\n<h2 id="creating-an-npm-package">Creating an npm Package</h2>\n<p>Create a <code is:raw>package.json</code> file and populate it with minimal information required for an npm package:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;@username/first-package&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;0.0.1&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The <code is:raw>name</code> must be unique across all of npm. To aid this, and help list packages with the same author, we can \u2018scope\u2019 packages to a user or organization. Replace <code is:raw>username</code> with your npm username to scope it. Some other notes about choosing your package name:</p>\n<ul>\n<li>You cannot use uppercase letters.</li>\n<li>You can only use URL-safe characters.</li>\n<li>The maximum character length is 214.</li>\n</ul>\n<p>The <code is:raw>version</code> should follow <a href="https://docs.npmjs.com/about-semantic-versioning">semantic versioning</a>, which is <code is:raw>NUMBER.NUMBER.NUMBER</code>. Every time we publish an update to our package, the version must be different from previously-published versions.</p>\n<p>If not specified, the default file for your project will be <code is:raw>index.js</code>. Create a file and open it in your code editor:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42</span></span>\n<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> value</span></span></code></pre>\n<p>This is a viable, though not terribly useful, npm package - it will always return a fixed value of <code is:raw>42</code>. The <code is:raw>module.exports</code> value can be anything - a fixed value, an object with multiple values, a function, a class, or any other data.</p>\n<p>While fixed values may have limited use, they are useful in some contexts - the <code is:raw>profane-words</code> package I used in my <a href="https://blog.deepgram.com/censor-profanity-nodejs/">automatic profanity censoring</a> post used a fixed array value to include a list of almost 3000 profanities instead of me needing to include them a more manual way.</p>\n<h2 id="publishing-an-npm-package">Publishing an npm Package</h2>\n<p>Open your terminal and navigate to your project directory and run the following commands:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm login</span></span>\n<span class="line"><span style="color: #C9D1D9">npm publish --access=public</span></span></code></pre>\n<p>You have now published your first ever npm package - congratulations! If you go to <a href="https://www.npmjs.com/package/@username/first-package">https://www.npmjs.com/package/@username/first-package</a> you should see it. Reminder: if ever you are publishing again, you must increase the version in <code is:raw>package.json</code>,or you will get an error.</p>\n<h2 id="testing-your-npm-package">Testing Your npm Package</h2>\n<p>Want to use your package locally to test it before publishing? Create a new file in your repository called <code is:raw>scratchpad.js</code> (you can call it anything - this is what I use) and open it on your code editor:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// 42</span></span></code></pre>\n<p>Run this file with <code is:raw>node scratchpad.js</code>.</p>\n<p>If you want to exclude this file from being downloaded by users when they install your package, add it to a <code is:raw>.gitignore</code> file. Create one now and enter the filenames you want to be excluded (one per line):</p>\n<p>scratchpad.js</p>\n<h2 id="using-your-npm-package">Using Your npm Package</h2>\n<p>Create a brand new directory outside of this project. Navigate to it in a terminal, and type:</p>\n<p>npm install @username/first-package</p>\n<p>Create an <code is:raw>index.js</code> file to require and use the package:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@username/first-package&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// 42</span></span></code></pre>\n<h2 id="exporting-functions">Exporting Functions</h2>\n<p>As mentioned above, you can export any JavaScript value or datatype in your package. Replace the content of your <code is:raw>index.js</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">a</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">b</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> a </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> b</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  value,</span></span>\n<span class="line"><span style="color: #C9D1D9">  sum,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This is exporting an object with both the fixed value and the function. Update <code is:raw>scratchpad.js</code> and then rerun it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// { value: 42, sum: [Function: sum] }</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage.</span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)) </span><span style="color: #8B949E">// 4</span></span></code></pre>\n<p>You may have seen object destructing when requiring packages. Here\u2019s how it looks:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)) </span><span style="color: #8B949E">// 4</span></span></code></pre>\n<p>This takes the <code is:raw>sum</code> property in the object returned by our package and makes it available as a top-level variable called <code is:raw>sum</code>. This is what we do with our <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram Node.js SDK</a>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="exporting-classes">Exporting Classes</h2>\n<p>Exporting one or more functions is quite a common behavior of npm packages, as is exporting a class. Here\u2019s what interacting with a class-based package looks like courtesy of the Deepgram Node.js SDK:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<p>Let\u2019s create our own exported class for the Open Movie Database. First, install the <code is:raw>axios</code> package that will help us make API calls. In your terminal:</p>\n<p>npm install axios</p>\n<p>Once you do this take a look at <code is:raw>package.json</code> - the <code is:raw>dependencies</code> section will be created for you. When users install your package, it will also install axios for them, along with axios\u2019 dependencies, and so on.</p>\n<p>Replace the whole content of <code is:raw>index.js</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">OpenMovieDatabase</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">apiKey</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> apiKey</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">parameters</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        url: </span><span style="color: #A5D6FF">&#39;http://www.omdbapi.com&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        params: { apikey: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.apiKey, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">parameters },</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error.response)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">throw</span><span style="color: #C9D1D9"> error.response.data</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> OpenMovieDatabase</span></span></code></pre>\n<p>Replace <code is:raw>scratchpad.js</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OpenMovieDatabase</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">omdb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">OpenMovieDatabase</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_KEY_HERE&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">omdb</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ t: </span><span style="color: #A5D6FF">&#39;Inside Out&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ results })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ error })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<p>Once the package is required, an instance needs to be created. The <code is:raw>constructor</code> we define expects an <code is:raw>apiKey</code> which is then stored in that instance. When using the package, we only need to provide the key once and then use <code is:raw>omdb.get()</code> as many times as we want without needing to provide our key as it is automatically included in the API request <code is:raw>params</code>. Nifty, right?</p>\n<p>Before publishing this again, be sure to add <code is:raw>node_modules</code> to a new line in your <code is:raw>.gitignore</code>.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>This package lacks lots of features I would expect as a user:</p>\n<ul>\n<li>More robust error handling.</li>\n<li>Checking required parameters are provided and providing useful errors if not.</li>\n<li>Splitting the \u2018get\u2019 and \u2018search\u2019 requests.</li>\n</ul>\n<p>Our final class-based package code can be found at <a href="https://github.com/deepgram-devs/npm-package">https://github.com/deepgram-devs/npm-package</a>.</p>\n<p>When putting together my first npm packages, I found most tutorials stopped at the most basic examples or assumed lots of additional knowledge. I hope this has provided more helpful context and helped you get your first package published. If it did - please let us know what you\u2019ve published so we can celebrate together - we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> on Twitter or <a href="mailto:devrel@deepgram.com"><a href="mailto:devrel@deepgram.com">devrel@deepgram.com</a></a> via email.</p>' };
const frontmatter = { "title": "Building an npm Package", "description": "Create, publish, and use your first npm package returning values, functions, and classes.", "date": "2021-12-06T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1638810126/blog/2021/12/build-npm-packages/building-an-npm-package%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["nodejs"], "seo": { "title": "Building an npm Package", "description": "Create, publish, and use your first npm package returning values, functions, and classes." }, "shorturls": { "share": "https://dpgr.am/87d0a0c", "twitter": "https://dpgr.am/7b35feb", "linkedin": "https://dpgr.am/72dcd11", "reddit": "https://dpgr.am/2731585", "facebook": "https://dpgr.am/db18251" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453825/blog/build-npm-packages/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "creating-an-npm-package", "text": "Creating an npm Package" }, { "depth": 2, "slug": "publishing-an-npm-package", "text": "Publishing an npm Package" }, { "depth": 2, "slug": "testing-your-npm-package", "text": "Testing Your npm Package" }, { "depth": 2, "slug": "using-your-npm-package", "text": "Using Your npm Package" }, { "depth": 2, "slug": "exporting-functions", "text": "Exporting Functions" }, { "depth": 2, "slug": "exporting-classes", "text": "Exporting Classes" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\r\nIf you're a JavaScript developer, you've almost certainly used npm before. The Node Package Manager is a registry that allows developers to package up code and share it using a common set of commands - most commonly `npm install package-name`. Our own Node.js SDK is available on npm under [@deepgram/sdk](https://www.npmjs.com/package/@deepgram/sdk).\r\n\r\nIn this post, we'll create, publish, install, and use our first npm package. We'll then extend the functionality and end up with a more complex package that will let users query [The Open Movie Database](http://www.omdbapi.com).\r\n\r\nOur final class-based package code can be found at <a href=\"https://github.com/deepgram-devs/npm-package\">https://github.com/deepgram-devs/npm-package</a>.\r\n\r\n## Before We Start\r\n\r\nYou will need:\r\n\r\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\r\n*   An npm account - [get one here](https://www.npmjs.com/signup).\r\n*   An Open Movie Database API Key - [get one here](http://www.omdbapi.com/apikey.aspx) and be sure to use the verification link in the email with the key.\r\n\r\nCreate a new directory and open it in your code editor of choice.\r\n\r\n## Creating an npm Package\r\n\r\nCreate a `package.json` file and populate it with minimal information required for an npm package:\r\n\r\n```json\r\n{\r\n  \"name\": \"@username/first-package\",\r\n  \"version\": \"0.0.1\"\r\n}\r\n```\r\n\r\nThe `name` must be unique across all of npm. To aid this, and help list packages with the same author, we can 'scope' packages to a user or organization. Replace `username` with your npm username to scope it. Some other notes about choosing your package name:\r\n\r\n*   You cannot use uppercase letters.\r\n*   You can only use URL-safe characters.\r\n*   The maximum character length is 214.\r\n\r\nThe `version` should follow [semantic versioning](https://docs.npmjs.com/about-semantic-versioning), which is `NUMBER.NUMBER.NUMBER`. Every time we publish an update to our package, the version must be different from previously-published versions.\r\n\r\nIf not specified, the default file for your project will be `index.js`. Create a file and open it in your code editor:\r\n\r\n```js\r\nconst value = 42\r\nmodule.exports = value\r\n```\r\n\r\nThis is a viable, though not terribly useful, npm package - it will always return a fixed value of `42`. The `module.exports` value can be anything - a fixed value, an object with multiple values, a function, a class, or any other data.\r\n\r\nWhile fixed values may have limited use, they are useful in some contexts - the `profane-words` package I used in my [automatic profanity censoring](https://blog.deepgram.com/censor-profanity-nodejs/) post used a fixed array value to include a list of almost 3000 profanities instead of me needing to include them a more manual way.\r\n\r\n## Publishing an npm Package\r\n\r\nOpen your terminal and navigate to your project directory and run the following commands:\r\n\r\n```bash\r\nnpm login\r\nnpm publish --access=public\r\n```\r\n\r\nYou have now published your first ever npm package - congratulations! If you go to <a href=\"https://www.npmjs.com/package/@username/first-package\">https://www.npmjs.com/package/@username/first-package</a> you should see it. Reminder: if ever you are publishing again, you must increase the version in `package.json`,or you will get an error.\r\n\r\n## Testing Your npm Package\r\n\r\nWant to use your package locally to test it before publishing? Create a new file in your repository called `scratchpad.js` (you can call it anything - this is what I use) and open it on your code editor:\r\n\r\n```js\r\nconst firstPackage = require('./index.js')\r\nconsole.log(firstPackage) // 42\r\n```\r\n\r\nRun this file with `node scratchpad.js`.\r\n\r\nIf you want to exclude this file from being downloaded by users when they install your package, add it to a `.gitignore` file. Create one now and enter the filenames you want to be excluded (one per line):\r\n\r\n    scratchpad.js\r\n\r\n## Using Your npm Package\r\n\r\nCreate a brand new directory outside of this project. Navigate to it in a terminal, and type:\r\n\r\n    npm install @username/first-package\r\n\r\nCreate an `index.js` file to require and use the package:\r\n\r\n```js\r\nconst firstPackage = require('@username/first-package')\r\nconsole.log(firstPackage) // 42\r\n```\r\n\r\n## Exporting Functions\r\n\r\nAs mentioned above, you can export any JavaScript value or datatype in your package. Replace the content of your `index.js` with the following:\r\n\r\n```js\r\nconst value = 42\r\n\r\nfunction sum(a, b) {\r\n  return a + b\r\n}\r\n\r\nmodule.exports = {\r\n  value,\r\n  sum,\r\n}\r\n```\r\n\r\nThis is exporting an object with both the fixed value and the function. Update `scratchpad.js` and then rerun it:\r\n\r\n```js\r\nconst firstPackage = require('./index.js')\r\nconsole.log(firstPackage) // { value: 42, sum: [Function: sum] }\r\nconsole.log(firstPackage.sum(1, 3)) // 4\r\n```\r\n\r\nYou may have seen object destructing when requiring packages. Here's how it looks:\r\n\r\n```js\r\nconst { sum } = require('./index.js')\r\nconsole.log(sum(1, 3)) // 4\r\n```\r\n\r\nThis takes the `sum` property in the object returned by our package and makes it available as a top-level variable called `sum`. This is what we do with our [Deepgram Node.js SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/):\r\n\r\n```js\r\nconst { Deepgram } = require('@deepgram/sdk')\r\n```\r\n\r\n## Exporting Classes\r\n\r\nExporting one or more functions is quite a common behavior of npm packages, as is exporting a class. Here's what interacting with a class-based package looks like courtesy of the Deepgram Node.js SDK:\r\n\r\n```js\r\nconst { Deepgram } = require('@deepgram/sdk')\r\nconst deepgram = new Deepgram('DEEPGRAM_API_KEY')\r\ndeepgram.transcription\r\n  .preRecorded({\r\n    url: 'https://static.deepgram.com/examples/nasa-spacewalk-interview.wav',\r\n  })\r\n  .then((transcript) => {\r\n    console.log(transcript)\r\n  })\r\n```\r\n\r\nLet's create our own exported class for the Open Movie Database. First, install the `axios` package that will help us make API calls. In your terminal:\r\n\r\n    npm install axios\r\n\r\nOnce you do this take a look at `package.json` - the `dependencies` section will be created for you. When users install your package, it will also install axios for them, along with axios' dependencies, and so on.\r\n\r\nReplace the whole content of `index.js` with the following:\r\n\r\n```js\r\nconst axios = require('axios')\r\n\r\nclass OpenMovieDatabase {\r\n  constructor(apiKey) {\r\n    this.apiKey = apiKey\r\n  }\r\n\r\n  async get(parameters) {\r\n    try {\r\n      const { data } = await axios({\r\n        method: 'GET',\r\n        url: 'http://www.omdbapi.com',\r\n        params: { apikey: this.apiKey, ...parameters },\r\n      })\r\n      return data\r\n    } catch (error) {\r\n      console.log(error.response)\r\n      throw error.response.data\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = OpenMovieDatabase\r\n```\r\n\r\nReplace `scratchpad.js` with the following:\r\n\r\n```js\r\nconst OpenMovieDatabase = require('./index')\r\nconst omdb = new OpenMovieDatabase('YOUR_KEY_HERE')\r\n\r\nomdb\r\n  .get({ t: 'Inside Out' })\r\n  .then((results) => {\r\n    console.log({ results })\r\n  })\r\n  .catch((error) => {\r\n    console.log({ error })\r\n  })\r\n```\r\n\r\nOnce the package is required, an instance needs to be created. The `constructor` we define expects an `apiKey` which is then stored in that instance. When using the package, we only need to provide the key once and then use `omdb.get()` as many times as we want without needing to provide our key as it is automatically included in the API request `params`. Nifty, right?\r\n\r\nBefore publishing this again, be sure to add `node_modules` to a new line in your `.gitignore`.\r\n\r\n## Wrapping Up\r\n\r\nThis package lacks lots of features I would expect as a user:\r\n\r\n*   More robust error handling.\r\n*   Checking required parameters are provided and providing useful errors if not.\r\n*   Splitting the 'get' and 'search' requests.\r\n\r\nOur final class-based package code can be found at <a href=\"https://github.com/deepgram-devs/npm-package\">https://github.com/deepgram-devs/npm-package</a>.\r\n\r\nWhen putting together my first npm packages, I found most tutorials stopped at the most basic examples or assumed lots of additional knowledge. I hope this has provided more helpful context and helped you get your first package published. If it did - please let us know what you've published so we can celebrate together - we are [@DeepgramDevs](https://twitter.com/DeepgramDevs) on Twitter or <a href=\"mailto:devrel@deepgram.com\">devrel@deepgram.com</a> via email. \r\n\r\n        ", "html": '<p>If you\u2019re a JavaScript developer, you\u2019ve almost certainly used npm before. The Node Package Manager is a registry that allows developers to package up code and share it using a common set of commands - most commonly <code is:raw>npm install package-name</code>. Our own Node.js SDK is available on npm under <a href="https://www.npmjs.com/package/@deepgram/sdk">@deepgram/sdk</a>.</p>\n<p>In this post, we\u2019ll create, publish, install, and use our first npm package. We\u2019ll then extend the functionality and end up with a more complex package that will let users query <a href="http://www.omdbapi.com">The Open Movie Database</a>.</p>\n<p>Our final class-based package code can be found at <a href="https://github.com/deepgram-devs/npm-package">https://github.com/deepgram-devs/npm-package</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>An npm account - <a href="https://www.npmjs.com/signup">get one here</a>.</li>\n<li>An Open Movie Database API Key - <a href="http://www.omdbapi.com/apikey.aspx">get one here</a> and be sure to use the verification link in the email with the key.</li>\n</ul>\n<p>Create a new directory and open it in your code editor of choice.</p>\n<h2 id="creating-an-npm-package">Creating an npm Package</h2>\n<p>Create a <code is:raw>package.json</code> file and populate it with minimal information required for an npm package:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;@username/first-package&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;0.0.1&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The <code is:raw>name</code> must be unique across all of npm. To aid this, and help list packages with the same author, we can \u2018scope\u2019 packages to a user or organization. Replace <code is:raw>username</code> with your npm username to scope it. Some other notes about choosing your package name:</p>\n<ul>\n<li>You cannot use uppercase letters.</li>\n<li>You can only use URL-safe characters.</li>\n<li>The maximum character length is 214.</li>\n</ul>\n<p>The <code is:raw>version</code> should follow <a href="https://docs.npmjs.com/about-semantic-versioning">semantic versioning</a>, which is <code is:raw>NUMBER.NUMBER.NUMBER</code>. Every time we publish an update to our package, the version must be different from previously-published versions.</p>\n<p>If not specified, the default file for your project will be <code is:raw>index.js</code>. Create a file and open it in your code editor:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42</span></span>\n<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> value</span></span></code></pre>\n<p>This is a viable, though not terribly useful, npm package - it will always return a fixed value of <code is:raw>42</code>. The <code is:raw>module.exports</code> value can be anything - a fixed value, an object with multiple values, a function, a class, or any other data.</p>\n<p>While fixed values may have limited use, they are useful in some contexts - the <code is:raw>profane-words</code> package I used in my <a href="https://blog.deepgram.com/censor-profanity-nodejs/">automatic profanity censoring</a> post used a fixed array value to include a list of almost 3000 profanities instead of me needing to include them a more manual way.</p>\n<h2 id="publishing-an-npm-package">Publishing an npm Package</h2>\n<p>Open your terminal and navigate to your project directory and run the following commands:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm login</span></span>\n<span class="line"><span style="color: #C9D1D9">npm publish --access=public</span></span></code></pre>\n<p>You have now published your first ever npm package - congratulations! If you go to <a href="https://www.npmjs.com/package/@username/first-package">https://www.npmjs.com/package/@username/first-package</a> you should see it. Reminder: if ever you are publishing again, you must increase the version in <code is:raw>package.json</code>,or you will get an error.</p>\n<h2 id="testing-your-npm-package">Testing Your npm Package</h2>\n<p>Want to use your package locally to test it before publishing? Create a new file in your repository called <code is:raw>scratchpad.js</code> (you can call it anything - this is what I use) and open it on your code editor:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// 42</span></span></code></pre>\n<p>Run this file with <code is:raw>node scratchpad.js</code>.</p>\n<p>If you want to exclude this file from being downloaded by users when they install your package, add it to a <code is:raw>.gitignore</code> file. Create one now and enter the filenames you want to be excluded (one per line):</p>\n<p>scratchpad.js</p>\n<h2 id="using-your-npm-package">Using Your npm Package</h2>\n<p>Create a brand new directory outside of this project. Navigate to it in a terminal, and type:</p>\n<p>npm install @username/first-package</p>\n<p>Create an <code is:raw>index.js</code> file to require and use the package:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@username/first-package&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// 42</span></span></code></pre>\n<h2 id="exporting-functions">Exporting Functions</h2>\n<p>As mentioned above, you can export any JavaScript value or datatype in your package. Replace the content of your <code is:raw>index.js</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">a</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">b</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> a </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> b</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  value,</span></span>\n<span class="line"><span style="color: #C9D1D9">  sum,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This is exporting an object with both the fixed value and the function. Update <code is:raw>scratchpad.js</code> and then rerun it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// { value: 42, sum: [Function: sum] }</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage.</span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)) </span><span style="color: #8B949E">// 4</span></span></code></pre>\n<p>You may have seen object destructing when requiring packages. Here\u2019s how it looks:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)) </span><span style="color: #8B949E">// 4</span></span></code></pre>\n<p>This takes the <code is:raw>sum</code> property in the object returned by our package and makes it available as a top-level variable called <code is:raw>sum</code>. This is what we do with our <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram Node.js SDK</a>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="exporting-classes">Exporting Classes</h2>\n<p>Exporting one or more functions is quite a common behavior of npm packages, as is exporting a class. Here\u2019s what interacting with a class-based package looks like courtesy of the Deepgram Node.js SDK:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<p>Let\u2019s create our own exported class for the Open Movie Database. First, install the <code is:raw>axios</code> package that will help us make API calls. In your terminal:</p>\n<p>npm install axios</p>\n<p>Once you do this take a look at <code is:raw>package.json</code> - the <code is:raw>dependencies</code> section will be created for you. When users install your package, it will also install axios for them, along with axios\u2019 dependencies, and so on.</p>\n<p>Replace the whole content of <code is:raw>index.js</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">OpenMovieDatabase</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">apiKey</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> apiKey</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">parameters</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        url: </span><span style="color: #A5D6FF">&#39;http://www.omdbapi.com&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        params: { apikey: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.apiKey, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">parameters },</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error.response)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">throw</span><span style="color: #C9D1D9"> error.response.data</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> OpenMovieDatabase</span></span></code></pre>\n<p>Replace <code is:raw>scratchpad.js</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OpenMovieDatabase</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">omdb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">OpenMovieDatabase</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_KEY_HERE&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">omdb</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ t: </span><span style="color: #A5D6FF">&#39;Inside Out&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ results })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ error })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<p>Once the package is required, an instance needs to be created. The <code is:raw>constructor</code> we define expects an <code is:raw>apiKey</code> which is then stored in that instance. When using the package, we only need to provide the key once and then use <code is:raw>omdb.get()</code> as many times as we want without needing to provide our key as it is automatically included in the API request <code is:raw>params</code>. Nifty, right?</p>\n<p>Before publishing this again, be sure to add <code is:raw>node_modules</code> to a new line in your <code is:raw>.gitignore</code>.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>This package lacks lots of features I would expect as a user:</p>\n<ul>\n<li>More robust error handling.</li>\n<li>Checking required parameters are provided and providing useful errors if not.</li>\n<li>Splitting the \u2018get\u2019 and \u2018search\u2019 requests.</li>\n</ul>\n<p>Our final class-based package code can be found at <a href="https://github.com/deepgram-devs/npm-package">https://github.com/deepgram-devs/npm-package</a>.</p>\n<p>When putting together my first npm packages, I found most tutorials stopped at the most basic examples or assumed lots of additional knowledge. I hope this has provided more helpful context and helped you get your first package published. If it did - please let us know what you\u2019ve published so we can celebrate together - we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> on Twitter or <a href="mailto:devrel@deepgram.com"><a href="mailto:devrel@deepgram.com">devrel@deepgram.com</a></a> via email.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-npm-packages/index.md" };
function rawContent() {
  return "\r\nIf you're a JavaScript developer, you've almost certainly used npm before. The Node Package Manager is a registry that allows developers to package up code and share it using a common set of commands - most commonly `npm install package-name`. Our own Node.js SDK is available on npm under [@deepgram/sdk](https://www.npmjs.com/package/@deepgram/sdk).\r\n\r\nIn this post, we'll create, publish, install, and use our first npm package. We'll then extend the functionality and end up with a more complex package that will let users query [The Open Movie Database](http://www.omdbapi.com).\r\n\r\nOur final class-based package code can be found at <a href=\"https://github.com/deepgram-devs/npm-package\">https://github.com/deepgram-devs/npm-package</a>.\r\n\r\n## Before We Start\r\n\r\nYou will need:\r\n\r\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\r\n*   An npm account - [get one here](https://www.npmjs.com/signup).\r\n*   An Open Movie Database API Key - [get one here](http://www.omdbapi.com/apikey.aspx) and be sure to use the verification link in the email with the key.\r\n\r\nCreate a new directory and open it in your code editor of choice.\r\n\r\n## Creating an npm Package\r\n\r\nCreate a `package.json` file and populate it with minimal information required for an npm package:\r\n\r\n```json\r\n{\r\n  \"name\": \"@username/first-package\",\r\n  \"version\": \"0.0.1\"\r\n}\r\n```\r\n\r\nThe `name` must be unique across all of npm. To aid this, and help list packages with the same author, we can 'scope' packages to a user or organization. Replace `username` with your npm username to scope it. Some other notes about choosing your package name:\r\n\r\n*   You cannot use uppercase letters.\r\n*   You can only use URL-safe characters.\r\n*   The maximum character length is 214.\r\n\r\nThe `version` should follow [semantic versioning](https://docs.npmjs.com/about-semantic-versioning), which is `NUMBER.NUMBER.NUMBER`. Every time we publish an update to our package, the version must be different from previously-published versions.\r\n\r\nIf not specified, the default file for your project will be `index.js`. Create a file and open it in your code editor:\r\n\r\n```js\r\nconst value = 42\r\nmodule.exports = value\r\n```\r\n\r\nThis is a viable, though not terribly useful, npm package - it will always return a fixed value of `42`. The `module.exports` value can be anything - a fixed value, an object with multiple values, a function, a class, or any other data.\r\n\r\nWhile fixed values may have limited use, they are useful in some contexts - the `profane-words` package I used in my [automatic profanity censoring](https://blog.deepgram.com/censor-profanity-nodejs/) post used a fixed array value to include a list of almost 3000 profanities instead of me needing to include them a more manual way.\r\n\r\n## Publishing an npm Package\r\n\r\nOpen your terminal and navigate to your project directory and run the following commands:\r\n\r\n```bash\r\nnpm login\r\nnpm publish --access=public\r\n```\r\n\r\nYou have now published your first ever npm package - congratulations! If you go to <a href=\"https://www.npmjs.com/package/@username/first-package\">https://www.npmjs.com/package/@username/first-package</a> you should see it. Reminder: if ever you are publishing again, you must increase the version in `package.json`,or you will get an error.\r\n\r\n## Testing Your npm Package\r\n\r\nWant to use your package locally to test it before publishing? Create a new file in your repository called `scratchpad.js` (you can call it anything - this is what I use) and open it on your code editor:\r\n\r\n```js\r\nconst firstPackage = require('./index.js')\r\nconsole.log(firstPackage) // 42\r\n```\r\n\r\nRun this file with `node scratchpad.js`.\r\n\r\nIf you want to exclude this file from being downloaded by users when they install your package, add it to a `.gitignore` file. Create one now and enter the filenames you want to be excluded (one per line):\r\n\r\n    scratchpad.js\r\n\r\n## Using Your npm Package\r\n\r\nCreate a brand new directory outside of this project. Navigate to it in a terminal, and type:\r\n\r\n    npm install @username/first-package\r\n\r\nCreate an `index.js` file to require and use the package:\r\n\r\n```js\r\nconst firstPackage = require('@username/first-package')\r\nconsole.log(firstPackage) // 42\r\n```\r\n\r\n## Exporting Functions\r\n\r\nAs mentioned above, you can export any JavaScript value or datatype in your package. Replace the content of your `index.js` with the following:\r\n\r\n```js\r\nconst value = 42\r\n\r\nfunction sum(a, b) {\r\n  return a + b\r\n}\r\n\r\nmodule.exports = {\r\n  value,\r\n  sum,\r\n}\r\n```\r\n\r\nThis is exporting an object with both the fixed value and the function. Update `scratchpad.js` and then rerun it:\r\n\r\n```js\r\nconst firstPackage = require('./index.js')\r\nconsole.log(firstPackage) // { value: 42, sum: [Function: sum] }\r\nconsole.log(firstPackage.sum(1, 3)) // 4\r\n```\r\n\r\nYou may have seen object destructing when requiring packages. Here's how it looks:\r\n\r\n```js\r\nconst { sum } = require('./index.js')\r\nconsole.log(sum(1, 3)) // 4\r\n```\r\n\r\nThis takes the `sum` property in the object returned by our package and makes it available as a top-level variable called `sum`. This is what we do with our [Deepgram Node.js SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/):\r\n\r\n```js\r\nconst { Deepgram } = require('@deepgram/sdk')\r\n```\r\n\r\n## Exporting Classes\r\n\r\nExporting one or more functions is quite a common behavior of npm packages, as is exporting a class. Here's what interacting with a class-based package looks like courtesy of the Deepgram Node.js SDK:\r\n\r\n```js\r\nconst { Deepgram } = require('@deepgram/sdk')\r\nconst deepgram = new Deepgram('DEEPGRAM_API_KEY')\r\ndeepgram.transcription\r\n  .preRecorded({\r\n    url: 'https://static.deepgram.com/examples/nasa-spacewalk-interview.wav',\r\n  })\r\n  .then((transcript) => {\r\n    console.log(transcript)\r\n  })\r\n```\r\n\r\nLet's create our own exported class for the Open Movie Database. First, install the `axios` package that will help us make API calls. In your terminal:\r\n\r\n    npm install axios\r\n\r\nOnce you do this take a look at `package.json` - the `dependencies` section will be created for you. When users install your package, it will also install axios for them, along with axios' dependencies, and so on.\r\n\r\nReplace the whole content of `index.js` with the following:\r\n\r\n```js\r\nconst axios = require('axios')\r\n\r\nclass OpenMovieDatabase {\r\n  constructor(apiKey) {\r\n    this.apiKey = apiKey\r\n  }\r\n\r\n  async get(parameters) {\r\n    try {\r\n      const { data } = await axios({\r\n        method: 'GET',\r\n        url: 'http://www.omdbapi.com',\r\n        params: { apikey: this.apiKey, ...parameters },\r\n      })\r\n      return data\r\n    } catch (error) {\r\n      console.log(error.response)\r\n      throw error.response.data\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = OpenMovieDatabase\r\n```\r\n\r\nReplace `scratchpad.js` with the following:\r\n\r\n```js\r\nconst OpenMovieDatabase = require('./index')\r\nconst omdb = new OpenMovieDatabase('YOUR_KEY_HERE')\r\n\r\nomdb\r\n  .get({ t: 'Inside Out' })\r\n  .then((results) => {\r\n    console.log({ results })\r\n  })\r\n  .catch((error) => {\r\n    console.log({ error })\r\n  })\r\n```\r\n\r\nOnce the package is required, an instance needs to be created. The `constructor` we define expects an `apiKey` which is then stored in that instance. When using the package, we only need to provide the key once and then use `omdb.get()` as many times as we want without needing to provide our key as it is automatically included in the API request `params`. Nifty, right?\r\n\r\nBefore publishing this again, be sure to add `node_modules` to a new line in your `.gitignore`.\r\n\r\n## Wrapping Up\r\n\r\nThis package lacks lots of features I would expect as a user:\r\n\r\n*   More robust error handling.\r\n*   Checking required parameters are provided and providing useful errors if not.\r\n*   Splitting the 'get' and 'search' requests.\r\n\r\nOur final class-based package code can be found at <a href=\"https://github.com/deepgram-devs/npm-package\">https://github.com/deepgram-devs/npm-package</a>.\r\n\r\nWhen putting together my first npm packages, I found most tutorials stopped at the most basic examples or assumed lots of additional knowledge. I hope this has provided more helpful context and helped you get your first package published. If it did - please let us know what you've published so we can celebrate together - we are [@DeepgramDevs](https://twitter.com/DeepgramDevs) on Twitter or <a href=\"mailto:devrel@deepgram.com\">devrel@deepgram.com</a> via email. \r\n\r\n        ";
}
function compiledContent() {
  return '<p>If you\u2019re a JavaScript developer, you\u2019ve almost certainly used npm before. The Node Package Manager is a registry that allows developers to package up code and share it using a common set of commands - most commonly <code is:raw>npm install package-name</code>. Our own Node.js SDK is available on npm under <a href="https://www.npmjs.com/package/@deepgram/sdk">@deepgram/sdk</a>.</p>\n<p>In this post, we\u2019ll create, publish, install, and use our first npm package. We\u2019ll then extend the functionality and end up with a more complex package that will let users query <a href="http://www.omdbapi.com">The Open Movie Database</a>.</p>\n<p>Our final class-based package code can be found at <a href="https://github.com/deepgram-devs/npm-package">https://github.com/deepgram-devs/npm-package</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>An npm account - <a href="https://www.npmjs.com/signup">get one here</a>.</li>\n<li>An Open Movie Database API Key - <a href="http://www.omdbapi.com/apikey.aspx">get one here</a> and be sure to use the verification link in the email with the key.</li>\n</ul>\n<p>Create a new directory and open it in your code editor of choice.</p>\n<h2 id="creating-an-npm-package">Creating an npm Package</h2>\n<p>Create a <code is:raw>package.json</code> file and populate it with minimal information required for an npm package:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;@username/first-package&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;0.0.1&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The <code is:raw>name</code> must be unique across all of npm. To aid this, and help list packages with the same author, we can \u2018scope\u2019 packages to a user or organization. Replace <code is:raw>username</code> with your npm username to scope it. Some other notes about choosing your package name:</p>\n<ul>\n<li>You cannot use uppercase letters.</li>\n<li>You can only use URL-safe characters.</li>\n<li>The maximum character length is 214.</li>\n</ul>\n<p>The <code is:raw>version</code> should follow <a href="https://docs.npmjs.com/about-semantic-versioning">semantic versioning</a>, which is <code is:raw>NUMBER.NUMBER.NUMBER</code>. Every time we publish an update to our package, the version must be different from previously-published versions.</p>\n<p>If not specified, the default file for your project will be <code is:raw>index.js</code>. Create a file and open it in your code editor:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42</span></span>\n<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> value</span></span></code></pre>\n<p>This is a viable, though not terribly useful, npm package - it will always return a fixed value of <code is:raw>42</code>. The <code is:raw>module.exports</code> value can be anything - a fixed value, an object with multiple values, a function, a class, or any other data.</p>\n<p>While fixed values may have limited use, they are useful in some contexts - the <code is:raw>profane-words</code> package I used in my <a href="https://blog.deepgram.com/censor-profanity-nodejs/">automatic profanity censoring</a> post used a fixed array value to include a list of almost 3000 profanities instead of me needing to include them a more manual way.</p>\n<h2 id="publishing-an-npm-package">Publishing an npm Package</h2>\n<p>Open your terminal and navigate to your project directory and run the following commands:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm login</span></span>\n<span class="line"><span style="color: #C9D1D9">npm publish --access=public</span></span></code></pre>\n<p>You have now published your first ever npm package - congratulations! If you go to <a href="https://www.npmjs.com/package/@username/first-package">https://www.npmjs.com/package/@username/first-package</a> you should see it. Reminder: if ever you are publishing again, you must increase the version in <code is:raw>package.json</code>,or you will get an error.</p>\n<h2 id="testing-your-npm-package">Testing Your npm Package</h2>\n<p>Want to use your package locally to test it before publishing? Create a new file in your repository called <code is:raw>scratchpad.js</code> (you can call it anything - this is what I use) and open it on your code editor:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// 42</span></span></code></pre>\n<p>Run this file with <code is:raw>node scratchpad.js</code>.</p>\n<p>If you want to exclude this file from being downloaded by users when they install your package, add it to a <code is:raw>.gitignore</code> file. Create one now and enter the filenames you want to be excluded (one per line):</p>\n<p>scratchpad.js</p>\n<h2 id="using-your-npm-package">Using Your npm Package</h2>\n<p>Create a brand new directory outside of this project. Navigate to it in a terminal, and type:</p>\n<p>npm install @username/first-package</p>\n<p>Create an <code is:raw>index.js</code> file to require and use the package:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@username/first-package&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// 42</span></span></code></pre>\n<h2 id="exporting-functions">Exporting Functions</h2>\n<p>As mentioned above, you can export any JavaScript value or datatype in your package. Replace the content of your <code is:raw>index.js</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">a</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">b</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> a </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> b</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  value,</span></span>\n<span class="line"><span style="color: #C9D1D9">  sum,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This is exporting an object with both the fixed value and the function. Update <code is:raw>scratchpad.js</code> and then rerun it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// { value: 42, sum: [Function: sum] }</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage.</span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)) </span><span style="color: #8B949E">// 4</span></span></code></pre>\n<p>You may have seen object destructing when requiring packages. Here\u2019s how it looks:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)) </span><span style="color: #8B949E">// 4</span></span></code></pre>\n<p>This takes the <code is:raw>sum</code> property in the object returned by our package and makes it available as a top-level variable called <code is:raw>sum</code>. This is what we do with our <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram Node.js SDK</a>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="exporting-classes">Exporting Classes</h2>\n<p>Exporting one or more functions is quite a common behavior of npm packages, as is exporting a class. Here\u2019s what interacting with a class-based package looks like courtesy of the Deepgram Node.js SDK:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<p>Let\u2019s create our own exported class for the Open Movie Database. First, install the <code is:raw>axios</code> package that will help us make API calls. In your terminal:</p>\n<p>npm install axios</p>\n<p>Once you do this take a look at <code is:raw>package.json</code> - the <code is:raw>dependencies</code> section will be created for you. When users install your package, it will also install axios for them, along with axios\u2019 dependencies, and so on.</p>\n<p>Replace the whole content of <code is:raw>index.js</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">OpenMovieDatabase</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">apiKey</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> apiKey</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">parameters</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        url: </span><span style="color: #A5D6FF">&#39;http://www.omdbapi.com&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        params: { apikey: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.apiKey, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">parameters },</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error.response)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">throw</span><span style="color: #C9D1D9"> error.response.data</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> OpenMovieDatabase</span></span></code></pre>\n<p>Replace <code is:raw>scratchpad.js</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OpenMovieDatabase</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">omdb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">OpenMovieDatabase</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_KEY_HERE&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">omdb</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ t: </span><span style="color: #A5D6FF">&#39;Inside Out&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ results })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ error })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<p>Once the package is required, an instance needs to be created. The <code is:raw>constructor</code> we define expects an <code is:raw>apiKey</code> which is then stored in that instance. When using the package, we only need to provide the key once and then use <code is:raw>omdb.get()</code> as many times as we want without needing to provide our key as it is automatically included in the API request <code is:raw>params</code>. Nifty, right?</p>\n<p>Before publishing this again, be sure to add <code is:raw>node_modules</code> to a new line in your <code is:raw>.gitignore</code>.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>This package lacks lots of features I would expect as a user:</p>\n<ul>\n<li>More robust error handling.</li>\n<li>Checking required parameters are provided and providing useful errors if not.</li>\n<li>Splitting the \u2018get\u2019 and \u2018search\u2019 requests.</li>\n</ul>\n<p>Our final class-based package code can be found at <a href="https://github.com/deepgram-devs/npm-package">https://github.com/deepgram-devs/npm-package</a>.</p>\n<p>When putting together my first npm packages, I found most tutorials stopped at the most basic examples or assumed lots of additional knowledge. I hope this has provided more helpful context and helped you get your first package published. If it did - please let us know what you\u2019ve published so we can celebrate together - we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> on Twitter or <a href="mailto:devrel@deepgram.com"><a href="mailto:devrel@deepgram.com">devrel@deepgram.com</a></a> via email.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-npm-packages/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>If you’re a JavaScript developer, you’ve almost certainly used npm before. The Node Package Manager is a registry that allows developers to package up code and share it using a common set of commands - most commonly <code>npm install package-name</code>. Our own Node.js SDK is available on npm under <a href="https://www.npmjs.com/package/@deepgram/sdk">@deepgram/sdk</a>.</p>
<p>In this post, we’ll create, publish, install, and use our first npm package. We’ll then extend the functionality and end up with a more complex package that will let users query <a href="http://www.omdbapi.com">The Open Movie Database</a>.</p>
<p>Our final class-based package code can be found at <a href="https://github.com/deepgram-devs/npm-package">https://github.com/deepgram-devs/npm-package</a>.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>An npm account - <a href="https://www.npmjs.com/signup">get one here</a>.</li>
<li>An Open Movie Database API Key - <a href="http://www.omdbapi.com/apikey.aspx">get one here</a> and be sure to use the verification link in the email with the key.</li>
</ul>
<p>Create a new directory and open it in your code editor of choice.</p>
<h2 id="creating-an-npm-package">Creating an npm Package</h2>
<p>Create a <code>package.json</code> file and populate it with minimal information required for an npm package:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;@username/first-package&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;0.0.1&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code>name</code> must be unique across all of npm. To aid this, and help list packages with the same author, we can ‘scope’ packages to a user or organization. Replace <code>username</code> with your npm username to scope it. Some other notes about choosing your package name:</p>
<ul>
<li>You cannot use uppercase letters.</li>
<li>You can only use URL-safe characters.</li>
<li>The maximum character length is 214.</li>
</ul>
<p>The <code>version</code> should follow <a href="https://docs.npmjs.com/about-semantic-versioning">semantic versioning</a>, which is <code>NUMBER.NUMBER.NUMBER</code>. Every time we publish an update to our package, the version must be different from previously-published versions.</p>
<p>If not specified, the default file for your project will be <code>index.js</code>. Create a file and open it in your code editor:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42</span></span>
<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> value</span></span></code></pre>
<p>This is a viable, though not terribly useful, npm package - it will always return a fixed value of <code>42</code>. The <code>module.exports</code> value can be anything - a fixed value, an object with multiple values, a function, a class, or any other data.</p>
<p>While fixed values may have limited use, they are useful in some contexts - the <code>profane-words</code> package I used in my <a href="https://blog.deepgram.com/censor-profanity-nodejs/">automatic profanity censoring</a> post used a fixed array value to include a list of almost 3000 profanities instead of me needing to include them a more manual way.</p>
<h2 id="publishing-an-npm-package">Publishing an npm Package</h2>
<p>Open your terminal and navigate to your project directory and run the following commands:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm login</span></span>
<span class="line"><span style="color: #C9D1D9">npm publish --access=public</span></span></code></pre>
<p>You have now published your first ever npm package - congratulations! If you go to <a href="https://www.npmjs.com/package/@username/first-package">https://www.npmjs.com/package/@username/first-package</a> you should see it. Reminder: if ever you are publishing again, you must increase the version in <code>package.json</code>,or you will get an error.</p>
<h2 id="testing-your-npm-package">Testing Your npm Package</h2>
<p>Want to use your package locally to test it before publishing? Create a new file in your repository called <code>scratchpad.js</code> (you can call it anything - this is what I use) and open it on your code editor:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// 42</span></span></code></pre>
<p>Run this file with <code>node scratchpad.js</code>.</p>
<p>If you want to exclude this file from being downloaded by users when they install your package, add it to a <code>.gitignore</code> file. Create one now and enter the filenames you want to be excluded (one per line):</p>
<p>scratchpad.js</p>
<h2 id="using-your-npm-package">Using Your npm Package</h2>
<p>Create a brand new directory outside of this project. Navigate to it in a terminal, and type:</p>
<p>npm install @username/first-package</p>
<p>Create an <code>index.js</code> file to require and use the package:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@username/first-package&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// 42</span></span></code></pre>
<h2 id="exporting-functions">Exporting Functions</h2>
<p>As mentioned above, you can export any JavaScript value or datatype in your package. Replace the content of your <code>index.js</code> with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">a</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">b</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> a </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> b</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  value,</span></span>
<span class="line"><span style="color: #C9D1D9">  sum,</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This is exporting an object with both the fixed value and the function. Update <code>scratchpad.js</code> and then rerun it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">firstPackage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage) </span><span style="color: #8B949E">// { value: 42, sum: [Function: sum] }</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(firstPackage.</span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)) </span><span style="color: #8B949E">// 4</span></span></code></pre>
<p>You may have seen object destructing when requiring packages. Here’s how it looks:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index.js&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">sum</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)) </span><span style="color: #8B949E">// 4</span></span></code></pre>
<p>This takes the <code>sum</code> property in the object returned by our package and makes it available as a top-level variable called <code>sum</code>. This is what we do with our <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram Node.js SDK</a>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="exporting-classes">Exporting Classes</h2>
<p>Exporting one or more functions is quite a common behavior of npm packages, as is exporting a class. Here’s what interacting with a class-based package looks like courtesy of the Deepgram Node.js SDK:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">deepgram.transcription</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>
<p>Let’s create our own exported class for the Open Movie Database. First, install the <code>axios</code> package that will help us make API calls. In your terminal:</p>
<p>npm install axios</p>
<p>Once you do this take a look at <code>package.json</code> - the <code>dependencies</code> section will be created for you. When users install your package, it will also install axios for them, along with axios’ dependencies, and so on.</p>
<p>Replace the whole content of <code>index.js</code> with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">OpenMovieDatabase</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">apiKey</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> apiKey</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">parameters</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">        method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        url: </span><span style="color: #A5D6FF">&#39;http://www.omdbapi.com&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        params: { apikey: </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.apiKey, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">parameters },</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>
<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error.response)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">throw</span><span style="color: #C9D1D9"> error.response.data</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">module</span><span style="color: #C9D1D9">.</span><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> OpenMovieDatabase</span></span></code></pre>
<p>Replace <code>scratchpad.js</code> with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OpenMovieDatabase</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">omdb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">OpenMovieDatabase</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_KEY_HERE&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">omdb</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ t: </span><span style="color: #A5D6FF">&#39;Inside Out&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ results })</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ error })</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>
<p>Once the package is required, an instance needs to be created. The <code>constructor</code> we define expects an <code>apiKey</code> which is then stored in that instance. When using the package, we only need to provide the key once and then use <code>omdb.get()</code> as many times as we want without needing to provide our key as it is automatically included in the API request <code>params</code>. Nifty, right?</p>
<p>Before publishing this again, be sure to add <code>node_modules</code> to a new line in your <code>.gitignore</code>.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>This package lacks lots of features I would expect as a user:</p>
<ul>
<li>More robust error handling.</li>
<li>Checking required parameters are provided and providing useful errors if not.</li>
<li>Splitting the ‘get’ and ‘search’ requests.</li>
</ul>
<p>Our final class-based package code can be found at <a href="https://github.com/deepgram-devs/npm-package">https://github.com/deepgram-devs/npm-package</a>.</p>
<p>When putting together my first npm packages, I found most tutorials stopped at the most basic examples or assumed lots of additional knowledge. I hope this has provided more helpful context and helped you get your first package published. If it did - please let us know what you’ve published so we can celebrate together - we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> on Twitter or <a href="mailto:devrel@deepgram.com"></a><a href="mailto:devrel@deepgram.com">devrel@deepgram.com</a> via email.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-npm-packages/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
