import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "an-introduction-to-itranslate", "text": "An Introduction to iTranslate" }, { "depth": 2, "slug": "create-a-translation-function", "text": "Create A Translation Function" }, { "depth": 2, "slug": "pre-recorded-transcript-translation", "text": "Pre-Recorded Transcript Translation" }, { "depth": 2, "slug": "live-transcript-translation", "text": "Live Transcript Translation" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "\nGetting fast and accurate transcripts with Deepgram is often just one step in a broader project. We frequently get asked about adding translations to projects once transcripts are returned, and that's what we'll be doing in this project.\n\nThere are plenty of translation APIs available to developers, but I've become rather fond of [iTranslate](https://itranslate.com/api) after using them in a project earlier this month. It's a fast an straightforward API with a generous free tier and no rate limits at the time of writing.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   An iTranslate API Key - [get one here](https://itranslate.com/api).\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n    npm install dotenv @deepgram/sdk cross-fetch\n\nCreate a `.env` file and add the following:\n\n    DG_KEY=replace_with_deepgram_api_key\n    ITRANSLATE_KEY=replace_with_itranslate_api_key\n\nCreate an `index.js` file and add the following to it:\n\n```js\nrequire('dotenv').config()\nconst fetch = require('cross-fetch')\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DG_KEY)\n```\n\n## An Introduction to iTranslate\n\niTranslate supports text translation for over 50 languages. You may either specify the 'source dialect' with a value such as `en` (English) or `es` (Spanish), or set the value to `auto` and let iTranslate detect the language automatically. You must also specify a 'target dialect' for translation to work. An API request would look like this:\n```\n    POST https://dev-api.itranslate.com/translation/v2/\n    data: {\n       'source': { 'dialect': 'en', 'text': 'Hello World' },\n       'target': { 'dialect': 'es' }\n    }\n    headers: {\n        'Authorization': 'Bearer YOUR-API-KEY'\n        'Content-Type': 'application/json'\n    }\n```\nThe result looks like this:\n\n```js\n{\n  'source': { 'dialect': 'en', 'text': 'Hello World' },\n  'target': { 'dialect': 'es', 'text': 'Hola, Mundo' },\n  'times': { 'total_time': 0.051 }\n}\n```\n\n## Create A Translation Function\n\nAdd the following to the bottom of your `index.js` file:\n\n```js\nasync function translate(source, target, text) {\n  const url = 'https://dev-api.itranslate.com/translation/v2/'\n  const headers = {\n    Authorization: 'YOUR ITRANSLATE API KEY',\n    'Content-Type': 'application/json',\n  }\n  const data = {\n    source: { dialect: source, text: text },\n    target: { dialect: target },\n  }\n\n  const result = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(data),\n  }).then((r) => r.json())\n\n  return result\n}\n```\n\nTry it out by adding the following code underneath the translate function:\n\n```js\ntranslate('en', 'es', 'Hello world').then((data) => console.log(data))\n```\n\nRun this with `node index.js`, and you should see the output in your terminal. Once you know it works, delete the line you just wrote.\n\n## Pre-Recorded Transcript Translation\n\nTo provide transcripts in languages which are different from the source audio, we will first get a transcript with Deepgram. Once the transcript is returned, we will translate the text. An example would look like this:\n\n```js\nconst url = 'https://static.deepgram.com/examples/nasa-spacewalk-interview.wav'\ndeepgram.transcription.preRecorded({ url }).then(async (response) => {\n  const { transcript } = response.results.channels[0].alternatives[0]\n  const translated = await translate('en', 'es', transcript)\n  console.log(translated)\n})\n```\n\n## Live Transcript Translation\n\niTranslate does not impose a rate limit at the time of writing, so transcribing live results from Deepgram is possible. This example gets live radio data and transcribes it with Deepgram. Once data is returned, we use the `translate` function:\n\n```js\nconst deepgramLive = deepgram.transcription.live({ punctuate: true })\n\nconst url = 'http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk'\nfetch(url)\n  .then((r) => r.body)\n  .then((res) => {\n    res.on('readable', () => {\n      if (deepgramLive.getReadyState() == 1) {\n        deepgramLive.send(res.read())\n      }\n    })\n  })\n\ndeepgramLive.addListener('transcriptReceived', async (transcript) => {\n  const data = JSON.parse(transcript)\n  const response = data.channel.alternatives[0]\n  if (response.transcript && data.is_final) {\n    translate('en', 'es', response.transcript).then((data) => console.log(data))\n  }\n})\n```\n\n## In Summary\n\nBecause iTranslate is such a fast translation service, it is a good pairing with Deepgram's super fast speech recognition API.\n\nIf you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).", "html": '<p>Getting fast and accurate transcripts with Deepgram is often just one step in a broader project. We frequently get asked about adding translations to projects once transcripts are returned, and that\u2019s what we\u2019ll be doing in this project.</p>\n<p>There are plenty of translation APIs available to developers, but I\u2019ve become rather fond of <a href="https://itranslate.com/api">iTranslate</a> after using them in a project earlier this month. It\u2019s a fast an straightforward API with a generous free tier and no rate limits at the time of writing.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>An iTranslate API Key - <a href="https://itranslate.com/api">get one here</a>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<p>npm install dotenv @deepgram/sdk cross-fetch</p>\n<p>Create a <code is:raw>.env</code> file and add the following:</p>\n<p>DG_KEY=replace_with_deepgram_api_key\nITRANSLATE_KEY=replace_with_itranslate_api_key</p>\n<p>Create an <code is:raw>index.js</code> file and add the following to it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="an-introduction-to-itranslate">An Introduction to iTranslate</h2>\n<p>iTranslate supports text translation for over 50 languages. You may either specify the \u2018source dialect\u2019 with a value such as <code is:raw>en</code> (English) or <code is:raw>es</code> (Spanish), or set the value to <code is:raw>auto</code> and let iTranslate detect the language automatically. You must also specify a \u2018target dialect\u2019 for translation to work. An API request would look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    POST https://dev-api.itranslate.com/translation/v2/</span></span>\n<span class="line"><span style="color: #c9d1d9">    data: {</span></span>\n<span class="line"><span style="color: #c9d1d9">       &#39;source&#39;: { &#39;dialect&#39;: &#39;en&#39;, &#39;text&#39;: &#39;Hello World&#39; },</span></span>\n<span class="line"><span style="color: #c9d1d9">       &#39;target&#39;: { &#39;dialect&#39;: &#39;es&#39; }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9">    headers: {</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39;Authorization&#39;: &#39;Bearer YOUR-API-KEY&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39;Content-Type&#39;: &#39;application/json&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>The result looks like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;source&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;dialect&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hello World&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;target&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;dialect&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hola, Mundo&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;times&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;total_time&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.051</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="create-a-translation-function">Create A Translation Function</h2>\n<p>Add the following to the bottom of your <code is:raw>index.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">source</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">target</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://dev-api.itranslate.com/translation/v2/&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">headers</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    Authorization: </span><span style="color: #A5D6FF">&#39;YOUR ITRANSLATE API KEY&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    source: { dialect: source, text: text },</span></span>\n<span class="line"><span style="color: #C9D1D9">    target: { dialect: target },</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url, {</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers,</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(data),</span></span>\n<span class="line"><span style="color: #C9D1D9">  }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> result</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try it out by adding the following code underneath the translate function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data))</span></span></code></pre>\n<p>Run this with <code is:raw>node index.js</code>, and you should see the output in your terminal. Once you know it works, delete the line you just wrote.</p>\n<h2 id="pre-recorded-transcript-translation">Pre-Recorded Transcript Translation</h2>\n<p>To provide transcripts in languages which are different from the source audio, we will first get a transcript with Deepgram. Once the transcript is returned, we will translate the text. An example would look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">translated</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(translated)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="live-transcript-translation">Live Transcript Translation</h2>\n<p>iTranslate does not impose a rate limit at the time of writing, so transcribing live results from Deepgram is possible. This example gets live radio data and transcribes it with Deepgram. Once data is returned, we use the <code is:raw>translate</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({ punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>\n<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (response.transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> data.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, response.transcript).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data))</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="in-summary">In Summary</h2>\n<p>Because iTranslate is such a fast translation service, it is a good pairing with Deepgram\u2019s super fast speech recognition API.</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Adding Translation to Your Transcription Project", "description": "Use iTranslate's API to translate both pre-recorded and live transcription.", "date": "2022-01-26T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1642934713/blog/2022/01/translation-itranslate/Adding-Live-Translation-to-Your-Transcription-Project%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["translation", "nodejs"], "seo": { "title": "Adding Translation to Your Transcription Project", "description": "Use iTranslate's API to translate both pre-recorded and live transcription." }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453854/blog/translation-itranslate/ograph.png" }, "shorturls": { "share": "https://dpgr.am/ea626e0", "twitter": "https://dpgr.am/291f11b", "linkedin": "https://dpgr.am/2f4977d", "reddit": "https://dpgr.am/4810389", "facebook": "https://dpgr.am/dbbcb17" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "an-introduction-to-itranslate", "text": "An Introduction to iTranslate" }, { "depth": 2, "slug": "create-a-translation-function", "text": "Create A Translation Function" }, { "depth": 2, "slug": "pre-recorded-transcript-translation", "text": "Pre-Recorded Transcript Translation" }, { "depth": 2, "slug": "live-transcript-translation", "text": "Live Transcript Translation" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "\nGetting fast and accurate transcripts with Deepgram is often just one step in a broader project. We frequently get asked about adding translations to projects once transcripts are returned, and that's what we'll be doing in this project.\n\nThere are plenty of translation APIs available to developers, but I've become rather fond of [iTranslate](https://itranslate.com/api) after using them in a project earlier this month. It's a fast an straightforward API with a generous free tier and no rate limits at the time of writing.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   An iTranslate API Key - [get one here](https://itranslate.com/api).\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n    npm install dotenv @deepgram/sdk cross-fetch\n\nCreate a `.env` file and add the following:\n\n    DG_KEY=replace_with_deepgram_api_key\n    ITRANSLATE_KEY=replace_with_itranslate_api_key\n\nCreate an `index.js` file and add the following to it:\n\n```js\nrequire('dotenv').config()\nconst fetch = require('cross-fetch')\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DG_KEY)\n```\n\n## An Introduction to iTranslate\n\niTranslate supports text translation for over 50 languages. You may either specify the 'source dialect' with a value such as `en` (English) or `es` (Spanish), or set the value to `auto` and let iTranslate detect the language automatically. You must also specify a 'target dialect' for translation to work. An API request would look like this:\n```\n    POST https://dev-api.itranslate.com/translation/v2/\n    data: {\n       'source': { 'dialect': 'en', 'text': 'Hello World' },\n       'target': { 'dialect': 'es' }\n    }\n    headers: {\n        'Authorization': 'Bearer YOUR-API-KEY'\n        'Content-Type': 'application/json'\n    }\n```\nThe result looks like this:\n\n```js\n{\n  'source': { 'dialect': 'en', 'text': 'Hello World' },\n  'target': { 'dialect': 'es', 'text': 'Hola, Mundo' },\n  'times': { 'total_time': 0.051 }\n}\n```\n\n## Create A Translation Function\n\nAdd the following to the bottom of your `index.js` file:\n\n```js\nasync function translate(source, target, text) {\n  const url = 'https://dev-api.itranslate.com/translation/v2/'\n  const headers = {\n    Authorization: 'YOUR ITRANSLATE API KEY',\n    'Content-Type': 'application/json',\n  }\n  const data = {\n    source: { dialect: source, text: text },\n    target: { dialect: target },\n  }\n\n  const result = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(data),\n  }).then((r) => r.json())\n\n  return result\n}\n```\n\nTry it out by adding the following code underneath the translate function:\n\n```js\ntranslate('en', 'es', 'Hello world').then((data) => console.log(data))\n```\n\nRun this with `node index.js`, and you should see the output in your terminal. Once you know it works, delete the line you just wrote.\n\n## Pre-Recorded Transcript Translation\n\nTo provide transcripts in languages which are different from the source audio, we will first get a transcript with Deepgram. Once the transcript is returned, we will translate the text. An example would look like this:\n\n```js\nconst url = 'https://static.deepgram.com/examples/nasa-spacewalk-interview.wav'\ndeepgram.transcription.preRecorded({ url }).then(async (response) => {\n  const { transcript } = response.results.channels[0].alternatives[0]\n  const translated = await translate('en', 'es', transcript)\n  console.log(translated)\n})\n```\n\n## Live Transcript Translation\n\niTranslate does not impose a rate limit at the time of writing, so transcribing live results from Deepgram is possible. This example gets live radio data and transcribes it with Deepgram. Once data is returned, we use the `translate` function:\n\n```js\nconst deepgramLive = deepgram.transcription.live({ punctuate: true })\n\nconst url = 'http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk'\nfetch(url)\n  .then((r) => r.body)\n  .then((res) => {\n    res.on('readable', () => {\n      if (deepgramLive.getReadyState() == 1) {\n        deepgramLive.send(res.read())\n      }\n    })\n  })\n\ndeepgramLive.addListener('transcriptReceived', async (transcript) => {\n  const data = JSON.parse(transcript)\n  const response = data.channel.alternatives[0]\n  if (response.transcript && data.is_final) {\n    translate('en', 'es', response.transcript).then((data) => console.log(data))\n  }\n})\n```\n\n## In Summary\n\nBecause iTranslate is such a fast translation service, it is a good pairing with Deepgram's super fast speech recognition API.\n\nIf you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).", "html": '<p>Getting fast and accurate transcripts with Deepgram is often just one step in a broader project. We frequently get asked about adding translations to projects once transcripts are returned, and that\u2019s what we\u2019ll be doing in this project.</p>\n<p>There are plenty of translation APIs available to developers, but I\u2019ve become rather fond of <a href="https://itranslate.com/api">iTranslate</a> after using them in a project earlier this month. It\u2019s a fast an straightforward API with a generous free tier and no rate limits at the time of writing.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>An iTranslate API Key - <a href="https://itranslate.com/api">get one here</a>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<p>npm install dotenv @deepgram/sdk cross-fetch</p>\n<p>Create a <code is:raw>.env</code> file and add the following:</p>\n<p>DG_KEY=replace_with_deepgram_api_key\nITRANSLATE_KEY=replace_with_itranslate_api_key</p>\n<p>Create an <code is:raw>index.js</code> file and add the following to it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="an-introduction-to-itranslate">An Introduction to iTranslate</h2>\n<p>iTranslate supports text translation for over 50 languages. You may either specify the \u2018source dialect\u2019 with a value such as <code is:raw>en</code> (English) or <code is:raw>es</code> (Spanish), or set the value to <code is:raw>auto</code> and let iTranslate detect the language automatically. You must also specify a \u2018target dialect\u2019 for translation to work. An API request would look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    POST https://dev-api.itranslate.com/translation/v2/</span></span>\n<span class="line"><span style="color: #c9d1d9">    data: {</span></span>\n<span class="line"><span style="color: #c9d1d9">       &#39;source&#39;: { &#39;dialect&#39;: &#39;en&#39;, &#39;text&#39;: &#39;Hello World&#39; },</span></span>\n<span class="line"><span style="color: #c9d1d9">       &#39;target&#39;: { &#39;dialect&#39;: &#39;es&#39; }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9">    headers: {</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39;Authorization&#39;: &#39;Bearer YOUR-API-KEY&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39;Content-Type&#39;: &#39;application/json&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>The result looks like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;source&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;dialect&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hello World&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;target&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;dialect&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hola, Mundo&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;times&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;total_time&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.051</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="create-a-translation-function">Create A Translation Function</h2>\n<p>Add the following to the bottom of your <code is:raw>index.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">source</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">target</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://dev-api.itranslate.com/translation/v2/&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">headers</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    Authorization: </span><span style="color: #A5D6FF">&#39;YOUR ITRANSLATE API KEY&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    source: { dialect: source, text: text },</span></span>\n<span class="line"><span style="color: #C9D1D9">    target: { dialect: target },</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url, {</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers,</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(data),</span></span>\n<span class="line"><span style="color: #C9D1D9">  }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> result</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try it out by adding the following code underneath the translate function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data))</span></span></code></pre>\n<p>Run this with <code is:raw>node index.js</code>, and you should see the output in your terminal. Once you know it works, delete the line you just wrote.</p>\n<h2 id="pre-recorded-transcript-translation">Pre-Recorded Transcript Translation</h2>\n<p>To provide transcripts in languages which are different from the source audio, we will first get a transcript with Deepgram. Once the transcript is returned, we will translate the text. An example would look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">translated</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(translated)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="live-transcript-translation">Live Transcript Translation</h2>\n<p>iTranslate does not impose a rate limit at the time of writing, so transcribing live results from Deepgram is possible. This example gets live radio data and transcribes it with Deepgram. Once data is returned, we use the <code is:raw>translate</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({ punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>\n<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (response.transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> data.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, response.transcript).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data))</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="in-summary">In Summary</h2>\n<p>Because iTranslate is such a fast translation service, it is a good pairing with Deepgram\u2019s super fast speech recognition API.</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/translation-itranslate/index.md" };
function rawContent() {
  return "\nGetting fast and accurate transcripts with Deepgram is often just one step in a broader project. We frequently get asked about adding translations to projects once transcripts are returned, and that's what we'll be doing in this project.\n\nThere are plenty of translation APIs available to developers, but I've become rather fond of [iTranslate](https://itranslate.com/api) after using them in a project earlier this month. It's a fast an straightforward API with a generous free tier and no rate limits at the time of writing.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   An iTranslate API Key - [get one here](https://itranslate.com/api).\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n    npm install dotenv @deepgram/sdk cross-fetch\n\nCreate a `.env` file and add the following:\n\n    DG_KEY=replace_with_deepgram_api_key\n    ITRANSLATE_KEY=replace_with_itranslate_api_key\n\nCreate an `index.js` file and add the following to it:\n\n```js\nrequire('dotenv').config()\nconst fetch = require('cross-fetch')\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DG_KEY)\n```\n\n## An Introduction to iTranslate\n\niTranslate supports text translation for over 50 languages. You may either specify the 'source dialect' with a value such as `en` (English) or `es` (Spanish), or set the value to `auto` and let iTranslate detect the language automatically. You must also specify a 'target dialect' for translation to work. An API request would look like this:\n```\n    POST https://dev-api.itranslate.com/translation/v2/\n    data: {\n       'source': { 'dialect': 'en', 'text': 'Hello World' },\n       'target': { 'dialect': 'es' }\n    }\n    headers: {\n        'Authorization': 'Bearer YOUR-API-KEY'\n        'Content-Type': 'application/json'\n    }\n```\nThe result looks like this:\n\n```js\n{\n  'source': { 'dialect': 'en', 'text': 'Hello World' },\n  'target': { 'dialect': 'es', 'text': 'Hola, Mundo' },\n  'times': { 'total_time': 0.051 }\n}\n```\n\n## Create A Translation Function\n\nAdd the following to the bottom of your `index.js` file:\n\n```js\nasync function translate(source, target, text) {\n  const url = 'https://dev-api.itranslate.com/translation/v2/'\n  const headers = {\n    Authorization: 'YOUR ITRANSLATE API KEY',\n    'Content-Type': 'application/json',\n  }\n  const data = {\n    source: { dialect: source, text: text },\n    target: { dialect: target },\n  }\n\n  const result = await fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(data),\n  }).then((r) => r.json())\n\n  return result\n}\n```\n\nTry it out by adding the following code underneath the translate function:\n\n```js\ntranslate('en', 'es', 'Hello world').then((data) => console.log(data))\n```\n\nRun this with `node index.js`, and you should see the output in your terminal. Once you know it works, delete the line you just wrote.\n\n## Pre-Recorded Transcript Translation\n\nTo provide transcripts in languages which are different from the source audio, we will first get a transcript with Deepgram. Once the transcript is returned, we will translate the text. An example would look like this:\n\n```js\nconst url = 'https://static.deepgram.com/examples/nasa-spacewalk-interview.wav'\ndeepgram.transcription.preRecorded({ url }).then(async (response) => {\n  const { transcript } = response.results.channels[0].alternatives[0]\n  const translated = await translate('en', 'es', transcript)\n  console.log(translated)\n})\n```\n\n## Live Transcript Translation\n\niTranslate does not impose a rate limit at the time of writing, so transcribing live results from Deepgram is possible. This example gets live radio data and transcribes it with Deepgram. Once data is returned, we use the `translate` function:\n\n```js\nconst deepgramLive = deepgram.transcription.live({ punctuate: true })\n\nconst url = 'http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk'\nfetch(url)\n  .then((r) => r.body)\n  .then((res) => {\n    res.on('readable', () => {\n      if (deepgramLive.getReadyState() == 1) {\n        deepgramLive.send(res.read())\n      }\n    })\n  })\n\ndeepgramLive.addListener('transcriptReceived', async (transcript) => {\n  const data = JSON.parse(transcript)\n  const response = data.channel.alternatives[0]\n  if (response.transcript && data.is_final) {\n    translate('en', 'es', response.transcript).then((data) => console.log(data))\n  }\n})\n```\n\n## In Summary\n\nBecause iTranslate is such a fast translation service, it is a good pairing with Deepgram's super fast speech recognition API.\n\nIf you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).";
}
function compiledContent() {
  return '<p>Getting fast and accurate transcripts with Deepgram is often just one step in a broader project. We frequently get asked about adding translations to projects once transcripts are returned, and that\u2019s what we\u2019ll be doing in this project.</p>\n<p>There are plenty of translation APIs available to developers, but I\u2019ve become rather fond of <a href="https://itranslate.com/api">iTranslate</a> after using them in a project earlier this month. It\u2019s a fast an straightforward API with a generous free tier and no rate limits at the time of writing.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>An iTranslate API Key - <a href="https://itranslate.com/api">get one here</a>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<p>npm install dotenv @deepgram/sdk cross-fetch</p>\n<p>Create a <code is:raw>.env</code> file and add the following:</p>\n<p>DG_KEY=replace_with_deepgram_api_key\nITRANSLATE_KEY=replace_with_itranslate_api_key</p>\n<p>Create an <code is:raw>index.js</code> file and add the following to it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="an-introduction-to-itranslate">An Introduction to iTranslate</h2>\n<p>iTranslate supports text translation for over 50 languages. You may either specify the \u2018source dialect\u2019 with a value such as <code is:raw>en</code> (English) or <code is:raw>es</code> (Spanish), or set the value to <code is:raw>auto</code> and let iTranslate detect the language automatically. You must also specify a \u2018target dialect\u2019 for translation to work. An API request would look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    POST https://dev-api.itranslate.com/translation/v2/</span></span>\n<span class="line"><span style="color: #c9d1d9">    data: {</span></span>\n<span class="line"><span style="color: #c9d1d9">       &#39;source&#39;: { &#39;dialect&#39;: &#39;en&#39;, &#39;text&#39;: &#39;Hello World&#39; },</span></span>\n<span class="line"><span style="color: #c9d1d9">       &#39;target&#39;: { &#39;dialect&#39;: &#39;es&#39; }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9">    headers: {</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39;Authorization&#39;: &#39;Bearer YOUR-API-KEY&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39;Content-Type&#39;: &#39;application/json&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>The result looks like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;source&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;dialect&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hello World&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;target&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;dialect&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hola, Mundo&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;times&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;total_time&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.051</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="create-a-translation-function">Create A Translation Function</h2>\n<p>Add the following to the bottom of your <code is:raw>index.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">source</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">target</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://dev-api.itranslate.com/translation/v2/&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">headers</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    Authorization: </span><span style="color: #A5D6FF">&#39;YOUR ITRANSLATE API KEY&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    source: { dialect: source, text: text },</span></span>\n<span class="line"><span style="color: #C9D1D9">    target: { dialect: target },</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url, {</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers,</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(data),</span></span>\n<span class="line"><span style="color: #C9D1D9">  }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> result</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try it out by adding the following code underneath the translate function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data))</span></span></code></pre>\n<p>Run this with <code is:raw>node index.js</code>, and you should see the output in your terminal. Once you know it works, delete the line you just wrote.</p>\n<h2 id="pre-recorded-transcript-translation">Pre-Recorded Transcript Translation</h2>\n<p>To provide transcripts in languages which are different from the source audio, we will first get a transcript with Deepgram. Once the transcript is returned, we will translate the text. An example would look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">translated</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(translated)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="live-transcript-translation">Live Transcript Translation</h2>\n<p>iTranslate does not impose a rate limit at the time of writing, so transcribing live results from Deepgram is possible. This example gets live radio data and transcribes it with Deepgram. Once data is returned, we use the <code is:raw>translate</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({ punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>\n<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (response.transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> data.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, response.transcript).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data))</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="in-summary">In Summary</h2>\n<p>Because iTranslate is such a fast translation service, it is a good pairing with Deepgram\u2019s super fast speech recognition API.</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/translation-itranslate/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Getting fast and accurate transcripts with Deepgram is often just one step in a broader project. We frequently get asked about adding translations to projects once transcripts are returned, and that’s what we’ll be doing in this project.</p>
<p>There are plenty of translation APIs available to developers, but I’ve become rather fond of <a href="https://itranslate.com/api">iTranslate</a> after using them in a project earlier this month. It’s a fast an straightforward API with a generous free tier and no rate limits at the time of writing.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>
<li>An iTranslate API Key - <a href="https://itranslate.com/api">get one here</a>.</li>
</ul>
<p>Create a new directory and navigate to it with your terminal. Run <code>npm init -y</code> to create a <code>package.json</code> file and then install the following packages:</p>
<p>npm install dotenv @deepgram/sdk cross-fetch</p>
<p>Create a <code>.env</code> file and add the following:</p>
<p>DG_KEY=replace_with_deepgram_api_key
ITRANSLATE_KEY=replace_with_itranslate_api_key</p>
<p>Create an <code>index.js</code> file and add the following to it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="an-introduction-to-itranslate">An Introduction to iTranslate</h2>
<p>iTranslate supports text translation for over 50 languages. You may either specify the ‘source dialect’ with a value such as <code>en</code> (English) or <code>es</code> (Spanish), or set the value to <code>auto</code> and let iTranslate detect the language automatically. You must also specify a ‘target dialect’ for translation to work. An API request would look like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    POST https://dev-api.itranslate.com/translation/v2/</span></span>
<span class="line"><span style="color: #c9d1d9">    data: {</span></span>
<span class="line"><span style="color: #c9d1d9">       &#39;source&#39;: { &#39;dialect&#39;: &#39;en&#39;, &#39;text&#39;: &#39;Hello World&#39; },</span></span>
<span class="line"><span style="color: #c9d1d9">       &#39;target&#39;: { &#39;dialect&#39;: &#39;es&#39; }</span></span>
<span class="line"><span style="color: #c9d1d9">    }</span></span>
<span class="line"><span style="color: #c9d1d9">    headers: {</span></span>
<span class="line"><span style="color: #c9d1d9">        &#39;Authorization&#39;: &#39;Bearer YOUR-API-KEY&#39;</span></span>
<span class="line"><span style="color: #c9d1d9">        &#39;Content-Type&#39;: &#39;application/json&#39;</span></span>
<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>
<p>The result looks like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;source&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;dialect&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hello World&#39;</span><span style="color: #C9D1D9"> },</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;target&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;dialect&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hola, Mundo&#39;</span><span style="color: #C9D1D9"> },</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;times&#39;</span><span style="color: #C9D1D9">: { </span><span style="color: #A5D6FF">&#39;total_time&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.051</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h2 id="create-a-translation-function">Create A Translation Function</h2>
<p>Add the following to the bottom of your <code>index.js</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">source</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">target</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://dev-api.itranslate.com/translation/v2/&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">headers</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    Authorization: </span><span style="color: #A5D6FF">&#39;YOUR ITRANSLATE API KEY&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    source: { dialect: source, text: text },</span></span>
<span class="line"><span style="color: #C9D1D9">    target: { dialect: target },</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url, {</span></span>
<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    headers,</span></span>
<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(data),</span></span>
<span class="line"><span style="color: #C9D1D9">  }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> result</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Try it out by adding the following code underneath the translate function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data))</span></span></code></pre>
<p>Run this with <code>node index.js</code>, and you should see the output in your terminal. Once you know it works, delete the line you just wrote.</p>
<h2 id="pre-recorded-transcript-translation">Pre-Recorded Transcript Translation</h2>
<p>To provide transcripts in languages which are different from the source audio, we will first get a transcript with Deepgram. Once the transcript is returned, we will translate the text. An example would look like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">translated</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(translated)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<h2 id="live-transcript-translation">Live Transcript Translation</h2>
<p>iTranslate does not impose a rate limit at the time of writing, so transcribing live results from Deepgram is possible. This example gets live radio data and transcribes it with Deepgram. Once data is returned, we use the <code>translate</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({ punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>
<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url)</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body)</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (response.transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> data.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;es&#39;</span><span style="color: #C9D1D9">, response.transcript).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data))</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<h2 id="in-summary">In Summary</h2>
<p>Because iTranslate is such a fast translation service, it is a good pairing with Deepgram’s super fast speech recognition API.</p>
<p>If you have any questions, please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/translation-itranslate/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
