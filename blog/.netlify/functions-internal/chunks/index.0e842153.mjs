import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "set-up-dependencies", "text": "Set Up Dependencies" }, { "depth": 2, "slug": "get-transcript", "text": "Get Transcript" }, { "depth": 2, "slug": "create-a-write-stream", "text": "Create a Write Stream" }, { "depth": 2, "slug": "write-captions", "text": "Write Captions" }, { "depth": 3, "slug": "webvtt", "text": "WebVTT" }, { "depth": 4, "slug": "using-the-sdk", "text": "Using the SDK" }, { "depth": 3, "slug": "srt", "text": "SRT" }, { "depth": 4, "slug": "using-the-sdk-1", "text": "Using the SDK" }, { "depth": 2, "slug": "one-line-to-captions", "text": "One Line to Captions" }], "source": "\nProviding captions for audio and video isn't just a nice-to-have - it's critical for accessibility. While this isn't specifically an accessibility post, I wanted to start by sharing [Microsoft's Inclusive Toolkit](https://www.microsoft.com/design/inclusive/). Something I hadn't considered before reading this was the impact of situational limitations. To learn more, jump to Section 3 of the toolkit - \"Solve for one, extend to many\". Having a young (read \"loud\") child, I've become even more aware of where captions are available, and if they aren't, I simply can't watch something with her around.\n\nThere are two common and similar caption formats we are going to generate today - WebVTT and SRT. A WebVTT file looks like this:\n\n    WEBVTT\n\n    1\n    00:00:00.219 --> 00:00:03.512\n    - yeah, as much as it's worth celebrating\n\n    2\n    00:00:04.569 --> 00:00:06.226\n    - the first space walk\n\n    3\n    00:00:06.564 --> 00:00:07.942\n    - with an all female team\n\n    4\n    00:00:08.615 --> 00:00:09.795\n    - I think many of us\n\n    5\n    00:00:10.135 --> 00:00:13.355\n    - are looking forward to it just being normal.\n\nAnd a SRT file looks like this:\n\n    1\n    00:00:00,219 --> 00:00:03,512\n    yeah, as much as it's worth celebrating\n\n    2\n    00:00:04,569 --> 00:00:06,226\n    the first space walk\n\n    3\n    00:00:06,564 --> 00:00:07,942\n    with an all female team\n\n    4\n    00:00:08,615 --> 00:00:09,795\n    I think many of us\n\n    5\n    00:00:10,135 --> 00:00:13,355\n    are looking forward to it just being normal.\n\nBoth are very similar in their basic forms, except for the millisecond separator being `.` in WebVTT and `,` in SRT. In this post, we will generate them manually from a Deepgram transcription result to see the technique, and then use the brand new Node.js SDK methods (available from v1.1.0) to make it even easier.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   A hosted audio file URL to transcribe - you can use https://static.deepgram.com/examples/deep-learning-podcast-clip.wav if you don't have one.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the Deepgram Node.js SDK with `npm install @deepgram/sdk`.\n\n## Set Up Dependencies\n\nCreate an `index.js` file, open it in your code editor, and require then initialize the dependencies:\n\n```js\nconst fs = require('fs')\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram('YOUR_API_KEY')\n```\n\n## Get Transcript\n\nTo be given timestamps of phrases to include in our caption files, you need to ask Deepgram to include utterances (a chain of words or, more simply, a phrase).\n\n```js\ndeepgram.transcription\n  .preRecorded(\n    {\n      url: 'https://static.deepgram.com/examples/deep-learning-podcast-clip.wav',\n    },\n    { punctuate: true, utterances: true }\n  )\n  .then((response) => {\n    //  Following code here\n  })\n  .catch((error) => {\n    console.log({ error })\n  })\n```\n\n## Create a Write Stream\n\nOnce you open a writable stream, you can insert text directly into your file. When you do this, pass in the `a` flag, and any time you write data to the stream, it will be appended to the end. Inside of the `.then()` block:\n\n```js\n// WebVTT Filename\nconst stream = fs.createWriteStream('output.vtt', { flags: 'a' })\n\n// SRT Filename\nconst stream = fs.createWriteStream('output.srt', { flags: 'a' })\n```\n\n## Write Captions\n\nThe WebVTT and SRT formats are very similar, and each requires a block of text per utterance.\n\n### WebVTT\n\n```js\nstream.write('WEBVTT\\n\\n')\nfor (let i = 0; i < response.results.utterances.length; i++) {\n  const utterance = response.results.utterances[i]\n  const start = new Date(utterance.start * 1000).toISOString().substr(11, 12)\n  const end = new Date(utterance.end * 1000).toISOString().substr(11, 12)\n  stream.write(`${i + 1}\\n${start} --> ${end}\\n- ${utterance.transcript}\\n\\n`)\n}\n```\n\nDeepgram provides seconds back as a number (`15.4` means 15.4 seconds), but both formats require times as `HH:MM:SS.milliseconds` and getting the end of a `Date().toISOString()` will achieve this for us.\n\n#### Using the SDK\n\nReplace the above code with this single line:\n\n```js\nstream.write(response.toWebVTT())\n```\n\n### SRT\n\n```js\nfor (let i = 0; i < response.results.utterances.length; i++) {\n  const utterance = response.results.utterances[i]\n  const start = new Date(utterance.start * 1000)\n    .toISOString()\n    .substr(11, 12)\n    .replace('.', ',')\n  const end = new Date(utterance.end * 1000)\n    .toISOString()\n    .substr(11, 12)\n    .replace('.', ',')\n  stream.write(`${i + 1}\\n${start} --> ${end}\\n${utterance.transcript}\\n\\n`)\n}\n```\n\nDifferences? No `WEBVTT` line at the top, millisecond separator is `,`, and no `-` before the utterance.\n\n#### Using the SDK\n\nReplace the above code with this single line:\n\n```js\nstream.write(response.toSRT())\n```\n\n## One Line to Captions\n\nWe actually implemented `.toWebVTT()` and `.toSRT()` straight into the Node.js SDK while writing this post. Now, it's easier than ever to create valid caption files automatically with Deepgram. If you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>Providing captions for audio and video isn\u2019t just a nice-to-have - it\u2019s critical for accessibility. While this isn\u2019t specifically an accessibility post, I wanted to start by sharing <a href="https://www.microsoft.com/design/inclusive/">Microsoft\u2019s Inclusive Toolkit</a>. Something I hadn\u2019t considered before reading this was the impact of situational limitations. To learn more, jump to Section 3 of the toolkit - \u201CSolve for one, extend to many\u201D. Having a young (read \u201Cloud\u201D) child, I\u2019ve become even more aware of where captions are available, and if they aren\u2019t, I simply can\u2019t watch something with her around.</p>\n<p>There are two common and similar caption formats we are going to generate today - WebVTT and SRT. A WebVTT file looks like this:</p>\n<p>WEBVTT</p>\n<p>1\n00:00:00.219 \u2014> 00:00:03.512</p>\n<ul>\n<li>yeah, as much as it\u2019s worth celebrating</li>\n</ul>\n<p>2\n00:00:04.569 \u2014> 00:00:06.226</p>\n<ul>\n<li>the first space walk</li>\n</ul>\n<p>3\n00:00:06.564 \u2014> 00:00:07.942</p>\n<ul>\n<li>with an all female team</li>\n</ul>\n<p>4\n00:00:08.615 \u2014> 00:00:09.795</p>\n<ul>\n<li>I think many of us</li>\n</ul>\n<p>5\n00:00:10.135 \u2014> 00:00:13.355</p>\n<ul>\n<li>are looking forward to it just being normal.</li>\n</ul>\n<p>And a SRT file looks like this:</p>\n<p>1\n00:00:00,219 \u2014> 00:00:03,512\nyeah, as much as it\u2019s worth celebrating</p>\n<p>2\n00:00:04,569 \u2014> 00:00:06,226\nthe first space walk</p>\n<p>3\n00:00:06,564 \u2014> 00:00:07,942\nwith an all female team</p>\n<p>4\n00:00:08,615 \u2014> 00:00:09,795\nI think many of us</p>\n<p>5\n00:00:10,135 \u2014> 00:00:13,355\nare looking forward to it just being normal.</p>\n<p>Both are very similar in their basic forms, except for the millisecond separator being <code is:raw>.</code> in WebVTT and <code is:raw>,</code> in SRT. In this post, we will generate them manually from a Deepgram transcription result to see the technique, and then use the brand new Node.js SDK methods (available from v1.1.0) to make it even easier.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A hosted audio file URL to transcribe - you can use <a href="https://static.deepgram.com/examples/deep-learning-podcast-clip.wav">https://static.deepgram.com/examples/deep-learning-podcast-clip.wav</a> if you don\u2019t have one.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the Deepgram Node.js SDK with <code is:raw>npm install @deepgram/sdk</code>.</p>\n<h2 id="set-up-dependencies">Set Up Dependencies</h2>\n<p>Create an <code is:raw>index.js</code> file, open it in your code editor, and require then initialize the dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="get-transcript">Get Transcript</h2>\n<p>To be given timestamps of phrases to include in our caption files, you need to ask Deepgram to include utterances (a chain of words or, more simply, a phrase).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">      url: </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/deep-learning-podcast-clip.wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//  Following code here</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ error })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<h2 id="create-a-write-stream">Create a Write Stream</h2>\n<p>Once you open a writable stream, you can insert text directly into your file. When you do this, pass in the <code is:raw>a</code> flag, and any time you write data to the stream, it will be appended to the end. Inside of the <code is:raw>.then()</code> block:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// WebVTT Filename</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.vtt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// SRT Filename</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.srt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<h2 id="write-captions">Write Captions</h2>\n<p>The WebVTT and SRT formats are very similar, and each requires a block of text per utterance.</p>\n<h3 id="webvtt">WebVTT</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;WEBVTT</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> response.results.utterances.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.utterances[i]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.start </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">end</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.end </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">i</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">} --&gt; ${</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">- ${</span><span style="color: #C9D1D9">utterance</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Deepgram provides seconds back as a number (<code is:raw>15.4</code> means 15.4 seconds), but both formats require times as <code is:raw>HH:MM:SS.milliseconds</code> and getting the end of a <code is:raw>Date().toISOString()</code> will achieve this for us.</p>\n<h4 id="using-the-sdk">Using the SDK</h4>\n<p>Replace the above code with this single line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(response.</span><span style="color: #D2A8FF">toWebVTT</span><span style="color: #C9D1D9">())</span></span></code></pre>\n<h3 id="srt">SRT</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> response.results.utterances.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.utterances[i]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.start </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;,&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">end</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.end </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;,&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">i</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">} --&gt; ${</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">utterance</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Differences? No <code is:raw>WEBVTT</code> line at the top, millisecond separator is <code is:raw>,</code>, and no <code is:raw>-</code> before the utterance.</p>\n<h4 id="using-the-sdk-1">Using the SDK</h4>\n<p>Replace the above code with this single line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(response.</span><span style="color: #D2A8FF">toSRT</span><span style="color: #C9D1D9">())</span></span></code></pre>\n<h2 id="one-line-to-captions">One Line to Captions</h2>\n<p>We actually implemented <code is:raw>.toWebVTT()</code> and <code is:raw>.toSRT()</code> straight into the Node.js SDK while writing this post. Now, it\u2019s easier than ever to create valid caption files automatically with Deepgram. If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Generate WebVTT and SRT Captions Automatically with Node.js", "description": "Create ready-to-upload caption files for the web and broadcast.", "date": "2021-11-15T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1636406494/blog/2021/11/generate-webvtt-srt-captions-nodejs/Generate-WebVTT-SRT-Captions-w-Nodejs%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["nodejs", "accessibility"], "seo": { "title": "Generate WebVTT and SRT Captions Automatically with Node.js", "description": "Create ready-to-upload caption files for the web and broadcast." }, "shorturls": { "share": "https://dpgr.am/edad73f", "twitter": "https://dpgr.am/40622a2", "linkedin": "https://dpgr.am/3530253", "reddit": "https://dpgr.am/76f3d80", "facebook": "https://dpgr.am/2991d2d" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453801/blog/generate-webvtt-srt-captions-nodejs/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "set-up-dependencies", "text": "Set Up Dependencies" }, { "depth": 2, "slug": "get-transcript", "text": "Get Transcript" }, { "depth": 2, "slug": "create-a-write-stream", "text": "Create a Write Stream" }, { "depth": 2, "slug": "write-captions", "text": "Write Captions" }, { "depth": 3, "slug": "webvtt", "text": "WebVTT" }, { "depth": 4, "slug": "using-the-sdk", "text": "Using the SDK" }, { "depth": 3, "slug": "srt", "text": "SRT" }, { "depth": 4, "slug": "using-the-sdk-1", "text": "Using the SDK" }, { "depth": 2, "slug": "one-line-to-captions", "text": "One Line to Captions" }], "source": "\nProviding captions for audio and video isn't just a nice-to-have - it's critical for accessibility. While this isn't specifically an accessibility post, I wanted to start by sharing [Microsoft's Inclusive Toolkit](https://www.microsoft.com/design/inclusive/). Something I hadn't considered before reading this was the impact of situational limitations. To learn more, jump to Section 3 of the toolkit - \"Solve for one, extend to many\". Having a young (read \"loud\") child, I've become even more aware of where captions are available, and if they aren't, I simply can't watch something with her around.\n\nThere are two common and similar caption formats we are going to generate today - WebVTT and SRT. A WebVTT file looks like this:\n\n    WEBVTT\n\n    1\n    00:00:00.219 --> 00:00:03.512\n    - yeah, as much as it's worth celebrating\n\n    2\n    00:00:04.569 --> 00:00:06.226\n    - the first space walk\n\n    3\n    00:00:06.564 --> 00:00:07.942\n    - with an all female team\n\n    4\n    00:00:08.615 --> 00:00:09.795\n    - I think many of us\n\n    5\n    00:00:10.135 --> 00:00:13.355\n    - are looking forward to it just being normal.\n\nAnd a SRT file looks like this:\n\n    1\n    00:00:00,219 --> 00:00:03,512\n    yeah, as much as it's worth celebrating\n\n    2\n    00:00:04,569 --> 00:00:06,226\n    the first space walk\n\n    3\n    00:00:06,564 --> 00:00:07,942\n    with an all female team\n\n    4\n    00:00:08,615 --> 00:00:09,795\n    I think many of us\n\n    5\n    00:00:10,135 --> 00:00:13,355\n    are looking forward to it just being normal.\n\nBoth are very similar in their basic forms, except for the millisecond separator being `.` in WebVTT and `,` in SRT. In this post, we will generate them manually from a Deepgram transcription result to see the technique, and then use the brand new Node.js SDK methods (available from v1.1.0) to make it even easier.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   A hosted audio file URL to transcribe - you can use https://static.deepgram.com/examples/deep-learning-podcast-clip.wav if you don't have one.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the Deepgram Node.js SDK with `npm install @deepgram/sdk`.\n\n## Set Up Dependencies\n\nCreate an `index.js` file, open it in your code editor, and require then initialize the dependencies:\n\n```js\nconst fs = require('fs')\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram('YOUR_API_KEY')\n```\n\n## Get Transcript\n\nTo be given timestamps of phrases to include in our caption files, you need to ask Deepgram to include utterances (a chain of words or, more simply, a phrase).\n\n```js\ndeepgram.transcription\n  .preRecorded(\n    {\n      url: 'https://static.deepgram.com/examples/deep-learning-podcast-clip.wav',\n    },\n    { punctuate: true, utterances: true }\n  )\n  .then((response) => {\n    //  Following code here\n  })\n  .catch((error) => {\n    console.log({ error })\n  })\n```\n\n## Create a Write Stream\n\nOnce you open a writable stream, you can insert text directly into your file. When you do this, pass in the `a` flag, and any time you write data to the stream, it will be appended to the end. Inside of the `.then()` block:\n\n```js\n// WebVTT Filename\nconst stream = fs.createWriteStream('output.vtt', { flags: 'a' })\n\n// SRT Filename\nconst stream = fs.createWriteStream('output.srt', { flags: 'a' })\n```\n\n## Write Captions\n\nThe WebVTT and SRT formats are very similar, and each requires a block of text per utterance.\n\n### WebVTT\n\n```js\nstream.write('WEBVTT\\n\\n')\nfor (let i = 0; i < response.results.utterances.length; i++) {\n  const utterance = response.results.utterances[i]\n  const start = new Date(utterance.start * 1000).toISOString().substr(11, 12)\n  const end = new Date(utterance.end * 1000).toISOString().substr(11, 12)\n  stream.write(`${i + 1}\\n${start} --> ${end}\\n- ${utterance.transcript}\\n\\n`)\n}\n```\n\nDeepgram provides seconds back as a number (`15.4` means 15.4 seconds), but both formats require times as `HH:MM:SS.milliseconds` and getting the end of a `Date().toISOString()` will achieve this for us.\n\n#### Using the SDK\n\nReplace the above code with this single line:\n\n```js\nstream.write(response.toWebVTT())\n```\n\n### SRT\n\n```js\nfor (let i = 0; i < response.results.utterances.length; i++) {\n  const utterance = response.results.utterances[i]\n  const start = new Date(utterance.start * 1000)\n    .toISOString()\n    .substr(11, 12)\n    .replace('.', ',')\n  const end = new Date(utterance.end * 1000)\n    .toISOString()\n    .substr(11, 12)\n    .replace('.', ',')\n  stream.write(`${i + 1}\\n${start} --> ${end}\\n${utterance.transcript}\\n\\n`)\n}\n```\n\nDifferences? No `WEBVTT` line at the top, millisecond separator is `,`, and no `-` before the utterance.\n\n#### Using the SDK\n\nReplace the above code with this single line:\n\n```js\nstream.write(response.toSRT())\n```\n\n## One Line to Captions\n\nWe actually implemented `.toWebVTT()` and `.toSRT()` straight into the Node.js SDK while writing this post. Now, it's easier than ever to create valid caption files automatically with Deepgram. If you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>Providing captions for audio and video isn\u2019t just a nice-to-have - it\u2019s critical for accessibility. While this isn\u2019t specifically an accessibility post, I wanted to start by sharing <a href="https://www.microsoft.com/design/inclusive/">Microsoft\u2019s Inclusive Toolkit</a>. Something I hadn\u2019t considered before reading this was the impact of situational limitations. To learn more, jump to Section 3 of the toolkit - \u201CSolve for one, extend to many\u201D. Having a young (read \u201Cloud\u201D) child, I\u2019ve become even more aware of where captions are available, and if they aren\u2019t, I simply can\u2019t watch something with her around.</p>\n<p>There are two common and similar caption formats we are going to generate today - WebVTT and SRT. A WebVTT file looks like this:</p>\n<p>WEBVTT</p>\n<p>1\n00:00:00.219 \u2014> 00:00:03.512</p>\n<ul>\n<li>yeah, as much as it\u2019s worth celebrating</li>\n</ul>\n<p>2\n00:00:04.569 \u2014> 00:00:06.226</p>\n<ul>\n<li>the first space walk</li>\n</ul>\n<p>3\n00:00:06.564 \u2014> 00:00:07.942</p>\n<ul>\n<li>with an all female team</li>\n</ul>\n<p>4\n00:00:08.615 \u2014> 00:00:09.795</p>\n<ul>\n<li>I think many of us</li>\n</ul>\n<p>5\n00:00:10.135 \u2014> 00:00:13.355</p>\n<ul>\n<li>are looking forward to it just being normal.</li>\n</ul>\n<p>And a SRT file looks like this:</p>\n<p>1\n00:00:00,219 \u2014> 00:00:03,512\nyeah, as much as it\u2019s worth celebrating</p>\n<p>2\n00:00:04,569 \u2014> 00:00:06,226\nthe first space walk</p>\n<p>3\n00:00:06,564 \u2014> 00:00:07,942\nwith an all female team</p>\n<p>4\n00:00:08,615 \u2014> 00:00:09,795\nI think many of us</p>\n<p>5\n00:00:10,135 \u2014> 00:00:13,355\nare looking forward to it just being normal.</p>\n<p>Both are very similar in their basic forms, except for the millisecond separator being <code is:raw>.</code> in WebVTT and <code is:raw>,</code> in SRT. In this post, we will generate them manually from a Deepgram transcription result to see the technique, and then use the brand new Node.js SDK methods (available from v1.1.0) to make it even easier.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A hosted audio file URL to transcribe - you can use <a href="https://static.deepgram.com/examples/deep-learning-podcast-clip.wav">https://static.deepgram.com/examples/deep-learning-podcast-clip.wav</a> if you don\u2019t have one.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the Deepgram Node.js SDK with <code is:raw>npm install @deepgram/sdk</code>.</p>\n<h2 id="set-up-dependencies">Set Up Dependencies</h2>\n<p>Create an <code is:raw>index.js</code> file, open it in your code editor, and require then initialize the dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="get-transcript">Get Transcript</h2>\n<p>To be given timestamps of phrases to include in our caption files, you need to ask Deepgram to include utterances (a chain of words or, more simply, a phrase).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">      url: </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/deep-learning-podcast-clip.wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//  Following code here</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ error })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<h2 id="create-a-write-stream">Create a Write Stream</h2>\n<p>Once you open a writable stream, you can insert text directly into your file. When you do this, pass in the <code is:raw>a</code> flag, and any time you write data to the stream, it will be appended to the end. Inside of the <code is:raw>.then()</code> block:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// WebVTT Filename</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.vtt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// SRT Filename</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.srt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<h2 id="write-captions">Write Captions</h2>\n<p>The WebVTT and SRT formats are very similar, and each requires a block of text per utterance.</p>\n<h3 id="webvtt">WebVTT</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;WEBVTT</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> response.results.utterances.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.utterances[i]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.start </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">end</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.end </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">i</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">} --&gt; ${</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">- ${</span><span style="color: #C9D1D9">utterance</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Deepgram provides seconds back as a number (<code is:raw>15.4</code> means 15.4 seconds), but both formats require times as <code is:raw>HH:MM:SS.milliseconds</code> and getting the end of a <code is:raw>Date().toISOString()</code> will achieve this for us.</p>\n<h4 id="using-the-sdk">Using the SDK</h4>\n<p>Replace the above code with this single line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(response.</span><span style="color: #D2A8FF">toWebVTT</span><span style="color: #C9D1D9">())</span></span></code></pre>\n<h3 id="srt">SRT</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> response.results.utterances.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.utterances[i]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.start </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;,&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">end</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.end </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;,&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">i</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">} --&gt; ${</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">utterance</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Differences? No <code is:raw>WEBVTT</code> line at the top, millisecond separator is <code is:raw>,</code>, and no <code is:raw>-</code> before the utterance.</p>\n<h4 id="using-the-sdk-1">Using the SDK</h4>\n<p>Replace the above code with this single line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(response.</span><span style="color: #D2A8FF">toSRT</span><span style="color: #C9D1D9">())</span></span></code></pre>\n<h2 id="one-line-to-captions">One Line to Captions</h2>\n<p>We actually implemented <code is:raw>.toWebVTT()</code> and <code is:raw>.toSRT()</code> straight into the Node.js SDK while writing this post. Now, it\u2019s easier than ever to create valid caption files automatically with Deepgram. If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/generate-webvtt-srt-captions-nodejs/index.md" };
function rawContent() {
  return "\nProviding captions for audio and video isn't just a nice-to-have - it's critical for accessibility. While this isn't specifically an accessibility post, I wanted to start by sharing [Microsoft's Inclusive Toolkit](https://www.microsoft.com/design/inclusive/). Something I hadn't considered before reading this was the impact of situational limitations. To learn more, jump to Section 3 of the toolkit - \"Solve for one, extend to many\". Having a young (read \"loud\") child, I've become even more aware of where captions are available, and if they aren't, I simply can't watch something with her around.\n\nThere are two common and similar caption formats we are going to generate today - WebVTT and SRT. A WebVTT file looks like this:\n\n    WEBVTT\n\n    1\n    00:00:00.219 --> 00:00:03.512\n    - yeah, as much as it's worth celebrating\n\n    2\n    00:00:04.569 --> 00:00:06.226\n    - the first space walk\n\n    3\n    00:00:06.564 --> 00:00:07.942\n    - with an all female team\n\n    4\n    00:00:08.615 --> 00:00:09.795\n    - I think many of us\n\n    5\n    00:00:10.135 --> 00:00:13.355\n    - are looking forward to it just being normal.\n\nAnd a SRT file looks like this:\n\n    1\n    00:00:00,219 --> 00:00:03,512\n    yeah, as much as it's worth celebrating\n\n    2\n    00:00:04,569 --> 00:00:06,226\n    the first space walk\n\n    3\n    00:00:06,564 --> 00:00:07,942\n    with an all female team\n\n    4\n    00:00:08,615 --> 00:00:09,795\n    I think many of us\n\n    5\n    00:00:10,135 --> 00:00:13,355\n    are looking forward to it just being normal.\n\nBoth are very similar in their basic forms, except for the millisecond separator being `.` in WebVTT and `,` in SRT. In this post, we will generate them manually from a Deepgram transcription result to see the technique, and then use the brand new Node.js SDK methods (available from v1.1.0) to make it even easier.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   A hosted audio file URL to transcribe - you can use https://static.deepgram.com/examples/deep-learning-podcast-clip.wav if you don't have one.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the Deepgram Node.js SDK with `npm install @deepgram/sdk`.\n\n## Set Up Dependencies\n\nCreate an `index.js` file, open it in your code editor, and require then initialize the dependencies:\n\n```js\nconst fs = require('fs')\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram('YOUR_API_KEY')\n```\n\n## Get Transcript\n\nTo be given timestamps of phrases to include in our caption files, you need to ask Deepgram to include utterances (a chain of words or, more simply, a phrase).\n\n```js\ndeepgram.transcription\n  .preRecorded(\n    {\n      url: 'https://static.deepgram.com/examples/deep-learning-podcast-clip.wav',\n    },\n    { punctuate: true, utterances: true }\n  )\n  .then((response) => {\n    //  Following code here\n  })\n  .catch((error) => {\n    console.log({ error })\n  })\n```\n\n## Create a Write Stream\n\nOnce you open a writable stream, you can insert text directly into your file. When you do this, pass in the `a` flag, and any time you write data to the stream, it will be appended to the end. Inside of the `.then()` block:\n\n```js\n// WebVTT Filename\nconst stream = fs.createWriteStream('output.vtt', { flags: 'a' })\n\n// SRT Filename\nconst stream = fs.createWriteStream('output.srt', { flags: 'a' })\n```\n\n## Write Captions\n\nThe WebVTT and SRT formats are very similar, and each requires a block of text per utterance.\n\n### WebVTT\n\n```js\nstream.write('WEBVTT\\n\\n')\nfor (let i = 0; i < response.results.utterances.length; i++) {\n  const utterance = response.results.utterances[i]\n  const start = new Date(utterance.start * 1000).toISOString().substr(11, 12)\n  const end = new Date(utterance.end * 1000).toISOString().substr(11, 12)\n  stream.write(`${i + 1}\\n${start} --> ${end}\\n- ${utterance.transcript}\\n\\n`)\n}\n```\n\nDeepgram provides seconds back as a number (`15.4` means 15.4 seconds), but both formats require times as `HH:MM:SS.milliseconds` and getting the end of a `Date().toISOString()` will achieve this for us.\n\n#### Using the SDK\n\nReplace the above code with this single line:\n\n```js\nstream.write(response.toWebVTT())\n```\n\n### SRT\n\n```js\nfor (let i = 0; i < response.results.utterances.length; i++) {\n  const utterance = response.results.utterances[i]\n  const start = new Date(utterance.start * 1000)\n    .toISOString()\n    .substr(11, 12)\n    .replace('.', ',')\n  const end = new Date(utterance.end * 1000)\n    .toISOString()\n    .substr(11, 12)\n    .replace('.', ',')\n  stream.write(`${i + 1}\\n${start} --> ${end}\\n${utterance.transcript}\\n\\n`)\n}\n```\n\nDifferences? No `WEBVTT` line at the top, millisecond separator is `,`, and no `-` before the utterance.\n\n#### Using the SDK\n\nReplace the above code with this single line:\n\n```js\nstream.write(response.toSRT())\n```\n\n## One Line to Captions\n\nWe actually implemented `.toWebVTT()` and `.toSRT()` straight into the Node.js SDK while writing this post. Now, it's easier than ever to create valid caption files automatically with Deepgram. If you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ";
}
function compiledContent() {
  return '<p>Providing captions for audio and video isn\u2019t just a nice-to-have - it\u2019s critical for accessibility. While this isn\u2019t specifically an accessibility post, I wanted to start by sharing <a href="https://www.microsoft.com/design/inclusive/">Microsoft\u2019s Inclusive Toolkit</a>. Something I hadn\u2019t considered before reading this was the impact of situational limitations. To learn more, jump to Section 3 of the toolkit - \u201CSolve for one, extend to many\u201D. Having a young (read \u201Cloud\u201D) child, I\u2019ve become even more aware of where captions are available, and if they aren\u2019t, I simply can\u2019t watch something with her around.</p>\n<p>There are two common and similar caption formats we are going to generate today - WebVTT and SRT. A WebVTT file looks like this:</p>\n<p>WEBVTT</p>\n<p>1\n00:00:00.219 \u2014> 00:00:03.512</p>\n<ul>\n<li>yeah, as much as it\u2019s worth celebrating</li>\n</ul>\n<p>2\n00:00:04.569 \u2014> 00:00:06.226</p>\n<ul>\n<li>the first space walk</li>\n</ul>\n<p>3\n00:00:06.564 \u2014> 00:00:07.942</p>\n<ul>\n<li>with an all female team</li>\n</ul>\n<p>4\n00:00:08.615 \u2014> 00:00:09.795</p>\n<ul>\n<li>I think many of us</li>\n</ul>\n<p>5\n00:00:10.135 \u2014> 00:00:13.355</p>\n<ul>\n<li>are looking forward to it just being normal.</li>\n</ul>\n<p>And a SRT file looks like this:</p>\n<p>1\n00:00:00,219 \u2014> 00:00:03,512\nyeah, as much as it\u2019s worth celebrating</p>\n<p>2\n00:00:04,569 \u2014> 00:00:06,226\nthe first space walk</p>\n<p>3\n00:00:06,564 \u2014> 00:00:07,942\nwith an all female team</p>\n<p>4\n00:00:08,615 \u2014> 00:00:09,795\nI think many of us</p>\n<p>5\n00:00:10,135 \u2014> 00:00:13,355\nare looking forward to it just being normal.</p>\n<p>Both are very similar in their basic forms, except for the millisecond separator being <code is:raw>.</code> in WebVTT and <code is:raw>,</code> in SRT. In this post, we will generate them manually from a Deepgram transcription result to see the technique, and then use the brand new Node.js SDK methods (available from v1.1.0) to make it even easier.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A hosted audio file URL to transcribe - you can use <a href="https://static.deepgram.com/examples/deep-learning-podcast-clip.wav">https://static.deepgram.com/examples/deep-learning-podcast-clip.wav</a> if you don\u2019t have one.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the Deepgram Node.js SDK with <code is:raw>npm install @deepgram/sdk</code>.</p>\n<h2 id="set-up-dependencies">Set Up Dependencies</h2>\n<p>Create an <code is:raw>index.js</code> file, open it in your code editor, and require then initialize the dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="get-transcript">Get Transcript</h2>\n<p>To be given timestamps of phrases to include in our caption files, you need to ask Deepgram to include utterances (a chain of words or, more simply, a phrase).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">      url: </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/deep-learning-podcast-clip.wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//  Following code here</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ error })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<h2 id="create-a-write-stream">Create a Write Stream</h2>\n<p>Once you open a writable stream, you can insert text directly into your file. When you do this, pass in the <code is:raw>a</code> flag, and any time you write data to the stream, it will be appended to the end. Inside of the <code is:raw>.then()</code> block:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// WebVTT Filename</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.vtt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// SRT Filename</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.srt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<h2 id="write-captions">Write Captions</h2>\n<p>The WebVTT and SRT formats are very similar, and each requires a block of text per utterance.</p>\n<h3 id="webvtt">WebVTT</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;WEBVTT</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> response.results.utterances.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.utterances[i]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.start </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">end</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.end </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">i</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">} --&gt; ${</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">- ${</span><span style="color: #C9D1D9">utterance</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Deepgram provides seconds back as a number (<code is:raw>15.4</code> means 15.4 seconds), but both formats require times as <code is:raw>HH:MM:SS.milliseconds</code> and getting the end of a <code is:raw>Date().toISOString()</code> will achieve this for us.</p>\n<h4 id="using-the-sdk">Using the SDK</h4>\n<p>Replace the above code with this single line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(response.</span><span style="color: #D2A8FF">toWebVTT</span><span style="color: #C9D1D9">())</span></span></code></pre>\n<h3 id="srt">SRT</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> response.results.utterances.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.utterances[i]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.start </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;,&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">end</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.end </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;,&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">i</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">} --&gt; ${</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">utterance</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Differences? No <code is:raw>WEBVTT</code> line at the top, millisecond separator is <code is:raw>,</code>, and no <code is:raw>-</code> before the utterance.</p>\n<h4 id="using-the-sdk-1">Using the SDK</h4>\n<p>Replace the above code with this single line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(response.</span><span style="color: #D2A8FF">toSRT</span><span style="color: #C9D1D9">())</span></span></code></pre>\n<h2 id="one-line-to-captions">One Line to Captions</h2>\n<p>We actually implemented <code is:raw>.toWebVTT()</code> and <code is:raw>.toSRT()</code> straight into the Node.js SDK while writing this post. Now, it\u2019s easier than ever to create valid caption files automatically with Deepgram. If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/generate-webvtt-srt-captions-nodejs/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Providing captions for audio and video isn’t just a nice-to-have - it’s critical for accessibility. While this isn’t specifically an accessibility post, I wanted to start by sharing <a href="https://www.microsoft.com/design/inclusive/">Microsoft’s Inclusive Toolkit</a>. Something I hadn’t considered before reading this was the impact of situational limitations. To learn more, jump to Section 3 of the toolkit - “Solve for one, extend to many”. Having a young (read “loud”) child, I’ve become even more aware of where captions are available, and if they aren’t, I simply can’t watch something with her around.</p>
<p>There are two common and similar caption formats we are going to generate today - WebVTT and SRT. A WebVTT file looks like this:</p>
<p>WEBVTT</p>
<p>1
00:00:00.219 —> 00:00:03.512</p>
<ul>
<li>yeah, as much as it’s worth celebrating</li>
</ul>
<p>2
00:00:04.569 —> 00:00:06.226</p>
<ul>
<li>the first space walk</li>
</ul>
<p>3
00:00:06.564 —> 00:00:07.942</p>
<ul>
<li>with an all female team</li>
</ul>
<p>4
00:00:08.615 —> 00:00:09.795</p>
<ul>
<li>I think many of us</li>
</ul>
<p>5
00:00:10.135 —> 00:00:13.355</p>
<ul>
<li>are looking forward to it just being normal.</li>
</ul>
<p>And a SRT file looks like this:</p>
<p>1
00:00:00,219 —> 00:00:03,512
yeah, as much as it’s worth celebrating</p>
<p>2
00:00:04,569 —> 00:00:06,226
the first space walk</p>
<p>3
00:00:06,564 —> 00:00:07,942
with an all female team</p>
<p>4
00:00:08,615 —> 00:00:09,795
I think many of us</p>
<p>5
00:00:10,135 —> 00:00:13,355
are looking forward to it just being normal.</p>
<p>Both are very similar in their basic forms, except for the millisecond separator being <code>.</code> in WebVTT and <code>,</code> in SRT. In this post, we will generate them manually from a Deepgram transcription result to see the technique, and then use the brand new Node.js SDK methods (available from v1.1.0) to make it even easier.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>
<li>A hosted audio file URL to transcribe - you can use <a href="https://static.deepgram.com/examples/deep-learning-podcast-clip.wav">https://static.deepgram.com/examples/deep-learning-podcast-clip.wav</a> if you don’t have one.</li>
</ul>
<p>Create a new directory and navigate to it with your terminal. Run <code>npm init -y</code> to create a <code>package.json</code> file and then install the Deepgram Node.js SDK with <code>npm install @deepgram/sdk</code>.</p>
<h2 id="set-up-dependencies">Set Up Dependencies</h2>
<p>Create an <code>index.js</code> file, open it in your code editor, and require then initialize the dependencies:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="get-transcript">Get Transcript</h2>
<p>To be given timestamps of phrases to include in our caption files, you need to ask Deepgram to include utterances (a chain of words or, more simply, a phrase).</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram.transcription</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    {</span></span>
<span class="line"><span style="color: #C9D1D9">      url: </span><span style="color: #A5D6FF">&#39;https://static.deepgram.com/examples/deep-learning-podcast-clip.wav&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">    { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">  )</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">//  Following code here</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ error })</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>
<h2 id="create-a-write-stream">Create a Write Stream</h2>
<p>Once you open a writable stream, you can insert text directly into your file. When you do this, pass in the <code>a</code> flag, and any time you write data to the stream, it will be appended to the end. Inside of the <code>.then()</code> block:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// WebVTT Filename</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.vtt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// SRT Filename</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.srt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>
<h2 id="write-captions">Write Captions</h2>
<p>The WebVTT and SRT formats are very similar, and each requires a block of text per utterance.</p>
<h3 id="webvtt">WebVTT</h3>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;WEBVTT</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> response.results.utterances.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.utterances[i]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.start </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">end</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.end </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`\${</span><span style="color: #C9D1D9">i</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">\${</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">} --&gt; \${</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">- \${</span><span style="color: #C9D1D9">utterance</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Deepgram provides seconds back as a number (<code>15.4</code> means 15.4 seconds), but both formats require times as <code>HH:MM:SS.milliseconds</code> and getting the end of a <code>Date().toISOString()</code> will achieve this for us.</p>
<h4 id="using-the-sdk">Using the SDK</h4>
<p>Replace the above code with this single line:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(response.</span><span style="color: #D2A8FF">toWebVTT</span><span style="color: #C9D1D9">())</span></span></code></pre>
<h3 id="srt">SRT</h3>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> response.results.utterances.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.results.utterances[i]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.start </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;,&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">end</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">(utterance.end </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">toISOString</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">substr</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;,&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`\${</span><span style="color: #C9D1D9">i</span><span style="color: #A5D6FF"> </span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF"> </span><span style="color: #79C0FF">1</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">\${</span><span style="color: #C9D1D9">start</span><span style="color: #A5D6FF">} --&gt; \${</span><span style="color: #C9D1D9">end</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n</span><span style="color: #A5D6FF">\${</span><span style="color: #C9D1D9">utterance</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Differences? No <code>WEBVTT</code> line at the top, millisecond separator is <code>,</code>, and no <code>-</code> before the utterance.</p>
<h4 id="using-the-sdk-1">Using the SDK</h4>
<p>Replace the above code with this single line:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(response.</span><span style="color: #D2A8FF">toSRT</span><span style="color: #C9D1D9">())</span></span></code></pre>
<h2 id="one-line-to-captions">One Line to Captions</h2>
<p>We actually implemented <code>.toWebVTT()</code> and <code>.toSRT()</code> straight into the Node.js SDK while writing this post. Now, it’s easier than ever to create valid caption files automatically with Deepgram. If you have any questions, please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/generate-webvtt-srt-captions-nodejs/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
