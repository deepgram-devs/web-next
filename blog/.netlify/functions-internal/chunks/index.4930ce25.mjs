import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
/* empty css                           */import 'axios';
/* empty css                          *//* empty css                           *//* empty css                          *//* empty css                              *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           *//* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "prepping-our-project", "text": "Prepping our Project" }, { "depth": 3, "slug": "where-we-started", "text": "Where we started" }, { "depth": 3, "slug": "overview", "text": "Overview" }, { "depth": 4, "slug": "file-structure", "text": "File Structure" }, { "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 4, "slug": "package-breakdown", "text": "Package breakdown" }, { "depth": 2, "slug": "updating-your-project-with-deepgram", "text": "Updating Your Project with Deepgram" }, { "depth": 3, "slug": "accessing-the-quote---logic", "text": "Accessing the Quote - Logic" }, { "depth": 4, "slug": "appjs", "text": "app.js" }], "source": "\nI spend a lot of time with folks learning to code and early-career developers. One of the things I\u2019ve noticed is that it\u2019s increasingly hard to find your first job. One of the biggest comments I\u2019ve heard from hiring managers is that so many applicants for junior positions are showcasing the same projects. As I was brainstorming some use cases for Deepgram, I wanted to work on something that could help out these folks looking for their first development job. That\u2019s how I decided to upgrade one of the [freeCodeCamp Front End Development Libraries Projects](https://www.freecodecamp.org/learn/front-end-development-libraries/#front-end-development-libraries-projects). In this post, we\u2019re going to take the [Quote Generator Project](https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine) up a notch and use [Deepgram\u2019s Node SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/) to fetch a quote.\n\n## Prepping our Project\n\n<Panel type=\"info\" title=\"freeCodeCamp Side Note\">\n\nFor this tutorial, we\u2019re assuming that you have completed the project. If you haven\u2019t, you can find the <a href=\"https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine\">directions for the quote generator here</a> or take a look at <a href=\"https://codepen.io/freeCodeCamp/pen/qRZeGZ\">freeCodeCamp\u2019s demo project</a> to get you started.\n\n</Panel>\n\n*   Download Node.js if you haven\u2019t already - get it [here](https://nodejs.org/en/)\n*   Create a Deepgram API Key with an admin or owner role - [get it here](https://console.deepgram.com/signup?jump=keys)\n*   Create a file called .env and add `DG_KEY='your-api-key'`.\n\n<Panel type=\"info\" title=\"Notes on API keys\">\n\n*   Your API key should be a string of letters and numbers that you wrap in single quotes.\n*   .env files contain sensitive values. We\u2019ll use a .gitignore file to ensure we don\u2019t expose our information, but if you\u2019re sharing your code with others, don\u2019t include your sensitive information.\n\n</Panel>\n\n### Where we started\n\nBefore we get into upgrading our freeCodeCamp projects, let\u2019s take a look at the core functionality of our quote generator. When we open our project, there\u2019s a quote to start. When we click the New Quote button, our quote machine fetches a new quote and author and displays that in the quote box. When we click the Twitter button, it takes the quote we see on the screen and creates a new tweet.\n\n![gif of clicking the new quote button](https://res.cloudinary.com/deepgram/image/upload/v1648826507/blog/2022/03/freecodecamp-quote-generator-upgrade/new-quote.gif)\n\nHere\u2019s the basic functionality that allows us to create the new quote:\n\n```js\nfunction getRandomQuote() {\n  fetch(\n    'https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n  )\n    .then((response) => response.json())\n    .then((data) => {\n      document.querySelector('#text').innerText =\n        data.quotes[`${random(99)}`].quote\n      document.querySelector('#author').innerText =\n        data.quotes[`${random(99)}`].author\n    })\n}\n\nnewQuoteButton.addEventListener('click', () => {\n  const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)}, 0.4)`\n  document.body.style.backgroundColor = rndCol\n\n  getRandomQuote()\n})\n```\n\nAs you can see, the project fetches quotes from a JSON file of quotes and authors on GitHub. You can find the one I used [here](https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json).\n\nAs you work on this project, it\u2019s useful to have some understanding of APIs and JSON.\n\n<Panel type=\"info\" title=\"Resource Break!\">\n\n<li><a href=\"https://blog.deepgram.com/getting-started-with-apis/\">Getting Started with APIs</a>  by <a href=\"https://blog.deepgram.com/authors/kevin-lewis/\">Kevin Lewis</a></li>\n<li><a href=\"https://blog.deepgram.com/getting-started-with-json/\">Getting Started with JSON</a>  by <a href=\"https://blog.deepgram.com/authors/sandra-rodgers/\">Sandra Rodgers</a></li>\n</Panel>\n\n### Overview\n\nThe way this looks isn\u2019t going to change, *but* how we\u2019re getting the quotes will. Instead of fetching from the gist, we will fetch a random movie from [this gist](https://gist.github.com/BekahHW/394d81b484f264b0c8b23c0e177f8588), and then transcribe that using Deepgram\u2019s Node SDK.\n\nRather than using CodePen, I will be working in a public repository. We\u2019ll need a package.json file for this project to install some packages to help us get the data we need.\n\n#### File Structure\n\nWe\u2019ll be using a public folder for all the files that impact the front end of our project. We\u2019ll only be actively working on a total of two files, with the assumption that you\u2019ll keep your styles the same.\n\n*   `app.js` will contain our front-end logic with our click events, which will be in the public folder. This is the file that controls rendering the quote and author on the screen.\n*   `server.js` is where we\u2019ll work with our server-side logic. We\u2019ll use `node-fetch`--more on this later\u2013to get the data we need from the JSON of movie quotes. We\u2019ll also use Deepgram\u2019s Node SDK to transcribe the quotes and get them on the screen.\n\nHere\u2019s what our file structure is going to look like:\n\n![image of the file structure](https://res.cloudinary.com/deepgram/image/upload/v1648826506/blog/2022/03/freecodecamp-quote-generator-upgrade/folder.png)\n\n## Getting Started\n\nOnce you have your project in a repository, cd into your project from your terminal and follow the following steps:\n\n```bash\nnpm i @deepgram/sdk dotenv express\nnpm i -g gitignore && gitignore node\n```\n\nThese are all the packages we\u2019ll need to get us up and running in this project.\n\n#### Package breakdown\n\n*   [dotenv](https://github.com/motdotla/dotenv#readme) - \u201CDotenv is a zero-dependency module that loads environment variables from a .env file into process.env\u201D\n*   [gitignore node and gitignore node](https://github.com/msfeldstein/gitignore) - \u201C\u200B\u200BAutomatically fetch github's excellent .gitignore files for any of your new projects\u201D\n*   [express](https://expressjs.com/) - Node framework that connects your server-side to your client-side.\n\n<Panel type=\"info\" title=\"Another Resource Break!\">\n\nIf you\u2019re getting started with learning express like I was, here are a couple of resources to get you started:\n\n*   Sandra\u2019s post [Sending Audio Files to Your Express.js Server](https://blog.deepgram.com/sending-audio-files-to-expressjs-server/) can help you better understand express.\n*   [Express/Node Introduction](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction)\n\n</Panel>\n\n## Updating Your Project with Deepgram\n\nNow we\u2019re ready to upgrade your freeCodeCamp Quote Generator. We\u2019ll start in the `server.js` file. We need to require the packages we just installed to ensure we can use them. At the top of your file add the following:\n\n```js\nrequire('dotenv').config()\nconst express = require('express')\nconst fetch = require('node-fetch')\nconst app = express()\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nNext, we need to connect our `app.js` file to our `server.js` file. Below the previous code, add the following lines of code:\n\n```js\napp.use(express.static('public'))\nconst deepgram = new Deepgram(process.env.DG_KEY)\n```\n\nThe first line in that block allows us to serve static files to our Express app. Because we have \u2018public\u2019 in there, our app has access to the files in our public folder. If you want a more thorough explanation, you can check out [this Mastering JS tutorial](https://masteringjs.io/tutorials/express/app-use-static).\n\nThe second line creates a new instance of Deepgram using our API key that we added to our `.env` file. Because we\u2019ve added the dotenv packages, we have access to that key when we add the `process.env` before the variable name for our API key.\n\n### Accessing the Quote - Logic\n\nNext up, we will add the logic that allows us to access the gist of movie quote data. This is where we\u2019ll also be using [node-fetch](https://github.com/node-fetch/node-fetch), which we\u2019ve named \u201Cfetch\u201D in this project.\n\nWe\u2019re going to put all of our logic in an async function. With async functions, we know we\u2019ll have to wait for a task, but our application can continue to be responsive while waiting. This is a fairly complex concept, so don\u2019t worry if you don\u2019t fully grasp it right now. You can check out [mdn\u2019s Introduction to asynchronous JavaScript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing) for more information.\n\nLet\u2019s start with this:\n\n```js\nasync function getTranscript() {}\n```\n\nWithin this space, we\u2019re going to add:\n\n*   A function that allows us to randomize our quotes\n*   Logic to get the wav file and the speaker (although we\u2019re referring to them as \u201Cauthor\u201D in this post).\n\nJust after the first curly brace, we\u2019re going to add our random function with this code:\n\n```js\nasync function getTranscript() {\n  function random(number) {\n    return Math.floor(Math.random() * (number + 1))\n  }\n}\n```\n\nNow, we want to make sure that we get a random file and the author associated with that quote. To do that, add the following code underneath our getTranscript function:\n\n```js\nconst randomNumber = random(6)\nconst response = await fetch(\n  'https://gist.githubusercontent.com/BekahHW/394d81b484f264b0c8b23c0e177f8588/raw/df7bba8dde4f96487dd843977a07991aba4ca511/quotes.json'\n)\n\nconst data = await response.json()\nconst audioUrl = data[randomNumber].quote\nconst author = data[randomNumber].author\n```\n\nOur randomNumber variable ensures that the file we\u2019re passing to Deepgram (coming up next!) is associated with the author of that quote.\n\nWith `response` and `data`, we\u2019re accessing the gist of movie quotes.\n\nIf we console.log(data), we\u2019ll get this plus the rest of the array of objects:\n\n![image of an array of objects with wav files and authors](https://res.cloudinary.com/deepgram/image/upload/v1648826505/blog/2022/03/freecodecamp-quote-generator-upgrade/json.png)\n\nWhen we console.log(author), we\u2019ll see one of those author\u2019s names as we\u2019re accessing one item in the array.\n\nWe\u2019ve made huge progress! Now we\u2019re ready to use Deepgram to upgrade this freeCodeCamp project!\n\nBelow the code we\u2019ve just written, but within the getTranscript function, we\u2019re going to add what we need to get the transcript from the wav file:\n\n```js\nconst quoteTranscription = await deepgram.transcription\n  .preRecorded({ url: audioUrl }, { punctuate: true, language: 'en-US' })\n  .then((transcription) => transcription.results.channels[0].alternatives[0])\n\nreturn {\n  author: author,\n  transcription: quoteTranscription,\n}\n```\n\nA couple of things with that code block:\nWe\u2019re using pre-recorded audio, which you can find more about in our [Deepgram docs on pre-recorded transcription](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/pre-recorded-transcription/).\n\n1.  You need to pass the link to the audio file. In this case, we do it with `url: audioUrl`.\n    We get access to the transcription of the wav file with `transcription.results.channels[0].alternatives[0]`\n2.  We\u2019re returning both the author and the transcription because we need to send them to our app.js file to render in our quote-box.\n\nNow we\u2019re ready to connect all that work in `server.js` to `app.js`. After that code and outside of the function, add this code block:\n\n```js\napp.get('/transcribe', (req, res) => {\n  getTranscript()\n    .then((transcriptObj) => res.send(transcriptObj))\n    .catch((err) => {\n      console.log(err)\n    })\n})\n```\n\nThis is where we\u2019re using express. The /express path should lead you to JSON data that we\u2019re accessing. We\u2019re calling getTranscript, so we have access to the author and transcription values. To send that to our `app.js` file, we use res.send. Right now, we\u2019re not sending it there because we haven\u2019t connected those paths. Before we do that, let\u2019s make sure express is listening to the server. Add this code to the very bottom of the file:\n\n```js\napp.listen(3000, () => {\n  console.log(`Example app listening on port 3000`)\n})\n```\n\nNow we\u2019re ready to connect our work. We\u2019re almost done!\n\n#### `app.js`\n\nIn our `app.js` file, we have an event listener attached to our new quote button. Previously when we clicked this, it would fetch from the quote gist. We\u2019re going to replace that with this code:\n\n```js\nfetch('/transcribe')\n  .then((r) => r.json())\n  .then((res) => {\n    document.querySelector('#text').innerText = res.transcription.transcript\n    document.querySelector('#author').innerText = res.author\n  })\n```\n\nWe\u2019re connecting the path in `server.js` when we fetch(\\`/transcribe\u2019). Then we\u2019re taking that transcript object, getting it in a usable format, and then sending the text and author divs according to that data.\n\nWe should be ready!\n\nGo to your terminal and run `node server.js`. You should be able to navigate to `http://localhost:3000/` and see your app. Go ahead and click the New Quote button and see the magic happen.\n\nWhew. That\u2019s a pretty cool update. If you want to check out the code in its entirety, you can navigate to our [freeCodeCamp-Quote-Generator repo](https://github.com/deepgram-devs/freeCodeCamp-Quote-Generator) or to get you up and running faster, check out our [freeCodeCamp Quote Gen with Deepgram Stackblitz](https://stackblitz.com/edit/fcc-dg0). When you open this project it will automatically fork it for you. You just need to add your own `.env`. Then, in the terminal, run `node server.js` and see it live!\n\nThis is a project I hope to build on. We\u2019ve been doing Twitter Spaces at Deepgram, and once we have some edited, I\u2019d love to use the quote generator to show random quotes and allow you to select the full recording if you\u2019re interested in the quote. Be on the lookout :eyes: for that future post.\n\nIf you have any questions or want a walkthrough of the how to build a freeCodeCamp project with the Deepgram update, hit us up on [@DeepgramDevs](https://twitter.com/DeepgramDevs) on Twitter.\n\n        ", "html": '<p>I spend a lot of time with folks learning to code and early-career developers. One of the things I\u2019ve noticed is that it\u2019s increasingly hard to find your first job. One of the biggest comments I\u2019ve heard from hiring managers is that so many applicants for junior positions are showcasing the same projects. As I was brainstorming some use cases for Deepgram, I wanted to work on something that could help out these folks looking for their first development job. That\u2019s how I decided to upgrade one of the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/#front-end-development-libraries-projects">freeCodeCamp Front End Development Libraries Projects</a>. In this post, we\u2019re going to take the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine">Quote Generator Project</a> up a notch and use <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram\u2019s Node SDK</a> to fetch a quote.</p>\n<h2 id="prepping-our-project">Prepping our Project</h2>\n<Panel type="info" title="freeCodeCamp Side Note"><p>For this tutorial, we\u2019re assuming that you have completed the project. If you haven\u2019t, you can find the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine">directions for the quote generator here</a> or take a look at <a href="https://codepen.io/freeCodeCamp/pen/qRZeGZ">freeCodeCamp\u2019s demo project</a> to get you started.</p></Panel>\n<ul>\n<li>Download Node.js if you haven\u2019t already - get it <a href="https://nodejs.org/en/">here</a></li>\n<li>Create a Deepgram API Key with an admin or owner role - <a href="https://console.deepgram.com/signup?jump=keys">get it here</a></li>\n<li>Create a file called .env and add <code is:raw>DG_KEY=\'your-api-key\'</code>.</li>\n</ul>\n<Panel type="info" title="Notes on API keys"><ul>\n<li>Your API key should be a string of letters and numbers that you wrap in single quotes.</li>\n<li>.env files contain sensitive values. We\u2019ll use a .gitignore file to ensure we don\u2019t expose our information, but if you\u2019re sharing your code with others, don\u2019t include your sensitive information.</li>\n</ul></Panel>\n<h3 id="where-we-started">Where we started</h3>\n<p>Before we get into upgrading our freeCodeCamp projects, let\u2019s take a look at the core functionality of our quote generator. When we open our project, there\u2019s a quote to start. When we click the New Quote button, our quote machine fetches a new quote and author and displays that in the quote box. When we click the Twitter button, it takes the quote we see on the screen and creates a new tweet.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826507/blog/2022/03/freecodecamp-quote-generator-upgrade/new-quote.gif" alt="gif of clicking the new quote button"></p>\n<p>Here\u2019s the basic functionality that allows us to create the new quote:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomQuote</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> response.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#text&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">        data.quotes[</span><span style="color: #A5D6FF">`${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">99</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">].quote</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#author&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">        data.quotes[</span><span style="color: #A5D6FF">`${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">99</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">].author</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">newQuoteButton.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rndCol</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`rgb(${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, ${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, ${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, 0.4)`</span></span>\n<span class="line"><span style="color: #C9D1D9">  document.body.style.backgroundColor </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> rndCol</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getRandomQuote</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>As you can see, the project fetches quotes from a JSON file of quotes and authors on GitHub. You can find the one I used <a href="https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json">here</a>.</p>\n<p>As you work on this project, it\u2019s useful to have some understanding of APIs and JSON.</p>\n<Panel type="info" title="Resource Break!"><li><a href="https://blog.deepgram.com/getting-started-with-apis/">Getting Started with APIs</a>  by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n<li><a href="https://blog.deepgram.com/getting-started-with-json/">Getting Started with JSON</a>  by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li></Panel>\n<h3 id="overview">Overview</h3>\n<p>The way this looks isn\u2019t going to change, <em>but</em> how we\u2019re getting the quotes will. Instead of fetching from the gist, we will fetch a random movie from <a href="https://gist.github.com/BekahHW/394d81b484f264b0c8b23c0e177f8588">this gist</a>, and then transcribe that using Deepgram\u2019s Node SDK.</p>\n<p>Rather than using CodePen, I will be working in a public repository. We\u2019ll need a package.json file for this project to install some packages to help us get the data we need.</p>\n<h4 id="file-structure">File Structure</h4>\n<p>We\u2019ll be using a public folder for all the files that impact the front end of our project. We\u2019ll only be actively working on a total of two files, with the assumption that you\u2019ll keep your styles the same.</p>\n<ul>\n<li><code is:raw>app.js</code> will contain our front-end logic with our click events, which will be in the public folder. This is the file that controls rendering the quote and author on the screen.</li>\n<li><code is:raw>server.js</code> is where we\u2019ll work with our server-side logic. We\u2019ll use <code is:raw>node-fetch</code>\u2014more on this later\u2013to get the data we need from the JSON of movie quotes. We\u2019ll also use Deepgram\u2019s Node SDK to transcribe the quotes and get them on the screen.</li>\n</ul>\n<p>Here\u2019s what our file structure is going to look like:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826506/blog/2022/03/freecodecamp-quote-generator-upgrade/folder.png" alt="image of the file structure"></p>\n<h2 id="getting-started">Getting Started</h2>\n<p>Once you have your project in a repository, cd into your project from your terminal and follow the following steps:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm i @deepgram/sdk dotenv express</span></span>\n<span class="line"><span style="color: #C9D1D9">npm i -g gitignore </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> gitignore node</span></span></code></pre>\n<p>These are all the packages we\u2019ll need to get us up and running in this project.</p>\n<h4 id="package-breakdown">Package breakdown</h4>\n<ul>\n<li><a href="https://github.com/motdotla/dotenv#readme">dotenv</a> - \u201CDotenv is a zero-dependency module that loads environment variables from a .env file into process.env\u201D</li>\n<li><a href="https://github.com/msfeldstein/gitignore">gitignore node and gitignore node</a> - \u201C\u200B\u200BAutomatically fetch github\u2019s excellent .gitignore files for any of your new projects\u201D</li>\n<li><a href="https://expressjs.com/">express</a> - Node framework that connects your server-side to your client-side.</li>\n</ul>\n<Panel type="info" title="Another Resource Break!"><p>If you\u2019re getting started with learning express like I was, here are a couple of resources to get you started:</p><ul>\n<li>Sandra\u2019s post <a href="https://blog.deepgram.com/sending-audio-files-to-expressjs-server/">Sending Audio Files to Your Express.js Server</a> can help you better understand express.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction">Express/Node Introduction</a></li>\n</ul></Panel>\n<h2 id="updating-your-project-with-deepgram">Updating Your Project with Deepgram</h2>\n<p>Now we\u2019re ready to upgrade your freeCodeCamp Quote Generator. We\u2019ll start in the <code is:raw>server.js</code> file. We need to require the packages we just installed to ensure we can use them. At the top of your file add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;node-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Next, we need to connect our <code is:raw>app.js</code> file to our <code is:raw>server.js</code> file. Below the previous code, add the following lines of code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>The first line in that block allows us to serve static files to our Express app. Because we have \u2018public\u2019 in there, our app has access to the files in our public folder. If you want a more thorough explanation, you can check out <a href="https://masteringjs.io/tutorials/express/app-use-static">this Mastering JS tutorial</a>.</p>\n<p>The second line creates a new instance of Deepgram using our API key that we added to our <code is:raw>.env</code> file. Because we\u2019ve added the dotenv packages, we have access to that key when we add the <code is:raw>process.env</code> before the variable name for our API key.</p>\n<h3 id="accessing-the-quote---logic">Accessing the Quote - Logic</h3>\n<p>Next up, we will add the logic that allows us to access the gist of movie quote data. This is where we\u2019ll also be using <a href="https://github.com/node-fetch/node-fetch">node-fetch</a>, which we\u2019ve named \u201Cfetch\u201D in this project.</p>\n<p>We\u2019re going to put all of our logic in an async function. With async functions, we know we\u2019ll have to wait for a task, but our application can continue to be responsive while waiting. This is a fairly complex concept, so don\u2019t worry if you don\u2019t fully grasp it right now. You can check out <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing">mdn\u2019s Introduction to asynchronous JavaScript</a> for more information.</p>\n<p>Let\u2019s start with this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">() {}</span></span></code></pre>\n<p>Within this space, we\u2019re going to add:</p>\n<ul>\n<li>A function that allows us to randomize our quotes</li>\n<li>Logic to get the wav file and the speaker (although we\u2019re referring to them as \u201Cauthor\u201D in this post).</li>\n</ul>\n<p>Just after the first curly brace, we\u2019re going to add our random function with this code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">number</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> (number </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now, we want to make sure that we get a random file and the author associated with that quote. To do that, add the following code underneath our getTranscript function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">randomNumber</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">6</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;https://gist.githubusercontent.com/BekahHW/394d81b484f264b0c8b23c0e177f8588/raw/df7bba8dde4f96487dd843977a07991aba4ca511/quotes.json&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> response.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[randomNumber].quote</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">author</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[randomNumber].author</span></span></code></pre>\n<p>Our randomNumber variable ensures that the file we\u2019re passing to Deepgram (coming up next!) is associated with the author of that quote.</p>\n<p>With <code is:raw>response</code> and <code is:raw>data</code>, we\u2019re accessing the gist of movie quotes.</p>\n<p>If we console.log(data), we\u2019ll get this plus the rest of the array of objects:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826505/blog/2022/03/freecodecamp-quote-generator-upgrade/json.png" alt="image of an array of objects with wav files and authors"></p>\n<p>When we console.log(author), we\u2019ll see one of those author\u2019s names as we\u2019re accessing one item in the array.</p>\n<p>We\u2019ve made huge progress! Now we\u2019re ready to use Deepgram to upgrade this freeCodeCamp project!</p>\n<p>Below the code we\u2019ve just written, but within the getTranscript function, we\u2019re going to add what we need to get the transcript from the wav file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">quoteTranscription</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: audioUrl }, { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en-US&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcription</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcription.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  author: author,</span></span>\n<span class="line"><span style="color: #C9D1D9">  transcription: quoteTranscription,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>A couple of things with that code block:\nWe\u2019re using pre-recorded audio, which you can find more about in our <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/pre-recorded-transcription/">Deepgram docs on pre-recorded transcription</a>.</p>\n<ol>\n<li>You need to pass the link to the audio file. In this case, we do it with <code is:raw>url: audioUrl</code>.\nWe get access to the transcription of the wav file with <code is:raw>transcription.results.channels[0].alternatives[0]</code></li>\n<li>We\u2019re returning both the author and the transcription because we need to send them to our app.js file to render in our quote-box.</li>\n</ol>\n<p>Now we\u2019re ready to connect all that work in <code is:raw>server.js</code> to <code is:raw>app.js</code>. After that code and outside of the function, add this code block:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcriptObj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(transcriptObj))</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(err)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This is where we\u2019re using express. The /express path should lead you to JSON data that we\u2019re accessing. We\u2019re calling getTranscript, so we have access to the author and transcription values. To send that to our <code is:raw>app.js</code> file, we use res.send. Right now, we\u2019re not sending it there because we haven\u2019t connected those paths. Before we do that, let\u2019s make sure express is listening to the server. Add this code to the very bottom of the file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Example app listening on port 3000`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Now we\u2019re ready to connect our work. We\u2019re almost done!</p>\n<h4 id="appjs"><code is:raw>app.js</code></h4>\n<p>In our <code is:raw>app.js</code> file, we have an event listener attached to our new quote button. Previously when we clicked this, it would fetch from the quote gist. We\u2019re going to replace that with this code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#text&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.transcription.transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#author&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.author</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<p>We\u2019re connecting the path in <code is:raw>server.js</code> when we fetch(`/transcribe\u2019). Then we\u2019re taking that transcript object, getting it in a usable format, and then sending the text and author divs according to that data.</p>\n<p>We should be ready!</p>\n<p>Go to your terminal and run <code is:raw>node server.js</code>. You should be able to navigate to <code is:raw>http://localhost:3000/</code> and see your app. Go ahead and click the New Quote button and see the magic happen.</p>\n<p>Whew. That\u2019s a pretty cool update. If you want to check out the code in its entirety, you can navigate to our <a href="https://github.com/deepgram-devs/freeCodeCamp-Quote-Generator">freeCodeCamp-Quote-Generator repo</a> or to get you up and running faster, check out our <a href="https://stackblitz.com/edit/fcc-dg0">freeCodeCamp Quote Gen with Deepgram Stackblitz</a>. When you open this project it will automatically fork it for you. You just need to add your own <code is:raw>.env</code>. Then, in the terminal, run <code is:raw>node server.js</code> and see it live!</p>\n<p>This is a project I hope to build on. We\u2019ve been doing Twitter Spaces at Deepgram, and once we have some edited, I\u2019d love to use the quote generator to show random quotes and allow you to select the full recording if you\u2019re interested in the quote. Be on the lookout :eyes: for that future post.</p>\n<p>If you have any questions or want a walkthrough of the how to build a freeCodeCamp project with the Deepgram update, hit us up on <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> on Twitter.</p>' };
const frontmatter = { "title": "Upgrade your freeCodeCamp Project", "description": "As early-career developers looking for your first or second job, upgrading your projects can help you to stand out from other candidates and grow as a new developer. To find out how to upgrade a common project, read more here.", "date": "2022-03-31T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1648719341/blog/2022/03/freecodecamp-quote-generator-upgrade/fcc-cover.jpg", "authors": ["bekah-hawrot-weigel"], "category": "tutorial", "tags": ["javascript", "beginner", "freecodecamp"], "seo": { "title": "Upgrade your freeCodeCamp Project", "description": "As early-career developers looking for your first or second job, upgrading your projects can help you to stand out from other candidates and grow as a new developer. To find out how to upgrade a common project, read more here." }, "shorturls": { "share": "https://dpgr.am/521c26c", "twitter": "https://dpgr.am/ab44d6f", "linkedin": "https://dpgr.am/fc5dec0", "reddit": "https://dpgr.am/3f6054d", "facebook": "https://dpgr.am/c47de40" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454028/blog/freecodecamp-quote-generator-upgrade/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "prepping-our-project", "text": "Prepping our Project" }, { "depth": 3, "slug": "where-we-started", "text": "Where we started" }, { "depth": 3, "slug": "overview", "text": "Overview" }, { "depth": 4, "slug": "file-structure", "text": "File Structure" }, { "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 4, "slug": "package-breakdown", "text": "Package breakdown" }, { "depth": 2, "slug": "updating-your-project-with-deepgram", "text": "Updating Your Project with Deepgram" }, { "depth": 3, "slug": "accessing-the-quote---logic", "text": "Accessing the Quote - Logic" }, { "depth": 4, "slug": "appjs", "text": "app.js" }], "source": "\nI spend a lot of time with folks learning to code and early-career developers. One of the things I\u2019ve noticed is that it\u2019s increasingly hard to find your first job. One of the biggest comments I\u2019ve heard from hiring managers is that so many applicants for junior positions are showcasing the same projects. As I was brainstorming some use cases for Deepgram, I wanted to work on something that could help out these folks looking for their first development job. That\u2019s how I decided to upgrade one of the [freeCodeCamp Front End Development Libraries Projects](https://www.freecodecamp.org/learn/front-end-development-libraries/#front-end-development-libraries-projects). In this post, we\u2019re going to take the [Quote Generator Project](https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine) up a notch and use [Deepgram\u2019s Node SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/) to fetch a quote.\n\n## Prepping our Project\n\n<Panel type=\"info\" title=\"freeCodeCamp Side Note\">\n\nFor this tutorial, we\u2019re assuming that you have completed the project. If you haven\u2019t, you can find the <a href=\"https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine\">directions for the quote generator here</a> or take a look at <a href=\"https://codepen.io/freeCodeCamp/pen/qRZeGZ\">freeCodeCamp\u2019s demo project</a> to get you started.\n\n</Panel>\n\n*   Download Node.js if you haven\u2019t already - get it [here](https://nodejs.org/en/)\n*   Create a Deepgram API Key with an admin or owner role - [get it here](https://console.deepgram.com/signup?jump=keys)\n*   Create a file called .env and add `DG_KEY='your-api-key'`.\n\n<Panel type=\"info\" title=\"Notes on API keys\">\n\n*   Your API key should be a string of letters and numbers that you wrap in single quotes.\n*   .env files contain sensitive values. We\u2019ll use a .gitignore file to ensure we don\u2019t expose our information, but if you\u2019re sharing your code with others, don\u2019t include your sensitive information.\n\n</Panel>\n\n### Where we started\n\nBefore we get into upgrading our freeCodeCamp projects, let\u2019s take a look at the core functionality of our quote generator. When we open our project, there\u2019s a quote to start. When we click the New Quote button, our quote machine fetches a new quote and author and displays that in the quote box. When we click the Twitter button, it takes the quote we see on the screen and creates a new tweet.\n\n![gif of clicking the new quote button](https://res.cloudinary.com/deepgram/image/upload/v1648826507/blog/2022/03/freecodecamp-quote-generator-upgrade/new-quote.gif)\n\nHere\u2019s the basic functionality that allows us to create the new quote:\n\n```js\nfunction getRandomQuote() {\n  fetch(\n    'https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n  )\n    .then((response) => response.json())\n    .then((data) => {\n      document.querySelector('#text').innerText =\n        data.quotes[`${random(99)}`].quote\n      document.querySelector('#author').innerText =\n        data.quotes[`${random(99)}`].author\n    })\n}\n\nnewQuoteButton.addEventListener('click', () => {\n  const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)}, 0.4)`\n  document.body.style.backgroundColor = rndCol\n\n  getRandomQuote()\n})\n```\n\nAs you can see, the project fetches quotes from a JSON file of quotes and authors on GitHub. You can find the one I used [here](https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json).\n\nAs you work on this project, it\u2019s useful to have some understanding of APIs and JSON.\n\n<Panel type=\"info\" title=\"Resource Break!\">\n\n<li><a href=\"https://blog.deepgram.com/getting-started-with-apis/\">Getting Started with APIs</a>  by <a href=\"https://blog.deepgram.com/authors/kevin-lewis/\">Kevin Lewis</a></li>\n<li><a href=\"https://blog.deepgram.com/getting-started-with-json/\">Getting Started with JSON</a>  by <a href=\"https://blog.deepgram.com/authors/sandra-rodgers/\">Sandra Rodgers</a></li>\n</Panel>\n\n### Overview\n\nThe way this looks isn\u2019t going to change, *but* how we\u2019re getting the quotes will. Instead of fetching from the gist, we will fetch a random movie from [this gist](https://gist.github.com/BekahHW/394d81b484f264b0c8b23c0e177f8588), and then transcribe that using Deepgram\u2019s Node SDK.\n\nRather than using CodePen, I will be working in a public repository. We\u2019ll need a package.json file for this project to install some packages to help us get the data we need.\n\n#### File Structure\n\nWe\u2019ll be using a public folder for all the files that impact the front end of our project. We\u2019ll only be actively working on a total of two files, with the assumption that you\u2019ll keep your styles the same.\n\n*   `app.js` will contain our front-end logic with our click events, which will be in the public folder. This is the file that controls rendering the quote and author on the screen.\n*   `server.js` is where we\u2019ll work with our server-side logic. We\u2019ll use `node-fetch`--more on this later\u2013to get the data we need from the JSON of movie quotes. We\u2019ll also use Deepgram\u2019s Node SDK to transcribe the quotes and get them on the screen.\n\nHere\u2019s what our file structure is going to look like:\n\n![image of the file structure](https://res.cloudinary.com/deepgram/image/upload/v1648826506/blog/2022/03/freecodecamp-quote-generator-upgrade/folder.png)\n\n## Getting Started\n\nOnce you have your project in a repository, cd into your project from your terminal and follow the following steps:\n\n```bash\nnpm i @deepgram/sdk dotenv express\nnpm i -g gitignore && gitignore node\n```\n\nThese are all the packages we\u2019ll need to get us up and running in this project.\n\n#### Package breakdown\n\n*   [dotenv](https://github.com/motdotla/dotenv#readme) - \u201CDotenv is a zero-dependency module that loads environment variables from a .env file into process.env\u201D\n*   [gitignore node and gitignore node](https://github.com/msfeldstein/gitignore) - \u201C\u200B\u200BAutomatically fetch github's excellent .gitignore files for any of your new projects\u201D\n*   [express](https://expressjs.com/) - Node framework that connects your server-side to your client-side.\n\n<Panel type=\"info\" title=\"Another Resource Break!\">\n\nIf you\u2019re getting started with learning express like I was, here are a couple of resources to get you started:\n\n*   Sandra\u2019s post [Sending Audio Files to Your Express.js Server](https://blog.deepgram.com/sending-audio-files-to-expressjs-server/) can help you better understand express.\n*   [Express/Node Introduction](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction)\n\n</Panel>\n\n## Updating Your Project with Deepgram\n\nNow we\u2019re ready to upgrade your freeCodeCamp Quote Generator. We\u2019ll start in the `server.js` file. We need to require the packages we just installed to ensure we can use them. At the top of your file add the following:\n\n```js\nrequire('dotenv').config()\nconst express = require('express')\nconst fetch = require('node-fetch')\nconst app = express()\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nNext, we need to connect our `app.js` file to our `server.js` file. Below the previous code, add the following lines of code:\n\n```js\napp.use(express.static('public'))\nconst deepgram = new Deepgram(process.env.DG_KEY)\n```\n\nThe first line in that block allows us to serve static files to our Express app. Because we have \u2018public\u2019 in there, our app has access to the files in our public folder. If you want a more thorough explanation, you can check out [this Mastering JS tutorial](https://masteringjs.io/tutorials/express/app-use-static).\n\nThe second line creates a new instance of Deepgram using our API key that we added to our `.env` file. Because we\u2019ve added the dotenv packages, we have access to that key when we add the `process.env` before the variable name for our API key.\n\n### Accessing the Quote - Logic\n\nNext up, we will add the logic that allows us to access the gist of movie quote data. This is where we\u2019ll also be using [node-fetch](https://github.com/node-fetch/node-fetch), which we\u2019ve named \u201Cfetch\u201D in this project.\n\nWe\u2019re going to put all of our logic in an async function. With async functions, we know we\u2019ll have to wait for a task, but our application can continue to be responsive while waiting. This is a fairly complex concept, so don\u2019t worry if you don\u2019t fully grasp it right now. You can check out [mdn\u2019s Introduction to asynchronous JavaScript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing) for more information.\n\nLet\u2019s start with this:\n\n```js\nasync function getTranscript() {}\n```\n\nWithin this space, we\u2019re going to add:\n\n*   A function that allows us to randomize our quotes\n*   Logic to get the wav file and the speaker (although we\u2019re referring to them as \u201Cauthor\u201D in this post).\n\nJust after the first curly brace, we\u2019re going to add our random function with this code:\n\n```js\nasync function getTranscript() {\n  function random(number) {\n    return Math.floor(Math.random() * (number + 1))\n  }\n}\n```\n\nNow, we want to make sure that we get a random file and the author associated with that quote. To do that, add the following code underneath our getTranscript function:\n\n```js\nconst randomNumber = random(6)\nconst response = await fetch(\n  'https://gist.githubusercontent.com/BekahHW/394d81b484f264b0c8b23c0e177f8588/raw/df7bba8dde4f96487dd843977a07991aba4ca511/quotes.json'\n)\n\nconst data = await response.json()\nconst audioUrl = data[randomNumber].quote\nconst author = data[randomNumber].author\n```\n\nOur randomNumber variable ensures that the file we\u2019re passing to Deepgram (coming up next!) is associated with the author of that quote.\n\nWith `response` and `data`, we\u2019re accessing the gist of movie quotes.\n\nIf we console.log(data), we\u2019ll get this plus the rest of the array of objects:\n\n![image of an array of objects with wav files and authors](https://res.cloudinary.com/deepgram/image/upload/v1648826505/blog/2022/03/freecodecamp-quote-generator-upgrade/json.png)\n\nWhen we console.log(author), we\u2019ll see one of those author\u2019s names as we\u2019re accessing one item in the array.\n\nWe\u2019ve made huge progress! Now we\u2019re ready to use Deepgram to upgrade this freeCodeCamp project!\n\nBelow the code we\u2019ve just written, but within the getTranscript function, we\u2019re going to add what we need to get the transcript from the wav file:\n\n```js\nconst quoteTranscription = await deepgram.transcription\n  .preRecorded({ url: audioUrl }, { punctuate: true, language: 'en-US' })\n  .then((transcription) => transcription.results.channels[0].alternatives[0])\n\nreturn {\n  author: author,\n  transcription: quoteTranscription,\n}\n```\n\nA couple of things with that code block:\nWe\u2019re using pre-recorded audio, which you can find more about in our [Deepgram docs on pre-recorded transcription](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/pre-recorded-transcription/).\n\n1.  You need to pass the link to the audio file. In this case, we do it with `url: audioUrl`.\n    We get access to the transcription of the wav file with `transcription.results.channels[0].alternatives[0]`\n2.  We\u2019re returning both the author and the transcription because we need to send them to our app.js file to render in our quote-box.\n\nNow we\u2019re ready to connect all that work in `server.js` to `app.js`. After that code and outside of the function, add this code block:\n\n```js\napp.get('/transcribe', (req, res) => {\n  getTranscript()\n    .then((transcriptObj) => res.send(transcriptObj))\n    .catch((err) => {\n      console.log(err)\n    })\n})\n```\n\nThis is where we\u2019re using express. The /express path should lead you to JSON data that we\u2019re accessing. We\u2019re calling getTranscript, so we have access to the author and transcription values. To send that to our `app.js` file, we use res.send. Right now, we\u2019re not sending it there because we haven\u2019t connected those paths. Before we do that, let\u2019s make sure express is listening to the server. Add this code to the very bottom of the file:\n\n```js\napp.listen(3000, () => {\n  console.log(`Example app listening on port 3000`)\n})\n```\n\nNow we\u2019re ready to connect our work. We\u2019re almost done!\n\n#### `app.js`\n\nIn our `app.js` file, we have an event listener attached to our new quote button. Previously when we clicked this, it would fetch from the quote gist. We\u2019re going to replace that with this code:\n\n```js\nfetch('/transcribe')\n  .then((r) => r.json())\n  .then((res) => {\n    document.querySelector('#text').innerText = res.transcription.transcript\n    document.querySelector('#author').innerText = res.author\n  })\n```\n\nWe\u2019re connecting the path in `server.js` when we fetch(\\`/transcribe\u2019). Then we\u2019re taking that transcript object, getting it in a usable format, and then sending the text and author divs according to that data.\n\nWe should be ready!\n\nGo to your terminal and run `node server.js`. You should be able to navigate to `http://localhost:3000/` and see your app. Go ahead and click the New Quote button and see the magic happen.\n\nWhew. That\u2019s a pretty cool update. If you want to check out the code in its entirety, you can navigate to our [freeCodeCamp-Quote-Generator repo](https://github.com/deepgram-devs/freeCodeCamp-Quote-Generator) or to get you up and running faster, check out our [freeCodeCamp Quote Gen with Deepgram Stackblitz](https://stackblitz.com/edit/fcc-dg0). When you open this project it will automatically fork it for you. You just need to add your own `.env`. Then, in the terminal, run `node server.js` and see it live!\n\nThis is a project I hope to build on. We\u2019ve been doing Twitter Spaces at Deepgram, and once we have some edited, I\u2019d love to use the quote generator to show random quotes and allow you to select the full recording if you\u2019re interested in the quote. Be on the lookout :eyes: for that future post.\n\nIf you have any questions or want a walkthrough of the how to build a freeCodeCamp project with the Deepgram update, hit us up on [@DeepgramDevs](https://twitter.com/DeepgramDevs) on Twitter.\n\n        ", "html": '<p>I spend a lot of time with folks learning to code and early-career developers. One of the things I\u2019ve noticed is that it\u2019s increasingly hard to find your first job. One of the biggest comments I\u2019ve heard from hiring managers is that so many applicants for junior positions are showcasing the same projects. As I was brainstorming some use cases for Deepgram, I wanted to work on something that could help out these folks looking for their first development job. That\u2019s how I decided to upgrade one of the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/#front-end-development-libraries-projects">freeCodeCamp Front End Development Libraries Projects</a>. In this post, we\u2019re going to take the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine">Quote Generator Project</a> up a notch and use <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram\u2019s Node SDK</a> to fetch a quote.</p>\n<h2 id="prepping-our-project">Prepping our Project</h2>\n<Panel type="info" title="freeCodeCamp Side Note"><p>For this tutorial, we\u2019re assuming that you have completed the project. If you haven\u2019t, you can find the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine">directions for the quote generator here</a> or take a look at <a href="https://codepen.io/freeCodeCamp/pen/qRZeGZ">freeCodeCamp\u2019s demo project</a> to get you started.</p></Panel>\n<ul>\n<li>Download Node.js if you haven\u2019t already - get it <a href="https://nodejs.org/en/">here</a></li>\n<li>Create a Deepgram API Key with an admin or owner role - <a href="https://console.deepgram.com/signup?jump=keys">get it here</a></li>\n<li>Create a file called .env and add <code is:raw>DG_KEY=\'your-api-key\'</code>.</li>\n</ul>\n<Panel type="info" title="Notes on API keys"><ul>\n<li>Your API key should be a string of letters and numbers that you wrap in single quotes.</li>\n<li>.env files contain sensitive values. We\u2019ll use a .gitignore file to ensure we don\u2019t expose our information, but if you\u2019re sharing your code with others, don\u2019t include your sensitive information.</li>\n</ul></Panel>\n<h3 id="where-we-started">Where we started</h3>\n<p>Before we get into upgrading our freeCodeCamp projects, let\u2019s take a look at the core functionality of our quote generator. When we open our project, there\u2019s a quote to start. When we click the New Quote button, our quote machine fetches a new quote and author and displays that in the quote box. When we click the Twitter button, it takes the quote we see on the screen and creates a new tweet.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826507/blog/2022/03/freecodecamp-quote-generator-upgrade/new-quote.gif" alt="gif of clicking the new quote button"></p>\n<p>Here\u2019s the basic functionality that allows us to create the new quote:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomQuote</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> response.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#text&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">        data.quotes[</span><span style="color: #A5D6FF">`${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">99</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">].quote</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#author&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">        data.quotes[</span><span style="color: #A5D6FF">`${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">99</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">].author</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">newQuoteButton.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rndCol</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`rgb(${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, ${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, ${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, 0.4)`</span></span>\n<span class="line"><span style="color: #C9D1D9">  document.body.style.backgroundColor </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> rndCol</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getRandomQuote</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>As you can see, the project fetches quotes from a JSON file of quotes and authors on GitHub. You can find the one I used <a href="https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json">here</a>.</p>\n<p>As you work on this project, it\u2019s useful to have some understanding of APIs and JSON.</p>\n<Panel type="info" title="Resource Break!"><li><a href="https://blog.deepgram.com/getting-started-with-apis/">Getting Started with APIs</a>  by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n<li><a href="https://blog.deepgram.com/getting-started-with-json/">Getting Started with JSON</a>  by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li></Panel>\n<h3 id="overview">Overview</h3>\n<p>The way this looks isn\u2019t going to change, <em>but</em> how we\u2019re getting the quotes will. Instead of fetching from the gist, we will fetch a random movie from <a href="https://gist.github.com/BekahHW/394d81b484f264b0c8b23c0e177f8588">this gist</a>, and then transcribe that using Deepgram\u2019s Node SDK.</p>\n<p>Rather than using CodePen, I will be working in a public repository. We\u2019ll need a package.json file for this project to install some packages to help us get the data we need.</p>\n<h4 id="file-structure">File Structure</h4>\n<p>We\u2019ll be using a public folder for all the files that impact the front end of our project. We\u2019ll only be actively working on a total of two files, with the assumption that you\u2019ll keep your styles the same.</p>\n<ul>\n<li><code is:raw>app.js</code> will contain our front-end logic with our click events, which will be in the public folder. This is the file that controls rendering the quote and author on the screen.</li>\n<li><code is:raw>server.js</code> is where we\u2019ll work with our server-side logic. We\u2019ll use <code is:raw>node-fetch</code>\u2014more on this later\u2013to get the data we need from the JSON of movie quotes. We\u2019ll also use Deepgram\u2019s Node SDK to transcribe the quotes and get them on the screen.</li>\n</ul>\n<p>Here\u2019s what our file structure is going to look like:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826506/blog/2022/03/freecodecamp-quote-generator-upgrade/folder.png" alt="image of the file structure"></p>\n<h2 id="getting-started">Getting Started</h2>\n<p>Once you have your project in a repository, cd into your project from your terminal and follow the following steps:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm i @deepgram/sdk dotenv express</span></span>\n<span class="line"><span style="color: #C9D1D9">npm i -g gitignore </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> gitignore node</span></span></code></pre>\n<p>These are all the packages we\u2019ll need to get us up and running in this project.</p>\n<h4 id="package-breakdown">Package breakdown</h4>\n<ul>\n<li><a href="https://github.com/motdotla/dotenv#readme">dotenv</a> - \u201CDotenv is a zero-dependency module that loads environment variables from a .env file into process.env\u201D</li>\n<li><a href="https://github.com/msfeldstein/gitignore">gitignore node and gitignore node</a> - \u201C\u200B\u200BAutomatically fetch github\u2019s excellent .gitignore files for any of your new projects\u201D</li>\n<li><a href="https://expressjs.com/">express</a> - Node framework that connects your server-side to your client-side.</li>\n</ul>\n<Panel type="info" title="Another Resource Break!"><p>If you\u2019re getting started with learning express like I was, here are a couple of resources to get you started:</p><ul>\n<li>Sandra\u2019s post <a href="https://blog.deepgram.com/sending-audio-files-to-expressjs-server/">Sending Audio Files to Your Express.js Server</a> can help you better understand express.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction">Express/Node Introduction</a></li>\n</ul></Panel>\n<h2 id="updating-your-project-with-deepgram">Updating Your Project with Deepgram</h2>\n<p>Now we\u2019re ready to upgrade your freeCodeCamp Quote Generator. We\u2019ll start in the <code is:raw>server.js</code> file. We need to require the packages we just installed to ensure we can use them. At the top of your file add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;node-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Next, we need to connect our <code is:raw>app.js</code> file to our <code is:raw>server.js</code> file. Below the previous code, add the following lines of code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>The first line in that block allows us to serve static files to our Express app. Because we have \u2018public\u2019 in there, our app has access to the files in our public folder. If you want a more thorough explanation, you can check out <a href="https://masteringjs.io/tutorials/express/app-use-static">this Mastering JS tutorial</a>.</p>\n<p>The second line creates a new instance of Deepgram using our API key that we added to our <code is:raw>.env</code> file. Because we\u2019ve added the dotenv packages, we have access to that key when we add the <code is:raw>process.env</code> before the variable name for our API key.</p>\n<h3 id="accessing-the-quote---logic">Accessing the Quote - Logic</h3>\n<p>Next up, we will add the logic that allows us to access the gist of movie quote data. This is where we\u2019ll also be using <a href="https://github.com/node-fetch/node-fetch">node-fetch</a>, which we\u2019ve named \u201Cfetch\u201D in this project.</p>\n<p>We\u2019re going to put all of our logic in an async function. With async functions, we know we\u2019ll have to wait for a task, but our application can continue to be responsive while waiting. This is a fairly complex concept, so don\u2019t worry if you don\u2019t fully grasp it right now. You can check out <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing">mdn\u2019s Introduction to asynchronous JavaScript</a> for more information.</p>\n<p>Let\u2019s start with this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">() {}</span></span></code></pre>\n<p>Within this space, we\u2019re going to add:</p>\n<ul>\n<li>A function that allows us to randomize our quotes</li>\n<li>Logic to get the wav file and the speaker (although we\u2019re referring to them as \u201Cauthor\u201D in this post).</li>\n</ul>\n<p>Just after the first curly brace, we\u2019re going to add our random function with this code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">number</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> (number </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now, we want to make sure that we get a random file and the author associated with that quote. To do that, add the following code underneath our getTranscript function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">randomNumber</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">6</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;https://gist.githubusercontent.com/BekahHW/394d81b484f264b0c8b23c0e177f8588/raw/df7bba8dde4f96487dd843977a07991aba4ca511/quotes.json&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> response.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[randomNumber].quote</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">author</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[randomNumber].author</span></span></code></pre>\n<p>Our randomNumber variable ensures that the file we\u2019re passing to Deepgram (coming up next!) is associated with the author of that quote.</p>\n<p>With <code is:raw>response</code> and <code is:raw>data</code>, we\u2019re accessing the gist of movie quotes.</p>\n<p>If we console.log(data), we\u2019ll get this plus the rest of the array of objects:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826505/blog/2022/03/freecodecamp-quote-generator-upgrade/json.png" alt="image of an array of objects with wav files and authors"></p>\n<p>When we console.log(author), we\u2019ll see one of those author\u2019s names as we\u2019re accessing one item in the array.</p>\n<p>We\u2019ve made huge progress! Now we\u2019re ready to use Deepgram to upgrade this freeCodeCamp project!</p>\n<p>Below the code we\u2019ve just written, but within the getTranscript function, we\u2019re going to add what we need to get the transcript from the wav file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">quoteTranscription</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: audioUrl }, { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en-US&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcription</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcription.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  author: author,</span></span>\n<span class="line"><span style="color: #C9D1D9">  transcription: quoteTranscription,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>A couple of things with that code block:\nWe\u2019re using pre-recorded audio, which you can find more about in our <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/pre-recorded-transcription/">Deepgram docs on pre-recorded transcription</a>.</p>\n<ol>\n<li>You need to pass the link to the audio file. In this case, we do it with <code is:raw>url: audioUrl</code>.\nWe get access to the transcription of the wav file with <code is:raw>transcription.results.channels[0].alternatives[0]</code></li>\n<li>We\u2019re returning both the author and the transcription because we need to send them to our app.js file to render in our quote-box.</li>\n</ol>\n<p>Now we\u2019re ready to connect all that work in <code is:raw>server.js</code> to <code is:raw>app.js</code>. After that code and outside of the function, add this code block:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcriptObj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(transcriptObj))</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(err)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This is where we\u2019re using express. The /express path should lead you to JSON data that we\u2019re accessing. We\u2019re calling getTranscript, so we have access to the author and transcription values. To send that to our <code is:raw>app.js</code> file, we use res.send. Right now, we\u2019re not sending it there because we haven\u2019t connected those paths. Before we do that, let\u2019s make sure express is listening to the server. Add this code to the very bottom of the file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Example app listening on port 3000`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Now we\u2019re ready to connect our work. We\u2019re almost done!</p>\n<h4 id="appjs"><code is:raw>app.js</code></h4>\n<p>In our <code is:raw>app.js</code> file, we have an event listener attached to our new quote button. Previously when we clicked this, it would fetch from the quote gist. We\u2019re going to replace that with this code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#text&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.transcription.transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#author&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.author</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<p>We\u2019re connecting the path in <code is:raw>server.js</code> when we fetch(`/transcribe\u2019). Then we\u2019re taking that transcript object, getting it in a usable format, and then sending the text and author divs according to that data.</p>\n<p>We should be ready!</p>\n<p>Go to your terminal and run <code is:raw>node server.js</code>. You should be able to navigate to <code is:raw>http://localhost:3000/</code> and see your app. Go ahead and click the New Quote button and see the magic happen.</p>\n<p>Whew. That\u2019s a pretty cool update. If you want to check out the code in its entirety, you can navigate to our <a href="https://github.com/deepgram-devs/freeCodeCamp-Quote-Generator">freeCodeCamp-Quote-Generator repo</a> or to get you up and running faster, check out our <a href="https://stackblitz.com/edit/fcc-dg0">freeCodeCamp Quote Gen with Deepgram Stackblitz</a>. When you open this project it will automatically fork it for you. You just need to add your own <code is:raw>.env</code>. Then, in the terminal, run <code is:raw>node server.js</code> and see it live!</p>\n<p>This is a project I hope to build on. We\u2019ve been doing Twitter Spaces at Deepgram, and once we have some edited, I\u2019d love to use the quote generator to show random quotes and allow you to select the full recording if you\u2019re interested in the quote. Be on the lookout :eyes: for that future post.</p>\n<p>If you have any questions or want a walkthrough of the how to build a freeCodeCamp project with the Deepgram update, hit us up on <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> on Twitter.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/freecodecamp-quote-generator-upgrade/index.md" };
function rawContent() {
  return "\nI spend a lot of time with folks learning to code and early-career developers. One of the things I\u2019ve noticed is that it\u2019s increasingly hard to find your first job. One of the biggest comments I\u2019ve heard from hiring managers is that so many applicants for junior positions are showcasing the same projects. As I was brainstorming some use cases for Deepgram, I wanted to work on something that could help out these folks looking for their first development job. That\u2019s how I decided to upgrade one of the [freeCodeCamp Front End Development Libraries Projects](https://www.freecodecamp.org/learn/front-end-development-libraries/#front-end-development-libraries-projects). In this post, we\u2019re going to take the [Quote Generator Project](https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine) up a notch and use [Deepgram\u2019s Node SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/) to fetch a quote.\n\n## Prepping our Project\n\n<Panel type=\"info\" title=\"freeCodeCamp Side Note\">\n\nFor this tutorial, we\u2019re assuming that you have completed the project. If you haven\u2019t, you can find the <a href=\"https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine\">directions for the quote generator here</a> or take a look at <a href=\"https://codepen.io/freeCodeCamp/pen/qRZeGZ\">freeCodeCamp\u2019s demo project</a> to get you started.\n\n</Panel>\n\n*   Download Node.js if you haven\u2019t already - get it [here](https://nodejs.org/en/)\n*   Create a Deepgram API Key with an admin or owner role - [get it here](https://console.deepgram.com/signup?jump=keys)\n*   Create a file called .env and add `DG_KEY='your-api-key'`.\n\n<Panel type=\"info\" title=\"Notes on API keys\">\n\n*   Your API key should be a string of letters and numbers that you wrap in single quotes.\n*   .env files contain sensitive values. We\u2019ll use a .gitignore file to ensure we don\u2019t expose our information, but if you\u2019re sharing your code with others, don\u2019t include your sensitive information.\n\n</Panel>\n\n### Where we started\n\nBefore we get into upgrading our freeCodeCamp projects, let\u2019s take a look at the core functionality of our quote generator. When we open our project, there\u2019s a quote to start. When we click the New Quote button, our quote machine fetches a new quote and author and displays that in the quote box. When we click the Twitter button, it takes the quote we see on the screen and creates a new tweet.\n\n![gif of clicking the new quote button](https://res.cloudinary.com/deepgram/image/upload/v1648826507/blog/2022/03/freecodecamp-quote-generator-upgrade/new-quote.gif)\n\nHere\u2019s the basic functionality that allows us to create the new quote:\n\n```js\nfunction getRandomQuote() {\n  fetch(\n    'https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n  )\n    .then((response) => response.json())\n    .then((data) => {\n      document.querySelector('#text').innerText =\n        data.quotes[`${random(99)}`].quote\n      document.querySelector('#author').innerText =\n        data.quotes[`${random(99)}`].author\n    })\n}\n\nnewQuoteButton.addEventListener('click', () => {\n  const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)}, 0.4)`\n  document.body.style.backgroundColor = rndCol\n\n  getRandomQuote()\n})\n```\n\nAs you can see, the project fetches quotes from a JSON file of quotes and authors on GitHub. You can find the one I used [here](https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json).\n\nAs you work on this project, it\u2019s useful to have some understanding of APIs and JSON.\n\n<Panel type=\"info\" title=\"Resource Break!\">\n\n<li><a href=\"https://blog.deepgram.com/getting-started-with-apis/\">Getting Started with APIs</a>  by <a href=\"https://blog.deepgram.com/authors/kevin-lewis/\">Kevin Lewis</a></li>\n<li><a href=\"https://blog.deepgram.com/getting-started-with-json/\">Getting Started with JSON</a>  by <a href=\"https://blog.deepgram.com/authors/sandra-rodgers/\">Sandra Rodgers</a></li>\n</Panel>\n\n### Overview\n\nThe way this looks isn\u2019t going to change, *but* how we\u2019re getting the quotes will. Instead of fetching from the gist, we will fetch a random movie from [this gist](https://gist.github.com/BekahHW/394d81b484f264b0c8b23c0e177f8588), and then transcribe that using Deepgram\u2019s Node SDK.\n\nRather than using CodePen, I will be working in a public repository. We\u2019ll need a package.json file for this project to install some packages to help us get the data we need.\n\n#### File Structure\n\nWe\u2019ll be using a public folder for all the files that impact the front end of our project. We\u2019ll only be actively working on a total of two files, with the assumption that you\u2019ll keep your styles the same.\n\n*   `app.js` will contain our front-end logic with our click events, which will be in the public folder. This is the file that controls rendering the quote and author on the screen.\n*   `server.js` is where we\u2019ll work with our server-side logic. We\u2019ll use `node-fetch`--more on this later\u2013to get the data we need from the JSON of movie quotes. We\u2019ll also use Deepgram\u2019s Node SDK to transcribe the quotes and get them on the screen.\n\nHere\u2019s what our file structure is going to look like:\n\n![image of the file structure](https://res.cloudinary.com/deepgram/image/upload/v1648826506/blog/2022/03/freecodecamp-quote-generator-upgrade/folder.png)\n\n## Getting Started\n\nOnce you have your project in a repository, cd into your project from your terminal and follow the following steps:\n\n```bash\nnpm i @deepgram/sdk dotenv express\nnpm i -g gitignore && gitignore node\n```\n\nThese are all the packages we\u2019ll need to get us up and running in this project.\n\n#### Package breakdown\n\n*   [dotenv](https://github.com/motdotla/dotenv#readme) - \u201CDotenv is a zero-dependency module that loads environment variables from a .env file into process.env\u201D\n*   [gitignore node and gitignore node](https://github.com/msfeldstein/gitignore) - \u201C\u200B\u200BAutomatically fetch github's excellent .gitignore files for any of your new projects\u201D\n*   [express](https://expressjs.com/) - Node framework that connects your server-side to your client-side.\n\n<Panel type=\"info\" title=\"Another Resource Break!\">\n\nIf you\u2019re getting started with learning express like I was, here are a couple of resources to get you started:\n\n*   Sandra\u2019s post [Sending Audio Files to Your Express.js Server](https://blog.deepgram.com/sending-audio-files-to-expressjs-server/) can help you better understand express.\n*   [Express/Node Introduction](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction)\n\n</Panel>\n\n## Updating Your Project with Deepgram\n\nNow we\u2019re ready to upgrade your freeCodeCamp Quote Generator. We\u2019ll start in the `server.js` file. We need to require the packages we just installed to ensure we can use them. At the top of your file add the following:\n\n```js\nrequire('dotenv').config()\nconst express = require('express')\nconst fetch = require('node-fetch')\nconst app = express()\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nNext, we need to connect our `app.js` file to our `server.js` file. Below the previous code, add the following lines of code:\n\n```js\napp.use(express.static('public'))\nconst deepgram = new Deepgram(process.env.DG_KEY)\n```\n\nThe first line in that block allows us to serve static files to our Express app. Because we have \u2018public\u2019 in there, our app has access to the files in our public folder. If you want a more thorough explanation, you can check out [this Mastering JS tutorial](https://masteringjs.io/tutorials/express/app-use-static).\n\nThe second line creates a new instance of Deepgram using our API key that we added to our `.env` file. Because we\u2019ve added the dotenv packages, we have access to that key when we add the `process.env` before the variable name for our API key.\n\n### Accessing the Quote - Logic\n\nNext up, we will add the logic that allows us to access the gist of movie quote data. This is where we\u2019ll also be using [node-fetch](https://github.com/node-fetch/node-fetch), which we\u2019ve named \u201Cfetch\u201D in this project.\n\nWe\u2019re going to put all of our logic in an async function. With async functions, we know we\u2019ll have to wait for a task, but our application can continue to be responsive while waiting. This is a fairly complex concept, so don\u2019t worry if you don\u2019t fully grasp it right now. You can check out [mdn\u2019s Introduction to asynchronous JavaScript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing) for more information.\n\nLet\u2019s start with this:\n\n```js\nasync function getTranscript() {}\n```\n\nWithin this space, we\u2019re going to add:\n\n*   A function that allows us to randomize our quotes\n*   Logic to get the wav file and the speaker (although we\u2019re referring to them as \u201Cauthor\u201D in this post).\n\nJust after the first curly brace, we\u2019re going to add our random function with this code:\n\n```js\nasync function getTranscript() {\n  function random(number) {\n    return Math.floor(Math.random() * (number + 1))\n  }\n}\n```\n\nNow, we want to make sure that we get a random file and the author associated with that quote. To do that, add the following code underneath our getTranscript function:\n\n```js\nconst randomNumber = random(6)\nconst response = await fetch(\n  'https://gist.githubusercontent.com/BekahHW/394d81b484f264b0c8b23c0e177f8588/raw/df7bba8dde4f96487dd843977a07991aba4ca511/quotes.json'\n)\n\nconst data = await response.json()\nconst audioUrl = data[randomNumber].quote\nconst author = data[randomNumber].author\n```\n\nOur randomNumber variable ensures that the file we\u2019re passing to Deepgram (coming up next!) is associated with the author of that quote.\n\nWith `response` and `data`, we\u2019re accessing the gist of movie quotes.\n\nIf we console.log(data), we\u2019ll get this plus the rest of the array of objects:\n\n![image of an array of objects with wav files and authors](https://res.cloudinary.com/deepgram/image/upload/v1648826505/blog/2022/03/freecodecamp-quote-generator-upgrade/json.png)\n\nWhen we console.log(author), we\u2019ll see one of those author\u2019s names as we\u2019re accessing one item in the array.\n\nWe\u2019ve made huge progress! Now we\u2019re ready to use Deepgram to upgrade this freeCodeCamp project!\n\nBelow the code we\u2019ve just written, but within the getTranscript function, we\u2019re going to add what we need to get the transcript from the wav file:\n\n```js\nconst quoteTranscription = await deepgram.transcription\n  .preRecorded({ url: audioUrl }, { punctuate: true, language: 'en-US' })\n  .then((transcription) => transcription.results.channels[0].alternatives[0])\n\nreturn {\n  author: author,\n  transcription: quoteTranscription,\n}\n```\n\nA couple of things with that code block:\nWe\u2019re using pre-recorded audio, which you can find more about in our [Deepgram docs on pre-recorded transcription](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/pre-recorded-transcription/).\n\n1.  You need to pass the link to the audio file. In this case, we do it with `url: audioUrl`.\n    We get access to the transcription of the wav file with `transcription.results.channels[0].alternatives[0]`\n2.  We\u2019re returning both the author and the transcription because we need to send them to our app.js file to render in our quote-box.\n\nNow we\u2019re ready to connect all that work in `server.js` to `app.js`. After that code and outside of the function, add this code block:\n\n```js\napp.get('/transcribe', (req, res) => {\n  getTranscript()\n    .then((transcriptObj) => res.send(transcriptObj))\n    .catch((err) => {\n      console.log(err)\n    })\n})\n```\n\nThis is where we\u2019re using express. The /express path should lead you to JSON data that we\u2019re accessing. We\u2019re calling getTranscript, so we have access to the author and transcription values. To send that to our `app.js` file, we use res.send. Right now, we\u2019re not sending it there because we haven\u2019t connected those paths. Before we do that, let\u2019s make sure express is listening to the server. Add this code to the very bottom of the file:\n\n```js\napp.listen(3000, () => {\n  console.log(`Example app listening on port 3000`)\n})\n```\n\nNow we\u2019re ready to connect our work. We\u2019re almost done!\n\n#### `app.js`\n\nIn our `app.js` file, we have an event listener attached to our new quote button. Previously when we clicked this, it would fetch from the quote gist. We\u2019re going to replace that with this code:\n\n```js\nfetch('/transcribe')\n  .then((r) => r.json())\n  .then((res) => {\n    document.querySelector('#text').innerText = res.transcription.transcript\n    document.querySelector('#author').innerText = res.author\n  })\n```\n\nWe\u2019re connecting the path in `server.js` when we fetch(\\`/transcribe\u2019). Then we\u2019re taking that transcript object, getting it in a usable format, and then sending the text and author divs according to that data.\n\nWe should be ready!\n\nGo to your terminal and run `node server.js`. You should be able to navigate to `http://localhost:3000/` and see your app. Go ahead and click the New Quote button and see the magic happen.\n\nWhew. That\u2019s a pretty cool update. If you want to check out the code in its entirety, you can navigate to our [freeCodeCamp-Quote-Generator repo](https://github.com/deepgram-devs/freeCodeCamp-Quote-Generator) or to get you up and running faster, check out our [freeCodeCamp Quote Gen with Deepgram Stackblitz](https://stackblitz.com/edit/fcc-dg0). When you open this project it will automatically fork it for you. You just need to add your own `.env`. Then, in the terminal, run `node server.js` and see it live!\n\nThis is a project I hope to build on. We\u2019ve been doing Twitter Spaces at Deepgram, and once we have some edited, I\u2019d love to use the quote generator to show random quotes and allow you to select the full recording if you\u2019re interested in the quote. Be on the lookout :eyes: for that future post.\n\nIf you have any questions or want a walkthrough of the how to build a freeCodeCamp project with the Deepgram update, hit us up on [@DeepgramDevs](https://twitter.com/DeepgramDevs) on Twitter.\n\n        ";
}
function compiledContent() {
  return '<p>I spend a lot of time with folks learning to code and early-career developers. One of the things I\u2019ve noticed is that it\u2019s increasingly hard to find your first job. One of the biggest comments I\u2019ve heard from hiring managers is that so many applicants for junior positions are showcasing the same projects. As I was brainstorming some use cases for Deepgram, I wanted to work on something that could help out these folks looking for their first development job. That\u2019s how I decided to upgrade one of the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/#front-end-development-libraries-projects">freeCodeCamp Front End Development Libraries Projects</a>. In this post, we\u2019re going to take the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine">Quote Generator Project</a> up a notch and use <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram\u2019s Node SDK</a> to fetch a quote.</p>\n<h2 id="prepping-our-project">Prepping our Project</h2>\n<Panel type="info" title="freeCodeCamp Side Note"><p>For this tutorial, we\u2019re assuming that you have completed the project. If you haven\u2019t, you can find the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine">directions for the quote generator here</a> or take a look at <a href="https://codepen.io/freeCodeCamp/pen/qRZeGZ">freeCodeCamp\u2019s demo project</a> to get you started.</p></Panel>\n<ul>\n<li>Download Node.js if you haven\u2019t already - get it <a href="https://nodejs.org/en/">here</a></li>\n<li>Create a Deepgram API Key with an admin or owner role - <a href="https://console.deepgram.com/signup?jump=keys">get it here</a></li>\n<li>Create a file called .env and add <code is:raw>DG_KEY=\'your-api-key\'</code>.</li>\n</ul>\n<Panel type="info" title="Notes on API keys"><ul>\n<li>Your API key should be a string of letters and numbers that you wrap in single quotes.</li>\n<li>.env files contain sensitive values. We\u2019ll use a .gitignore file to ensure we don\u2019t expose our information, but if you\u2019re sharing your code with others, don\u2019t include your sensitive information.</li>\n</ul></Panel>\n<h3 id="where-we-started">Where we started</h3>\n<p>Before we get into upgrading our freeCodeCamp projects, let\u2019s take a look at the core functionality of our quote generator. When we open our project, there\u2019s a quote to start. When we click the New Quote button, our quote machine fetches a new quote and author and displays that in the quote box. When we click the Twitter button, it takes the quote we see on the screen and creates a new tweet.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826507/blog/2022/03/freecodecamp-quote-generator-upgrade/new-quote.gif" alt="gif of clicking the new quote button"></p>\n<p>Here\u2019s the basic functionality that allows us to create the new quote:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomQuote</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> response.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#text&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">        data.quotes[</span><span style="color: #A5D6FF">`${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">99</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">].quote</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#author&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">        data.quotes[</span><span style="color: #A5D6FF">`${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">99</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">].author</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">newQuoteButton.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rndCol</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`rgb(${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, ${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, ${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, 0.4)`</span></span>\n<span class="line"><span style="color: #C9D1D9">  document.body.style.backgroundColor </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> rndCol</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getRandomQuote</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>As you can see, the project fetches quotes from a JSON file of quotes and authors on GitHub. You can find the one I used <a href="https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json">here</a>.</p>\n<p>As you work on this project, it\u2019s useful to have some understanding of APIs and JSON.</p>\n<Panel type="info" title="Resource Break!"><li><a href="https://blog.deepgram.com/getting-started-with-apis/">Getting Started with APIs</a>  by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n<li><a href="https://blog.deepgram.com/getting-started-with-json/">Getting Started with JSON</a>  by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li></Panel>\n<h3 id="overview">Overview</h3>\n<p>The way this looks isn\u2019t going to change, <em>but</em> how we\u2019re getting the quotes will. Instead of fetching from the gist, we will fetch a random movie from <a href="https://gist.github.com/BekahHW/394d81b484f264b0c8b23c0e177f8588">this gist</a>, and then transcribe that using Deepgram\u2019s Node SDK.</p>\n<p>Rather than using CodePen, I will be working in a public repository. We\u2019ll need a package.json file for this project to install some packages to help us get the data we need.</p>\n<h4 id="file-structure">File Structure</h4>\n<p>We\u2019ll be using a public folder for all the files that impact the front end of our project. We\u2019ll only be actively working on a total of two files, with the assumption that you\u2019ll keep your styles the same.</p>\n<ul>\n<li><code is:raw>app.js</code> will contain our front-end logic with our click events, which will be in the public folder. This is the file that controls rendering the quote and author on the screen.</li>\n<li><code is:raw>server.js</code> is where we\u2019ll work with our server-side logic. We\u2019ll use <code is:raw>node-fetch</code>\u2014more on this later\u2013to get the data we need from the JSON of movie quotes. We\u2019ll also use Deepgram\u2019s Node SDK to transcribe the quotes and get them on the screen.</li>\n</ul>\n<p>Here\u2019s what our file structure is going to look like:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826506/blog/2022/03/freecodecamp-quote-generator-upgrade/folder.png" alt="image of the file structure"></p>\n<h2 id="getting-started">Getting Started</h2>\n<p>Once you have your project in a repository, cd into your project from your terminal and follow the following steps:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm i @deepgram/sdk dotenv express</span></span>\n<span class="line"><span style="color: #C9D1D9">npm i -g gitignore </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> gitignore node</span></span></code></pre>\n<p>These are all the packages we\u2019ll need to get us up and running in this project.</p>\n<h4 id="package-breakdown">Package breakdown</h4>\n<ul>\n<li><a href="https://github.com/motdotla/dotenv#readme">dotenv</a> - \u201CDotenv is a zero-dependency module that loads environment variables from a .env file into process.env\u201D</li>\n<li><a href="https://github.com/msfeldstein/gitignore">gitignore node and gitignore node</a> - \u201C\u200B\u200BAutomatically fetch github\u2019s excellent .gitignore files for any of your new projects\u201D</li>\n<li><a href="https://expressjs.com/">express</a> - Node framework that connects your server-side to your client-side.</li>\n</ul>\n<Panel type="info" title="Another Resource Break!"><p>If you\u2019re getting started with learning express like I was, here are a couple of resources to get you started:</p><ul>\n<li>Sandra\u2019s post <a href="https://blog.deepgram.com/sending-audio-files-to-expressjs-server/">Sending Audio Files to Your Express.js Server</a> can help you better understand express.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction">Express/Node Introduction</a></li>\n</ul></Panel>\n<h2 id="updating-your-project-with-deepgram">Updating Your Project with Deepgram</h2>\n<p>Now we\u2019re ready to upgrade your freeCodeCamp Quote Generator. We\u2019ll start in the <code is:raw>server.js</code> file. We need to require the packages we just installed to ensure we can use them. At the top of your file add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;node-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Next, we need to connect our <code is:raw>app.js</code> file to our <code is:raw>server.js</code> file. Below the previous code, add the following lines of code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>The first line in that block allows us to serve static files to our Express app. Because we have \u2018public\u2019 in there, our app has access to the files in our public folder. If you want a more thorough explanation, you can check out <a href="https://masteringjs.io/tutorials/express/app-use-static">this Mastering JS tutorial</a>.</p>\n<p>The second line creates a new instance of Deepgram using our API key that we added to our <code is:raw>.env</code> file. Because we\u2019ve added the dotenv packages, we have access to that key when we add the <code is:raw>process.env</code> before the variable name for our API key.</p>\n<h3 id="accessing-the-quote---logic">Accessing the Quote - Logic</h3>\n<p>Next up, we will add the logic that allows us to access the gist of movie quote data. This is where we\u2019ll also be using <a href="https://github.com/node-fetch/node-fetch">node-fetch</a>, which we\u2019ve named \u201Cfetch\u201D in this project.</p>\n<p>We\u2019re going to put all of our logic in an async function. With async functions, we know we\u2019ll have to wait for a task, but our application can continue to be responsive while waiting. This is a fairly complex concept, so don\u2019t worry if you don\u2019t fully grasp it right now. You can check out <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing">mdn\u2019s Introduction to asynchronous JavaScript</a> for more information.</p>\n<p>Let\u2019s start with this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">() {}</span></span></code></pre>\n<p>Within this space, we\u2019re going to add:</p>\n<ul>\n<li>A function that allows us to randomize our quotes</li>\n<li>Logic to get the wav file and the speaker (although we\u2019re referring to them as \u201Cauthor\u201D in this post).</li>\n</ul>\n<p>Just after the first curly brace, we\u2019re going to add our random function with this code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">number</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> (number </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now, we want to make sure that we get a random file and the author associated with that quote. To do that, add the following code underneath our getTranscript function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">randomNumber</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">6</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;https://gist.githubusercontent.com/BekahHW/394d81b484f264b0c8b23c0e177f8588/raw/df7bba8dde4f96487dd843977a07991aba4ca511/quotes.json&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> response.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[randomNumber].quote</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">author</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[randomNumber].author</span></span></code></pre>\n<p>Our randomNumber variable ensures that the file we\u2019re passing to Deepgram (coming up next!) is associated with the author of that quote.</p>\n<p>With <code is:raw>response</code> and <code is:raw>data</code>, we\u2019re accessing the gist of movie quotes.</p>\n<p>If we console.log(data), we\u2019ll get this plus the rest of the array of objects:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826505/blog/2022/03/freecodecamp-quote-generator-upgrade/json.png" alt="image of an array of objects with wav files and authors"></p>\n<p>When we console.log(author), we\u2019ll see one of those author\u2019s names as we\u2019re accessing one item in the array.</p>\n<p>We\u2019ve made huge progress! Now we\u2019re ready to use Deepgram to upgrade this freeCodeCamp project!</p>\n<p>Below the code we\u2019ve just written, but within the getTranscript function, we\u2019re going to add what we need to get the transcript from the wav file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">quoteTranscription</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: audioUrl }, { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en-US&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcription</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcription.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  author: author,</span></span>\n<span class="line"><span style="color: #C9D1D9">  transcription: quoteTranscription,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>A couple of things with that code block:\nWe\u2019re using pre-recorded audio, which you can find more about in our <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/pre-recorded-transcription/">Deepgram docs on pre-recorded transcription</a>.</p>\n<ol>\n<li>You need to pass the link to the audio file. In this case, we do it with <code is:raw>url: audioUrl</code>.\nWe get access to the transcription of the wav file with <code is:raw>transcription.results.channels[0].alternatives[0]</code></li>\n<li>We\u2019re returning both the author and the transcription because we need to send them to our app.js file to render in our quote-box.</li>\n</ol>\n<p>Now we\u2019re ready to connect all that work in <code is:raw>server.js</code> to <code is:raw>app.js</code>. After that code and outside of the function, add this code block:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcriptObj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(transcriptObj))</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(err)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This is where we\u2019re using express. The /express path should lead you to JSON data that we\u2019re accessing. We\u2019re calling getTranscript, so we have access to the author and transcription values. To send that to our <code is:raw>app.js</code> file, we use res.send. Right now, we\u2019re not sending it there because we haven\u2019t connected those paths. Before we do that, let\u2019s make sure express is listening to the server. Add this code to the very bottom of the file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Example app listening on port 3000`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Now we\u2019re ready to connect our work. We\u2019re almost done!</p>\n<h4 id="appjs"><code is:raw>app.js</code></h4>\n<p>In our <code is:raw>app.js</code> file, we have an event listener attached to our new quote button. Previously when we clicked this, it would fetch from the quote gist. We\u2019re going to replace that with this code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#text&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.transcription.transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#author&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.author</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>\n<p>We\u2019re connecting the path in <code is:raw>server.js</code> when we fetch(`/transcribe\u2019). Then we\u2019re taking that transcript object, getting it in a usable format, and then sending the text and author divs according to that data.</p>\n<p>We should be ready!</p>\n<p>Go to your terminal and run <code is:raw>node server.js</code>. You should be able to navigate to <code is:raw>http://localhost:3000/</code> and see your app. Go ahead and click the New Quote button and see the magic happen.</p>\n<p>Whew. That\u2019s a pretty cool update. If you want to check out the code in its entirety, you can navigate to our <a href="https://github.com/deepgram-devs/freeCodeCamp-Quote-Generator">freeCodeCamp-Quote-Generator repo</a> or to get you up and running faster, check out our <a href="https://stackblitz.com/edit/fcc-dg0">freeCodeCamp Quote Gen with Deepgram Stackblitz</a>. When you open this project it will automatically fork it for you. You just need to add your own <code is:raw>.env</code>. Then, in the terminal, run <code is:raw>node server.js</code> and see it live!</p>\n<p>This is a project I hope to build on. We\u2019ve been doing Twitter Spaces at Deepgram, and once we have some edited, I\u2019d love to use the quote generator to show random quotes and allow you to select the full recording if you\u2019re interested in the quote. Be on the lookout :eyes: for that future post.</p>\n<p>If you have any questions or want a walkthrough of the how to build a freeCodeCamp project with the Deepgram update, hit us up on <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> on Twitter.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/freecodecamp-quote-generator-upgrade/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>I spend a lot of time with folks learning to code and early-career developers. One of the things I’ve noticed is that it’s increasingly hard to find your first job. One of the biggest comments I’ve heard from hiring managers is that so many applicants for junior positions are showcasing the same projects. As I was brainstorming some use cases for Deepgram, I wanted to work on something that could help out these folks looking for their first development job. That’s how I decided to upgrade one of the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/#front-end-development-libraries-projects">freeCodeCamp Front End Development Libraries Projects</a>. In this post, we’re going to take the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine">Quote Generator Project</a> up a notch and use <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram’s Node SDK</a> to fetch a quote.</p>
<h2 id="prepping-our-project">Prepping our Project</h2>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "freeCodeCamp Side Note" }, { "default": () => renderTemplate`<p>For this tutorial, we’re assuming that you have completed the project. If you haven’t, you can find the <a href="https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine">directions for the quote generator here</a> or take a look at <a href="https://codepen.io/freeCodeCamp/pen/qRZeGZ">freeCodeCamp’s demo project</a> to get you started.</p>` })}
<ul>
<li>Download Node.js if you haven’t already - get it <a href="https://nodejs.org/en/">here</a></li>
<li>Create a Deepgram API Key with an admin or owner role - <a href="https://console.deepgram.com/signup?jump=keys">get it here</a></li>
<li>Create a file called .env and add <code>DG_KEY='your-api-key'</code>.</li>
</ul>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "Notes on API keys" }, { "default": () => renderTemplate`<ul>
<li>Your API key should be a string of letters and numbers that you wrap in single quotes.</li>
<li>.env files contain sensitive values. We’ll use a .gitignore file to ensure we don’t expose our information, but if you’re sharing your code with others, don’t include your sensitive information.</li>
</ul>` })}
<h3 id="where-we-started">Where we started</h3>
<p>Before we get into upgrading our freeCodeCamp projects, let’s take a look at the core functionality of our quote generator. When we open our project, there’s a quote to start. When we click the New Quote button, our quote machine fetches a new quote and author and displays that in the quote box. When we click the Twitter button, it takes the quote we see on the screen and creates a new tweet.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826507/blog/2022/03/freecodecamp-quote-generator-upgrade/new-quote.gif" alt="gif of clicking the new quote button"></p>
<p>Here’s the basic functionality that allows us to create the new quote:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomQuote</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  )</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> response.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#text&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span></span>
<span class="line"><span style="color: #C9D1D9">        data.quotes[</span><span style="color: #A5D6FF">\`\${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">99</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">].quote</span></span>
<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#author&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span></span>
<span class="line"><span style="color: #C9D1D9">        data.quotes[</span><span style="color: #A5D6FF">\`\${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">99</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">].author</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">newQuoteButton.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rndCol</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">\`rgb(\${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, \${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, \${</span><span style="color: #D2A8FF">random</span><span style="color: #A5D6FF">(</span><span style="color: #79C0FF">255</span><span style="color: #A5D6FF">)</span><span style="color: #A5D6FF">}, 0.4)\`</span></span>
<span class="line"><span style="color: #C9D1D9">  document.body.style.backgroundColor </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> rndCol</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getRandomQuote</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>As you can see, the project fetches quotes from a JSON file of quotes and authors on GitHub. You can find the one I used <a href="https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json">here</a>.</p>
<p>As you work on this project, it’s useful to have some understanding of APIs and JSON.</p>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "Resource Break!" }, { "default": () => renderTemplate`<li><a href="https://blog.deepgram.com/getting-started-with-apis/">Getting Started with APIs</a>  by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li><li><a href="https://blog.deepgram.com/getting-started-with-json/">Getting Started with JSON</a>  by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li>` })}
<h3 id="overview">Overview</h3>
<p>The way this looks isn’t going to change, <em>but</em> how we’re getting the quotes will. Instead of fetching from the gist, we will fetch a random movie from <a href="https://gist.github.com/BekahHW/394d81b484f264b0c8b23c0e177f8588">this gist</a>, and then transcribe that using Deepgram’s Node SDK.</p>
<p>Rather than using CodePen, I will be working in a public repository. We’ll need a package.json file for this project to install some packages to help us get the data we need.</p>
<h4 id="file-structure">File Structure</h4>
<p>We’ll be using a public folder for all the files that impact the front end of our project. We’ll only be actively working on a total of two files, with the assumption that you’ll keep your styles the same.</p>
<ul>
<li><code>app.js</code> will contain our front-end logic with our click events, which will be in the public folder. This is the file that controls rendering the quote and author on the screen.</li>
<li><code>server.js</code> is where we’ll work with our server-side logic. We’ll use <code>node-fetch</code>—more on this later–to get the data we need from the JSON of movie quotes. We’ll also use Deepgram’s Node SDK to transcribe the quotes and get them on the screen.</li>
</ul>
<p>Here’s what our file structure is going to look like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826506/blog/2022/03/freecodecamp-quote-generator-upgrade/folder.png" alt="image of the file structure"></p>
<h2 id="getting-started">Getting Started</h2>
<p>Once you have your project in a repository, cd into your project from your terminal and follow the following steps:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm i @deepgram/sdk dotenv express</span></span>
<span class="line"><span style="color: #C9D1D9">npm i -g gitignore </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> gitignore node</span></span></code></pre>
<p>These are all the packages we’ll need to get us up and running in this project.</p>
<h4 id="package-breakdown">Package breakdown</h4>
<ul>
<li><a href="https://github.com/motdotla/dotenv#readme">dotenv</a> - “Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env”</li>
<li><a href="https://github.com/msfeldstein/gitignore">gitignore node and gitignore node</a> - “​​Automatically fetch github’s excellent .gitignore files for any of your new projects”</li>
<li><a href="https://expressjs.com/">express</a> - Node framework that connects your server-side to your client-side.</li>
</ul>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "Another Resource Break!" }, { "default": () => renderTemplate`<p>If you’re getting started with learning express like I was, here are a couple of resources to get you started:</p><ul>
<li>Sandra’s post <a href="https://blog.deepgram.com/sending-audio-files-to-expressjs-server/">Sending Audio Files to Your Express.js Server</a> can help you better understand express.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction">Express/Node Introduction</a></li>
</ul>` })}
<h2 id="updating-your-project-with-deepgram">Updating Your Project with Deepgram</h2>
<p>Now we’re ready to upgrade your freeCodeCamp Quote Generator. We’ll start in the <code>server.js</code> file. We need to require the packages we just installed to ensure we can use them. At the top of your file add the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;node-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Next, we need to connect our <code>app.js</code> file to our <code>server.js</code> file. Below the previous code, add the following lines of code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>The first line in that block allows us to serve static files to our Express app. Because we have ‘public’ in there, our app has access to the files in our public folder. If you want a more thorough explanation, you can check out <a href="https://masteringjs.io/tutorials/express/app-use-static">this Mastering JS tutorial</a>.</p>
<p>The second line creates a new instance of Deepgram using our API key that we added to our <code>.env</code> file. Because we’ve added the dotenv packages, we have access to that key when we add the <code>process.env</code> before the variable name for our API key.</p>
<h3 id="accessing-the-quote---logic">Accessing the Quote - Logic</h3>
<p>Next up, we will add the logic that allows us to access the gist of movie quote data. This is where we’ll also be using <a href="https://github.com/node-fetch/node-fetch">node-fetch</a>, which we’ve named “fetch” in this project.</p>
<p>We’re going to put all of our logic in an async function. With async functions, we know we’ll have to wait for a task, but our application can continue to be responsive while waiting. This is a fairly complex concept, so don’t worry if you don’t fully grasp it right now. You can check out <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing">mdn’s Introduction to asynchronous JavaScript</a> for more information.</p>
<p>Let’s start with this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">() {}</span></span></code></pre>
<p>Within this space, we’re going to add:</p>
<ul>
<li>A function that allows us to randomize our quotes</li>
<li>Logic to get the wav file and the speaker (although we’re referring to them as “author” in this post).</li>
</ul>
<p>Just after the first curly brace, we’re going to add our random function with this code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">number</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> (number </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Now, we want to make sure that we get a random file and the author associated with that quote. To do that, add the following code underneath our getTranscript function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">randomNumber</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">6</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;https://gist.githubusercontent.com/BekahHW/394d81b484f264b0c8b23c0e177f8588/raw/df7bba8dde4f96487dd843977a07991aba4ca511/quotes.json&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> response.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[randomNumber].quote</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">author</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[randomNumber].author</span></span></code></pre>
<p>Our randomNumber variable ensures that the file we’re passing to Deepgram (coming up next!) is associated with the author of that quote.</p>
<p>With <code>response</code> and <code>data</code>, we’re accessing the gist of movie quotes.</p>
<p>If we console.log(data), we’ll get this plus the rest of the array of objects:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648826505/blog/2022/03/freecodecamp-quote-generator-upgrade/json.png" alt="image of an array of objects with wav files and authors"></p>
<p>When we console.log(author), we’ll see one of those author’s names as we’re accessing one item in the array.</p>
<p>We’ve made huge progress! Now we’re ready to use Deepgram to upgrade this freeCodeCamp project!</p>
<p>Below the code we’ve just written, but within the getTranscript function, we’re going to add what we need to get the transcript from the wav file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">quoteTranscription</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: audioUrl }, { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en-US&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcription</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcription.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  author: author,</span></span>
<span class="line"><span style="color: #C9D1D9">  transcription: quoteTranscription,</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>A couple of things with that code block:
We’re using pre-recorded audio, which you can find more about in our <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/pre-recorded-transcription/">Deepgram docs on pre-recorded transcription</a>.</p>
<ol>
<li>You need to pass the link to the audio file. In this case, we do it with <code>url: audioUrl</code>.
We get access to the transcription of the wav file with <code>transcription.results.channels[0].alternatives[0]</code></li>
<li>We’re returning both the author and the transcription because we need to send them to our app.js file to render in our quote-box.</li>
</ol>
<p>Now we’re ready to connect all that work in <code>server.js</code> to <code>app.js</code>. After that code and outside of the function, add this code block:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">getTranscript</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcriptObj</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(transcriptObj))</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(err)</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>This is where we’re using express. The /express path should lead you to JSON data that we’re accessing. We’re calling getTranscript, so we have access to the author and transcription values. To send that to our <code>app.js</code> file, we use res.send. Right now, we’re not sending it there because we haven’t connected those paths. Before we do that, let’s make sure express is listening to the server. Add this code to the very bottom of the file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`Example app listening on port 3000\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Now we’re ready to connect our work. We’re almost done!</p>
<h4 id="appjs"><code>app.js</code></h4>
<p>In our <code>app.js</code> file, we have an event listener attached to our new quote button. Previously when we clicked this, it would fetch from the quote gist. We’re going to replace that with this code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#text&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.transcription.transcript</span></span>
<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#author&#39;</span><span style="color: #C9D1D9">).innerText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.author</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span></code></pre>
<p>We’re connecting the path in <code>server.js</code> when we fetch(\`/transcribe’). Then we’re taking that transcript object, getting it in a usable format, and then sending the text and author divs according to that data.</p>
<p>We should be ready!</p>
<p>Go to your terminal and run <code>node server.js</code>. You should be able to navigate to <code>http://localhost:3000/</code> and see your app. Go ahead and click the New Quote button and see the magic happen.</p>
<p>Whew. That’s a pretty cool update. If you want to check out the code in its entirety, you can navigate to our <a href="https://github.com/deepgram-devs/freeCodeCamp-Quote-Generator">freeCodeCamp-Quote-Generator repo</a> or to get you up and running faster, check out our <a href="https://stackblitz.com/edit/fcc-dg0">freeCodeCamp Quote Gen with Deepgram Stackblitz</a>. When you open this project it will automatically fork it for you. You just need to add your own <code>.env</code>. Then, in the terminal, run <code>node server.js</code> and see it live!</p>
<p>This is a project I hope to build on. We’ve been doing Twitter Spaces at Deepgram, and once we have some edited, I’d love to use the quote generator to show random quotes and allow you to select the full recording if you’re interested in the quote. Be on the lookout :eyes: for that future post.</p>
<p>If you have any questions or want a walkthrough of the how to build a freeCodeCamp project with the Deepgram update, hit us up on <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> on Twitter.</p>`;
});

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
