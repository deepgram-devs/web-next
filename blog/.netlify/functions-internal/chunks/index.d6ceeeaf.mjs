import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 2, "slug": "install-dependencies", "text": "Install Dependencies" }, { "depth": 2, "slug": "create-a-flask-application", "text": "Create a Flask Application" }, { "depth": 2, "slug": "add-deepgram-api-key", "text": "Add Deepgram API Key" }, { "depth": 2, "slug": "get-mic-data-from-browser", "text": "Get Mic Data From Browser" }, { "depth": 2, "slug": "websocket-connection-between-server-and-browser", "text": "Websocket Connection Between Server and Browser" }, { "depth": 2, "slug": "websocket-connection-between-server-and-deepgram", "text": "Websocket Connection Between Server and Deepgram" }], "source": "\nHave you ever wondered how to do live voice-to-text transcription with Python? We'll use Flask 2.0 and Deepgram to achieve our goal in this article.\n\nFlask 2.0 is a familiar, lightweight, micro web framework that is very flexible. It doesn't make decisions for us, meaning we are free to choose which database, templating engine, etc., to use without lacking functionality. Deepgram uses AI speech recognition to do real-time audio transcription, and we'll be using our Python SDK.\n\nThe final code for this project is located [here in Github](https://github.com/deepgram-devs/live-transcription-flask), if you want to jump ahead.\n\n## Getting Started\n\nBefore we start, it's essential to generate a Deepgram API key to use in our project. We can [go here](https://console.deepgram.com/signup?jump=keys). For this tutorial, we'll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. Since we're using `async` in Flask, you'll need to have Python 3.7 or higher. We'll also need to set up a virtual environment to hold our project. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n## Install Dependencies\n\nCreate a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.\n\nFor a quick reference, here are the commands we need to create and activate our virtual environment:\n\n    mkdir [% NAME_OF_YOUR_DIRECTORY %]\n    cd [% NAME_OF_YOUR_DIRECTORY %]\n    python3 -m venv venv\n    source venv/bin/activate\n\nWe need to install the following dependencies from our terminal:\n\n*   The latest version of Flask\n*   The Deepgram Python SDK\n*   The dotenv library, which helps us work with our environment variables\n*   The aiohttp-wsgi, which allows us to work with WebSockets in our WSGI application\n\n{/*<!---->*/}\n\n    pip install Flask\n    pip install deepgram-sdk\n    pip install python-dotenv\n    pip install aiohttp-wsgi\n\n## Create a Flask Application\n\nLet's get a starter Flask application up and running that renders an HTML page so that we can progress on our live transcription project.\n\nCreate a file called `main.py` inside our project and a templates folder with an HTML file called `index.html`.\n\n![flask project structure](https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-project-structure.png)\n\nThe `main.py` file will hold our Python code.\n\n```python\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return render_template('index.html')\n```\n\nLastly, we'll store our HTML file inside the templates folder and hold our HTML markup here.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Live Transcription</title>\n  </head>\n  <body>\n    <h1>Transcribe Audio With Flask 2.0</h1>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\"></p>\n  </body>\n</html>\n```\n\nWe have to export it into an environment variable to run the application. In our terminal, type the following:\n\n    export FLASK_APP=main\n\nIf we start our development server from the terminal to run the project using `flask run`, the `index.html` page renders in the browser.\n\n![render the index HTML page](https://res.cloudinary.com/deepgram/image/upload/v1647977919/blog/2022/03/live-transcription-flask/flask-index-html.png)\n\n## Add Deepgram API Key\n\nOur API Key will allow access to use Deepgram. Let's create a `.env` file that will store our key. When we push our code to Github, hide our key, make sure to add this to our `.gitignore` file.\n\n![hide api key with .env file](https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-env-file.png)\n\nIn our file, add the following environment variable with our Deepgram API key, which we can [grab here](https://console.deepgram.com/signup?jump=keys):\n\n    DEEPGRAM_API_KEY=\"abcde12345\"\n\nThe below code shows how to load our key into the project and access it in `main.py`:\n\n```python\nfrom deepgram import Deepgram\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\napp = Flask(__name__)\n\ndg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n```\n\n## Get Mic Data From Browser\n\nOur next step is to get the microphone data from the browser, which will require a little JavaScript.\n\nUse this code inside the `<script><\/script>` tag in `index.html` to access data from the user's microphone.\n\n```js\n<script>\n  navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n    const mediaRecorder = new MediaRecorder(stream)\n  })\n<\/script>\n```\n\nIf you want to learn more about working with the mic in the browser, please check out [this post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n## Websocket Connection Between Server and Browser\n\nWe'll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.\n\nThe first WebSocket connection is between our Python server that holds our Flask application and our browser client. In this project, we'll use [aiohttp](https://docs.aiohttp.org/en/v3.8.1/faq.html) to handle the WebSocket server.\n\nWe need to create a WebSocket endpoint that listens to our Flask web server code for client connections. In the `main.py` file, add the following code:\n\n```python\nimport asyncio\nfrom aiohttp import web\nfrom aiohttp_wsgi import WSGIHandler\n\napp = Flask('aioflask')\n\nasync def socket(request): #new\n   ws = web.WebSocketResponse()\n   await ws.prepare(request)\n\n   deepgram_socket = await process_audio(ws)\n\n   while True:\n       data = await ws.receive_bytes()\n       deepgram_socket.send(data)\n```\n\nThis code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. We're defining a variable called `deepgram_socket`, which calls a function `process_audio` and opens the connection to Deepgram. In this user-defined method, we'll also connect to Deepgram. While the server and browser connection stays open, we'll wait for messages and send data.\n\nIn `index.html`, this code listens for a client connection then connects to the client like so:\n\n```js\n<script>... const socket = new WebSocket('ws://localhost:5555/listen')<\/script>\n```\n\n## Websocket Connection Between Server and Deepgram\n\nWe need to establish a connection between our central Flask server and Deepgram to get the audio and do our real-time transcription. Add this code to our `main.py` file.\n\n```python\nif __name__ == \"__main__\": # new\n   loop = asyncio.get_event_loop()\n   aio_app = web.Application()\n   wsgi = WSGIHandler(app)\n   aio_app.router.add_route('*', '/{path_info: *}', wsgi.handle_request)\n   aio_app.router.add_route('GET', '/listen', socket)\n   web.run_app(aio_app, port=5555)\n```\n\nThis code adds a route to the endpoint `listen` to the `socket` function. The equivalent of this is `app.route` in Flask.\n\nNext, let's create our functions to process the audio, get the transcript from that audio and connect to Deepgram. In our `main.py`, add this code.\n\n```python\nfrom typing import Dict, Callable\n\nasync def process_audio(fast_socket: web.WebSocketResponse):\n   async def get_transcript(data: Dict) -> None:\n       if 'channel' in data:\n           transcript = data['channel']['alternatives'][0]['transcript']\n\n           if transcript:\n               await fast_socket.send_str(transcript)\n\n   deepgram_socket = await connect_to_deepgram(get_transcript)\n\n   return deepgram_socket\n\nasync def connect_to_deepgram(transcript_received_handler: Callable[[Dict], None]) -> str:\n   try:\n       socket = await dg_client.transcription.live({'punctuate': True, 'interim_results': False})\n       socket.registerHandler(socket.event.CLOSE, lambda c: print(f'Connection closed with code {c}.'))\n       socket.registerHandler(socket.event.TRANSCRIPT_RECEIVED, transcript_received_handler)\n\n       return socket\n   except Exception as e:\n       raise Exception(f'Could not open socket: {e}')\n```\n\nThe `process_audio` function takes `fast_socket` as an argument, which will keep the connection open between the client and the Flask server. We also connect to Deepgram and pass in the `get_transcript` function. This function gets the transcript and sends it back to the client.\n\nThe `connect_to_deepgram` function creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects.\n\nLastly, in our `index.html`, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out [this blog post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n```js\n<script>\n  socket.onopen = () => {\n    document.querySelector('#status').textContent = 'Connected'\n    console.log({\n        event: 'onopen'\n    })\n    mediaRecorder.addEventListener('dataavailable', async (event) => {\n        if (event.data.size > 0 && socket.readyState == 1) {\n            socket.send(event.data)\n        }\n    })\n    mediaRecorder.start(250)\n}\n\n  socket.onmessage = (message) => {\n      const received = message.data\n      if (received) {\n          console.log(received)\n          document.querySelector('#transcript').textContent += ' ' + received\n      }\n  }\n\n  socket.onclose = () => {\n      console.log({\n          event: 'onclose'\n      })\n  }\n\n  socket.onerror = (error) => {\n      console.log({\n          event: 'onerror',\n          error\n      })\n  }\n<\/script>\n```\n\nLet's start our application and start getting real-time transcriptions. From our terminal, run `python main.py` and pull up our localhost on port 5555, `http://127.0.0.1:5555/`. If we haven't already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:\n\n![final result in Flask live streaming example](https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-final-screenshot.png)\n\nCongratulations on building a real-time transcription project with Flask and Deepgram. You can find the [code here](https://github.com/deepgram-devs/live-transcription-flask) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>Have you ever wondered how to do live voice-to-text transcription with Python? We\u2019ll use Flask 2.0 and Deepgram to achieve our goal in this article.</p>\n<p>Flask 2.0 is a familiar, lightweight, micro web framework that is very flexible. It doesn\u2019t make decisions for us, meaning we are free to choose which database, templating engine, etc., to use without lacking functionality. Deepgram uses AI speech recognition to do real-time audio transcription, and we\u2019ll be using our Python SDK.</p>\n<p>The final code for this project is located <a href="https://github.com/deepgram-devs/live-transcription-flask">here in Github</a>, if you want to jump ahead.</p>\n<h2 id="getting-started">Getting Started</h2>\n<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can <a href="https://console.deepgram.com/signup?jump=keys">go here</a>. For this tutorial, we\u2019ll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. Since we\u2019re using <code is:raw>async</code> in Flask, you\u2019ll need to have Python 3.7 or higher. We\u2019ll also need to set up a virtual environment to hold our project. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>\n<h2 id="install-dependencies">Install Dependencies</h2>\n<p>Create a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.</p>\n<p>For a quick reference, here are the commands we need to create and activate our virtual environment:</p>\n<p>mkdir [% NAME_OF_YOUR_DIRECTORY %]\ncd [% NAME_OF_YOUR_DIRECTORY %]\npython3 -m venv venv\nsource venv/bin/activate</p>\n<p>We need to install the following dependencies from our terminal:</p>\n<ul>\n<li>The latest version of Flask</li>\n<li>The Deepgram Python SDK</li>\n<li>The dotenv library, which helps us work with our environment variables</li>\n<li>The aiohttp-wsgi, which allows us to work with WebSockets in our WSGI application</li>\n</ul>\n{/*<!---->*/}\n<p>pip install Flask\npip install deepgram-sdk\npip install python-dotenv\npip install aiohttp-wsgi</p>\n<h2 id="create-a-flask-application">Create a Flask Application</h2>\n<p>Let\u2019s get a starter Flask application up and running that renders an HTML page so that we can progress on our live transcription project.</p>\n<p>Create a file called <code is:raw>main.py</code> inside our project and a templates folder with an HTML file called <code is:raw>index.html</code>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-project-structure.png" alt="flask project structure"></p>\n<p>The <code is:raw>main.py</code> file will hold our Python code.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, render_template</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Lastly, we\u2019ll store our HTML file inside the templates folder and hold our HTML markup here.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Live Transcription&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Transcribe Audio With Flask 2.0&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>We have to export it into an environment variable to run the application. In our terminal, type the following:</p>\n<p>export FLASK_APP=main</p>\n<p>If we start our development server from the terminal to run the project using <code is:raw>flask run</code>, the <code is:raw>index.html</code> page renders in the browser.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647977919/blog/2022/03/live-transcription-flask/flask-index-html.png" alt="render the index HTML page"></p>\n<h2 id="add-deepgram-api-key">Add Deepgram API Key</h2>\n<p>Our API Key will allow access to use Deepgram. Let\u2019s create a <code is:raw>.env</code> file that will store our key. When we push our code to Github, hide our key, make sure to add this to our <code is:raw>.gitignore</code> file.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-env-file.png" alt="hide api key with .env file"></p>\n<p>In our file, add the following environment variable with our Deepgram API key, which we can <a href="https://console.deepgram.com/signup?jump=keys">grab here</a>:</p>\n<p>DEEPGRAM_API_KEY=\u201Cabcde12345\u201D</p>\n<p>The below code shows how to load our key into the project and access it in <code is:raw>main.py</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<h2 id="get-mic-data-from-browser">Get Mic Data From Browser</h2>\n<p>Our next step is to get the microphone data from the browser, which will require a little JavaScript.</p>\n<p>Use this code inside the <code is:raw>&lt;script&gt;&lt;/script&gt;</code> tag in <code is:raw>index.html</code> to access data from the user\u2019s microphone.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  navigator.mediaDevices.getUserMedia(</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">).then((stream) =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    const mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>If you want to learn more about working with the mic in the browser, please check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this post</a>.</p>\n<h2 id="websocket-connection-between-server-and-browser">Websocket Connection Between Server and Browser</h2>\n<p>We\u2019ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.</p>\n<p>The first WebSocket connection is between our Python server that holds our Flask application and our browser client. In this project, we\u2019ll use <a href="https://docs.aiohttp.org/en/v3.8.1/faq.html">aiohttp</a> to handle the WebSocket server.</p>\n<p>We need to create a WebSocket endpoint that listens to our Flask web server code for client connections. In the <code is:raw>main.py</code> file, add the following code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> aiohttp </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> web</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> aiohttp_wsgi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> WSGIHandler</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #A5D6FF">&#39;aioflask&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">socket</span><span style="color: #C9D1D9">(request): </span><span style="color: #8B949E">#new</span></span>\n<span class="line"><span style="color: #C9D1D9">   ws </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> web.WebSocketResponse()</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.prepare(request)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   deepgram_socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> process_audio(ws)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.receive_bytes()</span></span>\n<span class="line"><span style="color: #C9D1D9">       deepgram_socket.send(data)</span></span></code></pre>\n<p>This code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. We\u2019re defining a variable called <code is:raw>deepgram_socket</code>, which calls a function <code is:raw>process_audio</code> and opens the connection to Deepgram. In this user-defined method, we\u2019ll also connect to Deepgram. While the server and browser connection stays open, we\u2019ll wait for messages and send data.</p>\n<p>In <code is:raw>index.html</code>, this code listens for a client connection then connects to the client like so:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;... const socket = new WebSocket(&#39;ws://localhost:5555/listen&#39;)&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="websocket-connection-between-server-and-deepgram">Websocket Connection Between Server and Deepgram</h2>\n<p>We need to establish a connection between our central Flask server and Deepgram to get the audio and do our real-time transcription. Add this code to our <code is:raw>main.py</code> file.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #8B949E"># new</span></span>\n<span class="line"><span style="color: #C9D1D9">   loop </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.get_event_loop()</span></span>\n<span class="line"><span style="color: #C9D1D9">   aio_app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> web.Application()</span></span>\n<span class="line"><span style="color: #C9D1D9">   wsgi </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> WSGIHandler(app)</span></span>\n<span class="line"><span style="color: #C9D1D9">   aio_app.router.add_route(</span><span style="color: #A5D6FF">&#39;*&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/</span><span style="color: #79C0FF">{path_info</span><span style="color: #FF7B72">:</span><span style="color: #79C0FF"> *}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">, wsgi.handle_request)</span></span>\n<span class="line"><span style="color: #C9D1D9">   aio_app.router.add_route(</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/listen&#39;</span><span style="color: #C9D1D9">, socket)</span></span>\n<span class="line"><span style="color: #C9D1D9">   web.run_app(aio_app, </span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5555</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>This code adds a route to the endpoint <code is:raw>listen</code> to the <code is:raw>socket</code> function. The equivalent of this is <code is:raw>app.route</code> in Flask.</p>\n<p>Next, let\u2019s create our functions to process the audio, get the transcript from that audio and connect to Deepgram. In our <code is:raw>main.py</code>, add this code.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict, Callable</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">process_audio</span><span style="color: #C9D1D9">(fast_socket: web.WebSocketResponse):</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_transcript</span><span style="color: #C9D1D9">(data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data:</span></span>\n<span class="line"><span style="color: #C9D1D9">           transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> transcript:</span></span>\n<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> fast_socket.send_str(transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   deepgram_socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> connect_to_deepgram(get_transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deepgram_socket</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_to_deepgram</span><span style="color: #C9D1D9">(transcript_received_handler: Callable[[Dict], </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">]) -&gt; </span><span style="color: #79C0FF">str</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">       socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> dg_client.transcription.live({</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;interim_results&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">False</span><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">       socket.registerHandler(socket.event.</span><span style="color: #79C0FF">CLOSE</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">lambda</span><span style="color: #C9D1D9"> c: </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Connection closed with code </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">c</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">.&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">       socket.registerHandler(socket.event.</span><span style="color: #79C0FF">TRANSCRIPT_RECEIVED</span><span style="color: #C9D1D9">, transcript_received_handler)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> socket</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> e:</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Could not open socket: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">e</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>The <code is:raw>process_audio</code> function takes <code is:raw>fast_socket</code> as an argument, which will keep the connection open between the client and the Flask server. We also connect to Deepgram and pass in the <code is:raw>get_transcript</code> function. This function gets the transcript and sends it back to the client.</p>\n<p>The <code is:raw>connect_to_deepgram</code> function creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects.</p>\n<p>Lastly, in our <code is:raw>index.html</code>, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this blog post</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onopen = () =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onmessage = (message) =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      const received </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> message.data</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9"> (received) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.log(received)</span></span>\n<span class="line"><span style="color: #C9D1D9">          document.querySelector(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent += </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> + received</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onclose = () =&gt; {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.log({</span></span>\n<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onerror = (error) =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          error</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Let\u2019s start our application and start getting real-time transcriptions. From our terminal, run <code is:raw>python main.py</code> and pull up our localhost on port 5555, <code is:raw>http://127.0.0.1:5555/</code>. If we haven\u2019t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-final-screenshot.png" alt="final result in Flask live streaming example"></p>\n<p>Congratulations on building a real-time transcription project with Flask and Deepgram. You can find the <a href="https://github.com/deepgram-devs/live-transcription-flask">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Live Transcription With Python and Flask", "description": "Learn how to do a live, real-time transcription with Flask in Python and Deepgram", "date": "2022-03-02T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1646232657/blog/2022/03/live-transcription-flask/Live-Transcription-With-Python-Flask-Deepgram%402x.jpg", "authors": ["tonya-sims"], "category": "tutorial", "tags": ["python", "flask"], "seo": { "title": "Live Transcription With Python and Flask", "description": "Learn how to do a live, real-time transcription with Flask in Python and Deepgram" }, "shorturls": { "share": "https://dpgr.am/bbacddc", "twitter": "https://dpgr.am/d7ec666", "linkedin": "https://dpgr.am/05c42ed", "reddit": "https://dpgr.am/0bf905b", "facebook": "https://dpgr.am/4ee5d48" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454036/blog/live-transcription-flask/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 2, "slug": "install-dependencies", "text": "Install Dependencies" }, { "depth": 2, "slug": "create-a-flask-application", "text": "Create a Flask Application" }, { "depth": 2, "slug": "add-deepgram-api-key", "text": "Add Deepgram API Key" }, { "depth": 2, "slug": "get-mic-data-from-browser", "text": "Get Mic Data From Browser" }, { "depth": 2, "slug": "websocket-connection-between-server-and-browser", "text": "Websocket Connection Between Server and Browser" }, { "depth": 2, "slug": "websocket-connection-between-server-and-deepgram", "text": "Websocket Connection Between Server and Deepgram" }], "source": "\nHave you ever wondered how to do live voice-to-text transcription with Python? We'll use Flask 2.0 and Deepgram to achieve our goal in this article.\n\nFlask 2.0 is a familiar, lightweight, micro web framework that is very flexible. It doesn't make decisions for us, meaning we are free to choose which database, templating engine, etc., to use without lacking functionality. Deepgram uses AI speech recognition to do real-time audio transcription, and we'll be using our Python SDK.\n\nThe final code for this project is located [here in Github](https://github.com/deepgram-devs/live-transcription-flask), if you want to jump ahead.\n\n## Getting Started\n\nBefore we start, it's essential to generate a Deepgram API key to use in our project. We can [go here](https://console.deepgram.com/signup?jump=keys). For this tutorial, we'll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. Since we're using `async` in Flask, you'll need to have Python 3.7 or higher. We'll also need to set up a virtual environment to hold our project. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n## Install Dependencies\n\nCreate a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.\n\nFor a quick reference, here are the commands we need to create and activate our virtual environment:\n\n    mkdir [% NAME_OF_YOUR_DIRECTORY %]\n    cd [% NAME_OF_YOUR_DIRECTORY %]\n    python3 -m venv venv\n    source venv/bin/activate\n\nWe need to install the following dependencies from our terminal:\n\n*   The latest version of Flask\n*   The Deepgram Python SDK\n*   The dotenv library, which helps us work with our environment variables\n*   The aiohttp-wsgi, which allows us to work with WebSockets in our WSGI application\n\n{/*<!---->*/}\n\n    pip install Flask\n    pip install deepgram-sdk\n    pip install python-dotenv\n    pip install aiohttp-wsgi\n\n## Create a Flask Application\n\nLet's get a starter Flask application up and running that renders an HTML page so that we can progress on our live transcription project.\n\nCreate a file called `main.py` inside our project and a templates folder with an HTML file called `index.html`.\n\n![flask project structure](https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-project-structure.png)\n\nThe `main.py` file will hold our Python code.\n\n```python\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return render_template('index.html')\n```\n\nLastly, we'll store our HTML file inside the templates folder and hold our HTML markup here.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Live Transcription</title>\n  </head>\n  <body>\n    <h1>Transcribe Audio With Flask 2.0</h1>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\"></p>\n  </body>\n</html>\n```\n\nWe have to export it into an environment variable to run the application. In our terminal, type the following:\n\n    export FLASK_APP=main\n\nIf we start our development server from the terminal to run the project using `flask run`, the `index.html` page renders in the browser.\n\n![render the index HTML page](https://res.cloudinary.com/deepgram/image/upload/v1647977919/blog/2022/03/live-transcription-flask/flask-index-html.png)\n\n## Add Deepgram API Key\n\nOur API Key will allow access to use Deepgram. Let's create a `.env` file that will store our key. When we push our code to Github, hide our key, make sure to add this to our `.gitignore` file.\n\n![hide api key with .env file](https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-env-file.png)\n\nIn our file, add the following environment variable with our Deepgram API key, which we can [grab here](https://console.deepgram.com/signup?jump=keys):\n\n    DEEPGRAM_API_KEY=\"abcde12345\"\n\nThe below code shows how to load our key into the project and access it in `main.py`:\n\n```python\nfrom deepgram import Deepgram\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\napp = Flask(__name__)\n\ndg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n```\n\n## Get Mic Data From Browser\n\nOur next step is to get the microphone data from the browser, which will require a little JavaScript.\n\nUse this code inside the `<script><\/script>` tag in `index.html` to access data from the user's microphone.\n\n```js\n<script>\n  navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n    const mediaRecorder = new MediaRecorder(stream)\n  })\n<\/script>\n```\n\nIf you want to learn more about working with the mic in the browser, please check out [this post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n## Websocket Connection Between Server and Browser\n\nWe'll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.\n\nThe first WebSocket connection is between our Python server that holds our Flask application and our browser client. In this project, we'll use [aiohttp](https://docs.aiohttp.org/en/v3.8.1/faq.html) to handle the WebSocket server.\n\nWe need to create a WebSocket endpoint that listens to our Flask web server code for client connections. In the `main.py` file, add the following code:\n\n```python\nimport asyncio\nfrom aiohttp import web\nfrom aiohttp_wsgi import WSGIHandler\n\napp = Flask('aioflask')\n\nasync def socket(request): #new\n   ws = web.WebSocketResponse()\n   await ws.prepare(request)\n\n   deepgram_socket = await process_audio(ws)\n\n   while True:\n       data = await ws.receive_bytes()\n       deepgram_socket.send(data)\n```\n\nThis code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. We're defining a variable called `deepgram_socket`, which calls a function `process_audio` and opens the connection to Deepgram. In this user-defined method, we'll also connect to Deepgram. While the server and browser connection stays open, we'll wait for messages and send data.\n\nIn `index.html`, this code listens for a client connection then connects to the client like so:\n\n```js\n<script>... const socket = new WebSocket('ws://localhost:5555/listen')<\/script>\n```\n\n## Websocket Connection Between Server and Deepgram\n\nWe need to establish a connection between our central Flask server and Deepgram to get the audio and do our real-time transcription. Add this code to our `main.py` file.\n\n```python\nif __name__ == \"__main__\": # new\n   loop = asyncio.get_event_loop()\n   aio_app = web.Application()\n   wsgi = WSGIHandler(app)\n   aio_app.router.add_route('*', '/{path_info: *}', wsgi.handle_request)\n   aio_app.router.add_route('GET', '/listen', socket)\n   web.run_app(aio_app, port=5555)\n```\n\nThis code adds a route to the endpoint `listen` to the `socket` function. The equivalent of this is `app.route` in Flask.\n\nNext, let's create our functions to process the audio, get the transcript from that audio and connect to Deepgram. In our `main.py`, add this code.\n\n```python\nfrom typing import Dict, Callable\n\nasync def process_audio(fast_socket: web.WebSocketResponse):\n   async def get_transcript(data: Dict) -> None:\n       if 'channel' in data:\n           transcript = data['channel']['alternatives'][0]['transcript']\n\n           if transcript:\n               await fast_socket.send_str(transcript)\n\n   deepgram_socket = await connect_to_deepgram(get_transcript)\n\n   return deepgram_socket\n\nasync def connect_to_deepgram(transcript_received_handler: Callable[[Dict], None]) -> str:\n   try:\n       socket = await dg_client.transcription.live({'punctuate': True, 'interim_results': False})\n       socket.registerHandler(socket.event.CLOSE, lambda c: print(f'Connection closed with code {c}.'))\n       socket.registerHandler(socket.event.TRANSCRIPT_RECEIVED, transcript_received_handler)\n\n       return socket\n   except Exception as e:\n       raise Exception(f'Could not open socket: {e}')\n```\n\nThe `process_audio` function takes `fast_socket` as an argument, which will keep the connection open between the client and the Flask server. We also connect to Deepgram and pass in the `get_transcript` function. This function gets the transcript and sends it back to the client.\n\nThe `connect_to_deepgram` function creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects.\n\nLastly, in our `index.html`, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out [this blog post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n```js\n<script>\n  socket.onopen = () => {\n    document.querySelector('#status').textContent = 'Connected'\n    console.log({\n        event: 'onopen'\n    })\n    mediaRecorder.addEventListener('dataavailable', async (event) => {\n        if (event.data.size > 0 && socket.readyState == 1) {\n            socket.send(event.data)\n        }\n    })\n    mediaRecorder.start(250)\n}\n\n  socket.onmessage = (message) => {\n      const received = message.data\n      if (received) {\n          console.log(received)\n          document.querySelector('#transcript').textContent += ' ' + received\n      }\n  }\n\n  socket.onclose = () => {\n      console.log({\n          event: 'onclose'\n      })\n  }\n\n  socket.onerror = (error) => {\n      console.log({\n          event: 'onerror',\n          error\n      })\n  }\n<\/script>\n```\n\nLet's start our application and start getting real-time transcriptions. From our terminal, run `python main.py` and pull up our localhost on port 5555, `http://127.0.0.1:5555/`. If we haven't already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:\n\n![final result in Flask live streaming example](https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-final-screenshot.png)\n\nCongratulations on building a real-time transcription project with Flask and Deepgram. You can find the [code here](https://github.com/deepgram-devs/live-transcription-flask) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>Have you ever wondered how to do live voice-to-text transcription with Python? We\u2019ll use Flask 2.0 and Deepgram to achieve our goal in this article.</p>\n<p>Flask 2.0 is a familiar, lightweight, micro web framework that is very flexible. It doesn\u2019t make decisions for us, meaning we are free to choose which database, templating engine, etc., to use without lacking functionality. Deepgram uses AI speech recognition to do real-time audio transcription, and we\u2019ll be using our Python SDK.</p>\n<p>The final code for this project is located <a href="https://github.com/deepgram-devs/live-transcription-flask">here in Github</a>, if you want to jump ahead.</p>\n<h2 id="getting-started">Getting Started</h2>\n<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can <a href="https://console.deepgram.com/signup?jump=keys">go here</a>. For this tutorial, we\u2019ll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. Since we\u2019re using <code is:raw>async</code> in Flask, you\u2019ll need to have Python 3.7 or higher. We\u2019ll also need to set up a virtual environment to hold our project. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>\n<h2 id="install-dependencies">Install Dependencies</h2>\n<p>Create a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.</p>\n<p>For a quick reference, here are the commands we need to create and activate our virtual environment:</p>\n<p>mkdir [% NAME_OF_YOUR_DIRECTORY %]\ncd [% NAME_OF_YOUR_DIRECTORY %]\npython3 -m venv venv\nsource venv/bin/activate</p>\n<p>We need to install the following dependencies from our terminal:</p>\n<ul>\n<li>The latest version of Flask</li>\n<li>The Deepgram Python SDK</li>\n<li>The dotenv library, which helps us work with our environment variables</li>\n<li>The aiohttp-wsgi, which allows us to work with WebSockets in our WSGI application</li>\n</ul>\n{/*<!---->*/}\n<p>pip install Flask\npip install deepgram-sdk\npip install python-dotenv\npip install aiohttp-wsgi</p>\n<h2 id="create-a-flask-application">Create a Flask Application</h2>\n<p>Let\u2019s get a starter Flask application up and running that renders an HTML page so that we can progress on our live transcription project.</p>\n<p>Create a file called <code is:raw>main.py</code> inside our project and a templates folder with an HTML file called <code is:raw>index.html</code>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-project-structure.png" alt="flask project structure"></p>\n<p>The <code is:raw>main.py</code> file will hold our Python code.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, render_template</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Lastly, we\u2019ll store our HTML file inside the templates folder and hold our HTML markup here.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Live Transcription&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Transcribe Audio With Flask 2.0&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>We have to export it into an environment variable to run the application. In our terminal, type the following:</p>\n<p>export FLASK_APP=main</p>\n<p>If we start our development server from the terminal to run the project using <code is:raw>flask run</code>, the <code is:raw>index.html</code> page renders in the browser.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647977919/blog/2022/03/live-transcription-flask/flask-index-html.png" alt="render the index HTML page"></p>\n<h2 id="add-deepgram-api-key">Add Deepgram API Key</h2>\n<p>Our API Key will allow access to use Deepgram. Let\u2019s create a <code is:raw>.env</code> file that will store our key. When we push our code to Github, hide our key, make sure to add this to our <code is:raw>.gitignore</code> file.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-env-file.png" alt="hide api key with .env file"></p>\n<p>In our file, add the following environment variable with our Deepgram API key, which we can <a href="https://console.deepgram.com/signup?jump=keys">grab here</a>:</p>\n<p>DEEPGRAM_API_KEY=\u201Cabcde12345\u201D</p>\n<p>The below code shows how to load our key into the project and access it in <code is:raw>main.py</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<h2 id="get-mic-data-from-browser">Get Mic Data From Browser</h2>\n<p>Our next step is to get the microphone data from the browser, which will require a little JavaScript.</p>\n<p>Use this code inside the <code is:raw>&lt;script&gt;&lt;/script&gt;</code> tag in <code is:raw>index.html</code> to access data from the user\u2019s microphone.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  navigator.mediaDevices.getUserMedia(</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">).then((stream) =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    const mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>If you want to learn more about working with the mic in the browser, please check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this post</a>.</p>\n<h2 id="websocket-connection-between-server-and-browser">Websocket Connection Between Server and Browser</h2>\n<p>We\u2019ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.</p>\n<p>The first WebSocket connection is between our Python server that holds our Flask application and our browser client. In this project, we\u2019ll use <a href="https://docs.aiohttp.org/en/v3.8.1/faq.html">aiohttp</a> to handle the WebSocket server.</p>\n<p>We need to create a WebSocket endpoint that listens to our Flask web server code for client connections. In the <code is:raw>main.py</code> file, add the following code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> aiohttp </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> web</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> aiohttp_wsgi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> WSGIHandler</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #A5D6FF">&#39;aioflask&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">socket</span><span style="color: #C9D1D9">(request): </span><span style="color: #8B949E">#new</span></span>\n<span class="line"><span style="color: #C9D1D9">   ws </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> web.WebSocketResponse()</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.prepare(request)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   deepgram_socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> process_audio(ws)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.receive_bytes()</span></span>\n<span class="line"><span style="color: #C9D1D9">       deepgram_socket.send(data)</span></span></code></pre>\n<p>This code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. We\u2019re defining a variable called <code is:raw>deepgram_socket</code>, which calls a function <code is:raw>process_audio</code> and opens the connection to Deepgram. In this user-defined method, we\u2019ll also connect to Deepgram. While the server and browser connection stays open, we\u2019ll wait for messages and send data.</p>\n<p>In <code is:raw>index.html</code>, this code listens for a client connection then connects to the client like so:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;... const socket = new WebSocket(&#39;ws://localhost:5555/listen&#39;)&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="websocket-connection-between-server-and-deepgram">Websocket Connection Between Server and Deepgram</h2>\n<p>We need to establish a connection between our central Flask server and Deepgram to get the audio and do our real-time transcription. Add this code to our <code is:raw>main.py</code> file.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #8B949E"># new</span></span>\n<span class="line"><span style="color: #C9D1D9">   loop </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.get_event_loop()</span></span>\n<span class="line"><span style="color: #C9D1D9">   aio_app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> web.Application()</span></span>\n<span class="line"><span style="color: #C9D1D9">   wsgi </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> WSGIHandler(app)</span></span>\n<span class="line"><span style="color: #C9D1D9">   aio_app.router.add_route(</span><span style="color: #A5D6FF">&#39;*&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/</span><span style="color: #79C0FF">{path_info</span><span style="color: #FF7B72">:</span><span style="color: #79C0FF"> *}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">, wsgi.handle_request)</span></span>\n<span class="line"><span style="color: #C9D1D9">   aio_app.router.add_route(</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/listen&#39;</span><span style="color: #C9D1D9">, socket)</span></span>\n<span class="line"><span style="color: #C9D1D9">   web.run_app(aio_app, </span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5555</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>This code adds a route to the endpoint <code is:raw>listen</code> to the <code is:raw>socket</code> function. The equivalent of this is <code is:raw>app.route</code> in Flask.</p>\n<p>Next, let\u2019s create our functions to process the audio, get the transcript from that audio and connect to Deepgram. In our <code is:raw>main.py</code>, add this code.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict, Callable</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">process_audio</span><span style="color: #C9D1D9">(fast_socket: web.WebSocketResponse):</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_transcript</span><span style="color: #C9D1D9">(data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data:</span></span>\n<span class="line"><span style="color: #C9D1D9">           transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> transcript:</span></span>\n<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> fast_socket.send_str(transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   deepgram_socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> connect_to_deepgram(get_transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deepgram_socket</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_to_deepgram</span><span style="color: #C9D1D9">(transcript_received_handler: Callable[[Dict], </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">]) -&gt; </span><span style="color: #79C0FF">str</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">       socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> dg_client.transcription.live({</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;interim_results&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">False</span><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">       socket.registerHandler(socket.event.</span><span style="color: #79C0FF">CLOSE</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">lambda</span><span style="color: #C9D1D9"> c: </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Connection closed with code </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">c</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">.&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">       socket.registerHandler(socket.event.</span><span style="color: #79C0FF">TRANSCRIPT_RECEIVED</span><span style="color: #C9D1D9">, transcript_received_handler)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> socket</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> e:</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Could not open socket: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">e</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>The <code is:raw>process_audio</code> function takes <code is:raw>fast_socket</code> as an argument, which will keep the connection open between the client and the Flask server. We also connect to Deepgram and pass in the <code is:raw>get_transcript</code> function. This function gets the transcript and sends it back to the client.</p>\n<p>The <code is:raw>connect_to_deepgram</code> function creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects.</p>\n<p>Lastly, in our <code is:raw>index.html</code>, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this blog post</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onopen = () =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onmessage = (message) =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      const received </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> message.data</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9"> (received) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.log(received)</span></span>\n<span class="line"><span style="color: #C9D1D9">          document.querySelector(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent += </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> + received</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onclose = () =&gt; {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.log({</span></span>\n<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onerror = (error) =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          error</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Let\u2019s start our application and start getting real-time transcriptions. From our terminal, run <code is:raw>python main.py</code> and pull up our localhost on port 5555, <code is:raw>http://127.0.0.1:5555/</code>. If we haven\u2019t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-final-screenshot.png" alt="final result in Flask live streaming example"></p>\n<p>Congratulations on building a real-time transcription project with Flask and Deepgram. You can find the <a href="https://github.com/deepgram-devs/live-transcription-flask">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcription-flask/index.md" };
function rawContent() {
  return "\nHave you ever wondered how to do live voice-to-text transcription with Python? We'll use Flask 2.0 and Deepgram to achieve our goal in this article.\n\nFlask 2.0 is a familiar, lightweight, micro web framework that is very flexible. It doesn't make decisions for us, meaning we are free to choose which database, templating engine, etc., to use without lacking functionality. Deepgram uses AI speech recognition to do real-time audio transcription, and we'll be using our Python SDK.\n\nThe final code for this project is located [here in Github](https://github.com/deepgram-devs/live-transcription-flask), if you want to jump ahead.\n\n## Getting Started\n\nBefore we start, it's essential to generate a Deepgram API key to use in our project. We can [go here](https://console.deepgram.com/signup?jump=keys). For this tutorial, we'll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. Since we're using `async` in Flask, you'll need to have Python 3.7 or higher. We'll also need to set up a virtual environment to hold our project. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n## Install Dependencies\n\nCreate a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.\n\nFor a quick reference, here are the commands we need to create and activate our virtual environment:\n\n    mkdir [% NAME_OF_YOUR_DIRECTORY %]\n    cd [% NAME_OF_YOUR_DIRECTORY %]\n    python3 -m venv venv\n    source venv/bin/activate\n\nWe need to install the following dependencies from our terminal:\n\n*   The latest version of Flask\n*   The Deepgram Python SDK\n*   The dotenv library, which helps us work with our environment variables\n*   The aiohttp-wsgi, which allows us to work with WebSockets in our WSGI application\n\n{/*<!---->*/}\n\n    pip install Flask\n    pip install deepgram-sdk\n    pip install python-dotenv\n    pip install aiohttp-wsgi\n\n## Create a Flask Application\n\nLet's get a starter Flask application up and running that renders an HTML page so that we can progress on our live transcription project.\n\nCreate a file called `main.py` inside our project and a templates folder with an HTML file called `index.html`.\n\n![flask project structure](https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-project-structure.png)\n\nThe `main.py` file will hold our Python code.\n\n```python\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return render_template('index.html')\n```\n\nLastly, we'll store our HTML file inside the templates folder and hold our HTML markup here.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Live Transcription</title>\n  </head>\n  <body>\n    <h1>Transcribe Audio With Flask 2.0</h1>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\"></p>\n  </body>\n</html>\n```\n\nWe have to export it into an environment variable to run the application. In our terminal, type the following:\n\n    export FLASK_APP=main\n\nIf we start our development server from the terminal to run the project using `flask run`, the `index.html` page renders in the browser.\n\n![render the index HTML page](https://res.cloudinary.com/deepgram/image/upload/v1647977919/blog/2022/03/live-transcription-flask/flask-index-html.png)\n\n## Add Deepgram API Key\n\nOur API Key will allow access to use Deepgram. Let's create a `.env` file that will store our key. When we push our code to Github, hide our key, make sure to add this to our `.gitignore` file.\n\n![hide api key with .env file](https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-env-file.png)\n\nIn our file, add the following environment variable with our Deepgram API key, which we can [grab here](https://console.deepgram.com/signup?jump=keys):\n\n    DEEPGRAM_API_KEY=\"abcde12345\"\n\nThe below code shows how to load our key into the project and access it in `main.py`:\n\n```python\nfrom deepgram import Deepgram\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\napp = Flask(__name__)\n\ndg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n```\n\n## Get Mic Data From Browser\n\nOur next step is to get the microphone data from the browser, which will require a little JavaScript.\n\nUse this code inside the `<script><\/script>` tag in `index.html` to access data from the user's microphone.\n\n```js\n<script>\n  navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n    const mediaRecorder = new MediaRecorder(stream)\n  })\n<\/script>\n```\n\nIf you want to learn more about working with the mic in the browser, please check out [this post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n## Websocket Connection Between Server and Browser\n\nWe'll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.\n\nThe first WebSocket connection is between our Python server that holds our Flask application and our browser client. In this project, we'll use [aiohttp](https://docs.aiohttp.org/en/v3.8.1/faq.html) to handle the WebSocket server.\n\nWe need to create a WebSocket endpoint that listens to our Flask web server code for client connections. In the `main.py` file, add the following code:\n\n```python\nimport asyncio\nfrom aiohttp import web\nfrom aiohttp_wsgi import WSGIHandler\n\napp = Flask('aioflask')\n\nasync def socket(request): #new\n   ws = web.WebSocketResponse()\n   await ws.prepare(request)\n\n   deepgram_socket = await process_audio(ws)\n\n   while True:\n       data = await ws.receive_bytes()\n       deepgram_socket.send(data)\n```\n\nThis code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. We're defining a variable called `deepgram_socket`, which calls a function `process_audio` and opens the connection to Deepgram. In this user-defined method, we'll also connect to Deepgram. While the server and browser connection stays open, we'll wait for messages and send data.\n\nIn `index.html`, this code listens for a client connection then connects to the client like so:\n\n```js\n<script>... const socket = new WebSocket('ws://localhost:5555/listen')<\/script>\n```\n\n## Websocket Connection Between Server and Deepgram\n\nWe need to establish a connection between our central Flask server and Deepgram to get the audio and do our real-time transcription. Add this code to our `main.py` file.\n\n```python\nif __name__ == \"__main__\": # new\n   loop = asyncio.get_event_loop()\n   aio_app = web.Application()\n   wsgi = WSGIHandler(app)\n   aio_app.router.add_route('*', '/{path_info: *}', wsgi.handle_request)\n   aio_app.router.add_route('GET', '/listen', socket)\n   web.run_app(aio_app, port=5555)\n```\n\nThis code adds a route to the endpoint `listen` to the `socket` function. The equivalent of this is `app.route` in Flask.\n\nNext, let's create our functions to process the audio, get the transcript from that audio and connect to Deepgram. In our `main.py`, add this code.\n\n```python\nfrom typing import Dict, Callable\n\nasync def process_audio(fast_socket: web.WebSocketResponse):\n   async def get_transcript(data: Dict) -> None:\n       if 'channel' in data:\n           transcript = data['channel']['alternatives'][0]['transcript']\n\n           if transcript:\n               await fast_socket.send_str(transcript)\n\n   deepgram_socket = await connect_to_deepgram(get_transcript)\n\n   return deepgram_socket\n\nasync def connect_to_deepgram(transcript_received_handler: Callable[[Dict], None]) -> str:\n   try:\n       socket = await dg_client.transcription.live({'punctuate': True, 'interim_results': False})\n       socket.registerHandler(socket.event.CLOSE, lambda c: print(f'Connection closed with code {c}.'))\n       socket.registerHandler(socket.event.TRANSCRIPT_RECEIVED, transcript_received_handler)\n\n       return socket\n   except Exception as e:\n       raise Exception(f'Could not open socket: {e}')\n```\n\nThe `process_audio` function takes `fast_socket` as an argument, which will keep the connection open between the client and the Flask server. We also connect to Deepgram and pass in the `get_transcript` function. This function gets the transcript and sends it back to the client.\n\nThe `connect_to_deepgram` function creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects.\n\nLastly, in our `index.html`, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out [this blog post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n```js\n<script>\n  socket.onopen = () => {\n    document.querySelector('#status').textContent = 'Connected'\n    console.log({\n        event: 'onopen'\n    })\n    mediaRecorder.addEventListener('dataavailable', async (event) => {\n        if (event.data.size > 0 && socket.readyState == 1) {\n            socket.send(event.data)\n        }\n    })\n    mediaRecorder.start(250)\n}\n\n  socket.onmessage = (message) => {\n      const received = message.data\n      if (received) {\n          console.log(received)\n          document.querySelector('#transcript').textContent += ' ' + received\n      }\n  }\n\n  socket.onclose = () => {\n      console.log({\n          event: 'onclose'\n      })\n  }\n\n  socket.onerror = (error) => {\n      console.log({\n          event: 'onerror',\n          error\n      })\n  }\n<\/script>\n```\n\nLet's start our application and start getting real-time transcriptions. From our terminal, run `python main.py` and pull up our localhost on port 5555, `http://127.0.0.1:5555/`. If we haven't already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:\n\n![final result in Flask live streaming example](https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-final-screenshot.png)\n\nCongratulations on building a real-time transcription project with Flask and Deepgram. You can find the [code here](https://github.com/deepgram-devs/live-transcription-flask) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ";
}
function compiledContent() {
  return '<p>Have you ever wondered how to do live voice-to-text transcription with Python? We\u2019ll use Flask 2.0 and Deepgram to achieve our goal in this article.</p>\n<p>Flask 2.0 is a familiar, lightweight, micro web framework that is very flexible. It doesn\u2019t make decisions for us, meaning we are free to choose which database, templating engine, etc., to use without lacking functionality. Deepgram uses AI speech recognition to do real-time audio transcription, and we\u2019ll be using our Python SDK.</p>\n<p>The final code for this project is located <a href="https://github.com/deepgram-devs/live-transcription-flask">here in Github</a>, if you want to jump ahead.</p>\n<h2 id="getting-started">Getting Started</h2>\n<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can <a href="https://console.deepgram.com/signup?jump=keys">go here</a>. For this tutorial, we\u2019ll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. Since we\u2019re using <code is:raw>async</code> in Flask, you\u2019ll need to have Python 3.7 or higher. We\u2019ll also need to set up a virtual environment to hold our project. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>\n<h2 id="install-dependencies">Install Dependencies</h2>\n<p>Create a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.</p>\n<p>For a quick reference, here are the commands we need to create and activate our virtual environment:</p>\n<p>mkdir [% NAME_OF_YOUR_DIRECTORY %]\ncd [% NAME_OF_YOUR_DIRECTORY %]\npython3 -m venv venv\nsource venv/bin/activate</p>\n<p>We need to install the following dependencies from our terminal:</p>\n<ul>\n<li>The latest version of Flask</li>\n<li>The Deepgram Python SDK</li>\n<li>The dotenv library, which helps us work with our environment variables</li>\n<li>The aiohttp-wsgi, which allows us to work with WebSockets in our WSGI application</li>\n</ul>\n{/*<!---->*/}\n<p>pip install Flask\npip install deepgram-sdk\npip install python-dotenv\npip install aiohttp-wsgi</p>\n<h2 id="create-a-flask-application">Create a Flask Application</h2>\n<p>Let\u2019s get a starter Flask application up and running that renders an HTML page so that we can progress on our live transcription project.</p>\n<p>Create a file called <code is:raw>main.py</code> inside our project and a templates folder with an HTML file called <code is:raw>index.html</code>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-project-structure.png" alt="flask project structure"></p>\n<p>The <code is:raw>main.py</code> file will hold our Python code.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, render_template</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Lastly, we\u2019ll store our HTML file inside the templates folder and hold our HTML markup here.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Live Transcription&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Transcribe Audio With Flask 2.0&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>We have to export it into an environment variable to run the application. In our terminal, type the following:</p>\n<p>export FLASK_APP=main</p>\n<p>If we start our development server from the terminal to run the project using <code is:raw>flask run</code>, the <code is:raw>index.html</code> page renders in the browser.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647977919/blog/2022/03/live-transcription-flask/flask-index-html.png" alt="render the index HTML page"></p>\n<h2 id="add-deepgram-api-key">Add Deepgram API Key</h2>\n<p>Our API Key will allow access to use Deepgram. Let\u2019s create a <code is:raw>.env</code> file that will store our key. When we push our code to Github, hide our key, make sure to add this to our <code is:raw>.gitignore</code> file.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-env-file.png" alt="hide api key with .env file"></p>\n<p>In our file, add the following environment variable with our Deepgram API key, which we can <a href="https://console.deepgram.com/signup?jump=keys">grab here</a>:</p>\n<p>DEEPGRAM_API_KEY=\u201Cabcde12345\u201D</p>\n<p>The below code shows how to load our key into the project and access it in <code is:raw>main.py</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<h2 id="get-mic-data-from-browser">Get Mic Data From Browser</h2>\n<p>Our next step is to get the microphone data from the browser, which will require a little JavaScript.</p>\n<p>Use this code inside the <code is:raw>&lt;script&gt;&lt;/script&gt;</code> tag in <code is:raw>index.html</code> to access data from the user\u2019s microphone.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  navigator.mediaDevices.getUserMedia(</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">).then((stream) =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    const mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>If you want to learn more about working with the mic in the browser, please check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this post</a>.</p>\n<h2 id="websocket-connection-between-server-and-browser">Websocket Connection Between Server and Browser</h2>\n<p>We\u2019ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.</p>\n<p>The first WebSocket connection is between our Python server that holds our Flask application and our browser client. In this project, we\u2019ll use <a href="https://docs.aiohttp.org/en/v3.8.1/faq.html">aiohttp</a> to handle the WebSocket server.</p>\n<p>We need to create a WebSocket endpoint that listens to our Flask web server code for client connections. In the <code is:raw>main.py</code> file, add the following code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> aiohttp </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> web</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> aiohttp_wsgi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> WSGIHandler</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #A5D6FF">&#39;aioflask&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">socket</span><span style="color: #C9D1D9">(request): </span><span style="color: #8B949E">#new</span></span>\n<span class="line"><span style="color: #C9D1D9">   ws </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> web.WebSocketResponse()</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.prepare(request)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   deepgram_socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> process_audio(ws)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.receive_bytes()</span></span>\n<span class="line"><span style="color: #C9D1D9">       deepgram_socket.send(data)</span></span></code></pre>\n<p>This code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. We\u2019re defining a variable called <code is:raw>deepgram_socket</code>, which calls a function <code is:raw>process_audio</code> and opens the connection to Deepgram. In this user-defined method, we\u2019ll also connect to Deepgram. While the server and browser connection stays open, we\u2019ll wait for messages and send data.</p>\n<p>In <code is:raw>index.html</code>, this code listens for a client connection then connects to the client like so:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;... const socket = new WebSocket(&#39;ws://localhost:5555/listen&#39;)&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="websocket-connection-between-server-and-deepgram">Websocket Connection Between Server and Deepgram</h2>\n<p>We need to establish a connection between our central Flask server and Deepgram to get the audio and do our real-time transcription. Add this code to our <code is:raw>main.py</code> file.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #8B949E"># new</span></span>\n<span class="line"><span style="color: #C9D1D9">   loop </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.get_event_loop()</span></span>\n<span class="line"><span style="color: #C9D1D9">   aio_app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> web.Application()</span></span>\n<span class="line"><span style="color: #C9D1D9">   wsgi </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> WSGIHandler(app)</span></span>\n<span class="line"><span style="color: #C9D1D9">   aio_app.router.add_route(</span><span style="color: #A5D6FF">&#39;*&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/</span><span style="color: #79C0FF">{path_info</span><span style="color: #FF7B72">:</span><span style="color: #79C0FF"> *}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">, wsgi.handle_request)</span></span>\n<span class="line"><span style="color: #C9D1D9">   aio_app.router.add_route(</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/listen&#39;</span><span style="color: #C9D1D9">, socket)</span></span>\n<span class="line"><span style="color: #C9D1D9">   web.run_app(aio_app, </span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5555</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>This code adds a route to the endpoint <code is:raw>listen</code> to the <code is:raw>socket</code> function. The equivalent of this is <code is:raw>app.route</code> in Flask.</p>\n<p>Next, let\u2019s create our functions to process the audio, get the transcript from that audio and connect to Deepgram. In our <code is:raw>main.py</code>, add this code.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict, Callable</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">process_audio</span><span style="color: #C9D1D9">(fast_socket: web.WebSocketResponse):</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_transcript</span><span style="color: #C9D1D9">(data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data:</span></span>\n<span class="line"><span style="color: #C9D1D9">           transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> transcript:</span></span>\n<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> fast_socket.send_str(transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   deepgram_socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> connect_to_deepgram(get_transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deepgram_socket</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_to_deepgram</span><span style="color: #C9D1D9">(transcript_received_handler: Callable[[Dict], </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">]) -&gt; </span><span style="color: #79C0FF">str</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">       socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> dg_client.transcription.live({</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;interim_results&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">False</span><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">       socket.registerHandler(socket.event.</span><span style="color: #79C0FF">CLOSE</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">lambda</span><span style="color: #C9D1D9"> c: </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Connection closed with code </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">c</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">.&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">       socket.registerHandler(socket.event.</span><span style="color: #79C0FF">TRANSCRIPT_RECEIVED</span><span style="color: #C9D1D9">, transcript_received_handler)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> socket</span></span>\n<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> e:</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Could not open socket: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">e</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>The <code is:raw>process_audio</code> function takes <code is:raw>fast_socket</code> as an argument, which will keep the connection open between the client and the Flask server. We also connect to Deepgram and pass in the <code is:raw>get_transcript</code> function. This function gets the transcript and sends it back to the client.</p>\n<p>The <code is:raw>connect_to_deepgram</code> function creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects.</p>\n<p>Lastly, in our <code is:raw>index.html</code>, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this blog post</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onopen = () =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onmessage = (message) =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      const received </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> message.data</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9"> (received) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.log(received)</span></span>\n<span class="line"><span style="color: #C9D1D9">          document.querySelector(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent += </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> + received</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onclose = () =&gt; {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.log({</span></span>\n<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.onerror = (error) =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          error</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Let\u2019s start our application and start getting real-time transcriptions. From our terminal, run <code is:raw>python main.py</code> and pull up our localhost on port 5555, <code is:raw>http://127.0.0.1:5555/</code>. If we haven\u2019t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-final-screenshot.png" alt="final result in Flask live streaming example"></p>\n<p>Congratulations on building a real-time transcription project with Flask and Deepgram. You can find the <a href="https://github.com/deepgram-devs/live-transcription-flask">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcription-flask/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Have you ever wondered how to do live voice-to-text transcription with Python? We’ll use Flask 2.0 and Deepgram to achieve our goal in this article.</p>
<p>Flask 2.0 is a familiar, lightweight, micro web framework that is very flexible. It doesn’t make decisions for us, meaning we are free to choose which database, templating engine, etc., to use without lacking functionality. Deepgram uses AI speech recognition to do real-time audio transcription, and we’ll be using our Python SDK.</p>
<p>The final code for this project is located <a href="https://github.com/deepgram-devs/live-transcription-flask">here in Github</a>, if you want to jump ahead.</p>
<h2 id="getting-started">Getting Started</h2>
<p>Before we start, it’s essential to generate a Deepgram API key to use in our project. We can <a href="https://console.deepgram.com/signup?jump=keys">go here</a>. For this tutorial, we’ll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. Since we’re using <code>async</code> in Flask, you’ll need to have Python 3.7 or higher. We’ll also need to set up a virtual environment to hold our project. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<h2 id="install-dependencies">Install Dependencies</h2>
<p>Create a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.</p>
<p>For a quick reference, here are the commands we need to create and activate our virtual environment:</p>
<p>mkdir [% NAME_OF_YOUR_DIRECTORY %]
cd [% NAME_OF_YOUR_DIRECTORY %]
python3 -m venv venv
source venv/bin/activate</p>
<p>We need to install the following dependencies from our terminal:</p>
<ul>
<li>The latest version of Flask</li>
<li>The Deepgram Python SDK</li>
<li>The dotenv library, which helps us work with our environment variables</li>
<li>The aiohttp-wsgi, which allows us to work with WebSockets in our WSGI application</li>
</ul>

<p>pip install Flask
pip install deepgram-sdk
pip install python-dotenv
pip install aiohttp-wsgi</p>
<h2 id="create-a-flask-application">Create a Flask Application</h2>
<p>Let’s get a starter Flask application up and running that renders an HTML page so that we can progress on our live transcription project.</p>
<p>Create a file called <code>main.py</code> inside our project and a templates folder with an HTML file called <code>index.html</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-project-structure.png" alt="flask project structure"></p>
<p>The <code>main.py</code> file will hold our Python code.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Lastly, we’ll store our HTML file inside the templates folder and hold our HTML markup here.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Live Transcription&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Transcribe Audio With Flask 2.0&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>We have to export it into an environment variable to run the application. In our terminal, type the following:</p>
<p>export FLASK_APP=main</p>
<p>If we start our development server from the terminal to run the project using <code>flask run</code>, the <code>index.html</code> page renders in the browser.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647977919/blog/2022/03/live-transcription-flask/flask-index-html.png" alt="render the index HTML page"></p>
<h2 id="add-deepgram-api-key">Add Deepgram API Key</h2>
<p>Our API Key will allow access to use Deepgram. Let’s create a <code>.env</code> file that will store our key. When we push our code to Github, hide our key, make sure to add this to our <code>.gitignore</code> file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-env-file.png" alt="hide api key with .env file"></p>
<p>In our file, add the following environment variable with our Deepgram API key, which we can <a href="https://console.deepgram.com/signup?jump=keys">grab here</a>:</p>
<p>DEEPGRAM_API_KEY=“abcde12345”</p>
<p>The below code shows how to load our key into the project and access it in <code>main.py</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<h2 id="get-mic-data-from-browser">Get Mic Data From Browser</h2>
<p>Our next step is to get the microphone data from the browser, which will require a little JavaScript.</p>
<p>Use this code inside the <code>&lt;script&gt;&lt;/script&gt;</code> tag in <code>index.html</code> to access data from the user’s microphone.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  navigator.mediaDevices.getUserMedia(</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">).then((stream) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">    const mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>If you want to learn more about working with the mic in the browser, please check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this post</a>.</p>
<h2 id="websocket-connection-between-server-and-browser">Websocket Connection Between Server and Browser</h2>
<p>We’ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.</p>
<p>The first WebSocket connection is between our Python server that holds our Flask application and our browser client. In this project, we’ll use <a href="https://docs.aiohttp.org/en/v3.8.1/faq.html">aiohttp</a> to handle the WebSocket server.</p>
<p>We need to create a WebSocket endpoint that listens to our Flask web server code for client connections. In the <code>main.py</code> file, add the following code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> aiohttp </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> web</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> aiohttp_wsgi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> WSGIHandler</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #A5D6FF">&#39;aioflask&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">socket</span><span style="color: #C9D1D9">(request): </span><span style="color: #8B949E">#new</span></span>
<span class="line"><span style="color: #C9D1D9">   ws </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> web.WebSocketResponse()</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.prepare(request)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   deepgram_socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> process_audio(ws)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.receive_bytes()</span></span>
<span class="line"><span style="color: #C9D1D9">       deepgram_socket.send(data)</span></span></code></pre>
<p>This code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. We’re defining a variable called <code>deepgram_socket</code>, which calls a function <code>process_audio</code> and opens the connection to Deepgram. In this user-defined method, we’ll also connect to Deepgram. While the server and browser connection stays open, we’ll wait for messages and send data.</p>
<p>In <code>index.html</code>, this code listens for a client connection then connects to the client like so:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;... const socket = new WebSocket(&#39;ws://localhost:5555/listen&#39;)&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="websocket-connection-between-server-and-deepgram">Websocket Connection Between Server and Deepgram</h2>
<p>We need to establish a connection between our central Flask server and Deepgram to get the audio and do our real-time transcription. Add this code to our <code>main.py</code> file.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #8B949E"># new</span></span>
<span class="line"><span style="color: #C9D1D9">   loop </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> asyncio.get_event_loop()</span></span>
<span class="line"><span style="color: #C9D1D9">   aio_app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> web.Application()</span></span>
<span class="line"><span style="color: #C9D1D9">   wsgi </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> WSGIHandler(app)</span></span>
<span class="line"><span style="color: #C9D1D9">   aio_app.router.add_route(</span><span style="color: #A5D6FF">&#39;*&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/</span><span style="color: #79C0FF">{path_info</span><span style="color: #FF7B72">:</span><span style="color: #79C0FF"> *}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">, wsgi.handle_request)</span></span>
<span class="line"><span style="color: #C9D1D9">   aio_app.router.add_route(</span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/listen&#39;</span><span style="color: #C9D1D9">, socket)</span></span>
<span class="line"><span style="color: #C9D1D9">   web.run_app(aio_app, </span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5555</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This code adds a route to the endpoint <code>listen</code> to the <code>socket</code> function. The equivalent of this is <code>app.route</code> in Flask.</p>
<p>Next, let’s create our functions to process the audio, get the transcript from that audio and connect to Deepgram. In our <code>main.py</code>, add this code.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict, Callable</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">process_audio</span><span style="color: #C9D1D9">(fast_socket: web.WebSocketResponse):</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_transcript</span><span style="color: #C9D1D9">(data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data:</span></span>
<span class="line"><span style="color: #C9D1D9">           transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> fast_socket.send_str(transcript)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   deepgram_socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> connect_to_deepgram(get_transcript)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deepgram_socket</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_to_deepgram</span><span style="color: #C9D1D9">(transcript_received_handler: Callable[[Dict], </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">]) -&gt; </span><span style="color: #79C0FF">str</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> dg_client.transcription.live({</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;interim_results&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">False</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">       socket.registerHandler(socket.event.</span><span style="color: #79C0FF">CLOSE</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">lambda</span><span style="color: #C9D1D9"> c: </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Connection closed with code </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">c</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">.&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">       socket.registerHandler(socket.event.</span><span style="color: #79C0FF">TRANSCRIPT_RECEIVED</span><span style="color: #C9D1D9">, transcript_received_handler)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> socket</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> e:</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Could not open socket: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">e</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>The <code>process_audio</code> function takes <code>fast_socket</code> as an argument, which will keep the connection open between the client and the Flask server. We also connect to Deepgram and pass in the <code>get_transcript</code> function. This function gets the transcript and sends it back to the client.</p>
<p>The <code>connect_to_deepgram</code> function creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects.</p>
<p>Lastly, in our <code>index.html</code>, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this blog post</a>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  socket.onopen = () =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">        event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onmessage = (message) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      const received </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> message.data</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9"> (received) {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.log(received)</span></span>
<span class="line"><span style="color: #C9D1D9">          document.querySelector(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent += </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> + received</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onclose = () =&gt; {</span></span>
<span class="line"><span style="color: #C9D1D9">      console.log({</span></span>
<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onerror = (error) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          error</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Let’s start our application and start getting real-time transcriptions. From our terminal, run <code>python main.py</code> and pull up our localhost on port 5555, <code>http://127.0.0.1:5555/</code>. If we haven’t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646232661/blog/2022/03/live-transcription-flask/flask-final-screenshot.png" alt="final result in Flask live streaming example"></p>
<p>Congratulations on building a real-time transcription project with Flask and Deepgram. You can find the <a href="https://github.com/deepgram-devs/live-transcription-flask">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcription-flask/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
