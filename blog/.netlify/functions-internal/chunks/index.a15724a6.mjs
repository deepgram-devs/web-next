import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "pulling-podcast-episodes-from-an-rss-feed", "text": "Pulling Podcast Episodes from an RSS Feed" }, { "depth": 2, "slug": "building-the-podcast-search-engine", "text": "Building the Podcast Search Engine" }, { "depth": 3, "slug": "receiving-and-responding-to-requests", "text": "Receiving and Responding to Requests" }, { "depth": 3, "slug": "searching-the-podcast-transcript", "text": "Searching the Podcast Transcript" }, { "depth": 2, "slug": "building-the-ugliest-user-interface", "text": "Building the Ugliest User Interface" }, { "depth": 3, "slug": "the-search-interface", "text": "The Search Interface" }, { "depth": 3, "slug": "displaying-the-search-results", "text": "Displaying the Search Results" }, { "depth": 3, "slug": "getting-a-little-fancy", "text": "Getting a Little Fancy" }, { "depth": 2, "slug": "final-results", "text": "Final Results" }], "source": '\r\nSimone Giertz has a great [TED Talk](https://www.youtube.com/watch?v=c0bsKc4tiuY)\r\nwhere she extols the virtues of building useless things. I often find myself\r\nbuilding useless things to teach others about new technologies and development\r\npractices. So when I started picking up Python, building another useless thing\r\nseemed like the best way to start.\r\n\r\nSince Python is an object-oriented language, I expected to pick it up quickly.\r\nAfter decades of .NET and JavaScript, OOP languages are my safe space. But\r\nbeyond the syntax, what type of things do I need to know? I made a list:\r\n\r\n*   Loops and conditions\r\n*   File access\r\n*   HTTP requests\r\n\r\nThen there were questions like "could I build an API?" and "what do Python\r\ndevelopers do for front-ends?" Of course, Deepgram has a Python SDK so gaining\r\nexperience using it would be beneficial and I could even provide feedback to the\r\nfolks that are building it. That meant I needed to do something with audio. HTTP\r\nrequests, audio, files, loops, and conditions... clearly, I needed to build a\r\nsearch engine for podcasts.\r\n\r\nSince I\'m still learning Python, I leaned on our team at Deepgram to help me\r\nspeed up the process. First up, accessing a podcast\'s RSS feed and identifying\r\nthe URL to the mp3 files.\r\n\r\n## Pulling Podcast Episodes from an RSS Feed\r\n\r\nNeil deGrasse Tyson has a great podcast called\r\n[StarTalk Radio](https://startalkmedia.com/) that would provide tons of\r\nsearchable words. Its RSS feed is located at\r\nhttps://feeds.simplecast.com/4T39_jAj, so I needed to read that and pull in\r\nindividual episodes. Originally, I planned to save the data from the feed into\r\na PostgreSQL or MySQL database but decided to keep it simple by just saving the\r\ninfo from one episode to a Python file.\r\n\r\nI created a file named `load.py` to get the episode information and transcribe\r\nthe audio. You can see the code below, but the TL;DR is that it:\r\n\r\n*   Downloads the RSS feed locally to a file called `theRSSfeed.xml`\r\n*   Parses the XML in that file to find all the mp3 URLs\r\n*   Takes the first episode and feed its mp3 to Deepgram for transcription\r\n*   Saves the transcript that Deepgram generates to a file named `podcast_data.py`\r\n\r\n```python\r\n# use python3\r\n\r\nimport requests\r\nfrom os.path import exists\r\nimport xml.etree.ElementTree as ET\r\nfrom urllib.parse import scheme_chars, urlparse, parse_qs\r\nimport json\r\n\r\n# testing to see if we already downloaded an xml file\r\n# if not, download it and save to file\r\n\r\nthe_rss_file = "theRSSfeed.xml"\r\nfile_exists = False\r\nfile_exists = exists(the_rss_file)\r\nif not file_exists:\r\n    print("no file found:",  the_rss_file, "... downloading ...")\r\n    url = "https://feeds.simplecast.com/4T39_jAj"  # startalk podcast rss feed\r\n    response = requests.get(url)\r\n    the_content = response.content\r\n    with open(the_rss_file, "wb") as outfile:\r\n        outfile.write(the_content)\r\nelse:\r\n    print("found file:",  the_rss_file, "... using it ...")\r\n    with open(the_rss_file, "rb") as infile:\r\n        the_content = infile.read()\r\n\r\n# grab the tree object from the parsed xml file\r\n\r\nroot = ET.fromstring(the_content)\r\n\r\n# loop through it and find all mp3s in the document\r\n# (the way I found which query to make [the "enclosure" query])\r\n# is by using my eyeballs to find the relevant location of mp3s\r\n# in the rss feed, other rss feeds might be different\r\n\r\nlist_of_mp3s = []\r\nfor thing in root.iter(\'enclosure\'):\r\n    full_url_mp3 = thing.attrib["url"]\r\n    parsed_url = urlparse(full_url_mp3)  # stripping off query params\r\n    the_mp3_url = parsed_url.scheme + "://" + parsed_url.hostname + parsed_url.path\r\n    list_of_mp3s.append(the_mp3_url)\r\n\r\nfirst_mp3 = list_of_mp3s[:1][0]  # take the first\r\n\r\n# now feed this url to DGs transcription API. You would keep track of the\r\n# transcription object you get back so you can use it later for\r\n# searching capabilities.\r\n\r\nDG_API_KEY = "YOUR_DEEPGRAM_API_KEY_HERE"\r\n\r\nheaders = {\r\n    \'content-type\': "application/json",\r\n    \'Authorization\': "Token " + DG_API_KEY\r\n}\r\n\r\nresponse = requests.post(\r\n    "https://api.deepgram.com/v1/listen?punctuate=true&utterances=true", headers=headers, json={"url": first_mp3})\r\n\r\nprint(first_mp3)\r\nopen(\'/workspace/podcast_data.py\',\r\n     \'wb\').write(response.content)\r\n```\r\n\r\nThen I ran `python load.py` and BAM!, I\'ve got a `podcast_data.py` with the\r\ntranscript of the episode. Now to start building an API that I can send search\r\nterms to.\r\n\r\n## Building the Podcast Search Engine\r\n\r\nI spent some time reading\r\n[Tonya](https://blog.deepgram.com/authors/tonya-sims/)\'s blog posts on\r\n[FastAPI](https://blog.deepgram.com/live-transcription-fastapi/) and\r\n[Django](https://blog.deepgram.com/live-transcription-django/),\r\nbut eventually decided on [Flask](https://blog.deepgram.com/live-transcription-flask/)\r\nto build the back-end API.\r\n\r\n### Receiving and Responding to Requests\r\n\r\nBefore I could receive search terms and respond, I had to figure out how to\r\nreceive *any* request and return a response. Luckily, the Flask documentation\r\nprovides several good examples of doing that. I started by installing Flask with\r\npip.\r\n\r\n```bash\r\npip install Flask\r\n```\r\n\r\nFlask\'s documentation told me that if I name my file `app.py` I can default to\r\nstarting the server using `flask run` in the terminal. I started with a very\r\nbasic `app.py` to see if I could return anything.\r\n\r\n```python\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.get("/")\r\ndef index():\r\n    return {\r\n      "name": "Hello World"\r\n    }\r\n\r\n```\r\n\r\nThat little bit of Python returns a JSON object. Visiting `http://127.0.0.1:5000`,\r\nconfirmed that it responded with the JSON I expected. Now I can receive a\r\nrequest and respond to it.\r\n\r\nNext, I needed to be able to receive data that is sent via an HTTP POST request.\r\nAgain, I was saved by the Flask documentation. I knew that I would eventually be\r\nsending a form field named `search`, so I added a new method to the `app.py`\r\nfile:\r\n\r\n```python\r\n@app.post("/")\r\ndef index_post():\r\n    search = request.form[\'search\']\r\n    return {\r\n        "name": "You searched for " + search\r\n    }\r\n```\r\n\r\n> Note on the above: It also requires you to modify the `from flask import Flask`\r\n> to `from flask import Flask, request`.\r\n\r\nA quick test confirmed that I could pass in form values and respond with them.\r\nWith those wins under my belt, I was ready to tackle the job of searching\r\nthrough the transcript.\r\n\r\n### Searching the Podcast Transcript\r\n\r\nTo make sure I\'m comparing apples to apples, I needed some basic text\r\nnormalization. The `text_normalize` function lowercases everything, removes\r\ncommon punctuation, removes unnecessary whitespace, and flattens the string to\r\nASCII.\r\n\r\n```python\r\ndef deep_replace(inString, inQuery, inReplacement):\r\n    text = inString\r\n    query = inQuery\r\n    replacement = inReplacement\r\n    text = text.replace(query, replacement)\r\n    if query in text:\r\n        return deep_replace(text, query, replacement)\r\n    else:\r\n        return text\r\n\r\ndef text_normalize(inString):\r\n    text = inString\r\n    text = normalize(\'NFKD\', text).encode(\r\n        \'ascii\', \'ignore\').decode(\'ascii\').lower()\r\n    text = deep_replace(text, "?", " ")\r\n    text = deep_replace(text, ".", " ")\r\n    text = deep_replace(text, "!", " ")\r\n    text = deep_replace(text, ",", " ")\r\n    text = deep_replace(text, "-", " ")\r\n    text = " ".join(text.split())\r\n    return text\r\n```\r\n\r\nOnce I knew I could compare strings relatively well, it was time to look through\r\nthe transcript to find a search phrase. All the magic of the search engine takes\r\nplace in the `search` function. First, it normalizes the phrase I\'m searching\r\nfor and then looks through all the words in the transcript for a match.\r\n\r\nFor any matches, it creates a string containing the matching word and the five\r\nwords that precede and follow the matching word. The match and its corresponding\r\nphrase are loaded to an array called `query_results` that is finally returned.\r\n\r\n```python\r\ndef search(phrase):\r\n    the_query = phrase\r\n    the_query = text_normalize(the_query)\r\n    print(the_query)\r\n\r\n    # word array search\r\n    the_body_array = podcast_data.data["results"]["channels"][0]["alternatives"][0]["words"]\r\n    the_body_list = []\r\n    for thing in the_body_array:\r\n        the_body_list.append(text_normalize(thing["word"]))\r\n    query_index_list = [idx for idx, s in enumerate(\r\n        the_body_list) if the_query in s]\r\n\r\n    query_results = []\r\n    for i in query_index_list:\r\n        backforwardcount = 5\r\n        quick_text = " ".join(the_body_list[max(\r\n            0, i-backforwardcount):min(i+backforwardcount, len(the_body_list))])\r\n        query_results.append([the_body_array[i], quick_text])\r\n    return query_results\r\n```\r\n\r\nWith the search function ready, it was time to update the POST route of my API.\r\nI passed the search phrase submitted in the POST request to my `search` function\r\nand then returned the result.\r\n\r\n```python\r\n@app.post("/")\r\ndef index_post():\r\n    phrase = request.form[\'search\']\r\n    query_results = search(phrase=phrase)\r\n    return query_results\r\n```\r\n\r\nJust like magic, I could send requests to my API and have it return matches in\r\nthe podcast. But no one wants to send cURL requests all day. It was time to\r\nbuild the worst user interface for a search engine ever.\r\n\r\n## Building the Ugliest User Interface\r\n\r\nThe last step was to build a user interface. Fortunately, since I was building\r\nthe ugliest search engine, the bar was low on how it looked. In fact, it was a\r\nbit of a challenge to not try and improve the interface. \u{1F601}\r\n\r\n### The Search Interface\r\n\r\nOne of the reasons I chose to use Flask on the back-end was the fact that it\r\nsupported [Jinja2](https://pypi.org/project/Jinja2/) out of the box. I had never\r\nused Jinja2, but when someone mentioned it in our Slack, I noticed how similar\r\nit was to [Handlebars](https://handlebarsjs.com/) for JavaScript developers.\r\n\r\nMy goal was to create one HTML file that could display the search box and\r\nresults. To separate it from my Python code, I created a new HTML file\r\nat `templates/index.html`. It was very basic with an H1 tag and a form that\r\nwould send a post back to its route.\r\n\r\n```html\r\n<html>\r\n    <head>\r\n        <title>Podcast Search</title>\r\n    </head>\r\n\r\n    <body style="text-align:center;">\r\n        <h1>World\'s Ugliest Podcast Search</h1>\r\n        <form action=\'#\' method=\'POST\'>\r\n            <label for=\'search\'>Search for a word</label><br />\r\n            <input type=\'text\' name=\'search\' value=\'{{ search }}\' /><br />\r\n            <button type="submit">Search</button>\r\n        </form>\r\n    </body>\r\n</html>\r\n```\r\n\r\nOnce the HTML file was in place, I updated the original HTTP GET request to\r\nserve it. Because I\'m injecting the `search` parameter, I needed to supply it\r\nwith an empty string.\r\n\r\n```python\r\n@app.get("/")\r\ndef index():\r\n    return render_template(\'index.html\', search="")\r\n```\r\n\r\nA quick `flask run` in the terminal served up my ugly podcast search engine. To\r\nmy surprise, it was technically already working. When I entered a search phrase\r\nand pressed the \'Search\' button, it sent the search phrase to the API, which\r\nreturned the results as JSON. Of course, that\'s not what I want it to do in the\r\nend, but it was a great feeling to know I was close to the end.\r\n\r\n![Interface of an ugly podcast search engine](https://res.cloudinary.com/deepgram/image/upload/v1661132558/blog/2022/08/podcast-search-engine/original-podcast-search-engine.png)\r\n\r\n### Displaying the Search Results\r\n\r\nWhile a JSON response would be pretty ugly, I was enjoying Jinja2 too much to\r\nnot build an interface to display the results of the search. After the form in\r\nmy `templates/index.html` file, I added an H2 and UL to list the results. If\r\nthere was a search phrase, it shows any results in a list.\r\n\r\n```html\r\n{% if search %}\r\n<h2>Search results for {{ search }}</h2>\r\n\r\n<ul style="list-style: none;">\r\n    {% for result in results %}\r\n    <li style="padding:1rem;">\r\n        {{ result[1] }}\r\n    </li>\r\n    {% endfor %}\r\n</ul>\r\n\r\n{% endif %}\r\n```\r\n\r\nOnce the template was ready, I needed to update my API to return the HTML.\r\nRather than returning the results as JSON, I return `render_template` passing\r\nthe search phrase and the query results.\r\n\r\n```python\r\n@app.post("/")\r\ndef index_post():\r\n    phrase = request.form[\'search\']\r\n    query_results = search(phrase=phrase)\r\n    return render_template(\'index.html\', search=phrase, results=query_results)\r\n```\r\n\r\n![Results interface of the podcast search engine](https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-engine-results.png)\r\n\r\nThere you have it. Searching works and shows all places where a word was spoken.\r\nThe phrases are a nice touch because they give context to what is being said at\r\nthat moment. That should be the end right? Oh no. I\'m nothing if not a little\r\nextra. It was time to add a little pizzazz.\r\n\r\n### Getting a Little Fancy\r\n\r\nWe\'re searching through podcasts. By their nature, they are meant for audio.\r\nWhile I could have stopped by showing the phrase the user was looking for, I\r\nthought it would be cooler if we could play that section of audio. I started by\r\nadding an audio player to the HTML file with the podcast episode I\'m searching\r\nthrough. Users can press play and listen to the podcast if they like, but the\r\nreal fun will happen once they search.\r\n\r\n```html\r\n    <audio controls>\r\n        <source\r\n            src="https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3"\r\n            type="audio/mpeg">\r\n        Your browser does not support the audio element.\r\n    </audio>\r\n```\r\n\r\nNext, I updated the result LI elements to include an anchor tag that will call\r\na JavaScript function. (You know I wouldn\'t get through all this work without\r\nusing a touch of JavaScript.) When it calls the upcoming `seek` function, it\r\nsupplies it with the timestamp of the start of the found word.\r\n\r\n```html\r\n<a href="javascript:void(0);" onclick="seek({{result[0].start}})">{{ result[1] }}</a>\r\n```\r\n\r\nFinally, I added a JavaScript function to the head of the page called `seek`. It\r\nexpects a timestamp parameter. It then grabs the audio player, pauses its\r\nplayback, seeks to timestamp location minus eight-tenths of a second, and plays.\r\nWhy eight-tenths? I found it started the audio a few words before the searched\r\nphrase so you can better hear the word in context.\r\n\r\n```html\r\n<script type="text/javascript">\r\n    function seek(timestamp) {\r\n        const audio = document.getElementsByTagName(\'audio\')[0];\r\n        audio.pause();\r\n        audio.currentTime = timestamp - .8;\r\n        audio.play();\r\n    }\r\n<\/script>\r\n```\r\n\r\n![Results interface with an audio player](https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-results-with-audio-player.png)\r\n\r\n## Final Results\r\n\r\nOverall, I really enjoyed dipping my toes into the Python world. I learned several\r\nthings that are universal to all languages and I\'m excited to learn more. If you\r\nwant to build this fun, but completely useless project, the full Python\r\nand HTML files are below. Enjoy!\r\n\r\n```python\r\n# app.py\r\n\r\nfrom flask import Flask, render_template, request\r\n\r\nfrom unicodedata import normalize\r\nimport podcast_data\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.get("/")\r\ndef index():\r\n    return render_template(\'index.html\', search="")\r\n\r\n\r\n@app.post("/")\r\ndef index_post():\r\n    phrase = request.form[\'search\']\r\n    query_results = search(phrase=phrase)\r\n    return render_template(\'index.html\', search=phrase, results=query_results)\r\n\r\n\r\ndef search(phrase):\r\n    the_query = phrase\r\n    the_query = text_normalize(the_query)\r\n    \r\n    the_body_array = podcast_data.data["results"]["channels"][0]["alternatives"][0]["words"]\r\n    the_body_list = []\r\n    for thing in the_body_array:\r\n        the_body_list.append(text_normalize(thing["word"]))\r\n    query_index_list = [idx for idx, s in enumerate(\r\n        the_body_list) if the_query in s]\r\n\r\n    query_results = []\r\n    for i in query_index_list:\r\n        backforwardcount = 5\r\n        quick_text = " ".join(the_body_list[max(\r\n            0, i-backforwardcount):min(i+backforwardcount, len(the_body_list))])\r\n        query_results.append([the_body_array[i], quick_text])\r\n    return query_results\r\n\r\n\r\ndef deep_replace(inString, inQuery, inReplacement):\r\n    text = inString\r\n    query = inQuery\r\n    replacement = inReplacement\r\n    text = text.replace(query, replacement)\r\n    if query in text:\r\n        return deep_replace(text, query, replacement)\r\n    else:\r\n        return text\r\n\r\n\r\ndef text_normalize(inString):\r\n    text = inString\r\n    text = normalize(\'NFKD\', text).encode(\r\n        \'ascii\', \'ignore\').decode(\'ascii\').lower()\r\n    text = deep_replace(text, "?", " ")\r\n    text = deep_replace(text, ".", " ")\r\n    text = deep_replace(text, "!", " ")\r\n    text = deep_replace(text, ",", " ")\r\n    text = deep_replace(text, "-", " ")\r\n    text = " ".join(text.split())\r\n    return text\r\n```\r\n\r\n```html\r\n{/*<!-- templates/index.html -->*/}\r\n<html>\r\n    <head>\r\n        <title>Podcast Search</title>\r\n        <script type="text/javascript">\r\n            function seek(timestamp) {\r\n                const audio = document.getElementsByTagName(\'audio\')[0];\r\n                audio.pause();\r\n                audio.currentTime = timestamp - .8;\r\n                audio.play();\r\n            }\r\n        <\/script>\r\n    </head>\r\n    <body style="text-align:center;">\r\n        <h1>World\'s Ugliest Podcast Search</h1>\r\n        <form action=\'#\' method=\'POST\'>\r\n            <label for=\'search\'>Search for a word</label><br />\r\n            <input type=\'text\' name=\'search\' value=\'{{ search }}\' /><br />\r\n            <button type="submit">Search</button>\r\n        </form>\r\n\r\n        <audio controls>\r\n            <source\r\n                src="https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3"\r\n                type="audio/mpeg">\r\n            Your browser does not support the audio element.\r\n        </audio>\r\n\r\n        {% if search %}\r\n        <h2>Search results for {{ search }}</h2>\r\n\r\n        <ul style="list-style: none;">\r\n            {% for result in results %}\r\n            <li style="padding:1rem;">\r\n                <a href="javascript:void(0);" onclick="seek({{result[0].start}})">{{ result[1] }}</a>\r\n            </li>\r\n            {% endfor %}\r\n        </ul>\r\n\r\n        {% endif %}\r\n    </body>\r\n</html>\r\n```\r\n\r\n        ', "html": '<p>Simone Giertz has a great <a href="https://www.youtube.com/watch?v=c0bsKc4tiuY">TED Talk</a>\r\nwhere she extols the virtues of building useless things. I often find myself\r\nbuilding useless things to teach others about new technologies and development\r\npractices. So when I started picking up Python, building another useless thing\r\nseemed like the best way to start.</p>\n<p>Since Python is an object-oriented language, I expected to pick it up quickly.\r\nAfter decades of .NET and JavaScript, OOP languages are my safe space. But\r\nbeyond the syntax, what type of things do I need to know? I made a list:</p>\n<ul>\n<li>Loops and conditions</li>\n<li>File access</li>\n<li>HTTP requests</li>\n</ul>\n<p>Then there were questions like \u201Ccould I build an API?\u201D and \u201Cwhat do Python\r\ndevelopers do for front-ends?\u201D Of course, Deepgram has a Python SDK so gaining\r\nexperience using it would be beneficial and I could even provide feedback to the\r\nfolks that are building it. That meant I needed to do something with audio. HTTP\r\nrequests, audio, files, loops, and conditions\u2026 clearly, I needed to build a\r\nsearch engine for podcasts.</p>\n<p>Since I\u2019m still learning Python, I leaned on our team at Deepgram to help me\r\nspeed up the process. First up, accessing a podcast\u2019s RSS feed and identifying\r\nthe URL to the mp3 files.</p>\n<h2 id="pulling-podcast-episodes-from-an-rss-feed">Pulling Podcast Episodes from an RSS Feed</h2>\n<p>Neil deGrasse Tyson has a great podcast called\r\n<a href="https://startalkmedia.com/">StarTalk Radio</a> that would provide tons of\r\nsearchable words. Its RSS feed is located at\r\n<a href="https://feeds.simplecast.com/4T39_jAj">https://feeds.simplecast.com/4T39_jAj</a>, so I needed to read that and pull in\r\nindividual episodes. Originally, I planned to save the data from the feed into\r\na PostgreSQL or MySQL database but decided to keep it simple by just saving the\r\ninfo from one episode to a Python file.</p>\n<p>I created a file named <code is:raw>load.py</code> to get the episode information and transcribe\r\nthe audio. You can see the code below, but the TL;DR is that it:</p>\n<ul>\n<li>Downloads the RSS feed locally to a file called <code is:raw>theRSSfeed.xml</code></li>\n<li>Parses the XML in that file to find all the mp3 URLs</li>\n<li>Takes the first episode and feed its mp3 to Deepgram for transcription</li>\n<li>Saves the transcript that Deepgram generates to a file named <code is:raw>podcast_data.py</code></li>\n</ul>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># use python3</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> requests</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> os.path </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> exists</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> xml.etree.ElementTree </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ET</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> urllib.parse </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> scheme_chars, urlparse, parse_qs</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># testing to see if we already downloaded an xml file</span></span>\n<span class="line"><span style="color: #8B949E"># if not, download it and save to file</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">the_rss_file </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;theRSSfeed.xml&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">file_exists </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">False</span></span>\n<span class="line"><span style="color: #C9D1D9">file_exists </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> exists(the_rss_file)</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> file_exists:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;no file found:&quot;</span><span style="color: #C9D1D9">,  the_rss_file, </span><span style="color: #A5D6FF">&quot;... downloading ...&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;https://feeds.simplecast.com/4T39_jAj&quot;</span><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># startalk podcast rss feed</span></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> requests.get(url)</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_content </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.content</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(the_rss_file, </span><span style="color: #A5D6FF">&quot;wb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> outfile:</span></span>\n<span class="line"><span style="color: #C9D1D9">        outfile.write(the_content)</span></span>\n<span class="line"><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;found file:&quot;</span><span style="color: #C9D1D9">,  the_rss_file, </span><span style="color: #A5D6FF">&quot;... using it ...&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(the_rss_file, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> infile:</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_content </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> infile.read()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># grab the tree object from the parsed xml file</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">root </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ET</span><span style="color: #C9D1D9">.fromstring(the_content)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># loop through it and find all mp3s in the document</span></span>\n<span class="line"><span style="color: #8B949E"># (the way I found which query to make [the &quot;enclosure&quot; query])</span></span>\n<span class="line"><span style="color: #8B949E"># is by using my eyeballs to find the relevant location of mp3s</span></span>\n<span class="line"><span style="color: #8B949E"># in the rss feed, other rss feeds might be different</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">list_of_mp3s </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> root.iter(</span><span style="color: #A5D6FF">&#39;enclosure&#39;</span><span style="color: #C9D1D9">):</span></span>\n<span class="line"><span style="color: #C9D1D9">    full_url_mp3 </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> thing.attrib[</span><span style="color: #A5D6FF">&quot;url&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    parsed_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> urlparse(full_url_mp3)  </span><span style="color: #8B949E"># stripping off query params</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_mp3_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parsed_url.scheme </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;://&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> parsed_url.hostname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> parsed_url.path</span></span>\n<span class="line"><span style="color: #C9D1D9">    list_of_mp3s.append(the_mp3_url)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">first_mp3 </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> list_of_mp3s[:</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]  </span><span style="color: #8B949E"># take the first</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># now feed this url to DGs transcription API. You would keep track of the</span></span>\n<span class="line"><span style="color: #8B949E"># transcription object you get back so you can use it later for</span></span>\n<span class="line"><span style="color: #8B949E"># searching capabilities.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">DG_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;YOUR_DEEPGRAM_API_KEY_HERE&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">headers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;content-type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;application/json&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Authorization&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Token &quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_API_KEY</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> requests.post(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;https://api.deepgram.com/v1/listen?punctuate=true&amp;utterances=true&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">headers, </span><span style="color: #FFA657">json</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;url&quot;</span><span style="color: #C9D1D9">: first_mp3})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(first_mp3)</span></span>\n<span class="line"><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/workspace/podcast_data.py&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #A5D6FF">&#39;wb&#39;</span><span style="color: #C9D1D9">).write(response.content)</span></span></code></pre>\n<p>Then I ran <code is:raw>python load.py</code> and BAM!, I\u2019ve got a <code is:raw>podcast_data.py</code> with the\r\ntranscript of the episode. Now to start building an API that I can send search\r\nterms to.</p>\n<h2 id="building-the-podcast-search-engine">Building the Podcast Search Engine</h2>\n<p>I spent some time reading\r\n<a href="https://blog.deepgram.com/authors/tonya-sims/">Tonya</a>\u2019s blog posts on\r\n<a href="https://blog.deepgram.com/live-transcription-fastapi/">FastAPI</a> and\r\n<a href="https://blog.deepgram.com/live-transcription-django/">Django</a>,\r\nbut eventually decided on <a href="https://blog.deepgram.com/live-transcription-flask/">Flask</a>\r\nto build the back-end API.</p>\n<h3 id="receiving-and-responding-to-requests">Receiving and Responding to Requests</h3>\n<p>Before I could receive search terms and respond, I had to figure out how to\r\nreceive <em>any</em> request and return a response. Luckily, the Flask documentation\r\nprovides several good examples of doing that. I started by installing Flask with\r\npip.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">pip install Flask</span></span></code></pre>\n<p>Flask\u2019s documentation told me that if I name my file <code is:raw>app.py</code> I can default to\r\nstarting the server using <code is:raw>flask run</code> in the terminal. I started with a very\r\nbasic <code is:raw>app.py</code> to see if I could return anything.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hello World&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span></code></pre>\n<p>That little bit of Python returns a JSON object. Visiting <code is:raw>http://127.0.0.1:5000</code>,\r\nconfirmed that it responded with the JSON I expected. Now I can receive a\r\nrequest and respond to it.</p>\n<p>Next, I needed to be able to receive data that is sent via an HTTP POST request.\r\nAgain, I was saved by the Flask documentation. I knew that I would eventually be\r\nsending a form field named <code is:raw>search</code>, so I added a new method to the <code is:raw>app.py</code>\r\nfile:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    search </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;You searched for &quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> search</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span></code></pre>\n<blockquote>\n<p>Note on the above: It also requires you to modify the <code is:raw>from flask import Flask</code>\r\nto <code is:raw>from flask import Flask, request</code>.</p>\n</blockquote>\n<p>A quick test confirmed that I could pass in form values and respond with them.\r\nWith those wins under my belt, I was ready to tackle the job of searching\r\nthrough the transcript.</p>\n<h3 id="searching-the-podcast-transcript">Searching the Podcast Transcript</h3>\n<p>To make sure I\u2019m comparing apples to apples, I needed some basic text\r\nnormalization. The <code is:raw>text_normalize</code> function lowercases everything, removes\r\ncommon punctuation, removes unnecessary whitespace, and flattens the string to\r\nASCII.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deep_replace</span><span style="color: #C9D1D9">(inString, inQuery, inReplacement):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inQuery</span></span>\n<span class="line"><span style="color: #C9D1D9">    replacement </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inReplacement</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text.replace(query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> text:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deep_replace(text, query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">text_normalize</span><span style="color: #C9D1D9">(inString):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> normalize(</span><span style="color: #A5D6FF">&#39;NFKD&#39;</span><span style="color: #C9D1D9">, text).encode(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;ignore&#39;</span><span style="color: #C9D1D9">).decode(</span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">).lower()</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;?&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;.&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;!&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;,&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;-&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(text.split())</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span></code></pre>\n<p>Once I knew I could compare strings relatively well, it was time to look through\r\nthe transcript to find a search phrase. All the magic of the search engine takes\r\nplace in the <code is:raw>search</code> function. First, it normalizes the phrase I\u2019m searching\r\nfor and then looks through all the words in the transcript for a match.</p>\n<p>For any matches, it creates a string containing the matching word and the five\r\nwords that precede and follow the matching word. The match and its corresponding\r\nphrase are loaded to an array called <code is:raw>query_results</code> that is finally returned.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(phrase):</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> phrase</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text_normalize(the_query)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(the_query)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># word array search</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_array </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> podcast_data.data[</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;channels&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;alternatives&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;words&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> the_body_array:</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list.append(text_normalize(thing[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]))</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_index_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [idx </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> idx, s </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">enumerate</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list) </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> the_query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> s]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> query_index_list:</span></span>\n<span class="line"><span style="color: #C9D1D9">        backforwardcount </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">        quick_text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(the_body_list[</span><span style="color: #79C0FF">max</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, i</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">backforwardcount):</span><span style="color: #79C0FF">min</span><span style="color: #C9D1D9">(i</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">backforwardcount, </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(the_body_list))])</span></span>\n<span class="line"><span style="color: #C9D1D9">        query_results.append([the_body_array[i], quick_text])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span></code></pre>\n<p>With the search function ready, it was time to update the POST route of my API.\r\nI passed the search phrase submitted in the POST request to my <code is:raw>search</code> function\r\nand then returned the result.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span></code></pre>\n<p>Just like magic, I could send requests to my API and have it return matches in\r\nthe podcast. But no one wants to send cURL requests all day. It was time to\r\nbuild the worst user interface for a search engine ever.</p>\n<h2 id="building-the-ugliest-user-interface">Building the Ugliest User Interface</h2>\n<p>The last step was to build a user interface. Fortunately, since I was building\r\nthe ugliest search engine, the bar was low on how it looked. In fact, it was a\r\nbit of a challenge to not try and improve the interface. \u{1F601}</p>\n<h3 id="the-search-interface">The Search Interface</h3>\n<p>One of the reasons I chose to use Flask on the back-end was the fact that it\r\nsupported <a href="https://pypi.org/project/Jinja2/">Jinja2</a> out of the box. I had never\r\nused Jinja2, but when someone mentioned it in our Slack, I noticed how similar\r\nit was to <a href="https://handlebarsjs.com/">Handlebars</a> for JavaScript developers.</p>\n<p>My goal was to create one HTML file that could display the search box and\r\nresults. To separate it from my Python code, I created a new HTML file\r\nat <code is:raw>templates/index.html</code>. It was very basic with an H1 tag and a form that\r\nwould send a post back to its route.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Podcast Search&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text-align:center;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;World&#39;s Ugliest Podcast Search&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;#&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">&gt;Search for a word&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;{{ search }}&#39;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9">&gt;Search&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Once the HTML file was in place, I updated the original HTTP GET request to\r\nserve it. Because I\u2019m injecting the <code is:raw>search</code> parameter, I needed to supply it\r\nwith an empty string.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>A quick <code is:raw>flask run</code> in the terminal served up my ugly podcast search engine. To\r\nmy surprise, it was technically already working. When I entered a search phrase\r\nand pressed the \u2018Search\u2019 button, it sent the search phrase to the API, which\r\nreturned the results as JSON. Of course, that\u2019s not what I want it to do in the\r\nend, but it was a great feeling to know I was close to the end.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661132558/blog/2022/08/podcast-search-engine/original-podcast-search-engine.png" alt="Interface of an ugly podcast search engine"></p>\n<h3 id="displaying-the-search-results">Displaying the Search Results</h3>\n<p>While a JSON response would be pretty ugly, I was enjoying Jinja2 too much to\r\nnot build an interface to display the results of the search. After the form in\r\nmy <code is:raw>templates/index.html</code> file, I added an H2 and UL to list the results. If\r\nthere was a search phrase, it shows any results in a list.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{% if search %}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Search results for {{ search }}&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;list-style: none;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% for result in results %}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding:1rem;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        {{ result[1] }}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">{% endif %}</span></span></code></pre>\n<p>Once the template was ready, I needed to update my API to return the HTML.\r\nRather than returning the results as JSON, I return <code is:raw>render_template</code> passing\r\nthe search phrase and the query results.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase, </span><span style="color: #FFA657">results</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">query_results)</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-engine-results.png" alt="Results interface of the podcast search engine"></p>\n<p>There you have it. Searching works and shows all places where a word was spoken.\r\nThe phrases are a nice touch because they give context to what is being said at\r\nthat moment. That should be the end right? Oh no. I\u2019m nothing if not a little\r\nextra. It was time to add a little pizzazz.</p>\n<h3 id="getting-a-little-fancy">Getting a Little Fancy</h3>\n<p>We\u2019re searching through podcasts. By their nature, they are meant for audio.\r\nWhile I could have stopped by showing the phrase the user was looking for, I\r\nthought it would be cooler if we could play that section of audio. I started by\r\nadding an audio player to the HTML file with the podcast episode I\u2019m searching\r\nthrough. Users can press play and listen to the podcast if they like, but the\r\nreal fun will happen once they search.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">controls</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">source</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;audio/mpeg&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        Your browser does not support the audio element.</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Next, I updated the result LI elements to include an anchor tag that will call\r\na JavaScript function. (You know I wouldn\u2019t get through all this work without\r\nusing a touch of JavaScript.) When it calls the upcoming <code is:raw>seek</code> function, it\r\nsupplies it with the timestamp of the start of the found word.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;javascript:void(0);&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">onclick</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #D2A8FF">seek</span><span style="color: #A5D6FF">({{result</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start}})</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">&gt;{{ result[1] }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Finally, I added a JavaScript function to the head of the page called <code is:raw>seek</code>. It\r\nexpects a timestamp parameter. It then grabs the audio player, pauses its\r\nplayback, seeks to timestamp location minus eight-tenths of a second, and plays.\r\nWhy eight-tenths? I found it started the audio a few words before the searched\r\nphrase so you can better hear the word in context.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text/javascript&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">seek</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">timestamp</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementsByTagName</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">];</span></span>\n<span class="line"><span style="color: #C9D1D9">        audio.</span><span style="color: #D2A8FF">pause</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        audio.currentTime </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">.8</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">        audio.</span><span style="color: #D2A8FF">play</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-results-with-audio-player.png" alt="Results interface with an audio player"></p>\n<h2 id="final-results">Final Results</h2>\n<p>Overall, I really enjoyed dipping my toes into the Python world. I learned several\r\nthings that are universal to all languages and I\u2019m excited to learn more. If you\r\nwant to build this fun, but completely useless project, the full Python\r\nand HTML files are below. Enjoy!</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># app.py</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, render_template, request</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> unicodedata </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> normalize</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> podcast_data</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase, </span><span style="color: #FFA657">results</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">query_results)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(phrase):</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> phrase</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text_normalize(the_query)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_array </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> podcast_data.data[</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;channels&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;alternatives&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;words&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> the_body_array:</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list.append(text_normalize(thing[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]))</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_index_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [idx </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> idx, s </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">enumerate</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list) </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> the_query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> s]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> query_index_list:</span></span>\n<span class="line"><span style="color: #C9D1D9">        backforwardcount </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">        quick_text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(the_body_list[</span><span style="color: #79C0FF">max</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, i</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">backforwardcount):</span><span style="color: #79C0FF">min</span><span style="color: #C9D1D9">(i</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">backforwardcount, </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(the_body_list))])</span></span>\n<span class="line"><span style="color: #C9D1D9">        query_results.append([the_body_array[i], quick_text])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deep_replace</span><span style="color: #C9D1D9">(inString, inQuery, inReplacement):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inQuery</span></span>\n<span class="line"><span style="color: #C9D1D9">    replacement </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inReplacement</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text.replace(query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> text:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deep_replace(text, query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">text_normalize</span><span style="color: #C9D1D9">(inString):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> normalize(</span><span style="color: #A5D6FF">&#39;NFKD&#39;</span><span style="color: #C9D1D9">, text).encode(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;ignore&#39;</span><span style="color: #C9D1D9">).decode(</span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">).lower()</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;?&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;.&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;!&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;,&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;-&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(text.split())</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- templates/index.html --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Podcast Search&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text/javascript&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">seek</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">timestamp</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementsByTagName</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">];</span></span>\n<span class="line"><span style="color: #C9D1D9">                audio.</span><span style="color: #D2A8FF">pause</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">                audio.currentTime </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">.8</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">                audio.</span><span style="color: #D2A8FF">play</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text-align:center;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;World&#39;s Ugliest Podcast Search&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;#&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">&gt;Search for a word&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;{{ search }}&#39;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9">&gt;Search&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">controls</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">source</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;audio/mpeg&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            Your browser does not support the audio element.</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        {% if search %}</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Search results for {{ search }}&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;list-style: none;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            {% for result in results %}</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding:1rem;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">                &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;javascript:void(0);&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">onclick</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #D2A8FF">seek</span><span style="color: #A5D6FF">({{result</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start}})</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">&gt;{{ result[1] }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            {% endfor %}</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        {% endif %}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>' };
const frontmatter = { "title": "How to Build the World's Ugliest Podcast Search Engine with Python", "description": "In this post, you'll learn how to search podcast episode transcripts to find words and phrases that were discussed.", "date": "2022-08-26T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1660863776/blog/2022/08/podcast-search-engine/2208-Build-a-Podcast-Search-Engine-blog%402x.jpg", "authors": ["michael-jolley"], "category": "tutorial", "tags": ["python", "podcast"], "seo": { "title": "How to Build the World's Ugliest Podcast Search Engine with Python", "description": "In this post, you'll learn how to search podcast episode transcripts to find words and phrases that were discussed." }, "shorturls": { "share": "https://dpgr.am/281ef0e", "twitter": "https://dpgr.am/dbc3a70", "linkedin": "https://dpgr.am/2cee49b", "reddit": "https://dpgr.am/c1ffde6", "facebook": "https://dpgr.am/b65c2cb" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661541401/blog/podcast-search-engine/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "pulling-podcast-episodes-from-an-rss-feed", "text": "Pulling Podcast Episodes from an RSS Feed" }, { "depth": 2, "slug": "building-the-podcast-search-engine", "text": "Building the Podcast Search Engine" }, { "depth": 3, "slug": "receiving-and-responding-to-requests", "text": "Receiving and Responding to Requests" }, { "depth": 3, "slug": "searching-the-podcast-transcript", "text": "Searching the Podcast Transcript" }, { "depth": 2, "slug": "building-the-ugliest-user-interface", "text": "Building the Ugliest User Interface" }, { "depth": 3, "slug": "the-search-interface", "text": "The Search Interface" }, { "depth": 3, "slug": "displaying-the-search-results", "text": "Displaying the Search Results" }, { "depth": 3, "slug": "getting-a-little-fancy", "text": "Getting a Little Fancy" }, { "depth": 2, "slug": "final-results", "text": "Final Results" }], "source": '\r\nSimone Giertz has a great [TED Talk](https://www.youtube.com/watch?v=c0bsKc4tiuY)\r\nwhere she extols the virtues of building useless things. I often find myself\r\nbuilding useless things to teach others about new technologies and development\r\npractices. So when I started picking up Python, building another useless thing\r\nseemed like the best way to start.\r\n\r\nSince Python is an object-oriented language, I expected to pick it up quickly.\r\nAfter decades of .NET and JavaScript, OOP languages are my safe space. But\r\nbeyond the syntax, what type of things do I need to know? I made a list:\r\n\r\n*   Loops and conditions\r\n*   File access\r\n*   HTTP requests\r\n\r\nThen there were questions like "could I build an API?" and "what do Python\r\ndevelopers do for front-ends?" Of course, Deepgram has a Python SDK so gaining\r\nexperience using it would be beneficial and I could even provide feedback to the\r\nfolks that are building it. That meant I needed to do something with audio. HTTP\r\nrequests, audio, files, loops, and conditions... clearly, I needed to build a\r\nsearch engine for podcasts.\r\n\r\nSince I\'m still learning Python, I leaned on our team at Deepgram to help me\r\nspeed up the process. First up, accessing a podcast\'s RSS feed and identifying\r\nthe URL to the mp3 files.\r\n\r\n## Pulling Podcast Episodes from an RSS Feed\r\n\r\nNeil deGrasse Tyson has a great podcast called\r\n[StarTalk Radio](https://startalkmedia.com/) that would provide tons of\r\nsearchable words. Its RSS feed is located at\r\nhttps://feeds.simplecast.com/4T39_jAj, so I needed to read that and pull in\r\nindividual episodes. Originally, I planned to save the data from the feed into\r\na PostgreSQL or MySQL database but decided to keep it simple by just saving the\r\ninfo from one episode to a Python file.\r\n\r\nI created a file named `load.py` to get the episode information and transcribe\r\nthe audio. You can see the code below, but the TL;DR is that it:\r\n\r\n*   Downloads the RSS feed locally to a file called `theRSSfeed.xml`\r\n*   Parses the XML in that file to find all the mp3 URLs\r\n*   Takes the first episode and feed its mp3 to Deepgram for transcription\r\n*   Saves the transcript that Deepgram generates to a file named `podcast_data.py`\r\n\r\n```python\r\n# use python3\r\n\r\nimport requests\r\nfrom os.path import exists\r\nimport xml.etree.ElementTree as ET\r\nfrom urllib.parse import scheme_chars, urlparse, parse_qs\r\nimport json\r\n\r\n# testing to see if we already downloaded an xml file\r\n# if not, download it and save to file\r\n\r\nthe_rss_file = "theRSSfeed.xml"\r\nfile_exists = False\r\nfile_exists = exists(the_rss_file)\r\nif not file_exists:\r\n    print("no file found:",  the_rss_file, "... downloading ...")\r\n    url = "https://feeds.simplecast.com/4T39_jAj"  # startalk podcast rss feed\r\n    response = requests.get(url)\r\n    the_content = response.content\r\n    with open(the_rss_file, "wb") as outfile:\r\n        outfile.write(the_content)\r\nelse:\r\n    print("found file:",  the_rss_file, "... using it ...")\r\n    with open(the_rss_file, "rb") as infile:\r\n        the_content = infile.read()\r\n\r\n# grab the tree object from the parsed xml file\r\n\r\nroot = ET.fromstring(the_content)\r\n\r\n# loop through it and find all mp3s in the document\r\n# (the way I found which query to make [the "enclosure" query])\r\n# is by using my eyeballs to find the relevant location of mp3s\r\n# in the rss feed, other rss feeds might be different\r\n\r\nlist_of_mp3s = []\r\nfor thing in root.iter(\'enclosure\'):\r\n    full_url_mp3 = thing.attrib["url"]\r\n    parsed_url = urlparse(full_url_mp3)  # stripping off query params\r\n    the_mp3_url = parsed_url.scheme + "://" + parsed_url.hostname + parsed_url.path\r\n    list_of_mp3s.append(the_mp3_url)\r\n\r\nfirst_mp3 = list_of_mp3s[:1][0]  # take the first\r\n\r\n# now feed this url to DGs transcription API. You would keep track of the\r\n# transcription object you get back so you can use it later for\r\n# searching capabilities.\r\n\r\nDG_API_KEY = "YOUR_DEEPGRAM_API_KEY_HERE"\r\n\r\nheaders = {\r\n    \'content-type\': "application/json",\r\n    \'Authorization\': "Token " + DG_API_KEY\r\n}\r\n\r\nresponse = requests.post(\r\n    "https://api.deepgram.com/v1/listen?punctuate=true&utterances=true", headers=headers, json={"url": first_mp3})\r\n\r\nprint(first_mp3)\r\nopen(\'/workspace/podcast_data.py\',\r\n     \'wb\').write(response.content)\r\n```\r\n\r\nThen I ran `python load.py` and BAM!, I\'ve got a `podcast_data.py` with the\r\ntranscript of the episode. Now to start building an API that I can send search\r\nterms to.\r\n\r\n## Building the Podcast Search Engine\r\n\r\nI spent some time reading\r\n[Tonya](https://blog.deepgram.com/authors/tonya-sims/)\'s blog posts on\r\n[FastAPI](https://blog.deepgram.com/live-transcription-fastapi/) and\r\n[Django](https://blog.deepgram.com/live-transcription-django/),\r\nbut eventually decided on [Flask](https://blog.deepgram.com/live-transcription-flask/)\r\nto build the back-end API.\r\n\r\n### Receiving and Responding to Requests\r\n\r\nBefore I could receive search terms and respond, I had to figure out how to\r\nreceive *any* request and return a response. Luckily, the Flask documentation\r\nprovides several good examples of doing that. I started by installing Flask with\r\npip.\r\n\r\n```bash\r\npip install Flask\r\n```\r\n\r\nFlask\'s documentation told me that if I name my file `app.py` I can default to\r\nstarting the server using `flask run` in the terminal. I started with a very\r\nbasic `app.py` to see if I could return anything.\r\n\r\n```python\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.get("/")\r\ndef index():\r\n    return {\r\n      "name": "Hello World"\r\n    }\r\n\r\n```\r\n\r\nThat little bit of Python returns a JSON object. Visiting `http://127.0.0.1:5000`,\r\nconfirmed that it responded with the JSON I expected. Now I can receive a\r\nrequest and respond to it.\r\n\r\nNext, I needed to be able to receive data that is sent via an HTTP POST request.\r\nAgain, I was saved by the Flask documentation. I knew that I would eventually be\r\nsending a form field named `search`, so I added a new method to the `app.py`\r\nfile:\r\n\r\n```python\r\n@app.post("/")\r\ndef index_post():\r\n    search = request.form[\'search\']\r\n    return {\r\n        "name": "You searched for " + search\r\n    }\r\n```\r\n\r\n> Note on the above: It also requires you to modify the `from flask import Flask`\r\n> to `from flask import Flask, request`.\r\n\r\nA quick test confirmed that I could pass in form values and respond with them.\r\nWith those wins under my belt, I was ready to tackle the job of searching\r\nthrough the transcript.\r\n\r\n### Searching the Podcast Transcript\r\n\r\nTo make sure I\'m comparing apples to apples, I needed some basic text\r\nnormalization. The `text_normalize` function lowercases everything, removes\r\ncommon punctuation, removes unnecessary whitespace, and flattens the string to\r\nASCII.\r\n\r\n```python\r\ndef deep_replace(inString, inQuery, inReplacement):\r\n    text = inString\r\n    query = inQuery\r\n    replacement = inReplacement\r\n    text = text.replace(query, replacement)\r\n    if query in text:\r\n        return deep_replace(text, query, replacement)\r\n    else:\r\n        return text\r\n\r\ndef text_normalize(inString):\r\n    text = inString\r\n    text = normalize(\'NFKD\', text).encode(\r\n        \'ascii\', \'ignore\').decode(\'ascii\').lower()\r\n    text = deep_replace(text, "?", " ")\r\n    text = deep_replace(text, ".", " ")\r\n    text = deep_replace(text, "!", " ")\r\n    text = deep_replace(text, ",", " ")\r\n    text = deep_replace(text, "-", " ")\r\n    text = " ".join(text.split())\r\n    return text\r\n```\r\n\r\nOnce I knew I could compare strings relatively well, it was time to look through\r\nthe transcript to find a search phrase. All the magic of the search engine takes\r\nplace in the `search` function. First, it normalizes the phrase I\'m searching\r\nfor and then looks through all the words in the transcript for a match.\r\n\r\nFor any matches, it creates a string containing the matching word and the five\r\nwords that precede and follow the matching word. The match and its corresponding\r\nphrase are loaded to an array called `query_results` that is finally returned.\r\n\r\n```python\r\ndef search(phrase):\r\n    the_query = phrase\r\n    the_query = text_normalize(the_query)\r\n    print(the_query)\r\n\r\n    # word array search\r\n    the_body_array = podcast_data.data["results"]["channels"][0]["alternatives"][0]["words"]\r\n    the_body_list = []\r\n    for thing in the_body_array:\r\n        the_body_list.append(text_normalize(thing["word"]))\r\n    query_index_list = [idx for idx, s in enumerate(\r\n        the_body_list) if the_query in s]\r\n\r\n    query_results = []\r\n    for i in query_index_list:\r\n        backforwardcount = 5\r\n        quick_text = " ".join(the_body_list[max(\r\n            0, i-backforwardcount):min(i+backforwardcount, len(the_body_list))])\r\n        query_results.append([the_body_array[i], quick_text])\r\n    return query_results\r\n```\r\n\r\nWith the search function ready, it was time to update the POST route of my API.\r\nI passed the search phrase submitted in the POST request to my `search` function\r\nand then returned the result.\r\n\r\n```python\r\n@app.post("/")\r\ndef index_post():\r\n    phrase = request.form[\'search\']\r\n    query_results = search(phrase=phrase)\r\n    return query_results\r\n```\r\n\r\nJust like magic, I could send requests to my API and have it return matches in\r\nthe podcast. But no one wants to send cURL requests all day. It was time to\r\nbuild the worst user interface for a search engine ever.\r\n\r\n## Building the Ugliest User Interface\r\n\r\nThe last step was to build a user interface. Fortunately, since I was building\r\nthe ugliest search engine, the bar was low on how it looked. In fact, it was a\r\nbit of a challenge to not try and improve the interface. \u{1F601}\r\n\r\n### The Search Interface\r\n\r\nOne of the reasons I chose to use Flask on the back-end was the fact that it\r\nsupported [Jinja2](https://pypi.org/project/Jinja2/) out of the box. I had never\r\nused Jinja2, but when someone mentioned it in our Slack, I noticed how similar\r\nit was to [Handlebars](https://handlebarsjs.com/) for JavaScript developers.\r\n\r\nMy goal was to create one HTML file that could display the search box and\r\nresults. To separate it from my Python code, I created a new HTML file\r\nat `templates/index.html`. It was very basic with an H1 tag and a form that\r\nwould send a post back to its route.\r\n\r\n```html\r\n<html>\r\n    <head>\r\n        <title>Podcast Search</title>\r\n    </head>\r\n\r\n    <body style="text-align:center;">\r\n        <h1>World\'s Ugliest Podcast Search</h1>\r\n        <form action=\'#\' method=\'POST\'>\r\n            <label for=\'search\'>Search for a word</label><br />\r\n            <input type=\'text\' name=\'search\' value=\'{{ search }}\' /><br />\r\n            <button type="submit">Search</button>\r\n        </form>\r\n    </body>\r\n</html>\r\n```\r\n\r\nOnce the HTML file was in place, I updated the original HTTP GET request to\r\nserve it. Because I\'m injecting the `search` parameter, I needed to supply it\r\nwith an empty string.\r\n\r\n```python\r\n@app.get("/")\r\ndef index():\r\n    return render_template(\'index.html\', search="")\r\n```\r\n\r\nA quick `flask run` in the terminal served up my ugly podcast search engine. To\r\nmy surprise, it was technically already working. When I entered a search phrase\r\nand pressed the \'Search\' button, it sent the search phrase to the API, which\r\nreturned the results as JSON. Of course, that\'s not what I want it to do in the\r\nend, but it was a great feeling to know I was close to the end.\r\n\r\n![Interface of an ugly podcast search engine](https://res.cloudinary.com/deepgram/image/upload/v1661132558/blog/2022/08/podcast-search-engine/original-podcast-search-engine.png)\r\n\r\n### Displaying the Search Results\r\n\r\nWhile a JSON response would be pretty ugly, I was enjoying Jinja2 too much to\r\nnot build an interface to display the results of the search. After the form in\r\nmy `templates/index.html` file, I added an H2 and UL to list the results. If\r\nthere was a search phrase, it shows any results in a list.\r\n\r\n```html\r\n{% if search %}\r\n<h2>Search results for {{ search }}</h2>\r\n\r\n<ul style="list-style: none;">\r\n    {% for result in results %}\r\n    <li style="padding:1rem;">\r\n        {{ result[1] }}\r\n    </li>\r\n    {% endfor %}\r\n</ul>\r\n\r\n{% endif %}\r\n```\r\n\r\nOnce the template was ready, I needed to update my API to return the HTML.\r\nRather than returning the results as JSON, I return `render_template` passing\r\nthe search phrase and the query results.\r\n\r\n```python\r\n@app.post("/")\r\ndef index_post():\r\n    phrase = request.form[\'search\']\r\n    query_results = search(phrase=phrase)\r\n    return render_template(\'index.html\', search=phrase, results=query_results)\r\n```\r\n\r\n![Results interface of the podcast search engine](https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-engine-results.png)\r\n\r\nThere you have it. Searching works and shows all places where a word was spoken.\r\nThe phrases are a nice touch because they give context to what is being said at\r\nthat moment. That should be the end right? Oh no. I\'m nothing if not a little\r\nextra. It was time to add a little pizzazz.\r\n\r\n### Getting a Little Fancy\r\n\r\nWe\'re searching through podcasts. By their nature, they are meant for audio.\r\nWhile I could have stopped by showing the phrase the user was looking for, I\r\nthought it would be cooler if we could play that section of audio. I started by\r\nadding an audio player to the HTML file with the podcast episode I\'m searching\r\nthrough. Users can press play and listen to the podcast if they like, but the\r\nreal fun will happen once they search.\r\n\r\n```html\r\n    <audio controls>\r\n        <source\r\n            src="https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3"\r\n            type="audio/mpeg">\r\n        Your browser does not support the audio element.\r\n    </audio>\r\n```\r\n\r\nNext, I updated the result LI elements to include an anchor tag that will call\r\na JavaScript function. (You know I wouldn\'t get through all this work without\r\nusing a touch of JavaScript.) When it calls the upcoming `seek` function, it\r\nsupplies it with the timestamp of the start of the found word.\r\n\r\n```html\r\n<a href="javascript:void(0);" onclick="seek({{result[0].start}})">{{ result[1] }}</a>\r\n```\r\n\r\nFinally, I added a JavaScript function to the head of the page called `seek`. It\r\nexpects a timestamp parameter. It then grabs the audio player, pauses its\r\nplayback, seeks to timestamp location minus eight-tenths of a second, and plays.\r\nWhy eight-tenths? I found it started the audio a few words before the searched\r\nphrase so you can better hear the word in context.\r\n\r\n```html\r\n<script type="text/javascript">\r\n    function seek(timestamp) {\r\n        const audio = document.getElementsByTagName(\'audio\')[0];\r\n        audio.pause();\r\n        audio.currentTime = timestamp - .8;\r\n        audio.play();\r\n    }\r\n<\/script>\r\n```\r\n\r\n![Results interface with an audio player](https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-results-with-audio-player.png)\r\n\r\n## Final Results\r\n\r\nOverall, I really enjoyed dipping my toes into the Python world. I learned several\r\nthings that are universal to all languages and I\'m excited to learn more. If you\r\nwant to build this fun, but completely useless project, the full Python\r\nand HTML files are below. Enjoy!\r\n\r\n```python\r\n# app.py\r\n\r\nfrom flask import Flask, render_template, request\r\n\r\nfrom unicodedata import normalize\r\nimport podcast_data\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.get("/")\r\ndef index():\r\n    return render_template(\'index.html\', search="")\r\n\r\n\r\n@app.post("/")\r\ndef index_post():\r\n    phrase = request.form[\'search\']\r\n    query_results = search(phrase=phrase)\r\n    return render_template(\'index.html\', search=phrase, results=query_results)\r\n\r\n\r\ndef search(phrase):\r\n    the_query = phrase\r\n    the_query = text_normalize(the_query)\r\n    \r\n    the_body_array = podcast_data.data["results"]["channels"][0]["alternatives"][0]["words"]\r\n    the_body_list = []\r\n    for thing in the_body_array:\r\n        the_body_list.append(text_normalize(thing["word"]))\r\n    query_index_list = [idx for idx, s in enumerate(\r\n        the_body_list) if the_query in s]\r\n\r\n    query_results = []\r\n    for i in query_index_list:\r\n        backforwardcount = 5\r\n        quick_text = " ".join(the_body_list[max(\r\n            0, i-backforwardcount):min(i+backforwardcount, len(the_body_list))])\r\n        query_results.append([the_body_array[i], quick_text])\r\n    return query_results\r\n\r\n\r\ndef deep_replace(inString, inQuery, inReplacement):\r\n    text = inString\r\n    query = inQuery\r\n    replacement = inReplacement\r\n    text = text.replace(query, replacement)\r\n    if query in text:\r\n        return deep_replace(text, query, replacement)\r\n    else:\r\n        return text\r\n\r\n\r\ndef text_normalize(inString):\r\n    text = inString\r\n    text = normalize(\'NFKD\', text).encode(\r\n        \'ascii\', \'ignore\').decode(\'ascii\').lower()\r\n    text = deep_replace(text, "?", " ")\r\n    text = deep_replace(text, ".", " ")\r\n    text = deep_replace(text, "!", " ")\r\n    text = deep_replace(text, ",", " ")\r\n    text = deep_replace(text, "-", " ")\r\n    text = " ".join(text.split())\r\n    return text\r\n```\r\n\r\n```html\r\n{/*<!-- templates/index.html -->*/}\r\n<html>\r\n    <head>\r\n        <title>Podcast Search</title>\r\n        <script type="text/javascript">\r\n            function seek(timestamp) {\r\n                const audio = document.getElementsByTagName(\'audio\')[0];\r\n                audio.pause();\r\n                audio.currentTime = timestamp - .8;\r\n                audio.play();\r\n            }\r\n        <\/script>\r\n    </head>\r\n    <body style="text-align:center;">\r\n        <h1>World\'s Ugliest Podcast Search</h1>\r\n        <form action=\'#\' method=\'POST\'>\r\n            <label for=\'search\'>Search for a word</label><br />\r\n            <input type=\'text\' name=\'search\' value=\'{{ search }}\' /><br />\r\n            <button type="submit">Search</button>\r\n        </form>\r\n\r\n        <audio controls>\r\n            <source\r\n                src="https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3"\r\n                type="audio/mpeg">\r\n            Your browser does not support the audio element.\r\n        </audio>\r\n\r\n        {% if search %}\r\n        <h2>Search results for {{ search }}</h2>\r\n\r\n        <ul style="list-style: none;">\r\n            {% for result in results %}\r\n            <li style="padding:1rem;">\r\n                <a href="javascript:void(0);" onclick="seek({{result[0].start}})">{{ result[1] }}</a>\r\n            </li>\r\n            {% endfor %}\r\n        </ul>\r\n\r\n        {% endif %}\r\n    </body>\r\n</html>\r\n```\r\n\r\n        ', "html": '<p>Simone Giertz has a great <a href="https://www.youtube.com/watch?v=c0bsKc4tiuY">TED Talk</a>\r\nwhere she extols the virtues of building useless things. I often find myself\r\nbuilding useless things to teach others about new technologies and development\r\npractices. So when I started picking up Python, building another useless thing\r\nseemed like the best way to start.</p>\n<p>Since Python is an object-oriented language, I expected to pick it up quickly.\r\nAfter decades of .NET and JavaScript, OOP languages are my safe space. But\r\nbeyond the syntax, what type of things do I need to know? I made a list:</p>\n<ul>\n<li>Loops and conditions</li>\n<li>File access</li>\n<li>HTTP requests</li>\n</ul>\n<p>Then there were questions like \u201Ccould I build an API?\u201D and \u201Cwhat do Python\r\ndevelopers do for front-ends?\u201D Of course, Deepgram has a Python SDK so gaining\r\nexperience using it would be beneficial and I could even provide feedback to the\r\nfolks that are building it. That meant I needed to do something with audio. HTTP\r\nrequests, audio, files, loops, and conditions\u2026 clearly, I needed to build a\r\nsearch engine for podcasts.</p>\n<p>Since I\u2019m still learning Python, I leaned on our team at Deepgram to help me\r\nspeed up the process. First up, accessing a podcast\u2019s RSS feed and identifying\r\nthe URL to the mp3 files.</p>\n<h2 id="pulling-podcast-episodes-from-an-rss-feed">Pulling Podcast Episodes from an RSS Feed</h2>\n<p>Neil deGrasse Tyson has a great podcast called\r\n<a href="https://startalkmedia.com/">StarTalk Radio</a> that would provide tons of\r\nsearchable words. Its RSS feed is located at\r\n<a href="https://feeds.simplecast.com/4T39_jAj">https://feeds.simplecast.com/4T39_jAj</a>, so I needed to read that and pull in\r\nindividual episodes. Originally, I planned to save the data from the feed into\r\na PostgreSQL or MySQL database but decided to keep it simple by just saving the\r\ninfo from one episode to a Python file.</p>\n<p>I created a file named <code is:raw>load.py</code> to get the episode information and transcribe\r\nthe audio. You can see the code below, but the TL;DR is that it:</p>\n<ul>\n<li>Downloads the RSS feed locally to a file called <code is:raw>theRSSfeed.xml</code></li>\n<li>Parses the XML in that file to find all the mp3 URLs</li>\n<li>Takes the first episode and feed its mp3 to Deepgram for transcription</li>\n<li>Saves the transcript that Deepgram generates to a file named <code is:raw>podcast_data.py</code></li>\n</ul>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># use python3</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> requests</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> os.path </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> exists</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> xml.etree.ElementTree </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ET</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> urllib.parse </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> scheme_chars, urlparse, parse_qs</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># testing to see if we already downloaded an xml file</span></span>\n<span class="line"><span style="color: #8B949E"># if not, download it and save to file</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">the_rss_file </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;theRSSfeed.xml&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">file_exists </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">False</span></span>\n<span class="line"><span style="color: #C9D1D9">file_exists </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> exists(the_rss_file)</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> file_exists:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;no file found:&quot;</span><span style="color: #C9D1D9">,  the_rss_file, </span><span style="color: #A5D6FF">&quot;... downloading ...&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;https://feeds.simplecast.com/4T39_jAj&quot;</span><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># startalk podcast rss feed</span></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> requests.get(url)</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_content </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.content</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(the_rss_file, </span><span style="color: #A5D6FF">&quot;wb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> outfile:</span></span>\n<span class="line"><span style="color: #C9D1D9">        outfile.write(the_content)</span></span>\n<span class="line"><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;found file:&quot;</span><span style="color: #C9D1D9">,  the_rss_file, </span><span style="color: #A5D6FF">&quot;... using it ...&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(the_rss_file, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> infile:</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_content </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> infile.read()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># grab the tree object from the parsed xml file</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">root </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ET</span><span style="color: #C9D1D9">.fromstring(the_content)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># loop through it and find all mp3s in the document</span></span>\n<span class="line"><span style="color: #8B949E"># (the way I found which query to make [the &quot;enclosure&quot; query])</span></span>\n<span class="line"><span style="color: #8B949E"># is by using my eyeballs to find the relevant location of mp3s</span></span>\n<span class="line"><span style="color: #8B949E"># in the rss feed, other rss feeds might be different</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">list_of_mp3s </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> root.iter(</span><span style="color: #A5D6FF">&#39;enclosure&#39;</span><span style="color: #C9D1D9">):</span></span>\n<span class="line"><span style="color: #C9D1D9">    full_url_mp3 </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> thing.attrib[</span><span style="color: #A5D6FF">&quot;url&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    parsed_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> urlparse(full_url_mp3)  </span><span style="color: #8B949E"># stripping off query params</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_mp3_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parsed_url.scheme </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;://&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> parsed_url.hostname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> parsed_url.path</span></span>\n<span class="line"><span style="color: #C9D1D9">    list_of_mp3s.append(the_mp3_url)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">first_mp3 </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> list_of_mp3s[:</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]  </span><span style="color: #8B949E"># take the first</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># now feed this url to DGs transcription API. You would keep track of the</span></span>\n<span class="line"><span style="color: #8B949E"># transcription object you get back so you can use it later for</span></span>\n<span class="line"><span style="color: #8B949E"># searching capabilities.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">DG_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;YOUR_DEEPGRAM_API_KEY_HERE&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">headers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;content-type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;application/json&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Authorization&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Token &quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_API_KEY</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> requests.post(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;https://api.deepgram.com/v1/listen?punctuate=true&amp;utterances=true&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">headers, </span><span style="color: #FFA657">json</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;url&quot;</span><span style="color: #C9D1D9">: first_mp3})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(first_mp3)</span></span>\n<span class="line"><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/workspace/podcast_data.py&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #A5D6FF">&#39;wb&#39;</span><span style="color: #C9D1D9">).write(response.content)</span></span></code></pre>\n<p>Then I ran <code is:raw>python load.py</code> and BAM!, I\u2019ve got a <code is:raw>podcast_data.py</code> with the\r\ntranscript of the episode. Now to start building an API that I can send search\r\nterms to.</p>\n<h2 id="building-the-podcast-search-engine">Building the Podcast Search Engine</h2>\n<p>I spent some time reading\r\n<a href="https://blog.deepgram.com/authors/tonya-sims/">Tonya</a>\u2019s blog posts on\r\n<a href="https://blog.deepgram.com/live-transcription-fastapi/">FastAPI</a> and\r\n<a href="https://blog.deepgram.com/live-transcription-django/">Django</a>,\r\nbut eventually decided on <a href="https://blog.deepgram.com/live-transcription-flask/">Flask</a>\r\nto build the back-end API.</p>\n<h3 id="receiving-and-responding-to-requests">Receiving and Responding to Requests</h3>\n<p>Before I could receive search terms and respond, I had to figure out how to\r\nreceive <em>any</em> request and return a response. Luckily, the Flask documentation\r\nprovides several good examples of doing that. I started by installing Flask with\r\npip.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">pip install Flask</span></span></code></pre>\n<p>Flask\u2019s documentation told me that if I name my file <code is:raw>app.py</code> I can default to\r\nstarting the server using <code is:raw>flask run</code> in the terminal. I started with a very\r\nbasic <code is:raw>app.py</code> to see if I could return anything.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hello World&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span></code></pre>\n<p>That little bit of Python returns a JSON object. Visiting <code is:raw>http://127.0.0.1:5000</code>,\r\nconfirmed that it responded with the JSON I expected. Now I can receive a\r\nrequest and respond to it.</p>\n<p>Next, I needed to be able to receive data that is sent via an HTTP POST request.\r\nAgain, I was saved by the Flask documentation. I knew that I would eventually be\r\nsending a form field named <code is:raw>search</code>, so I added a new method to the <code is:raw>app.py</code>\r\nfile:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    search </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;You searched for &quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> search</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span></code></pre>\n<blockquote>\n<p>Note on the above: It also requires you to modify the <code is:raw>from flask import Flask</code>\r\nto <code is:raw>from flask import Flask, request</code>.</p>\n</blockquote>\n<p>A quick test confirmed that I could pass in form values and respond with them.\r\nWith those wins under my belt, I was ready to tackle the job of searching\r\nthrough the transcript.</p>\n<h3 id="searching-the-podcast-transcript">Searching the Podcast Transcript</h3>\n<p>To make sure I\u2019m comparing apples to apples, I needed some basic text\r\nnormalization. The <code is:raw>text_normalize</code> function lowercases everything, removes\r\ncommon punctuation, removes unnecessary whitespace, and flattens the string to\r\nASCII.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deep_replace</span><span style="color: #C9D1D9">(inString, inQuery, inReplacement):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inQuery</span></span>\n<span class="line"><span style="color: #C9D1D9">    replacement </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inReplacement</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text.replace(query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> text:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deep_replace(text, query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">text_normalize</span><span style="color: #C9D1D9">(inString):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> normalize(</span><span style="color: #A5D6FF">&#39;NFKD&#39;</span><span style="color: #C9D1D9">, text).encode(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;ignore&#39;</span><span style="color: #C9D1D9">).decode(</span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">).lower()</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;?&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;.&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;!&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;,&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;-&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(text.split())</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span></code></pre>\n<p>Once I knew I could compare strings relatively well, it was time to look through\r\nthe transcript to find a search phrase. All the magic of the search engine takes\r\nplace in the <code is:raw>search</code> function. First, it normalizes the phrase I\u2019m searching\r\nfor and then looks through all the words in the transcript for a match.</p>\n<p>For any matches, it creates a string containing the matching word and the five\r\nwords that precede and follow the matching word. The match and its corresponding\r\nphrase are loaded to an array called <code is:raw>query_results</code> that is finally returned.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(phrase):</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> phrase</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text_normalize(the_query)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(the_query)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># word array search</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_array </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> podcast_data.data[</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;channels&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;alternatives&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;words&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> the_body_array:</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list.append(text_normalize(thing[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]))</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_index_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [idx </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> idx, s </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">enumerate</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list) </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> the_query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> s]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> query_index_list:</span></span>\n<span class="line"><span style="color: #C9D1D9">        backforwardcount </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">        quick_text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(the_body_list[</span><span style="color: #79C0FF">max</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, i</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">backforwardcount):</span><span style="color: #79C0FF">min</span><span style="color: #C9D1D9">(i</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">backforwardcount, </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(the_body_list))])</span></span>\n<span class="line"><span style="color: #C9D1D9">        query_results.append([the_body_array[i], quick_text])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span></code></pre>\n<p>With the search function ready, it was time to update the POST route of my API.\r\nI passed the search phrase submitted in the POST request to my <code is:raw>search</code> function\r\nand then returned the result.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span></code></pre>\n<p>Just like magic, I could send requests to my API and have it return matches in\r\nthe podcast. But no one wants to send cURL requests all day. It was time to\r\nbuild the worst user interface for a search engine ever.</p>\n<h2 id="building-the-ugliest-user-interface">Building the Ugliest User Interface</h2>\n<p>The last step was to build a user interface. Fortunately, since I was building\r\nthe ugliest search engine, the bar was low on how it looked. In fact, it was a\r\nbit of a challenge to not try and improve the interface. \u{1F601}</p>\n<h3 id="the-search-interface">The Search Interface</h3>\n<p>One of the reasons I chose to use Flask on the back-end was the fact that it\r\nsupported <a href="https://pypi.org/project/Jinja2/">Jinja2</a> out of the box. I had never\r\nused Jinja2, but when someone mentioned it in our Slack, I noticed how similar\r\nit was to <a href="https://handlebarsjs.com/">Handlebars</a> for JavaScript developers.</p>\n<p>My goal was to create one HTML file that could display the search box and\r\nresults. To separate it from my Python code, I created a new HTML file\r\nat <code is:raw>templates/index.html</code>. It was very basic with an H1 tag and a form that\r\nwould send a post back to its route.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Podcast Search&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text-align:center;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;World&#39;s Ugliest Podcast Search&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;#&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">&gt;Search for a word&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;{{ search }}&#39;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9">&gt;Search&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Once the HTML file was in place, I updated the original HTTP GET request to\r\nserve it. Because I\u2019m injecting the <code is:raw>search</code> parameter, I needed to supply it\r\nwith an empty string.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>A quick <code is:raw>flask run</code> in the terminal served up my ugly podcast search engine. To\r\nmy surprise, it was technically already working. When I entered a search phrase\r\nand pressed the \u2018Search\u2019 button, it sent the search phrase to the API, which\r\nreturned the results as JSON. Of course, that\u2019s not what I want it to do in the\r\nend, but it was a great feeling to know I was close to the end.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661132558/blog/2022/08/podcast-search-engine/original-podcast-search-engine.png" alt="Interface of an ugly podcast search engine"></p>\n<h3 id="displaying-the-search-results">Displaying the Search Results</h3>\n<p>While a JSON response would be pretty ugly, I was enjoying Jinja2 too much to\r\nnot build an interface to display the results of the search. After the form in\r\nmy <code is:raw>templates/index.html</code> file, I added an H2 and UL to list the results. If\r\nthere was a search phrase, it shows any results in a list.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{% if search %}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Search results for {{ search }}&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;list-style: none;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% for result in results %}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding:1rem;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        {{ result[1] }}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">{% endif %}</span></span></code></pre>\n<p>Once the template was ready, I needed to update my API to return the HTML.\r\nRather than returning the results as JSON, I return <code is:raw>render_template</code> passing\r\nthe search phrase and the query results.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase, </span><span style="color: #FFA657">results</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">query_results)</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-engine-results.png" alt="Results interface of the podcast search engine"></p>\n<p>There you have it. Searching works and shows all places where a word was spoken.\r\nThe phrases are a nice touch because they give context to what is being said at\r\nthat moment. That should be the end right? Oh no. I\u2019m nothing if not a little\r\nextra. It was time to add a little pizzazz.</p>\n<h3 id="getting-a-little-fancy">Getting a Little Fancy</h3>\n<p>We\u2019re searching through podcasts. By their nature, they are meant for audio.\r\nWhile I could have stopped by showing the phrase the user was looking for, I\r\nthought it would be cooler if we could play that section of audio. I started by\r\nadding an audio player to the HTML file with the podcast episode I\u2019m searching\r\nthrough. Users can press play and listen to the podcast if they like, but the\r\nreal fun will happen once they search.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">controls</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">source</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;audio/mpeg&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        Your browser does not support the audio element.</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Next, I updated the result LI elements to include an anchor tag that will call\r\na JavaScript function. (You know I wouldn\u2019t get through all this work without\r\nusing a touch of JavaScript.) When it calls the upcoming <code is:raw>seek</code> function, it\r\nsupplies it with the timestamp of the start of the found word.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;javascript:void(0);&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">onclick</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #D2A8FF">seek</span><span style="color: #A5D6FF">({{result</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start}})</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">&gt;{{ result[1] }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Finally, I added a JavaScript function to the head of the page called <code is:raw>seek</code>. It\r\nexpects a timestamp parameter. It then grabs the audio player, pauses its\r\nplayback, seeks to timestamp location minus eight-tenths of a second, and plays.\r\nWhy eight-tenths? I found it started the audio a few words before the searched\r\nphrase so you can better hear the word in context.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text/javascript&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">seek</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">timestamp</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementsByTagName</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">];</span></span>\n<span class="line"><span style="color: #C9D1D9">        audio.</span><span style="color: #D2A8FF">pause</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        audio.currentTime </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">.8</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">        audio.</span><span style="color: #D2A8FF">play</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-results-with-audio-player.png" alt="Results interface with an audio player"></p>\n<h2 id="final-results">Final Results</h2>\n<p>Overall, I really enjoyed dipping my toes into the Python world. I learned several\r\nthings that are universal to all languages and I\u2019m excited to learn more. If you\r\nwant to build this fun, but completely useless project, the full Python\r\nand HTML files are below. Enjoy!</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># app.py</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, render_template, request</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> unicodedata </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> normalize</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> podcast_data</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase, </span><span style="color: #FFA657">results</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">query_results)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(phrase):</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> phrase</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text_normalize(the_query)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_array </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> podcast_data.data[</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;channels&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;alternatives&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;words&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> the_body_array:</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list.append(text_normalize(thing[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]))</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_index_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [idx </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> idx, s </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">enumerate</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list) </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> the_query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> s]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> query_index_list:</span></span>\n<span class="line"><span style="color: #C9D1D9">        backforwardcount </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">        quick_text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(the_body_list[</span><span style="color: #79C0FF">max</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, i</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">backforwardcount):</span><span style="color: #79C0FF">min</span><span style="color: #C9D1D9">(i</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">backforwardcount, </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(the_body_list))])</span></span>\n<span class="line"><span style="color: #C9D1D9">        query_results.append([the_body_array[i], quick_text])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deep_replace</span><span style="color: #C9D1D9">(inString, inQuery, inReplacement):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inQuery</span></span>\n<span class="line"><span style="color: #C9D1D9">    replacement </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inReplacement</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text.replace(query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> text:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deep_replace(text, query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">text_normalize</span><span style="color: #C9D1D9">(inString):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> normalize(</span><span style="color: #A5D6FF">&#39;NFKD&#39;</span><span style="color: #C9D1D9">, text).encode(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;ignore&#39;</span><span style="color: #C9D1D9">).decode(</span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">).lower()</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;?&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;.&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;!&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;,&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;-&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(text.split())</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- templates/index.html --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Podcast Search&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text/javascript&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">seek</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">timestamp</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementsByTagName</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">];</span></span>\n<span class="line"><span style="color: #C9D1D9">                audio.</span><span style="color: #D2A8FF">pause</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">                audio.currentTime </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">.8</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">                audio.</span><span style="color: #D2A8FF">play</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text-align:center;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;World&#39;s Ugliest Podcast Search&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;#&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">&gt;Search for a word&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;{{ search }}&#39;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9">&gt;Search&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">controls</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">source</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;audio/mpeg&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            Your browser does not support the audio element.</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        {% if search %}</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Search results for {{ search }}&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;list-style: none;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            {% for result in results %}</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding:1rem;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">                &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;javascript:void(0);&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">onclick</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #D2A8FF">seek</span><span style="color: #A5D6FF">({{result</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start}})</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">&gt;{{ result[1] }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            {% endfor %}</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        {% endif %}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/podcast-search-engine/index.md" };
function rawContent() {
  return '\r\nSimone Giertz has a great [TED Talk](https://www.youtube.com/watch?v=c0bsKc4tiuY)\r\nwhere she extols the virtues of building useless things. I often find myself\r\nbuilding useless things to teach others about new technologies and development\r\npractices. So when I started picking up Python, building another useless thing\r\nseemed like the best way to start.\r\n\r\nSince Python is an object-oriented language, I expected to pick it up quickly.\r\nAfter decades of .NET and JavaScript, OOP languages are my safe space. But\r\nbeyond the syntax, what type of things do I need to know? I made a list:\r\n\r\n*   Loops and conditions\r\n*   File access\r\n*   HTTP requests\r\n\r\nThen there were questions like "could I build an API?" and "what do Python\r\ndevelopers do for front-ends?" Of course, Deepgram has a Python SDK so gaining\r\nexperience using it would be beneficial and I could even provide feedback to the\r\nfolks that are building it. That meant I needed to do something with audio. HTTP\r\nrequests, audio, files, loops, and conditions... clearly, I needed to build a\r\nsearch engine for podcasts.\r\n\r\nSince I\'m still learning Python, I leaned on our team at Deepgram to help me\r\nspeed up the process. First up, accessing a podcast\'s RSS feed and identifying\r\nthe URL to the mp3 files.\r\n\r\n## Pulling Podcast Episodes from an RSS Feed\r\n\r\nNeil deGrasse Tyson has a great podcast called\r\n[StarTalk Radio](https://startalkmedia.com/) that would provide tons of\r\nsearchable words. Its RSS feed is located at\r\nhttps://feeds.simplecast.com/4T39_jAj, so I needed to read that and pull in\r\nindividual episodes. Originally, I planned to save the data from the feed into\r\na PostgreSQL or MySQL database but decided to keep it simple by just saving the\r\ninfo from one episode to a Python file.\r\n\r\nI created a file named `load.py` to get the episode information and transcribe\r\nthe audio. You can see the code below, but the TL;DR is that it:\r\n\r\n*   Downloads the RSS feed locally to a file called `theRSSfeed.xml`\r\n*   Parses the XML in that file to find all the mp3 URLs\r\n*   Takes the first episode and feed its mp3 to Deepgram for transcription\r\n*   Saves the transcript that Deepgram generates to a file named `podcast_data.py`\r\n\r\n```python\r\n# use python3\r\n\r\nimport requests\r\nfrom os.path import exists\r\nimport xml.etree.ElementTree as ET\r\nfrom urllib.parse import scheme_chars, urlparse, parse_qs\r\nimport json\r\n\r\n# testing to see if we already downloaded an xml file\r\n# if not, download it and save to file\r\n\r\nthe_rss_file = "theRSSfeed.xml"\r\nfile_exists = False\r\nfile_exists = exists(the_rss_file)\r\nif not file_exists:\r\n    print("no file found:",  the_rss_file, "... downloading ...")\r\n    url = "https://feeds.simplecast.com/4T39_jAj"  # startalk podcast rss feed\r\n    response = requests.get(url)\r\n    the_content = response.content\r\n    with open(the_rss_file, "wb") as outfile:\r\n        outfile.write(the_content)\r\nelse:\r\n    print("found file:",  the_rss_file, "... using it ...")\r\n    with open(the_rss_file, "rb") as infile:\r\n        the_content = infile.read()\r\n\r\n# grab the tree object from the parsed xml file\r\n\r\nroot = ET.fromstring(the_content)\r\n\r\n# loop through it and find all mp3s in the document\r\n# (the way I found which query to make [the "enclosure" query])\r\n# is by using my eyeballs to find the relevant location of mp3s\r\n# in the rss feed, other rss feeds might be different\r\n\r\nlist_of_mp3s = []\r\nfor thing in root.iter(\'enclosure\'):\r\n    full_url_mp3 = thing.attrib["url"]\r\n    parsed_url = urlparse(full_url_mp3)  # stripping off query params\r\n    the_mp3_url = parsed_url.scheme + "://" + parsed_url.hostname + parsed_url.path\r\n    list_of_mp3s.append(the_mp3_url)\r\n\r\nfirst_mp3 = list_of_mp3s[:1][0]  # take the first\r\n\r\n# now feed this url to DGs transcription API. You would keep track of the\r\n# transcription object you get back so you can use it later for\r\n# searching capabilities.\r\n\r\nDG_API_KEY = "YOUR_DEEPGRAM_API_KEY_HERE"\r\n\r\nheaders = {\r\n    \'content-type\': "application/json",\r\n    \'Authorization\': "Token " + DG_API_KEY\r\n}\r\n\r\nresponse = requests.post(\r\n    "https://api.deepgram.com/v1/listen?punctuate=true&utterances=true", headers=headers, json={"url": first_mp3})\r\n\r\nprint(first_mp3)\r\nopen(\'/workspace/podcast_data.py\',\r\n     \'wb\').write(response.content)\r\n```\r\n\r\nThen I ran `python load.py` and BAM!, I\'ve got a `podcast_data.py` with the\r\ntranscript of the episode. Now to start building an API that I can send search\r\nterms to.\r\n\r\n## Building the Podcast Search Engine\r\n\r\nI spent some time reading\r\n[Tonya](https://blog.deepgram.com/authors/tonya-sims/)\'s blog posts on\r\n[FastAPI](https://blog.deepgram.com/live-transcription-fastapi/) and\r\n[Django](https://blog.deepgram.com/live-transcription-django/),\r\nbut eventually decided on [Flask](https://blog.deepgram.com/live-transcription-flask/)\r\nto build the back-end API.\r\n\r\n### Receiving and Responding to Requests\r\n\r\nBefore I could receive search terms and respond, I had to figure out how to\r\nreceive *any* request and return a response. Luckily, the Flask documentation\r\nprovides several good examples of doing that. I started by installing Flask with\r\npip.\r\n\r\n```bash\r\npip install Flask\r\n```\r\n\r\nFlask\'s documentation told me that if I name my file `app.py` I can default to\r\nstarting the server using `flask run` in the terminal. I started with a very\r\nbasic `app.py` to see if I could return anything.\r\n\r\n```python\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.get("/")\r\ndef index():\r\n    return {\r\n      "name": "Hello World"\r\n    }\r\n\r\n```\r\n\r\nThat little bit of Python returns a JSON object. Visiting `http://127.0.0.1:5000`,\r\nconfirmed that it responded with the JSON I expected. Now I can receive a\r\nrequest and respond to it.\r\n\r\nNext, I needed to be able to receive data that is sent via an HTTP POST request.\r\nAgain, I was saved by the Flask documentation. I knew that I would eventually be\r\nsending a form field named `search`, so I added a new method to the `app.py`\r\nfile:\r\n\r\n```python\r\n@app.post("/")\r\ndef index_post():\r\n    search = request.form[\'search\']\r\n    return {\r\n        "name": "You searched for " + search\r\n    }\r\n```\r\n\r\n> Note on the above: It also requires you to modify the `from flask import Flask`\r\n> to `from flask import Flask, request`.\r\n\r\nA quick test confirmed that I could pass in form values and respond with them.\r\nWith those wins under my belt, I was ready to tackle the job of searching\r\nthrough the transcript.\r\n\r\n### Searching the Podcast Transcript\r\n\r\nTo make sure I\'m comparing apples to apples, I needed some basic text\r\nnormalization. The `text_normalize` function lowercases everything, removes\r\ncommon punctuation, removes unnecessary whitespace, and flattens the string to\r\nASCII.\r\n\r\n```python\r\ndef deep_replace(inString, inQuery, inReplacement):\r\n    text = inString\r\n    query = inQuery\r\n    replacement = inReplacement\r\n    text = text.replace(query, replacement)\r\n    if query in text:\r\n        return deep_replace(text, query, replacement)\r\n    else:\r\n        return text\r\n\r\ndef text_normalize(inString):\r\n    text = inString\r\n    text = normalize(\'NFKD\', text).encode(\r\n        \'ascii\', \'ignore\').decode(\'ascii\').lower()\r\n    text = deep_replace(text, "?", " ")\r\n    text = deep_replace(text, ".", " ")\r\n    text = deep_replace(text, "!", " ")\r\n    text = deep_replace(text, ",", " ")\r\n    text = deep_replace(text, "-", " ")\r\n    text = " ".join(text.split())\r\n    return text\r\n```\r\n\r\nOnce I knew I could compare strings relatively well, it was time to look through\r\nthe transcript to find a search phrase. All the magic of the search engine takes\r\nplace in the `search` function. First, it normalizes the phrase I\'m searching\r\nfor and then looks through all the words in the transcript for a match.\r\n\r\nFor any matches, it creates a string containing the matching word and the five\r\nwords that precede and follow the matching word. The match and its corresponding\r\nphrase are loaded to an array called `query_results` that is finally returned.\r\n\r\n```python\r\ndef search(phrase):\r\n    the_query = phrase\r\n    the_query = text_normalize(the_query)\r\n    print(the_query)\r\n\r\n    # word array search\r\n    the_body_array = podcast_data.data["results"]["channels"][0]["alternatives"][0]["words"]\r\n    the_body_list = []\r\n    for thing in the_body_array:\r\n        the_body_list.append(text_normalize(thing["word"]))\r\n    query_index_list = [idx for idx, s in enumerate(\r\n        the_body_list) if the_query in s]\r\n\r\n    query_results = []\r\n    for i in query_index_list:\r\n        backforwardcount = 5\r\n        quick_text = " ".join(the_body_list[max(\r\n            0, i-backforwardcount):min(i+backforwardcount, len(the_body_list))])\r\n        query_results.append([the_body_array[i], quick_text])\r\n    return query_results\r\n```\r\n\r\nWith the search function ready, it was time to update the POST route of my API.\r\nI passed the search phrase submitted in the POST request to my `search` function\r\nand then returned the result.\r\n\r\n```python\r\n@app.post("/")\r\ndef index_post():\r\n    phrase = request.form[\'search\']\r\n    query_results = search(phrase=phrase)\r\n    return query_results\r\n```\r\n\r\nJust like magic, I could send requests to my API and have it return matches in\r\nthe podcast. But no one wants to send cURL requests all day. It was time to\r\nbuild the worst user interface for a search engine ever.\r\n\r\n## Building the Ugliest User Interface\r\n\r\nThe last step was to build a user interface. Fortunately, since I was building\r\nthe ugliest search engine, the bar was low on how it looked. In fact, it was a\r\nbit of a challenge to not try and improve the interface. \u{1F601}\r\n\r\n### The Search Interface\r\n\r\nOne of the reasons I chose to use Flask on the back-end was the fact that it\r\nsupported [Jinja2](https://pypi.org/project/Jinja2/) out of the box. I had never\r\nused Jinja2, but when someone mentioned it in our Slack, I noticed how similar\r\nit was to [Handlebars](https://handlebarsjs.com/) for JavaScript developers.\r\n\r\nMy goal was to create one HTML file that could display the search box and\r\nresults. To separate it from my Python code, I created a new HTML file\r\nat `templates/index.html`. It was very basic with an H1 tag and a form that\r\nwould send a post back to its route.\r\n\r\n```html\r\n<html>\r\n    <head>\r\n        <title>Podcast Search</title>\r\n    </head>\r\n\r\n    <body style="text-align:center;">\r\n        <h1>World\'s Ugliest Podcast Search</h1>\r\n        <form action=\'#\' method=\'POST\'>\r\n            <label for=\'search\'>Search for a word</label><br />\r\n            <input type=\'text\' name=\'search\' value=\'{{ search }}\' /><br />\r\n            <button type="submit">Search</button>\r\n        </form>\r\n    </body>\r\n</html>\r\n```\r\n\r\nOnce the HTML file was in place, I updated the original HTTP GET request to\r\nserve it. Because I\'m injecting the `search` parameter, I needed to supply it\r\nwith an empty string.\r\n\r\n```python\r\n@app.get("/")\r\ndef index():\r\n    return render_template(\'index.html\', search="")\r\n```\r\n\r\nA quick `flask run` in the terminal served up my ugly podcast search engine. To\r\nmy surprise, it was technically already working. When I entered a search phrase\r\nand pressed the \'Search\' button, it sent the search phrase to the API, which\r\nreturned the results as JSON. Of course, that\'s not what I want it to do in the\r\nend, but it was a great feeling to know I was close to the end.\r\n\r\n![Interface of an ugly podcast search engine](https://res.cloudinary.com/deepgram/image/upload/v1661132558/blog/2022/08/podcast-search-engine/original-podcast-search-engine.png)\r\n\r\n### Displaying the Search Results\r\n\r\nWhile a JSON response would be pretty ugly, I was enjoying Jinja2 too much to\r\nnot build an interface to display the results of the search. After the form in\r\nmy `templates/index.html` file, I added an H2 and UL to list the results. If\r\nthere was a search phrase, it shows any results in a list.\r\n\r\n```html\r\n{% if search %}\r\n<h2>Search results for {{ search }}</h2>\r\n\r\n<ul style="list-style: none;">\r\n    {% for result in results %}\r\n    <li style="padding:1rem;">\r\n        {{ result[1] }}\r\n    </li>\r\n    {% endfor %}\r\n</ul>\r\n\r\n{% endif %}\r\n```\r\n\r\nOnce the template was ready, I needed to update my API to return the HTML.\r\nRather than returning the results as JSON, I return `render_template` passing\r\nthe search phrase and the query results.\r\n\r\n```python\r\n@app.post("/")\r\ndef index_post():\r\n    phrase = request.form[\'search\']\r\n    query_results = search(phrase=phrase)\r\n    return render_template(\'index.html\', search=phrase, results=query_results)\r\n```\r\n\r\n![Results interface of the podcast search engine](https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-engine-results.png)\r\n\r\nThere you have it. Searching works and shows all places where a word was spoken.\r\nThe phrases are a nice touch because they give context to what is being said at\r\nthat moment. That should be the end right? Oh no. I\'m nothing if not a little\r\nextra. It was time to add a little pizzazz.\r\n\r\n### Getting a Little Fancy\r\n\r\nWe\'re searching through podcasts. By their nature, they are meant for audio.\r\nWhile I could have stopped by showing the phrase the user was looking for, I\r\nthought it would be cooler if we could play that section of audio. I started by\r\nadding an audio player to the HTML file with the podcast episode I\'m searching\r\nthrough. Users can press play and listen to the podcast if they like, but the\r\nreal fun will happen once they search.\r\n\r\n```html\r\n    <audio controls>\r\n        <source\r\n            src="https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3"\r\n            type="audio/mpeg">\r\n        Your browser does not support the audio element.\r\n    </audio>\r\n```\r\n\r\nNext, I updated the result LI elements to include an anchor tag that will call\r\na JavaScript function. (You know I wouldn\'t get through all this work without\r\nusing a touch of JavaScript.) When it calls the upcoming `seek` function, it\r\nsupplies it with the timestamp of the start of the found word.\r\n\r\n```html\r\n<a href="javascript:void(0);" onclick="seek({{result[0].start}})">{{ result[1] }}</a>\r\n```\r\n\r\nFinally, I added a JavaScript function to the head of the page called `seek`. It\r\nexpects a timestamp parameter. It then grabs the audio player, pauses its\r\nplayback, seeks to timestamp location minus eight-tenths of a second, and plays.\r\nWhy eight-tenths? I found it started the audio a few words before the searched\r\nphrase so you can better hear the word in context.\r\n\r\n```html\r\n<script type="text/javascript">\r\n    function seek(timestamp) {\r\n        const audio = document.getElementsByTagName(\'audio\')[0];\r\n        audio.pause();\r\n        audio.currentTime = timestamp - .8;\r\n        audio.play();\r\n    }\r\n<\/script>\r\n```\r\n\r\n![Results interface with an audio player](https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-results-with-audio-player.png)\r\n\r\n## Final Results\r\n\r\nOverall, I really enjoyed dipping my toes into the Python world. I learned several\r\nthings that are universal to all languages and I\'m excited to learn more. If you\r\nwant to build this fun, but completely useless project, the full Python\r\nand HTML files are below. Enjoy!\r\n\r\n```python\r\n# app.py\r\n\r\nfrom flask import Flask, render_template, request\r\n\r\nfrom unicodedata import normalize\r\nimport podcast_data\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.get("/")\r\ndef index():\r\n    return render_template(\'index.html\', search="")\r\n\r\n\r\n@app.post("/")\r\ndef index_post():\r\n    phrase = request.form[\'search\']\r\n    query_results = search(phrase=phrase)\r\n    return render_template(\'index.html\', search=phrase, results=query_results)\r\n\r\n\r\ndef search(phrase):\r\n    the_query = phrase\r\n    the_query = text_normalize(the_query)\r\n    \r\n    the_body_array = podcast_data.data["results"]["channels"][0]["alternatives"][0]["words"]\r\n    the_body_list = []\r\n    for thing in the_body_array:\r\n        the_body_list.append(text_normalize(thing["word"]))\r\n    query_index_list = [idx for idx, s in enumerate(\r\n        the_body_list) if the_query in s]\r\n\r\n    query_results = []\r\n    for i in query_index_list:\r\n        backforwardcount = 5\r\n        quick_text = " ".join(the_body_list[max(\r\n            0, i-backforwardcount):min(i+backforwardcount, len(the_body_list))])\r\n        query_results.append([the_body_array[i], quick_text])\r\n    return query_results\r\n\r\n\r\ndef deep_replace(inString, inQuery, inReplacement):\r\n    text = inString\r\n    query = inQuery\r\n    replacement = inReplacement\r\n    text = text.replace(query, replacement)\r\n    if query in text:\r\n        return deep_replace(text, query, replacement)\r\n    else:\r\n        return text\r\n\r\n\r\ndef text_normalize(inString):\r\n    text = inString\r\n    text = normalize(\'NFKD\', text).encode(\r\n        \'ascii\', \'ignore\').decode(\'ascii\').lower()\r\n    text = deep_replace(text, "?", " ")\r\n    text = deep_replace(text, ".", " ")\r\n    text = deep_replace(text, "!", " ")\r\n    text = deep_replace(text, ",", " ")\r\n    text = deep_replace(text, "-", " ")\r\n    text = " ".join(text.split())\r\n    return text\r\n```\r\n\r\n```html\r\n{/*<!-- templates/index.html -->*/}\r\n<html>\r\n    <head>\r\n        <title>Podcast Search</title>\r\n        <script type="text/javascript">\r\n            function seek(timestamp) {\r\n                const audio = document.getElementsByTagName(\'audio\')[0];\r\n                audio.pause();\r\n                audio.currentTime = timestamp - .8;\r\n                audio.play();\r\n            }\r\n        <\/script>\r\n    </head>\r\n    <body style="text-align:center;">\r\n        <h1>World\'s Ugliest Podcast Search</h1>\r\n        <form action=\'#\' method=\'POST\'>\r\n            <label for=\'search\'>Search for a word</label><br />\r\n            <input type=\'text\' name=\'search\' value=\'{{ search }}\' /><br />\r\n            <button type="submit">Search</button>\r\n        </form>\r\n\r\n        <audio controls>\r\n            <source\r\n                src="https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3"\r\n                type="audio/mpeg">\r\n            Your browser does not support the audio element.\r\n        </audio>\r\n\r\n        {% if search %}\r\n        <h2>Search results for {{ search }}</h2>\r\n\r\n        <ul style="list-style: none;">\r\n            {% for result in results %}\r\n            <li style="padding:1rem;">\r\n                <a href="javascript:void(0);" onclick="seek({{result[0].start}})">{{ result[1] }}</a>\r\n            </li>\r\n            {% endfor %}\r\n        </ul>\r\n\r\n        {% endif %}\r\n    </body>\r\n</html>\r\n```\r\n\r\n        ';
}
function compiledContent() {
  return '<p>Simone Giertz has a great <a href="https://www.youtube.com/watch?v=c0bsKc4tiuY">TED Talk</a>\r\nwhere she extols the virtues of building useless things. I often find myself\r\nbuilding useless things to teach others about new technologies and development\r\npractices. So when I started picking up Python, building another useless thing\r\nseemed like the best way to start.</p>\n<p>Since Python is an object-oriented language, I expected to pick it up quickly.\r\nAfter decades of .NET and JavaScript, OOP languages are my safe space. But\r\nbeyond the syntax, what type of things do I need to know? I made a list:</p>\n<ul>\n<li>Loops and conditions</li>\n<li>File access</li>\n<li>HTTP requests</li>\n</ul>\n<p>Then there were questions like \u201Ccould I build an API?\u201D and \u201Cwhat do Python\r\ndevelopers do for front-ends?\u201D Of course, Deepgram has a Python SDK so gaining\r\nexperience using it would be beneficial and I could even provide feedback to the\r\nfolks that are building it. That meant I needed to do something with audio. HTTP\r\nrequests, audio, files, loops, and conditions\u2026 clearly, I needed to build a\r\nsearch engine for podcasts.</p>\n<p>Since I\u2019m still learning Python, I leaned on our team at Deepgram to help me\r\nspeed up the process. First up, accessing a podcast\u2019s RSS feed and identifying\r\nthe URL to the mp3 files.</p>\n<h2 id="pulling-podcast-episodes-from-an-rss-feed">Pulling Podcast Episodes from an RSS Feed</h2>\n<p>Neil deGrasse Tyson has a great podcast called\r\n<a href="https://startalkmedia.com/">StarTalk Radio</a> that would provide tons of\r\nsearchable words. Its RSS feed is located at\r\n<a href="https://feeds.simplecast.com/4T39_jAj">https://feeds.simplecast.com/4T39_jAj</a>, so I needed to read that and pull in\r\nindividual episodes. Originally, I planned to save the data from the feed into\r\na PostgreSQL or MySQL database but decided to keep it simple by just saving the\r\ninfo from one episode to a Python file.</p>\n<p>I created a file named <code is:raw>load.py</code> to get the episode information and transcribe\r\nthe audio. You can see the code below, but the TL;DR is that it:</p>\n<ul>\n<li>Downloads the RSS feed locally to a file called <code is:raw>theRSSfeed.xml</code></li>\n<li>Parses the XML in that file to find all the mp3 URLs</li>\n<li>Takes the first episode and feed its mp3 to Deepgram for transcription</li>\n<li>Saves the transcript that Deepgram generates to a file named <code is:raw>podcast_data.py</code></li>\n</ul>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># use python3</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> requests</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> os.path </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> exists</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> xml.etree.ElementTree </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ET</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> urllib.parse </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> scheme_chars, urlparse, parse_qs</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># testing to see if we already downloaded an xml file</span></span>\n<span class="line"><span style="color: #8B949E"># if not, download it and save to file</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">the_rss_file </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;theRSSfeed.xml&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">file_exists </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">False</span></span>\n<span class="line"><span style="color: #C9D1D9">file_exists </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> exists(the_rss_file)</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> file_exists:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;no file found:&quot;</span><span style="color: #C9D1D9">,  the_rss_file, </span><span style="color: #A5D6FF">&quot;... downloading ...&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;https://feeds.simplecast.com/4T39_jAj&quot;</span><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># startalk podcast rss feed</span></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> requests.get(url)</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_content </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.content</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(the_rss_file, </span><span style="color: #A5D6FF">&quot;wb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> outfile:</span></span>\n<span class="line"><span style="color: #C9D1D9">        outfile.write(the_content)</span></span>\n<span class="line"><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;found file:&quot;</span><span style="color: #C9D1D9">,  the_rss_file, </span><span style="color: #A5D6FF">&quot;... using it ...&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(the_rss_file, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> infile:</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_content </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> infile.read()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># grab the tree object from the parsed xml file</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">root </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ET</span><span style="color: #C9D1D9">.fromstring(the_content)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># loop through it and find all mp3s in the document</span></span>\n<span class="line"><span style="color: #8B949E"># (the way I found which query to make [the &quot;enclosure&quot; query])</span></span>\n<span class="line"><span style="color: #8B949E"># is by using my eyeballs to find the relevant location of mp3s</span></span>\n<span class="line"><span style="color: #8B949E"># in the rss feed, other rss feeds might be different</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">list_of_mp3s </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> root.iter(</span><span style="color: #A5D6FF">&#39;enclosure&#39;</span><span style="color: #C9D1D9">):</span></span>\n<span class="line"><span style="color: #C9D1D9">    full_url_mp3 </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> thing.attrib[</span><span style="color: #A5D6FF">&quot;url&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    parsed_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> urlparse(full_url_mp3)  </span><span style="color: #8B949E"># stripping off query params</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_mp3_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parsed_url.scheme </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;://&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> parsed_url.hostname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> parsed_url.path</span></span>\n<span class="line"><span style="color: #C9D1D9">    list_of_mp3s.append(the_mp3_url)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">first_mp3 </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> list_of_mp3s[:</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]  </span><span style="color: #8B949E"># take the first</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># now feed this url to DGs transcription API. You would keep track of the</span></span>\n<span class="line"><span style="color: #8B949E"># transcription object you get back so you can use it later for</span></span>\n<span class="line"><span style="color: #8B949E"># searching capabilities.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">DG_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;YOUR_DEEPGRAM_API_KEY_HERE&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">headers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;content-type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;application/json&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Authorization&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Token &quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_API_KEY</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> requests.post(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;https://api.deepgram.com/v1/listen?punctuate=true&amp;utterances=true&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">headers, </span><span style="color: #FFA657">json</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;url&quot;</span><span style="color: #C9D1D9">: first_mp3})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(first_mp3)</span></span>\n<span class="line"><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/workspace/podcast_data.py&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #A5D6FF">&#39;wb&#39;</span><span style="color: #C9D1D9">).write(response.content)</span></span></code></pre>\n<p>Then I ran <code is:raw>python load.py</code> and BAM!, I\u2019ve got a <code is:raw>podcast_data.py</code> with the\r\ntranscript of the episode. Now to start building an API that I can send search\r\nterms to.</p>\n<h2 id="building-the-podcast-search-engine">Building the Podcast Search Engine</h2>\n<p>I spent some time reading\r\n<a href="https://blog.deepgram.com/authors/tonya-sims/">Tonya</a>\u2019s blog posts on\r\n<a href="https://blog.deepgram.com/live-transcription-fastapi/">FastAPI</a> and\r\n<a href="https://blog.deepgram.com/live-transcription-django/">Django</a>,\r\nbut eventually decided on <a href="https://blog.deepgram.com/live-transcription-flask/">Flask</a>\r\nto build the back-end API.</p>\n<h3 id="receiving-and-responding-to-requests">Receiving and Responding to Requests</h3>\n<p>Before I could receive search terms and respond, I had to figure out how to\r\nreceive <em>any</em> request and return a response. Luckily, the Flask documentation\r\nprovides several good examples of doing that. I started by installing Flask with\r\npip.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">pip install Flask</span></span></code></pre>\n<p>Flask\u2019s documentation told me that if I name my file <code is:raw>app.py</code> I can default to\r\nstarting the server using <code is:raw>flask run</code> in the terminal. I started with a very\r\nbasic <code is:raw>app.py</code> to see if I could return anything.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hello World&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span></code></pre>\n<p>That little bit of Python returns a JSON object. Visiting <code is:raw>http://127.0.0.1:5000</code>,\r\nconfirmed that it responded with the JSON I expected. Now I can receive a\r\nrequest and respond to it.</p>\n<p>Next, I needed to be able to receive data that is sent via an HTTP POST request.\r\nAgain, I was saved by the Flask documentation. I knew that I would eventually be\r\nsending a form field named <code is:raw>search</code>, so I added a new method to the <code is:raw>app.py</code>\r\nfile:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    search </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;You searched for &quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> search</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span></code></pre>\n<blockquote>\n<p>Note on the above: It also requires you to modify the <code is:raw>from flask import Flask</code>\r\nto <code is:raw>from flask import Flask, request</code>.</p>\n</blockquote>\n<p>A quick test confirmed that I could pass in form values and respond with them.\r\nWith those wins under my belt, I was ready to tackle the job of searching\r\nthrough the transcript.</p>\n<h3 id="searching-the-podcast-transcript">Searching the Podcast Transcript</h3>\n<p>To make sure I\u2019m comparing apples to apples, I needed some basic text\r\nnormalization. The <code is:raw>text_normalize</code> function lowercases everything, removes\r\ncommon punctuation, removes unnecessary whitespace, and flattens the string to\r\nASCII.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deep_replace</span><span style="color: #C9D1D9">(inString, inQuery, inReplacement):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inQuery</span></span>\n<span class="line"><span style="color: #C9D1D9">    replacement </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inReplacement</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text.replace(query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> text:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deep_replace(text, query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">text_normalize</span><span style="color: #C9D1D9">(inString):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> normalize(</span><span style="color: #A5D6FF">&#39;NFKD&#39;</span><span style="color: #C9D1D9">, text).encode(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;ignore&#39;</span><span style="color: #C9D1D9">).decode(</span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">).lower()</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;?&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;.&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;!&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;,&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;-&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(text.split())</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span></code></pre>\n<p>Once I knew I could compare strings relatively well, it was time to look through\r\nthe transcript to find a search phrase. All the magic of the search engine takes\r\nplace in the <code is:raw>search</code> function. First, it normalizes the phrase I\u2019m searching\r\nfor and then looks through all the words in the transcript for a match.</p>\n<p>For any matches, it creates a string containing the matching word and the five\r\nwords that precede and follow the matching word. The match and its corresponding\r\nphrase are loaded to an array called <code is:raw>query_results</code> that is finally returned.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(phrase):</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> phrase</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text_normalize(the_query)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(the_query)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># word array search</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_array </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> podcast_data.data[</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;channels&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;alternatives&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;words&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> the_body_array:</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list.append(text_normalize(thing[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]))</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_index_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [idx </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> idx, s </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">enumerate</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list) </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> the_query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> s]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> query_index_list:</span></span>\n<span class="line"><span style="color: #C9D1D9">        backforwardcount </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">        quick_text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(the_body_list[</span><span style="color: #79C0FF">max</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, i</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">backforwardcount):</span><span style="color: #79C0FF">min</span><span style="color: #C9D1D9">(i</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">backforwardcount, </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(the_body_list))])</span></span>\n<span class="line"><span style="color: #C9D1D9">        query_results.append([the_body_array[i], quick_text])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span></code></pre>\n<p>With the search function ready, it was time to update the POST route of my API.\r\nI passed the search phrase submitted in the POST request to my <code is:raw>search</code> function\r\nand then returned the result.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span></code></pre>\n<p>Just like magic, I could send requests to my API and have it return matches in\r\nthe podcast. But no one wants to send cURL requests all day. It was time to\r\nbuild the worst user interface for a search engine ever.</p>\n<h2 id="building-the-ugliest-user-interface">Building the Ugliest User Interface</h2>\n<p>The last step was to build a user interface. Fortunately, since I was building\r\nthe ugliest search engine, the bar was low on how it looked. In fact, it was a\r\nbit of a challenge to not try and improve the interface. \u{1F601}</p>\n<h3 id="the-search-interface">The Search Interface</h3>\n<p>One of the reasons I chose to use Flask on the back-end was the fact that it\r\nsupported <a href="https://pypi.org/project/Jinja2/">Jinja2</a> out of the box. I had never\r\nused Jinja2, but when someone mentioned it in our Slack, I noticed how similar\r\nit was to <a href="https://handlebarsjs.com/">Handlebars</a> for JavaScript developers.</p>\n<p>My goal was to create one HTML file that could display the search box and\r\nresults. To separate it from my Python code, I created a new HTML file\r\nat <code is:raw>templates/index.html</code>. It was very basic with an H1 tag and a form that\r\nwould send a post back to its route.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Podcast Search&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text-align:center;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;World&#39;s Ugliest Podcast Search&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;#&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">&gt;Search for a word&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;{{ search }}&#39;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9">&gt;Search&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Once the HTML file was in place, I updated the original HTTP GET request to\r\nserve it. Because I\u2019m injecting the <code is:raw>search</code> parameter, I needed to supply it\r\nwith an empty string.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>A quick <code is:raw>flask run</code> in the terminal served up my ugly podcast search engine. To\r\nmy surprise, it was technically already working. When I entered a search phrase\r\nand pressed the \u2018Search\u2019 button, it sent the search phrase to the API, which\r\nreturned the results as JSON. Of course, that\u2019s not what I want it to do in the\r\nend, but it was a great feeling to know I was close to the end.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661132558/blog/2022/08/podcast-search-engine/original-podcast-search-engine.png" alt="Interface of an ugly podcast search engine"></p>\n<h3 id="displaying-the-search-results">Displaying the Search Results</h3>\n<p>While a JSON response would be pretty ugly, I was enjoying Jinja2 too much to\r\nnot build an interface to display the results of the search. After the form in\r\nmy <code is:raw>templates/index.html</code> file, I added an H2 and UL to list the results. If\r\nthere was a search phrase, it shows any results in a list.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{% if search %}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Search results for {{ search }}&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;list-style: none;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% for result in results %}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding:1rem;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        {{ result[1] }}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">{% endif %}</span></span></code></pre>\n<p>Once the template was ready, I needed to update my API to return the HTML.\r\nRather than returning the results as JSON, I return <code is:raw>render_template</code> passing\r\nthe search phrase and the query results.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase, </span><span style="color: #FFA657">results</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">query_results)</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-engine-results.png" alt="Results interface of the podcast search engine"></p>\n<p>There you have it. Searching works and shows all places where a word was spoken.\r\nThe phrases are a nice touch because they give context to what is being said at\r\nthat moment. That should be the end right? Oh no. I\u2019m nothing if not a little\r\nextra. It was time to add a little pizzazz.</p>\n<h3 id="getting-a-little-fancy">Getting a Little Fancy</h3>\n<p>We\u2019re searching through podcasts. By their nature, they are meant for audio.\r\nWhile I could have stopped by showing the phrase the user was looking for, I\r\nthought it would be cooler if we could play that section of audio. I started by\r\nadding an audio player to the HTML file with the podcast episode I\u2019m searching\r\nthrough. Users can press play and listen to the podcast if they like, but the\r\nreal fun will happen once they search.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">controls</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">source</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;audio/mpeg&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        Your browser does not support the audio element.</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Next, I updated the result LI elements to include an anchor tag that will call\r\na JavaScript function. (You know I wouldn\u2019t get through all this work without\r\nusing a touch of JavaScript.) When it calls the upcoming <code is:raw>seek</code> function, it\r\nsupplies it with the timestamp of the start of the found word.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;javascript:void(0);&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">onclick</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #D2A8FF">seek</span><span style="color: #A5D6FF">({{result</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start}})</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">&gt;{{ result[1] }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Finally, I added a JavaScript function to the head of the page called <code is:raw>seek</code>. It\r\nexpects a timestamp parameter. It then grabs the audio player, pauses its\r\nplayback, seeks to timestamp location minus eight-tenths of a second, and plays.\r\nWhy eight-tenths? I found it started the audio a few words before the searched\r\nphrase so you can better hear the word in context.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text/javascript&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">seek</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">timestamp</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementsByTagName</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">];</span></span>\n<span class="line"><span style="color: #C9D1D9">        audio.</span><span style="color: #D2A8FF">pause</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        audio.currentTime </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">.8</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">        audio.</span><span style="color: #D2A8FF">play</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-results-with-audio-player.png" alt="Results interface with an audio player"></p>\n<h2 id="final-results">Final Results</h2>\n<p>Overall, I really enjoyed dipping my toes into the Python world. I learned several\r\nthings that are universal to all languages and I\u2019m excited to learn more. If you\r\nwant to build this fun, but completely useless project, the full Python\r\nand HTML files are below. Enjoy!</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># app.py</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, render_template, request</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> unicodedata </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> normalize</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> podcast_data</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase, </span><span style="color: #FFA657">results</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">query_results)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(phrase):</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> phrase</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text_normalize(the_query)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_array </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> podcast_data.data[</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;channels&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;alternatives&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;words&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    the_body_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> the_body_array:</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list.append(text_normalize(thing[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]))</span></span>\n<span class="line"><span style="color: #C9D1D9">    query_index_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [idx </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> idx, s </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">enumerate</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        the_body_list) </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> the_query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> s]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> query_index_list:</span></span>\n<span class="line"><span style="color: #C9D1D9">        backforwardcount </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">        quick_text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(the_body_list[</span><span style="color: #79C0FF">max</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, i</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">backforwardcount):</span><span style="color: #79C0FF">min</span><span style="color: #C9D1D9">(i</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">backforwardcount, </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(the_body_list))])</span></span>\n<span class="line"><span style="color: #C9D1D9">        query_results.append([the_body_array[i], quick_text])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deep_replace</span><span style="color: #C9D1D9">(inString, inQuery, inReplacement):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inQuery</span></span>\n<span class="line"><span style="color: #C9D1D9">    replacement </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inReplacement</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text.replace(query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> text:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deep_replace(text, query, replacement)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">text_normalize</span><span style="color: #C9D1D9">(inString):</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> normalize(</span><span style="color: #A5D6FF">&#39;NFKD&#39;</span><span style="color: #C9D1D9">, text).encode(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;ignore&#39;</span><span style="color: #C9D1D9">).decode(</span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">).lower()</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;?&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;.&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;!&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;,&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;-&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(text.split())</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span></code></pre>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- templates/index.html --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Podcast Search&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text/javascript&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">seek</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">timestamp</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementsByTagName</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">];</span></span>\n<span class="line"><span style="color: #C9D1D9">                audio.</span><span style="color: #D2A8FF">pause</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">                audio.currentTime </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">.8</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">                audio.</span><span style="color: #D2A8FF">play</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text-align:center;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;World&#39;s Ugliest Podcast Search&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;#&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">&gt;Search for a word&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;{{ search }}&#39;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9">&gt;Search&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">controls</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">source</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;audio/mpeg&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            Your browser does not support the audio element.</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        {% if search %}</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Search results for {{ search }}&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;list-style: none;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            {% for result in results %}</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding:1rem;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">                &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;javascript:void(0);&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">onclick</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #D2A8FF">seek</span><span style="color: #A5D6FF">({{result</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start}})</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">&gt;{{ result[1] }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            {% endfor %}</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        {% endif %}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/podcast-search-engine/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Simone Giertz has a great <a href="https://www.youtube.com/watch?v=c0bsKc4tiuY">TED Talk</a>
where she extols the virtues of building useless things. I often find myself
building useless things to teach others about new technologies and development
practices. So when I started picking up Python, building another useless thing
seemed like the best way to start.</p>
<p>Since Python is an object-oriented language, I expected to pick it up quickly.
After decades of .NET and JavaScript, OOP languages are my safe space. But
beyond the syntax, what type of things do I need to know? I made a list:</p>
<ul>
<li>Loops and conditions</li>
<li>File access</li>
<li>HTTP requests</li>
</ul>
<p>Then there were questions like “could I build an API?” and “what do Python
developers do for front-ends?” Of course, Deepgram has a Python SDK so gaining
experience using it would be beneficial and I could even provide feedback to the
folks that are building it. That meant I needed to do something with audio. HTTP
requests, audio, files, loops, and conditions… clearly, I needed to build a
search engine for podcasts.</p>
<p>Since I’m still learning Python, I leaned on our team at Deepgram to help me
speed up the process. First up, accessing a podcast’s RSS feed and identifying
the URL to the mp3 files.</p>
<h2 id="pulling-podcast-episodes-from-an-rss-feed">Pulling Podcast Episodes from an RSS Feed</h2>
<p>Neil deGrasse Tyson has a great podcast called
<a href="https://startalkmedia.com/">StarTalk Radio</a> that would provide tons of
searchable words. Its RSS feed is located at
<a href="https://feeds.simplecast.com/4T39_jAj">https://feeds.simplecast.com/4T39_jAj</a>, so I needed to read that and pull in
individual episodes. Originally, I planned to save the data from the feed into
a PostgreSQL or MySQL database but decided to keep it simple by just saving the
info from one episode to a Python file.</p>
<p>I created a file named <code>load.py</code> to get the episode information and transcribe
the audio. You can see the code below, but the TL;DR is that it:</p>
<ul>
<li>Downloads the RSS feed locally to a file called <code>theRSSfeed.xml</code></li>
<li>Parses the XML in that file to find all the mp3 URLs</li>
<li>Takes the first episode and feed its mp3 to Deepgram for transcription</li>
<li>Saves the transcript that Deepgram generates to a file named <code>podcast_data.py</code></li>
</ul>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># use python3</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> requests</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> os.path </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> exists</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> xml.etree.ElementTree </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ET</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> urllib.parse </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> scheme_chars, urlparse, parse_qs</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># testing to see if we already downloaded an xml file</span></span>
<span class="line"><span style="color: #8B949E"># if not, download it and save to file</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">the_rss_file </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;theRSSfeed.xml&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">file_exists </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">False</span></span>
<span class="line"><span style="color: #C9D1D9">file_exists </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> exists(the_rss_file)</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> file_exists:</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;no file found:&quot;</span><span style="color: #C9D1D9">,  the_rss_file, </span><span style="color: #A5D6FF">&quot;... downloading ...&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;https://feeds.simplecast.com/4T39_jAj&quot;</span><span style="color: #C9D1D9">  </span><span style="color: #8B949E"># startalk podcast rss feed</span></span>
<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> requests.get(url)</span></span>
<span class="line"><span style="color: #C9D1D9">    the_content </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response.content</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(the_rss_file, </span><span style="color: #A5D6FF">&quot;wb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> outfile:</span></span>
<span class="line"><span style="color: #C9D1D9">        outfile.write(the_content)</span></span>
<span class="line"><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;found file:&quot;</span><span style="color: #C9D1D9">,  the_rss_file, </span><span style="color: #A5D6FF">&quot;... using it ...&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(the_rss_file, </span><span style="color: #A5D6FF">&quot;rb&quot;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> infile:</span></span>
<span class="line"><span style="color: #C9D1D9">        the_content </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> infile.read()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># grab the tree object from the parsed xml file</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">root </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ET</span><span style="color: #C9D1D9">.fromstring(the_content)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># loop through it and find all mp3s in the document</span></span>
<span class="line"><span style="color: #8B949E"># (the way I found which query to make [the &quot;enclosure&quot; query])</span></span>
<span class="line"><span style="color: #8B949E"># is by using my eyeballs to find the relevant location of mp3s</span></span>
<span class="line"><span style="color: #8B949E"># in the rss feed, other rss feeds might be different</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">list_of_mp3s </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> root.iter(</span><span style="color: #A5D6FF">&#39;enclosure&#39;</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">    full_url_mp3 </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> thing.attrib[</span><span style="color: #A5D6FF">&quot;url&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">    parsed_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> urlparse(full_url_mp3)  </span><span style="color: #8B949E"># stripping off query params</span></span>
<span class="line"><span style="color: #C9D1D9">    the_mp3_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> parsed_url.scheme </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;://&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> parsed_url.hostname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> parsed_url.path</span></span>
<span class="line"><span style="color: #C9D1D9">    list_of_mp3s.append(the_mp3_url)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">first_mp3 </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> list_of_mp3s[:</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]  </span><span style="color: #8B949E"># take the first</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># now feed this url to DGs transcription API. You would keep track of the</span></span>
<span class="line"><span style="color: #8B949E"># transcription object you get back so you can use it later for</span></span>
<span class="line"><span style="color: #8B949E"># searching capabilities.</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">DG_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;YOUR_DEEPGRAM_API_KEY_HERE&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">headers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;content-type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;application/json&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Authorization&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Token &quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_API_KEY</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> requests.post(</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;https://api.deepgram.com/v1/listen?punctuate=true&amp;utterances=true&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">headers, </span><span style="color: #FFA657">json</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;url&quot;</span><span style="color: #C9D1D9">: first_mp3})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(first_mp3)</span></span>
<span class="line"><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/workspace/podcast_data.py&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #A5D6FF">&#39;wb&#39;</span><span style="color: #C9D1D9">).write(response.content)</span></span></code></pre>
<p>Then I ran <code>python load.py</code> and BAM!, I’ve got a <code>podcast_data.py</code> with the
transcript of the episode. Now to start building an API that I can send search
terms to.</p>
<h2 id="building-the-podcast-search-engine">Building the Podcast Search Engine</h2>
<p>I spent some time reading
<a href="https://blog.deepgram.com/authors/tonya-sims/">Tonya</a>’s blog posts on
<a href="https://blog.deepgram.com/live-transcription-fastapi/">FastAPI</a> and
<a href="https://blog.deepgram.com/live-transcription-django/">Django</a>,
but eventually decided on <a href="https://blog.deepgram.com/live-transcription-flask/">Flask</a>
to build the back-end API.</p>
<h3 id="receiving-and-responding-to-requests">Receiving and Responding to Requests</h3>
<p>Before I could receive search terms and respond, I had to figure out how to
receive <em>any</em> request and return a response. Luckily, the Flask documentation
provides several good examples of doing that. I started by installing Flask with
pip.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">pip install Flask</span></span></code></pre>
<p>Flask’s documentation told me that if I name my file <code>app.py</code> I can default to
starting the server using <code>flask run</code> in the terminal. I started with a very
basic <code>app.py</code> to see if I could return anything.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hello World&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span></code></pre>
<p>That little bit of Python returns a JSON object. Visiting <code>http://127.0.0.1:5000</code>,
confirmed that it responded with the JSON I expected. Now I can receive a
request and respond to it.</p>
<p>Next, I needed to be able to receive data that is sent via an HTTP POST request.
Again, I was saved by the Flask documentation. I knew that I would eventually be
sending a form field named <code>search</code>, so I added a new method to the <code>app.py</code>
file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    search </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;You searched for &quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> search</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span></code></pre>
<blockquote>
<p>Note on the above: It also requires you to modify the <code>from flask import Flask</code>
to <code>from flask import Flask, request</code>.</p>
</blockquote>
<p>A quick test confirmed that I could pass in form values and respond with them.
With those wins under my belt, I was ready to tackle the job of searching
through the transcript.</p>
<h3 id="searching-the-podcast-transcript">Searching the Podcast Transcript</h3>
<p>To make sure I’m comparing apples to apples, I needed some basic text
normalization. The <code>text_normalize</code> function lowercases everything, removes
common punctuation, removes unnecessary whitespace, and flattens the string to
ASCII.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deep_replace</span><span style="color: #C9D1D9">(inString, inQuery, inReplacement):</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>
<span class="line"><span style="color: #C9D1D9">    query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inQuery</span></span>
<span class="line"><span style="color: #C9D1D9">    replacement </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inReplacement</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text.replace(query, replacement)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> text:</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deep_replace(text, query, replacement)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">text_normalize</span><span style="color: #C9D1D9">(inString):</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> normalize(</span><span style="color: #A5D6FF">&#39;NFKD&#39;</span><span style="color: #C9D1D9">, text).encode(</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;ignore&#39;</span><span style="color: #C9D1D9">).decode(</span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">).lower()</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;?&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;.&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;!&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;,&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;-&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(text.split())</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span></code></pre>
<p>Once I knew I could compare strings relatively well, it was time to look through
the transcript to find a search phrase. All the magic of the search engine takes
place in the <code>search</code> function. First, it normalizes the phrase I’m searching
for and then looks through all the words in the transcript for a match.</p>
<p>For any matches, it creates a string containing the matching word and the five
words that precede and follow the matching word. The match and its corresponding
phrase are loaded to an array called <code>query_results</code> that is finally returned.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(phrase):</span></span>
<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> phrase</span></span>
<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text_normalize(the_query)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(the_query)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># word array search</span></span>
<span class="line"><span style="color: #C9D1D9">    the_body_array </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> podcast_data.data[</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;channels&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;alternatives&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;words&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">    the_body_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> the_body_array:</span></span>
<span class="line"><span style="color: #C9D1D9">        the_body_list.append(text_normalize(thing[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]))</span></span>
<span class="line"><span style="color: #C9D1D9">    query_index_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [idx </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> idx, s </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">enumerate</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">        the_body_list) </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> the_query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> s]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> query_index_list:</span></span>
<span class="line"><span style="color: #C9D1D9">        backforwardcount </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>
<span class="line"><span style="color: #C9D1D9">        quick_text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(the_body_list[</span><span style="color: #79C0FF">max</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, i</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">backforwardcount):</span><span style="color: #79C0FF">min</span><span style="color: #C9D1D9">(i</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">backforwardcount, </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(the_body_list))])</span></span>
<span class="line"><span style="color: #C9D1D9">        query_results.append([the_body_array[i], quick_text])</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span></code></pre>
<p>With the search function ready, it was time to update the POST route of my API.
I passed the search phrase submitted in the POST request to my <code>search</code> function
and then returned the result.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span></code></pre>
<p>Just like magic, I could send requests to my API and have it return matches in
the podcast. But no one wants to send cURL requests all day. It was time to
build the worst user interface for a search engine ever.</p>
<h2 id="building-the-ugliest-user-interface">Building the Ugliest User Interface</h2>
<p>The last step was to build a user interface. Fortunately, since I was building
the ugliest search engine, the bar was low on how it looked. In fact, it was a
bit of a challenge to not try and improve the interface. 😁</p>
<h3 id="the-search-interface">The Search Interface</h3>
<p>One of the reasons I chose to use Flask on the back-end was the fact that it
supported <a href="https://pypi.org/project/Jinja2/">Jinja2</a> out of the box. I had never
used Jinja2, but when someone mentioned it in our Slack, I noticed how similar
it was to <a href="https://handlebarsjs.com/">Handlebars</a> for JavaScript developers.</p>
<p>My goal was to create one HTML file that could display the search box and
results. To separate it from my Python code, I created a new HTML file
at <code>templates/index.html</code>. It was very basic with an H1 tag and a form that
would send a post back to its route.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Podcast Search&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text-align:center;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;World&#39;s Ugliest Podcast Search&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;#&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">&gt;Search for a word&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;{{ search }}&#39;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9">&gt;Search&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Once the HTML file was in place, I updated the original HTTP GET request to
serve it. Because I’m injecting the <code>search</code> parameter, I needed to supply it
with an empty string.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>A quick <code>flask run</code> in the terminal served up my ugly podcast search engine. To
my surprise, it was technically already working. When I entered a search phrase
and pressed the ‘Search’ button, it sent the search phrase to the API, which
returned the results as JSON. Of course, that’s not what I want it to do in the
end, but it was a great feeling to know I was close to the end.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661132558/blog/2022/08/podcast-search-engine/original-podcast-search-engine.png" alt="Interface of an ugly podcast search engine"></p>
<h3 id="displaying-the-search-results">Displaying the Search Results</h3>
<p>While a JSON response would be pretty ugly, I was enjoying Jinja2 too much to
not build an interface to display the results of the search. After the form in
my <code>templates/index.html</code> file, I added an H2 and UL to list the results. If
there was a search phrase, it shows any results in a list.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{% if search %}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Search results for {{ search }}&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;list-style: none;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% for result in results %}</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding:1rem;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        {{ result[1] }}</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">{% endif %}</span></span></code></pre>
<p>Once the template was ready, I needed to update my API to return the HTML.
Rather than returning the results as JSON, I return <code>render_template</code> passing
the search phrase and the query results.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase, </span><span style="color: #FFA657">results</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">query_results)</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-engine-results.png" alt="Results interface of the podcast search engine"></p>
<p>There you have it. Searching works and shows all places where a word was spoken.
The phrases are a nice touch because they give context to what is being said at
that moment. That should be the end right? Oh no. I’m nothing if not a little
extra. It was time to add a little pizzazz.</p>
<h3 id="getting-a-little-fancy">Getting a Little Fancy</h3>
<p>We’re searching through podcasts. By their nature, they are meant for audio.
While I could have stopped by showing the phrase the user was looking for, I
thought it would be cooler if we could play that section of audio. I started by
adding an audio player to the HTML file with the podcast episode I’m searching
through. Users can press play and listen to the podcast if they like, but the
real fun will happen once they search.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">controls</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">source</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;audio/mpeg&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        Your browser does not support the audio element.</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Next, I updated the result LI elements to include an anchor tag that will call
a JavaScript function. (You know I wouldn’t get through all this work without
using a touch of JavaScript.) When it calls the upcoming <code>seek</code> function, it
supplies it with the timestamp of the start of the found word.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;javascript:void(0);&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">onclick</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #D2A8FF">seek</span><span style="color: #A5D6FF">({{result</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start}})</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">&gt;{{ result[1] }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Finally, I added a JavaScript function to the head of the page called <code>seek</code>. It
expects a timestamp parameter. It then grabs the audio player, pauses its
playback, seeks to timestamp location minus eight-tenths of a second, and plays.
Why eight-tenths? I found it started the audio a few words before the searched
phrase so you can better hear the word in context.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text/javascript&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">seek</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">timestamp</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementsByTagName</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">];</span></span>
<span class="line"><span style="color: #C9D1D9">        audio.</span><span style="color: #D2A8FF">pause</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">        audio.currentTime </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">.8</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">        audio.</span><span style="color: #D2A8FF">play</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661136247/blog/2022/08/podcast-search-engine/podcast-search-results-with-audio-player.png" alt="Results interface with an audio player"></p>
<h2 id="final-results">Final Results</h2>
<p>Overall, I really enjoyed dipping my toes into the Python world. I learned several
things that are universal to all languages and I’m excited to learn more. If you
want to build this fun, but completely useless project, the full Python
and HTML files are below. Enjoy!</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E"># app.py</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, render_template, request</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> unicodedata </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> normalize</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> podcast_data</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index_post</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    phrase </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.form[</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search(</span><span style="color: #FFA657">phrase</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&#39;index.html&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">search</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">phrase, </span><span style="color: #FFA657">results</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">query_results)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(phrase):</span></span>
<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> phrase</span></span>
<span class="line"><span style="color: #C9D1D9">    the_query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text_normalize(the_query)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span></span>
<span class="line"><span style="color: #C9D1D9">    the_body_array </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> podcast_data.data[</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;channels&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;alternatives&quot;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&quot;words&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">    the_body_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> thing </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> the_body_array:</span></span>
<span class="line"><span style="color: #C9D1D9">        the_body_list.append(text_normalize(thing[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]))</span></span>
<span class="line"><span style="color: #C9D1D9">    query_index_list </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [idx </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> idx, s </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">enumerate</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">        the_body_list) </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> the_query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> s]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    query_results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> query_index_list:</span></span>
<span class="line"><span style="color: #C9D1D9">        backforwardcount </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>
<span class="line"><span style="color: #C9D1D9">        quick_text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(the_body_list[</span><span style="color: #79C0FF">max</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, i</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">backforwardcount):</span><span style="color: #79C0FF">min</span><span style="color: #C9D1D9">(i</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">backforwardcount, </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">(the_body_list))])</span></span>
<span class="line"><span style="color: #C9D1D9">        query_results.append([the_body_array[i], quick_text])</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> query_results</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deep_replace</span><span style="color: #C9D1D9">(inString, inQuery, inReplacement):</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>
<span class="line"><span style="color: #C9D1D9">    query </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inQuery</span></span>
<span class="line"><span style="color: #C9D1D9">    replacement </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inReplacement</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> text.replace(query, replacement)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> query </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> text:</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> deep_replace(text, query, replacement)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">text_normalize</span><span style="color: #C9D1D9">(inString):</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> inString</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> normalize(</span><span style="color: #A5D6FF">&#39;NFKD&#39;</span><span style="color: #C9D1D9">, text).encode(</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;ignore&#39;</span><span style="color: #C9D1D9">).decode(</span><span style="color: #A5D6FF">&#39;ascii&#39;</span><span style="color: #C9D1D9">).lower()</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;?&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;.&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;!&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;,&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deep_replace(text, </span><span style="color: #A5D6FF">&quot;-&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    text </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot; &quot;</span><span style="color: #C9D1D9">.join(text.split())</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> text</span></span></code></pre>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- templates/index.html --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Podcast Search&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text/javascript&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">seek</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">timestamp</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementsByTagName</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">];</span></span>
<span class="line"><span style="color: #C9D1D9">                audio.</span><span style="color: #D2A8FF">pause</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">                audio.currentTime </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">.8</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">                audio.</span><span style="color: #D2A8FF">play</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">            }</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text-align:center;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;World&#39;s Ugliest Podcast Search&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;#&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">&gt;Search for a word&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&#39;{{ search }}&#39;</span><span style="color: #C9D1D9"> /&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9">&gt;Search&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">controls</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">source</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://stitcher.simplecastaudio.com/8b62332a-56b8-4d25-b175-1e588b078323/episodes/774634ab-c3f5-4100-b6a0-8554c63002c0/audio/128/default.mp3&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;audio/mpeg&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            Your browser does not support the audio element.</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">audio</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        {% if search %}</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Search results for {{ search }}&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;list-style: none;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            {% for result in results %}</span></span>
<span class="line"><span style="color: #C9D1D9">            &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding:1rem;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">                &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;javascript:void(0);&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">onclick</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #D2A8FF">seek</span><span style="color: #A5D6FF">({{result</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start}})</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">&gt;{{ result[1] }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            {% endfor %}</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        {% endif %}</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/podcast-search-engine/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
