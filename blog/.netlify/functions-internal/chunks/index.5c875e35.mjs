import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                          *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
/* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "what-is-a-webhook", "text": "What Is a Webhook?" }, { "depth": 2, "slug": "exploring-some-examples", "text": "Exploring Some Examples" }, { "depth": 3, "slug": "triggering-actions-on-successful-payment", "text": "Triggering Actions On Successful Payment" }, { "depth": 3, "slug": "waiting-for-a-transcript", "text": "Waiting For a Transcript" }, { "depth": 2, "slug": "webhooks-with-nodejs", "text": "Webhooks With Node.js" }, { "depth": 2, "slug": "webhooks-vs-polling", "text": "Webhooks vs. Polling" }], "source": "\nWhen using a web application, have you tried to change the information being displayed on the web page you're on? Even if you don't realize it you've probably done so, many times, through your computer's use of client-server communication.\n\nFor example, you click on something on a web application's UI on your machine (the client), which then sends an HTTP request to the application's server. The server then sends a response back to your device, which then triggers a change in the UI of the web application.\n\n![A digram shows a web browser with four posts numbered 111 to 108. A button on the top of the list reads \"Load new posts\" with a cursor on it. An arrow labelled \"fetch new data\" points at an updated browser window with a list numbered 113 to 109.](https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/update-ui.png)\n\nHowever, what happens when the web application\u2019s server wants to trigger an event based on something that\u2019s happening on a remote server instead of a user action? That\u2019s where webhooks come in!\n\n## What Is a Webhook?\n\nA webhook is a 'reverse HTTP request' between servers rather than a client and a server. A remote server sends an HTTP POST request to a public URL on your application\u2019s server every time an event occurs on their end so that you may trigger an event in your own application based on that update.\n\n## Exploring Some Examples\n\nNow that you have an idea of what a webhook is, let's look at a couple of sample use cases to solidify your understanding.\n\n### Triggering Actions On Successful Payment\n\n![When a payment form is submitted, the server submits a payment request to Stripe. Stripe them sends an immediate repsonse, and triggers some work before responding a second time with a success webhook. The server then sends an SMS message.](https://res.cloudinary.com/deepgram/image/upload/v1645796801/blog/2022/02/understanding-webhooks/stripe-flow.png)\n\nYou have an e-commerce website with a third-party payment processing integration. The process of completing  may be instantly successful but it may also be delayed or end in an error. Since payment processing is done by an external service, you will not have direct access to the payment process happening on their end. Yet, what if you wanted an event triggered on your application after a customer's successful purchase?\n\nA customer purchases on your website, which uses Stripe for payment processing. When a purchase is completed, you send a thank you text. Stripe supports webhooks, to alert us when a purchase has been successful. You provide a URL (that you control) to Stripe, and it receives details about the purchase instantly. Your application then takes the information received and sends an SMS message in response.\n\n### Waiting For a Transcript\n\nWhen requesting a transcript from Deepgram, you can wait for it to be generated, but this can take a few more seconds than you might be able to wait for larger files. You can access Deepgram's webhook by including the callback feature in your request, which allows the user to redirect the transcription results to the URL of your choice.\n\nYour request for a transcript can be answered immediately, allowing you to receive a response immediately. At the same time, Deepgram works in the background before sending the results are sent to your server through the provided URL.\n\n![A server submits a transcription request to Deepgram. Deepgram sends an immediate repsonse, and triggers some work before responding a second time with a success webhook.](https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/deepgram.png)\n\nBecause you control the application that receives a webhook payload, you can build any additional business logic to run once you have data. You might:\n\n*   Send an email to your client to let them know that their transcript is complete with the results.\n*   Translate the transcript provided to your server to be displayed on your application\u2019s UI.\n*   Send an SMS text to the user's phone with a brief preview of the results.\n\n## Webhooks With Node.js\n\nA webhook consumer is just a route handler. Instead of receiving requests from a user action, it will be triggered by the service emitting webhooks. Here\u2019s an example with Express:\n\n```js\n// Require, initialize, and configure Express\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\n// This is the route handler our webhook will POST data to\napp.post('/hook', (req, res) => {\n\n    /*\n        You could do anything here, such as:\n        Add data to a database\n        Trigger an email or SMS\n        Automatically schedule an event on your application's UI\n    */\n\n	console.log(req.body); // See the data\n	res.status(200).end(); // Return empty response to server\n})\n\n// Start express server\napp.listen(3000);\n```\n\nSince webhooks create a POST request to your application, you will need to create a POST route handler in your application. Assuming our application's URL is https://myDIYstore.com, our webhook consumer\u2019s URL will be https://myDIYstore.com/hook.\n\n## Webhooks vs. Polling\n\nIn the examples above, we see that the remote server is sending data to our application using webhooks. However, an alternative to this method is polling from your application's server to the remote server of choice.\n\nPolling means your server will periodically and continuously request to check if there has been an update on the remote server. If there is one, it comes back with the requested information, and your application can stop checking.\n\nThe main difference between using webhooks and polling is that webhooks send a request from a remote server to your server as soon as an event occurs. With polling, a request is being made by your server periodically until it detects an update in the remote server.\n\nTo take advantage of webhooks, the third-party service needs to support them. Where they aren't available, you'll need to poll for updates. While this method can be more resource-intensive for applications, at times, it may be your only option (or even a more fitting one considering the context, but that's outside of the scope of this article). See below for an example of what polling would look like on an Express server.\n\n```js\n// Require cross-fetch library to bring fetch() to Node.js\nconst fetch = require('cross-fetch');\n\n// Require and initialize Express\nconst express = require('express');\nconst app = express();\n\n// Creating a function that once invoked, will poll repeatedly.\nasync function checkStatus() {\n\n  // Asynchronously making an HTTP GET request to our external API\n  let response = await fetch(\"external-api-example-here\").then(r => r.json());\n\n  if (!response.data.status == 'completed') {\n    // If status not completed, rerun this function after 2 seconds\n    await new Promise(r => setTimeout(r, 2000));\n    await checkStatus();\n  } else {\n    // Criteria was met, continue with logic.\n  }\n}\n\n// Invoke the function you have just written\ncheckStatus();\n\n// Start express server\napp.listen(3000);\n```\n\nIn this example, we are continuously querying our chosen third-party API every 2 seconds until the criteria are met. Once the criteria is met, we proceed with our business logic, and the polling stops. As you can see, this can be a resource-intensive method with many requests with no change in data. However, it may be the most appropriate (or only) option, so understanding both polling and webhooks is valuable.\n\nWebhooks are a wonderfully convenient and intuitive tool once you get the hang of it! But, it is important to remember that webhooks need to be supported by the service you are requesting the data from to work! Some platforms that use them include Deepgram, Twitter, Discord, and Stripe.\n\nIf you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>When using a web application, have you tried to change the information being displayed on the web page you\u2019re on? Even if you don\u2019t realize it you\u2019ve probably done so, many times, through your computer\u2019s use of client-server communication.</p>\n<p>For example, you click on something on a web application\u2019s UI on your machine (the client), which then sends an HTTP request to the application\u2019s server. The server then sends a response back to your device, which then triggers a change in the UI of the web application.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/update-ui.png" alt="A digram shows a web browser with four posts numbered 111 to 108. A button on the top of the list reads &#x22;Load new posts&#x22; with a cursor on it. An arrow labelled &#x22;fetch new data&#x22; points at an updated browser window with a list numbered 113 to 109."></p>\n<p>However, what happens when the web application\u2019s server wants to trigger an event based on something that\u2019s happening on a remote server instead of a user action? That\u2019s where webhooks come in!</p>\n<h2 id="what-is-a-webhook">What Is a Webhook?</h2>\n<p>A webhook is a \u2018reverse HTTP request\u2019 between servers rather than a client and a server. A remote server sends an HTTP POST request to a public URL on your application\u2019s server every time an event occurs on their end so that you may trigger an event in your own application based on that update.</p>\n<h2 id="exploring-some-examples">Exploring Some Examples</h2>\n<p>Now that you have an idea of what a webhook is, let\u2019s look at a couple of sample use cases to solidify your understanding.</p>\n<h3 id="triggering-actions-on-successful-payment">Triggering Actions On Successful Payment</h3>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796801/blog/2022/02/understanding-webhooks/stripe-flow.png" alt="When a payment form is submitted, the server submits a payment request to Stripe. Stripe them sends an immediate repsonse, and triggers some work before responding a second time with a success webhook. The server then sends an SMS message."></p>\n<p>You have an e-commerce website with a third-party payment processing integration. The process of completing  may be instantly successful but it may also be delayed or end in an error. Since payment processing is done by an external service, you will not have direct access to the payment process happening on their end. Yet, what if you wanted an event triggered on your application after a customer\u2019s successful purchase?</p>\n<p>A customer purchases on your website, which uses Stripe for payment processing. When a purchase is completed, you send a thank you text. Stripe supports webhooks, to alert us when a purchase has been successful. You provide a URL (that you control) to Stripe, and it receives details about the purchase instantly. Your application then takes the information received and sends an SMS message in response.</p>\n<h3 id="waiting-for-a-transcript">Waiting For a Transcript</h3>\n<p>When requesting a transcript from Deepgram, you can wait for it to be generated, but this can take a few more seconds than you might be able to wait for larger files. You can access Deepgram\u2019s webhook by including the callback feature in your request, which allows the user to redirect the transcription results to the URL of your choice.</p>\n<p>Your request for a transcript can be answered immediately, allowing you to receive a response immediately. At the same time, Deepgram works in the background before sending the results are sent to your server through the provided URL.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/deepgram.png" alt="A server submits a transcription request to Deepgram. Deepgram sends an immediate repsonse, and triggers some work before responding a second time with a success webhook."></p>\n<p>Because you control the application that receives a webhook payload, you can build any additional business logic to run once you have data. You might:</p>\n<ul>\n<li>Send an email to your client to let them know that their transcript is complete with the results.</li>\n<li>Translate the transcript provided to your server to be displayed on your application\u2019s UI.</li>\n<li>Send an SMS text to the user\u2019s phone with a brief preview of the results.</li>\n</ul>\n<h2 id="webhooks-with-nodejs">Webhooks With Node.js</h2>\n<p>A webhook consumer is just a route handler. Instead of receiving requests from a user action, it will be triggered by the service emitting webhooks. Here\u2019s an example with Express:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require, initialize, and configure Express</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// This is the route handler our webhook will POST data to</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/hook&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">/*</span></span>\n<span class="line"><span style="color: #8B949E">        You could do anything here, such as:</span></span>\n<span class="line"><span style="color: #8B949E">        Add data to a database</span></span>\n<span class="line"><span style="color: #8B949E">        Trigger an email or SMS</span></span>\n<span class="line"><span style="color: #8B949E">        Automatically schedule an event on your application&#39;s UI</span></span>\n<span class="line"><span style="color: #8B949E">    */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">	console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(req.body); </span><span style="color: #8B949E">// See the data</span></span>\n<span class="line"><span style="color: #C9D1D9">	res.</span><span style="color: #D2A8FF">status</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">(); </span><span style="color: #8B949E">// Return empty response to server</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Start express server</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>Since webhooks create a POST request to your application, you will need to create a POST route handler in your application. Assuming our application\u2019s URL is <a href="https://myDIYstore.com">https://myDIYstore.com</a>, our webhook consumer\u2019s URL will be <a href="https://myDIYstore.com/hook">https://myDIYstore.com/hook</a>.</p>\n<h2 id="webhooks-vs-polling">Webhooks vs. Polling</h2>\n<p>In the examples above, we see that the remote server is sending data to our application using webhooks. However, an alternative to this method is polling from your application\u2019s server to the remote server of choice.</p>\n<p>Polling means your server will periodically and continuously request to check if there has been an update on the remote server. If there is one, it comes back with the requested information, and your application can stop checking.</p>\n<p>The main difference between using webhooks and polling is that webhooks send a request from a remote server to your server as soon as an event occurs. With polling, a request is being made by your server periodically until it detects an update in the remote server.</p>\n<p>To take advantage of webhooks, the third-party service needs to support them. Where they aren\u2019t available, you\u2019ll need to poll for updates. While this method can be more resource-intensive for applications, at times, it may be your only option (or even a more fitting one considering the context, but that\u2019s outside of the scope of this article). See below for an example of what polling would look like on an Express server.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require cross-fetch library to bring fetch() to Node.js</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Require and initialize Express</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Creating a function that once invoked, will poll repeatedly.</span></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Asynchronously making an HTTP GET request to our external API</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;external-api-example-here&quot;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">response.data.status </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;completed&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// If status not completed, rerun this function after 2 seconds</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(r, </span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">));</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Criteria was met, continue with logic.</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Invoke the function you have just written</span></span>\n<span class="line"><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Start express server</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>In this example, we are continuously querying our chosen third-party API every 2 seconds until the criteria are met. Once the criteria is met, we proceed with our business logic, and the polling stops. As you can see, this can be a resource-intensive method with many requests with no change in data. However, it may be the most appropriate (or only) option, so understanding both polling and webhooks is valuable.</p>\n<p>Webhooks are a wonderfully convenient and intuitive tool once you get the hang of it! But, it is important to remember that webhooks need to be supported by the service you are requesting the data from to work! Some platforms that use them include Deepgram, Twitter, Discord, and Stripe.</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Understanding Webhooks", "description": "Let's talk about why, when, and how webhooks are used in development.", "date": "2022-02-28T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1645796672/blog/2022/02/understanding-webhooks/Understanding-Webhooks%402x.jpg", "authors": ["nicole-ohanian"], "category": "tutorial", "tags": ["webhooks", "beginner"], "seo": { "title": "Understanding Webhooks", "description": "Let's talk about why, when, and how webhooks are used in development." }, "shorturls": { "share": "https://dpgr.am/037383e", "twitter": "https://dpgr.am/43d85fb", "linkedin": "https://dpgr.am/f3c8896", "reddit": "https://dpgr.am/f8ec009", "facebook": "https://dpgr.am/c2d2619" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454005/blog/understanding-webhooks/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "what-is-a-webhook", "text": "What Is a Webhook?" }, { "depth": 2, "slug": "exploring-some-examples", "text": "Exploring Some Examples" }, { "depth": 3, "slug": "triggering-actions-on-successful-payment", "text": "Triggering Actions On Successful Payment" }, { "depth": 3, "slug": "waiting-for-a-transcript", "text": "Waiting For a Transcript" }, { "depth": 2, "slug": "webhooks-with-nodejs", "text": "Webhooks With Node.js" }, { "depth": 2, "slug": "webhooks-vs-polling", "text": "Webhooks vs. Polling" }], "source": "\nWhen using a web application, have you tried to change the information being displayed on the web page you're on? Even if you don't realize it you've probably done so, many times, through your computer's use of client-server communication.\n\nFor example, you click on something on a web application's UI on your machine (the client), which then sends an HTTP request to the application's server. The server then sends a response back to your device, which then triggers a change in the UI of the web application.\n\n![A digram shows a web browser with four posts numbered 111 to 108. A button on the top of the list reads \"Load new posts\" with a cursor on it. An arrow labelled \"fetch new data\" points at an updated browser window with a list numbered 113 to 109.](https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/update-ui.png)\n\nHowever, what happens when the web application\u2019s server wants to trigger an event based on something that\u2019s happening on a remote server instead of a user action? That\u2019s where webhooks come in!\n\n## What Is a Webhook?\n\nA webhook is a 'reverse HTTP request' between servers rather than a client and a server. A remote server sends an HTTP POST request to a public URL on your application\u2019s server every time an event occurs on their end so that you may trigger an event in your own application based on that update.\n\n## Exploring Some Examples\n\nNow that you have an idea of what a webhook is, let's look at a couple of sample use cases to solidify your understanding.\n\n### Triggering Actions On Successful Payment\n\n![When a payment form is submitted, the server submits a payment request to Stripe. Stripe them sends an immediate repsonse, and triggers some work before responding a second time with a success webhook. The server then sends an SMS message.](https://res.cloudinary.com/deepgram/image/upload/v1645796801/blog/2022/02/understanding-webhooks/stripe-flow.png)\n\nYou have an e-commerce website with a third-party payment processing integration. The process of completing  may be instantly successful but it may also be delayed or end in an error. Since payment processing is done by an external service, you will not have direct access to the payment process happening on their end. Yet, what if you wanted an event triggered on your application after a customer's successful purchase?\n\nA customer purchases on your website, which uses Stripe for payment processing. When a purchase is completed, you send a thank you text. Stripe supports webhooks, to alert us when a purchase has been successful. You provide a URL (that you control) to Stripe, and it receives details about the purchase instantly. Your application then takes the information received and sends an SMS message in response.\n\n### Waiting For a Transcript\n\nWhen requesting a transcript from Deepgram, you can wait for it to be generated, but this can take a few more seconds than you might be able to wait for larger files. You can access Deepgram's webhook by including the callback feature in your request, which allows the user to redirect the transcription results to the URL of your choice.\n\nYour request for a transcript can be answered immediately, allowing you to receive a response immediately. At the same time, Deepgram works in the background before sending the results are sent to your server through the provided URL.\n\n![A server submits a transcription request to Deepgram. Deepgram sends an immediate repsonse, and triggers some work before responding a second time with a success webhook.](https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/deepgram.png)\n\nBecause you control the application that receives a webhook payload, you can build any additional business logic to run once you have data. You might:\n\n*   Send an email to your client to let them know that their transcript is complete with the results.\n*   Translate the transcript provided to your server to be displayed on your application\u2019s UI.\n*   Send an SMS text to the user's phone with a brief preview of the results.\n\n## Webhooks With Node.js\n\nA webhook consumer is just a route handler. Instead of receiving requests from a user action, it will be triggered by the service emitting webhooks. Here\u2019s an example with Express:\n\n```js\n// Require, initialize, and configure Express\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\n// This is the route handler our webhook will POST data to\napp.post('/hook', (req, res) => {\n\n    /*\n        You could do anything here, such as:\n        Add data to a database\n        Trigger an email or SMS\n        Automatically schedule an event on your application's UI\n    */\n\n	console.log(req.body); // See the data\n	res.status(200).end(); // Return empty response to server\n})\n\n// Start express server\napp.listen(3000);\n```\n\nSince webhooks create a POST request to your application, you will need to create a POST route handler in your application. Assuming our application's URL is https://myDIYstore.com, our webhook consumer\u2019s URL will be https://myDIYstore.com/hook.\n\n## Webhooks vs. Polling\n\nIn the examples above, we see that the remote server is sending data to our application using webhooks. However, an alternative to this method is polling from your application's server to the remote server of choice.\n\nPolling means your server will periodically and continuously request to check if there has been an update on the remote server. If there is one, it comes back with the requested information, and your application can stop checking.\n\nThe main difference between using webhooks and polling is that webhooks send a request from a remote server to your server as soon as an event occurs. With polling, a request is being made by your server periodically until it detects an update in the remote server.\n\nTo take advantage of webhooks, the third-party service needs to support them. Where they aren't available, you'll need to poll for updates. While this method can be more resource-intensive for applications, at times, it may be your only option (or even a more fitting one considering the context, but that's outside of the scope of this article). See below for an example of what polling would look like on an Express server.\n\n```js\n// Require cross-fetch library to bring fetch() to Node.js\nconst fetch = require('cross-fetch');\n\n// Require and initialize Express\nconst express = require('express');\nconst app = express();\n\n// Creating a function that once invoked, will poll repeatedly.\nasync function checkStatus() {\n\n  // Asynchronously making an HTTP GET request to our external API\n  let response = await fetch(\"external-api-example-here\").then(r => r.json());\n\n  if (!response.data.status == 'completed') {\n    // If status not completed, rerun this function after 2 seconds\n    await new Promise(r => setTimeout(r, 2000));\n    await checkStatus();\n  } else {\n    // Criteria was met, continue with logic.\n  }\n}\n\n// Invoke the function you have just written\ncheckStatus();\n\n// Start express server\napp.listen(3000);\n```\n\nIn this example, we are continuously querying our chosen third-party API every 2 seconds until the criteria are met. Once the criteria is met, we proceed with our business logic, and the polling stops. As you can see, this can be a resource-intensive method with many requests with no change in data. However, it may be the most appropriate (or only) option, so understanding both polling and webhooks is valuable.\n\nWebhooks are a wonderfully convenient and intuitive tool once you get the hang of it! But, it is important to remember that webhooks need to be supported by the service you are requesting the data from to work! Some platforms that use them include Deepgram, Twitter, Discord, and Stripe.\n\nIf you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>When using a web application, have you tried to change the information being displayed on the web page you\u2019re on? Even if you don\u2019t realize it you\u2019ve probably done so, many times, through your computer\u2019s use of client-server communication.</p>\n<p>For example, you click on something on a web application\u2019s UI on your machine (the client), which then sends an HTTP request to the application\u2019s server. The server then sends a response back to your device, which then triggers a change in the UI of the web application.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/update-ui.png" alt="A digram shows a web browser with four posts numbered 111 to 108. A button on the top of the list reads &#x22;Load new posts&#x22; with a cursor on it. An arrow labelled &#x22;fetch new data&#x22; points at an updated browser window with a list numbered 113 to 109."></p>\n<p>However, what happens when the web application\u2019s server wants to trigger an event based on something that\u2019s happening on a remote server instead of a user action? That\u2019s where webhooks come in!</p>\n<h2 id="what-is-a-webhook">What Is a Webhook?</h2>\n<p>A webhook is a \u2018reverse HTTP request\u2019 between servers rather than a client and a server. A remote server sends an HTTP POST request to a public URL on your application\u2019s server every time an event occurs on their end so that you may trigger an event in your own application based on that update.</p>\n<h2 id="exploring-some-examples">Exploring Some Examples</h2>\n<p>Now that you have an idea of what a webhook is, let\u2019s look at a couple of sample use cases to solidify your understanding.</p>\n<h3 id="triggering-actions-on-successful-payment">Triggering Actions On Successful Payment</h3>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796801/blog/2022/02/understanding-webhooks/stripe-flow.png" alt="When a payment form is submitted, the server submits a payment request to Stripe. Stripe them sends an immediate repsonse, and triggers some work before responding a second time with a success webhook. The server then sends an SMS message."></p>\n<p>You have an e-commerce website with a third-party payment processing integration. The process of completing  may be instantly successful but it may also be delayed or end in an error. Since payment processing is done by an external service, you will not have direct access to the payment process happening on their end. Yet, what if you wanted an event triggered on your application after a customer\u2019s successful purchase?</p>\n<p>A customer purchases on your website, which uses Stripe for payment processing. When a purchase is completed, you send a thank you text. Stripe supports webhooks, to alert us when a purchase has been successful. You provide a URL (that you control) to Stripe, and it receives details about the purchase instantly. Your application then takes the information received and sends an SMS message in response.</p>\n<h3 id="waiting-for-a-transcript">Waiting For a Transcript</h3>\n<p>When requesting a transcript from Deepgram, you can wait for it to be generated, but this can take a few more seconds than you might be able to wait for larger files. You can access Deepgram\u2019s webhook by including the callback feature in your request, which allows the user to redirect the transcription results to the URL of your choice.</p>\n<p>Your request for a transcript can be answered immediately, allowing you to receive a response immediately. At the same time, Deepgram works in the background before sending the results are sent to your server through the provided URL.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/deepgram.png" alt="A server submits a transcription request to Deepgram. Deepgram sends an immediate repsonse, and triggers some work before responding a second time with a success webhook."></p>\n<p>Because you control the application that receives a webhook payload, you can build any additional business logic to run once you have data. You might:</p>\n<ul>\n<li>Send an email to your client to let them know that their transcript is complete with the results.</li>\n<li>Translate the transcript provided to your server to be displayed on your application\u2019s UI.</li>\n<li>Send an SMS text to the user\u2019s phone with a brief preview of the results.</li>\n</ul>\n<h2 id="webhooks-with-nodejs">Webhooks With Node.js</h2>\n<p>A webhook consumer is just a route handler. Instead of receiving requests from a user action, it will be triggered by the service emitting webhooks. Here\u2019s an example with Express:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require, initialize, and configure Express</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// This is the route handler our webhook will POST data to</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/hook&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">/*</span></span>\n<span class="line"><span style="color: #8B949E">        You could do anything here, such as:</span></span>\n<span class="line"><span style="color: #8B949E">        Add data to a database</span></span>\n<span class="line"><span style="color: #8B949E">        Trigger an email or SMS</span></span>\n<span class="line"><span style="color: #8B949E">        Automatically schedule an event on your application&#39;s UI</span></span>\n<span class="line"><span style="color: #8B949E">    */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">	console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(req.body); </span><span style="color: #8B949E">// See the data</span></span>\n<span class="line"><span style="color: #C9D1D9">	res.</span><span style="color: #D2A8FF">status</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">(); </span><span style="color: #8B949E">// Return empty response to server</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Start express server</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>Since webhooks create a POST request to your application, you will need to create a POST route handler in your application. Assuming our application\u2019s URL is <a href="https://myDIYstore.com">https://myDIYstore.com</a>, our webhook consumer\u2019s URL will be <a href="https://myDIYstore.com/hook">https://myDIYstore.com/hook</a>.</p>\n<h2 id="webhooks-vs-polling">Webhooks vs. Polling</h2>\n<p>In the examples above, we see that the remote server is sending data to our application using webhooks. However, an alternative to this method is polling from your application\u2019s server to the remote server of choice.</p>\n<p>Polling means your server will periodically and continuously request to check if there has been an update on the remote server. If there is one, it comes back with the requested information, and your application can stop checking.</p>\n<p>The main difference between using webhooks and polling is that webhooks send a request from a remote server to your server as soon as an event occurs. With polling, a request is being made by your server periodically until it detects an update in the remote server.</p>\n<p>To take advantage of webhooks, the third-party service needs to support them. Where they aren\u2019t available, you\u2019ll need to poll for updates. While this method can be more resource-intensive for applications, at times, it may be your only option (or even a more fitting one considering the context, but that\u2019s outside of the scope of this article). See below for an example of what polling would look like on an Express server.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require cross-fetch library to bring fetch() to Node.js</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Require and initialize Express</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Creating a function that once invoked, will poll repeatedly.</span></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Asynchronously making an HTTP GET request to our external API</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;external-api-example-here&quot;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">response.data.status </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;completed&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// If status not completed, rerun this function after 2 seconds</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(r, </span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">));</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Criteria was met, continue with logic.</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Invoke the function you have just written</span></span>\n<span class="line"><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Start express server</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>In this example, we are continuously querying our chosen third-party API every 2 seconds until the criteria are met. Once the criteria is met, we proceed with our business logic, and the polling stops. As you can see, this can be a resource-intensive method with many requests with no change in data. However, it may be the most appropriate (or only) option, so understanding both polling and webhooks is valuable.</p>\n<p>Webhooks are a wonderfully convenient and intuitive tool once you get the hang of it! But, it is important to remember that webhooks need to be supported by the service you are requesting the data from to work! Some platforms that use them include Deepgram, Twitter, Discord, and Stripe.</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/understanding-webhooks/index.md" };
function rawContent() {
  return "\nWhen using a web application, have you tried to change the information being displayed on the web page you're on? Even if you don't realize it you've probably done so, many times, through your computer's use of client-server communication.\n\nFor example, you click on something on a web application's UI on your machine (the client), which then sends an HTTP request to the application's server. The server then sends a response back to your device, which then triggers a change in the UI of the web application.\n\n![A digram shows a web browser with four posts numbered 111 to 108. A button on the top of the list reads \"Load new posts\" with a cursor on it. An arrow labelled \"fetch new data\" points at an updated browser window with a list numbered 113 to 109.](https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/update-ui.png)\n\nHowever, what happens when the web application\u2019s server wants to trigger an event based on something that\u2019s happening on a remote server instead of a user action? That\u2019s where webhooks come in!\n\n## What Is a Webhook?\n\nA webhook is a 'reverse HTTP request' between servers rather than a client and a server. A remote server sends an HTTP POST request to a public URL on your application\u2019s server every time an event occurs on their end so that you may trigger an event in your own application based on that update.\n\n## Exploring Some Examples\n\nNow that you have an idea of what a webhook is, let's look at a couple of sample use cases to solidify your understanding.\n\n### Triggering Actions On Successful Payment\n\n![When a payment form is submitted, the server submits a payment request to Stripe. Stripe them sends an immediate repsonse, and triggers some work before responding a second time with a success webhook. The server then sends an SMS message.](https://res.cloudinary.com/deepgram/image/upload/v1645796801/blog/2022/02/understanding-webhooks/stripe-flow.png)\n\nYou have an e-commerce website with a third-party payment processing integration. The process of completing  may be instantly successful but it may also be delayed or end in an error. Since payment processing is done by an external service, you will not have direct access to the payment process happening on their end. Yet, what if you wanted an event triggered on your application after a customer's successful purchase?\n\nA customer purchases on your website, which uses Stripe for payment processing. When a purchase is completed, you send a thank you text. Stripe supports webhooks, to alert us when a purchase has been successful. You provide a URL (that you control) to Stripe, and it receives details about the purchase instantly. Your application then takes the information received and sends an SMS message in response.\n\n### Waiting For a Transcript\n\nWhen requesting a transcript from Deepgram, you can wait for it to be generated, but this can take a few more seconds than you might be able to wait for larger files. You can access Deepgram's webhook by including the callback feature in your request, which allows the user to redirect the transcription results to the URL of your choice.\n\nYour request for a transcript can be answered immediately, allowing you to receive a response immediately. At the same time, Deepgram works in the background before sending the results are sent to your server through the provided URL.\n\n![A server submits a transcription request to Deepgram. Deepgram sends an immediate repsonse, and triggers some work before responding a second time with a success webhook.](https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/deepgram.png)\n\nBecause you control the application that receives a webhook payload, you can build any additional business logic to run once you have data. You might:\n\n*   Send an email to your client to let them know that their transcript is complete with the results.\n*   Translate the transcript provided to your server to be displayed on your application\u2019s UI.\n*   Send an SMS text to the user's phone with a brief preview of the results.\n\n## Webhooks With Node.js\n\nA webhook consumer is just a route handler. Instead of receiving requests from a user action, it will be triggered by the service emitting webhooks. Here\u2019s an example with Express:\n\n```js\n// Require, initialize, and configure Express\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\n// This is the route handler our webhook will POST data to\napp.post('/hook', (req, res) => {\n\n    /*\n        You could do anything here, such as:\n        Add data to a database\n        Trigger an email or SMS\n        Automatically schedule an event on your application's UI\n    */\n\n	console.log(req.body); // See the data\n	res.status(200).end(); // Return empty response to server\n})\n\n// Start express server\napp.listen(3000);\n```\n\nSince webhooks create a POST request to your application, you will need to create a POST route handler in your application. Assuming our application's URL is https://myDIYstore.com, our webhook consumer\u2019s URL will be https://myDIYstore.com/hook.\n\n## Webhooks vs. Polling\n\nIn the examples above, we see that the remote server is sending data to our application using webhooks. However, an alternative to this method is polling from your application's server to the remote server of choice.\n\nPolling means your server will periodically and continuously request to check if there has been an update on the remote server. If there is one, it comes back with the requested information, and your application can stop checking.\n\nThe main difference between using webhooks and polling is that webhooks send a request from a remote server to your server as soon as an event occurs. With polling, a request is being made by your server periodically until it detects an update in the remote server.\n\nTo take advantage of webhooks, the third-party service needs to support them. Where they aren't available, you'll need to poll for updates. While this method can be more resource-intensive for applications, at times, it may be your only option (or even a more fitting one considering the context, but that's outside of the scope of this article). See below for an example of what polling would look like on an Express server.\n\n```js\n// Require cross-fetch library to bring fetch() to Node.js\nconst fetch = require('cross-fetch');\n\n// Require and initialize Express\nconst express = require('express');\nconst app = express();\n\n// Creating a function that once invoked, will poll repeatedly.\nasync function checkStatus() {\n\n  // Asynchronously making an HTTP GET request to our external API\n  let response = await fetch(\"external-api-example-here\").then(r => r.json());\n\n  if (!response.data.status == 'completed') {\n    // If status not completed, rerun this function after 2 seconds\n    await new Promise(r => setTimeout(r, 2000));\n    await checkStatus();\n  } else {\n    // Criteria was met, continue with logic.\n  }\n}\n\n// Invoke the function you have just written\ncheckStatus();\n\n// Start express server\napp.listen(3000);\n```\n\nIn this example, we are continuously querying our chosen third-party API every 2 seconds until the criteria are met. Once the criteria is met, we proceed with our business logic, and the polling stops. As you can see, this can be a resource-intensive method with many requests with no change in data. However, it may be the most appropriate (or only) option, so understanding both polling and webhooks is valuable.\n\nWebhooks are a wonderfully convenient and intuitive tool once you get the hang of it! But, it is important to remember that webhooks need to be supported by the service you are requesting the data from to work! Some platforms that use them include Deepgram, Twitter, Discord, and Stripe.\n\nIf you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ";
}
function compiledContent() {
  return '<p>When using a web application, have you tried to change the information being displayed on the web page you\u2019re on? Even if you don\u2019t realize it you\u2019ve probably done so, many times, through your computer\u2019s use of client-server communication.</p>\n<p>For example, you click on something on a web application\u2019s UI on your machine (the client), which then sends an HTTP request to the application\u2019s server. The server then sends a response back to your device, which then triggers a change in the UI of the web application.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/update-ui.png" alt="A digram shows a web browser with four posts numbered 111 to 108. A button on the top of the list reads &#x22;Load new posts&#x22; with a cursor on it. An arrow labelled &#x22;fetch new data&#x22; points at an updated browser window with a list numbered 113 to 109."></p>\n<p>However, what happens when the web application\u2019s server wants to trigger an event based on something that\u2019s happening on a remote server instead of a user action? That\u2019s where webhooks come in!</p>\n<h2 id="what-is-a-webhook">What Is a Webhook?</h2>\n<p>A webhook is a \u2018reverse HTTP request\u2019 between servers rather than a client and a server. A remote server sends an HTTP POST request to a public URL on your application\u2019s server every time an event occurs on their end so that you may trigger an event in your own application based on that update.</p>\n<h2 id="exploring-some-examples">Exploring Some Examples</h2>\n<p>Now that you have an idea of what a webhook is, let\u2019s look at a couple of sample use cases to solidify your understanding.</p>\n<h3 id="triggering-actions-on-successful-payment">Triggering Actions On Successful Payment</h3>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796801/blog/2022/02/understanding-webhooks/stripe-flow.png" alt="When a payment form is submitted, the server submits a payment request to Stripe. Stripe them sends an immediate repsonse, and triggers some work before responding a second time with a success webhook. The server then sends an SMS message."></p>\n<p>You have an e-commerce website with a third-party payment processing integration. The process of completing  may be instantly successful but it may also be delayed or end in an error. Since payment processing is done by an external service, you will not have direct access to the payment process happening on their end. Yet, what if you wanted an event triggered on your application after a customer\u2019s successful purchase?</p>\n<p>A customer purchases on your website, which uses Stripe for payment processing. When a purchase is completed, you send a thank you text. Stripe supports webhooks, to alert us when a purchase has been successful. You provide a URL (that you control) to Stripe, and it receives details about the purchase instantly. Your application then takes the information received and sends an SMS message in response.</p>\n<h3 id="waiting-for-a-transcript">Waiting For a Transcript</h3>\n<p>When requesting a transcript from Deepgram, you can wait for it to be generated, but this can take a few more seconds than you might be able to wait for larger files. You can access Deepgram\u2019s webhook by including the callback feature in your request, which allows the user to redirect the transcription results to the URL of your choice.</p>\n<p>Your request for a transcript can be answered immediately, allowing you to receive a response immediately. At the same time, Deepgram works in the background before sending the results are sent to your server through the provided URL.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/deepgram.png" alt="A server submits a transcription request to Deepgram. Deepgram sends an immediate repsonse, and triggers some work before responding a second time with a success webhook."></p>\n<p>Because you control the application that receives a webhook payload, you can build any additional business logic to run once you have data. You might:</p>\n<ul>\n<li>Send an email to your client to let them know that their transcript is complete with the results.</li>\n<li>Translate the transcript provided to your server to be displayed on your application\u2019s UI.</li>\n<li>Send an SMS text to the user\u2019s phone with a brief preview of the results.</li>\n</ul>\n<h2 id="webhooks-with-nodejs">Webhooks With Node.js</h2>\n<p>A webhook consumer is just a route handler. Instead of receiving requests from a user action, it will be triggered by the service emitting webhooks. Here\u2019s an example with Express:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require, initialize, and configure Express</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// This is the route handler our webhook will POST data to</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/hook&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">/*</span></span>\n<span class="line"><span style="color: #8B949E">        You could do anything here, such as:</span></span>\n<span class="line"><span style="color: #8B949E">        Add data to a database</span></span>\n<span class="line"><span style="color: #8B949E">        Trigger an email or SMS</span></span>\n<span class="line"><span style="color: #8B949E">        Automatically schedule an event on your application&#39;s UI</span></span>\n<span class="line"><span style="color: #8B949E">    */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">	console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(req.body); </span><span style="color: #8B949E">// See the data</span></span>\n<span class="line"><span style="color: #C9D1D9">	res.</span><span style="color: #D2A8FF">status</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">(); </span><span style="color: #8B949E">// Return empty response to server</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Start express server</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>Since webhooks create a POST request to your application, you will need to create a POST route handler in your application. Assuming our application\u2019s URL is <a href="https://myDIYstore.com">https://myDIYstore.com</a>, our webhook consumer\u2019s URL will be <a href="https://myDIYstore.com/hook">https://myDIYstore.com/hook</a>.</p>\n<h2 id="webhooks-vs-polling">Webhooks vs. Polling</h2>\n<p>In the examples above, we see that the remote server is sending data to our application using webhooks. However, an alternative to this method is polling from your application\u2019s server to the remote server of choice.</p>\n<p>Polling means your server will periodically and continuously request to check if there has been an update on the remote server. If there is one, it comes back with the requested information, and your application can stop checking.</p>\n<p>The main difference between using webhooks and polling is that webhooks send a request from a remote server to your server as soon as an event occurs. With polling, a request is being made by your server periodically until it detects an update in the remote server.</p>\n<p>To take advantage of webhooks, the third-party service needs to support them. Where they aren\u2019t available, you\u2019ll need to poll for updates. While this method can be more resource-intensive for applications, at times, it may be your only option (or even a more fitting one considering the context, but that\u2019s outside of the scope of this article). See below for an example of what polling would look like on an Express server.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require cross-fetch library to bring fetch() to Node.js</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Require and initialize Express</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Creating a function that once invoked, will poll repeatedly.</span></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Asynchronously making an HTTP GET request to our external API</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;external-api-example-here&quot;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">response.data.status </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;completed&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// If status not completed, rerun this function after 2 seconds</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(r, </span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">));</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Criteria was met, continue with logic.</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Invoke the function you have just written</span></span>\n<span class="line"><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Start express server</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">);</span></span></code></pre>\n<p>In this example, we are continuously querying our chosen third-party API every 2 seconds until the criteria are met. Once the criteria is met, we proceed with our business logic, and the polling stops. As you can see, this can be a resource-intensive method with many requests with no change in data. However, it may be the most appropriate (or only) option, so understanding both polling and webhooks is valuable.</p>\n<p>Webhooks are a wonderfully convenient and intuitive tool once you get the hang of it! But, it is important to remember that webhooks need to be supported by the service you are requesting the data from to work! Some platforms that use them include Deepgram, Twitter, Discord, and Stripe.</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/understanding-webhooks/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>When using a web application, have you tried to change the information being displayed on the web page you’re on? Even if you don’t realize it you’ve probably done so, many times, through your computer’s use of client-server communication.</p>
<p>For example, you click on something on a web application’s UI on your machine (the client), which then sends an HTTP request to the application’s server. The server then sends a response back to your device, which then triggers a change in the UI of the web application.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/update-ui.png" alt="A digram shows a web browser with four posts numbered 111 to 108. A button on the top of the list reads &quot;Load new posts&quot; with a cursor on it. An arrow labelled &quot;fetch new data&quot; points at an updated browser window with a list numbered 113 to 109."></p>
<p>However, what happens when the web application’s server wants to trigger an event based on something that’s happening on a remote server instead of a user action? That’s where webhooks come in!</p>
<h2 id="what-is-a-webhook">What Is a Webhook?</h2>
<p>A webhook is a ‘reverse HTTP request’ between servers rather than a client and a server. A remote server sends an HTTP POST request to a public URL on your application’s server every time an event occurs on their end so that you may trigger an event in your own application based on that update.</p>
<h2 id="exploring-some-examples">Exploring Some Examples</h2>
<p>Now that you have an idea of what a webhook is, let’s look at a couple of sample use cases to solidify your understanding.</p>
<h3 id="triggering-actions-on-successful-payment">Triggering Actions On Successful Payment</h3>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796801/blog/2022/02/understanding-webhooks/stripe-flow.png" alt="When a payment form is submitted, the server submits a payment request to Stripe. Stripe them sends an immediate repsonse, and triggers some work before responding a second time with a success webhook. The server then sends an SMS message."></p>
<p>You have an e-commerce website with a third-party payment processing integration. The process of completing  may be instantly successful but it may also be delayed or end in an error. Since payment processing is done by an external service, you will not have direct access to the payment process happening on their end. Yet, what if you wanted an event triggered on your application after a customer’s successful purchase?</p>
<p>A customer purchases on your website, which uses Stripe for payment processing. When a purchase is completed, you send a thank you text. Stripe supports webhooks, to alert us when a purchase has been successful. You provide a URL (that you control) to Stripe, and it receives details about the purchase instantly. Your application then takes the information received and sends an SMS message in response.</p>
<h3 id="waiting-for-a-transcript">Waiting For a Transcript</h3>
<p>When requesting a transcript from Deepgram, you can wait for it to be generated, but this can take a few more seconds than you might be able to wait for larger files. You can access Deepgram’s webhook by including the callback feature in your request, which allows the user to redirect the transcription results to the URL of your choice.</p>
<p>Your request for a transcript can be answered immediately, allowing you to receive a response immediately. At the same time, Deepgram works in the background before sending the results are sent to your server through the provided URL.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1645796695/blog/2022/02/understanding-webhooks/deepgram.png" alt="A server submits a transcription request to Deepgram. Deepgram sends an immediate repsonse, and triggers some work before responding a second time with a success webhook."></p>
<p>Because you control the application that receives a webhook payload, you can build any additional business logic to run once you have data. You might:</p>
<ul>
<li>Send an email to your client to let them know that their transcript is complete with the results.</li>
<li>Translate the transcript provided to your server to be displayed on your application’s UI.</li>
<li>Send an SMS text to the user’s phone with a brief preview of the results.</li>
</ul>
<h2 id="webhooks-with-nodejs">Webhooks With Node.js</h2>
<p>A webhook consumer is just a route handler. Instead of receiving requests from a user action, it will be triggered by the service emitting webhooks. Here’s an example with Express:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require, initialize, and configure Express</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">());</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// This is the route handler our webhook will POST data to</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/hook&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">/*</span></span>
<span class="line"><span style="color: #8B949E">        You could do anything here, such as:</span></span>
<span class="line"><span style="color: #8B949E">        Add data to a database</span></span>
<span class="line"><span style="color: #8B949E">        Trigger an email or SMS</span></span>
<span class="line"><span style="color: #8B949E">        Automatically schedule an event on your application&#39;s UI</span></span>
<span class="line"><span style="color: #8B949E">    */</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">	console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(req.body); </span><span style="color: #8B949E">// See the data</span></span>
<span class="line"><span style="color: #C9D1D9">	res.</span><span style="color: #D2A8FF">status</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">(); </span><span style="color: #8B949E">// Return empty response to server</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Start express server</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">);</span></span></code></pre>
<p>Since webhooks create a POST request to your application, you will need to create a POST route handler in your application. Assuming our application’s URL is <a href="https://myDIYstore.com">https://myDIYstore.com</a>, our webhook consumer’s URL will be <a href="https://myDIYstore.com/hook">https://myDIYstore.com/hook</a>.</p>
<h2 id="webhooks-vs-polling">Webhooks vs. Polling</h2>
<p>In the examples above, we see that the remote server is sending data to our application using webhooks. However, an alternative to this method is polling from your application’s server to the remote server of choice.</p>
<p>Polling means your server will periodically and continuously request to check if there has been an update on the remote server. If there is one, it comes back with the requested information, and your application can stop checking.</p>
<p>The main difference between using webhooks and polling is that webhooks send a request from a remote server to your server as soon as an event occurs. With polling, a request is being made by your server periodically until it detects an update in the remote server.</p>
<p>To take advantage of webhooks, the third-party service needs to support them. Where they aren’t available, you’ll need to poll for updates. While this method can be more resource-intensive for applications, at times, it may be your only option (or even a more fitting one considering the context, but that’s outside of the scope of this article). See below for an example of what polling would look like on an Express server.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require cross-fetch library to bring fetch() to Node.js</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Require and initialize Express</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Creating a function that once invoked, will poll repeatedly.</span></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Asynchronously making an HTTP GET request to our external API</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;external-api-example-here&quot;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">());</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">response.data.status </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;completed&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// If status not completed, rerun this function after 2 seconds</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(r, </span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">));</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Criteria was met, continue with logic.</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Invoke the function you have just written</span></span>
<span class="line"><span style="color: #D2A8FF">checkStatus</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Start express server</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">);</span></span></code></pre>
<p>In this example, we are continuously querying our chosen third-party API every 2 seconds until the criteria are met. Once the criteria is met, we proceed with our business logic, and the polling stops. As you can see, this can be a resource-intensive method with many requests with no change in data. However, it may be the most appropriate (or only) option, so understanding both polling and webhooks is valuable.</p>
<p>Webhooks are a wonderfully convenient and intuitive tool once you get the hang of it! But, it is important to remember that webhooks need to be supported by the service you are requesting the data from to work! Some platforms that use them include Deepgram, Twitter, Discord, and Stripe.</p>
<p>If you have any questions, please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/understanding-webhooks/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
