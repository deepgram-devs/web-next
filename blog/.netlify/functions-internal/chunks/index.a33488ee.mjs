import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 1, "slug": "what-well-build", "text": "What We\u2019ll Build" }, { "depth": 1, "slug": "getting-started", "text": "Getting Started" }, { "depth": 1, "slug": "the-code", "text": "The Code" }], "source": 'Imagine having the ability to monitor certain words or phrases during phone conversations by doing voice transcription with Python. This capability is a typical use case for a call center where calls are monitored between a customer service agent and a customer. Most of these conversations start with the agent saying, \u201CThis call is recorded for quality assurance purposes\u201D. This phrase is usually legally required to inform the person on the other end that they are being recorded, and this scenario is a common use case for ASR technology known as script compliance.\n\nCombining voice transcription with Python using Deepgram, there are many innovative ways to monitor script compliance without manually listening to each recorded call. Deepgram provides a speech-to-text solution that transcribes audio to text with Python, real-time and pre-recorded calls. This solution is ideal to:\n\n* Provide insights into how the agent handled the call by running analytics in Python (you can read more about analytics with Deepgram and Python [here](https://blog.deepgram.com/python-talk-time-analytics/).\n* Keep customers happy by improving their experience and satisfaction, increasing sales and revenue.\n* Reduce costs and save time by identifying non-compliance immediately.\n\nIn the next section, let\u2019s review the project we\u2019ll build together. If you\u2019d like to jump ahead and grab the code for this project, you can do so [here in our Github repo](https://github.com/deepgram-devs/python-script-compliance).\n\n# What We\u2019ll Build\n\nThis tutorial will use the Deepgram Python SDK to build a simple script that transcribes audio to text with Python and simulates monitoring script compliance by searching words and phrases. Although Deepgram has a [diarize feature](https://developers.deepgram.com/documentation/features/diarize/) to help us recognize speakers when multiple people are talking (which is very useful for script compliance examples with an agent and a customer), we\u2019ll use a script with one person speaking to keep things simple. In a [previous article](https://blog.deepgram.com/python-talk-time-analytics/) we built a project using the `diarize` feature to gather transcripts for multiple speakers if you\'d like to learn more.\n\nWe\u2019ll focus on monitoring script compliance by doing the following:\n\n* Read our audio and receive our transcript\n* Write a function that searches for flagged words and phrases\n* Use the same function to search for wanted keywords and phrases\n* Create a scorecard of how many flagged words and keywords are spoken\n\nNow that we\u2019re clear on what we\u2019re building let\u2019s get started!\n\n# Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our [Deepgram console](https://console.deepgram.com/signup?jump=keys). Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\n\nNext, let\u2019s make a directory anywhere we\u2019d like.\n\n```\nmkdir deepgram_script_compliance\n```\n\nThen change into that directory so we can start adding things to it.\n\n```\ncd deepgram_script_compliance\n```\n\nWe\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n<Panel type="info" title="Important Note">\n\nIt\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.\n\n</Panel>\n\nNow we can open up our favorite editor and create a file called `script_compliance.py`. If you\u2019d like to make it from the command line, do this:\n\n```\ntouch script_compliance.py\n```\n\nFinally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named `venv`, then activate it.\n\n```\nsource venv/bin/activate\n```\n\nAfter activation, we install the dependencies, including:\n\n* The Deepgram Python SDK\n* The dotenv library helps us work with our environment variables\n* The library Tabulate to pretty-print our tables\n* The Colorama library to color-code our terminal\n\n{/*<!---->*/}\n\n```\npip install deepgram-sdk\npip install python-dotenv\npip install tabulate\npip install colorama\n```\n\nThe following section will show the ease of using Python with Deepgram to monitor search terms with a newbie-friendly script.\n\n# The Code\n\nLet\u2019s open our `script_compliance.py` file and include the following code at the top:\n\n```python\nimport asyncio\nfrom deepgram import Deepgram\nfrom dotenv import load_dotenv\nfrom typing import Dict\nfrom tabulate import tabulate\nfrom colorama import init\nfrom colorama import Fore\nimport os\n\ninit()\n\nload_dotenv()\n\nPATH_TO_FILE = \'gettysburg.wav\'\n\nflagged_words = {\n   "and": "This is a flagged word!",\n   "are": "This is another flagged word!",\n   "um": "This is a filler word!"\n}\n\nsearch_words = ["engaged in a great civil war", "new nation", "Ok I see"]\n\nscore_card = []\n```\n\nThe first part is Python imports. We need to access the modules and libraries for our script to work correctly.\n\nThe `load_dotenv()` will help us load our `api_key` from an `env` file, which holds our environment variables.\n\nThe `PATH_TO_FILE = \'gettysburg.wav\'` is a path to the audio file we\u2019ll use to do the speech-to-text transcription.\n\nThe `flagged_words` dictionary is where we\u2019ll keep the words in a `key` which we monitor what we don\u2019t want our speaker to say. The `values` in the dictionary contain a warning for each flagged word.\n\nThe `search_words` list are words or phrases that we monitor and want our speaker to say during the audio.\n\nThe `score_card` will keep track of how many flagged words and search words our speaker says in the transcript.\n\nCreate an `env` file at the same level as our `script_compliance.py`. Put the following inside of it:\n\n```\nDEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D\n```\n\nWe replace `YOUR_API_KEY` with our api_key, which we got from Deepgram.\n\nNext, let\u2019s add the audio file to our project by [downloading it here](https://developers.deepgram.com/data/audio/gettysburg.wav) and adding it to our project directory.\n\n<Panel type="info" title="Important Note">\n\nTo follow along, we\u2019ll need to download this .wav file. If you\u2019d like to use another file, please note you\u2019ll have to change the `flagged_words` and `search_words` for the project to work correctly.\n\n</Panel>\n\nOur project directory structure should look like this:\n\n![project structure for Deepgram script compliance with Python](https://res.cloudinary.com/deepgram/image/upload/v1648578364/blog/2022/03/python-script-compliance/project-structure.png)\n\nBack in our `script_compliance.py`, let\u2019s add this code to our `main` function:\n\n```python\n\u200B\u200Basync def main():\n   deepgram = Deepgram(os.getenv("DEEPGRAM_API_KEY"))\n\n   with open(PATH_TO_FILE, \'rb\') as audio:\n       source = {\'buffer\': audio, \'mimetype\': \'audio/wav\'}\n       transcription = await deepgram.transcription.prerecorded(source, {\'punctuate\': True })\n\n       speakers = await script_compliance(transcription)\n\n\nasyncio.run(main())\n```\n\nHere we are initializing Deepgram and pulling in our `DEEPGRAM_API_KEY`. We open our audio file and set the `source` to recognize it\u2019s an `audio/wav`. Then we get the transcription and pass in the `source` and a Python dictionary `{\'punctuate\': True}`. The Deepgram `punctuate` option adds punctuation and capitalization to our transcript. Read more on [how to use](https://developers.deepgram.com/documentation/features/punctuate/) `punctuate`.\n\nLastly, let\u2019s add our `script_compliance` function to the `script_compliance.py` file, just above our `main` function.\n\n```python\nasync def script_compliance(transcript_data: Dict) -> None:\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'transcript\']\n\n       data = []\n\n       for key,value in flagged_words.items():\n           score_flagged_words = transcript.count(key)\n           if score_flagged_words:\n               data.append([key, value])\n\n           score_card.append(score_flagged_words)\n\n       print(Fore.RED, tabulate(data, headers=["Flagged Word", "Warning Message"]))\n\n       print()\n\n       words = []\n       for item in search_words:\n           if item in transcript:\n               words.append(["Yes", item])\n           else:\n               words.append(["No", item])\n\n       print(Fore.GREEN, tabulate(words, headers=["Word(s) Found", "item"]))\n\n       print()\n\n       print(Fore.YELLOW, tabulate([[sum(score_card), len([w for w in words if w[0] == "Yes"])]], headers=["Flagged Word Count", "Search Word Count"]))\n```\n\nLet\u2019s break the code down.\n\n```python\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'transcript\']\n```\n\nThe lines above get the transcript as a String type from the JSON response and store it in a variable called `transcript`.\n\n```python\ndata = []\n\nfor key,value in flagged_words.items():\n     score_flagged_words = transcript.count(key)\n      if score_flagged_words:\n             data.append([key, value])\n\n       score_card.append(score_flagged_words)\n\n print(Fore.RED, tabulate(data, headers=["Flagged Word", "Warning Message"]))\n```\n\nWe create an empty list called `data` that will hold the flagged words and their warnings that we find in the transcript.\n\nWe then loop over the dictionary to search for `flagged_words` in the transcript and append those to our `data` list.\n\nThis line `score_flagged_words = transcript.count(key)` counts the number of occurrences of each key or `flagged_words` in our transcript and appends it to the `score_card` list.\n\nLastly, we print out the flagged words we find in red by passing in our `data` list and table headers.\n\nThe second part of the code works similarly.\n\n```python\nwords = []\nfor item in search_words:\n    if item in transcript:\n        words.append(["Yes", item])\n    else:\n        words.append(["No", item])\n\nprint(Fore.GREEN, tabulate(words, headers=["Word(s) Found", "item"]))\n```\n\nWe define a `words` list that will hold all of the search words we find in the transcript.\n\nThen we loop through all the `search_words` that we defined at the beginning of the code example. If a search word is in the transcript, we append it to the `words` list with another value, `Yes`. Otherwise, we append it with a value `No`, which means we did not find the word in the transcript.\n\nLastly, we print the `words` list and table headers to the terminal in green.\n\nOur last line of code prints out the scorecard if yellow of how many flagged words and search words we found. We get the sum of the scorecard, which holds our flagged words and uses a list comprehension to get how many search words we find in the transcript.\n\n```python\n  print(Fore.YELLOW, tabulate([[sum(score_card), len([w for w in words if w[0] == "Yes"])]], headers=["Flagged Word Count", "Search Word Count"]))\n```\n\nType `python script_compliance.py` or `python3 script_compliance.py` from your terminal to run our script.\n\nHere\u2019s an example of what our output would look like:\n\n![terminal output for Deepgram script compliance with Python](https://res.cloudinary.com/deepgram/image/upload/v1648586684/blog/2022/03/python-script-compliance/terminal-output.png)\n\nCongratulations on building a Python application with Deepgram to monitor script compliance! You can find the [code here](https://github.com/deepgram-devs/python-script-compliance) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).', "html": `<p>Imagine having the ability to monitor certain words or phrases during phone conversations by doing voice transcription with Python. This capability is a typical use case for a call center where calls are monitored between a customer service agent and a customer. Most of these conversations start with the agent saying, \u201CThis call is recorded for quality assurance purposes\u201D. This phrase is usually legally required to inform the person on the other end that they are being recorded, and this scenario is a common use case for ASR technology known as script compliance.</p>
<p>Combining voice transcription with Python using Deepgram, there are many innovative ways to monitor script compliance without manually listening to each recorded call. Deepgram provides a speech-to-text solution that transcribes audio to text with Python, real-time and pre-recorded calls. This solution is ideal to:</p>
<ul>
<li>Provide insights into how the agent handled the call by running analytics in Python (you can read more about analytics with Deepgram and Python <a href="https://blog.deepgram.com/python-talk-time-analytics/">here</a>.</li>
<li>Keep customers happy by improving their experience and satisfaction, increasing sales and revenue.</li>
<li>Reduce costs and save time by identifying non-compliance immediately.</li>
</ul>
<p>In the next section, let\u2019s review the project we\u2019ll build together. If you\u2019d like to jump ahead and grab the code for this project, you can do so <a href="https://github.com/deepgram-devs/python-script-compliance">here in our Github repo</a>.</p>
<h1 id="what-well-build">What We\u2019ll Build</h1>
<p>This tutorial will use the Deepgram Python SDK to build a simple script that transcribes audio to text with Python and simulates monitoring script compliance by searching words and phrases. Although Deepgram has a <a href="https://developers.deepgram.com/documentation/features/diarize/">diarize feature</a> to help us recognize speakers when multiple people are talking (which is very useful for script compliance examples with an agent and a customer), we\u2019ll use a script with one person speaking to keep things simple. In a <a href="https://blog.deepgram.com/python-talk-time-analytics/">previous article</a> we built a project using the <code is:raw>diarize</code> feature to gather transcripts for multiple speakers if you\u2019d like to learn more.</p>
<p>We\u2019ll focus on monitoring script compliance by doing the following:</p>
<ul>
<li>Read our audio and receive our transcript</li>
<li>Write a function that searches for flagged words and phrases</li>
<li>Use the same function to search for wanted keywords and phrases</li>
<li>Create a scorecard of how many flagged words and keywords are spoken</li>
</ul>
<p>Now that we\u2019re clear on what we\u2019re building let\u2019s get started!</p>
<h1 id="getting-started">Getting Started</h1>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Next, let\u2019s make a directory anywhere we\u2019d like.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">mkdir deepgram_script_compliance</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cd deepgram_script_compliance</span></span></code></pre>
<p>We\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<Panel type="info" title="Important Note"><p>It\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.</p></Panel>
<p>Now we can open up our favorite editor and create a file called <code is:raw>script_compliance.py</code>. If you\u2019d like to make it from the command line, do this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch script_compliance.py</span></span></code></pre>
<p>Finally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named <code is:raw>venv</code>, then activate it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">source venv/bin/activate</span></span></code></pre>
<p>After activation, we install the dependencies, including:</p>
<ul>
<li>The Deepgram Python SDK</li>
<li>The dotenv library helps us work with our environment variables</li>
<li>The library Tabulate to pretty-print our tables</li>
<li>The Colorama library to color-code our terminal</li>
</ul>
{/*<!---->*/}
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #c9d1d9">pip install python-dotenv</span></span>
<span class="line"><span style="color: #c9d1d9">pip install tabulate</span></span>
<span class="line"><span style="color: #c9d1d9">pip install colorama</span></span></code></pre>
<p>The following section will show the ease of using Python with Deepgram to monitor search terms with a newbie-friendly script.</p>
<h1 id="the-code">The Code</h1>
<p>Let\u2019s open our <code is:raw>script_compliance.py</code> file and include the following code at the top:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tabulate </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> tabulate</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> colorama </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> init</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> colorama </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Fore</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">init()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;gettysburg.wav&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;and&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is a flagged word!&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;are&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is another flagged word!&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;um&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is a filler word!&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">search_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&quot;engaged in a great civil war&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;new nation&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Ok I see&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">score_card </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>
<p>The first part is Python imports. We need to access the modules and libraries for our script to work correctly.</p>
<p>The <code is:raw>load_dotenv()</code> will help us load our <code is:raw>api_key</code> from an <code is:raw>env</code> file, which holds our environment variables.</p>
<p>The <code is:raw>PATH_TO_FILE = 'gettysburg.wav'</code> is a path to the audio file we\u2019ll use to do the speech-to-text transcription.</p>
<p>The <code is:raw>flagged_words</code> dictionary is where we\u2019ll keep the words in a <code is:raw>key</code> which we monitor what we don\u2019t want our speaker to say. The <code is:raw>values</code> in the dictionary contain a warning for each flagged word.</p>
<p>The <code is:raw>search_words</code> list are words or phrases that we monitor and want our speaker to say during the audio.</p>
<p>The <code is:raw>score_card</code> will keep track of how many flagged words and search words our speaker says in the transcript.</p>
<p>Create an <code is:raw>env</code> file at the same level as our <code is:raw>script_compliance.py</code>. Put the following inside of it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D</span></span></code></pre>
<p>We replace <code is:raw>YOUR_API_KEY</code> with our api_key, which we got from Deepgram.</p>
<p>Next, let\u2019s add the audio file to our project by <a href="https://developers.deepgram.com/data/audio/gettysburg.wav">downloading it here</a> and adding it to our project directory.</p>
<Panel type="info" title="Important Note"><p>To follow along, we\u2019ll need to download this .wav file. If you\u2019d like to use another file, please note you\u2019ll have to change the <code is:raw>flagged_words</code> and <code is:raw>search_words</code> for the project to work correctly.</p></Panel>
<p>Our project directory structure should look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648578364/blog/2022/03/python-script-compliance/project-structure.png" alt="project structure for Deepgram script compliance with Python"></p>
<p>Back in our <code is:raw>script_compliance.py</code>, let\u2019s add this code to our <code is:raw>main</code> function:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">\u200B\u200B</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       transcription </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       speakers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> script_compliance(transcription)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">asyncio.run(main())</span></span></code></pre>
<p>Here we are initializing Deepgram and pulling in our <code is:raw>DEEPGRAM_API_KEY</code>. We open our audio file and set the <code is:raw>source</code> to recognize it\u2019s an <code is:raw>audio/wav</code>. Then we get the transcription and pass in the <code is:raw>source</code> and a Python dictionary <code is:raw>{'punctuate': True}</code>. The Deepgram <code is:raw>punctuate</code> option adds punctuation and capitalization to our transcript. Read more on <a href="https://developers.deepgram.com/documentation/features/punctuate/">how to use</a> <code is:raw>punctuate</code>.</p>
<p>Lastly, let\u2019s add our <code is:raw>script_compliance</code> function to the <code is:raw>script_compliance.py</code> file, just above our <code is:raw>main</code> function.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">script_compliance</span><span style="color: #C9D1D9">(transcript_data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> key,value </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> flagged_words.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           score_flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.count(key)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> score_flagged_words:</span></span>
<span class="line"><span style="color: #C9D1D9">               data.append([key, value])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           score_card.append(score_flagged_words)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">RED</span><span style="color: #C9D1D9">, tabulate(data, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Warning Message&quot;</span><span style="color: #C9D1D9">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> search_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">               words.append([</span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">               words.append([</span><span style="color: #A5D6FF">&quot;No&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">GREEN</span><span style="color: #C9D1D9">, tabulate(words, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Word(s) Found&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;item&quot;</span><span style="color: #C9D1D9">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">YELLOW</span><span style="color: #C9D1D9">, tabulate([[</span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9">(score_card), </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">([w </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> words </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> w[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">])]], </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word Count&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Search Word Count&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>Let\u2019s break the code down.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>The lines above get the transcript as a String type from the JSON response and store it in a variable called <code is:raw>transcript</code>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> key,value </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> flagged_words.items():</span></span>
<span class="line"><span style="color: #C9D1D9">     score_flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.count(key)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> score_flagged_words:</span></span>
<span class="line"><span style="color: #C9D1D9">             data.append([key, value])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       score_card.append(score_flagged_words)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">RED</span><span style="color: #C9D1D9">, tabulate(data, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Warning Message&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>We create an empty list called <code is:raw>data</code> that will hold the flagged words and their warnings that we find in the transcript.</p>
<p>We then loop over the dictionary to search for <code is:raw>flagged_words</code> in the transcript and append those to our <code is:raw>data</code> list.</p>
<p>This line <code is:raw>score_flagged_words = transcript.count(key)</code> counts the number of occurrences of each key or <code is:raw>flagged_words</code> in our transcript and appends it to the <code is:raw>score_card</code> list.</p>
<p>Lastly, we print out the flagged words we find in red by passing in our <code is:raw>data</code> list and table headers.</p>
<p>The second part of the code works similarly.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> search_words:</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">        words.append([</span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">        words.append([</span><span style="color: #A5D6FF">&quot;No&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">GREEN</span><span style="color: #C9D1D9">, tabulate(words, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Word(s) Found&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;item&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>We define a <code is:raw>words</code> list that will hold all of the search words we find in the transcript.</p>
<p>Then we loop through all the <code is:raw>search_words</code> that we defined at the beginning of the code example. If a search word is in the transcript, we append it to the <code is:raw>words</code> list with another value, <code is:raw>Yes</code>. Otherwise, we append it with a value <code is:raw>No</code>, which means we did not find the word in the transcript.</p>
<p>Lastly, we print the <code is:raw>words</code> list and table headers to the terminal in green.</p>
<p>Our last line of code prints out the scorecard if yellow of how many flagged words and search words we found. We get the sum of the scorecard, which holds our flagged words and uses a list comprehension to get how many search words we find in the transcript.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">YELLOW</span><span style="color: #C9D1D9">, tabulate([[</span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9">(score_card), </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">([w </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> words </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> w[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">])]], </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word Count&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Search Word Count&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>Type <code is:raw>python script_compliance.py</code> or <code is:raw>python3 script_compliance.py</code> from your terminal to run our script.</p>
<p>Here\u2019s an example of what our output would look like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648586684/blog/2022/03/python-script-compliance/terminal-output.png" alt="terminal output for Deepgram script compliance with Python"></p>
<p>Congratulations on building a Python application with Deepgram to monitor script compliance! You can find the <a href="https://github.com/deepgram-devs/python-script-compliance">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>` };
const frontmatter = { "title": "Speech Recognition to Monitor Script Compliance in Python", "description": "Use Deepgram with Python for script compliance, monitoring real-time audio such as phone calls for specific words and phrases that are legally required.", "date": "2022-03-30T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1648578346/blog/2022/03/python-script-compliance/Speech-Recognition-Monitor-Script-Compliance%402x.jpg", "authors": ["tonya-sims"], "category": "tutorial", "tags": ["python"], "seo": { "title": "Speech Recognition to Monitor Script Compliance in Python", "description": "Use Deepgram with Python for script compliance, monitoring real-time audio such as phone calls for specific words and phrases that are legally required." }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454046/blog/python-script-compliance/ograph.png" }, "shorturls": { "share": "https://dpgr.am/cbb4071", "twitter": "https://dpgr.am/b461e6a", "linkedin": "https://dpgr.am/ba726b8", "reddit": "https://dpgr.am/6a4598c", "facebook": "https://dpgr.am/33fe5fc" }, "astro": { "headings": [{ "depth": 1, "slug": "what-well-build", "text": "What We\u2019ll Build" }, { "depth": 1, "slug": "getting-started", "text": "Getting Started" }, { "depth": 1, "slug": "the-code", "text": "The Code" }], "source": 'Imagine having the ability to monitor certain words or phrases during phone conversations by doing voice transcription with Python. This capability is a typical use case for a call center where calls are monitored between a customer service agent and a customer. Most of these conversations start with the agent saying, \u201CThis call is recorded for quality assurance purposes\u201D. This phrase is usually legally required to inform the person on the other end that they are being recorded, and this scenario is a common use case for ASR technology known as script compliance.\n\nCombining voice transcription with Python using Deepgram, there are many innovative ways to monitor script compliance without manually listening to each recorded call. Deepgram provides a speech-to-text solution that transcribes audio to text with Python, real-time and pre-recorded calls. This solution is ideal to:\n\n* Provide insights into how the agent handled the call by running analytics in Python (you can read more about analytics with Deepgram and Python [here](https://blog.deepgram.com/python-talk-time-analytics/).\n* Keep customers happy by improving their experience and satisfaction, increasing sales and revenue.\n* Reduce costs and save time by identifying non-compliance immediately.\n\nIn the next section, let\u2019s review the project we\u2019ll build together. If you\u2019d like to jump ahead and grab the code for this project, you can do so [here in our Github repo](https://github.com/deepgram-devs/python-script-compliance).\n\n# What We\u2019ll Build\n\nThis tutorial will use the Deepgram Python SDK to build a simple script that transcribes audio to text with Python and simulates monitoring script compliance by searching words and phrases. Although Deepgram has a [diarize feature](https://developers.deepgram.com/documentation/features/diarize/) to help us recognize speakers when multiple people are talking (which is very useful for script compliance examples with an agent and a customer), we\u2019ll use a script with one person speaking to keep things simple. In a [previous article](https://blog.deepgram.com/python-talk-time-analytics/) we built a project using the `diarize` feature to gather transcripts for multiple speakers if you\'d like to learn more.\n\nWe\u2019ll focus on monitoring script compliance by doing the following:\n\n* Read our audio and receive our transcript\n* Write a function that searches for flagged words and phrases\n* Use the same function to search for wanted keywords and phrases\n* Create a scorecard of how many flagged words and keywords are spoken\n\nNow that we\u2019re clear on what we\u2019re building let\u2019s get started!\n\n# Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our [Deepgram console](https://console.deepgram.com/signup?jump=keys). Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\n\nNext, let\u2019s make a directory anywhere we\u2019d like.\n\n```\nmkdir deepgram_script_compliance\n```\n\nThen change into that directory so we can start adding things to it.\n\n```\ncd deepgram_script_compliance\n```\n\nWe\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n<Panel type="info" title="Important Note">\n\nIt\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.\n\n</Panel>\n\nNow we can open up our favorite editor and create a file called `script_compliance.py`. If you\u2019d like to make it from the command line, do this:\n\n```\ntouch script_compliance.py\n```\n\nFinally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named `venv`, then activate it.\n\n```\nsource venv/bin/activate\n```\n\nAfter activation, we install the dependencies, including:\n\n* The Deepgram Python SDK\n* The dotenv library helps us work with our environment variables\n* The library Tabulate to pretty-print our tables\n* The Colorama library to color-code our terminal\n\n{/*<!---->*/}\n\n```\npip install deepgram-sdk\npip install python-dotenv\npip install tabulate\npip install colorama\n```\n\nThe following section will show the ease of using Python with Deepgram to monitor search terms with a newbie-friendly script.\n\n# The Code\n\nLet\u2019s open our `script_compliance.py` file and include the following code at the top:\n\n```python\nimport asyncio\nfrom deepgram import Deepgram\nfrom dotenv import load_dotenv\nfrom typing import Dict\nfrom tabulate import tabulate\nfrom colorama import init\nfrom colorama import Fore\nimport os\n\ninit()\n\nload_dotenv()\n\nPATH_TO_FILE = \'gettysburg.wav\'\n\nflagged_words = {\n   "and": "This is a flagged word!",\n   "are": "This is another flagged word!",\n   "um": "This is a filler word!"\n}\n\nsearch_words = ["engaged in a great civil war", "new nation", "Ok I see"]\n\nscore_card = []\n```\n\nThe first part is Python imports. We need to access the modules and libraries for our script to work correctly.\n\nThe `load_dotenv()` will help us load our `api_key` from an `env` file, which holds our environment variables.\n\nThe `PATH_TO_FILE = \'gettysburg.wav\'` is a path to the audio file we\u2019ll use to do the speech-to-text transcription.\n\nThe `flagged_words` dictionary is where we\u2019ll keep the words in a `key` which we monitor what we don\u2019t want our speaker to say. The `values` in the dictionary contain a warning for each flagged word.\n\nThe `search_words` list are words or phrases that we monitor and want our speaker to say during the audio.\n\nThe `score_card` will keep track of how many flagged words and search words our speaker says in the transcript.\n\nCreate an `env` file at the same level as our `script_compliance.py`. Put the following inside of it:\n\n```\nDEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D\n```\n\nWe replace `YOUR_API_KEY` with our api_key, which we got from Deepgram.\n\nNext, let\u2019s add the audio file to our project by [downloading it here](https://developers.deepgram.com/data/audio/gettysburg.wav) and adding it to our project directory.\n\n<Panel type="info" title="Important Note">\n\nTo follow along, we\u2019ll need to download this .wav file. If you\u2019d like to use another file, please note you\u2019ll have to change the `flagged_words` and `search_words` for the project to work correctly.\n\n</Panel>\n\nOur project directory structure should look like this:\n\n![project structure for Deepgram script compliance with Python](https://res.cloudinary.com/deepgram/image/upload/v1648578364/blog/2022/03/python-script-compliance/project-structure.png)\n\nBack in our `script_compliance.py`, let\u2019s add this code to our `main` function:\n\n```python\n\u200B\u200Basync def main():\n   deepgram = Deepgram(os.getenv("DEEPGRAM_API_KEY"))\n\n   with open(PATH_TO_FILE, \'rb\') as audio:\n       source = {\'buffer\': audio, \'mimetype\': \'audio/wav\'}\n       transcription = await deepgram.transcription.prerecorded(source, {\'punctuate\': True })\n\n       speakers = await script_compliance(transcription)\n\n\nasyncio.run(main())\n```\n\nHere we are initializing Deepgram and pulling in our `DEEPGRAM_API_KEY`. We open our audio file and set the `source` to recognize it\u2019s an `audio/wav`. Then we get the transcription and pass in the `source` and a Python dictionary `{\'punctuate\': True}`. The Deepgram `punctuate` option adds punctuation and capitalization to our transcript. Read more on [how to use](https://developers.deepgram.com/documentation/features/punctuate/) `punctuate`.\n\nLastly, let\u2019s add our `script_compliance` function to the `script_compliance.py` file, just above our `main` function.\n\n```python\nasync def script_compliance(transcript_data: Dict) -> None:\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'transcript\']\n\n       data = []\n\n       for key,value in flagged_words.items():\n           score_flagged_words = transcript.count(key)\n           if score_flagged_words:\n               data.append([key, value])\n\n           score_card.append(score_flagged_words)\n\n       print(Fore.RED, tabulate(data, headers=["Flagged Word", "Warning Message"]))\n\n       print()\n\n       words = []\n       for item in search_words:\n           if item in transcript:\n               words.append(["Yes", item])\n           else:\n               words.append(["No", item])\n\n       print(Fore.GREEN, tabulate(words, headers=["Word(s) Found", "item"]))\n\n       print()\n\n       print(Fore.YELLOW, tabulate([[sum(score_card), len([w for w in words if w[0] == "Yes"])]], headers=["Flagged Word Count", "Search Word Count"]))\n```\n\nLet\u2019s break the code down.\n\n```python\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'transcript\']\n```\n\nThe lines above get the transcript as a String type from the JSON response and store it in a variable called `transcript`.\n\n```python\ndata = []\n\nfor key,value in flagged_words.items():\n     score_flagged_words = transcript.count(key)\n      if score_flagged_words:\n             data.append([key, value])\n\n       score_card.append(score_flagged_words)\n\n print(Fore.RED, tabulate(data, headers=["Flagged Word", "Warning Message"]))\n```\n\nWe create an empty list called `data` that will hold the flagged words and their warnings that we find in the transcript.\n\nWe then loop over the dictionary to search for `flagged_words` in the transcript and append those to our `data` list.\n\nThis line `score_flagged_words = transcript.count(key)` counts the number of occurrences of each key or `flagged_words` in our transcript and appends it to the `score_card` list.\n\nLastly, we print out the flagged words we find in red by passing in our `data` list and table headers.\n\nThe second part of the code works similarly.\n\n```python\nwords = []\nfor item in search_words:\n    if item in transcript:\n        words.append(["Yes", item])\n    else:\n        words.append(["No", item])\n\nprint(Fore.GREEN, tabulate(words, headers=["Word(s) Found", "item"]))\n```\n\nWe define a `words` list that will hold all of the search words we find in the transcript.\n\nThen we loop through all the `search_words` that we defined at the beginning of the code example. If a search word is in the transcript, we append it to the `words` list with another value, `Yes`. Otherwise, we append it with a value `No`, which means we did not find the word in the transcript.\n\nLastly, we print the `words` list and table headers to the terminal in green.\n\nOur last line of code prints out the scorecard if yellow of how many flagged words and search words we found. We get the sum of the scorecard, which holds our flagged words and uses a list comprehension to get how many search words we find in the transcript.\n\n```python\n  print(Fore.YELLOW, tabulate([[sum(score_card), len([w for w in words if w[0] == "Yes"])]], headers=["Flagged Word Count", "Search Word Count"]))\n```\n\nType `python script_compliance.py` or `python3 script_compliance.py` from your terminal to run our script.\n\nHere\u2019s an example of what our output would look like:\n\n![terminal output for Deepgram script compliance with Python](https://res.cloudinary.com/deepgram/image/upload/v1648586684/blog/2022/03/python-script-compliance/terminal-output.png)\n\nCongratulations on building a Python application with Deepgram to monitor script compliance! You can find the [code here](https://github.com/deepgram-devs/python-script-compliance) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).', "html": `<p>Imagine having the ability to monitor certain words or phrases during phone conversations by doing voice transcription with Python. This capability is a typical use case for a call center where calls are monitored between a customer service agent and a customer. Most of these conversations start with the agent saying, \u201CThis call is recorded for quality assurance purposes\u201D. This phrase is usually legally required to inform the person on the other end that they are being recorded, and this scenario is a common use case for ASR technology known as script compliance.</p>
<p>Combining voice transcription with Python using Deepgram, there are many innovative ways to monitor script compliance without manually listening to each recorded call. Deepgram provides a speech-to-text solution that transcribes audio to text with Python, real-time and pre-recorded calls. This solution is ideal to:</p>
<ul>
<li>Provide insights into how the agent handled the call by running analytics in Python (you can read more about analytics with Deepgram and Python <a href="https://blog.deepgram.com/python-talk-time-analytics/">here</a>.</li>
<li>Keep customers happy by improving their experience and satisfaction, increasing sales and revenue.</li>
<li>Reduce costs and save time by identifying non-compliance immediately.</li>
</ul>
<p>In the next section, let\u2019s review the project we\u2019ll build together. If you\u2019d like to jump ahead and grab the code for this project, you can do so <a href="https://github.com/deepgram-devs/python-script-compliance">here in our Github repo</a>.</p>
<h1 id="what-well-build">What We\u2019ll Build</h1>
<p>This tutorial will use the Deepgram Python SDK to build a simple script that transcribes audio to text with Python and simulates monitoring script compliance by searching words and phrases. Although Deepgram has a <a href="https://developers.deepgram.com/documentation/features/diarize/">diarize feature</a> to help us recognize speakers when multiple people are talking (which is very useful for script compliance examples with an agent and a customer), we\u2019ll use a script with one person speaking to keep things simple. In a <a href="https://blog.deepgram.com/python-talk-time-analytics/">previous article</a> we built a project using the <code is:raw>diarize</code> feature to gather transcripts for multiple speakers if you\u2019d like to learn more.</p>
<p>We\u2019ll focus on monitoring script compliance by doing the following:</p>
<ul>
<li>Read our audio and receive our transcript</li>
<li>Write a function that searches for flagged words and phrases</li>
<li>Use the same function to search for wanted keywords and phrases</li>
<li>Create a scorecard of how many flagged words and keywords are spoken</li>
</ul>
<p>Now that we\u2019re clear on what we\u2019re building let\u2019s get started!</p>
<h1 id="getting-started">Getting Started</h1>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Next, let\u2019s make a directory anywhere we\u2019d like.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">mkdir deepgram_script_compliance</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cd deepgram_script_compliance</span></span></code></pre>
<p>We\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<Panel type="info" title="Important Note"><p>It\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.</p></Panel>
<p>Now we can open up our favorite editor and create a file called <code is:raw>script_compliance.py</code>. If you\u2019d like to make it from the command line, do this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch script_compliance.py</span></span></code></pre>
<p>Finally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named <code is:raw>venv</code>, then activate it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">source venv/bin/activate</span></span></code></pre>
<p>After activation, we install the dependencies, including:</p>
<ul>
<li>The Deepgram Python SDK</li>
<li>The dotenv library helps us work with our environment variables</li>
<li>The library Tabulate to pretty-print our tables</li>
<li>The Colorama library to color-code our terminal</li>
</ul>
{/*<!---->*/}
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #c9d1d9">pip install python-dotenv</span></span>
<span class="line"><span style="color: #c9d1d9">pip install tabulate</span></span>
<span class="line"><span style="color: #c9d1d9">pip install colorama</span></span></code></pre>
<p>The following section will show the ease of using Python with Deepgram to monitor search terms with a newbie-friendly script.</p>
<h1 id="the-code">The Code</h1>
<p>Let\u2019s open our <code is:raw>script_compliance.py</code> file and include the following code at the top:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tabulate </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> tabulate</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> colorama </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> init</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> colorama </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Fore</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">init()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;gettysburg.wav&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;and&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is a flagged word!&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;are&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is another flagged word!&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;um&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is a filler word!&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">search_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&quot;engaged in a great civil war&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;new nation&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Ok I see&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">score_card </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>
<p>The first part is Python imports. We need to access the modules and libraries for our script to work correctly.</p>
<p>The <code is:raw>load_dotenv()</code> will help us load our <code is:raw>api_key</code> from an <code is:raw>env</code> file, which holds our environment variables.</p>
<p>The <code is:raw>PATH_TO_FILE = 'gettysburg.wav'</code> is a path to the audio file we\u2019ll use to do the speech-to-text transcription.</p>
<p>The <code is:raw>flagged_words</code> dictionary is where we\u2019ll keep the words in a <code is:raw>key</code> which we monitor what we don\u2019t want our speaker to say. The <code is:raw>values</code> in the dictionary contain a warning for each flagged word.</p>
<p>The <code is:raw>search_words</code> list are words or phrases that we monitor and want our speaker to say during the audio.</p>
<p>The <code is:raw>score_card</code> will keep track of how many flagged words and search words our speaker says in the transcript.</p>
<p>Create an <code is:raw>env</code> file at the same level as our <code is:raw>script_compliance.py</code>. Put the following inside of it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D</span></span></code></pre>
<p>We replace <code is:raw>YOUR_API_KEY</code> with our api_key, which we got from Deepgram.</p>
<p>Next, let\u2019s add the audio file to our project by <a href="https://developers.deepgram.com/data/audio/gettysburg.wav">downloading it here</a> and adding it to our project directory.</p>
<Panel type="info" title="Important Note"><p>To follow along, we\u2019ll need to download this .wav file. If you\u2019d like to use another file, please note you\u2019ll have to change the <code is:raw>flagged_words</code> and <code is:raw>search_words</code> for the project to work correctly.</p></Panel>
<p>Our project directory structure should look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648578364/blog/2022/03/python-script-compliance/project-structure.png" alt="project structure for Deepgram script compliance with Python"></p>
<p>Back in our <code is:raw>script_compliance.py</code>, let\u2019s add this code to our <code is:raw>main</code> function:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">\u200B\u200B</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       transcription </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       speakers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> script_compliance(transcription)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">asyncio.run(main())</span></span></code></pre>
<p>Here we are initializing Deepgram and pulling in our <code is:raw>DEEPGRAM_API_KEY</code>. We open our audio file and set the <code is:raw>source</code> to recognize it\u2019s an <code is:raw>audio/wav</code>. Then we get the transcription and pass in the <code is:raw>source</code> and a Python dictionary <code is:raw>{'punctuate': True}</code>. The Deepgram <code is:raw>punctuate</code> option adds punctuation and capitalization to our transcript. Read more on <a href="https://developers.deepgram.com/documentation/features/punctuate/">how to use</a> <code is:raw>punctuate</code>.</p>
<p>Lastly, let\u2019s add our <code is:raw>script_compliance</code> function to the <code is:raw>script_compliance.py</code> file, just above our <code is:raw>main</code> function.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">script_compliance</span><span style="color: #C9D1D9">(transcript_data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> key,value </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> flagged_words.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           score_flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.count(key)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> score_flagged_words:</span></span>
<span class="line"><span style="color: #C9D1D9">               data.append([key, value])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           score_card.append(score_flagged_words)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">RED</span><span style="color: #C9D1D9">, tabulate(data, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Warning Message&quot;</span><span style="color: #C9D1D9">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> search_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">               words.append([</span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">               words.append([</span><span style="color: #A5D6FF">&quot;No&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">GREEN</span><span style="color: #C9D1D9">, tabulate(words, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Word(s) Found&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;item&quot;</span><span style="color: #C9D1D9">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">YELLOW</span><span style="color: #C9D1D9">, tabulate([[</span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9">(score_card), </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">([w </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> words </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> w[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">])]], </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word Count&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Search Word Count&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>Let\u2019s break the code down.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>The lines above get the transcript as a String type from the JSON response and store it in a variable called <code is:raw>transcript</code>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> key,value </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> flagged_words.items():</span></span>
<span class="line"><span style="color: #C9D1D9">     score_flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.count(key)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> score_flagged_words:</span></span>
<span class="line"><span style="color: #C9D1D9">             data.append([key, value])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       score_card.append(score_flagged_words)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">RED</span><span style="color: #C9D1D9">, tabulate(data, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Warning Message&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>We create an empty list called <code is:raw>data</code> that will hold the flagged words and their warnings that we find in the transcript.</p>
<p>We then loop over the dictionary to search for <code is:raw>flagged_words</code> in the transcript and append those to our <code is:raw>data</code> list.</p>
<p>This line <code is:raw>score_flagged_words = transcript.count(key)</code> counts the number of occurrences of each key or <code is:raw>flagged_words</code> in our transcript and appends it to the <code is:raw>score_card</code> list.</p>
<p>Lastly, we print out the flagged words we find in red by passing in our <code is:raw>data</code> list and table headers.</p>
<p>The second part of the code works similarly.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> search_words:</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">        words.append([</span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">        words.append([</span><span style="color: #A5D6FF">&quot;No&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">GREEN</span><span style="color: #C9D1D9">, tabulate(words, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Word(s) Found&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;item&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>We define a <code is:raw>words</code> list that will hold all of the search words we find in the transcript.</p>
<p>Then we loop through all the <code is:raw>search_words</code> that we defined at the beginning of the code example. If a search word is in the transcript, we append it to the <code is:raw>words</code> list with another value, <code is:raw>Yes</code>. Otherwise, we append it with a value <code is:raw>No</code>, which means we did not find the word in the transcript.</p>
<p>Lastly, we print the <code is:raw>words</code> list and table headers to the terminal in green.</p>
<p>Our last line of code prints out the scorecard if yellow of how many flagged words and search words we found. We get the sum of the scorecard, which holds our flagged words and uses a list comprehension to get how many search words we find in the transcript.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">YELLOW</span><span style="color: #C9D1D9">, tabulate([[</span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9">(score_card), </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">([w </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> words </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> w[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">])]], </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word Count&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Search Word Count&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>Type <code is:raw>python script_compliance.py</code> or <code is:raw>python3 script_compliance.py</code> from your terminal to run our script.</p>
<p>Here\u2019s an example of what our output would look like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648586684/blog/2022/03/python-script-compliance/terminal-output.png" alt="terminal output for Deepgram script compliance with Python"></p>
<p>Congratulations on building a Python application with Deepgram to monitor script compliance! You can find the <a href="https://github.com/deepgram-devs/python-script-compliance">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>` }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/python-script-compliance/index.md" };
function rawContent() {
  return 'Imagine having the ability to monitor certain words or phrases during phone conversations by doing voice transcription with Python. This capability is a typical use case for a call center where calls are monitored between a customer service agent and a customer. Most of these conversations start with the agent saying, \u201CThis call is recorded for quality assurance purposes\u201D. This phrase is usually legally required to inform the person on the other end that they are being recorded, and this scenario is a common use case for ASR technology known as script compliance.\n\nCombining voice transcription with Python using Deepgram, there are many innovative ways to monitor script compliance without manually listening to each recorded call. Deepgram provides a speech-to-text solution that transcribes audio to text with Python, real-time and pre-recorded calls. This solution is ideal to:\n\n* Provide insights into how the agent handled the call by running analytics in Python (you can read more about analytics with Deepgram and Python [here](https://blog.deepgram.com/python-talk-time-analytics/).\n* Keep customers happy by improving their experience and satisfaction, increasing sales and revenue.\n* Reduce costs and save time by identifying non-compliance immediately.\n\nIn the next section, let\u2019s review the project we\u2019ll build together. If you\u2019d like to jump ahead and grab the code for this project, you can do so [here in our Github repo](https://github.com/deepgram-devs/python-script-compliance).\n\n# What We\u2019ll Build\n\nThis tutorial will use the Deepgram Python SDK to build a simple script that transcribes audio to text with Python and simulates monitoring script compliance by searching words and phrases. Although Deepgram has a [diarize feature](https://developers.deepgram.com/documentation/features/diarize/) to help us recognize speakers when multiple people are talking (which is very useful for script compliance examples with an agent and a customer), we\u2019ll use a script with one person speaking to keep things simple. In a [previous article](https://blog.deepgram.com/python-talk-time-analytics/) we built a project using the `diarize` feature to gather transcripts for multiple speakers if you\'d like to learn more.\n\nWe\u2019ll focus on monitoring script compliance by doing the following:\n\n* Read our audio and receive our transcript\n* Write a function that searches for flagged words and phrases\n* Use the same function to search for wanted keywords and phrases\n* Create a scorecard of how many flagged words and keywords are spoken\n\nNow that we\u2019re clear on what we\u2019re building let\u2019s get started!\n\n# Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our [Deepgram console](https://console.deepgram.com/signup?jump=keys). Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\n\nNext, let\u2019s make a directory anywhere we\u2019d like.\n\n```\nmkdir deepgram_script_compliance\n```\n\nThen change into that directory so we can start adding things to it.\n\n```\ncd deepgram_script_compliance\n```\n\nWe\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n<Panel type="info" title="Important Note">\n\nIt\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.\n\n</Panel>\n\nNow we can open up our favorite editor and create a file called `script_compliance.py`. If you\u2019d like to make it from the command line, do this:\n\n```\ntouch script_compliance.py\n```\n\nFinally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named `venv`, then activate it.\n\n```\nsource venv/bin/activate\n```\n\nAfter activation, we install the dependencies, including:\n\n* The Deepgram Python SDK\n* The dotenv library helps us work with our environment variables\n* The library Tabulate to pretty-print our tables\n* The Colorama library to color-code our terminal\n\n{/*<!---->*/}\n\n```\npip install deepgram-sdk\npip install python-dotenv\npip install tabulate\npip install colorama\n```\n\nThe following section will show the ease of using Python with Deepgram to monitor search terms with a newbie-friendly script.\n\n# The Code\n\nLet\u2019s open our `script_compliance.py` file and include the following code at the top:\n\n```python\nimport asyncio\nfrom deepgram import Deepgram\nfrom dotenv import load_dotenv\nfrom typing import Dict\nfrom tabulate import tabulate\nfrom colorama import init\nfrom colorama import Fore\nimport os\n\ninit()\n\nload_dotenv()\n\nPATH_TO_FILE = \'gettysburg.wav\'\n\nflagged_words = {\n   "and": "This is a flagged word!",\n   "are": "This is another flagged word!",\n   "um": "This is a filler word!"\n}\n\nsearch_words = ["engaged in a great civil war", "new nation", "Ok I see"]\n\nscore_card = []\n```\n\nThe first part is Python imports. We need to access the modules and libraries for our script to work correctly.\n\nThe `load_dotenv()` will help us load our `api_key` from an `env` file, which holds our environment variables.\n\nThe `PATH_TO_FILE = \'gettysburg.wav\'` is a path to the audio file we\u2019ll use to do the speech-to-text transcription.\n\nThe `flagged_words` dictionary is where we\u2019ll keep the words in a `key` which we monitor what we don\u2019t want our speaker to say. The `values` in the dictionary contain a warning for each flagged word.\n\nThe `search_words` list are words or phrases that we monitor and want our speaker to say during the audio.\n\nThe `score_card` will keep track of how many flagged words and search words our speaker says in the transcript.\n\nCreate an `env` file at the same level as our `script_compliance.py`. Put the following inside of it:\n\n```\nDEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D\n```\n\nWe replace `YOUR_API_KEY` with our api_key, which we got from Deepgram.\n\nNext, let\u2019s add the audio file to our project by [downloading it here](https://developers.deepgram.com/data/audio/gettysburg.wav) and adding it to our project directory.\n\n<Panel type="info" title="Important Note">\n\nTo follow along, we\u2019ll need to download this .wav file. If you\u2019d like to use another file, please note you\u2019ll have to change the `flagged_words` and `search_words` for the project to work correctly.\n\n</Panel>\n\nOur project directory structure should look like this:\n\n![project structure for Deepgram script compliance with Python](https://res.cloudinary.com/deepgram/image/upload/v1648578364/blog/2022/03/python-script-compliance/project-structure.png)\n\nBack in our `script_compliance.py`, let\u2019s add this code to our `main` function:\n\n```python\n\u200B\u200Basync def main():\n   deepgram = Deepgram(os.getenv("DEEPGRAM_API_KEY"))\n\n   with open(PATH_TO_FILE, \'rb\') as audio:\n       source = {\'buffer\': audio, \'mimetype\': \'audio/wav\'}\n       transcription = await deepgram.transcription.prerecorded(source, {\'punctuate\': True })\n\n       speakers = await script_compliance(transcription)\n\n\nasyncio.run(main())\n```\n\nHere we are initializing Deepgram and pulling in our `DEEPGRAM_API_KEY`. We open our audio file and set the `source` to recognize it\u2019s an `audio/wav`. Then we get the transcription and pass in the `source` and a Python dictionary `{\'punctuate\': True}`. The Deepgram `punctuate` option adds punctuation and capitalization to our transcript. Read more on [how to use](https://developers.deepgram.com/documentation/features/punctuate/) `punctuate`.\n\nLastly, let\u2019s add our `script_compliance` function to the `script_compliance.py` file, just above our `main` function.\n\n```python\nasync def script_compliance(transcript_data: Dict) -> None:\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'transcript\']\n\n       data = []\n\n       for key,value in flagged_words.items():\n           score_flagged_words = transcript.count(key)\n           if score_flagged_words:\n               data.append([key, value])\n\n           score_card.append(score_flagged_words)\n\n       print(Fore.RED, tabulate(data, headers=["Flagged Word", "Warning Message"]))\n\n       print()\n\n       words = []\n       for item in search_words:\n           if item in transcript:\n               words.append(["Yes", item])\n           else:\n               words.append(["No", item])\n\n       print(Fore.GREEN, tabulate(words, headers=["Word(s) Found", "item"]))\n\n       print()\n\n       print(Fore.YELLOW, tabulate([[sum(score_card), len([w for w in words if w[0] == "Yes"])]], headers=["Flagged Word Count", "Search Word Count"]))\n```\n\nLet\u2019s break the code down.\n\n```python\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'transcript\']\n```\n\nThe lines above get the transcript as a String type from the JSON response and store it in a variable called `transcript`.\n\n```python\ndata = []\n\nfor key,value in flagged_words.items():\n     score_flagged_words = transcript.count(key)\n      if score_flagged_words:\n             data.append([key, value])\n\n       score_card.append(score_flagged_words)\n\n print(Fore.RED, tabulate(data, headers=["Flagged Word", "Warning Message"]))\n```\n\nWe create an empty list called `data` that will hold the flagged words and their warnings that we find in the transcript.\n\nWe then loop over the dictionary to search for `flagged_words` in the transcript and append those to our `data` list.\n\nThis line `score_flagged_words = transcript.count(key)` counts the number of occurrences of each key or `flagged_words` in our transcript and appends it to the `score_card` list.\n\nLastly, we print out the flagged words we find in red by passing in our `data` list and table headers.\n\nThe second part of the code works similarly.\n\n```python\nwords = []\nfor item in search_words:\n    if item in transcript:\n        words.append(["Yes", item])\n    else:\n        words.append(["No", item])\n\nprint(Fore.GREEN, tabulate(words, headers=["Word(s) Found", "item"]))\n```\n\nWe define a `words` list that will hold all of the search words we find in the transcript.\n\nThen we loop through all the `search_words` that we defined at the beginning of the code example. If a search word is in the transcript, we append it to the `words` list with another value, `Yes`. Otherwise, we append it with a value `No`, which means we did not find the word in the transcript.\n\nLastly, we print the `words` list and table headers to the terminal in green.\n\nOur last line of code prints out the scorecard if yellow of how many flagged words and search words we found. We get the sum of the scorecard, which holds our flagged words and uses a list comprehension to get how many search words we find in the transcript.\n\n```python\n  print(Fore.YELLOW, tabulate([[sum(score_card), len([w for w in words if w[0] == "Yes"])]], headers=["Flagged Word Count", "Search Word Count"]))\n```\n\nType `python script_compliance.py` or `python3 script_compliance.py` from your terminal to run our script.\n\nHere\u2019s an example of what our output would look like:\n\n![terminal output for Deepgram script compliance with Python](https://res.cloudinary.com/deepgram/image/upload/v1648586684/blog/2022/03/python-script-compliance/terminal-output.png)\n\nCongratulations on building a Python application with Deepgram to monitor script compliance! You can find the [code here](https://github.com/deepgram-devs/python-script-compliance) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).';
}
function compiledContent() {
  return `<p>Imagine having the ability to monitor certain words or phrases during phone conversations by doing voice transcription with Python. This capability is a typical use case for a call center where calls are monitored between a customer service agent and a customer. Most of these conversations start with the agent saying, \u201CThis call is recorded for quality assurance purposes\u201D. This phrase is usually legally required to inform the person on the other end that they are being recorded, and this scenario is a common use case for ASR technology known as script compliance.</p>
<p>Combining voice transcription with Python using Deepgram, there are many innovative ways to monitor script compliance without manually listening to each recorded call. Deepgram provides a speech-to-text solution that transcribes audio to text with Python, real-time and pre-recorded calls. This solution is ideal to:</p>
<ul>
<li>Provide insights into how the agent handled the call by running analytics in Python (you can read more about analytics with Deepgram and Python <a href="https://blog.deepgram.com/python-talk-time-analytics/">here</a>.</li>
<li>Keep customers happy by improving their experience and satisfaction, increasing sales and revenue.</li>
<li>Reduce costs and save time by identifying non-compliance immediately.</li>
</ul>
<p>In the next section, let\u2019s review the project we\u2019ll build together. If you\u2019d like to jump ahead and grab the code for this project, you can do so <a href="https://github.com/deepgram-devs/python-script-compliance">here in our Github repo</a>.</p>
<h1 id="what-well-build">What We\u2019ll Build</h1>
<p>This tutorial will use the Deepgram Python SDK to build a simple script that transcribes audio to text with Python and simulates monitoring script compliance by searching words and phrases. Although Deepgram has a <a href="https://developers.deepgram.com/documentation/features/diarize/">diarize feature</a> to help us recognize speakers when multiple people are talking (which is very useful for script compliance examples with an agent and a customer), we\u2019ll use a script with one person speaking to keep things simple. In a <a href="https://blog.deepgram.com/python-talk-time-analytics/">previous article</a> we built a project using the <code is:raw>diarize</code> feature to gather transcripts for multiple speakers if you\u2019d like to learn more.</p>
<p>We\u2019ll focus on monitoring script compliance by doing the following:</p>
<ul>
<li>Read our audio and receive our transcript</li>
<li>Write a function that searches for flagged words and phrases</li>
<li>Use the same function to search for wanted keywords and phrases</li>
<li>Create a scorecard of how many flagged words and keywords are spoken</li>
</ul>
<p>Now that we\u2019re clear on what we\u2019re building let\u2019s get started!</p>
<h1 id="getting-started">Getting Started</h1>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Next, let\u2019s make a directory anywhere we\u2019d like.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">mkdir deepgram_script_compliance</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cd deepgram_script_compliance</span></span></code></pre>
<p>We\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<Panel type="info" title="Important Note"><p>It\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.</p></Panel>
<p>Now we can open up our favorite editor and create a file called <code is:raw>script_compliance.py</code>. If you\u2019d like to make it from the command line, do this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch script_compliance.py</span></span></code></pre>
<p>Finally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named <code is:raw>venv</code>, then activate it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">source venv/bin/activate</span></span></code></pre>
<p>After activation, we install the dependencies, including:</p>
<ul>
<li>The Deepgram Python SDK</li>
<li>The dotenv library helps us work with our environment variables</li>
<li>The library Tabulate to pretty-print our tables</li>
<li>The Colorama library to color-code our terminal</li>
</ul>
{/*<!---->*/}
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #c9d1d9">pip install python-dotenv</span></span>
<span class="line"><span style="color: #c9d1d9">pip install tabulate</span></span>
<span class="line"><span style="color: #c9d1d9">pip install colorama</span></span></code></pre>
<p>The following section will show the ease of using Python with Deepgram to monitor search terms with a newbie-friendly script.</p>
<h1 id="the-code">The Code</h1>
<p>Let\u2019s open our <code is:raw>script_compliance.py</code> file and include the following code at the top:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tabulate </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> tabulate</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> colorama </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> init</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> colorama </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Fore</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">init()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;gettysburg.wav&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;and&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is a flagged word!&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;are&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is another flagged word!&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;um&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is a filler word!&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">search_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&quot;engaged in a great civil war&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;new nation&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Ok I see&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">score_card </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>
<p>The first part is Python imports. We need to access the modules and libraries for our script to work correctly.</p>
<p>The <code is:raw>load_dotenv()</code> will help us load our <code is:raw>api_key</code> from an <code is:raw>env</code> file, which holds our environment variables.</p>
<p>The <code is:raw>PATH_TO_FILE = 'gettysburg.wav'</code> is a path to the audio file we\u2019ll use to do the speech-to-text transcription.</p>
<p>The <code is:raw>flagged_words</code> dictionary is where we\u2019ll keep the words in a <code is:raw>key</code> which we monitor what we don\u2019t want our speaker to say. The <code is:raw>values</code> in the dictionary contain a warning for each flagged word.</p>
<p>The <code is:raw>search_words</code> list are words or phrases that we monitor and want our speaker to say during the audio.</p>
<p>The <code is:raw>score_card</code> will keep track of how many flagged words and search words our speaker says in the transcript.</p>
<p>Create an <code is:raw>env</code> file at the same level as our <code is:raw>script_compliance.py</code>. Put the following inside of it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D</span></span></code></pre>
<p>We replace <code is:raw>YOUR_API_KEY</code> with our api_key, which we got from Deepgram.</p>
<p>Next, let\u2019s add the audio file to our project by <a href="https://developers.deepgram.com/data/audio/gettysburg.wav">downloading it here</a> and adding it to our project directory.</p>
<Panel type="info" title="Important Note"><p>To follow along, we\u2019ll need to download this .wav file. If you\u2019d like to use another file, please note you\u2019ll have to change the <code is:raw>flagged_words</code> and <code is:raw>search_words</code> for the project to work correctly.</p></Panel>
<p>Our project directory structure should look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648578364/blog/2022/03/python-script-compliance/project-structure.png" alt="project structure for Deepgram script compliance with Python"></p>
<p>Back in our <code is:raw>script_compliance.py</code>, let\u2019s add this code to our <code is:raw>main</code> function:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">\u200B\u200B</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       transcription </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       speakers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> script_compliance(transcription)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">asyncio.run(main())</span></span></code></pre>
<p>Here we are initializing Deepgram and pulling in our <code is:raw>DEEPGRAM_API_KEY</code>. We open our audio file and set the <code is:raw>source</code> to recognize it\u2019s an <code is:raw>audio/wav</code>. Then we get the transcription and pass in the <code is:raw>source</code> and a Python dictionary <code is:raw>{'punctuate': True}</code>. The Deepgram <code is:raw>punctuate</code> option adds punctuation and capitalization to our transcript. Read more on <a href="https://developers.deepgram.com/documentation/features/punctuate/">how to use</a> <code is:raw>punctuate</code>.</p>
<p>Lastly, let\u2019s add our <code is:raw>script_compliance</code> function to the <code is:raw>script_compliance.py</code> file, just above our <code is:raw>main</code> function.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">script_compliance</span><span style="color: #C9D1D9">(transcript_data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> key,value </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> flagged_words.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           score_flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.count(key)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> score_flagged_words:</span></span>
<span class="line"><span style="color: #C9D1D9">               data.append([key, value])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           score_card.append(score_flagged_words)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">RED</span><span style="color: #C9D1D9">, tabulate(data, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Warning Message&quot;</span><span style="color: #C9D1D9">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> search_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">               words.append([</span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">               words.append([</span><span style="color: #A5D6FF">&quot;No&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">GREEN</span><span style="color: #C9D1D9">, tabulate(words, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Word(s) Found&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;item&quot;</span><span style="color: #C9D1D9">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">YELLOW</span><span style="color: #C9D1D9">, tabulate([[</span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9">(score_card), </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">([w </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> words </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> w[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">])]], </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word Count&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Search Word Count&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>Let\u2019s break the code down.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>The lines above get the transcript as a String type from the JSON response and store it in a variable called <code is:raw>transcript</code>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> key,value </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> flagged_words.items():</span></span>
<span class="line"><span style="color: #C9D1D9">     score_flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.count(key)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> score_flagged_words:</span></span>
<span class="line"><span style="color: #C9D1D9">             data.append([key, value])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       score_card.append(score_flagged_words)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">RED</span><span style="color: #C9D1D9">, tabulate(data, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Warning Message&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>We create an empty list called <code is:raw>data</code> that will hold the flagged words and their warnings that we find in the transcript.</p>
<p>We then loop over the dictionary to search for <code is:raw>flagged_words</code> in the transcript and append those to our <code is:raw>data</code> list.</p>
<p>This line <code is:raw>score_flagged_words = transcript.count(key)</code> counts the number of occurrences of each key or <code is:raw>flagged_words</code> in our transcript and appends it to the <code is:raw>score_card</code> list.</p>
<p>Lastly, we print out the flagged words we find in red by passing in our <code is:raw>data</code> list and table headers.</p>
<p>The second part of the code works similarly.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> search_words:</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">        words.append([</span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">        words.append([</span><span style="color: #A5D6FF">&quot;No&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">GREEN</span><span style="color: #C9D1D9">, tabulate(words, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Word(s) Found&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;item&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>We define a <code is:raw>words</code> list that will hold all of the search words we find in the transcript.</p>
<p>Then we loop through all the <code is:raw>search_words</code> that we defined at the beginning of the code example. If a search word is in the transcript, we append it to the <code is:raw>words</code> list with another value, <code is:raw>Yes</code>. Otherwise, we append it with a value <code is:raw>No</code>, which means we did not find the word in the transcript.</p>
<p>Lastly, we print the <code is:raw>words</code> list and table headers to the terminal in green.</p>
<p>Our last line of code prints out the scorecard if yellow of how many flagged words and search words we found. We get the sum of the scorecard, which holds our flagged words and uses a list comprehension to get how many search words we find in the transcript.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">YELLOW</span><span style="color: #C9D1D9">, tabulate([[</span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9">(score_card), </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">([w </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> words </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> w[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">])]], </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word Count&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Search Word Count&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>Type <code is:raw>python script_compliance.py</code> or <code is:raw>python3 script_compliance.py</code> from your terminal to run our script.</p>
<p>Here\u2019s an example of what our output would look like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648586684/blog/2022/03/python-script-compliance/terminal-output.png" alt="terminal output for Deepgram script compliance with Python"></p>
<p>Congratulations on building a Python application with Deepgram to monitor script compliance! You can find the <a href="https://github.com/deepgram-devs/python-script-compliance">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/python-script-compliance/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Imagine having the ability to monitor certain words or phrases during phone conversations by doing voice transcription with Python. This capability is a typical use case for a call center where calls are monitored between a customer service agent and a customer. Most of these conversations start with the agent saying, “This call is recorded for quality assurance purposes”. This phrase is usually legally required to inform the person on the other end that they are being recorded, and this scenario is a common use case for ASR technology known as script compliance.</p>
<p>Combining voice transcription with Python using Deepgram, there are many innovative ways to monitor script compliance without manually listening to each recorded call. Deepgram provides a speech-to-text solution that transcribes audio to text with Python, real-time and pre-recorded calls. This solution is ideal to:</p>
<ul>
<li>Provide insights into how the agent handled the call by running analytics in Python (you can read more about analytics with Deepgram and Python <a href="https://blog.deepgram.com/python-talk-time-analytics/">here</a>.</li>
<li>Keep customers happy by improving their experience and satisfaction, increasing sales and revenue.</li>
<li>Reduce costs and save time by identifying non-compliance immediately.</li>
</ul>
<p>In the next section, let’s review the project we’ll build together. If you’d like to jump ahead and grab the code for this project, you can do so <a href="https://github.com/deepgram-devs/python-script-compliance">here in our Github repo</a>.</p>
<h1 id="what-well-build">What We’ll Build</h1>
<p>This tutorial will use the Deepgram Python SDK to build a simple script that transcribes audio to text with Python and simulates monitoring script compliance by searching words and phrases. Although Deepgram has a <a href="https://developers.deepgram.com/documentation/features/diarize/">diarize feature</a> to help us recognize speakers when multiple people are talking (which is very useful for script compliance examples with an agent and a customer), we’ll use a script with one person speaking to keep things simple. In a <a href="https://blog.deepgram.com/python-talk-time-analytics/">previous article</a> we built a project using the <code>diarize</code> feature to gather transcripts for multiple speakers if you’d like to learn more.</p>
<p>We’ll focus on monitoring script compliance by doing the following:</p>
<ul>
<li>Read our audio and receive our transcript</li>
<li>Write a function that searches for flagged words and phrases</li>
<li>Use the same function to search for wanted keywords and phrases</li>
<li>Create a scorecard of how many flagged words and keywords are spoken</li>
</ul>
<p>Now that we’re clear on what we’re building let’s get started!</p>
<h1 id="getting-started">Getting Started</h1>
<p>Before we start, it’s essential to generate a Deepgram API key to use in our project. We can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won’t be able to retrieve it again and will have to create a new one. In this tutorial, we’ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Next, let’s make a directory anywhere we’d like.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">mkdir deepgram_script_compliance</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cd deepgram_script_compliance</span></span></code></pre>
<p>We’ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "Important Note" }, { "default": () => renderTemplate`<p>It’s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.</p>` })}
<p>Now we can open up our favorite editor and create a file called <code>script_compliance.py</code>. If you’d like to make it from the command line, do this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch script_compliance.py</span></span></code></pre>
<p>Finally, let’s install our dependencies for our project. Ensure our virtual environment is activated because we’ll install those dependencies inside. If your virtual environment is named <code>venv</code>, then activate it.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">source venv/bin/activate</span></span></code></pre>
<p>After activation, we install the dependencies, including:</p>
<ul>
<li>The Deepgram Python SDK</li>
<li>The dotenv library helps us work with our environment variables</li>
<li>The library Tabulate to pretty-print our tables</li>
<li>The Colorama library to color-code our terminal</li>
</ul>

<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #c9d1d9">pip install python-dotenv</span></span>
<span class="line"><span style="color: #c9d1d9">pip install tabulate</span></span>
<span class="line"><span style="color: #c9d1d9">pip install colorama</span></span></code></pre>
<p>The following section will show the ease of using Python with Deepgram to monitor search terms with a newbie-friendly script.</p>
<h1 id="the-code">The Code</h1>
<p>Let’s open our <code>script_compliance.py</code> file and include the following code at the top:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tabulate </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> tabulate</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> colorama </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> init</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> colorama </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Fore</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">init()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;gettysburg.wav&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;and&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is a flagged word!&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;are&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is another flagged word!&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #A5D6FF">&quot;um&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;This is a filler word!&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">search_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&quot;engaged in a great civil war&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;new nation&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Ok I see&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">score_card </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>
<p>The first part is Python imports. We need to access the modules and libraries for our script to work correctly.</p>
<p>The <code>load_dotenv()</code> will help us load our <code>api_key</code> from an <code>env</code> file, which holds our environment variables.</p>
<p>The <code>PATH_TO_FILE = 'gettysburg.wav'</code> is a path to the audio file we’ll use to do the speech-to-text transcription.</p>
<p>The <code>flagged_words</code> dictionary is where we’ll keep the words in a <code>key</code> which we monitor what we don’t want our speaker to say. The <code>values</code> in the dictionary contain a warning for each flagged word.</p>
<p>The <code>search_words</code> list are words or phrases that we monitor and want our speaker to say during the audio.</p>
<p>The <code>score_card</code> will keep track of how many flagged words and search words our speaker says in the transcript.</p>
<p>Create an <code>env</code> file at the same level as our <code>script_compliance.py</code>. Put the following inside of it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY = “YOUR_API_KEY”</span></span></code></pre>
<p>We replace <code>YOUR_API_KEY</code> with our api_key, which we got from Deepgram.</p>
<p>Next, let’s add the audio file to our project by <a href="https://developers.deepgram.com/data/audio/gettysburg.wav">downloading it here</a> and adding it to our project directory.</p>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "Important Note" }, { "default": () => renderTemplate`<p>To follow along, we’ll need to download this .wav file. If you’d like to use another file, please note you’ll have to change the <code>flagged_words</code> and <code>search_words</code> for the project to work correctly.</p>` })}
<p>Our project directory structure should look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648578364/blog/2022/03/python-script-compliance/project-structure.png" alt="project structure for Deepgram script compliance with Python"></p>
<p>Back in our <code>script_compliance.py</code>, let’s add this code to our <code>main</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">​​</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       transcription </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       speakers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> script_compliance(transcription)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">asyncio.run(main())</span></span></code></pre>
<p>Here we are initializing Deepgram and pulling in our <code>DEEPGRAM_API_KEY</code>. We open our audio file and set the <code>source</code> to recognize it’s an <code>audio/wav</code>. Then we get the transcription and pass in the <code>source</code> and a Python dictionary <code>{'punctuate': True}</code>. The Deepgram <code>punctuate</code> option adds punctuation and capitalization to our transcript. Read more on <a href="https://developers.deepgram.com/documentation/features/punctuate/">how to use</a> <code>punctuate</code>.</p>
<p>Lastly, let’s add our <code>script_compliance</code> function to the <code>script_compliance.py</code> file, just above our <code>main</code> function.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">script_compliance</span><span style="color: #C9D1D9">(transcript_data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> key,value </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> flagged_words.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           score_flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.count(key)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> score_flagged_words:</span></span>
<span class="line"><span style="color: #C9D1D9">               data.append([key, value])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           score_card.append(score_flagged_words)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">RED</span><span style="color: #C9D1D9">, tabulate(data, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Warning Message&quot;</span><span style="color: #C9D1D9">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> search_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">               words.append([</span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">               words.append([</span><span style="color: #A5D6FF">&quot;No&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">GREEN</span><span style="color: #C9D1D9">, tabulate(words, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Word(s) Found&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;item&quot;</span><span style="color: #C9D1D9">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">YELLOW</span><span style="color: #C9D1D9">, tabulate([[</span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9">(score_card), </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">([w </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> words </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> w[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">])]], </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word Count&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Search Word Count&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>Let’s break the code down.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>The lines above get the transcript as a String type from the JSON response and store it in a variable called <code>transcript</code>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> key,value </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> flagged_words.items():</span></span>
<span class="line"><span style="color: #C9D1D9">     score_flagged_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.count(key)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> score_flagged_words:</span></span>
<span class="line"><span style="color: #C9D1D9">             data.append([key, value])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       score_card.append(score_flagged_words)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">RED</span><span style="color: #C9D1D9">, tabulate(data, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Warning Message&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>We create an empty list called <code>data</code> that will hold the flagged words and their warnings that we find in the transcript.</p>
<p>We then loop over the dictionary to search for <code>flagged_words</code> in the transcript and append those to our <code>data</code> list.</p>
<p>This line <code>score_flagged_words = transcript.count(key)</code> counts the number of occurrences of each key or <code>flagged_words</code> in our transcript and appends it to the <code>score_card</code> list.</p>
<p>Lastly, we print out the flagged words we find in red by passing in our <code>data</code> list and table headers.</p>
<p>The second part of the code works similarly.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> search_words:</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> item </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">        words.append([</span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">        words.append([</span><span style="color: #A5D6FF">&quot;No&quot;</span><span style="color: #C9D1D9">, item])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">GREEN</span><span style="color: #C9D1D9">, tabulate(words, </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Word(s) Found&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;item&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>We define a <code>words</code> list that will hold all of the search words we find in the transcript.</p>
<p>Then we loop through all the <code>search_words</code> that we defined at the beginning of the code example. If a search word is in the transcript, we append it to the <code>words</code> list with another value, <code>Yes</code>. Otherwise, we append it with a value <code>No</code>, which means we did not find the word in the transcript.</p>
<p>Lastly, we print the <code>words</code> list and table headers to the terminal in green.</p>
<p>Our last line of code prints out the scorecard if yellow of how many flagged words and search words we found. We get the sum of the scorecard, which holds our flagged words and uses a list comprehension to get how many search words we find in the transcript.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(Fore.</span><span style="color: #79C0FF">YELLOW</span><span style="color: #C9D1D9">, tabulate([[</span><span style="color: #79C0FF">sum</span><span style="color: #C9D1D9">(score_card), </span><span style="color: #79C0FF">len</span><span style="color: #C9D1D9">([w </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> w </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> words </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> w[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Yes&quot;</span><span style="color: #C9D1D9">])]], </span><span style="color: #FFA657">headers</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&quot;Flagged Word Count&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;Search Word Count&quot;</span><span style="color: #C9D1D9">]))</span></span></code></pre>
<p>Type <code>python script_compliance.py</code> or <code>python3 script_compliance.py</code> from your terminal to run our script.</p>
<p>Here’s an example of what our output would look like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1648586684/blog/2022/03/python-script-compliance/terminal-output.png" alt="terminal output for Deepgram script compliance with Python"></p>
<p>Congratulations on building a Python application with Deepgram to monitor script compliance! You can find the <a href="https://github.com/deepgram-devs/python-script-compliance">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/python-script-compliance/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
