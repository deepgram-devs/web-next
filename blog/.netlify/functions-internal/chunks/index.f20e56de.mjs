import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "set-up-live-transcription", "text": "Set Up Live Transcription" }, { "depth": 2, "slug": "set-up-intents", "text": "Set Up Intents" }, { "depth": 2, "slug": "match-user-speech-to-intents", "text": "Match User Speech to Intents" }, { "depth": 2, "slug": "save-intent-matching", "text": "Save Intent Matching" }, { "depth": 2, "slug": "prompt-the-user-to-speak", "text": "Prompt the User to Speak" }, { "depth": 2, "slug": "in-practice", "text": "In Practice" }], "source": "\nOne of the biggest challenges for conversational AI is anticipating all the ways in which a user may express a single phrase. Even with decent natural language processing, users often have frustrating experiences with 'retry rates'  - the number of times a request is rejected before it succeeds, even more so in Interactive Voice Response (IVR) systems. However, data around failed attempts can be key in improving understanding of how people frame their requests.\n\nIn this project, we'll cover an approach to gather failed failed IVR scripts and infer their meaning based on the successful attempt. This data can ultimately be used to improve your intent triggers and improve customer experience.\n\n![Diagram showing a back and forth conversation in text. The first two messages from the user are not understood but the third is. This generates a report that shows the two failed phrases next to the eventually-successful intent.](https://res.cloudinary.com/deepgram/image/upload/v1663768360/blog/2022/09/conversational-ai-retry-report/diagram_kquxm1.png)\n\nWe'll be using Deepgram with JavaScript and browser live transcription to demonstrate the concept, but it can easily be applied in other settings and programming languages.\n\nBefore we start, you will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys) and keep it handy.\n\nCreate an empty `index.html` file and open it in your code editor.\n\n## Set Up Live Transcription\n\nAdd the following code to `index.html` to set up live transcription in your browser. For a detailed explanation of how this works, check out our [blog post on browser live transcription](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n```html\n<html>\n    <body>\n        <script>\n            navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n                const mediaRecorder = new MediaRecorder(stream)\n\n                const DG_KEY = 'replace-with-your-deepgram-api-key'\n                const socket = new WebSocket('wss://api.deepgram.com/v1/listen', [ 'token', DG_KEY ])\n\n                socket.onopen = () => {\n                    mediaRecorder.addEventListener('dataavailable', event => {\n                        if (event.data.size > 0 && socket.readyState == 1) {\n                            socket.send(event.data)\n                        }\n                    })\n                    mediaRecorder.start(250)\n                }\n\n                socket.onmessage = (message) => {\n                    const { transcript } = JSON.parse(message.data).channel.alternatives[0]\n                    if(transcript) handleResponse(transcript)\n                }\n            })\n\n            function handleResponse(transcript) {\n                console.log(transcript)\n            }\n        <\/script>\n    </body>\n</html>\n```\n\nOpen the file in your browser. You should immediately be prompted for access to your microphone. Once granted, open up your browser console and start speaking to see your words logged.\n\n![Browser console showing several lines of transcripts](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/browser-live-transcription_t58fww.png)\n\n## Set Up Intents\n\nIn reality, your conversational AI system will be a lot more complex and robust than what we'll build today, but they mostly have the same characteristics:\n\n1.  A list of request options - 'intents'\n2.  Each option has a number of phrases or terms that can be used to trigger it - 'triggers'\n3.  An action to happen when an intent occurs - 'response'\n\nIntents normally inform a machine learning model which will match phrases similar but not identical, and responses may execute some logic before continuing. For this project, we'll need a partial match on an intent trigger. The response will be speaking a fixed phrase back to the user.\n\nAt the top of your `<script>` tag, add the following intents:\n\n```js\nconst intents = [\n    {\n        intent: 'balance',\n        triggers: [\n            'balance',\n            'balance',\n            'how much money'\n        ],\n        response: 'Your bank balance is over nine thousand'\n    },\n    {\n        intent: 'new_transaction',\n        triggers: [\n            'transfer',\n            'send',\n            'set up payee'\n        ],\n        response: 'Who would you like to send money to?'\n    },\n    {\n        intent: 'help',\n        triggers: [\n            'help',\n            'advice',\n            'struggling'\n        ],\n        response: 'Putting you through to one of our agents now'\n    },\n]\n```\n\n## Match User Speech to Intents\n\nWhen a user speaks, we need to determine if there was a match or not. Update `handleResponse()` with the following:\n\n```js\nfunction handleResponse(transcript) {\n    const match = intents.find(intent => intent.triggers.some(trigger => transcript.includes(trigger)))\n    console.log(match)\n}\n```\n\n`match` will either be the entire intent object for the matching item or `undefined`.\n\n![Browser console showing two undefined logs, and an object with one intent.](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match_bf4zgt.png)\n\n## Save Intent Matching\n\nJust above `handleResponse()`, create two new variables - `current` that will contain the current string of requests towards a single intent and `report` that will contain all failed intents and the final successful phrase.\n\n```js\nlet current = {}\nconst report = []\n```\n\nUpdate `handleResponse()` with logic if there was no match. Specifically, add the phrase to `current.retries`, creating it if it doesn't already exist:\n\n```js\nfunction handleResponse(transcript) {\n    const match = intents.find(intent => intent.triggers.some(trigger => transcript.includes(trigger)))\n\n    if(!match) {\n        console.log(`No match for ${transcript}`)\n        if(!current.retries) current.retries = [transcript]\n        else current.retries.push(transcript)\n    }\n}\n```\n\nIf there was a match, add it to the `current` object, and push it into the `report` array. Each object in `report` will contain failed attempts and the eventual successful trigger:\n\n```js\nif(!match) {\n    console.log(`No match for ${transcript}`)\n    if(!current.retries) current.retries = [transcript]\n    else current.retries.push(transcript)\n} else {\n    if(current.retries) {\n        current.intent = match.intent\n        report.push(current)\n    }\n    current = {}\n    console.log(match.response)\n}\n```\n\nTry it out. Refresh the browser and start speaking. Try some random phrases, and then one which will trigger a match - \"I need help\", \"What's my overdraft balance?\", and \"send some money\" should all work.\n\n![Browser console showing no matches for two phrases, and then a successful response.](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match-response_fpclpv.png)\n\n## Prompt the User to Speak\n\nTo wrap up, let's add spoken prompts and replies for this application using the [Web Speech API](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis).\n\nAt the bottom of the `<script>` tag, create a `speak()` function:\n\n```js\nconst synth = window.speechSynthesis\nfunction speak(text) {\n    if (synth.speaking) synth.cancel()\n    const utterThis = new SpeechSynthesisUtterance(text)\n    synth.speak(utterThis)\n}\n```\n\nAdd an initial prompt to speak. Under `mediaRecorder.start(250)` add:\n\n```js\nspeak('What can we help you with today?')\n```\n\nAt the bottom of the logic in the if statement, when there is no match, add a retry prompt:\n\n```js\nspeak('I didn\\'t understand that, sorry. Can you try again?')\n```\n\nWhen there is a match, respond to the user:\n\n```js\nspeak(match.response)\n```\n\nAt any point, the `report` variable contains an array of potential improvements you can make to your conversational AI intents.\n\n![Logging report after several interactions. Each object has an array of retry strings, and the correct intent.](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/report_r4q0o1.png)\n\n## In Practice\n\nThis tutorial shows an overall approach for inferring the meaning of failed intent triggers, assuming that a user does not change their intent. To build this system out further, you should consider the common change in intent from interfacing with a bot to \"speak to a human.\"\n\nYou may also choose to do this after an interaction has ended rather than live, but you'll need to determine when a retry occurs.\n\nIf you have questions about anything in this post, we\u2019d love to hear from you. Head over to [our forum](https://github.com/orgs/deepgram/discussions/categories/q-a) and create a new discussion with your questions, or send us a tweet [@DeepgramAI](https://twitter.com/DeepgramAI)\n\n", "html": '<p>One of the biggest challenges for conversational AI is anticipating all the ways in which a user may express a single phrase. Even with decent natural language processing, users often have frustrating experiences with \u2018retry rates\u2019  - the number of times a request is rejected before it succeeds, even more so in Interactive Voice Response (IVR) systems. However, data around failed attempts can be key in improving understanding of how people frame their requests.</p>\n<p>In this project, we\u2019ll cover an approach to gather failed failed IVR scripts and infer their meaning based on the successful attempt. This data can ultimately be used to improve your intent triggers and improve customer experience.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768360/blog/2022/09/conversational-ai-retry-report/diagram_kquxm1.png" alt="Diagram showing a back and forth conversation in text. The first two messages from the user are not understood but the third is. This generates a report that shows the two failed phrases next to the eventually-successful intent."></p>\n<p>We\u2019ll be using Deepgram with JavaScript and browser live transcription to demonstrate the concept, but it can easily be applied in other settings and programming languages.</p>\n<p>Before we start, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a> and keep it handy.</p>\n<p>Create an empty <code is:raw>index.html</code> file and open it in your code editor.</p>\n<h2 id="set-up-live-transcription">Set Up Live Transcription</h2>\n<p>Add the following code to <code is:raw>index.html</code> to set up live transcription in your browser. For a detailed explanation of how this works, check out our <a href="https://blog.deepgram.com/live-transcription-mic-browser/">blog post on browser live transcription</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;replace-with-your-deepgram-api-key&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> ])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">                        }</span></span>\n<span class="line"><span style="color: #C9D1D9">                    })</span></span>\n<span class="line"><span style="color: #C9D1D9">                    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data).channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"><span style="color: #C9D1D9">            })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Open the file in your browser. You should immediately be prompted for access to your microphone. Once granted, open up your browser console and start speaking to see your words logged.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/browser-live-transcription_t58fww.png" alt="Browser console showing several lines of transcripts"></p>\n<h2 id="set-up-intents">Set Up Intents</h2>\n<p>In reality, your conversational AI system will be a lot more complex and robust than what we\u2019ll build today, but they mostly have the same characteristics:</p>\n<ol>\n<li>A list of request options - \u2018intents\u2019</li>\n<li>Each option has a number of phrases or terms that can be used to trigger it - \u2018triggers\u2019</li>\n<li>An action to happen when an intent occurs - \u2018response\u2019</li>\n</ol>\n<p>Intents normally inform a machine learning model which will match phrases similar but not identical, and responses may execute some logic before continuing. For this project, we\u2019ll need a partial match on an intent trigger. The response will be speaking a fixed phrase back to the user.</p>\n<p>At the top of your <code is:raw>&lt;script&gt;</code> tag, add the following intents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">intents</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;how much money&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Your bank balance is over nine thousand&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;new_transaction&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transfer&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;send&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;set up payee&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Who would you like to send money to?&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;help&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;help&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;advice&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;struggling&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Putting you through to one of our agents now&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<h2 id="match-user-speech-to-intents">Match User Speech to Intents</h2>\n<p>When a user speaks, we need to determine if there was a match or not. Update <code is:raw>handleResponse()</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">match</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> intents.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">intent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> intent.triggers.</span><span style="color: #D2A8FF">some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">trigger</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(trigger)))</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(match)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p><code is:raw>match</code> will either be the entire intent object for the matching item or <code is:raw>undefined</code>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match_bf4zgt.png" alt="Browser console showing two undefined logs, and an object with one intent."></p>\n<h2 id="save-intent-matching">Save Intent Matching</h2>\n<p>Just above <code is:raw>handleResponse()</code>, create two new variables - <code is:raw>current</code> that will contain the current string of requests towards a single intent and <code is:raw>report</code> that will contain all failed intents and the final successful phrase.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> current </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">report</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>\n<p>Update <code is:raw>handleResponse()</code> with logic if there was no match. Specifically, add the phrase to <code is:raw>current.retries</code>, creating it if it doesn\u2019t already exist:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">match</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> intents.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">intent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> intent.triggers.</span><span style="color: #D2A8FF">some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">trigger</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(trigger)))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">match) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`No match for ${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">current.retries) current.retries </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [transcript]</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> current.retries.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>If there was a match, add it to the <code is:raw>current</code> object, and push it into the <code is:raw>report</code> array. Each object in <code is:raw>report</code> will contain failed attempts and the eventual successful trigger:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">match) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`No match for ${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">current.retries) current.retries </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [transcript]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> current.retries.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">} </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(current.retries) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        current.intent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> match.intent</span></span>\n<span class="line"><span style="color: #C9D1D9">        report.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(current)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">    current </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(match.response)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try it out. Refresh the browser and start speaking. Try some random phrases, and then one which will trigger a match - \u201CI need help\u201D, \u201CWhat\u2019s my overdraft balance?\u201D, and \u201Csend some money\u201D should all work.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match-response_fpclpv.png" alt="Browser console showing no matches for two phrases, and then a successful response."></p>\n<h2 id="prompt-the-user-to-speak">Prompt the User to Speak</h2>\n<p>To wrap up, let\u2019s add spoken prompts and replies for this application using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis">Web Speech API</a>.</p>\n<p>At the bottom of the <code is:raw>&lt;script&gt;</code> tag, create a <code is:raw>speak()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">synth</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> window.speechSynthesis</span></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (synth.speaking) synth.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterThis</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">SpeechSynthesisUtterance</span><span style="color: #C9D1D9">(text)</span></span>\n<span class="line"><span style="color: #C9D1D9">    synth.</span><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(utterThis)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Add an initial prompt to speak. Under <code is:raw>mediaRecorder.start(250)</code> add:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;What can we help you with today?&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>At the bottom of the logic in the if statement, when there is no match, add a retry prompt:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;I didn</span><span style="color: #79C0FF">\\&#39;</span><span style="color: #A5D6FF">t understand that, sorry. Can you try again?&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>When there is a match, respond to the user:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(match.response)</span></span></code></pre>\n<p>At any point, the <code is:raw>report</code> variable contains an array of potential improvements you can make to your conversational AI intents.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/report_r4q0o1.png" alt="Logging report after several interactions. Each object has an array of retry strings, and the correct intent."></p>\n<h2 id="in-practice">In Practice</h2>\n<p>This tutorial shows an overall approach for inferring the meaning of failed intent triggers, assuming that a user does not change their intent. To build this system out further, you should consider the common change in intent from interfacing with a bot to \u201Cspeak to a human.\u201D</p>\n<p>You may also choose to do this after an interaction has ended rather than live, but you\u2019ll need to determine when a retry occurs.</p>\n<p>If you have questions about anything in this post, we\u2019d love to hear from you. Head over to <a href="https://github.com/orgs/deepgram/discussions/categories/q-a">our forum</a> and create a new discussion with your questions, or send us a tweet <a href="https://twitter.com/DeepgramAI">@DeepgramAI</a></p>' };
const frontmatter = { "title": "Improve IVR Prompts with Custom Reporting", "description": "Learn how to improve your IVR prompts through reporting on what users said using Deepgram's speech recognition API.", "date": "2022-09-22T19:22:00.103Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1663864118/blog/2022/09/conversational-ai-retry-report/2209-Improve-IVR-Prompts-w-Custom-Reporting-blog_2x_htqlwh.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["conversational-ai", "javascript"], "shorturls": { "share": "https://dpgr.am/752c048", "twitter": "https://dpgr.am/52437db", "linkedin": "https://dpgr.am/b56bdb2", "reddit": "https://dpgr.am/b846e8b", "facebook": "https://dpgr.am/4f5d2c8" }, "astro": { "headings": [{ "depth": 2, "slug": "set-up-live-transcription", "text": "Set Up Live Transcription" }, { "depth": 2, "slug": "set-up-intents", "text": "Set Up Intents" }, { "depth": 2, "slug": "match-user-speech-to-intents", "text": "Match User Speech to Intents" }, { "depth": 2, "slug": "save-intent-matching", "text": "Save Intent Matching" }, { "depth": 2, "slug": "prompt-the-user-to-speak", "text": "Prompt the User to Speak" }, { "depth": 2, "slug": "in-practice", "text": "In Practice" }], "source": "\nOne of the biggest challenges for conversational AI is anticipating all the ways in which a user may express a single phrase. Even with decent natural language processing, users often have frustrating experiences with 'retry rates'  - the number of times a request is rejected before it succeeds, even more so in Interactive Voice Response (IVR) systems. However, data around failed attempts can be key in improving understanding of how people frame their requests.\n\nIn this project, we'll cover an approach to gather failed failed IVR scripts and infer their meaning based on the successful attempt. This data can ultimately be used to improve your intent triggers and improve customer experience.\n\n![Diagram showing a back and forth conversation in text. The first two messages from the user are not understood but the third is. This generates a report that shows the two failed phrases next to the eventually-successful intent.](https://res.cloudinary.com/deepgram/image/upload/v1663768360/blog/2022/09/conversational-ai-retry-report/diagram_kquxm1.png)\n\nWe'll be using Deepgram with JavaScript and browser live transcription to demonstrate the concept, but it can easily be applied in other settings and programming languages.\n\nBefore we start, you will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys) and keep it handy.\n\nCreate an empty `index.html` file and open it in your code editor.\n\n## Set Up Live Transcription\n\nAdd the following code to `index.html` to set up live transcription in your browser. For a detailed explanation of how this works, check out our [blog post on browser live transcription](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n```html\n<html>\n    <body>\n        <script>\n            navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n                const mediaRecorder = new MediaRecorder(stream)\n\n                const DG_KEY = 'replace-with-your-deepgram-api-key'\n                const socket = new WebSocket('wss://api.deepgram.com/v1/listen', [ 'token', DG_KEY ])\n\n                socket.onopen = () => {\n                    mediaRecorder.addEventListener('dataavailable', event => {\n                        if (event.data.size > 0 && socket.readyState == 1) {\n                            socket.send(event.data)\n                        }\n                    })\n                    mediaRecorder.start(250)\n                }\n\n                socket.onmessage = (message) => {\n                    const { transcript } = JSON.parse(message.data).channel.alternatives[0]\n                    if(transcript) handleResponse(transcript)\n                }\n            })\n\n            function handleResponse(transcript) {\n                console.log(transcript)\n            }\n        <\/script>\n    </body>\n</html>\n```\n\nOpen the file in your browser. You should immediately be prompted for access to your microphone. Once granted, open up your browser console and start speaking to see your words logged.\n\n![Browser console showing several lines of transcripts](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/browser-live-transcription_t58fww.png)\n\n## Set Up Intents\n\nIn reality, your conversational AI system will be a lot more complex and robust than what we'll build today, but they mostly have the same characteristics:\n\n1.  A list of request options - 'intents'\n2.  Each option has a number of phrases or terms that can be used to trigger it - 'triggers'\n3.  An action to happen when an intent occurs - 'response'\n\nIntents normally inform a machine learning model which will match phrases similar but not identical, and responses may execute some logic before continuing. For this project, we'll need a partial match on an intent trigger. The response will be speaking a fixed phrase back to the user.\n\nAt the top of your `<script>` tag, add the following intents:\n\n```js\nconst intents = [\n    {\n        intent: 'balance',\n        triggers: [\n            'balance',\n            'balance',\n            'how much money'\n        ],\n        response: 'Your bank balance is over nine thousand'\n    },\n    {\n        intent: 'new_transaction',\n        triggers: [\n            'transfer',\n            'send',\n            'set up payee'\n        ],\n        response: 'Who would you like to send money to?'\n    },\n    {\n        intent: 'help',\n        triggers: [\n            'help',\n            'advice',\n            'struggling'\n        ],\n        response: 'Putting you through to one of our agents now'\n    },\n]\n```\n\n## Match User Speech to Intents\n\nWhen a user speaks, we need to determine if there was a match or not. Update `handleResponse()` with the following:\n\n```js\nfunction handleResponse(transcript) {\n    const match = intents.find(intent => intent.triggers.some(trigger => transcript.includes(trigger)))\n    console.log(match)\n}\n```\n\n`match` will either be the entire intent object for the matching item or `undefined`.\n\n![Browser console showing two undefined logs, and an object with one intent.](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match_bf4zgt.png)\n\n## Save Intent Matching\n\nJust above `handleResponse()`, create two new variables - `current` that will contain the current string of requests towards a single intent and `report` that will contain all failed intents and the final successful phrase.\n\n```js\nlet current = {}\nconst report = []\n```\n\nUpdate `handleResponse()` with logic if there was no match. Specifically, add the phrase to `current.retries`, creating it if it doesn't already exist:\n\n```js\nfunction handleResponse(transcript) {\n    const match = intents.find(intent => intent.triggers.some(trigger => transcript.includes(trigger)))\n\n    if(!match) {\n        console.log(`No match for ${transcript}`)\n        if(!current.retries) current.retries = [transcript]\n        else current.retries.push(transcript)\n    }\n}\n```\n\nIf there was a match, add it to the `current` object, and push it into the `report` array. Each object in `report` will contain failed attempts and the eventual successful trigger:\n\n```js\nif(!match) {\n    console.log(`No match for ${transcript}`)\n    if(!current.retries) current.retries = [transcript]\n    else current.retries.push(transcript)\n} else {\n    if(current.retries) {\n        current.intent = match.intent\n        report.push(current)\n    }\n    current = {}\n    console.log(match.response)\n}\n```\n\nTry it out. Refresh the browser and start speaking. Try some random phrases, and then one which will trigger a match - \"I need help\", \"What's my overdraft balance?\", and \"send some money\" should all work.\n\n![Browser console showing no matches for two phrases, and then a successful response.](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match-response_fpclpv.png)\n\n## Prompt the User to Speak\n\nTo wrap up, let's add spoken prompts and replies for this application using the [Web Speech API](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis).\n\nAt the bottom of the `<script>` tag, create a `speak()` function:\n\n```js\nconst synth = window.speechSynthesis\nfunction speak(text) {\n    if (synth.speaking) synth.cancel()\n    const utterThis = new SpeechSynthesisUtterance(text)\n    synth.speak(utterThis)\n}\n```\n\nAdd an initial prompt to speak. Under `mediaRecorder.start(250)` add:\n\n```js\nspeak('What can we help you with today?')\n```\n\nAt the bottom of the logic in the if statement, when there is no match, add a retry prompt:\n\n```js\nspeak('I didn\\'t understand that, sorry. Can you try again?')\n```\n\nWhen there is a match, respond to the user:\n\n```js\nspeak(match.response)\n```\n\nAt any point, the `report` variable contains an array of potential improvements you can make to your conversational AI intents.\n\n![Logging report after several interactions. Each object has an array of retry strings, and the correct intent.](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/report_r4q0o1.png)\n\n## In Practice\n\nThis tutorial shows an overall approach for inferring the meaning of failed intent triggers, assuming that a user does not change their intent. To build this system out further, you should consider the common change in intent from interfacing with a bot to \"speak to a human.\"\n\nYou may also choose to do this after an interaction has ended rather than live, but you'll need to determine when a retry occurs.\n\nIf you have questions about anything in this post, we\u2019d love to hear from you. Head over to [our forum](https://github.com/orgs/deepgram/discussions/categories/q-a) and create a new discussion with your questions, or send us a tweet [@DeepgramAI](https://twitter.com/DeepgramAI)\n\n", "html": '<p>One of the biggest challenges for conversational AI is anticipating all the ways in which a user may express a single phrase. Even with decent natural language processing, users often have frustrating experiences with \u2018retry rates\u2019  - the number of times a request is rejected before it succeeds, even more so in Interactive Voice Response (IVR) systems. However, data around failed attempts can be key in improving understanding of how people frame their requests.</p>\n<p>In this project, we\u2019ll cover an approach to gather failed failed IVR scripts and infer their meaning based on the successful attempt. This data can ultimately be used to improve your intent triggers and improve customer experience.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768360/blog/2022/09/conversational-ai-retry-report/diagram_kquxm1.png" alt="Diagram showing a back and forth conversation in text. The first two messages from the user are not understood but the third is. This generates a report that shows the two failed phrases next to the eventually-successful intent."></p>\n<p>We\u2019ll be using Deepgram with JavaScript and browser live transcription to demonstrate the concept, but it can easily be applied in other settings and programming languages.</p>\n<p>Before we start, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a> and keep it handy.</p>\n<p>Create an empty <code is:raw>index.html</code> file and open it in your code editor.</p>\n<h2 id="set-up-live-transcription">Set Up Live Transcription</h2>\n<p>Add the following code to <code is:raw>index.html</code> to set up live transcription in your browser. For a detailed explanation of how this works, check out our <a href="https://blog.deepgram.com/live-transcription-mic-browser/">blog post on browser live transcription</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;replace-with-your-deepgram-api-key&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> ])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">                        }</span></span>\n<span class="line"><span style="color: #C9D1D9">                    })</span></span>\n<span class="line"><span style="color: #C9D1D9">                    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data).channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"><span style="color: #C9D1D9">            })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Open the file in your browser. You should immediately be prompted for access to your microphone. Once granted, open up your browser console and start speaking to see your words logged.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/browser-live-transcription_t58fww.png" alt="Browser console showing several lines of transcripts"></p>\n<h2 id="set-up-intents">Set Up Intents</h2>\n<p>In reality, your conversational AI system will be a lot more complex and robust than what we\u2019ll build today, but they mostly have the same characteristics:</p>\n<ol>\n<li>A list of request options - \u2018intents\u2019</li>\n<li>Each option has a number of phrases or terms that can be used to trigger it - \u2018triggers\u2019</li>\n<li>An action to happen when an intent occurs - \u2018response\u2019</li>\n</ol>\n<p>Intents normally inform a machine learning model which will match phrases similar but not identical, and responses may execute some logic before continuing. For this project, we\u2019ll need a partial match on an intent trigger. The response will be speaking a fixed phrase back to the user.</p>\n<p>At the top of your <code is:raw>&lt;script&gt;</code> tag, add the following intents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">intents</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;how much money&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Your bank balance is over nine thousand&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;new_transaction&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transfer&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;send&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;set up payee&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Who would you like to send money to?&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;help&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;help&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;advice&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;struggling&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Putting you through to one of our agents now&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<h2 id="match-user-speech-to-intents">Match User Speech to Intents</h2>\n<p>When a user speaks, we need to determine if there was a match or not. Update <code is:raw>handleResponse()</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">match</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> intents.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">intent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> intent.triggers.</span><span style="color: #D2A8FF">some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">trigger</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(trigger)))</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(match)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p><code is:raw>match</code> will either be the entire intent object for the matching item or <code is:raw>undefined</code>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match_bf4zgt.png" alt="Browser console showing two undefined logs, and an object with one intent."></p>\n<h2 id="save-intent-matching">Save Intent Matching</h2>\n<p>Just above <code is:raw>handleResponse()</code>, create two new variables - <code is:raw>current</code> that will contain the current string of requests towards a single intent and <code is:raw>report</code> that will contain all failed intents and the final successful phrase.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> current </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">report</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>\n<p>Update <code is:raw>handleResponse()</code> with logic if there was no match. Specifically, add the phrase to <code is:raw>current.retries</code>, creating it if it doesn\u2019t already exist:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">match</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> intents.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">intent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> intent.triggers.</span><span style="color: #D2A8FF">some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">trigger</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(trigger)))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">match) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`No match for ${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">current.retries) current.retries </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [transcript]</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> current.retries.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>If there was a match, add it to the <code is:raw>current</code> object, and push it into the <code is:raw>report</code> array. Each object in <code is:raw>report</code> will contain failed attempts and the eventual successful trigger:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">match) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`No match for ${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">current.retries) current.retries </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [transcript]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> current.retries.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">} </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(current.retries) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        current.intent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> match.intent</span></span>\n<span class="line"><span style="color: #C9D1D9">        report.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(current)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">    current </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(match.response)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try it out. Refresh the browser and start speaking. Try some random phrases, and then one which will trigger a match - \u201CI need help\u201D, \u201CWhat\u2019s my overdraft balance?\u201D, and \u201Csend some money\u201D should all work.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match-response_fpclpv.png" alt="Browser console showing no matches for two phrases, and then a successful response."></p>\n<h2 id="prompt-the-user-to-speak">Prompt the User to Speak</h2>\n<p>To wrap up, let\u2019s add spoken prompts and replies for this application using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis">Web Speech API</a>.</p>\n<p>At the bottom of the <code is:raw>&lt;script&gt;</code> tag, create a <code is:raw>speak()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">synth</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> window.speechSynthesis</span></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (synth.speaking) synth.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterThis</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">SpeechSynthesisUtterance</span><span style="color: #C9D1D9">(text)</span></span>\n<span class="line"><span style="color: #C9D1D9">    synth.</span><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(utterThis)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Add an initial prompt to speak. Under <code is:raw>mediaRecorder.start(250)</code> add:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;What can we help you with today?&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>At the bottom of the logic in the if statement, when there is no match, add a retry prompt:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;I didn</span><span style="color: #79C0FF">\\&#39;</span><span style="color: #A5D6FF">t understand that, sorry. Can you try again?&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>When there is a match, respond to the user:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(match.response)</span></span></code></pre>\n<p>At any point, the <code is:raw>report</code> variable contains an array of potential improvements you can make to your conversational AI intents.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/report_r4q0o1.png" alt="Logging report after several interactions. Each object has an array of retry strings, and the correct intent."></p>\n<h2 id="in-practice">In Practice</h2>\n<p>This tutorial shows an overall approach for inferring the meaning of failed intent triggers, assuming that a user does not change their intent. To build this system out further, you should consider the common change in intent from interfacing with a bot to \u201Cspeak to a human.\u201D</p>\n<p>You may also choose to do this after an interaction has ended rather than live, but you\u2019ll need to determine when a retry occurs.</p>\n<p>If you have questions about anything in this post, we\u2019d love to hear from you. Head over to <a href="https://github.com/orgs/deepgram/discussions/categories/q-a">our forum</a> and create a new discussion with your questions, or send us a tweet <a href="https://twitter.com/DeepgramAI">@DeepgramAI</a></p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/improve-ivr-prompts-with-custom-reporting/index.md" };
function rawContent() {
  return "\nOne of the biggest challenges for conversational AI is anticipating all the ways in which a user may express a single phrase. Even with decent natural language processing, users often have frustrating experiences with 'retry rates'  - the number of times a request is rejected before it succeeds, even more so in Interactive Voice Response (IVR) systems. However, data around failed attempts can be key in improving understanding of how people frame their requests.\n\nIn this project, we'll cover an approach to gather failed failed IVR scripts and infer their meaning based on the successful attempt. This data can ultimately be used to improve your intent triggers and improve customer experience.\n\n![Diagram showing a back and forth conversation in text. The first two messages from the user are not understood but the third is. This generates a report that shows the two failed phrases next to the eventually-successful intent.](https://res.cloudinary.com/deepgram/image/upload/v1663768360/blog/2022/09/conversational-ai-retry-report/diagram_kquxm1.png)\n\nWe'll be using Deepgram with JavaScript and browser live transcription to demonstrate the concept, but it can easily be applied in other settings and programming languages.\n\nBefore we start, you will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys) and keep it handy.\n\nCreate an empty `index.html` file and open it in your code editor.\n\n## Set Up Live Transcription\n\nAdd the following code to `index.html` to set up live transcription in your browser. For a detailed explanation of how this works, check out our [blog post on browser live transcription](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n```html\n<html>\n    <body>\n        <script>\n            navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n                const mediaRecorder = new MediaRecorder(stream)\n\n                const DG_KEY = 'replace-with-your-deepgram-api-key'\n                const socket = new WebSocket('wss://api.deepgram.com/v1/listen', [ 'token', DG_KEY ])\n\n                socket.onopen = () => {\n                    mediaRecorder.addEventListener('dataavailable', event => {\n                        if (event.data.size > 0 && socket.readyState == 1) {\n                            socket.send(event.data)\n                        }\n                    })\n                    mediaRecorder.start(250)\n                }\n\n                socket.onmessage = (message) => {\n                    const { transcript } = JSON.parse(message.data).channel.alternatives[0]\n                    if(transcript) handleResponse(transcript)\n                }\n            })\n\n            function handleResponse(transcript) {\n                console.log(transcript)\n            }\n        <\/script>\n    </body>\n</html>\n```\n\nOpen the file in your browser. You should immediately be prompted for access to your microphone. Once granted, open up your browser console and start speaking to see your words logged.\n\n![Browser console showing several lines of transcripts](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/browser-live-transcription_t58fww.png)\n\n## Set Up Intents\n\nIn reality, your conversational AI system will be a lot more complex and robust than what we'll build today, but they mostly have the same characteristics:\n\n1.  A list of request options - 'intents'\n2.  Each option has a number of phrases or terms that can be used to trigger it - 'triggers'\n3.  An action to happen when an intent occurs - 'response'\n\nIntents normally inform a machine learning model which will match phrases similar but not identical, and responses may execute some logic before continuing. For this project, we'll need a partial match on an intent trigger. The response will be speaking a fixed phrase back to the user.\n\nAt the top of your `<script>` tag, add the following intents:\n\n```js\nconst intents = [\n    {\n        intent: 'balance',\n        triggers: [\n            'balance',\n            'balance',\n            'how much money'\n        ],\n        response: 'Your bank balance is over nine thousand'\n    },\n    {\n        intent: 'new_transaction',\n        triggers: [\n            'transfer',\n            'send',\n            'set up payee'\n        ],\n        response: 'Who would you like to send money to?'\n    },\n    {\n        intent: 'help',\n        triggers: [\n            'help',\n            'advice',\n            'struggling'\n        ],\n        response: 'Putting you through to one of our agents now'\n    },\n]\n```\n\n## Match User Speech to Intents\n\nWhen a user speaks, we need to determine if there was a match or not. Update `handleResponse()` with the following:\n\n```js\nfunction handleResponse(transcript) {\n    const match = intents.find(intent => intent.triggers.some(trigger => transcript.includes(trigger)))\n    console.log(match)\n}\n```\n\n`match` will either be the entire intent object for the matching item or `undefined`.\n\n![Browser console showing two undefined logs, and an object with one intent.](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match_bf4zgt.png)\n\n## Save Intent Matching\n\nJust above `handleResponse()`, create two new variables - `current` that will contain the current string of requests towards a single intent and `report` that will contain all failed intents and the final successful phrase.\n\n```js\nlet current = {}\nconst report = []\n```\n\nUpdate `handleResponse()` with logic if there was no match. Specifically, add the phrase to `current.retries`, creating it if it doesn't already exist:\n\n```js\nfunction handleResponse(transcript) {\n    const match = intents.find(intent => intent.triggers.some(trigger => transcript.includes(trigger)))\n\n    if(!match) {\n        console.log(`No match for ${transcript}`)\n        if(!current.retries) current.retries = [transcript]\n        else current.retries.push(transcript)\n    }\n}\n```\n\nIf there was a match, add it to the `current` object, and push it into the `report` array. Each object in `report` will contain failed attempts and the eventual successful trigger:\n\n```js\nif(!match) {\n    console.log(`No match for ${transcript}`)\n    if(!current.retries) current.retries = [transcript]\n    else current.retries.push(transcript)\n} else {\n    if(current.retries) {\n        current.intent = match.intent\n        report.push(current)\n    }\n    current = {}\n    console.log(match.response)\n}\n```\n\nTry it out. Refresh the browser and start speaking. Try some random phrases, and then one which will trigger a match - \"I need help\", \"What's my overdraft balance?\", and \"send some money\" should all work.\n\n![Browser console showing no matches for two phrases, and then a successful response.](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match-response_fpclpv.png)\n\n## Prompt the User to Speak\n\nTo wrap up, let's add spoken prompts and replies for this application using the [Web Speech API](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis).\n\nAt the bottom of the `<script>` tag, create a `speak()` function:\n\n```js\nconst synth = window.speechSynthesis\nfunction speak(text) {\n    if (synth.speaking) synth.cancel()\n    const utterThis = new SpeechSynthesisUtterance(text)\n    synth.speak(utterThis)\n}\n```\n\nAdd an initial prompt to speak. Under `mediaRecorder.start(250)` add:\n\n```js\nspeak('What can we help you with today?')\n```\n\nAt the bottom of the logic in the if statement, when there is no match, add a retry prompt:\n\n```js\nspeak('I didn\\'t understand that, sorry. Can you try again?')\n```\n\nWhen there is a match, respond to the user:\n\n```js\nspeak(match.response)\n```\n\nAt any point, the `report` variable contains an array of potential improvements you can make to your conversational AI intents.\n\n![Logging report after several interactions. Each object has an array of retry strings, and the correct intent.](https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/report_r4q0o1.png)\n\n## In Practice\n\nThis tutorial shows an overall approach for inferring the meaning of failed intent triggers, assuming that a user does not change their intent. To build this system out further, you should consider the common change in intent from interfacing with a bot to \"speak to a human.\"\n\nYou may also choose to do this after an interaction has ended rather than live, but you'll need to determine when a retry occurs.\n\nIf you have questions about anything in this post, we\u2019d love to hear from you. Head over to [our forum](https://github.com/orgs/deepgram/discussions/categories/q-a) and create a new discussion with your questions, or send us a tweet [@DeepgramAI](https://twitter.com/DeepgramAI)\n\n";
}
function compiledContent() {
  return '<p>One of the biggest challenges for conversational AI is anticipating all the ways in which a user may express a single phrase. Even with decent natural language processing, users often have frustrating experiences with \u2018retry rates\u2019  - the number of times a request is rejected before it succeeds, even more so in Interactive Voice Response (IVR) systems. However, data around failed attempts can be key in improving understanding of how people frame their requests.</p>\n<p>In this project, we\u2019ll cover an approach to gather failed failed IVR scripts and infer their meaning based on the successful attempt. This data can ultimately be used to improve your intent triggers and improve customer experience.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768360/blog/2022/09/conversational-ai-retry-report/diagram_kquxm1.png" alt="Diagram showing a back and forth conversation in text. The first two messages from the user are not understood but the third is. This generates a report that shows the two failed phrases next to the eventually-successful intent."></p>\n<p>We\u2019ll be using Deepgram with JavaScript and browser live transcription to demonstrate the concept, but it can easily be applied in other settings and programming languages.</p>\n<p>Before we start, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a> and keep it handy.</p>\n<p>Create an empty <code is:raw>index.html</code> file and open it in your code editor.</p>\n<h2 id="set-up-live-transcription">Set Up Live Transcription</h2>\n<p>Add the following code to <code is:raw>index.html</code> to set up live transcription in your browser. For a detailed explanation of how this works, check out our <a href="https://blog.deepgram.com/live-transcription-mic-browser/">blog post on browser live transcription</a>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">            navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;replace-with-your-deepgram-api-key&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> ])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">                        }</span></span>\n<span class="line"><span style="color: #C9D1D9">                    })</span></span>\n<span class="line"><span style="color: #C9D1D9">                    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data).channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"><span style="color: #C9D1D9">            })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Open the file in your browser. You should immediately be prompted for access to your microphone. Once granted, open up your browser console and start speaking to see your words logged.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/browser-live-transcription_t58fww.png" alt="Browser console showing several lines of transcripts"></p>\n<h2 id="set-up-intents">Set Up Intents</h2>\n<p>In reality, your conversational AI system will be a lot more complex and robust than what we\u2019ll build today, but they mostly have the same characteristics:</p>\n<ol>\n<li>A list of request options - \u2018intents\u2019</li>\n<li>Each option has a number of phrases or terms that can be used to trigger it - \u2018triggers\u2019</li>\n<li>An action to happen when an intent occurs - \u2018response\u2019</li>\n</ol>\n<p>Intents normally inform a machine learning model which will match phrases similar but not identical, and responses may execute some logic before continuing. For this project, we\u2019ll need a partial match on an intent trigger. The response will be speaking a fixed phrase back to the user.</p>\n<p>At the top of your <code is:raw>&lt;script&gt;</code> tag, add the following intents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">intents</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;how much money&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Your bank balance is over nine thousand&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;new_transaction&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transfer&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;send&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;set up payee&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Who would you like to send money to?&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    {</span></span>\n<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;help&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;help&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;advice&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;struggling&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Putting you through to one of our agents now&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<h2 id="match-user-speech-to-intents">Match User Speech to Intents</h2>\n<p>When a user speaks, we need to determine if there was a match or not. Update <code is:raw>handleResponse()</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">match</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> intents.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">intent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> intent.triggers.</span><span style="color: #D2A8FF">some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">trigger</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(trigger)))</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(match)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p><code is:raw>match</code> will either be the entire intent object for the matching item or <code is:raw>undefined</code>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match_bf4zgt.png" alt="Browser console showing two undefined logs, and an object with one intent."></p>\n<h2 id="save-intent-matching">Save Intent Matching</h2>\n<p>Just above <code is:raw>handleResponse()</code>, create two new variables - <code is:raw>current</code> that will contain the current string of requests towards a single intent and <code is:raw>report</code> that will contain all failed intents and the final successful phrase.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> current </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">report</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>\n<p>Update <code is:raw>handleResponse()</code> with logic if there was no match. Specifically, add the phrase to <code is:raw>current.retries</code>, creating it if it doesn\u2019t already exist:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">match</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> intents.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">intent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> intent.triggers.</span><span style="color: #D2A8FF">some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">trigger</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(trigger)))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">match) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`No match for ${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">current.retries) current.retries </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [transcript]</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> current.retries.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>If there was a match, add it to the <code is:raw>current</code> object, and push it into the <code is:raw>report</code> array. Each object in <code is:raw>report</code> will contain failed attempts and the eventual successful trigger:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">match) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`No match for ${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">current.retries) current.retries </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [transcript]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> current.retries.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">} </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(current.retries) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        current.intent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> match.intent</span></span>\n<span class="line"><span style="color: #C9D1D9">        report.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(current)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">    current </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(match.response)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try it out. Refresh the browser and start speaking. Try some random phrases, and then one which will trigger a match - \u201CI need help\u201D, \u201CWhat\u2019s my overdraft balance?\u201D, and \u201Csend some money\u201D should all work.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match-response_fpclpv.png" alt="Browser console showing no matches for two phrases, and then a successful response."></p>\n<h2 id="prompt-the-user-to-speak">Prompt the User to Speak</h2>\n<p>To wrap up, let\u2019s add spoken prompts and replies for this application using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis">Web Speech API</a>.</p>\n<p>At the bottom of the <code is:raw>&lt;script&gt;</code> tag, create a <code is:raw>speak()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">synth</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> window.speechSynthesis</span></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (synth.speaking) synth.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterThis</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">SpeechSynthesisUtterance</span><span style="color: #C9D1D9">(text)</span></span>\n<span class="line"><span style="color: #C9D1D9">    synth.</span><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(utterThis)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Add an initial prompt to speak. Under <code is:raw>mediaRecorder.start(250)</code> add:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;What can we help you with today?&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>At the bottom of the logic in the if statement, when there is no match, add a retry prompt:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;I didn</span><span style="color: #79C0FF">\\&#39;</span><span style="color: #A5D6FF">t understand that, sorry. Can you try again?&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>When there is a match, respond to the user:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(match.response)</span></span></code></pre>\n<p>At any point, the <code is:raw>report</code> variable contains an array of potential improvements you can make to your conversational AI intents.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/report_r4q0o1.png" alt="Logging report after several interactions. Each object has an array of retry strings, and the correct intent."></p>\n<h2 id="in-practice">In Practice</h2>\n<p>This tutorial shows an overall approach for inferring the meaning of failed intent triggers, assuming that a user does not change their intent. To build this system out further, you should consider the common change in intent from interfacing with a bot to \u201Cspeak to a human.\u201D</p>\n<p>You may also choose to do this after an interaction has ended rather than live, but you\u2019ll need to determine when a retry occurs.</p>\n<p>If you have questions about anything in this post, we\u2019d love to hear from you. Head over to <a href="https://github.com/orgs/deepgram/discussions/categories/q-a">our forum</a> and create a new discussion with your questions, or send us a tweet <a href="https://twitter.com/DeepgramAI">@DeepgramAI</a></p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/improve-ivr-prompts-with-custom-reporting/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>One of the biggest challenges for conversational AI is anticipating all the ways in which a user may express a single phrase. Even with decent natural language processing, users often have frustrating experiences with ‘retry rates’  - the number of times a request is rejected before it succeeds, even more so in Interactive Voice Response (IVR) systems. However, data around failed attempts can be key in improving understanding of how people frame their requests.</p>
<p>In this project, we’ll cover an approach to gather failed failed IVR scripts and infer their meaning based on the successful attempt. This data can ultimately be used to improve your intent triggers and improve customer experience.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768360/blog/2022/09/conversational-ai-retry-report/diagram_kquxm1.png" alt="Diagram showing a back and forth conversation in text. The first two messages from the user are not understood but the third is. This generates a report that shows the two failed phrases next to the eventually-successful intent."></p>
<p>We’ll be using Deepgram with JavaScript and browser live transcription to demonstrate the concept, but it can easily be applied in other settings and programming languages.</p>
<p>Before we start, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a> and keep it handy.</p>
<p>Create an empty <code>index.html</code> file and open it in your code editor.</p>
<h2 id="set-up-live-transcription">Set Up Live Transcription</h2>
<p>Add the following code to <code>index.html</code> to set up live transcription in your browser. For a detailed explanation of how this works, check out our <a href="https://blog.deepgram.com/live-transcription-mic-browser/">blog post on browser live transcription</a>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">            navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;replace-with-your-deepgram-api-key&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> ])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">                socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">                    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">                            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">                        }</span></span>
<span class="line"><span style="color: #C9D1D9">                    })</span></span>
<span class="line"><span style="color: #C9D1D9">                    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">                socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data).channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">                }</span></span>
<span class="line"><span style="color: #C9D1D9">            })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">                console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">            }</span></span>
<span class="line"><span style="color: #C9D1D9">        &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Open the file in your browser. You should immediately be prompted for access to your microphone. Once granted, open up your browser console and start speaking to see your words logged.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/browser-live-transcription_t58fww.png" alt="Browser console showing several lines of transcripts"></p>
<h2 id="set-up-intents">Set Up Intents</h2>
<p>In reality, your conversational AI system will be a lot more complex and robust than what we’ll build today, but they mostly have the same characteristics:</p>
<ol>
<li>A list of request options - ‘intents’</li>
<li>Each option has a number of phrases or terms that can be used to trigger it - ‘triggers’</li>
<li>An action to happen when an intent occurs - ‘response’</li>
</ol>
<p>Intents normally inform a machine learning model which will match phrases similar but not identical, and responses may execute some logic before continuing. For this project, we’ll need a partial match on an intent trigger. The response will be speaking a fixed phrase back to the user.</p>
<p>At the top of your <code>&lt;script&gt;</code> tag, add the following intents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">intents</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">    {</span></span>
<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;balance&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;how much money&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">        ],</span></span>
<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Your bank balance is over nine thousand&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">    {</span></span>
<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;new_transaction&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transfer&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;send&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;set up payee&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">        ],</span></span>
<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Who would you like to send money to?&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">    {</span></span>
<span class="line"><span style="color: #C9D1D9">        intent: </span><span style="color: #A5D6FF">&#39;help&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        triggers: [</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;help&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;advice&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;struggling&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">        ],</span></span>
<span class="line"><span style="color: #C9D1D9">        response: </span><span style="color: #A5D6FF">&#39;Putting you through to one of our agents now&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<h2 id="match-user-speech-to-intents">Match User Speech to Intents</h2>
<p>When a user speaks, we need to determine if there was a match or not. Update <code>handleResponse()</code> with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">match</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> intents.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">intent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> intent.triggers.</span><span style="color: #D2A8FF">some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">trigger</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(trigger)))</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(match)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><code>match</code> will either be the entire intent object for the matching item or <code>undefined</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match_bf4zgt.png" alt="Browser console showing two undefined logs, and an object with one intent."></p>
<h2 id="save-intent-matching">Save Intent Matching</h2>
<p>Just above <code>handleResponse()</code>, create two new variables - <code>current</code> that will contain the current string of requests towards a single intent and <code>report</code> that will contain all failed intents and the final successful phrase.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> current </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">report</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>
<p>Update <code>handleResponse()</code> with logic if there was no match. Specifically, add the phrase to <code>current.retries</code>, creating it if it doesn’t already exist:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">match</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> intents.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">intent</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> intent.triggers.</span><span style="color: #D2A8FF">some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">trigger</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(trigger)))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">match) {</span></span>
<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`No match for \${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">current.retries) current.retries </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [transcript]</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> current.retries.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>If there was a match, add it to the <code>current</code> object, and push it into the <code>report</code> array. Each object in <code>report</code> will contain failed attempts and the eventual successful trigger:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">match) {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`No match for \${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">current.retries) current.retries </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [transcript]</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> current.retries.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">} </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(current.retries) {</span></span>
<span class="line"><span style="color: #C9D1D9">        current.intent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> match.intent</span></span>
<span class="line"><span style="color: #C9D1D9">        report.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(current)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">    current </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(match.response)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Try it out. Refresh the browser and start speaking. Try some random phrases, and then one which will trigger a match - “I need help”, “What’s my overdraft balance?”, and “send some money” should all work.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/match-response_fpclpv.png" alt="Browser console showing no matches for two phrases, and then a successful response."></p>
<h2 id="prompt-the-user-to-speak">Prompt the User to Speak</h2>
<p>To wrap up, let’s add spoken prompts and replies for this application using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis">Web Speech API</a>.</p>
<p>At the bottom of the <code>&lt;script&gt;</code> tag, create a <code>speak()</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">synth</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> window.speechSynthesis</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (synth.speaking) synth.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterThis</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">SpeechSynthesisUtterance</span><span style="color: #C9D1D9">(text)</span></span>
<span class="line"><span style="color: #C9D1D9">    synth.</span><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(utterThis)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Add an initial prompt to speak. Under <code>mediaRecorder.start(250)</code> add:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;What can we help you with today?&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>At the bottom of the logic in the if statement, when there is no match, add a retry prompt:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;I didn</span><span style="color: #79C0FF">\\&#39;</span><span style="color: #A5D6FF">t understand that, sorry. Can you try again?&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>When there is a match, respond to the user:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">speak</span><span style="color: #C9D1D9">(match.response)</span></span></code></pre>
<p>At any point, the <code>report</code> variable contains an array of potential improvements you can make to your conversational AI intents.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663768361/blog/2022/09/conversational-ai-retry-report/report_r4q0o1.png" alt="Logging report after several interactions. Each object has an array of retry strings, and the correct intent."></p>
<h2 id="in-practice">In Practice</h2>
<p>This tutorial shows an overall approach for inferring the meaning of failed intent triggers, assuming that a user does not change their intent. To build this system out further, you should consider the common change in intent from interfacing with a bot to “speak to a human.”</p>
<p>You may also choose to do this after an interaction has ended rather than live, but you’ll need to determine when a retry occurs.</p>
<p>If you have questions about anything in this post, we’d love to hear from you. Head over to <a href="https://github.com/orgs/deepgram/discussions/categories/q-a">our forum</a> and create a new discussion with your questions, or send us a tweet <a href="https://twitter.com/DeepgramAI">@DeepgramAI</a></p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/improve-ivr-prompts-with-custom-reporting/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
