import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "create-a-flutter-application", "text": "Create a Flutter Application" }, { "depth": 2, "slug": "add-device-specific-permissions", "text": "Add Device Specific Permissions" }, { "depth": 3, "slug": "android", "text": "Android" }, { "depth": 3, "slug": "ios", "text": "iOS" }, { "depth": 2, "slug": "add-your-ui", "text": "Add Your UI" }, { "depth": 2, "slug": "handling-the-text-state", "text": "Handling the Text State" }, { "depth": 2, "slug": "install-the-dependencies", "text": "Install the Dependencies" }, { "depth": 2, "slug": "handle-audio-input", "text": "Handle Audio Input" }], "source": "\r\nIn this tutorial, you'll learn how to transcribe your message in real-time from your device's microphone using [Deepgram's Speech Recognition API](https://developers.deepgram.com/api-reference/#transcription-streaming). The audio will be converted into data and live-streamed over WebSocket to Deepgram's servers, and then once transcribed, returned in JSON format back through the WebSocket.\r\n\r\n## Before We Start\r\n\r\nYou will need a Deepgram API Key for this project - [get one here](https://console.deepgram.com/signup?jump=keys).\r\n\r\nNext, head over to Flutter's documentation with instructions on [installing Flutter](https://docs.flutter.dev/get-started/install) onto your machine.\r\n\r\n## Create a Flutter Application\r\n\r\nDepending on which IDE you're using to develop your Flutter application, you'll need to configure it a little to be able to create a new Flutter project. So follow the instructions for your IDE on the Flutter documentation page, [Set up an editor](https://docs.flutter.dev/get-started/editor).\r\n\r\n## Add Device Specific Permissions\r\n\r\n### Android\r\n\r\nFor your application to perform certain tasks on Android, you need to request permissions for these, such as accessing the internet or recording audio, so open the file `android/app/src/main/AndroidManifest.xml` and inside the `<manifest ...`, add the following lines:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.INTERNET\"/>\r\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>\r\n```\r\n\r\nWhile you're in the Android directory, you'll need to change what versions you're defining for the SDK and what version you're targeting to compile. This change meets the requirements of the third-party package you'll install later. Open the file: `android/app/src/build.gradle` and first fine the line: `compileSdkVersion flutter.compileSdkVersion`. Replace this line with `compileSdkVersion 32`.\r\n\r\nNext, find the following two lines:\r\n\r\n    minSdkVersion flutter.minSdkVersion\r\n    targetSdkVersion flutter.targetSdkVersion\r\n\r\nUpdate these to the versions shown in the example below:\r\n\r\n```\r\nminSdkVersion 24\r\ntargetSdkVersion 32\r\n```\r\n\r\n### iOS\r\n\r\nFor your application to access the microphone on your iPhone or iPad, you'll need to grant permission to this component. Inside your `Podfile`, locate the line: `flutter_additional_ios_build_settings(target)` and below this add the following:\r\n\r\n```\r\ntarget.build_configurations.each do |config|\r\n  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [\r\n    '$(inherited)',\r\n    # dart: PermissionGroup.microphone\r\n    'PERMISSION_MICROPHONE=1',\r\n  ]\r\nend\r\n```\r\n\r\nThen inside your `Info.plist`, within the `<dict></dict>` block, add the following two lines:\r\n\r\n```xml\r\n <key>NSMicrophoneUsageDescription</key>\r\n    <string>microphone</string>\r\n```\r\n\r\n## Add Your UI\r\n\r\nThe first thing you're going to need is a UI to be displayed on the mobile device; this UI will need three components:\r\n\r\n*   A `Text` area to display all transcribed wording,\r\n*   a \"start\" `OutlinedButton` to begin the transcription,\r\n*   and a \"stop\" `OutlinedButton` to stop live transcription.\r\n\r\nOpen the file `lib/main.dart`. In the `_MyHomePageState` class, replace the contents of this class with the `build` widget example shown below containing these three components:\r\n\r\n```dart\r\nWidget build(BuildContext context) {\r\n  return MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Live Transcription with Deepgram'),\r\n      ),\r\n      body: Column(\r\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n        children: [\r\n          Row(\r\n            children: <Widget>[\r\n              Expanded(\r\n                flex: 3,\r\n                child: SizedBox(\r\n                  width: 150,\r\n                  child: Text(\r\n                    \"This is where your text is output\",\r\n                    textAlign: TextAlign.center,\r\n                    overflow: TextOverflow.ellipsis,\r\n                    maxLines: 50,\r\n                    style: const TextStyle(\r\n                        fontWeight: FontWeight.bold, fontSize: 15),\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n          const SizedBox(height: 20),\r\n          Center(\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: <Widget>[\r\n                OutlinedButton(\r\n                  style: ButtonStyle(\r\n                    backgroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.blue),\r\n                    foregroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.white),\r\n                  ),\r\n                  onPressed: () {\r\n\r\n                  },\r\n                  child: const Text('Start', style: TextStyle(fontSize: 30)),\r\n                ),\r\n                const SizedBox(width: 5),\r\n                OutlinedButton(\r\n                  style: ButtonStyle(\r\n                    backgroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.red),\r\n                    foregroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.white),\r\n                  ),\r\n                  onPressed: () {\r\n\r\n                  },\r\n                  child: const Text('Stop', style: TextStyle(fontSize: 30)),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    ),\r\n  );\r\n}\r\n```\r\n\r\nYou can test your changes work by opening a new Terminal session and running `flutter run`. If you have connected your mobile device to your computer, your device will now have the application installed onto it, and you will see a screen similar to what's shown below:\r\n\r\n![A screenshot of a mobile phone running the demo Flutter app, a blue header with the text \"Live Transcription with Deepgram\", around a quarter of the way down the screen is the text \"This is where your text is output\" and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text \"Start\", the second is a red button with the white text \"Stop\"](https://res.cloudinary.com/deepgram/image/upload/v1649083047/blog/2022/04/flutter-speech-to-text-tutorial/initial-flutter-app-ui-with-start-stop-buttons.jpg)\r\n\r\n## Handling the Text State\r\n\r\nNext, your application needs to handle functionality to change the text displayed from a state instead. Find the line: `class _MyHomePageState extends State<MyHomePage> {` and just below this add the definition of the variable `myText` with the default text contained:\r\n\r\n```dart\r\n  String myText = \"To start transcribing your voice, press start.\";\r\n```\r\n\r\nIn your `_MyHomePageState` classes `Widget build()`, find the line: `\"This is where your text is output\"`. Replace this string with your new variable that will update whenever a response comes back from your transcription requests. So replace this line with `myText`.\r\n\r\nTwo new functions are now needed to manipulate this variable. The first one (`updateText`) updates the text with a predefined piece of text, while the second (`resetText`) resets the variable's value, clearing the text from the user's screen.\r\n\r\nWithin the `_MyHomePageState` class, add these two new functions:\r\n\r\n```dart\r\nvoid updateText(newText) {\r\n  setState(() {\r\n    myText = myText + ' ' + newText;\r\n  });\r\n}\r\n\r\nvoid resetText() {\r\n  setState(() {\r\n    myText = '';\r\n  });\r\n}\r\n```\r\n\r\nThese functions aren't used at the moment, to rectify this, find the `OutlinedButton` with the text `Start`, and populate the empty `onPressed: () {}` function, with the following:\r\n\r\n```dart\r\nonPressed: () {\r\n  updateText('');\r\n},\r\n```\r\n\r\n## Install the Dependencies\r\n\r\nThree third-party libraries are needed throughout this project, these libraries are:\r\n\r\n*   `sound_stream`, to handle the microphone input, convert it to data ready for streaming over a WebSocket.\r\n*   `web_socket_channel` provides functionality to make WebSocket connections which is how your application will communicate with Deepgram servers.\r\n*   `permission_handler` handles the mobile device's permissions, such as accessing the microphone.\r\n\r\nIn the root directory of your project, open the file that handles the importing of these libraries, `pubspec.yaml`. Now locate the `dependencies:` line and below this add the three libraries:\r\n\r\n```yaml\r\nweb_socket_channel: 2.1.0\r\nsound_stream: ^0.3.0\r\npermission_handler: ^9.2.0\r\n```\r\n\r\nOpen a new Terminal session and navigate to your project directory. Run the following command to install these two libraries:\r\n\r\n```bash\r\nflutter pub get\r\n```\r\n\r\n## Handle Audio Input\r\n\r\nAll of the configuration is now complete, it's time to handle the functionality to transcribe. Back in your `main.dart` file, at the top add the following libraries that you'll be using in this application (including your three newly installed third party libraries):\r\n\r\n```dart\r\nimport 'dart:async';\r\nimport 'dart:convert';\r\nimport 'package:sound_stream/sound_stream.dart';\r\nimport 'package:web_socket_channel/io.dart';\r\nimport 'package:permission_handler/permission_handler.dart';\r\n```\r\n\r\nBelow these imports, add two constants that you'll be calling in this application:\r\n\r\n```dart\r\nconst serverUrl =\r\n    'wss://api.deepgram.com/v1/listen?encoding=linear16&sample_rate=16000&language=en-GB';\r\nconst apiKey = '<your Deepgram API key>';\r\n```\r\n\r\nThese two constants are:\r\n\r\n*   `serverUrl` to define the URL the WebSocket will connect to (Deepgram's API server in this instance). For more information on the parameters available to you, please check the [API reference](https://developers.deepgram.com/api-reference/#transcription-streaming)\r\n*   `apiKey`, your Deepgram API key to authenticate when making the requests,\r\n\r\n> **Note:** the `apiKey` is hardcoded into this application solely for tutorial purposes. It is not good security practice to store API keys in mobile applications, so please be aware of this when building your mobile application.\r\n\r\nWith this tutorial, you'll need to request permission to access your microphone before attempting to transcribe your messaging. You'll do this when the app has loaded (it will only request permission once), add the following `initState()` function, which also calls `onLayoutDone` when the layout has loaded on the screen:\r\n\r\n```dart\r\n@override\r\nvoid initState() {\r\n  super.initState();\r\n\r\n  WidgetsBinding.instance?.addPostFrameCallback(onLayoutDone);\r\n}\r\n```\r\n\r\nNow below this `initState()` function add a new one called `onLayoutDone`, which is where your app will request permission:\r\n\r\n```dart\r\nvoid onLayoutDone(Duration timeStamp) async {\r\n  await Permission.microphone.request();\r\n  setState(() {});\r\n}\r\n```\r\n\r\nIt's now time to introduce the WebSocket and `sound_stream` to the project. First, you'll need to initiate the objects you'll be using that records sound and the web socket itself. Below your line `String myText ...` add the following:\r\n\r\n```dart\r\nfinal RecorderStream _recorder = RecorderStream();\r\n\r\nlate StreamSubscription _recorderStatus;\r\nlate StreamSubscription _audioStream;\r\n\r\nlate IOWebSocketChannel channel;\r\n```\r\n\r\nWhen the application closes, it's good practice to close any long running connections, whether that be with components in your device or over the Internet. So, create the `dispose()` function, and within this function cancel all audio handling, close the websocket channel:\r\n\r\n```dart\r\n@override\r\nvoid dispose() {\r\n  _recorderStatus.cancel();\r\n  _audioStream.cancel();\r\n  channel.sink.close();\r\n\r\n  super.dispose();\r\n}\r\n```\r\n\r\nNext, you need to initialize your web socket by providing your `serverUrl` and your `apiKey`. You'll also need to receive the audio stream from your microphone, convert it into binary data, and then send it over the WebSocket for Deepgram's API to transcribe. Because this is live transcription, the connection will remain open until you request it be closed. Add your new `_initStream()` function to your `_MyHomePageState` class.\r\n\r\n```dart\r\nFuture<void> _initStream() async {\r\n  channel = IOWebSocketChannel.connect(Uri.parse(serverUrl),\r\n      headers: {'Authorization': 'Token $apiKey'});\r\n\r\n  channel.stream.listen((event) async {\r\n    final parsedJson = jsonDecode(event);\r\n\r\n    updateText(parsedJson['channel']['alternatives'][0]['transcript']);\r\n  });\r\n\r\n  _audioStream = _recorder.audioStream.listen((data) {\r\n    channel.sink.add(data);\r\n  });\r\n\r\n  _recorderStatus = _recorder.status.listen((status) {\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n  });\r\n\r\n  await Future.wait([\r\n    _recorder.initialize(),\r\n  ]);\r\n}\r\n```\r\n\r\nThis functionality doesn't yet do anything; add a new `_startRecord` function, and within this, add the call to `_initStream()`. Calling this function tells `sound_stream` to switch on your microphone for streaming.\r\n\r\n```dart\r\nvoid _startRecord() async {\r\n  resetText();\r\n  _initStream();\r\n\r\n  await _recorder.start();\r\n\r\n  setState(() {});\r\n}\r\n```\r\n\r\nAlso add the following `_stopRecord()` function to stop the `_recorder`\r\n\r\n```dart\r\nvoid _stopRecord() async {\r\n  await _recorder.stop();\r\n\r\n  setState(() {});\r\n}\r\n```\r\n\r\nIn the first `OutlinedButton`, with the text `Start`, find the `onPressed: () {}` function and add the following to call your `_startRecord` function:\r\n\r\n```dart\r\nonPressed: () {\r\n  updateText('');\r\n\r\n  _startRecord();\r\n},\r\n```\r\n\r\nIn the next `OutlinedButton`, the text is `Stop`, find the `onPressed: () {}` function and add the following to call your `_stopRecord` function:\r\n\r\n```dart\r\nonPressed: () {\r\n  _stopRecord();\r\n},\r\n```\r\n\r\nYour application is ready to test once you have added functionality to start and stop the transcribing. If you go back to your Terminal and run `flutter run`, you'll see the application refresh on your mobile device. You may be prompted to give microphone access, so be sure to approve this. You can now start transcribing!\r\n\r\n![A screenshot of a mobile phone running the demo Flutter app, a blue header with the text \"Hello and welcome to your Deepgram live transcription demo\", around a quarter of the way down the screen is the text \"This is where your text is output\" and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text \"Start\", the second is a red button with the white text \"Stop\"](https://res.cloudinary.com/deepgram/image/upload/v1649083046/blog/2022/04/flutter-speech-to-text-tutorial/finished-flutter-app-ui-showing-transcription.jpg)\r\n\r\nThe final code for this tutorial is available on [GitHub](https://github.com/deepgram-devs/deepgram-live-transcription-flutter), and if you have any questions, please feel free to reach out to the Deepgram team on Twitter - [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ", "html": '<p>In this tutorial, you\u2019ll learn how to transcribe your message in real-time from your device\u2019s microphone using <a href="https://developers.deepgram.com/api-reference/#transcription-streaming">Deepgram\u2019s Speech Recognition API</a>. The audio will be converted into data and live-streamed over WebSocket to Deepgram\u2019s servers, and then once transcribed, returned in JSON format back through the WebSocket.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need a Deepgram API Key for this project - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Next, head over to Flutter\u2019s documentation with instructions on <a href="https://docs.flutter.dev/get-started/install">installing Flutter</a> onto your machine.</p>\n<h2 id="create-a-flutter-application">Create a Flutter Application</h2>\n<p>Depending on which IDE you\u2019re using to develop your Flutter application, you\u2019ll need to configure it a little to be able to create a new Flutter project. So follow the instructions for your IDE on the Flutter documentation page, <a href="https://docs.flutter.dev/get-started/editor">Set up an editor</a>.</p>\n<h2 id="add-device-specific-permissions">Add Device Specific Permissions</h2>\n<h3 id="android">Android</h3>\n<p>For your application to perform certain tasks on Android, you need to request permissions for these, such as accessing the internet or recording audio, so open the file <code is:raw>android/app/src/main/AndroidManifest.xml</code> and inside the <code is:raw>&lt;manifest ...</code>, add the following lines:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">uses-permission</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">android:name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;android.permission.INTERNET&quot;</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">uses-permission</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">android:name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;android.permission.RECORD_AUDIO&quot;</span><span style="color: #C9D1D9">/&gt;</span></span></code></pre>\n<p>While you\u2019re in the Android directory, you\u2019ll need to change what versions you\u2019re defining for the SDK and what version you\u2019re targeting to compile. This change meets the requirements of the third-party package you\u2019ll install later. Open the file: <code is:raw>android/app/src/build.gradle</code> and first fine the line: <code is:raw>compileSdkVersion flutter.compileSdkVersion</code>. Replace this line with <code is:raw>compileSdkVersion 32</code>.</p>\n<p>Next, find the following two lines:</p>\n<p>minSdkVersion flutter.minSdkVersion\r\ntargetSdkVersion flutter.targetSdkVersion</p>\n<p>Update these to the versions shown in the example below:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">minSdkVersion 24</span></span>\n<span class="line"><span style="color: #c9d1d9">targetSdkVersion 32</span></span></code></pre>\n<h3 id="ios">iOS</h3>\n<p>For your application to access the microphone on your iPhone or iPad, you\u2019ll need to grant permission to this component. Inside your <code is:raw>Podfile</code>, locate the line: <code is:raw>flutter_additional_ios_build_settings(target)</code> and below this add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">target.build_configurations.each do |config|</span></span>\n<span class="line"><span style="color: #c9d1d9">  config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] ||= [</span></span>\n<span class="line"><span style="color: #c9d1d9">    &#39;$(inherited)&#39;,</span></span>\n<span class="line"><span style="color: #c9d1d9">    # dart: PermissionGroup.microphone</span></span>\n<span class="line"><span style="color: #c9d1d9">    &#39;PERMISSION_MICROPHONE=1&#39;,</span></span>\n<span class="line"><span style="color: #c9d1d9">  ]</span></span>\n<span class="line"><span style="color: #c9d1d9">end</span></span></code></pre>\n<p>Then inside your <code is:raw>Info.plist</code>, within the <code is:raw>&lt;dict&gt;&lt;/dict&gt;</code> block, add the following two lines:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> &lt;</span><span style="color: #7EE787">key</span><span style="color: #C9D1D9">&gt;NSMicrophoneUsageDescription&lt;/</span><span style="color: #7EE787">key</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">string</span><span style="color: #C9D1D9">&gt;microphone&lt;/</span><span style="color: #7EE787">string</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="add-your-ui">Add Your UI</h2>\n<p>The first thing you\u2019re going to need is a UI to be displayed on the mobile device; this UI will need three components:</p>\n<ul>\n<li>A <code is:raw>Text</code> area to display all transcribed wording,</li>\n<li>a \u201Cstart\u201D <code is:raw>OutlinedButton</code> to begin the transcription,</li>\n<li>and a \u201Cstop\u201D <code is:raw>OutlinedButton</code> to stop live transcription.</li>\n</ul>\n<p>Open the file <code is:raw>lib/main.dart</code>. In the <code is:raw>_MyHomePageState</code> class, replace the contents of this class with the <code is:raw>build</code> widget example shown below containing these three components:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">Widget</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">build</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">BuildContext</span><span style="color: #C9D1D9"> context) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MaterialApp</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    home</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Scaffold</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">      appBar</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">AppBar</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        title</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Live Transcription with Deepgram&#39;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">      ),</span></span>\n<span class="line"><span style="color: #C9D1D9">      body</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Column</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        mainAxisAlignment</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MainAxisAlignment</span><span style="color: #C9D1D9">.spaceEvenly,</span></span>\n<span class="line"><span style="color: #C9D1D9">        children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">Row</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;</span><span style="color: #79C0FF">Widget</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">              </span><span style="color: #79C0FF">Expanded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                flex</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                  width</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">150</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;This is where your text is output&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    textAlign</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextAlign</span><span style="color: #C9D1D9">.center,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    overflow</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextOverflow</span><span style="color: #C9D1D9">.ellipsis,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    maxLines</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                        fontWeight</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FontWeight</span><span style="color: #C9D1D9">.bold, fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">15</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                ),</span></span>\n<span class="line"><span style="color: #C9D1D9">              ),</span></span>\n<span class="line"><span style="color: #C9D1D9">            ],</span></span>\n<span class="line"><span style="color: #C9D1D9">          ),</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(height</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">Center</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Row</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">              mainAxisAlignment</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MainAxisAlignment</span><span style="color: #C9D1D9">.center,</span></span>\n<span class="line"><span style="color: #C9D1D9">              children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;</span><span style="color: #79C0FF">Widget</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">OutlinedButton</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                  style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ButtonStyle</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                    backgroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.blue),</span></span>\n<span class="line"><span style="color: #C9D1D9">                    foregroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.white),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                  },</span></span>\n<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Start&#39;</span><span style="color: #C9D1D9">, style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)),</span></span>\n<span class="line"><span style="color: #C9D1D9">                ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(width</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">OutlinedButton</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                  style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ButtonStyle</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                    backgroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.red),</span></span>\n<span class="line"><span style="color: #C9D1D9">                    foregroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.white),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                  },</span></span>\n<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Stop&#39;</span><span style="color: #C9D1D9">, style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)),</span></span>\n<span class="line"><span style="color: #C9D1D9">                ),</span></span>\n<span class="line"><span style="color: #C9D1D9">              ],</span></span>\n<span class="line"><span style="color: #C9D1D9">            ),</span></span>\n<span class="line"><span style="color: #C9D1D9">          ),</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">      ),</span></span>\n<span class="line"><span style="color: #C9D1D9">    ),</span></span>\n<span class="line"><span style="color: #C9D1D9">  );</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>You can test your changes work by opening a new Terminal session and running <code is:raw>flutter run</code>. If you have connected your mobile device to your computer, your device will now have the application installed onto it, and you will see a screen similar to what\u2019s shown below:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649083047/blog/2022/04/flutter-speech-to-text-tutorial/initial-flutter-app-ui-with-start-stop-buttons.jpg" alt="A screenshot of a mobile phone running the demo Flutter app, a blue header with the text &#x22;Live Transcription with Deepgram&#x22;, around a quarter of the way down the screen is the text &#x22;This is where your text is output&#x22; and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text &#x22;Start&#x22;, the second is a red button with the white text &#x22;Stop&#x22;"></p>\n<h2 id="handling-the-text-state">Handling the Text State</h2>\n<p>Next, your application needs to handle functionality to change the text displayed from a state instead. Find the line: <code is:raw>class _MyHomePageState extends State&lt;MyHomePage&gt; {</code> and just below this add the definition of the variable <code is:raw>myText</code> with the default text contained:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">String</span><span style="color: #C9D1D9"> myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;To start transcribing your voice, press start.&quot;</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>In your <code is:raw>_MyHomePageState</code> classes <code is:raw>Widget build()</code>, find the line: <code is:raw>"This is where your text is output"</code>. Replace this string with your new variable that will update whenever a response comes back from your transcription requests. So replace this line with <code is:raw>myText</code>.</p>\n<p>Two new functions are now needed to manipulate this variable. The first one (<code is:raw>updateText</code>) updates the text with a predefined piece of text, while the second (<code is:raw>resetText</code>) resets the variable\u2019s value, clearing the text from the user\u2019s screen.</p>\n<p>Within the <code is:raw>_MyHomePageState</code> class, add these two new functions:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(newText) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> myText </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> newText;</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">resetText</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>These functions aren\u2019t used at the moment, to rectify this, find the <code is:raw>OutlinedButton</code> with the text <code is:raw>Start</code>, and populate the empty <code is:raw>onPressed: () {}</code> function, with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<h2 id="install-the-dependencies">Install the Dependencies</h2>\n<p>Three third-party libraries are needed throughout this project, these libraries are:</p>\n<ul>\n<li><code is:raw>sound_stream</code>, to handle the microphone input, convert it to data ready for streaming over a WebSocket.</li>\n<li><code is:raw>web_socket_channel</code> provides functionality to make WebSocket connections which is how your application will communicate with Deepgram servers.</li>\n<li><code is:raw>permission_handler</code> handles the mobile device\u2019s permissions, such as accessing the microphone.</li>\n</ul>\n<p>In the root directory of your project, open the file that handles the importing of these libraries, <code is:raw>pubspec.yaml</code>. Now locate the <code is:raw>dependencies:</code> line and below this add the three libraries:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">web_socket_channel</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2.1.0</span></span>\n<span class="line"><span style="color: #7EE787">sound_stream</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">^0.3.0</span></span>\n<span class="line"><span style="color: #7EE787">permission_handler</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">^9.2.0</span></span></code></pre>\n<p>Open a new Terminal session and navigate to your project directory. Run the following command to install these two libraries:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">flutter pub get</span></span></code></pre>\n<h2 id="handle-audio-input">Handle Audio Input</h2>\n<p>All of the configuration is now complete, it\u2019s time to handle the functionality to transcribe. Back in your <code is:raw>main.dart</code> file, at the top add the following libraries that you\u2019ll be using in this application (including your three newly installed third party libraries):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dart:async&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dart:convert&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:sound_stream/sound_stream.dart&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:web_socket_channel/io.dart&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:permission_handler/permission_handler.dart&#39;</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>Below these imports, add two constants that you\u2019ll be calling in this application:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> serverUrl </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?encoding=linear16&amp;sample_rate=16000&amp;language=en-GB&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&lt;your Deepgram API key&gt;&#39;</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>These two constants are:</p>\n<ul>\n<li><code is:raw>serverUrl</code> to define the URL the WebSocket will connect to (Deepgram\u2019s API server in this instance). For more information on the parameters available to you, please check the <a href="https://developers.deepgram.com/api-reference/#transcription-streaming">API reference</a></li>\n<li><code is:raw>apiKey</code>, your Deepgram API key to authenticate when making the requests,</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> the <code is:raw>apiKey</code> is hardcoded into this application solely for tutorial purposes. It is not good security practice to store API keys in mobile applications, so please be aware of this when building your mobile application.</p>\n</blockquote>\n<p>With this tutorial, you\u2019ll need to request permission to access your microphone before attempting to transcribe your messaging. You\u2019ll do this when the app has loaded (it will only request permission once), add the following <code is:raw>initState()</code> function, which also calls <code is:raw>onLayoutDone</code> when the layout has loaded on the screen:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@override</span></span>\n<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">initState</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">initState</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">WidgetsBinding</span><span style="color: #C9D1D9">.instance</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">addPostFrameCallback</span><span style="color: #C9D1D9">(onLayoutDone);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now below this <code is:raw>initState()</code> function add a new one called <code is:raw>onLayoutDone</code>, which is where your app will request permission:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">onLayoutDone</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">Duration</span><span style="color: #C9D1D9"> timeStamp) </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Permission</span><span style="color: #C9D1D9">.microphone.</span><span style="color: #D2A8FF">request</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>It\u2019s now time to introduce the WebSocket and <code is:raw>sound_stream</code> to the project. First, you\u2019ll need to initiate the objects you\u2019ll be using that records sound and the web socket itself. Below your line <code is:raw>String myText ...</code> add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">final</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">RecorderStream</span><span style="color: #C9D1D9"> _recorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">RecorderStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">StreamSubscription</span><span style="color: #C9D1D9"> _recorderStatus;</span></span>\n<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">StreamSubscription</span><span style="color: #C9D1D9"> _audioStream;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">IOWebSocketChannel</span><span style="color: #C9D1D9"> channel;</span></span></code></pre>\n<p>When the application closes, it\u2019s good practice to close any long running connections, whether that be with components in your device or over the Internet. So, create the <code is:raw>dispose()</code> function, and within this function cancel all audio handling, close the websocket channel:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@override</span></span>\n<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dispose</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  _recorderStatus.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  _audioStream.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  channel.sink.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">dispose</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Next, you need to initialize your web socket by providing your <code is:raw>serverUrl</code> and your <code is:raw>apiKey</code>. You\u2019ll also need to receive the audio stream from your microphone, convert it into binary data, and then send it over the WebSocket for Deepgram\u2019s API to transcribe. Because this is live transcription, the connection will remain open until you request it be closed. Add your new <code is:raw>_initStream()</code> function to your <code is:raw>_MyHomePageState</code> class.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">Future</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FF7B72">void</span><span style="color: #C9D1D9">&gt; </span><span style="color: #D2A8FF">_initStream</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  channel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">IOWebSocketChannel</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">Uri</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(serverUrl),</span></span>\n<span class="line"><span style="color: #C9D1D9">      headers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;Authorization&#39;</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Token $</span><span style="color: #79C0FF">apiKey</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  channel.stream.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((event) </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">final</span><span style="color: #C9D1D9"> parsedJson </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">jsonDecode</span><span style="color: #C9D1D9">(event);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(parsedJson[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]);</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  _audioStream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> _recorder.audioStream.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((data) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    channel.sink.</span><span style="color: #D2A8FF">add</span><span style="color: #C9D1D9">(data);</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  _recorderStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> _recorder.status.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((status) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (mounted) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Future</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">wait</span><span style="color: #C9D1D9">([</span></span>\n<span class="line"><span style="color: #C9D1D9">    _recorder.</span><span style="color: #D2A8FF">initialize</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  ]);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This functionality doesn\u2019t yet do anything; add a new <code is:raw>_startRecord</code> function, and within this, add the call to <code is:raw>_initStream()</code>. Calling this function tells <code is:raw>sound_stream</code> to switch on your microphone for streaming.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">_startRecord</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">resetText</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_initStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> _recorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Also add the following <code is:raw>_stopRecord()</code> function to stop the <code is:raw>_recorder</code></p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">_stopRecord</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> _recorder.</span><span style="color: #D2A8FF">stop</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>In the first <code is:raw>OutlinedButton</code>, with the text <code is:raw>Start</code>, find the <code is:raw>onPressed: () {}</code> function and add the following to call your <code is:raw>_startRecord</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_startRecord</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>In the next <code is:raw>OutlinedButton</code>, the text is <code is:raw>Stop</code>, find the <code is:raw>onPressed: () {}</code> function and add the following to call your <code is:raw>_stopRecord</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_stopRecord</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>Your application is ready to test once you have added functionality to start and stop the transcribing. If you go back to your Terminal and run <code is:raw>flutter run</code>, you\u2019ll see the application refresh on your mobile device. You may be prompted to give microphone access, so be sure to approve this. You can now start transcribing!</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649083046/blog/2022/04/flutter-speech-to-text-tutorial/finished-flutter-app-ui-showing-transcription.jpg" alt="A screenshot of a mobile phone running the demo Flutter app, a blue header with the text &#x22;Hello and welcome to your Deepgram live transcription demo&#x22;, around a quarter of the way down the screen is the text &#x22;This is where your text is output&#x22; and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text &#x22;Start&#x22;, the second is a red button with the white text &#x22;Stop&#x22;"></p>\n<p>The final code for this tutorial is available on <a href="https://github.com/deepgram-devs/deepgram-live-transcription-flutter">GitHub</a>, and if you have any questions, please feel free to reach out to the Deepgram team on Twitter - <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Converting Speech to Text in Flutter Applications", "description": "In this tutorial, learn how to use Deepgram's speech recognition API with Flutter and Dart to convert speech to text on iOS and Android devices.", "date": "2022-04-11T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1649265669/blog/2022/04/flutter-speech-to-text-tutorial/speech-to-text-in-flutter.jpg", "authors": ["greg-holmes"], "category": "tutorial", "tags": ["flutter", "dart"], "seo": { "title": "Converting Speech to Text in Flutter Applications", "description": "In this tutorial, learn how to use Deepgram's speech recognition API with Flutter and Dart to convert speech to text on iOS and Android devices." }, "shorturls": { "share": "https://dpgr.am/6c54a98", "twitter": "https://dpgr.am/fb5c142", "linkedin": "https://dpgr.am/2d18377", "reddit": "https://dpgr.am/05e6f5a", "facebook": "https://dpgr.am/d39b1ff" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454063/blog/flutter-speech-to-text-tutorial/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "create-a-flutter-application", "text": "Create a Flutter Application" }, { "depth": 2, "slug": "add-device-specific-permissions", "text": "Add Device Specific Permissions" }, { "depth": 3, "slug": "android", "text": "Android" }, { "depth": 3, "slug": "ios", "text": "iOS" }, { "depth": 2, "slug": "add-your-ui", "text": "Add Your UI" }, { "depth": 2, "slug": "handling-the-text-state", "text": "Handling the Text State" }, { "depth": 2, "slug": "install-the-dependencies", "text": "Install the Dependencies" }, { "depth": 2, "slug": "handle-audio-input", "text": "Handle Audio Input" }], "source": "\r\nIn this tutorial, you'll learn how to transcribe your message in real-time from your device's microphone using [Deepgram's Speech Recognition API](https://developers.deepgram.com/api-reference/#transcription-streaming). The audio will be converted into data and live-streamed over WebSocket to Deepgram's servers, and then once transcribed, returned in JSON format back through the WebSocket.\r\n\r\n## Before We Start\r\n\r\nYou will need a Deepgram API Key for this project - [get one here](https://console.deepgram.com/signup?jump=keys).\r\n\r\nNext, head over to Flutter's documentation with instructions on [installing Flutter](https://docs.flutter.dev/get-started/install) onto your machine.\r\n\r\n## Create a Flutter Application\r\n\r\nDepending on which IDE you're using to develop your Flutter application, you'll need to configure it a little to be able to create a new Flutter project. So follow the instructions for your IDE on the Flutter documentation page, [Set up an editor](https://docs.flutter.dev/get-started/editor).\r\n\r\n## Add Device Specific Permissions\r\n\r\n### Android\r\n\r\nFor your application to perform certain tasks on Android, you need to request permissions for these, such as accessing the internet or recording audio, so open the file `android/app/src/main/AndroidManifest.xml` and inside the `<manifest ...`, add the following lines:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.INTERNET\"/>\r\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>\r\n```\r\n\r\nWhile you're in the Android directory, you'll need to change what versions you're defining for the SDK and what version you're targeting to compile. This change meets the requirements of the third-party package you'll install later. Open the file: `android/app/src/build.gradle` and first fine the line: `compileSdkVersion flutter.compileSdkVersion`. Replace this line with `compileSdkVersion 32`.\r\n\r\nNext, find the following two lines:\r\n\r\n    minSdkVersion flutter.minSdkVersion\r\n    targetSdkVersion flutter.targetSdkVersion\r\n\r\nUpdate these to the versions shown in the example below:\r\n\r\n```\r\nminSdkVersion 24\r\ntargetSdkVersion 32\r\n```\r\n\r\n### iOS\r\n\r\nFor your application to access the microphone on your iPhone or iPad, you'll need to grant permission to this component. Inside your `Podfile`, locate the line: `flutter_additional_ios_build_settings(target)` and below this add the following:\r\n\r\n```\r\ntarget.build_configurations.each do |config|\r\n  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [\r\n    '$(inherited)',\r\n    # dart: PermissionGroup.microphone\r\n    'PERMISSION_MICROPHONE=1',\r\n  ]\r\nend\r\n```\r\n\r\nThen inside your `Info.plist`, within the `<dict></dict>` block, add the following two lines:\r\n\r\n```xml\r\n <key>NSMicrophoneUsageDescription</key>\r\n    <string>microphone</string>\r\n```\r\n\r\n## Add Your UI\r\n\r\nThe first thing you're going to need is a UI to be displayed on the mobile device; this UI will need three components:\r\n\r\n*   A `Text` area to display all transcribed wording,\r\n*   a \"start\" `OutlinedButton` to begin the transcription,\r\n*   and a \"stop\" `OutlinedButton` to stop live transcription.\r\n\r\nOpen the file `lib/main.dart`. In the `_MyHomePageState` class, replace the contents of this class with the `build` widget example shown below containing these three components:\r\n\r\n```dart\r\nWidget build(BuildContext context) {\r\n  return MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Live Transcription with Deepgram'),\r\n      ),\r\n      body: Column(\r\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n        children: [\r\n          Row(\r\n            children: <Widget>[\r\n              Expanded(\r\n                flex: 3,\r\n                child: SizedBox(\r\n                  width: 150,\r\n                  child: Text(\r\n                    \"This is where your text is output\",\r\n                    textAlign: TextAlign.center,\r\n                    overflow: TextOverflow.ellipsis,\r\n                    maxLines: 50,\r\n                    style: const TextStyle(\r\n                        fontWeight: FontWeight.bold, fontSize: 15),\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n          const SizedBox(height: 20),\r\n          Center(\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: <Widget>[\r\n                OutlinedButton(\r\n                  style: ButtonStyle(\r\n                    backgroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.blue),\r\n                    foregroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.white),\r\n                  ),\r\n                  onPressed: () {\r\n\r\n                  },\r\n                  child: const Text('Start', style: TextStyle(fontSize: 30)),\r\n                ),\r\n                const SizedBox(width: 5),\r\n                OutlinedButton(\r\n                  style: ButtonStyle(\r\n                    backgroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.red),\r\n                    foregroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.white),\r\n                  ),\r\n                  onPressed: () {\r\n\r\n                  },\r\n                  child: const Text('Stop', style: TextStyle(fontSize: 30)),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    ),\r\n  );\r\n}\r\n```\r\n\r\nYou can test your changes work by opening a new Terminal session and running `flutter run`. If you have connected your mobile device to your computer, your device will now have the application installed onto it, and you will see a screen similar to what's shown below:\r\n\r\n![A screenshot of a mobile phone running the demo Flutter app, a blue header with the text \"Live Transcription with Deepgram\", around a quarter of the way down the screen is the text \"This is where your text is output\" and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text \"Start\", the second is a red button with the white text \"Stop\"](https://res.cloudinary.com/deepgram/image/upload/v1649083047/blog/2022/04/flutter-speech-to-text-tutorial/initial-flutter-app-ui-with-start-stop-buttons.jpg)\r\n\r\n## Handling the Text State\r\n\r\nNext, your application needs to handle functionality to change the text displayed from a state instead. Find the line: `class _MyHomePageState extends State<MyHomePage> {` and just below this add the definition of the variable `myText` with the default text contained:\r\n\r\n```dart\r\n  String myText = \"To start transcribing your voice, press start.\";\r\n```\r\n\r\nIn your `_MyHomePageState` classes `Widget build()`, find the line: `\"This is where your text is output\"`. Replace this string with your new variable that will update whenever a response comes back from your transcription requests. So replace this line with `myText`.\r\n\r\nTwo new functions are now needed to manipulate this variable. The first one (`updateText`) updates the text with a predefined piece of text, while the second (`resetText`) resets the variable's value, clearing the text from the user's screen.\r\n\r\nWithin the `_MyHomePageState` class, add these two new functions:\r\n\r\n```dart\r\nvoid updateText(newText) {\r\n  setState(() {\r\n    myText = myText + ' ' + newText;\r\n  });\r\n}\r\n\r\nvoid resetText() {\r\n  setState(() {\r\n    myText = '';\r\n  });\r\n}\r\n```\r\n\r\nThese functions aren't used at the moment, to rectify this, find the `OutlinedButton` with the text `Start`, and populate the empty `onPressed: () {}` function, with the following:\r\n\r\n```dart\r\nonPressed: () {\r\n  updateText('');\r\n},\r\n```\r\n\r\n## Install the Dependencies\r\n\r\nThree third-party libraries are needed throughout this project, these libraries are:\r\n\r\n*   `sound_stream`, to handle the microphone input, convert it to data ready for streaming over a WebSocket.\r\n*   `web_socket_channel` provides functionality to make WebSocket connections which is how your application will communicate with Deepgram servers.\r\n*   `permission_handler` handles the mobile device's permissions, such as accessing the microphone.\r\n\r\nIn the root directory of your project, open the file that handles the importing of these libraries, `pubspec.yaml`. Now locate the `dependencies:` line and below this add the three libraries:\r\n\r\n```yaml\r\nweb_socket_channel: 2.1.0\r\nsound_stream: ^0.3.0\r\npermission_handler: ^9.2.0\r\n```\r\n\r\nOpen a new Terminal session and navigate to your project directory. Run the following command to install these two libraries:\r\n\r\n```bash\r\nflutter pub get\r\n```\r\n\r\n## Handle Audio Input\r\n\r\nAll of the configuration is now complete, it's time to handle the functionality to transcribe. Back in your `main.dart` file, at the top add the following libraries that you'll be using in this application (including your three newly installed third party libraries):\r\n\r\n```dart\r\nimport 'dart:async';\r\nimport 'dart:convert';\r\nimport 'package:sound_stream/sound_stream.dart';\r\nimport 'package:web_socket_channel/io.dart';\r\nimport 'package:permission_handler/permission_handler.dart';\r\n```\r\n\r\nBelow these imports, add two constants that you'll be calling in this application:\r\n\r\n```dart\r\nconst serverUrl =\r\n    'wss://api.deepgram.com/v1/listen?encoding=linear16&sample_rate=16000&language=en-GB';\r\nconst apiKey = '<your Deepgram API key>';\r\n```\r\n\r\nThese two constants are:\r\n\r\n*   `serverUrl` to define the URL the WebSocket will connect to (Deepgram's API server in this instance). For more information on the parameters available to you, please check the [API reference](https://developers.deepgram.com/api-reference/#transcription-streaming)\r\n*   `apiKey`, your Deepgram API key to authenticate when making the requests,\r\n\r\n> **Note:** the `apiKey` is hardcoded into this application solely for tutorial purposes. It is not good security practice to store API keys in mobile applications, so please be aware of this when building your mobile application.\r\n\r\nWith this tutorial, you'll need to request permission to access your microphone before attempting to transcribe your messaging. You'll do this when the app has loaded (it will only request permission once), add the following `initState()` function, which also calls `onLayoutDone` when the layout has loaded on the screen:\r\n\r\n```dart\r\n@override\r\nvoid initState() {\r\n  super.initState();\r\n\r\n  WidgetsBinding.instance?.addPostFrameCallback(onLayoutDone);\r\n}\r\n```\r\n\r\nNow below this `initState()` function add a new one called `onLayoutDone`, which is where your app will request permission:\r\n\r\n```dart\r\nvoid onLayoutDone(Duration timeStamp) async {\r\n  await Permission.microphone.request();\r\n  setState(() {});\r\n}\r\n```\r\n\r\nIt's now time to introduce the WebSocket and `sound_stream` to the project. First, you'll need to initiate the objects you'll be using that records sound and the web socket itself. Below your line `String myText ...` add the following:\r\n\r\n```dart\r\nfinal RecorderStream _recorder = RecorderStream();\r\n\r\nlate StreamSubscription _recorderStatus;\r\nlate StreamSubscription _audioStream;\r\n\r\nlate IOWebSocketChannel channel;\r\n```\r\n\r\nWhen the application closes, it's good practice to close any long running connections, whether that be with components in your device or over the Internet. So, create the `dispose()` function, and within this function cancel all audio handling, close the websocket channel:\r\n\r\n```dart\r\n@override\r\nvoid dispose() {\r\n  _recorderStatus.cancel();\r\n  _audioStream.cancel();\r\n  channel.sink.close();\r\n\r\n  super.dispose();\r\n}\r\n```\r\n\r\nNext, you need to initialize your web socket by providing your `serverUrl` and your `apiKey`. You'll also need to receive the audio stream from your microphone, convert it into binary data, and then send it over the WebSocket for Deepgram's API to transcribe. Because this is live transcription, the connection will remain open until you request it be closed. Add your new `_initStream()` function to your `_MyHomePageState` class.\r\n\r\n```dart\r\nFuture<void> _initStream() async {\r\n  channel = IOWebSocketChannel.connect(Uri.parse(serverUrl),\r\n      headers: {'Authorization': 'Token $apiKey'});\r\n\r\n  channel.stream.listen((event) async {\r\n    final parsedJson = jsonDecode(event);\r\n\r\n    updateText(parsedJson['channel']['alternatives'][0]['transcript']);\r\n  });\r\n\r\n  _audioStream = _recorder.audioStream.listen((data) {\r\n    channel.sink.add(data);\r\n  });\r\n\r\n  _recorderStatus = _recorder.status.listen((status) {\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n  });\r\n\r\n  await Future.wait([\r\n    _recorder.initialize(),\r\n  ]);\r\n}\r\n```\r\n\r\nThis functionality doesn't yet do anything; add a new `_startRecord` function, and within this, add the call to `_initStream()`. Calling this function tells `sound_stream` to switch on your microphone for streaming.\r\n\r\n```dart\r\nvoid _startRecord() async {\r\n  resetText();\r\n  _initStream();\r\n\r\n  await _recorder.start();\r\n\r\n  setState(() {});\r\n}\r\n```\r\n\r\nAlso add the following `_stopRecord()` function to stop the `_recorder`\r\n\r\n```dart\r\nvoid _stopRecord() async {\r\n  await _recorder.stop();\r\n\r\n  setState(() {});\r\n}\r\n```\r\n\r\nIn the first `OutlinedButton`, with the text `Start`, find the `onPressed: () {}` function and add the following to call your `_startRecord` function:\r\n\r\n```dart\r\nonPressed: () {\r\n  updateText('');\r\n\r\n  _startRecord();\r\n},\r\n```\r\n\r\nIn the next `OutlinedButton`, the text is `Stop`, find the `onPressed: () {}` function and add the following to call your `_stopRecord` function:\r\n\r\n```dart\r\nonPressed: () {\r\n  _stopRecord();\r\n},\r\n```\r\n\r\nYour application is ready to test once you have added functionality to start and stop the transcribing. If you go back to your Terminal and run `flutter run`, you'll see the application refresh on your mobile device. You may be prompted to give microphone access, so be sure to approve this. You can now start transcribing!\r\n\r\n![A screenshot of a mobile phone running the demo Flutter app, a blue header with the text \"Hello and welcome to your Deepgram live transcription demo\", around a quarter of the way down the screen is the text \"This is where your text is output\" and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text \"Start\", the second is a red button with the white text \"Stop\"](https://res.cloudinary.com/deepgram/image/upload/v1649083046/blog/2022/04/flutter-speech-to-text-tutorial/finished-flutter-app-ui-showing-transcription.jpg)\r\n\r\nThe final code for this tutorial is available on [GitHub](https://github.com/deepgram-devs/deepgram-live-transcription-flutter), and if you have any questions, please feel free to reach out to the Deepgram team on Twitter - [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ", "html": '<p>In this tutorial, you\u2019ll learn how to transcribe your message in real-time from your device\u2019s microphone using <a href="https://developers.deepgram.com/api-reference/#transcription-streaming">Deepgram\u2019s Speech Recognition API</a>. The audio will be converted into data and live-streamed over WebSocket to Deepgram\u2019s servers, and then once transcribed, returned in JSON format back through the WebSocket.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need a Deepgram API Key for this project - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Next, head over to Flutter\u2019s documentation with instructions on <a href="https://docs.flutter.dev/get-started/install">installing Flutter</a> onto your machine.</p>\n<h2 id="create-a-flutter-application">Create a Flutter Application</h2>\n<p>Depending on which IDE you\u2019re using to develop your Flutter application, you\u2019ll need to configure it a little to be able to create a new Flutter project. So follow the instructions for your IDE on the Flutter documentation page, <a href="https://docs.flutter.dev/get-started/editor">Set up an editor</a>.</p>\n<h2 id="add-device-specific-permissions">Add Device Specific Permissions</h2>\n<h3 id="android">Android</h3>\n<p>For your application to perform certain tasks on Android, you need to request permissions for these, such as accessing the internet or recording audio, so open the file <code is:raw>android/app/src/main/AndroidManifest.xml</code> and inside the <code is:raw>&lt;manifest ...</code>, add the following lines:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">uses-permission</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">android:name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;android.permission.INTERNET&quot;</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">uses-permission</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">android:name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;android.permission.RECORD_AUDIO&quot;</span><span style="color: #C9D1D9">/&gt;</span></span></code></pre>\n<p>While you\u2019re in the Android directory, you\u2019ll need to change what versions you\u2019re defining for the SDK and what version you\u2019re targeting to compile. This change meets the requirements of the third-party package you\u2019ll install later. Open the file: <code is:raw>android/app/src/build.gradle</code> and first fine the line: <code is:raw>compileSdkVersion flutter.compileSdkVersion</code>. Replace this line with <code is:raw>compileSdkVersion 32</code>.</p>\n<p>Next, find the following two lines:</p>\n<p>minSdkVersion flutter.minSdkVersion\r\ntargetSdkVersion flutter.targetSdkVersion</p>\n<p>Update these to the versions shown in the example below:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">minSdkVersion 24</span></span>\n<span class="line"><span style="color: #c9d1d9">targetSdkVersion 32</span></span></code></pre>\n<h3 id="ios">iOS</h3>\n<p>For your application to access the microphone on your iPhone or iPad, you\u2019ll need to grant permission to this component. Inside your <code is:raw>Podfile</code>, locate the line: <code is:raw>flutter_additional_ios_build_settings(target)</code> and below this add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">target.build_configurations.each do |config|</span></span>\n<span class="line"><span style="color: #c9d1d9">  config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] ||= [</span></span>\n<span class="line"><span style="color: #c9d1d9">    &#39;$(inherited)&#39;,</span></span>\n<span class="line"><span style="color: #c9d1d9">    # dart: PermissionGroup.microphone</span></span>\n<span class="line"><span style="color: #c9d1d9">    &#39;PERMISSION_MICROPHONE=1&#39;,</span></span>\n<span class="line"><span style="color: #c9d1d9">  ]</span></span>\n<span class="line"><span style="color: #c9d1d9">end</span></span></code></pre>\n<p>Then inside your <code is:raw>Info.plist</code>, within the <code is:raw>&lt;dict&gt;&lt;/dict&gt;</code> block, add the following two lines:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> &lt;</span><span style="color: #7EE787">key</span><span style="color: #C9D1D9">&gt;NSMicrophoneUsageDescription&lt;/</span><span style="color: #7EE787">key</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">string</span><span style="color: #C9D1D9">&gt;microphone&lt;/</span><span style="color: #7EE787">string</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="add-your-ui">Add Your UI</h2>\n<p>The first thing you\u2019re going to need is a UI to be displayed on the mobile device; this UI will need three components:</p>\n<ul>\n<li>A <code is:raw>Text</code> area to display all transcribed wording,</li>\n<li>a \u201Cstart\u201D <code is:raw>OutlinedButton</code> to begin the transcription,</li>\n<li>and a \u201Cstop\u201D <code is:raw>OutlinedButton</code> to stop live transcription.</li>\n</ul>\n<p>Open the file <code is:raw>lib/main.dart</code>. In the <code is:raw>_MyHomePageState</code> class, replace the contents of this class with the <code is:raw>build</code> widget example shown below containing these three components:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">Widget</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">build</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">BuildContext</span><span style="color: #C9D1D9"> context) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MaterialApp</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    home</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Scaffold</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">      appBar</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">AppBar</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        title</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Live Transcription with Deepgram&#39;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">      ),</span></span>\n<span class="line"><span style="color: #C9D1D9">      body</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Column</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        mainAxisAlignment</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MainAxisAlignment</span><span style="color: #C9D1D9">.spaceEvenly,</span></span>\n<span class="line"><span style="color: #C9D1D9">        children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">Row</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;</span><span style="color: #79C0FF">Widget</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">              </span><span style="color: #79C0FF">Expanded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                flex</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                  width</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">150</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;This is where your text is output&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    textAlign</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextAlign</span><span style="color: #C9D1D9">.center,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    overflow</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextOverflow</span><span style="color: #C9D1D9">.ellipsis,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    maxLines</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                        fontWeight</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FontWeight</span><span style="color: #C9D1D9">.bold, fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">15</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                ),</span></span>\n<span class="line"><span style="color: #C9D1D9">              ),</span></span>\n<span class="line"><span style="color: #C9D1D9">            ],</span></span>\n<span class="line"><span style="color: #C9D1D9">          ),</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(height</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">Center</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Row</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">              mainAxisAlignment</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MainAxisAlignment</span><span style="color: #C9D1D9">.center,</span></span>\n<span class="line"><span style="color: #C9D1D9">              children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;</span><span style="color: #79C0FF">Widget</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">OutlinedButton</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                  style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ButtonStyle</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                    backgroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.blue),</span></span>\n<span class="line"><span style="color: #C9D1D9">                    foregroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.white),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                  },</span></span>\n<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Start&#39;</span><span style="color: #C9D1D9">, style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)),</span></span>\n<span class="line"><span style="color: #C9D1D9">                ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(width</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">OutlinedButton</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                  style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ButtonStyle</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                    backgroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.red),</span></span>\n<span class="line"><span style="color: #C9D1D9">                    foregroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.white),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                  },</span></span>\n<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Stop&#39;</span><span style="color: #C9D1D9">, style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)),</span></span>\n<span class="line"><span style="color: #C9D1D9">                ),</span></span>\n<span class="line"><span style="color: #C9D1D9">              ],</span></span>\n<span class="line"><span style="color: #C9D1D9">            ),</span></span>\n<span class="line"><span style="color: #C9D1D9">          ),</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">      ),</span></span>\n<span class="line"><span style="color: #C9D1D9">    ),</span></span>\n<span class="line"><span style="color: #C9D1D9">  );</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>You can test your changes work by opening a new Terminal session and running <code is:raw>flutter run</code>. If you have connected your mobile device to your computer, your device will now have the application installed onto it, and you will see a screen similar to what\u2019s shown below:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649083047/blog/2022/04/flutter-speech-to-text-tutorial/initial-flutter-app-ui-with-start-stop-buttons.jpg" alt="A screenshot of a mobile phone running the demo Flutter app, a blue header with the text &#x22;Live Transcription with Deepgram&#x22;, around a quarter of the way down the screen is the text &#x22;This is where your text is output&#x22; and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text &#x22;Start&#x22;, the second is a red button with the white text &#x22;Stop&#x22;"></p>\n<h2 id="handling-the-text-state">Handling the Text State</h2>\n<p>Next, your application needs to handle functionality to change the text displayed from a state instead. Find the line: <code is:raw>class _MyHomePageState extends State&lt;MyHomePage&gt; {</code> and just below this add the definition of the variable <code is:raw>myText</code> with the default text contained:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">String</span><span style="color: #C9D1D9"> myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;To start transcribing your voice, press start.&quot;</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>In your <code is:raw>_MyHomePageState</code> classes <code is:raw>Widget build()</code>, find the line: <code is:raw>"This is where your text is output"</code>. Replace this string with your new variable that will update whenever a response comes back from your transcription requests. So replace this line with <code is:raw>myText</code>.</p>\n<p>Two new functions are now needed to manipulate this variable. The first one (<code is:raw>updateText</code>) updates the text with a predefined piece of text, while the second (<code is:raw>resetText</code>) resets the variable\u2019s value, clearing the text from the user\u2019s screen.</p>\n<p>Within the <code is:raw>_MyHomePageState</code> class, add these two new functions:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(newText) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> myText </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> newText;</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">resetText</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>These functions aren\u2019t used at the moment, to rectify this, find the <code is:raw>OutlinedButton</code> with the text <code is:raw>Start</code>, and populate the empty <code is:raw>onPressed: () {}</code> function, with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<h2 id="install-the-dependencies">Install the Dependencies</h2>\n<p>Three third-party libraries are needed throughout this project, these libraries are:</p>\n<ul>\n<li><code is:raw>sound_stream</code>, to handle the microphone input, convert it to data ready for streaming over a WebSocket.</li>\n<li><code is:raw>web_socket_channel</code> provides functionality to make WebSocket connections which is how your application will communicate with Deepgram servers.</li>\n<li><code is:raw>permission_handler</code> handles the mobile device\u2019s permissions, such as accessing the microphone.</li>\n</ul>\n<p>In the root directory of your project, open the file that handles the importing of these libraries, <code is:raw>pubspec.yaml</code>. Now locate the <code is:raw>dependencies:</code> line and below this add the three libraries:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">web_socket_channel</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2.1.0</span></span>\n<span class="line"><span style="color: #7EE787">sound_stream</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">^0.3.0</span></span>\n<span class="line"><span style="color: #7EE787">permission_handler</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">^9.2.0</span></span></code></pre>\n<p>Open a new Terminal session and navigate to your project directory. Run the following command to install these two libraries:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">flutter pub get</span></span></code></pre>\n<h2 id="handle-audio-input">Handle Audio Input</h2>\n<p>All of the configuration is now complete, it\u2019s time to handle the functionality to transcribe. Back in your <code is:raw>main.dart</code> file, at the top add the following libraries that you\u2019ll be using in this application (including your three newly installed third party libraries):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dart:async&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dart:convert&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:sound_stream/sound_stream.dart&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:web_socket_channel/io.dart&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:permission_handler/permission_handler.dart&#39;</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>Below these imports, add two constants that you\u2019ll be calling in this application:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> serverUrl </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?encoding=linear16&amp;sample_rate=16000&amp;language=en-GB&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&lt;your Deepgram API key&gt;&#39;</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>These two constants are:</p>\n<ul>\n<li><code is:raw>serverUrl</code> to define the URL the WebSocket will connect to (Deepgram\u2019s API server in this instance). For more information on the parameters available to you, please check the <a href="https://developers.deepgram.com/api-reference/#transcription-streaming">API reference</a></li>\n<li><code is:raw>apiKey</code>, your Deepgram API key to authenticate when making the requests,</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> the <code is:raw>apiKey</code> is hardcoded into this application solely for tutorial purposes. It is not good security practice to store API keys in mobile applications, so please be aware of this when building your mobile application.</p>\n</blockquote>\n<p>With this tutorial, you\u2019ll need to request permission to access your microphone before attempting to transcribe your messaging. You\u2019ll do this when the app has loaded (it will only request permission once), add the following <code is:raw>initState()</code> function, which also calls <code is:raw>onLayoutDone</code> when the layout has loaded on the screen:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@override</span></span>\n<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">initState</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">initState</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">WidgetsBinding</span><span style="color: #C9D1D9">.instance</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">addPostFrameCallback</span><span style="color: #C9D1D9">(onLayoutDone);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now below this <code is:raw>initState()</code> function add a new one called <code is:raw>onLayoutDone</code>, which is where your app will request permission:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">onLayoutDone</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">Duration</span><span style="color: #C9D1D9"> timeStamp) </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Permission</span><span style="color: #C9D1D9">.microphone.</span><span style="color: #D2A8FF">request</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>It\u2019s now time to introduce the WebSocket and <code is:raw>sound_stream</code> to the project. First, you\u2019ll need to initiate the objects you\u2019ll be using that records sound and the web socket itself. Below your line <code is:raw>String myText ...</code> add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">final</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">RecorderStream</span><span style="color: #C9D1D9"> _recorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">RecorderStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">StreamSubscription</span><span style="color: #C9D1D9"> _recorderStatus;</span></span>\n<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">StreamSubscription</span><span style="color: #C9D1D9"> _audioStream;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">IOWebSocketChannel</span><span style="color: #C9D1D9"> channel;</span></span></code></pre>\n<p>When the application closes, it\u2019s good practice to close any long running connections, whether that be with components in your device or over the Internet. So, create the <code is:raw>dispose()</code> function, and within this function cancel all audio handling, close the websocket channel:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@override</span></span>\n<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dispose</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  _recorderStatus.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  _audioStream.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  channel.sink.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">dispose</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Next, you need to initialize your web socket by providing your <code is:raw>serverUrl</code> and your <code is:raw>apiKey</code>. You\u2019ll also need to receive the audio stream from your microphone, convert it into binary data, and then send it over the WebSocket for Deepgram\u2019s API to transcribe. Because this is live transcription, the connection will remain open until you request it be closed. Add your new <code is:raw>_initStream()</code> function to your <code is:raw>_MyHomePageState</code> class.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">Future</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FF7B72">void</span><span style="color: #C9D1D9">&gt; </span><span style="color: #D2A8FF">_initStream</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  channel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">IOWebSocketChannel</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">Uri</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(serverUrl),</span></span>\n<span class="line"><span style="color: #C9D1D9">      headers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;Authorization&#39;</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Token $</span><span style="color: #79C0FF">apiKey</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  channel.stream.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((event) </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">final</span><span style="color: #C9D1D9"> parsedJson </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">jsonDecode</span><span style="color: #C9D1D9">(event);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(parsedJson[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]);</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  _audioStream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> _recorder.audioStream.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((data) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    channel.sink.</span><span style="color: #D2A8FF">add</span><span style="color: #C9D1D9">(data);</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  _recorderStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> _recorder.status.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((status) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (mounted) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Future</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">wait</span><span style="color: #C9D1D9">([</span></span>\n<span class="line"><span style="color: #C9D1D9">    _recorder.</span><span style="color: #D2A8FF">initialize</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  ]);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This functionality doesn\u2019t yet do anything; add a new <code is:raw>_startRecord</code> function, and within this, add the call to <code is:raw>_initStream()</code>. Calling this function tells <code is:raw>sound_stream</code> to switch on your microphone for streaming.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">_startRecord</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">resetText</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_initStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> _recorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Also add the following <code is:raw>_stopRecord()</code> function to stop the <code is:raw>_recorder</code></p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">_stopRecord</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> _recorder.</span><span style="color: #D2A8FF">stop</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>In the first <code is:raw>OutlinedButton</code>, with the text <code is:raw>Start</code>, find the <code is:raw>onPressed: () {}</code> function and add the following to call your <code is:raw>_startRecord</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_startRecord</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>In the next <code is:raw>OutlinedButton</code>, the text is <code is:raw>Stop</code>, find the <code is:raw>onPressed: () {}</code> function and add the following to call your <code is:raw>_stopRecord</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_stopRecord</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>Your application is ready to test once you have added functionality to start and stop the transcribing. If you go back to your Terminal and run <code is:raw>flutter run</code>, you\u2019ll see the application refresh on your mobile device. You may be prompted to give microphone access, so be sure to approve this. You can now start transcribing!</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649083046/blog/2022/04/flutter-speech-to-text-tutorial/finished-flutter-app-ui-showing-transcription.jpg" alt="A screenshot of a mobile phone running the demo Flutter app, a blue header with the text &#x22;Hello and welcome to your Deepgram live transcription demo&#x22;, around a quarter of the way down the screen is the text &#x22;This is where your text is output&#x22; and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text &#x22;Start&#x22;, the second is a red button with the white text &#x22;Stop&#x22;"></p>\n<p>The final code for this tutorial is available on <a href="https://github.com/deepgram-devs/deepgram-live-transcription-flutter">GitHub</a>, and if you have any questions, please feel free to reach out to the Deepgram team on Twitter - <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/flutter-speech-to-text-tutorial/index.md" };
function rawContent() {
  return "\r\nIn this tutorial, you'll learn how to transcribe your message in real-time from your device's microphone using [Deepgram's Speech Recognition API](https://developers.deepgram.com/api-reference/#transcription-streaming). The audio will be converted into data and live-streamed over WebSocket to Deepgram's servers, and then once transcribed, returned in JSON format back through the WebSocket.\r\n\r\n## Before We Start\r\n\r\nYou will need a Deepgram API Key for this project - [get one here](https://console.deepgram.com/signup?jump=keys).\r\n\r\nNext, head over to Flutter's documentation with instructions on [installing Flutter](https://docs.flutter.dev/get-started/install) onto your machine.\r\n\r\n## Create a Flutter Application\r\n\r\nDepending on which IDE you're using to develop your Flutter application, you'll need to configure it a little to be able to create a new Flutter project. So follow the instructions for your IDE on the Flutter documentation page, [Set up an editor](https://docs.flutter.dev/get-started/editor).\r\n\r\n## Add Device Specific Permissions\r\n\r\n### Android\r\n\r\nFor your application to perform certain tasks on Android, you need to request permissions for these, such as accessing the internet or recording audio, so open the file `android/app/src/main/AndroidManifest.xml` and inside the `<manifest ...`, add the following lines:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.INTERNET\"/>\r\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>\r\n```\r\n\r\nWhile you're in the Android directory, you'll need to change what versions you're defining for the SDK and what version you're targeting to compile. This change meets the requirements of the third-party package you'll install later. Open the file: `android/app/src/build.gradle` and first fine the line: `compileSdkVersion flutter.compileSdkVersion`. Replace this line with `compileSdkVersion 32`.\r\n\r\nNext, find the following two lines:\r\n\r\n    minSdkVersion flutter.minSdkVersion\r\n    targetSdkVersion flutter.targetSdkVersion\r\n\r\nUpdate these to the versions shown in the example below:\r\n\r\n```\r\nminSdkVersion 24\r\ntargetSdkVersion 32\r\n```\r\n\r\n### iOS\r\n\r\nFor your application to access the microphone on your iPhone or iPad, you'll need to grant permission to this component. Inside your `Podfile`, locate the line: `flutter_additional_ios_build_settings(target)` and below this add the following:\r\n\r\n```\r\ntarget.build_configurations.each do |config|\r\n  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [\r\n    '$(inherited)',\r\n    # dart: PermissionGroup.microphone\r\n    'PERMISSION_MICROPHONE=1',\r\n  ]\r\nend\r\n```\r\n\r\nThen inside your `Info.plist`, within the `<dict></dict>` block, add the following two lines:\r\n\r\n```xml\r\n <key>NSMicrophoneUsageDescription</key>\r\n    <string>microphone</string>\r\n```\r\n\r\n## Add Your UI\r\n\r\nThe first thing you're going to need is a UI to be displayed on the mobile device; this UI will need three components:\r\n\r\n*   A `Text` area to display all transcribed wording,\r\n*   a \"start\" `OutlinedButton` to begin the transcription,\r\n*   and a \"stop\" `OutlinedButton` to stop live transcription.\r\n\r\nOpen the file `lib/main.dart`. In the `_MyHomePageState` class, replace the contents of this class with the `build` widget example shown below containing these three components:\r\n\r\n```dart\r\nWidget build(BuildContext context) {\r\n  return MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Live Transcription with Deepgram'),\r\n      ),\r\n      body: Column(\r\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n        children: [\r\n          Row(\r\n            children: <Widget>[\r\n              Expanded(\r\n                flex: 3,\r\n                child: SizedBox(\r\n                  width: 150,\r\n                  child: Text(\r\n                    \"This is where your text is output\",\r\n                    textAlign: TextAlign.center,\r\n                    overflow: TextOverflow.ellipsis,\r\n                    maxLines: 50,\r\n                    style: const TextStyle(\r\n                        fontWeight: FontWeight.bold, fontSize: 15),\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n          const SizedBox(height: 20),\r\n          Center(\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: <Widget>[\r\n                OutlinedButton(\r\n                  style: ButtonStyle(\r\n                    backgroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.blue),\r\n                    foregroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.white),\r\n                  ),\r\n                  onPressed: () {\r\n\r\n                  },\r\n                  child: const Text('Start', style: TextStyle(fontSize: 30)),\r\n                ),\r\n                const SizedBox(width: 5),\r\n                OutlinedButton(\r\n                  style: ButtonStyle(\r\n                    backgroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.red),\r\n                    foregroundColor:\r\n                        MaterialStateProperty.all<Color>(Colors.white),\r\n                  ),\r\n                  onPressed: () {\r\n\r\n                  },\r\n                  child: const Text('Stop', style: TextStyle(fontSize: 30)),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    ),\r\n  );\r\n}\r\n```\r\n\r\nYou can test your changes work by opening a new Terminal session and running `flutter run`. If you have connected your mobile device to your computer, your device will now have the application installed onto it, and you will see a screen similar to what's shown below:\r\n\r\n![A screenshot of a mobile phone running the demo Flutter app, a blue header with the text \"Live Transcription with Deepgram\", around a quarter of the way down the screen is the text \"This is where your text is output\" and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text \"Start\", the second is a red button with the white text \"Stop\"](https://res.cloudinary.com/deepgram/image/upload/v1649083047/blog/2022/04/flutter-speech-to-text-tutorial/initial-flutter-app-ui-with-start-stop-buttons.jpg)\r\n\r\n## Handling the Text State\r\n\r\nNext, your application needs to handle functionality to change the text displayed from a state instead. Find the line: `class _MyHomePageState extends State<MyHomePage> {` and just below this add the definition of the variable `myText` with the default text contained:\r\n\r\n```dart\r\n  String myText = \"To start transcribing your voice, press start.\";\r\n```\r\n\r\nIn your `_MyHomePageState` classes `Widget build()`, find the line: `\"This is where your text is output\"`. Replace this string with your new variable that will update whenever a response comes back from your transcription requests. So replace this line with `myText`.\r\n\r\nTwo new functions are now needed to manipulate this variable. The first one (`updateText`) updates the text with a predefined piece of text, while the second (`resetText`) resets the variable's value, clearing the text from the user's screen.\r\n\r\nWithin the `_MyHomePageState` class, add these two new functions:\r\n\r\n```dart\r\nvoid updateText(newText) {\r\n  setState(() {\r\n    myText = myText + ' ' + newText;\r\n  });\r\n}\r\n\r\nvoid resetText() {\r\n  setState(() {\r\n    myText = '';\r\n  });\r\n}\r\n```\r\n\r\nThese functions aren't used at the moment, to rectify this, find the `OutlinedButton` with the text `Start`, and populate the empty `onPressed: () {}` function, with the following:\r\n\r\n```dart\r\nonPressed: () {\r\n  updateText('');\r\n},\r\n```\r\n\r\n## Install the Dependencies\r\n\r\nThree third-party libraries are needed throughout this project, these libraries are:\r\n\r\n*   `sound_stream`, to handle the microphone input, convert it to data ready for streaming over a WebSocket.\r\n*   `web_socket_channel` provides functionality to make WebSocket connections which is how your application will communicate with Deepgram servers.\r\n*   `permission_handler` handles the mobile device's permissions, such as accessing the microphone.\r\n\r\nIn the root directory of your project, open the file that handles the importing of these libraries, `pubspec.yaml`. Now locate the `dependencies:` line and below this add the three libraries:\r\n\r\n```yaml\r\nweb_socket_channel: 2.1.0\r\nsound_stream: ^0.3.0\r\npermission_handler: ^9.2.0\r\n```\r\n\r\nOpen a new Terminal session and navigate to your project directory. Run the following command to install these two libraries:\r\n\r\n```bash\r\nflutter pub get\r\n```\r\n\r\n## Handle Audio Input\r\n\r\nAll of the configuration is now complete, it's time to handle the functionality to transcribe. Back in your `main.dart` file, at the top add the following libraries that you'll be using in this application (including your three newly installed third party libraries):\r\n\r\n```dart\r\nimport 'dart:async';\r\nimport 'dart:convert';\r\nimport 'package:sound_stream/sound_stream.dart';\r\nimport 'package:web_socket_channel/io.dart';\r\nimport 'package:permission_handler/permission_handler.dart';\r\n```\r\n\r\nBelow these imports, add two constants that you'll be calling in this application:\r\n\r\n```dart\r\nconst serverUrl =\r\n    'wss://api.deepgram.com/v1/listen?encoding=linear16&sample_rate=16000&language=en-GB';\r\nconst apiKey = '<your Deepgram API key>';\r\n```\r\n\r\nThese two constants are:\r\n\r\n*   `serverUrl` to define the URL the WebSocket will connect to (Deepgram's API server in this instance). For more information on the parameters available to you, please check the [API reference](https://developers.deepgram.com/api-reference/#transcription-streaming)\r\n*   `apiKey`, your Deepgram API key to authenticate when making the requests,\r\n\r\n> **Note:** the `apiKey` is hardcoded into this application solely for tutorial purposes. It is not good security practice to store API keys in mobile applications, so please be aware of this when building your mobile application.\r\n\r\nWith this tutorial, you'll need to request permission to access your microphone before attempting to transcribe your messaging. You'll do this when the app has loaded (it will only request permission once), add the following `initState()` function, which also calls `onLayoutDone` when the layout has loaded on the screen:\r\n\r\n```dart\r\n@override\r\nvoid initState() {\r\n  super.initState();\r\n\r\n  WidgetsBinding.instance?.addPostFrameCallback(onLayoutDone);\r\n}\r\n```\r\n\r\nNow below this `initState()` function add a new one called `onLayoutDone`, which is where your app will request permission:\r\n\r\n```dart\r\nvoid onLayoutDone(Duration timeStamp) async {\r\n  await Permission.microphone.request();\r\n  setState(() {});\r\n}\r\n```\r\n\r\nIt's now time to introduce the WebSocket and `sound_stream` to the project. First, you'll need to initiate the objects you'll be using that records sound and the web socket itself. Below your line `String myText ...` add the following:\r\n\r\n```dart\r\nfinal RecorderStream _recorder = RecorderStream();\r\n\r\nlate StreamSubscription _recorderStatus;\r\nlate StreamSubscription _audioStream;\r\n\r\nlate IOWebSocketChannel channel;\r\n```\r\n\r\nWhen the application closes, it's good practice to close any long running connections, whether that be with components in your device or over the Internet. So, create the `dispose()` function, and within this function cancel all audio handling, close the websocket channel:\r\n\r\n```dart\r\n@override\r\nvoid dispose() {\r\n  _recorderStatus.cancel();\r\n  _audioStream.cancel();\r\n  channel.sink.close();\r\n\r\n  super.dispose();\r\n}\r\n```\r\n\r\nNext, you need to initialize your web socket by providing your `serverUrl` and your `apiKey`. You'll also need to receive the audio stream from your microphone, convert it into binary data, and then send it over the WebSocket for Deepgram's API to transcribe. Because this is live transcription, the connection will remain open until you request it be closed. Add your new `_initStream()` function to your `_MyHomePageState` class.\r\n\r\n```dart\r\nFuture<void> _initStream() async {\r\n  channel = IOWebSocketChannel.connect(Uri.parse(serverUrl),\r\n      headers: {'Authorization': 'Token $apiKey'});\r\n\r\n  channel.stream.listen((event) async {\r\n    final parsedJson = jsonDecode(event);\r\n\r\n    updateText(parsedJson['channel']['alternatives'][0]['transcript']);\r\n  });\r\n\r\n  _audioStream = _recorder.audioStream.listen((data) {\r\n    channel.sink.add(data);\r\n  });\r\n\r\n  _recorderStatus = _recorder.status.listen((status) {\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n  });\r\n\r\n  await Future.wait([\r\n    _recorder.initialize(),\r\n  ]);\r\n}\r\n```\r\n\r\nThis functionality doesn't yet do anything; add a new `_startRecord` function, and within this, add the call to `_initStream()`. Calling this function tells `sound_stream` to switch on your microphone for streaming.\r\n\r\n```dart\r\nvoid _startRecord() async {\r\n  resetText();\r\n  _initStream();\r\n\r\n  await _recorder.start();\r\n\r\n  setState(() {});\r\n}\r\n```\r\n\r\nAlso add the following `_stopRecord()` function to stop the `_recorder`\r\n\r\n```dart\r\nvoid _stopRecord() async {\r\n  await _recorder.stop();\r\n\r\n  setState(() {});\r\n}\r\n```\r\n\r\nIn the first `OutlinedButton`, with the text `Start`, find the `onPressed: () {}` function and add the following to call your `_startRecord` function:\r\n\r\n```dart\r\nonPressed: () {\r\n  updateText('');\r\n\r\n  _startRecord();\r\n},\r\n```\r\n\r\nIn the next `OutlinedButton`, the text is `Stop`, find the `onPressed: () {}` function and add the following to call your `_stopRecord` function:\r\n\r\n```dart\r\nonPressed: () {\r\n  _stopRecord();\r\n},\r\n```\r\n\r\nYour application is ready to test once you have added functionality to start and stop the transcribing. If you go back to your Terminal and run `flutter run`, you'll see the application refresh on your mobile device. You may be prompted to give microphone access, so be sure to approve this. You can now start transcribing!\r\n\r\n![A screenshot of a mobile phone running the demo Flutter app, a blue header with the text \"Hello and welcome to your Deepgram live transcription demo\", around a quarter of the way down the screen is the text \"This is where your text is output\" and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text \"Start\", the second is a red button with the white text \"Stop\"](https://res.cloudinary.com/deepgram/image/upload/v1649083046/blog/2022/04/flutter-speech-to-text-tutorial/finished-flutter-app-ui-showing-transcription.jpg)\r\n\r\nThe final code for this tutorial is available on [GitHub](https://github.com/deepgram-devs/deepgram-live-transcription-flutter), and if you have any questions, please feel free to reach out to the Deepgram team on Twitter - [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ";
}
function compiledContent() {
  return '<p>In this tutorial, you\u2019ll learn how to transcribe your message in real-time from your device\u2019s microphone using <a href="https://developers.deepgram.com/api-reference/#transcription-streaming">Deepgram\u2019s Speech Recognition API</a>. The audio will be converted into data and live-streamed over WebSocket to Deepgram\u2019s servers, and then once transcribed, returned in JSON format back through the WebSocket.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need a Deepgram API Key for this project - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Next, head over to Flutter\u2019s documentation with instructions on <a href="https://docs.flutter.dev/get-started/install">installing Flutter</a> onto your machine.</p>\n<h2 id="create-a-flutter-application">Create a Flutter Application</h2>\n<p>Depending on which IDE you\u2019re using to develop your Flutter application, you\u2019ll need to configure it a little to be able to create a new Flutter project. So follow the instructions for your IDE on the Flutter documentation page, <a href="https://docs.flutter.dev/get-started/editor">Set up an editor</a>.</p>\n<h2 id="add-device-specific-permissions">Add Device Specific Permissions</h2>\n<h3 id="android">Android</h3>\n<p>For your application to perform certain tasks on Android, you need to request permissions for these, such as accessing the internet or recording audio, so open the file <code is:raw>android/app/src/main/AndroidManifest.xml</code> and inside the <code is:raw>&lt;manifest ...</code>, add the following lines:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">uses-permission</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">android:name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;android.permission.INTERNET&quot;</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">uses-permission</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">android:name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;android.permission.RECORD_AUDIO&quot;</span><span style="color: #C9D1D9">/&gt;</span></span></code></pre>\n<p>While you\u2019re in the Android directory, you\u2019ll need to change what versions you\u2019re defining for the SDK and what version you\u2019re targeting to compile. This change meets the requirements of the third-party package you\u2019ll install later. Open the file: <code is:raw>android/app/src/build.gradle</code> and first fine the line: <code is:raw>compileSdkVersion flutter.compileSdkVersion</code>. Replace this line with <code is:raw>compileSdkVersion 32</code>.</p>\n<p>Next, find the following two lines:</p>\n<p>minSdkVersion flutter.minSdkVersion\r\ntargetSdkVersion flutter.targetSdkVersion</p>\n<p>Update these to the versions shown in the example below:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">minSdkVersion 24</span></span>\n<span class="line"><span style="color: #c9d1d9">targetSdkVersion 32</span></span></code></pre>\n<h3 id="ios">iOS</h3>\n<p>For your application to access the microphone on your iPhone or iPad, you\u2019ll need to grant permission to this component. Inside your <code is:raw>Podfile</code>, locate the line: <code is:raw>flutter_additional_ios_build_settings(target)</code> and below this add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">target.build_configurations.each do |config|</span></span>\n<span class="line"><span style="color: #c9d1d9">  config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] ||= [</span></span>\n<span class="line"><span style="color: #c9d1d9">    &#39;$(inherited)&#39;,</span></span>\n<span class="line"><span style="color: #c9d1d9">    # dart: PermissionGroup.microphone</span></span>\n<span class="line"><span style="color: #c9d1d9">    &#39;PERMISSION_MICROPHONE=1&#39;,</span></span>\n<span class="line"><span style="color: #c9d1d9">  ]</span></span>\n<span class="line"><span style="color: #c9d1d9">end</span></span></code></pre>\n<p>Then inside your <code is:raw>Info.plist</code>, within the <code is:raw>&lt;dict&gt;&lt;/dict&gt;</code> block, add the following two lines:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> &lt;</span><span style="color: #7EE787">key</span><span style="color: #C9D1D9">&gt;NSMicrophoneUsageDescription&lt;/</span><span style="color: #7EE787">key</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">string</span><span style="color: #C9D1D9">&gt;microphone&lt;/</span><span style="color: #7EE787">string</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="add-your-ui">Add Your UI</h2>\n<p>The first thing you\u2019re going to need is a UI to be displayed on the mobile device; this UI will need three components:</p>\n<ul>\n<li>A <code is:raw>Text</code> area to display all transcribed wording,</li>\n<li>a \u201Cstart\u201D <code is:raw>OutlinedButton</code> to begin the transcription,</li>\n<li>and a \u201Cstop\u201D <code is:raw>OutlinedButton</code> to stop live transcription.</li>\n</ul>\n<p>Open the file <code is:raw>lib/main.dart</code>. In the <code is:raw>_MyHomePageState</code> class, replace the contents of this class with the <code is:raw>build</code> widget example shown below containing these three components:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">Widget</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">build</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">BuildContext</span><span style="color: #C9D1D9"> context) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MaterialApp</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    home</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Scaffold</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">      appBar</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">AppBar</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        title</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Live Transcription with Deepgram&#39;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">      ),</span></span>\n<span class="line"><span style="color: #C9D1D9">      body</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Column</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        mainAxisAlignment</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MainAxisAlignment</span><span style="color: #C9D1D9">.spaceEvenly,</span></span>\n<span class="line"><span style="color: #C9D1D9">        children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">Row</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;</span><span style="color: #79C0FF">Widget</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">              </span><span style="color: #79C0FF">Expanded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                flex</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                  width</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">150</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;This is where your text is output&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    textAlign</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextAlign</span><span style="color: #C9D1D9">.center,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    overflow</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextOverflow</span><span style="color: #C9D1D9">.ellipsis,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    maxLines</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                        fontWeight</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FontWeight</span><span style="color: #C9D1D9">.bold, fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">15</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                ),</span></span>\n<span class="line"><span style="color: #C9D1D9">              ),</span></span>\n<span class="line"><span style="color: #C9D1D9">            ],</span></span>\n<span class="line"><span style="color: #C9D1D9">          ),</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(height</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">Center</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Row</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">              mainAxisAlignment</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MainAxisAlignment</span><span style="color: #C9D1D9">.center,</span></span>\n<span class="line"><span style="color: #C9D1D9">              children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;</span><span style="color: #79C0FF">Widget</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">OutlinedButton</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                  style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ButtonStyle</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                    backgroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.blue),</span></span>\n<span class="line"><span style="color: #C9D1D9">                    foregroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.white),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                  },</span></span>\n<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Start&#39;</span><span style="color: #C9D1D9">, style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)),</span></span>\n<span class="line"><span style="color: #C9D1D9">                ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(width</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">OutlinedButton</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                  style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ButtonStyle</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">                    backgroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.red),</span></span>\n<span class="line"><span style="color: #C9D1D9">                    foregroundColor</span><span style="color: #FF7B72">:</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.white),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  ),</span></span>\n<span class="line"><span style="color: #C9D1D9">                  onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">                  },</span></span>\n<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Stop&#39;</span><span style="color: #C9D1D9">, style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)),</span></span>\n<span class="line"><span style="color: #C9D1D9">                ),</span></span>\n<span class="line"><span style="color: #C9D1D9">              ],</span></span>\n<span class="line"><span style="color: #C9D1D9">            ),</span></span>\n<span class="line"><span style="color: #C9D1D9">          ),</span></span>\n<span class="line"><span style="color: #C9D1D9">        ],</span></span>\n<span class="line"><span style="color: #C9D1D9">      ),</span></span>\n<span class="line"><span style="color: #C9D1D9">    ),</span></span>\n<span class="line"><span style="color: #C9D1D9">  );</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>You can test your changes work by opening a new Terminal session and running <code is:raw>flutter run</code>. If you have connected your mobile device to your computer, your device will now have the application installed onto it, and you will see a screen similar to what\u2019s shown below:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649083047/blog/2022/04/flutter-speech-to-text-tutorial/initial-flutter-app-ui-with-start-stop-buttons.jpg" alt="A screenshot of a mobile phone running the demo Flutter app, a blue header with the text &#x22;Live Transcription with Deepgram&#x22;, around a quarter of the way down the screen is the text &#x22;This is where your text is output&#x22; and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text &#x22;Start&#x22;, the second is a red button with the white text &#x22;Stop&#x22;"></p>\n<h2 id="handling-the-text-state">Handling the Text State</h2>\n<p>Next, your application needs to handle functionality to change the text displayed from a state instead. Find the line: <code is:raw>class _MyHomePageState extends State&lt;MyHomePage&gt; {</code> and just below this add the definition of the variable <code is:raw>myText</code> with the default text contained:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">String</span><span style="color: #C9D1D9"> myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;To start transcribing your voice, press start.&quot;</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>In your <code is:raw>_MyHomePageState</code> classes <code is:raw>Widget build()</code>, find the line: <code is:raw>"This is where your text is output"</code>. Replace this string with your new variable that will update whenever a response comes back from your transcription requests. So replace this line with <code is:raw>myText</code>.</p>\n<p>Two new functions are now needed to manipulate this variable. The first one (<code is:raw>updateText</code>) updates the text with a predefined piece of text, while the second (<code is:raw>resetText</code>) resets the variable\u2019s value, clearing the text from the user\u2019s screen.</p>\n<p>Within the <code is:raw>_MyHomePageState</code> class, add these two new functions:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(newText) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> myText </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> newText;</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">resetText</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>These functions aren\u2019t used at the moment, to rectify this, find the <code is:raw>OutlinedButton</code> with the text <code is:raw>Start</code>, and populate the empty <code is:raw>onPressed: () {}</code> function, with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<h2 id="install-the-dependencies">Install the Dependencies</h2>\n<p>Three third-party libraries are needed throughout this project, these libraries are:</p>\n<ul>\n<li><code is:raw>sound_stream</code>, to handle the microphone input, convert it to data ready for streaming over a WebSocket.</li>\n<li><code is:raw>web_socket_channel</code> provides functionality to make WebSocket connections which is how your application will communicate with Deepgram servers.</li>\n<li><code is:raw>permission_handler</code> handles the mobile device\u2019s permissions, such as accessing the microphone.</li>\n</ul>\n<p>In the root directory of your project, open the file that handles the importing of these libraries, <code is:raw>pubspec.yaml</code>. Now locate the <code is:raw>dependencies:</code> line and below this add the three libraries:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">web_socket_channel</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2.1.0</span></span>\n<span class="line"><span style="color: #7EE787">sound_stream</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">^0.3.0</span></span>\n<span class="line"><span style="color: #7EE787">permission_handler</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">^9.2.0</span></span></code></pre>\n<p>Open a new Terminal session and navigate to your project directory. Run the following command to install these two libraries:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">flutter pub get</span></span></code></pre>\n<h2 id="handle-audio-input">Handle Audio Input</h2>\n<p>All of the configuration is now complete, it\u2019s time to handle the functionality to transcribe. Back in your <code is:raw>main.dart</code> file, at the top add the following libraries that you\u2019ll be using in this application (including your three newly installed third party libraries):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dart:async&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dart:convert&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:sound_stream/sound_stream.dart&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:web_socket_channel/io.dart&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:permission_handler/permission_handler.dart&#39;</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>Below these imports, add two constants that you\u2019ll be calling in this application:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> serverUrl </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?encoding=linear16&amp;sample_rate=16000&amp;language=en-GB&#39;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&lt;your Deepgram API key&gt;&#39;</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>These two constants are:</p>\n<ul>\n<li><code is:raw>serverUrl</code> to define the URL the WebSocket will connect to (Deepgram\u2019s API server in this instance). For more information on the parameters available to you, please check the <a href="https://developers.deepgram.com/api-reference/#transcription-streaming">API reference</a></li>\n<li><code is:raw>apiKey</code>, your Deepgram API key to authenticate when making the requests,</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> the <code is:raw>apiKey</code> is hardcoded into this application solely for tutorial purposes. It is not good security practice to store API keys in mobile applications, so please be aware of this when building your mobile application.</p>\n</blockquote>\n<p>With this tutorial, you\u2019ll need to request permission to access your microphone before attempting to transcribe your messaging. You\u2019ll do this when the app has loaded (it will only request permission once), add the following <code is:raw>initState()</code> function, which also calls <code is:raw>onLayoutDone</code> when the layout has loaded on the screen:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@override</span></span>\n<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">initState</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">initState</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">WidgetsBinding</span><span style="color: #C9D1D9">.instance</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">addPostFrameCallback</span><span style="color: #C9D1D9">(onLayoutDone);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now below this <code is:raw>initState()</code> function add a new one called <code is:raw>onLayoutDone</code>, which is where your app will request permission:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">onLayoutDone</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">Duration</span><span style="color: #C9D1D9"> timeStamp) </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Permission</span><span style="color: #C9D1D9">.microphone.</span><span style="color: #D2A8FF">request</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>It\u2019s now time to introduce the WebSocket and <code is:raw>sound_stream</code> to the project. First, you\u2019ll need to initiate the objects you\u2019ll be using that records sound and the web socket itself. Below your line <code is:raw>String myText ...</code> add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">final</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">RecorderStream</span><span style="color: #C9D1D9"> _recorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">RecorderStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">StreamSubscription</span><span style="color: #C9D1D9"> _recorderStatus;</span></span>\n<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">StreamSubscription</span><span style="color: #C9D1D9"> _audioStream;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">IOWebSocketChannel</span><span style="color: #C9D1D9"> channel;</span></span></code></pre>\n<p>When the application closes, it\u2019s good practice to close any long running connections, whether that be with components in your device or over the Internet. So, create the <code is:raw>dispose()</code> function, and within this function cancel all audio handling, close the websocket channel:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@override</span></span>\n<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dispose</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  _recorderStatus.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  _audioStream.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  channel.sink.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">dispose</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Next, you need to initialize your web socket by providing your <code is:raw>serverUrl</code> and your <code is:raw>apiKey</code>. You\u2019ll also need to receive the audio stream from your microphone, convert it into binary data, and then send it over the WebSocket for Deepgram\u2019s API to transcribe. Because this is live transcription, the connection will remain open until you request it be closed. Add your new <code is:raw>_initStream()</code> function to your <code is:raw>_MyHomePageState</code> class.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">Future</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FF7B72">void</span><span style="color: #C9D1D9">&gt; </span><span style="color: #D2A8FF">_initStream</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  channel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">IOWebSocketChannel</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">Uri</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(serverUrl),</span></span>\n<span class="line"><span style="color: #C9D1D9">      headers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;Authorization&#39;</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Token $</span><span style="color: #79C0FF">apiKey</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  channel.stream.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((event) </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">final</span><span style="color: #C9D1D9"> parsedJson </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">jsonDecode</span><span style="color: #C9D1D9">(event);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(parsedJson[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]);</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  _audioStream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> _recorder.audioStream.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((data) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    channel.sink.</span><span style="color: #D2A8FF">add</span><span style="color: #C9D1D9">(data);</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  _recorderStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> _recorder.status.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((status) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (mounted) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Future</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">wait</span><span style="color: #C9D1D9">([</span></span>\n<span class="line"><span style="color: #C9D1D9">    _recorder.</span><span style="color: #D2A8FF">initialize</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  ]);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This functionality doesn\u2019t yet do anything; add a new <code is:raw>_startRecord</code> function, and within this, add the call to <code is:raw>_initStream()</code>. Calling this function tells <code is:raw>sound_stream</code> to switch on your microphone for streaming.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">_startRecord</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">resetText</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_initStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> _recorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Also add the following <code is:raw>_stopRecord()</code> function to stop the <code is:raw>_recorder</code></p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">_stopRecord</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> _recorder.</span><span style="color: #D2A8FF">stop</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>In the first <code is:raw>OutlinedButton</code>, with the text <code is:raw>Start</code>, find the <code is:raw>onPressed: () {}</code> function and add the following to call your <code is:raw>_startRecord</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_startRecord</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>In the next <code is:raw>OutlinedButton</code>, the text is <code is:raw>Stop</code>, find the <code is:raw>onPressed: () {}</code> function and add the following to call your <code is:raw>_stopRecord</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_stopRecord</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>Your application is ready to test once you have added functionality to start and stop the transcribing. If you go back to your Terminal and run <code is:raw>flutter run</code>, you\u2019ll see the application refresh on your mobile device. You may be prompted to give microphone access, so be sure to approve this. You can now start transcribing!</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649083046/blog/2022/04/flutter-speech-to-text-tutorial/finished-flutter-app-ui-showing-transcription.jpg" alt="A screenshot of a mobile phone running the demo Flutter app, a blue header with the text &#x22;Hello and welcome to your Deepgram live transcription demo&#x22;, around a quarter of the way down the screen is the text &#x22;This is where your text is output&#x22; and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text &#x22;Start&#x22;, the second is a red button with the white text &#x22;Stop&#x22;"></p>\n<p>The final code for this tutorial is available on <a href="https://github.com/deepgram-devs/deepgram-live-transcription-flutter">GitHub</a>, and if you have any questions, please feel free to reach out to the Deepgram team on Twitter - <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/flutter-speech-to-text-tutorial/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>In this tutorial, you’ll learn how to transcribe your message in real-time from your device’s microphone using <a href="https://developers.deepgram.com/api-reference/#transcription-streaming">Deepgram’s Speech Recognition API</a>. The audio will be converted into data and live-streamed over WebSocket to Deepgram’s servers, and then once transcribed, returned in JSON format back through the WebSocket.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need a Deepgram API Key for this project - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>
<p>Next, head over to Flutter’s documentation with instructions on <a href="https://docs.flutter.dev/get-started/install">installing Flutter</a> onto your machine.</p>
<h2 id="create-a-flutter-application">Create a Flutter Application</h2>
<p>Depending on which IDE you’re using to develop your Flutter application, you’ll need to configure it a little to be able to create a new Flutter project. So follow the instructions for your IDE on the Flutter documentation page, <a href="https://docs.flutter.dev/get-started/editor">Set up an editor</a>.</p>
<h2 id="add-device-specific-permissions">Add Device Specific Permissions</h2>
<h3 id="android">Android</h3>
<p>For your application to perform certain tasks on Android, you need to request permissions for these, such as accessing the internet or recording audio, so open the file <code>android/app/src/main/AndroidManifest.xml</code> and inside the <code>&lt;manifest ...</code>, add the following lines:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">uses-permission</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">android:name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;android.permission.INTERNET&quot;</span><span style="color: #C9D1D9">/&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">uses-permission</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">android:name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;android.permission.RECORD_AUDIO&quot;</span><span style="color: #C9D1D9">/&gt;</span></span></code></pre>
<p>While you’re in the Android directory, you’ll need to change what versions you’re defining for the SDK and what version you’re targeting to compile. This change meets the requirements of the third-party package you’ll install later. Open the file: <code>android/app/src/build.gradle</code> and first fine the line: <code>compileSdkVersion flutter.compileSdkVersion</code>. Replace this line with <code>compileSdkVersion 32</code>.</p>
<p>Next, find the following two lines:</p>
<p>minSdkVersion flutter.minSdkVersion
targetSdkVersion flutter.targetSdkVersion</p>
<p>Update these to the versions shown in the example below:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">minSdkVersion 24</span></span>
<span class="line"><span style="color: #c9d1d9">targetSdkVersion 32</span></span></code></pre>
<h3 id="ios">iOS</h3>
<p>For your application to access the microphone on your iPhone or iPad, you’ll need to grant permission to this component. Inside your <code>Podfile</code>, locate the line: <code>flutter_additional_ios_build_settings(target)</code> and below this add the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">target.build_configurations.each do |config|</span></span>
<span class="line"><span style="color: #c9d1d9">  config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] ||= [</span></span>
<span class="line"><span style="color: #c9d1d9">    &#39;$(inherited)&#39;,</span></span>
<span class="line"><span style="color: #c9d1d9">    # dart: PermissionGroup.microphone</span></span>
<span class="line"><span style="color: #c9d1d9">    &#39;PERMISSION_MICROPHONE=1&#39;,</span></span>
<span class="line"><span style="color: #c9d1d9">  ]</span></span>
<span class="line"><span style="color: #c9d1d9">end</span></span></code></pre>
<p>Then inside your <code>Info.plist</code>, within the <code>&lt;dict&gt;&lt;/dict&gt;</code> block, add the following two lines:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9"> &lt;</span><span style="color: #7EE787">key</span><span style="color: #C9D1D9">&gt;NSMicrophoneUsageDescription&lt;/</span><span style="color: #7EE787">key</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">string</span><span style="color: #C9D1D9">&gt;microphone&lt;/</span><span style="color: #7EE787">string</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="add-your-ui">Add Your UI</h2>
<p>The first thing you’re going to need is a UI to be displayed on the mobile device; this UI will need three components:</p>
<ul>
<li>A <code>Text</code> area to display all transcribed wording,</li>
<li>a “start” <code>OutlinedButton</code> to begin the transcription,</li>
<li>and a “stop” <code>OutlinedButton</code> to stop live transcription.</li>
</ul>
<p>Open the file <code>lib/main.dart</code>. In the <code>_MyHomePageState</code> class, replace the contents of this class with the <code>build</code> widget example shown below containing these three components:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">Widget</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">build</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">BuildContext</span><span style="color: #C9D1D9"> context) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MaterialApp</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    home</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Scaffold</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">      appBar</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">AppBar</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">        title</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Live Transcription with Deepgram&#39;</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">      ),</span></span>
<span class="line"><span style="color: #C9D1D9">      body</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Column</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">        mainAxisAlignment</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MainAxisAlignment</span><span style="color: #C9D1D9">.spaceEvenly,</span></span>
<span class="line"><span style="color: #C9D1D9">        children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">Row</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">            children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;</span><span style="color: #79C0FF">Widget</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">[</span></span>
<span class="line"><span style="color: #C9D1D9">              </span><span style="color: #79C0FF">Expanded</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">                flex</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">                child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">                  width</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">150</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;This is where your text is output&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">                    textAlign</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextAlign</span><span style="color: #C9D1D9">.center,</span></span>
<span class="line"><span style="color: #C9D1D9">                    overflow</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextOverflow</span><span style="color: #C9D1D9">.ellipsis,</span></span>
<span class="line"><span style="color: #C9D1D9">                    maxLines</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">                    style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">                        fontWeight</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">FontWeight</span><span style="color: #C9D1D9">.bold, fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">15</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">                  ),</span></span>
<span class="line"><span style="color: #C9D1D9">                ),</span></span>
<span class="line"><span style="color: #C9D1D9">              ),</span></span>
<span class="line"><span style="color: #C9D1D9">            ],</span></span>
<span class="line"><span style="color: #C9D1D9">          ),</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(height</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">Center</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">            child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Row</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">              mainAxisAlignment</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MainAxisAlignment</span><span style="color: #C9D1D9">.center,</span></span>
<span class="line"><span style="color: #C9D1D9">              children</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&lt;</span><span style="color: #79C0FF">Widget</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">[</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">OutlinedButton</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">                  style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ButtonStyle</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">                    backgroundColor</span><span style="color: #FF7B72">:</span></span>
<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.blue),</span></span>
<span class="line"><span style="color: #C9D1D9">                    foregroundColor</span><span style="color: #FF7B72">:</span></span>
<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.white),</span></span>
<span class="line"><span style="color: #C9D1D9">                  ),</span></span>
<span class="line"><span style="color: #C9D1D9">                  onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">                  },</span></span>
<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Start&#39;</span><span style="color: #C9D1D9">, style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)),</span></span>
<span class="line"><span style="color: #C9D1D9">                ),</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">SizedBox</span><span style="color: #C9D1D9">(width</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #79C0FF">OutlinedButton</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">                  style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ButtonStyle</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">                    backgroundColor</span><span style="color: #FF7B72">:</span></span>
<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.red),</span></span>
<span class="line"><span style="color: #C9D1D9">                    foregroundColor</span><span style="color: #FF7B72">:</span></span>
<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #79C0FF">MaterialStateProperty</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">all</span><span style="color: #C9D1D9">&lt;</span><span style="color: #79C0FF">Color</span><span style="color: #C9D1D9">&gt;(</span><span style="color: #79C0FF">Colors</span><span style="color: #C9D1D9">.white),</span></span>
<span class="line"><span style="color: #C9D1D9">                  ),</span></span>
<span class="line"><span style="color: #C9D1D9">                  onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">                  },</span></span>
<span class="line"><span style="color: #C9D1D9">                  child</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Stop&#39;</span><span style="color: #C9D1D9">, style</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TextStyle</span><span style="color: #C9D1D9">(fontSize</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)),</span></span>
<span class="line"><span style="color: #C9D1D9">                ),</span></span>
<span class="line"><span style="color: #C9D1D9">              ],</span></span>
<span class="line"><span style="color: #C9D1D9">            ),</span></span>
<span class="line"><span style="color: #C9D1D9">          ),</span></span>
<span class="line"><span style="color: #C9D1D9">        ],</span></span>
<span class="line"><span style="color: #C9D1D9">      ),</span></span>
<span class="line"><span style="color: #C9D1D9">    ),</span></span>
<span class="line"><span style="color: #C9D1D9">  );</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>You can test your changes work by opening a new Terminal session and running <code>flutter run</code>. If you have connected your mobile device to your computer, your device will now have the application installed onto it, and you will see a screen similar to what’s shown below:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649083047/blog/2022/04/flutter-speech-to-text-tutorial/initial-flutter-app-ui-with-start-stop-buttons.jpg" alt="A screenshot of a mobile phone running the demo Flutter app, a blue header with the text &quot;Live Transcription with Deepgram&quot;, around a quarter of the way down the screen is the text &quot;This is where your text is output&quot; and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text &quot;Start&quot;, the second is a red button with the white text &quot;Stop&quot;"></p>
<h2 id="handling-the-text-state">Handling the Text State</h2>
<p>Next, your application needs to handle functionality to change the text displayed from a state instead. Find the line: <code>class _MyHomePageState extends State&lt;MyHomePage&gt; {</code> and just below this add the definition of the variable <code>myText</code> with the default text contained:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">String</span><span style="color: #C9D1D9"> myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;To start transcribing your voice, press start.&quot;</span><span style="color: #C9D1D9">;</span></span></code></pre>
<p>In your <code>_MyHomePageState</code> classes <code>Widget build()</code>, find the line: <code>"This is where your text is output"</code>. Replace this string with your new variable that will update whenever a response comes back from your transcription requests. So replace this line with <code>myText</code>.</p>
<p>Two new functions are now needed to manipulate this variable. The first one (<code>updateText</code>) updates the text with a predefined piece of text, while the second (<code>resetText</code>) resets the variable’s value, clearing the text from the user’s screen.</p>
<p>Within the <code>_MyHomePageState</code> class, add these two new functions:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(newText) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {</span></span>
<span class="line"><span style="color: #C9D1D9">    myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> myText </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> newText;</span></span>
<span class="line"><span style="color: #C9D1D9">  });</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">resetText</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {</span></span>
<span class="line"><span style="color: #C9D1D9">    myText </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  });</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>These functions aren’t used at the moment, to rectify this, find the <code>OutlinedButton</code> with the text <code>Start</code>, and populate the empty <code>onPressed: () {}</code> function, with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>
<h2 id="install-the-dependencies">Install the Dependencies</h2>
<p>Three third-party libraries are needed throughout this project, these libraries are:</p>
<ul>
<li><code>sound_stream</code>, to handle the microphone input, convert it to data ready for streaming over a WebSocket.</li>
<li><code>web_socket_channel</code> provides functionality to make WebSocket connections which is how your application will communicate with Deepgram servers.</li>
<li><code>permission_handler</code> handles the mobile device’s permissions, such as accessing the microphone.</li>
</ul>
<p>In the root directory of your project, open the file that handles the importing of these libraries, <code>pubspec.yaml</code>. Now locate the <code>dependencies:</code> line and below this add the three libraries:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">web_socket_channel</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2.1.0</span></span>
<span class="line"><span style="color: #7EE787">sound_stream</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">^0.3.0</span></span>
<span class="line"><span style="color: #7EE787">permission_handler</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">^9.2.0</span></span></code></pre>
<p>Open a new Terminal session and navigate to your project directory. Run the following command to install these two libraries:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">flutter pub get</span></span></code></pre>
<h2 id="handle-audio-input">Handle Audio Input</h2>
<p>All of the configuration is now complete, it’s time to handle the functionality to transcribe. Back in your <code>main.dart</code> file, at the top add the following libraries that you’ll be using in this application (including your three newly installed third party libraries):</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dart:async&#39;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dart:convert&#39;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:sound_stream/sound_stream.dart&#39;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:web_socket_channel/io.dart&#39;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;package:permission_handler/permission_handler.dart&#39;</span><span style="color: #C9D1D9">;</span></span></code></pre>
<p>Below these imports, add two constants that you’ll be calling in this application:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> serverUrl </span><span style="color: #FF7B72">=</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?encoding=linear16&amp;sample_rate=16000&amp;language=en-GB&#39;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&lt;your Deepgram API key&gt;&#39;</span><span style="color: #C9D1D9">;</span></span></code></pre>
<p>These two constants are:</p>
<ul>
<li><code>serverUrl</code> to define the URL the WebSocket will connect to (Deepgram’s API server in this instance). For more information on the parameters available to you, please check the <a href="https://developers.deepgram.com/api-reference/#transcription-streaming">API reference</a></li>
<li><code>apiKey</code>, your Deepgram API key to authenticate when making the requests,</li>
</ul>
<blockquote>
<p><strong>Note:</strong> the <code>apiKey</code> is hardcoded into this application solely for tutorial purposes. It is not good security practice to store API keys in mobile applications, so please be aware of this when building your mobile application.</p>
</blockquote>
<p>With this tutorial, you’ll need to request permission to access your microphone before attempting to transcribe your messaging. You’ll do this when the app has loaded (it will only request permission once), add the following <code>initState()</code> function, which also calls <code>onLayoutDone</code> when the layout has loaded on the screen:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@override</span></span>
<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">initState</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">initState</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">WidgetsBinding</span><span style="color: #C9D1D9">.instance</span><span style="color: #FF7B72">?</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">addPostFrameCallback</span><span style="color: #C9D1D9">(onLayoutDone);</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Now below this <code>initState()</code> function add a new one called <code>onLayoutDone</code>, which is where your app will request permission:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">onLayoutDone</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">Duration</span><span style="color: #C9D1D9"> timeStamp) </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Permission</span><span style="color: #C9D1D9">.microphone.</span><span style="color: #D2A8FF">request</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>It’s now time to introduce the WebSocket and <code>sound_stream</code> to the project. First, you’ll need to initiate the objects you’ll be using that records sound and the web socket itself. Below your line <code>String myText ...</code> add the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">final</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">RecorderStream</span><span style="color: #C9D1D9"> _recorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">RecorderStream</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">StreamSubscription</span><span style="color: #C9D1D9"> _recorderStatus;</span></span>
<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">StreamSubscription</span><span style="color: #C9D1D9"> _audioStream;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">late</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">IOWebSocketChannel</span><span style="color: #C9D1D9"> channel;</span></span></code></pre>
<p>When the application closes, it’s good practice to close any long running connections, whether that be with components in your device or over the Internet. So, create the <code>dispose()</code> function, and within this function cancel all audio handling, close the websocket channel:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@override</span></span>
<span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dispose</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  _recorderStatus.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">  _audioStream.</span><span style="color: #D2A8FF">cancel</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">  channel.sink.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">super</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">dispose</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Next, you need to initialize your web socket by providing your <code>serverUrl</code> and your <code>apiKey</code>. You’ll also need to receive the audio stream from your microphone, convert it into binary data, and then send it over the WebSocket for Deepgram’s API to transcribe. Because this is live transcription, the connection will remain open until you request it be closed. Add your new <code>_initStream()</code> function to your <code>_MyHomePageState</code> class.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">Future</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FF7B72">void</span><span style="color: #C9D1D9">&gt; </span><span style="color: #D2A8FF">_initStream</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  channel </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">IOWebSocketChannel</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">Uri</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(serverUrl),</span></span>
<span class="line"><span style="color: #C9D1D9">      headers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;Authorization&#39;</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Token $</span><span style="color: #79C0FF">apiKey</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">});</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  channel.stream.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((event) </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">final</span><span style="color: #C9D1D9"> parsedJson </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">jsonDecode</span><span style="color: #C9D1D9">(event);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(parsedJson[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]);</span></span>
<span class="line"><span style="color: #C9D1D9">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  _audioStream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> _recorder.audioStream.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((data) {</span></span>
<span class="line"><span style="color: #C9D1D9">    channel.sink.</span><span style="color: #D2A8FF">add</span><span style="color: #C9D1D9">(data);</span></span>
<span class="line"><span style="color: #C9D1D9">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  _recorderStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> _recorder.status.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">((status) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (mounted) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Future</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">wait</span><span style="color: #C9D1D9">([</span></span>
<span class="line"><span style="color: #C9D1D9">    _recorder.</span><span style="color: #D2A8FF">initialize</span><span style="color: #C9D1D9">(),</span></span>
<span class="line"><span style="color: #C9D1D9">  ]);</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This functionality doesn’t yet do anything; add a new <code>_startRecord</code> function, and within this, add the call to <code>_initStream()</code>. Calling this function tells <code>sound_stream</code> to switch on your microphone for streaming.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">_startRecord</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">resetText</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_initStream</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> _recorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Also add the following <code>_stopRecord()</code> function to stop the <code>_recorder</code></p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">void</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">_stopRecord</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> _recorder.</span><span style="color: #D2A8FF">stop</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setState</span><span style="color: #C9D1D9">(() {});</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>In the first <code>OutlinedButton</code>, with the text <code>Start</code>, find the <code>onPressed: () {}</code> function and add the following to call your <code>_startRecord</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">updateText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_startRecord</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>
<p>In the next <code>OutlinedButton</code>, the text is <code>Stop</code>, find the <code>onPressed: () {}</code> function and add the following to call your <code>_stopRecord</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">onPressed</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> () {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">_stopRecord</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>
<p>Your application is ready to test once you have added functionality to start and stop the transcribing. If you go back to your Terminal and run <code>flutter run</code>, you’ll see the application refresh on your mobile device. You may be prompted to give microphone access, so be sure to approve this. You can now start transcribing!</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1649083046/blog/2022/04/flutter-speech-to-text-tutorial/finished-flutter-app-ui-showing-transcription.jpg" alt="A screenshot of a mobile phone running the demo Flutter app, a blue header with the text &quot;Hello and welcome to your Deepgram live transcription demo&quot;, around a quarter of the way down the screen is the text &quot;This is where your text is output&quot; and then around three-quarters of the way down the screen are two buttons side by side, the first is a blue button with the white text &quot;Start&quot;, the second is a red button with the white text &quot;Stop&quot;"></p>
<p>The final code for this tutorial is available on <a href="https://github.com/deepgram-devs/deepgram-live-transcription-flutter">GitHub</a>, and if you have any questions, please feel free to reach out to the Deepgram team on Twitter - <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/flutter-speech-to-text-tutorial/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
