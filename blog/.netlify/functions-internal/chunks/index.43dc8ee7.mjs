import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "setting-up-state", "text": "Setting Up State" }, { "depth": 2, "slug": "create-enemies", "text": "Create Enemies" }, { "depth": 2, "slug": "create-bullets", "text": "Create Bullets" }, { "depth": 2, "slug": "add-word-prompts", "text": "Add Word Prompts" }, { "depth": 2, "slug": "shoot-bullets-with-your-voice", "text": "Shoot Bullets With Your Voice" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "\nThis is the final part in a series on P5.js (from here 'P5') - a creative coding library that makes working with the Canvas API much easier. [In part one](https://blog.deepgram.com/p5js-getting-started/), we covered how to draw elements on the screen and react to keyboard and mouse input. We learned how to create common game features in [part two](https://blog.deepgram.com/blog/2022/03/p5js-game-logic/) - collision detection, entity management, and state management.\n\nIn today's tutorial, we'll bring together everything we know to create a voice-controlled game - [try the game out now](https://deepgram-p5-game.glitch.me/). A new enemy appears coming from one of four directions and begins moving towards you every few seconds. Each direction has a random word associated with it, and if said correctly, a bullet will fly in that direction. If an enemy reaches you, the game is over.\n\nThe final code for today's project can be found on [GitHub](https://github.com/deepgram-devs/playing-with-p5).\n\n## Before We Start\n\nYou will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\n## Setting Up State\n\nOn your computer, create a new directory and open it in your code editor. Create an `index.html` file and add the following to it:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head></head>\n  <body>\n    <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js\"><\/script>\n    <script>\n      // Global Variable Section Starts\n      let playerSize = 50\n      let score = 0\n      let gameOver = false\n      // Global Variable Section Ends\n\n      function setup() {\n        createCanvas(1000, 1000)\n        frameRate(30)\n      }\n\n      function draw() {\n        background('black')\n        translate(width / 2, height / 2)\n\n        fill('white')\n        textSize(24)\n        textAlign(RIGHT)\n        text(`Score: ${score}`, width / 2 - 20, height / 2 - 20)\n\n        if (!gameOver) {\n          fill('white')\n          circle(0, 0, playerSize)\n\n          // Game logic goes here\n        } else {\n          fill('white')\n          textSize(36)\n          textAlign(CENTER)\n          text(`Game over! Score: ${score}`, 0, 0)\n        }\n      }\n    <\/script>\n  </body>\n</html>\n```\n\nIn the second post in this series, you learned how to [keep score and show a game over screen](https://blog.deepgram.com/blog/2022/03/p5js-game-logic/) - we are using both approaches here.\n\nThe only new thing here is `translate(width/2, height/2)`, which moves the origin (0, 0) to the center of the canvas. This means the top-left is now (-500, -500), and the bottom-right is (500, 500). It makes sense to do this when entities often need to refer to the center position.\n\n## Create Enemies\n\nAt the bottom of your `<script>`, create a new `Enemy` class:\n\n```js\nclass Enemy {\n  constructor(direction, distance) {\n    this.direction = direction\n    this.size = 25\n    this.x = 0\n    this.y = 0\n\n    if (this.direction == 'UP') this.y = -Math.abs(distance)\n    if (this.direction == 'RIGHT') this.x = distance\n    if (this.direction == 'DOWN') this.y = distance\n    if (this.direction == 'LEFT') this.x = -Math.abs(distance)\n  }\n\n  move() {\n    if (this.direction == 'UP') this.y++\n    if (this.direction == 'RIGHT') this.x--\n    if (this.direction == 'DOWN') this.y--\n    if (this.direction == 'LEFT') this.x++\n  }\n\n  touchedPlayer() {\n    const d = dist(this.x, this.y, 0, 0)\n    if (d < playerSize / 2 + this.size / 2) gameOver = true\n  }\n\n  display() {\n    fill('gray')\n    ellipse(this.x, this.y, this.size)\n  }\n}\n```\n\nWhen an instance is created, you must provide two arguments - `direction` - one of `'UP'`, `'DOWN'`, `'LEFT'`, or `'RIGHT'`, and `distance` - which dictates how far away from the center point the enemy should spawn.\n\nIn the `constructor`, the enemies are initially placed, and in `move()` they move one pixel closer to the center. `touchedPlayer()` uses collision detection -- we [learned about that last week](https://blog.deepgram.com/blog/2022/03/p5js-game-logic/) -- to set `gameOver` to `true` if an enemy touches the player in the center of the canvas. Finally, the enemy is drawn at its new (x, y) position.\n\nIn your global variable section, add these line:\n\n```js\nlet directions = ['UP', 'DOWN', 'LEFT', 'RIGHT']\nlet enemies = []\n```\n\nAt the bottom of your `setup()` function, begin spawning enemies randomly every 2-5 seconds:\n\n```js\nsetInterval(() => {\n  enemies.push(new Enemy(random(directions), width / 4, width / 2))\n}, random(2000, 5000))\n```\n\nThe first argument will be randomly chosen from the `directions` array you just created. The final step is to loop through all existing enemies and run their methods in `draw()`. In your game logic section, add this code:\n\n```js\nfor (let enemy of enemies) {\n  enemy.move()\n  enemy.touchedPlayer()\n  enemy.display()\n}\n```\n\nOpen `index.html` in your browser, and it should look like this:\n\n![A black square with a small white circle in the middle. The bottom-right reads 'Score: 0'. Small gray circles representing enemies appear either above, below, left, or right, and move towards the center. An enemy touches the center circle and the screens ays \"Game over\"](https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/enemy-spawn.gif)\n\n## Create Bullets\n\nCurrently, there's no way to defend yourself. When a player presses their arrow keys, a new bullet will be created in that direction.\n\nAt the bottom of your `<script>`, create a new `Bullet` class. It should look familiar as it works largely the same as the `Enemy` class:\n\n```js\nclass Bullet {\n  constructor(direction) {\n    this.direction = direction\n    this.size = 5\n    this.speed = 6\n    this.x = 0\n    this.y = 0\n    this.spent = false\n  }\n\n  move() {\n    if (this.direction == 'UP') this.y -= this.speed\n    if (this.direction == 'RIGHT') this.x += this.speed\n    if (this.direction == 'DOWN') this.y += this.speed\n    if (this.direction == 'LEFT') this.x -= this.speed\n  }\n\n  touchedEnemy() {\n    for (let enemy of enemies) {\n      const d = dist(enemy.x, enemy.y, this.x, this.y)\n      if (d < this.size / 2 + enemy.size / 2) {\n        enemies = enemies.filter((e) => e != enemy)\n        this.spent = true\n        score++\n      }\n    }\n  }\n\n  display() {\n    fill('red')\n    ellipse(this.x, this.y, this.size)\n  }\n}\n```\n\nIf an enemy is hit, it is removed from the `enemies` array, and the bullet's `this.spent` value becomes `true`. In the global variable section, add a new array for bullets:\n\n```js\nlet bullets = []\n```\n\nUnderneath our `enemies` loop in `draw()`, add a loop for `bullets`:\n\n```js\nfor (let bullet of bullets) {\n  if (!bullet.spent) {\n    bullet.move()\n    bullet.touchedEnemy()\n    bullet.display()\n  }\n}\n```\n\nIf the bullet has been spent, it won't be shown or run its collision detection logic. This means a bullet can only successfully hit an enemy once.\n\nSo far, you have used the P5 `preload()`, `setup()`, and `draw()` functions, but there are a host more that are triggered based on user input.\n\nUnlike the `keyIsPressed` variable which is true every frame that a key is pressed, the built-in `keyPressed()` function is triggered only once when a user presses a key on their keyboard. In order to trigger the function twice, two distinct presses need to be made - much better for bullet firing. After you end the `draw()` function, add this:\n\n```js\nfunction keyPressed() {\n  if (key == 'ArrowLeft') bullets.push(new Bullet('LEFT'))\n  if (key == 'ArrowRight') bullets.push(new Bullet('RIGHT'))\n  if (key == 'ArrowUp') bullets.push(new Bullet('UP'))\n  if (key == 'ArrowDown') bullets.push(new Bullet('DOWN'))\n}\n```\n\nThat's the core game finished. Here's how it looks (recording is sped up):\n\n![As enemies appraoch the enemy, tiny red dots are fired out of the center player and towards enemies. When they hit an enemy, the bullet and the enemy disappear, and the score goes up by one.](https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/bullet-firing.gif)\n\n## Add Word Prompts\n\nCreate a new file called `words.js`, and copy and paste the content from [this file on GitHub](https://github.com/deepgram-devs/playing-with-p5/blob/main/words.js). This is a slight reformatting of the [repository](https://github.com/adamjgrant/Random-English-Word-Generator-42k-Words-) of over 42,000 English words.\n\nAs a note, this is a pretty long word list and includes some pretty long and complex words. You may want to experiment with the word selection you use to alter the difficulty.\n\nJust before the `<script>` tag with our P5 logic, include the `words.js` file:\n\n```html\n<script src=\"words.js\"><\/script>\n```\n\nThen, in your main `<script>` tag with our P5 logic, add the following:\n\n```js\nfunction getRandomWord() {\n  return words[Math.floor(Math.random() * 42812)]\n}\n```\n\nThis function gets one word at random and returns the string. You can add it anywhere, but I tend to add these utility functions to the very bottom of my `<script>`.\n\nIn your global variable section, store four random words:\n\n```js\nlet currentWords = {\n  UP: getRandomWord(),\n  DOWN: getRandomWord(),\n  LEFT: getRandomWord(),\n  RIGHT: getRandomWord(),\n}\n```\n\nJust after your `bullet` loop in the game logic section, draw the four random words to the canvas:\n\n```js\nfill('white')\ntextSize(24)\ntextAlign(CENTER)\ntext(currentWords.UP, 0, -height / 2 + 48)\ntext(currentWords.DOWN, 0, height / 2 - 48)\ntextAlign(RIGHT)\ntext(currentWords.RIGHT, width / 2 - 48, 0)\ntextAlign(LEFT)\ntext(currentWords.LEFT, -width / 2 + 48, 0)\n```\n\nFinally, in the `Bullet.touchedEnemy()` function, where we increment the score, replace a word when an enemy is hit:\n\n```js\ncurrentWords[enemy.direction] = getRandomWord()\n```\n\n![As enemies are hit, the word in their direction changes.](https://res.cloudinary.com/deepgram/image/upload/v1646925989/blog/2022/03/p5js-deepgram-game/words-change.gif)\n\n## Shoot Bullets With Your Voice\n\nIt's time to create bullets with your voice! A persistent WebSocket connection will be made with Deepgram, allowing Deepgram to constantly listen to your mic to hear what you say.\n\nThis part of the tutorial will assume you know how to do live browser transcription with Deepgram. If not, we have a [written and video tutorial available](https://blog.deepgram.com/live-transcription-mic-browser/) that explains every step in more detail.\n\nIn your global variable section, create one final value so we can display to the user what was heard:\n\n```js\nlet heard = ''\n```\n\nAt the very bottom of your `<script>`, add this:\n\n```js\nnavigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n  const mediaRecorder = new MediaRecorder(stream)\n  const socket = new WebSocket('wss://api.deepgram.com/v1/listen', [\n    'token',\n    'YOUR-DEEPGRAM-API-KEY',\n  ])\n\n  socket.onopen = () => {\n    mediaRecorder.addEventListener('dataavailable', async (event) => {\n      if (event.data.size > 0 && socket.readyState == 1) socket.send(event.data)\n    })\n    mediaRecorder.start(1000)\n  }\n\n  socket.onmessage = (message) => {\n    const received = JSON.parse(message.data)\n    const transcript = received.channel.alternatives[0].transcript\n    if (transcript && received.is_final) {\n      heard = transcript\n      for (let direction in currentWords) {\n        if (transcript.includes(currentWords[direction])) {\n          bullets.push(new Bullet(direction))\n        }\n      }\n    }\n  }\n})\n```\n\nRemember to provide your Deepgram API Key when creating the `socket`. At the bottom of this code, a check determines whether any of the directional words were heard and, if so, creates a bullet in that direction.\n\nFinally, show the user what was heard just under all of the `text()` statements in `draw()`:\n\n```js\nfill('green')\nif(`heard) text(`We heard \"${heard}\"`, -width/2+20, height/2-20)`\n```\n\n## In Summary\n\nThe fact it was so little code to integrate voice control into this game should be a testament to how easy [Deepgram's Speech Recognition API](https://developers.deepgram.com/documentation/) is to use.\n\nOnce again, a live version of the game can be found [here](https://deepgram-p5-game.glitch.me/) and the final codebase on [GitHub](https://github.com/deepgram-devs/playing-with-p5).\n\nIf you want to deploy your own, I encourage you to also read how to [protect your API Key](https://blog.deepgram.com/protecting-api-key/) when doing live transcription directly in your browser.\n\nIf you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>This is the final part in a series on P5.js (from here \u2018P5\u2019) - a creative coding library that makes working with the Canvas API much easier. <a href="https://blog.deepgram.com/p5js-getting-started/">In part one</a>, we covered how to draw elements on the screen and react to keyboard and mouse input. We learned how to create common game features in <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">part two</a> - collision detection, entity management, and state management.</p>\n<p>In today\u2019s tutorial, we\u2019ll bring together everything we know to create a voice-controlled game - <a href="https://deepgram-p5-game.glitch.me/">try the game out now</a>. A new enemy appears coming from one of four directions and begins moving towards you every few seconds. Each direction has a random word associated with it, and if said correctly, a bullet will fly in that direction. If an enemy reaches you, the game is over.</p>\n<p>The final code for today\u2019s project can be found on <a href="https://github.com/deepgram-devs/playing-with-p5">GitHub</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<h2 id="setting-up-state">Setting Up State</h2>\n<p>On your computer, create a new directory and open it in your code editor. Create an <code is:raw>index.html</code> file and add the following to it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Global Variable Section Starts</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerSize </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> score </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> gameOver </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Global Variable Section Ends</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;black&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Score: ${</span><span style="color: #C9D1D9">score</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">gameOver) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, playerSize)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Game logic goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">        } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">36</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Game over! Score: ${</span><span style="color: #C9D1D9">score</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In the second post in this series, you learned how to <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">keep score and show a game over screen</a> - we are using both approaches here.</p>\n<p>The only new thing here is <code is:raw>translate(width/2, height/2)</code>, which moves the origin (0, 0) to the center of the canvas. This means the top-left is now (-500, -500), and the bottom-right is (500, 500). It makes sense to do this when entities often need to refer to the center position.</p>\n<h2 id="create-enemies">Create Enemies</h2>\n<p>At the bottom of your <code is:raw>&lt;script&gt;</code>, create a new <code is:raw>Enemy</code> class:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Enemy</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">direction</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">distance</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> direction</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">25</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">Math.</span><span style="color: #D2A8FF">abs</span><span style="color: #C9D1D9">(distance)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> distance</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> distance</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">Math.</span><span style="color: #D2A8FF">abs</span><span style="color: #C9D1D9">(distance)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x</span><span style="color: #FF7B72">--</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y</span><span style="color: #FF7B72">--</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">touchedPlayer</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> playerSize </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">) gameOver </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;gray&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">ellipse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>When an instance is created, you must provide two arguments - <code is:raw>direction</code> - one of <code is:raw>\'UP\'</code>, <code is:raw>\'DOWN\'</code>, <code is:raw>\'LEFT\'</code>, or <code is:raw>\'RIGHT\'</code>, and <code is:raw>distance</code> - which dictates how far away from the center point the enemy should spawn.</p>\n<p>In the <code is:raw>constructor</code>, the enemies are initially placed, and in <code is:raw>move()</code> they move one pixel closer to the center. <code is:raw>touchedPlayer()</code> uses collision detection \u2014 we <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">learned about that last week</a> \u2014 to set <code is:raw>gameOver</code> to <code is:raw>true</code> if an enemy touches the player in the center of the canvas. Finally, the enemy is drawn at its new (x, y) position.</p>\n<p>In your global variable section, add these line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> directions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemies </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>\n<p>At the bottom of your <code is:raw>setup()</code> function, begin spawning enemies randomly every 2-5 seconds:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">setInterval</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemies.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Enemy</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(directions), width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">}, </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>The first argument will be randomly chosen from the <code is:raw>directions</code> array you just created. The final step is to loop through all existing enemies and run their methods in <code is:raw>draw()</code>. In your game logic section, add this code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemy </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> enemies) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">touchedPlayer</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Open <code is:raw>index.html</code> in your browser, and it should look like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/enemy-spawn.gif" alt="A black square with a small white circle in the middle. The bottom-right reads &#x27;Score: 0&#x27;. Small gray circles representing enemies appear either above, below, left, or right, and move towards the center. An enemy touches the center circle and the screens ays &#x22;Game over&#x22;"></p>\n<h2 id="create-bullets">Create Bullets</h2>\n<p>Currently, there\u2019s no way to defend yourself. When a player presses their arrow keys, a new bullet will be created in that direction.</p>\n<p>At the bottom of your <code is:raw>&lt;script&gt;</code>, create a new <code is:raw>Bullet</code> class. It should look familiar as it works largely the same as the <code is:raw>Enemy</code> class:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bullet</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">direction</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> direction</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">6</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.spent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">touchedEnemy</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemy </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> enemies) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(enemy.x, enemy.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> enemy.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        enemies </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> enemies.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">e</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> e </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> enemy)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.spent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">        score</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">ellipse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>If an enemy is hit, it is removed from the <code is:raw>enemies</code> array, and the bullet\u2019s <code is:raw>this.spent</code> value becomes <code is:raw>true</code>. In the global variable section, add a new array for bullets:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bullets </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>\n<p>Underneath our <code is:raw>enemies</code> loop in <code is:raw>draw()</code>, add a loop for <code is:raw>bullets</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bullet </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bullets) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">bullet.spent) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">touchedEnemy</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>If the bullet has been spent, it won\u2019t be shown or run its collision detection logic. This means a bullet can only successfully hit an enemy once.</p>\n<p>So far, you have used the P5 <code is:raw>preload()</code>, <code is:raw>setup()</code>, and <code is:raw>draw()</code> functions, but there are a host more that are triggered based on user input.</p>\n<p>Unlike the <code is:raw>keyIsPressed</code> variable which is true every frame that a key is pressed, the built-in <code is:raw>keyPressed()</code> function is triggered only once when a user presses a key on their keyboard. In order to trigger the function twice, two distinct presses need to be made - much better for bullet firing. After you end the <code is:raw>draw()</code> function, add this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">keyPressed</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>That\u2019s the core game finished. Here\u2019s how it looks (recording is sped up):</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/bullet-firing.gif" alt="As enemies appraoch the enemy, tiny red dots are fired out of the center player and towards enemies. When they hit an enemy, the bullet and the enemy disappear, and the score goes up by one."></p>\n<h2 id="add-word-prompts">Add Word Prompts</h2>\n<p>Create a new file called <code is:raw>words.js</code>, and copy and paste the content from <a href="https://github.com/deepgram-devs/playing-with-p5/blob/main/words.js">this file on GitHub</a>. This is a slight reformatting of the <a href="https://github.com/adamjgrant/Random-English-Word-Generator-42k-Words-">repository</a> of over 42,000 English words.</p>\n<p>As a note, this is a pretty long word list and includes some pretty long and complex words. You may want to experiment with the word selection you use to alter the difficulty.</p>\n<p>Just before the <code is:raw>&lt;script&gt;</code> tag with our P5 logic, include the <code is:raw>words.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;words.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Then, in your main <code is:raw>&lt;script&gt;</code> tag with our P5 logic, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> words[Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42812</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function gets one word at random and returns the string. You can add it anywhere, but I tend to add these utility functions to the very bottom of my <code is:raw>&lt;script&gt;</code>.</p>\n<p>In your global variable section, store four random words:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> currentWords </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  UP: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  DOWN: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  LEFT: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  RIGHT: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Just after your <code is:raw>bullet</code> loop in the game logic section, draw the four random words to the canvas:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">UP</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">DOWN</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">LEFT</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">LEFT</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Finally, in the <code is:raw>Bullet.touchedEnemy()</code> function, where we increment the score, replace a word when an enemy is hit:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">currentWords[enemy.direction] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925989/blog/2022/03/p5js-deepgram-game/words-change.gif" alt="As enemies are hit, the word in their direction changes."></p>\n<h2 id="shoot-bullets-with-your-voice">Shoot Bullets With Your Voice</h2>\n<p>It\u2019s time to create bullets with your voice! A persistent WebSocket connection will be made with Deepgram, allowing Deepgram to constantly listen to your mic to hear what you say.</p>\n<p>This part of the tutorial will assume you know how to do live browser transcription with Deepgram. If not, we have a <a href="https://blog.deepgram.com/live-transcription-mic-browser/">written and video tutorial available</a> that explains every step in more detail.</p>\n<p>In your global variable section, create one final value so we can display to the user what was heard:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> heard </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span></code></pre>\n<p>At the very bottom of your <code is:raw>&lt;script&gt;</code>, add this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;YOUR-DEEPGRAM-API-KEY&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  ])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      heard </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> direction </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> currentWords) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(currentWords[direction])) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(direction))</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Remember to provide your Deepgram API Key when creating the <code is:raw>socket</code>. At the bottom of this code, a check determines whether any of the directional words were heard and, if so, creates a bullet in that direction.</p>\n<p>Finally, show the user what was heard just under all of the <code is:raw>text()</code> statements in <code is:raw>draw()</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`heard) text(`</span><span style="color: #C9D1D9">We heard </span><span style="color: #A5D6FF">&quot;${heard}&quot;`, -width/2+20, height/2-20)`</span></span></code></pre>\n<h2 id="in-summary">In Summary</h2>\n<p>The fact it was so little code to integrate voice control into this game should be a testament to how easy <a href="https://developers.deepgram.com/documentation/">Deepgram\u2019s Speech Recognition API</a> is to use.</p>\n<p>Once again, a live version of the game can be found <a href="https://deepgram-p5-game.glitch.me/">here</a> and the final codebase on <a href="https://github.com/deepgram-devs/playing-with-p5">GitHub</a>.</p>\n<p>If you want to deploy your own, I encourage you to also read how to <a href="https://blog.deepgram.com/protecting-api-key/">protect your API Key</a> when doing live transcription directly in your browser.</p>\n<p>If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Playing With P5.js: Creating a Voice-Controlled Game", "description": "In this post, we'll build a voice-controlled game with P5.js and Deepgram's Speech Recognition API. Learn how now.", "date": "2022-03-22T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1646925972/blog/2022/03/p5js-deepgram-game/series-cover.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["javascript", "p5js", "beginner"], "seo": { "title": "Playing With P5.js: Creating a Voice-Controlled Game", "description": "In this post, we'll build a voice-controlled game with P5.js and Deepgram's Speech Recognition API. Learn how now." }, "shorturls": { "share": "https://dpgr.am/c11f55a", "twitter": "https://dpgr.am/a0f09ef", "linkedin": "https://dpgr.am/ebf80d1", "reddit": "https://dpgr.am/7e24086", "facebook": "https://dpgr.am/7c4f65d" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454040/blog/p5js-deepgram-game/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "setting-up-state", "text": "Setting Up State" }, { "depth": 2, "slug": "create-enemies", "text": "Create Enemies" }, { "depth": 2, "slug": "create-bullets", "text": "Create Bullets" }, { "depth": 2, "slug": "add-word-prompts", "text": "Add Word Prompts" }, { "depth": 2, "slug": "shoot-bullets-with-your-voice", "text": "Shoot Bullets With Your Voice" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "\nThis is the final part in a series on P5.js (from here 'P5') - a creative coding library that makes working with the Canvas API much easier. [In part one](https://blog.deepgram.com/p5js-getting-started/), we covered how to draw elements on the screen and react to keyboard and mouse input. We learned how to create common game features in [part two](https://blog.deepgram.com/blog/2022/03/p5js-game-logic/) - collision detection, entity management, and state management.\n\nIn today's tutorial, we'll bring together everything we know to create a voice-controlled game - [try the game out now](https://deepgram-p5-game.glitch.me/). A new enemy appears coming from one of four directions and begins moving towards you every few seconds. Each direction has a random word associated with it, and if said correctly, a bullet will fly in that direction. If an enemy reaches you, the game is over.\n\nThe final code for today's project can be found on [GitHub](https://github.com/deepgram-devs/playing-with-p5).\n\n## Before We Start\n\nYou will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\n## Setting Up State\n\nOn your computer, create a new directory and open it in your code editor. Create an `index.html` file and add the following to it:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head></head>\n  <body>\n    <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js\"><\/script>\n    <script>\n      // Global Variable Section Starts\n      let playerSize = 50\n      let score = 0\n      let gameOver = false\n      // Global Variable Section Ends\n\n      function setup() {\n        createCanvas(1000, 1000)\n        frameRate(30)\n      }\n\n      function draw() {\n        background('black')\n        translate(width / 2, height / 2)\n\n        fill('white')\n        textSize(24)\n        textAlign(RIGHT)\n        text(`Score: ${score}`, width / 2 - 20, height / 2 - 20)\n\n        if (!gameOver) {\n          fill('white')\n          circle(0, 0, playerSize)\n\n          // Game logic goes here\n        } else {\n          fill('white')\n          textSize(36)\n          textAlign(CENTER)\n          text(`Game over! Score: ${score}`, 0, 0)\n        }\n      }\n    <\/script>\n  </body>\n</html>\n```\n\nIn the second post in this series, you learned how to [keep score and show a game over screen](https://blog.deepgram.com/blog/2022/03/p5js-game-logic/) - we are using both approaches here.\n\nThe only new thing here is `translate(width/2, height/2)`, which moves the origin (0, 0) to the center of the canvas. This means the top-left is now (-500, -500), and the bottom-right is (500, 500). It makes sense to do this when entities often need to refer to the center position.\n\n## Create Enemies\n\nAt the bottom of your `<script>`, create a new `Enemy` class:\n\n```js\nclass Enemy {\n  constructor(direction, distance) {\n    this.direction = direction\n    this.size = 25\n    this.x = 0\n    this.y = 0\n\n    if (this.direction == 'UP') this.y = -Math.abs(distance)\n    if (this.direction == 'RIGHT') this.x = distance\n    if (this.direction == 'DOWN') this.y = distance\n    if (this.direction == 'LEFT') this.x = -Math.abs(distance)\n  }\n\n  move() {\n    if (this.direction == 'UP') this.y++\n    if (this.direction == 'RIGHT') this.x--\n    if (this.direction == 'DOWN') this.y--\n    if (this.direction == 'LEFT') this.x++\n  }\n\n  touchedPlayer() {\n    const d = dist(this.x, this.y, 0, 0)\n    if (d < playerSize / 2 + this.size / 2) gameOver = true\n  }\n\n  display() {\n    fill('gray')\n    ellipse(this.x, this.y, this.size)\n  }\n}\n```\n\nWhen an instance is created, you must provide two arguments - `direction` - one of `'UP'`, `'DOWN'`, `'LEFT'`, or `'RIGHT'`, and `distance` - which dictates how far away from the center point the enemy should spawn.\n\nIn the `constructor`, the enemies are initially placed, and in `move()` they move one pixel closer to the center. `touchedPlayer()` uses collision detection -- we [learned about that last week](https://blog.deepgram.com/blog/2022/03/p5js-game-logic/) -- to set `gameOver` to `true` if an enemy touches the player in the center of the canvas. Finally, the enemy is drawn at its new (x, y) position.\n\nIn your global variable section, add these line:\n\n```js\nlet directions = ['UP', 'DOWN', 'LEFT', 'RIGHT']\nlet enemies = []\n```\n\nAt the bottom of your `setup()` function, begin spawning enemies randomly every 2-5 seconds:\n\n```js\nsetInterval(() => {\n  enemies.push(new Enemy(random(directions), width / 4, width / 2))\n}, random(2000, 5000))\n```\n\nThe first argument will be randomly chosen from the `directions` array you just created. The final step is to loop through all existing enemies and run their methods in `draw()`. In your game logic section, add this code:\n\n```js\nfor (let enemy of enemies) {\n  enemy.move()\n  enemy.touchedPlayer()\n  enemy.display()\n}\n```\n\nOpen `index.html` in your browser, and it should look like this:\n\n![A black square with a small white circle in the middle. The bottom-right reads 'Score: 0'. Small gray circles representing enemies appear either above, below, left, or right, and move towards the center. An enemy touches the center circle and the screens ays \"Game over\"](https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/enemy-spawn.gif)\n\n## Create Bullets\n\nCurrently, there's no way to defend yourself. When a player presses their arrow keys, a new bullet will be created in that direction.\n\nAt the bottom of your `<script>`, create a new `Bullet` class. It should look familiar as it works largely the same as the `Enemy` class:\n\n```js\nclass Bullet {\n  constructor(direction) {\n    this.direction = direction\n    this.size = 5\n    this.speed = 6\n    this.x = 0\n    this.y = 0\n    this.spent = false\n  }\n\n  move() {\n    if (this.direction == 'UP') this.y -= this.speed\n    if (this.direction == 'RIGHT') this.x += this.speed\n    if (this.direction == 'DOWN') this.y += this.speed\n    if (this.direction == 'LEFT') this.x -= this.speed\n  }\n\n  touchedEnemy() {\n    for (let enemy of enemies) {\n      const d = dist(enemy.x, enemy.y, this.x, this.y)\n      if (d < this.size / 2 + enemy.size / 2) {\n        enemies = enemies.filter((e) => e != enemy)\n        this.spent = true\n        score++\n      }\n    }\n  }\n\n  display() {\n    fill('red')\n    ellipse(this.x, this.y, this.size)\n  }\n}\n```\n\nIf an enemy is hit, it is removed from the `enemies` array, and the bullet's `this.spent` value becomes `true`. In the global variable section, add a new array for bullets:\n\n```js\nlet bullets = []\n```\n\nUnderneath our `enemies` loop in `draw()`, add a loop for `bullets`:\n\n```js\nfor (let bullet of bullets) {\n  if (!bullet.spent) {\n    bullet.move()\n    bullet.touchedEnemy()\n    bullet.display()\n  }\n}\n```\n\nIf the bullet has been spent, it won't be shown or run its collision detection logic. This means a bullet can only successfully hit an enemy once.\n\nSo far, you have used the P5 `preload()`, `setup()`, and `draw()` functions, but there are a host more that are triggered based on user input.\n\nUnlike the `keyIsPressed` variable which is true every frame that a key is pressed, the built-in `keyPressed()` function is triggered only once when a user presses a key on their keyboard. In order to trigger the function twice, two distinct presses need to be made - much better for bullet firing. After you end the `draw()` function, add this:\n\n```js\nfunction keyPressed() {\n  if (key == 'ArrowLeft') bullets.push(new Bullet('LEFT'))\n  if (key == 'ArrowRight') bullets.push(new Bullet('RIGHT'))\n  if (key == 'ArrowUp') bullets.push(new Bullet('UP'))\n  if (key == 'ArrowDown') bullets.push(new Bullet('DOWN'))\n}\n```\n\nThat's the core game finished. Here's how it looks (recording is sped up):\n\n![As enemies appraoch the enemy, tiny red dots are fired out of the center player and towards enemies. When they hit an enemy, the bullet and the enemy disappear, and the score goes up by one.](https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/bullet-firing.gif)\n\n## Add Word Prompts\n\nCreate a new file called `words.js`, and copy and paste the content from [this file on GitHub](https://github.com/deepgram-devs/playing-with-p5/blob/main/words.js). This is a slight reformatting of the [repository](https://github.com/adamjgrant/Random-English-Word-Generator-42k-Words-) of over 42,000 English words.\n\nAs a note, this is a pretty long word list and includes some pretty long and complex words. You may want to experiment with the word selection you use to alter the difficulty.\n\nJust before the `<script>` tag with our P5 logic, include the `words.js` file:\n\n```html\n<script src=\"words.js\"><\/script>\n```\n\nThen, in your main `<script>` tag with our P5 logic, add the following:\n\n```js\nfunction getRandomWord() {\n  return words[Math.floor(Math.random() * 42812)]\n}\n```\n\nThis function gets one word at random and returns the string. You can add it anywhere, but I tend to add these utility functions to the very bottom of my `<script>`.\n\nIn your global variable section, store four random words:\n\n```js\nlet currentWords = {\n  UP: getRandomWord(),\n  DOWN: getRandomWord(),\n  LEFT: getRandomWord(),\n  RIGHT: getRandomWord(),\n}\n```\n\nJust after your `bullet` loop in the game logic section, draw the four random words to the canvas:\n\n```js\nfill('white')\ntextSize(24)\ntextAlign(CENTER)\ntext(currentWords.UP, 0, -height / 2 + 48)\ntext(currentWords.DOWN, 0, height / 2 - 48)\ntextAlign(RIGHT)\ntext(currentWords.RIGHT, width / 2 - 48, 0)\ntextAlign(LEFT)\ntext(currentWords.LEFT, -width / 2 + 48, 0)\n```\n\nFinally, in the `Bullet.touchedEnemy()` function, where we increment the score, replace a word when an enemy is hit:\n\n```js\ncurrentWords[enemy.direction] = getRandomWord()\n```\n\n![As enemies are hit, the word in their direction changes.](https://res.cloudinary.com/deepgram/image/upload/v1646925989/blog/2022/03/p5js-deepgram-game/words-change.gif)\n\n## Shoot Bullets With Your Voice\n\nIt's time to create bullets with your voice! A persistent WebSocket connection will be made with Deepgram, allowing Deepgram to constantly listen to your mic to hear what you say.\n\nThis part of the tutorial will assume you know how to do live browser transcription with Deepgram. If not, we have a [written and video tutorial available](https://blog.deepgram.com/live-transcription-mic-browser/) that explains every step in more detail.\n\nIn your global variable section, create one final value so we can display to the user what was heard:\n\n```js\nlet heard = ''\n```\n\nAt the very bottom of your `<script>`, add this:\n\n```js\nnavigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n  const mediaRecorder = new MediaRecorder(stream)\n  const socket = new WebSocket('wss://api.deepgram.com/v1/listen', [\n    'token',\n    'YOUR-DEEPGRAM-API-KEY',\n  ])\n\n  socket.onopen = () => {\n    mediaRecorder.addEventListener('dataavailable', async (event) => {\n      if (event.data.size > 0 && socket.readyState == 1) socket.send(event.data)\n    })\n    mediaRecorder.start(1000)\n  }\n\n  socket.onmessage = (message) => {\n    const received = JSON.parse(message.data)\n    const transcript = received.channel.alternatives[0].transcript\n    if (transcript && received.is_final) {\n      heard = transcript\n      for (let direction in currentWords) {\n        if (transcript.includes(currentWords[direction])) {\n          bullets.push(new Bullet(direction))\n        }\n      }\n    }\n  }\n})\n```\n\nRemember to provide your Deepgram API Key when creating the `socket`. At the bottom of this code, a check determines whether any of the directional words were heard and, if so, creates a bullet in that direction.\n\nFinally, show the user what was heard just under all of the `text()` statements in `draw()`:\n\n```js\nfill('green')\nif(`heard) text(`We heard \"${heard}\"`, -width/2+20, height/2-20)`\n```\n\n## In Summary\n\nThe fact it was so little code to integrate voice control into this game should be a testament to how easy [Deepgram's Speech Recognition API](https://developers.deepgram.com/documentation/) is to use.\n\nOnce again, a live version of the game can be found [here](https://deepgram-p5-game.glitch.me/) and the final codebase on [GitHub](https://github.com/deepgram-devs/playing-with-p5).\n\nIf you want to deploy your own, I encourage you to also read how to [protect your API Key](https://blog.deepgram.com/protecting-api-key/) when doing live transcription directly in your browser.\n\nIf you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>This is the final part in a series on P5.js (from here \u2018P5\u2019) - a creative coding library that makes working with the Canvas API much easier. <a href="https://blog.deepgram.com/p5js-getting-started/">In part one</a>, we covered how to draw elements on the screen and react to keyboard and mouse input. We learned how to create common game features in <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">part two</a> - collision detection, entity management, and state management.</p>\n<p>In today\u2019s tutorial, we\u2019ll bring together everything we know to create a voice-controlled game - <a href="https://deepgram-p5-game.glitch.me/">try the game out now</a>. A new enemy appears coming from one of four directions and begins moving towards you every few seconds. Each direction has a random word associated with it, and if said correctly, a bullet will fly in that direction. If an enemy reaches you, the game is over.</p>\n<p>The final code for today\u2019s project can be found on <a href="https://github.com/deepgram-devs/playing-with-p5">GitHub</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<h2 id="setting-up-state">Setting Up State</h2>\n<p>On your computer, create a new directory and open it in your code editor. Create an <code is:raw>index.html</code> file and add the following to it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Global Variable Section Starts</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerSize </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> score </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> gameOver </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Global Variable Section Ends</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;black&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Score: ${</span><span style="color: #C9D1D9">score</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">gameOver) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, playerSize)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Game logic goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">        } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">36</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Game over! Score: ${</span><span style="color: #C9D1D9">score</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In the second post in this series, you learned how to <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">keep score and show a game over screen</a> - we are using both approaches here.</p>\n<p>The only new thing here is <code is:raw>translate(width/2, height/2)</code>, which moves the origin (0, 0) to the center of the canvas. This means the top-left is now (-500, -500), and the bottom-right is (500, 500). It makes sense to do this when entities often need to refer to the center position.</p>\n<h2 id="create-enemies">Create Enemies</h2>\n<p>At the bottom of your <code is:raw>&lt;script&gt;</code>, create a new <code is:raw>Enemy</code> class:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Enemy</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">direction</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">distance</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> direction</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">25</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">Math.</span><span style="color: #D2A8FF">abs</span><span style="color: #C9D1D9">(distance)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> distance</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> distance</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">Math.</span><span style="color: #D2A8FF">abs</span><span style="color: #C9D1D9">(distance)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x</span><span style="color: #FF7B72">--</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y</span><span style="color: #FF7B72">--</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">touchedPlayer</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> playerSize </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">) gameOver </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;gray&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">ellipse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>When an instance is created, you must provide two arguments - <code is:raw>direction</code> - one of <code is:raw>\'UP\'</code>, <code is:raw>\'DOWN\'</code>, <code is:raw>\'LEFT\'</code>, or <code is:raw>\'RIGHT\'</code>, and <code is:raw>distance</code> - which dictates how far away from the center point the enemy should spawn.</p>\n<p>In the <code is:raw>constructor</code>, the enemies are initially placed, and in <code is:raw>move()</code> they move one pixel closer to the center. <code is:raw>touchedPlayer()</code> uses collision detection \u2014 we <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">learned about that last week</a> \u2014 to set <code is:raw>gameOver</code> to <code is:raw>true</code> if an enemy touches the player in the center of the canvas. Finally, the enemy is drawn at its new (x, y) position.</p>\n<p>In your global variable section, add these line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> directions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemies </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>\n<p>At the bottom of your <code is:raw>setup()</code> function, begin spawning enemies randomly every 2-5 seconds:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">setInterval</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemies.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Enemy</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(directions), width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">}, </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>The first argument will be randomly chosen from the <code is:raw>directions</code> array you just created. The final step is to loop through all existing enemies and run their methods in <code is:raw>draw()</code>. In your game logic section, add this code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemy </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> enemies) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">touchedPlayer</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Open <code is:raw>index.html</code> in your browser, and it should look like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/enemy-spawn.gif" alt="A black square with a small white circle in the middle. The bottom-right reads &#x27;Score: 0&#x27;. Small gray circles representing enemies appear either above, below, left, or right, and move towards the center. An enemy touches the center circle and the screens ays &#x22;Game over&#x22;"></p>\n<h2 id="create-bullets">Create Bullets</h2>\n<p>Currently, there\u2019s no way to defend yourself. When a player presses their arrow keys, a new bullet will be created in that direction.</p>\n<p>At the bottom of your <code is:raw>&lt;script&gt;</code>, create a new <code is:raw>Bullet</code> class. It should look familiar as it works largely the same as the <code is:raw>Enemy</code> class:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bullet</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">direction</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> direction</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">6</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.spent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">touchedEnemy</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemy </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> enemies) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(enemy.x, enemy.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> enemy.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        enemies </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> enemies.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">e</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> e </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> enemy)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.spent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">        score</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">ellipse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>If an enemy is hit, it is removed from the <code is:raw>enemies</code> array, and the bullet\u2019s <code is:raw>this.spent</code> value becomes <code is:raw>true</code>. In the global variable section, add a new array for bullets:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bullets </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>\n<p>Underneath our <code is:raw>enemies</code> loop in <code is:raw>draw()</code>, add a loop for <code is:raw>bullets</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bullet </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bullets) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">bullet.spent) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">touchedEnemy</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>If the bullet has been spent, it won\u2019t be shown or run its collision detection logic. This means a bullet can only successfully hit an enemy once.</p>\n<p>So far, you have used the P5 <code is:raw>preload()</code>, <code is:raw>setup()</code>, and <code is:raw>draw()</code> functions, but there are a host more that are triggered based on user input.</p>\n<p>Unlike the <code is:raw>keyIsPressed</code> variable which is true every frame that a key is pressed, the built-in <code is:raw>keyPressed()</code> function is triggered only once when a user presses a key on their keyboard. In order to trigger the function twice, two distinct presses need to be made - much better for bullet firing. After you end the <code is:raw>draw()</code> function, add this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">keyPressed</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>That\u2019s the core game finished. Here\u2019s how it looks (recording is sped up):</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/bullet-firing.gif" alt="As enemies appraoch the enemy, tiny red dots are fired out of the center player and towards enemies. When they hit an enemy, the bullet and the enemy disappear, and the score goes up by one."></p>\n<h2 id="add-word-prompts">Add Word Prompts</h2>\n<p>Create a new file called <code is:raw>words.js</code>, and copy and paste the content from <a href="https://github.com/deepgram-devs/playing-with-p5/blob/main/words.js">this file on GitHub</a>. This is a slight reformatting of the <a href="https://github.com/adamjgrant/Random-English-Word-Generator-42k-Words-">repository</a> of over 42,000 English words.</p>\n<p>As a note, this is a pretty long word list and includes some pretty long and complex words. You may want to experiment with the word selection you use to alter the difficulty.</p>\n<p>Just before the <code is:raw>&lt;script&gt;</code> tag with our P5 logic, include the <code is:raw>words.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;words.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Then, in your main <code is:raw>&lt;script&gt;</code> tag with our P5 logic, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> words[Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42812</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function gets one word at random and returns the string. You can add it anywhere, but I tend to add these utility functions to the very bottom of my <code is:raw>&lt;script&gt;</code>.</p>\n<p>In your global variable section, store four random words:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> currentWords </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  UP: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  DOWN: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  LEFT: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  RIGHT: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Just after your <code is:raw>bullet</code> loop in the game logic section, draw the four random words to the canvas:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">UP</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">DOWN</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">LEFT</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">LEFT</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Finally, in the <code is:raw>Bullet.touchedEnemy()</code> function, where we increment the score, replace a word when an enemy is hit:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">currentWords[enemy.direction] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925989/blog/2022/03/p5js-deepgram-game/words-change.gif" alt="As enemies are hit, the word in their direction changes."></p>\n<h2 id="shoot-bullets-with-your-voice">Shoot Bullets With Your Voice</h2>\n<p>It\u2019s time to create bullets with your voice! A persistent WebSocket connection will be made with Deepgram, allowing Deepgram to constantly listen to your mic to hear what you say.</p>\n<p>This part of the tutorial will assume you know how to do live browser transcription with Deepgram. If not, we have a <a href="https://blog.deepgram.com/live-transcription-mic-browser/">written and video tutorial available</a> that explains every step in more detail.</p>\n<p>In your global variable section, create one final value so we can display to the user what was heard:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> heard </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span></code></pre>\n<p>At the very bottom of your <code is:raw>&lt;script&gt;</code>, add this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;YOUR-DEEPGRAM-API-KEY&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  ])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      heard </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> direction </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> currentWords) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(currentWords[direction])) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(direction))</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Remember to provide your Deepgram API Key when creating the <code is:raw>socket</code>. At the bottom of this code, a check determines whether any of the directional words were heard and, if so, creates a bullet in that direction.</p>\n<p>Finally, show the user what was heard just under all of the <code is:raw>text()</code> statements in <code is:raw>draw()</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`heard) text(`</span><span style="color: #C9D1D9">We heard </span><span style="color: #A5D6FF">&quot;${heard}&quot;`, -width/2+20, height/2-20)`</span></span></code></pre>\n<h2 id="in-summary">In Summary</h2>\n<p>The fact it was so little code to integrate voice control into this game should be a testament to how easy <a href="https://developers.deepgram.com/documentation/">Deepgram\u2019s Speech Recognition API</a> is to use.</p>\n<p>Once again, a live version of the game can be found <a href="https://deepgram-p5-game.glitch.me/">here</a> and the final codebase on <a href="https://github.com/deepgram-devs/playing-with-p5">GitHub</a>.</p>\n<p>If you want to deploy your own, I encourage you to also read how to <a href="https://blog.deepgram.com/protecting-api-key/">protect your API Key</a> when doing live transcription directly in your browser.</p>\n<p>If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/p5js-deepgram-game/index.md" };
function rawContent() {
  return "\nThis is the final part in a series on P5.js (from here 'P5') - a creative coding library that makes working with the Canvas API much easier. [In part one](https://blog.deepgram.com/p5js-getting-started/), we covered how to draw elements on the screen and react to keyboard and mouse input. We learned how to create common game features in [part two](https://blog.deepgram.com/blog/2022/03/p5js-game-logic/) - collision detection, entity management, and state management.\n\nIn today's tutorial, we'll bring together everything we know to create a voice-controlled game - [try the game out now](https://deepgram-p5-game.glitch.me/). A new enemy appears coming from one of four directions and begins moving towards you every few seconds. Each direction has a random word associated with it, and if said correctly, a bullet will fly in that direction. If an enemy reaches you, the game is over.\n\nThe final code for today's project can be found on [GitHub](https://github.com/deepgram-devs/playing-with-p5).\n\n## Before We Start\n\nYou will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\n## Setting Up State\n\nOn your computer, create a new directory and open it in your code editor. Create an `index.html` file and add the following to it:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head></head>\n  <body>\n    <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js\"><\/script>\n    <script>\n      // Global Variable Section Starts\n      let playerSize = 50\n      let score = 0\n      let gameOver = false\n      // Global Variable Section Ends\n\n      function setup() {\n        createCanvas(1000, 1000)\n        frameRate(30)\n      }\n\n      function draw() {\n        background('black')\n        translate(width / 2, height / 2)\n\n        fill('white')\n        textSize(24)\n        textAlign(RIGHT)\n        text(`Score: ${score}`, width / 2 - 20, height / 2 - 20)\n\n        if (!gameOver) {\n          fill('white')\n          circle(0, 0, playerSize)\n\n          // Game logic goes here\n        } else {\n          fill('white')\n          textSize(36)\n          textAlign(CENTER)\n          text(`Game over! Score: ${score}`, 0, 0)\n        }\n      }\n    <\/script>\n  </body>\n</html>\n```\n\nIn the second post in this series, you learned how to [keep score and show a game over screen](https://blog.deepgram.com/blog/2022/03/p5js-game-logic/) - we are using both approaches here.\n\nThe only new thing here is `translate(width/2, height/2)`, which moves the origin (0, 0) to the center of the canvas. This means the top-left is now (-500, -500), and the bottom-right is (500, 500). It makes sense to do this when entities often need to refer to the center position.\n\n## Create Enemies\n\nAt the bottom of your `<script>`, create a new `Enemy` class:\n\n```js\nclass Enemy {\n  constructor(direction, distance) {\n    this.direction = direction\n    this.size = 25\n    this.x = 0\n    this.y = 0\n\n    if (this.direction == 'UP') this.y = -Math.abs(distance)\n    if (this.direction == 'RIGHT') this.x = distance\n    if (this.direction == 'DOWN') this.y = distance\n    if (this.direction == 'LEFT') this.x = -Math.abs(distance)\n  }\n\n  move() {\n    if (this.direction == 'UP') this.y++\n    if (this.direction == 'RIGHT') this.x--\n    if (this.direction == 'DOWN') this.y--\n    if (this.direction == 'LEFT') this.x++\n  }\n\n  touchedPlayer() {\n    const d = dist(this.x, this.y, 0, 0)\n    if (d < playerSize / 2 + this.size / 2) gameOver = true\n  }\n\n  display() {\n    fill('gray')\n    ellipse(this.x, this.y, this.size)\n  }\n}\n```\n\nWhen an instance is created, you must provide two arguments - `direction` - one of `'UP'`, `'DOWN'`, `'LEFT'`, or `'RIGHT'`, and `distance` - which dictates how far away from the center point the enemy should spawn.\n\nIn the `constructor`, the enemies are initially placed, and in `move()` they move one pixel closer to the center. `touchedPlayer()` uses collision detection -- we [learned about that last week](https://blog.deepgram.com/blog/2022/03/p5js-game-logic/) -- to set `gameOver` to `true` if an enemy touches the player in the center of the canvas. Finally, the enemy is drawn at its new (x, y) position.\n\nIn your global variable section, add these line:\n\n```js\nlet directions = ['UP', 'DOWN', 'LEFT', 'RIGHT']\nlet enemies = []\n```\n\nAt the bottom of your `setup()` function, begin spawning enemies randomly every 2-5 seconds:\n\n```js\nsetInterval(() => {\n  enemies.push(new Enemy(random(directions), width / 4, width / 2))\n}, random(2000, 5000))\n```\n\nThe first argument will be randomly chosen from the `directions` array you just created. The final step is to loop through all existing enemies and run their methods in `draw()`. In your game logic section, add this code:\n\n```js\nfor (let enemy of enemies) {\n  enemy.move()\n  enemy.touchedPlayer()\n  enemy.display()\n}\n```\n\nOpen `index.html` in your browser, and it should look like this:\n\n![A black square with a small white circle in the middle. The bottom-right reads 'Score: 0'. Small gray circles representing enemies appear either above, below, left, or right, and move towards the center. An enemy touches the center circle and the screens ays \"Game over\"](https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/enemy-spawn.gif)\n\n## Create Bullets\n\nCurrently, there's no way to defend yourself. When a player presses their arrow keys, a new bullet will be created in that direction.\n\nAt the bottom of your `<script>`, create a new `Bullet` class. It should look familiar as it works largely the same as the `Enemy` class:\n\n```js\nclass Bullet {\n  constructor(direction) {\n    this.direction = direction\n    this.size = 5\n    this.speed = 6\n    this.x = 0\n    this.y = 0\n    this.spent = false\n  }\n\n  move() {\n    if (this.direction == 'UP') this.y -= this.speed\n    if (this.direction == 'RIGHT') this.x += this.speed\n    if (this.direction == 'DOWN') this.y += this.speed\n    if (this.direction == 'LEFT') this.x -= this.speed\n  }\n\n  touchedEnemy() {\n    for (let enemy of enemies) {\n      const d = dist(enemy.x, enemy.y, this.x, this.y)\n      if (d < this.size / 2 + enemy.size / 2) {\n        enemies = enemies.filter((e) => e != enemy)\n        this.spent = true\n        score++\n      }\n    }\n  }\n\n  display() {\n    fill('red')\n    ellipse(this.x, this.y, this.size)\n  }\n}\n```\n\nIf an enemy is hit, it is removed from the `enemies` array, and the bullet's `this.spent` value becomes `true`. In the global variable section, add a new array for bullets:\n\n```js\nlet bullets = []\n```\n\nUnderneath our `enemies` loop in `draw()`, add a loop for `bullets`:\n\n```js\nfor (let bullet of bullets) {\n  if (!bullet.spent) {\n    bullet.move()\n    bullet.touchedEnemy()\n    bullet.display()\n  }\n}\n```\n\nIf the bullet has been spent, it won't be shown or run its collision detection logic. This means a bullet can only successfully hit an enemy once.\n\nSo far, you have used the P5 `preload()`, `setup()`, and `draw()` functions, but there are a host more that are triggered based on user input.\n\nUnlike the `keyIsPressed` variable which is true every frame that a key is pressed, the built-in `keyPressed()` function is triggered only once when a user presses a key on their keyboard. In order to trigger the function twice, two distinct presses need to be made - much better for bullet firing. After you end the `draw()` function, add this:\n\n```js\nfunction keyPressed() {\n  if (key == 'ArrowLeft') bullets.push(new Bullet('LEFT'))\n  if (key == 'ArrowRight') bullets.push(new Bullet('RIGHT'))\n  if (key == 'ArrowUp') bullets.push(new Bullet('UP'))\n  if (key == 'ArrowDown') bullets.push(new Bullet('DOWN'))\n}\n```\n\nThat's the core game finished. Here's how it looks (recording is sped up):\n\n![As enemies appraoch the enemy, tiny red dots are fired out of the center player and towards enemies. When they hit an enemy, the bullet and the enemy disappear, and the score goes up by one.](https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/bullet-firing.gif)\n\n## Add Word Prompts\n\nCreate a new file called `words.js`, and copy and paste the content from [this file on GitHub](https://github.com/deepgram-devs/playing-with-p5/blob/main/words.js). This is a slight reformatting of the [repository](https://github.com/adamjgrant/Random-English-Word-Generator-42k-Words-) of over 42,000 English words.\n\nAs a note, this is a pretty long word list and includes some pretty long and complex words. You may want to experiment with the word selection you use to alter the difficulty.\n\nJust before the `<script>` tag with our P5 logic, include the `words.js` file:\n\n```html\n<script src=\"words.js\"><\/script>\n```\n\nThen, in your main `<script>` tag with our P5 logic, add the following:\n\n```js\nfunction getRandomWord() {\n  return words[Math.floor(Math.random() * 42812)]\n}\n```\n\nThis function gets one word at random and returns the string. You can add it anywhere, but I tend to add these utility functions to the very bottom of my `<script>`.\n\nIn your global variable section, store four random words:\n\n```js\nlet currentWords = {\n  UP: getRandomWord(),\n  DOWN: getRandomWord(),\n  LEFT: getRandomWord(),\n  RIGHT: getRandomWord(),\n}\n```\n\nJust after your `bullet` loop in the game logic section, draw the four random words to the canvas:\n\n```js\nfill('white')\ntextSize(24)\ntextAlign(CENTER)\ntext(currentWords.UP, 0, -height / 2 + 48)\ntext(currentWords.DOWN, 0, height / 2 - 48)\ntextAlign(RIGHT)\ntext(currentWords.RIGHT, width / 2 - 48, 0)\ntextAlign(LEFT)\ntext(currentWords.LEFT, -width / 2 + 48, 0)\n```\n\nFinally, in the `Bullet.touchedEnemy()` function, where we increment the score, replace a word when an enemy is hit:\n\n```js\ncurrentWords[enemy.direction] = getRandomWord()\n```\n\n![As enemies are hit, the word in their direction changes.](https://res.cloudinary.com/deepgram/image/upload/v1646925989/blog/2022/03/p5js-deepgram-game/words-change.gif)\n\n## Shoot Bullets With Your Voice\n\nIt's time to create bullets with your voice! A persistent WebSocket connection will be made with Deepgram, allowing Deepgram to constantly listen to your mic to hear what you say.\n\nThis part of the tutorial will assume you know how to do live browser transcription with Deepgram. If not, we have a [written and video tutorial available](https://blog.deepgram.com/live-transcription-mic-browser/) that explains every step in more detail.\n\nIn your global variable section, create one final value so we can display to the user what was heard:\n\n```js\nlet heard = ''\n```\n\nAt the very bottom of your `<script>`, add this:\n\n```js\nnavigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n  const mediaRecorder = new MediaRecorder(stream)\n  const socket = new WebSocket('wss://api.deepgram.com/v1/listen', [\n    'token',\n    'YOUR-DEEPGRAM-API-KEY',\n  ])\n\n  socket.onopen = () => {\n    mediaRecorder.addEventListener('dataavailable', async (event) => {\n      if (event.data.size > 0 && socket.readyState == 1) socket.send(event.data)\n    })\n    mediaRecorder.start(1000)\n  }\n\n  socket.onmessage = (message) => {\n    const received = JSON.parse(message.data)\n    const transcript = received.channel.alternatives[0].transcript\n    if (transcript && received.is_final) {\n      heard = transcript\n      for (let direction in currentWords) {\n        if (transcript.includes(currentWords[direction])) {\n          bullets.push(new Bullet(direction))\n        }\n      }\n    }\n  }\n})\n```\n\nRemember to provide your Deepgram API Key when creating the `socket`. At the bottom of this code, a check determines whether any of the directional words were heard and, if so, creates a bullet in that direction.\n\nFinally, show the user what was heard just under all of the `text()` statements in `draw()`:\n\n```js\nfill('green')\nif(`heard) text(`We heard \"${heard}\"`, -width/2+20, height/2-20)`\n```\n\n## In Summary\n\nThe fact it was so little code to integrate voice control into this game should be a testament to how easy [Deepgram's Speech Recognition API](https://developers.deepgram.com/documentation/) is to use.\n\nOnce again, a live version of the game can be found [here](https://deepgram-p5-game.glitch.me/) and the final codebase on [GitHub](https://github.com/deepgram-devs/playing-with-p5).\n\nIf you want to deploy your own, I encourage you to also read how to [protect your API Key](https://blog.deepgram.com/protecting-api-key/) when doing live transcription directly in your browser.\n\nIf you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ";
}
function compiledContent() {
  return '<p>This is the final part in a series on P5.js (from here \u2018P5\u2019) - a creative coding library that makes working with the Canvas API much easier. <a href="https://blog.deepgram.com/p5js-getting-started/">In part one</a>, we covered how to draw elements on the screen and react to keyboard and mouse input. We learned how to create common game features in <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">part two</a> - collision detection, entity management, and state management.</p>\n<p>In today\u2019s tutorial, we\u2019ll bring together everything we know to create a voice-controlled game - <a href="https://deepgram-p5-game.glitch.me/">try the game out now</a>. A new enemy appears coming from one of four directions and begins moving towards you every few seconds. Each direction has a random word associated with it, and if said correctly, a bullet will fly in that direction. If an enemy reaches you, the game is over.</p>\n<p>The final code for today\u2019s project can be found on <a href="https://github.com/deepgram-devs/playing-with-p5">GitHub</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<h2 id="setting-up-state">Setting Up State</h2>\n<p>On your computer, create a new directory and open it in your code editor. Create an <code is:raw>index.html</code> file and add the following to it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Global Variable Section Starts</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerSize </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> score </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> gameOver </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Global Variable Section Ends</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;black&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Score: ${</span><span style="color: #C9D1D9">score</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">gameOver) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, playerSize)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Game logic goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">        } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">36</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Game over! Score: ${</span><span style="color: #C9D1D9">score</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In the second post in this series, you learned how to <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">keep score and show a game over screen</a> - we are using both approaches here.</p>\n<p>The only new thing here is <code is:raw>translate(width/2, height/2)</code>, which moves the origin (0, 0) to the center of the canvas. This means the top-left is now (-500, -500), and the bottom-right is (500, 500). It makes sense to do this when entities often need to refer to the center position.</p>\n<h2 id="create-enemies">Create Enemies</h2>\n<p>At the bottom of your <code is:raw>&lt;script&gt;</code>, create a new <code is:raw>Enemy</code> class:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Enemy</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">direction</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">distance</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> direction</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">25</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">Math.</span><span style="color: #D2A8FF">abs</span><span style="color: #C9D1D9">(distance)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> distance</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> distance</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">Math.</span><span style="color: #D2A8FF">abs</span><span style="color: #C9D1D9">(distance)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x</span><span style="color: #FF7B72">--</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y</span><span style="color: #FF7B72">--</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">touchedPlayer</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> playerSize </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">) gameOver </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;gray&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">ellipse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>When an instance is created, you must provide two arguments - <code is:raw>direction</code> - one of <code is:raw>\'UP\'</code>, <code is:raw>\'DOWN\'</code>, <code is:raw>\'LEFT\'</code>, or <code is:raw>\'RIGHT\'</code>, and <code is:raw>distance</code> - which dictates how far away from the center point the enemy should spawn.</p>\n<p>In the <code is:raw>constructor</code>, the enemies are initially placed, and in <code is:raw>move()</code> they move one pixel closer to the center. <code is:raw>touchedPlayer()</code> uses collision detection \u2014 we <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">learned about that last week</a> \u2014 to set <code is:raw>gameOver</code> to <code is:raw>true</code> if an enemy touches the player in the center of the canvas. Finally, the enemy is drawn at its new (x, y) position.</p>\n<p>In your global variable section, add these line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> directions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemies </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>\n<p>At the bottom of your <code is:raw>setup()</code> function, begin spawning enemies randomly every 2-5 seconds:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">setInterval</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemies.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Enemy</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(directions), width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">}, </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>The first argument will be randomly chosen from the <code is:raw>directions</code> array you just created. The final step is to loop through all existing enemies and run their methods in <code is:raw>draw()</code>. In your game logic section, add this code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemy </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> enemies) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">touchedPlayer</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Open <code is:raw>index.html</code> in your browser, and it should look like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/enemy-spawn.gif" alt="A black square with a small white circle in the middle. The bottom-right reads &#x27;Score: 0&#x27;. Small gray circles representing enemies appear either above, below, left, or right, and move towards the center. An enemy touches the center circle and the screens ays &#x22;Game over&#x22;"></p>\n<h2 id="create-bullets">Create Bullets</h2>\n<p>Currently, there\u2019s no way to defend yourself. When a player presses their arrow keys, a new bullet will be created in that direction.</p>\n<p>At the bottom of your <code is:raw>&lt;script&gt;</code>, create a new <code is:raw>Bullet</code> class. It should look familiar as it works largely the same as the <code is:raw>Enemy</code> class:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bullet</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">direction</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> direction</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">6</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.spent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">touchedEnemy</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemy </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> enemies) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(enemy.x, enemy.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> enemy.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        enemies </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> enemies.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">e</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> e </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> enemy)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.spent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">        score</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">ellipse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>If an enemy is hit, it is removed from the <code is:raw>enemies</code> array, and the bullet\u2019s <code is:raw>this.spent</code> value becomes <code is:raw>true</code>. In the global variable section, add a new array for bullets:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bullets </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>\n<p>Underneath our <code is:raw>enemies</code> loop in <code is:raw>draw()</code>, add a loop for <code is:raw>bullets</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bullet </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bullets) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">bullet.spent) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">touchedEnemy</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>If the bullet has been spent, it won\u2019t be shown or run its collision detection logic. This means a bullet can only successfully hit an enemy once.</p>\n<p>So far, you have used the P5 <code is:raw>preload()</code>, <code is:raw>setup()</code>, and <code is:raw>draw()</code> functions, but there are a host more that are triggered based on user input.</p>\n<p>Unlike the <code is:raw>keyIsPressed</code> variable which is true every frame that a key is pressed, the built-in <code is:raw>keyPressed()</code> function is triggered only once when a user presses a key on their keyboard. In order to trigger the function twice, two distinct presses need to be made - much better for bullet firing. After you end the <code is:raw>draw()</code> function, add this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">keyPressed</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>That\u2019s the core game finished. Here\u2019s how it looks (recording is sped up):</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/bullet-firing.gif" alt="As enemies appraoch the enemy, tiny red dots are fired out of the center player and towards enemies. When they hit an enemy, the bullet and the enemy disappear, and the score goes up by one."></p>\n<h2 id="add-word-prompts">Add Word Prompts</h2>\n<p>Create a new file called <code is:raw>words.js</code>, and copy and paste the content from <a href="https://github.com/deepgram-devs/playing-with-p5/blob/main/words.js">this file on GitHub</a>. This is a slight reformatting of the <a href="https://github.com/adamjgrant/Random-English-Word-Generator-42k-Words-">repository</a> of over 42,000 English words.</p>\n<p>As a note, this is a pretty long word list and includes some pretty long and complex words. You may want to experiment with the word selection you use to alter the difficulty.</p>\n<p>Just before the <code is:raw>&lt;script&gt;</code> tag with our P5 logic, include the <code is:raw>words.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;words.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Then, in your main <code is:raw>&lt;script&gt;</code> tag with our P5 logic, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> words[Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42812</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function gets one word at random and returns the string. You can add it anywhere, but I tend to add these utility functions to the very bottom of my <code is:raw>&lt;script&gt;</code>.</p>\n<p>In your global variable section, store four random words:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> currentWords </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  UP: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  DOWN: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  LEFT: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">  RIGHT: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Just after your <code is:raw>bullet</code> loop in the game logic section, draw the four random words to the canvas:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">UP</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">DOWN</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">LEFT</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">LEFT</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Finally, in the <code is:raw>Bullet.touchedEnemy()</code> function, where we increment the score, replace a word when an enemy is hit:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">currentWords[enemy.direction] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925989/blog/2022/03/p5js-deepgram-game/words-change.gif" alt="As enemies are hit, the word in their direction changes."></p>\n<h2 id="shoot-bullets-with-your-voice">Shoot Bullets With Your Voice</h2>\n<p>It\u2019s time to create bullets with your voice! A persistent WebSocket connection will be made with Deepgram, allowing Deepgram to constantly listen to your mic to hear what you say.</p>\n<p>This part of the tutorial will assume you know how to do live browser transcription with Deepgram. If not, we have a <a href="https://blog.deepgram.com/live-transcription-mic-browser/">written and video tutorial available</a> that explains every step in more detail.</p>\n<p>In your global variable section, create one final value so we can display to the user what was heard:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> heard </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span></code></pre>\n<p>At the very bottom of your <code is:raw>&lt;script&gt;</code>, add this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;YOUR-DEEPGRAM-API-KEY&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  ])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      heard </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> direction </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> currentWords) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(currentWords[direction])) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(direction))</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Remember to provide your Deepgram API Key when creating the <code is:raw>socket</code>. At the bottom of this code, a check determines whether any of the directional words were heard and, if so, creates a bullet in that direction.</p>\n<p>Finally, show the user what was heard just under all of the <code is:raw>text()</code> statements in <code is:raw>draw()</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`heard) text(`</span><span style="color: #C9D1D9">We heard </span><span style="color: #A5D6FF">&quot;${heard}&quot;`, -width/2+20, height/2-20)`</span></span></code></pre>\n<h2 id="in-summary">In Summary</h2>\n<p>The fact it was so little code to integrate voice control into this game should be a testament to how easy <a href="https://developers.deepgram.com/documentation/">Deepgram\u2019s Speech Recognition API</a> is to use.</p>\n<p>Once again, a live version of the game can be found <a href="https://deepgram-p5-game.glitch.me/">here</a> and the final codebase on <a href="https://github.com/deepgram-devs/playing-with-p5">GitHub</a>.</p>\n<p>If you want to deploy your own, I encourage you to also read how to <a href="https://blog.deepgram.com/protecting-api-key/">protect your API Key</a> when doing live transcription directly in your browser.</p>\n<p>If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/p5js-deepgram-game/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>This is the final part in a series on P5.js (from here ‘P5’) - a creative coding library that makes working with the Canvas API much easier. <a href="https://blog.deepgram.com/p5js-getting-started/">In part one</a>, we covered how to draw elements on the screen and react to keyboard and mouse input. We learned how to create common game features in <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">part two</a> - collision detection, entity management, and state management.</p>
<p>In today’s tutorial, we’ll bring together everything we know to create a voice-controlled game - <a href="https://deepgram-p5-game.glitch.me/">try the game out now</a>. A new enemy appears coming from one of four directions and begins moving towards you every few seconds. Each direction has a random word associated with it, and if said correctly, a bullet will fly in that direction. If an enemy reaches you, the game is over.</p>
<p>The final code for today’s project can be found on <a href="https://github.com/deepgram-devs/playing-with-p5">GitHub</a>.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>
<h2 id="setting-up-state">Setting Up State</h2>
<p>On your computer, create a new directory and open it in your code editor. Create an <code>index.html</code> file and add the following to it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Global Variable Section Starts</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerSize </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> score </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> gameOver </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Global Variable Section Ends</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;black&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">translate</span><span style="color: #C9D1D9">(width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`Score: \${</span><span style="color: #C9D1D9">score</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">gameOver) {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, playerSize)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Game logic goes here</span></span>
<span class="line"><span style="color: #C9D1D9">        } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">36</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`Game over! Score: \${</span><span style="color: #C9D1D9">score</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>In the second post in this series, you learned how to <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">keep score and show a game over screen</a> - we are using both approaches here.</p>
<p>The only new thing here is <code>translate(width/2, height/2)</code>, which moves the origin (0, 0) to the center of the canvas. This means the top-left is now (-500, -500), and the bottom-right is (500, 500). It makes sense to do this when entities often need to refer to the center position.</p>
<h2 id="create-enemies">Create Enemies</h2>
<p>At the bottom of your <code>&lt;script&gt;</code>, create a new <code>Enemy</code> class:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Enemy</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">direction</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">distance</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> direction</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">25</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">Math.</span><span style="color: #D2A8FF">abs</span><span style="color: #C9D1D9">(distance)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> distance</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> distance</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">Math.</span><span style="color: #D2A8FF">abs</span><span style="color: #C9D1D9">(distance)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y</span><span style="color: #FF7B72">++</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x</span><span style="color: #FF7B72">--</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y</span><span style="color: #FF7B72">--</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x</span><span style="color: #FF7B72">++</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">touchedPlayer</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> playerSize </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">) gameOver </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;gray&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">ellipse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>When an instance is created, you must provide two arguments - <code>direction</code> - one of <code>'UP'</code>, <code>'DOWN'</code>, <code>'LEFT'</code>, or <code>'RIGHT'</code>, and <code>distance</code> - which dictates how far away from the center point the enemy should spawn.</p>
<p>In the <code>constructor</code>, the enemies are initially placed, and in <code>move()</code> they move one pixel closer to the center. <code>touchedPlayer()</code> uses collision detection — we <a href="https://blog.deepgram.com/blog/2022/03/p5js-game-logic/">learned about that last week</a> — to set <code>gameOver</code> to <code>true</code> if an enemy touches the player in the center of the canvas. Finally, the enemy is drawn at its new (x, y) position.</p>
<p>In your global variable section, add these line:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> directions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemies </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>
<p>At the bottom of your <code>setup()</code> function, begin spawning enemies randomly every 2-5 seconds:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">setInterval</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  enemies.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Enemy</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(directions), width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">}, </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>The first argument will be randomly chosen from the <code>directions</code> array you just created. The final step is to loop through all existing enemies and run their methods in <code>draw()</code>. In your game logic section, add this code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemy </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> enemies) {</span></span>
<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">touchedPlayer</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  enemy.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Open <code>index.html</code> in your browser, and it should look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/enemy-spawn.gif" alt="A black square with a small white circle in the middle. The bottom-right reads 'Score: 0'. Small gray circles representing enemies appear either above, below, left, or right, and move towards the center. An enemy touches the center circle and the screens ays &quot;Game over&quot;"></p>
<h2 id="create-bullets">Create Bullets</h2>
<p>Currently, there’s no way to defend yourself. When a player presses their arrow keys, a new bullet will be created in that direction.</p>
<p>At the bottom of your <code>&lt;script&gt;</code>, create a new <code>Bullet</code> class. It should look familiar as it works largely the same as the <code>Enemy</code> class:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bullet</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">direction</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> direction</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">5</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">6</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.spent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.direction </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.speed</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">touchedEnemy</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> enemy </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> enemies) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(enemy.x, enemy.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> enemy.size </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        enemies </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> enemies.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">e</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> e </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> enemy)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.spent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"><span style="color: #C9D1D9">        score</span><span style="color: #FF7B72">++</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">ellipse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.size)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>If an enemy is hit, it is removed from the <code>enemies</code> array, and the bullet’s <code>this.spent</code> value becomes <code>true</code>. In the global variable section, add a new array for bullets:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bullets </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span></code></pre>
<p>Underneath our <code>enemies</code> loop in <code>draw()</code>, add a loop for <code>bullets</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bullet </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bullets) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">bullet.spent) {</span></span>
<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">touchedEnemy</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    bullet.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>If the bullet has been spent, it won’t be shown or run its collision detection logic. This means a bullet can only successfully hit an enemy once.</p>
<p>So far, you have used the P5 <code>preload()</code>, <code>setup()</code>, and <code>draw()</code> functions, but there are a host more that are triggered based on user input.</p>
<p>Unlike the <code>keyIsPressed</code> variable which is true every frame that a key is pressed, the built-in <code>keyPressed()</code> function is triggered only once when a user presses a key on their keyboard. In order to trigger the function twice, two distinct presses need to be made - much better for bullet firing. After you end the <code>draw()</code> function, add this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">keyPressed</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;LEFT&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;RIGHT&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;UP&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;DOWN&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>That’s the core game finished. Here’s how it looks (recording is sped up):</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925990/blog/2022/03/p5js-deepgram-game/bullet-firing.gif" alt="As enemies appraoch the enemy, tiny red dots are fired out of the center player and towards enemies. When they hit an enemy, the bullet and the enemy disappear, and the score goes up by one."></p>
<h2 id="add-word-prompts">Add Word Prompts</h2>
<p>Create a new file called <code>words.js</code>, and copy and paste the content from <a href="https://github.com/deepgram-devs/playing-with-p5/blob/main/words.js">this file on GitHub</a>. This is a slight reformatting of the <a href="https://github.com/adamjgrant/Random-English-Word-Generator-42k-Words-">repository</a> of over 42,000 English words.</p>
<p>As a note, this is a pretty long word list and includes some pretty long and complex words. You may want to experiment with the word selection you use to alter the difficulty.</p>
<p>Just before the <code>&lt;script&gt;</code> tag with our P5 logic, include the <code>words.js</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;words.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Then, in your main <code>&lt;script&gt;</code> tag with our P5 logic, add the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> words[Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">42812</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This function gets one word at random and returns the string. You can add it anywhere, but I tend to add these utility functions to the very bottom of my <code>&lt;script&gt;</code>.</p>
<p>In your global variable section, store four random words:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> currentWords </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  UP: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>
<span class="line"><span style="color: #C9D1D9">  DOWN: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>
<span class="line"><span style="color: #C9D1D9">  LEFT: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>
<span class="line"><span style="color: #C9D1D9">  RIGHT: </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">(),</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Just after your <code>bullet</code> loop in the game logic section, draw the four random words to the canvas:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">UP</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">DOWN</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, height </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">RIGHT</span><span style="color: #C9D1D9">, width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">LEFT</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(currentWords.</span><span style="color: #79C0FF">LEFT</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">width </span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">48</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Finally, in the <code>Bullet.touchedEnemy()</code> function, where we increment the score, replace a word when an enemy is hit:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">currentWords[enemy.direction] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomWord</span><span style="color: #C9D1D9">()</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646925989/blog/2022/03/p5js-deepgram-game/words-change.gif" alt="As enemies are hit, the word in their direction changes."></p>
<h2 id="shoot-bullets-with-your-voice">Shoot Bullets With Your Voice</h2>
<p>It’s time to create bullets with your voice! A persistent WebSocket connection will be made with Deepgram, allowing Deepgram to constantly listen to your mic to hear what you say.</p>
<p>This part of the tutorial will assume you know how to do live browser transcription with Deepgram. If not, we have a <a href="https://blog.deepgram.com/live-transcription-mic-browser/">written and video tutorial available</a> that explains every step in more detail.</p>
<p>In your global variable section, create one final value so we can display to the user what was heard:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> heard </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span></code></pre>
<p>At the very bottom of your <code>&lt;script&gt;</code>, add this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;YOUR-DEEPGRAM-API-KEY&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  ])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">      heard </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> direction </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> currentWords) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(currentWords[direction])) {</span></span>
<span class="line"><span style="color: #C9D1D9">          bullets.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bullet</span><span style="color: #C9D1D9">(direction))</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Remember to provide your Deepgram API Key when creating the <code>socket</code>. At the bottom of this code, a check determines whether any of the directional words were heard and, if so, creates a bullet in that direction.</p>
<p>Finally, show the user what was heard just under all of the <code>text()</code> statements in <code>draw()</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`heard) text(\`</span><span style="color: #C9D1D9">We heard </span><span style="color: #A5D6FF">&quot;\${heard}&quot;\`, -width/2+20, height/2-20)\`</span></span></code></pre>
<h2 id="in-summary">In Summary</h2>
<p>The fact it was so little code to integrate voice control into this game should be a testament to how easy <a href="https://developers.deepgram.com/documentation/">Deepgram’s Speech Recognition API</a> is to use.</p>
<p>Once again, a live version of the game can be found <a href="https://deepgram-p5-game.glitch.me/">here</a> and the final codebase on <a href="https://github.com/deepgram-devs/playing-with-p5">GitHub</a>.</p>
<p>If you want to deploy your own, I encourage you to also read how to <a href="https://blog.deepgram.com/protecting-api-key/">protect your API Key</a> when doing live transcription directly in your browser.</p>
<p>If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/p5js-deepgram-game/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
