import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
/* empty css                           */import 'axios';
/* empty css                          *//* empty css                           *//* empty css                          *//* empty css                              *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           *//* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "preparing-dependencies", "text": "Preparing Dependencies" }, { "depth": 2, "slug": "download-video-and-convert-to-mp3", "text": "Download Video and Convert to MP3" }, { "depth": 2, "slug": "get-transcript-from-deepgram", "text": "Get Transcript from Deepgram" }, { "depth": 2, "slug": "saving-transcript-and-deleting-media", "text": "Saving Transcript and Deleting Media" }, { "depth": 2, "slug": "summary", "text": "Summary" }], "source": "In this blog post we will be creating transcripts for YouTube videos using Deepgram's Speech Recognition API. First, we will download videos and convert them to mp3 audio files. Then, we will use Deepgram to generate a transcript. Finally, we will store the transcript in a text file and delete the media file.\n\nThe final project code can be found at https://github.com/deepgram-devs/youtube-transcripts.\n\nWatch this tutorial as a video:\n\n<YouTube id=\"LrNS_q886uQ\"></YouTube>\n\nWe need a sample video, so I am using a [Shang-Chi and The Legend of The Ten Rings teaser trailer](https://www.youtube.com/watch?v=ir-mWUYH_uo) - if that is a spoiler for you please go ahead and grab another video link.\n\n<YouTube id=\"ir-mWUYH_uo\"></YouTube>\n\n## Before We Start\n\nYou will need:\n\n* Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n* A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n* A YouTube Video ID which is part of the URL of a video. The one we will be using is `ir-mWUYH_uo`.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n```\nnpm install @deepgram/sdk ffmpeg-static youtube-mp3-downloader\n```\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these four packages:\n\n```js\nconst fs = require('fs')\nconst YoutubeMp3Downloader = require('youtube-mp3-downloader')\nconst { Deepgram } = require('@deepgram/sdk')\nconst ffmpeg = require('ffmpeg-static')\n```\n\n`fs` is the built-in file system module for Node.js. It is used to read and write files which we will be doing a few times throughout this post. `ffmpeg-static` includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.\n\nInitialize the Deepgram and YouTubeMp3Downloader clients:\n\n```js\nconst deepgram = new Deepgram('YOUR DEEPGRAM KEY')\nconst YD = new YoutubeMp3Downloader({\n  ffmpegPath: ffmpeg,\n  outputPath: './',\n  youtubeVideoQuality: 'highestaudio',\n})\n```\n\n## Download Video and Convert to MP3\n\nUnder the hood, the `youtube-mp3-downloader` package will download the video and convert it with `ffmpeg` on our behalf. While it is doing this it triggers several events - we are going to use the `progress` event so we know how far through the download we are, and `finished` which indicates we can move on.\n\n```js\nYD.download('ir-mWUYH_uo')\n\nYD.on('progress', (data) => {\n  console.log(data.progress.percentage + '% downloaded')\n})\n\nYD.on('finished', async (err, video) => {\n  const videoFileName = video.file\n  console.log(`Downloaded ${videoFileName}`)\n\n  // Continue on to get transcript here\n})\n```\n\nSave and run the file with `node index.js` and you should see the file progress in your terminal and then have the file available in your file directory.\n\n![A terminal showing various percentages downloaded ending with 100%. The final log states the final filename.](https://res.cloudinary.com/deepgram/image/upload/v1635374325/blog/2021/11/transcribe-youtube-videos-nodejs/downloaded.png)\n\n## Get Transcript from Deepgram\n\nWhere the comment is above, prepare and create a Deepgram transcription request:\n\n```js\nconst file = {\n  buffer: fs.readFileSync(videoFileName),\n  mimetype: 'audio/mp3',\n}\nconst options = {\n  punctuate: true,\n}\n\nconst result = await deepgram.transcription\n  .preRecorded(file, options)\n  .catch((e) => console.log(e))\nconsole.log(result)\n```\n\nThere are lots of options which can make your transcript more useful including diarization which recognizes different speakers, a profanity filter which replaces profanity with nearby terms, and punctuation. We are using punctuation in this tutorial to show you how setting options works.\n\nRerun your code and you should see a JSON object printed in your terminal.\n\n![A terminal showing the file being downloaded, and then an object containing data from Deepgram. Within the object is a results object with a channels array. Further content is ommitted from the screenshot as it is nested too far.](https://res.cloudinary.com/deepgram/image/upload/v1635374324/blog/2021/11/transcribe-youtube-videos-nodejs/transcript.png)\n\n## Saving Transcript and Deleting Media\n\nThere is a lot of data that comes back from Deepgram, but all we want is the transcript which, with the options we provided, is a single string of text. Add the following line to access just the transcript:\n\n```js\nconst transcript = result.results.channels[0].alternatives[0].transcript\n```\n\nNow we have the string, we can create a text file with it:\n\n```js\nfs.writeFileSync(\n  `${videoFileName}.txt`,\n  transcript,\n  () => `Wrote ${videoFileName}.txt`\n)\n```\n\nThen, if desired, delete the mp3 file:\n\n```js\nfs.unlinkSync(videoFileName)\n```\n\n## Summary\n\nTranscribing YouTube videos has never been easier thanks to Deepgram's Speech Recognition API and the Deepgram Node SDK. You can find the final project code at https://github.com/deepgram-devs/youtube-transcripts.\n\nCheck out the other options supported by the [Deepgram Node SDK](https://github.com/deepgram/node-sdk) and if you have any questions feel free to reach out to us on Twitter (we are [@DeepgramDevs](https://twitter.com/DeepgramDevs)).", "html": '<p>In this blog post we will be creating transcripts for YouTube videos using Deepgram\u2019s Speech Recognition API. First, we will download videos and convert them to mp3 audio files. Then, we will use Deepgram to generate a transcript. Finally, we will store the transcript in a text file and delete the media file.</p>\n<p>The final project code can be found at <a href="https://github.com/deepgram-devs/youtube-transcripts">https://github.com/deepgram-devs/youtube-transcripts</a>.</p>\n<p>Watch this tutorial as a video:</p>\n<YouTube id="LrNS_q886uQ" />\n<p>We need a sample video, so I am using a <a href="https://www.youtube.com/watch?v=ir-mWUYH_uo">Shang-Chi and The Legend of The Ten Rings teaser trailer</a> - if that is a spoiler for you please go ahead and grab another video link.</p>\n<YouTube id="ir-mWUYH_uo" />\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A YouTube Video ID which is part of the URL of a video. The one we will be using is <code is:raw>ir-mWUYH_uo</code>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk ffmpeg-static youtube-mp3-downloader</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these four packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">YoutubeMp3Downloader</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;youtube-mp3-downloader&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpeg</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p><code is:raw>fs</code> is the built-in file system module for Node.js. It is used to read and write files which we will be doing a few times throughout this post. <code is:raw>ffmpeg-static</code> includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.</p>\n<p>Initialize the Deepgram and YouTubeMp3Downloader clients:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">YoutubeMp3Downloader</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  ffmpegPath: ffmpeg,</span></span>\n<span class="line"><span style="color: #C9D1D9">  outputPath: </span><span style="color: #A5D6FF">&#39;./&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  youtubeVideoQuality: </span><span style="color: #A5D6FF">&#39;highestaudio&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="download-video-and-convert-to-mp3">Download Video and Convert to MP3</h2>\n<p>Under the hood, the <code is:raw>youtube-mp3-downloader</code> package will download the video and convert it with <code is:raw>ffmpeg</code> on our behalf. While it is doing this it triggers several events - we are going to use the <code is:raw>progress</code> event so we know how far through the download we are, and <code is:raw>finished</code> which indicates we can move on.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">download</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ir-mWUYH_uo&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;progress&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data.progress.percentage </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;% downloaded&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;finished&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">video</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">videoFileName</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> video.file</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Downloaded ${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Continue on to get transcript here</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Save and run the file with <code is:raw>node index.js</code> and you should see the file progress in your terminal and then have the file available in your file directory.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635374325/blog/2021/11/transcribe-youtube-videos-nodejs/downloaded.png" alt="A terminal showing various percentages downloaded ending with 100%. The final log states the final filename."></p>\n<h2 id="get-transcript-from-deepgram">Get Transcript from Deepgram</h2>\n<p>Where the comment is above, prepare and create a Deepgram transcription request:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(videoFileName),</span></span>\n<span class="line"><span style="color: #C9D1D9">  mimetype: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">options</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(file, options)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">e</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(e))</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(result)</span></span></code></pre>\n<p>There are lots of options which can make your transcript more useful including diarization which recognizes different speakers, a profanity filter which replaces profanity with nearby terms, and punctuation. We are using punctuation in this tutorial to show you how setting options works.</p>\n<p>Rerun your code and you should see a JSON object printed in your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635374324/blog/2021/11/transcribe-youtube-videos-nodejs/transcript.png" alt="A terminal showing the file being downloaded, and then an object containing data from Deepgram. Within the object is a results object with a channels array. Further content is ommitted from the screenshot as it is nested too far."></p>\n<h2 id="saving-transcript-and-deleting-media">Saving Transcript and Deleting Media</h2>\n<p>There is a lot of data that comes back from Deepgram, but all we want is the transcript which, with the options we provided, is a single string of text. Add the following line to access just the transcript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> result.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span></code></pre>\n<p>Now we have the string, we can create a text file with it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">fs.</span><span style="color: #D2A8FF">writeFileSync</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}.txt`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  transcript,</span></span>\n<span class="line"><span style="color: #C9D1D9">  () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`Wrote ${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}.txt`</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Then, if desired, delete the mp3 file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">fs.</span><span style="color: #D2A8FF">unlinkSync</span><span style="color: #C9D1D9">(videoFileName)</span></span></code></pre>\n<h2 id="summary">Summary</h2>\n<p>Transcribing YouTube videos has never been easier thanks to Deepgram\u2019s Speech Recognition API and the Deepgram Node SDK. You can find the final project code at <a href="https://github.com/deepgram-devs/youtube-transcripts">https://github.com/deepgram-devs/youtube-transcripts</a>.</p>\n<p>Check out the other options supported by the <a href="https://github.com/deepgram/node-sdk">Deepgram Node SDK</a> and if you have any questions feel free to reach out to us on Twitter (we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>).</p>' };
const frontmatter = { "title": "Transcribe YouTube Videos with Node.js", "description": "Generate and save transcripts from YouTube videos with the Deepgram SDK for Node.js.", "date": "2021-11-01T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1635374324/blog/2021/11/transcribe-youtube-videos-nodejs/getting-transcripts-from-youtube-videos-blog%402x.png", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["nodejs", "sdk", "javascript"], "seo": { "title": "Transcribe YouTube Videos with Node.js", "description": "Generate and save transcripts from YouTube videos with the Deepgram SDK for Node.js." }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453823/blog/transcribe-youtube-videos-nodejs/ograph.png" }, "shorturls": { "share": "https://dpgr.am/0f005c0", "twitter": "https://dpgr.am/5091038", "linkedin": "https://dpgr.am/94f4999", "reddit": "https://dpgr.am/429a550", "facebook": "https://dpgr.am/a63d46e" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "preparing-dependencies", "text": "Preparing Dependencies" }, { "depth": 2, "slug": "download-video-and-convert-to-mp3", "text": "Download Video and Convert to MP3" }, { "depth": 2, "slug": "get-transcript-from-deepgram", "text": "Get Transcript from Deepgram" }, { "depth": 2, "slug": "saving-transcript-and-deleting-media", "text": "Saving Transcript and Deleting Media" }, { "depth": 2, "slug": "summary", "text": "Summary" }], "source": "In this blog post we will be creating transcripts for YouTube videos using Deepgram's Speech Recognition API. First, we will download videos and convert them to mp3 audio files. Then, we will use Deepgram to generate a transcript. Finally, we will store the transcript in a text file and delete the media file.\n\nThe final project code can be found at https://github.com/deepgram-devs/youtube-transcripts.\n\nWatch this tutorial as a video:\n\n<YouTube id=\"LrNS_q886uQ\"></YouTube>\n\nWe need a sample video, so I am using a [Shang-Chi and The Legend of The Ten Rings teaser trailer](https://www.youtube.com/watch?v=ir-mWUYH_uo) - if that is a spoiler for you please go ahead and grab another video link.\n\n<YouTube id=\"ir-mWUYH_uo\"></YouTube>\n\n## Before We Start\n\nYou will need:\n\n* Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n* A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n* A YouTube Video ID which is part of the URL of a video. The one we will be using is `ir-mWUYH_uo`.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n```\nnpm install @deepgram/sdk ffmpeg-static youtube-mp3-downloader\n```\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these four packages:\n\n```js\nconst fs = require('fs')\nconst YoutubeMp3Downloader = require('youtube-mp3-downloader')\nconst { Deepgram } = require('@deepgram/sdk')\nconst ffmpeg = require('ffmpeg-static')\n```\n\n`fs` is the built-in file system module for Node.js. It is used to read and write files which we will be doing a few times throughout this post. `ffmpeg-static` includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.\n\nInitialize the Deepgram and YouTubeMp3Downloader clients:\n\n```js\nconst deepgram = new Deepgram('YOUR DEEPGRAM KEY')\nconst YD = new YoutubeMp3Downloader({\n  ffmpegPath: ffmpeg,\n  outputPath: './',\n  youtubeVideoQuality: 'highestaudio',\n})\n```\n\n## Download Video and Convert to MP3\n\nUnder the hood, the `youtube-mp3-downloader` package will download the video and convert it with `ffmpeg` on our behalf. While it is doing this it triggers several events - we are going to use the `progress` event so we know how far through the download we are, and `finished` which indicates we can move on.\n\n```js\nYD.download('ir-mWUYH_uo')\n\nYD.on('progress', (data) => {\n  console.log(data.progress.percentage + '% downloaded')\n})\n\nYD.on('finished', async (err, video) => {\n  const videoFileName = video.file\n  console.log(`Downloaded ${videoFileName}`)\n\n  // Continue on to get transcript here\n})\n```\n\nSave and run the file with `node index.js` and you should see the file progress in your terminal and then have the file available in your file directory.\n\n![A terminal showing various percentages downloaded ending with 100%. The final log states the final filename.](https://res.cloudinary.com/deepgram/image/upload/v1635374325/blog/2021/11/transcribe-youtube-videos-nodejs/downloaded.png)\n\n## Get Transcript from Deepgram\n\nWhere the comment is above, prepare and create a Deepgram transcription request:\n\n```js\nconst file = {\n  buffer: fs.readFileSync(videoFileName),\n  mimetype: 'audio/mp3',\n}\nconst options = {\n  punctuate: true,\n}\n\nconst result = await deepgram.transcription\n  .preRecorded(file, options)\n  .catch((e) => console.log(e))\nconsole.log(result)\n```\n\nThere are lots of options which can make your transcript more useful including diarization which recognizes different speakers, a profanity filter which replaces profanity with nearby terms, and punctuation. We are using punctuation in this tutorial to show you how setting options works.\n\nRerun your code and you should see a JSON object printed in your terminal.\n\n![A terminal showing the file being downloaded, and then an object containing data from Deepgram. Within the object is a results object with a channels array. Further content is ommitted from the screenshot as it is nested too far.](https://res.cloudinary.com/deepgram/image/upload/v1635374324/blog/2021/11/transcribe-youtube-videos-nodejs/transcript.png)\n\n## Saving Transcript and Deleting Media\n\nThere is a lot of data that comes back from Deepgram, but all we want is the transcript which, with the options we provided, is a single string of text. Add the following line to access just the transcript:\n\n```js\nconst transcript = result.results.channels[0].alternatives[0].transcript\n```\n\nNow we have the string, we can create a text file with it:\n\n```js\nfs.writeFileSync(\n  `${videoFileName}.txt`,\n  transcript,\n  () => `Wrote ${videoFileName}.txt`\n)\n```\n\nThen, if desired, delete the mp3 file:\n\n```js\nfs.unlinkSync(videoFileName)\n```\n\n## Summary\n\nTranscribing YouTube videos has never been easier thanks to Deepgram's Speech Recognition API and the Deepgram Node SDK. You can find the final project code at https://github.com/deepgram-devs/youtube-transcripts.\n\nCheck out the other options supported by the [Deepgram Node SDK](https://github.com/deepgram/node-sdk) and if you have any questions feel free to reach out to us on Twitter (we are [@DeepgramDevs](https://twitter.com/DeepgramDevs)).", "html": '<p>In this blog post we will be creating transcripts for YouTube videos using Deepgram\u2019s Speech Recognition API. First, we will download videos and convert them to mp3 audio files. Then, we will use Deepgram to generate a transcript. Finally, we will store the transcript in a text file and delete the media file.</p>\n<p>The final project code can be found at <a href="https://github.com/deepgram-devs/youtube-transcripts">https://github.com/deepgram-devs/youtube-transcripts</a>.</p>\n<p>Watch this tutorial as a video:</p>\n<YouTube id="LrNS_q886uQ" />\n<p>We need a sample video, so I am using a <a href="https://www.youtube.com/watch?v=ir-mWUYH_uo">Shang-Chi and The Legend of The Ten Rings teaser trailer</a> - if that is a spoiler for you please go ahead and grab another video link.</p>\n<YouTube id="ir-mWUYH_uo" />\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A YouTube Video ID which is part of the URL of a video. The one we will be using is <code is:raw>ir-mWUYH_uo</code>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk ffmpeg-static youtube-mp3-downloader</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these four packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">YoutubeMp3Downloader</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;youtube-mp3-downloader&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpeg</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p><code is:raw>fs</code> is the built-in file system module for Node.js. It is used to read and write files which we will be doing a few times throughout this post. <code is:raw>ffmpeg-static</code> includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.</p>\n<p>Initialize the Deepgram and YouTubeMp3Downloader clients:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">YoutubeMp3Downloader</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  ffmpegPath: ffmpeg,</span></span>\n<span class="line"><span style="color: #C9D1D9">  outputPath: </span><span style="color: #A5D6FF">&#39;./&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  youtubeVideoQuality: </span><span style="color: #A5D6FF">&#39;highestaudio&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="download-video-and-convert-to-mp3">Download Video and Convert to MP3</h2>\n<p>Under the hood, the <code is:raw>youtube-mp3-downloader</code> package will download the video and convert it with <code is:raw>ffmpeg</code> on our behalf. While it is doing this it triggers several events - we are going to use the <code is:raw>progress</code> event so we know how far through the download we are, and <code is:raw>finished</code> which indicates we can move on.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">download</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ir-mWUYH_uo&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;progress&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data.progress.percentage </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;% downloaded&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;finished&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">video</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">videoFileName</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> video.file</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Downloaded ${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Continue on to get transcript here</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Save and run the file with <code is:raw>node index.js</code> and you should see the file progress in your terminal and then have the file available in your file directory.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635374325/blog/2021/11/transcribe-youtube-videos-nodejs/downloaded.png" alt="A terminal showing various percentages downloaded ending with 100%. The final log states the final filename."></p>\n<h2 id="get-transcript-from-deepgram">Get Transcript from Deepgram</h2>\n<p>Where the comment is above, prepare and create a Deepgram transcription request:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(videoFileName),</span></span>\n<span class="line"><span style="color: #C9D1D9">  mimetype: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">options</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(file, options)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">e</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(e))</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(result)</span></span></code></pre>\n<p>There are lots of options which can make your transcript more useful including diarization which recognizes different speakers, a profanity filter which replaces profanity with nearby terms, and punctuation. We are using punctuation in this tutorial to show you how setting options works.</p>\n<p>Rerun your code and you should see a JSON object printed in your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635374324/blog/2021/11/transcribe-youtube-videos-nodejs/transcript.png" alt="A terminal showing the file being downloaded, and then an object containing data from Deepgram. Within the object is a results object with a channels array. Further content is ommitted from the screenshot as it is nested too far."></p>\n<h2 id="saving-transcript-and-deleting-media">Saving Transcript and Deleting Media</h2>\n<p>There is a lot of data that comes back from Deepgram, but all we want is the transcript which, with the options we provided, is a single string of text. Add the following line to access just the transcript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> result.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span></code></pre>\n<p>Now we have the string, we can create a text file with it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">fs.</span><span style="color: #D2A8FF">writeFileSync</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}.txt`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  transcript,</span></span>\n<span class="line"><span style="color: #C9D1D9">  () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`Wrote ${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}.txt`</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Then, if desired, delete the mp3 file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">fs.</span><span style="color: #D2A8FF">unlinkSync</span><span style="color: #C9D1D9">(videoFileName)</span></span></code></pre>\n<h2 id="summary">Summary</h2>\n<p>Transcribing YouTube videos has never been easier thanks to Deepgram\u2019s Speech Recognition API and the Deepgram Node SDK. You can find the final project code at <a href="https://github.com/deepgram-devs/youtube-transcripts">https://github.com/deepgram-devs/youtube-transcripts</a>.</p>\n<p>Check out the other options supported by the <a href="https://github.com/deepgram/node-sdk">Deepgram Node SDK</a> and if you have any questions feel free to reach out to us on Twitter (we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>).</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribe-youtube-videos-nodejs/index.md" };
function rawContent() {
  return "In this blog post we will be creating transcripts for YouTube videos using Deepgram's Speech Recognition API. First, we will download videos and convert them to mp3 audio files. Then, we will use Deepgram to generate a transcript. Finally, we will store the transcript in a text file and delete the media file.\n\nThe final project code can be found at https://github.com/deepgram-devs/youtube-transcripts.\n\nWatch this tutorial as a video:\n\n<YouTube id=\"LrNS_q886uQ\"></YouTube>\n\nWe need a sample video, so I am using a [Shang-Chi and The Legend of The Ten Rings teaser trailer](https://www.youtube.com/watch?v=ir-mWUYH_uo) - if that is a spoiler for you please go ahead and grab another video link.\n\n<YouTube id=\"ir-mWUYH_uo\"></YouTube>\n\n## Before We Start\n\nYou will need:\n\n* Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n* A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n* A YouTube Video ID which is part of the URL of a video. The one we will be using is `ir-mWUYH_uo`.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n```\nnpm install @deepgram/sdk ffmpeg-static youtube-mp3-downloader\n```\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these four packages:\n\n```js\nconst fs = require('fs')\nconst YoutubeMp3Downloader = require('youtube-mp3-downloader')\nconst { Deepgram } = require('@deepgram/sdk')\nconst ffmpeg = require('ffmpeg-static')\n```\n\n`fs` is the built-in file system module for Node.js. It is used to read and write files which we will be doing a few times throughout this post. `ffmpeg-static` includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.\n\nInitialize the Deepgram and YouTubeMp3Downloader clients:\n\n```js\nconst deepgram = new Deepgram('YOUR DEEPGRAM KEY')\nconst YD = new YoutubeMp3Downloader({\n  ffmpegPath: ffmpeg,\n  outputPath: './',\n  youtubeVideoQuality: 'highestaudio',\n})\n```\n\n## Download Video and Convert to MP3\n\nUnder the hood, the `youtube-mp3-downloader` package will download the video and convert it with `ffmpeg` on our behalf. While it is doing this it triggers several events - we are going to use the `progress` event so we know how far through the download we are, and `finished` which indicates we can move on.\n\n```js\nYD.download('ir-mWUYH_uo')\n\nYD.on('progress', (data) => {\n  console.log(data.progress.percentage + '% downloaded')\n})\n\nYD.on('finished', async (err, video) => {\n  const videoFileName = video.file\n  console.log(`Downloaded ${videoFileName}`)\n\n  // Continue on to get transcript here\n})\n```\n\nSave and run the file with `node index.js` and you should see the file progress in your terminal and then have the file available in your file directory.\n\n![A terminal showing various percentages downloaded ending with 100%. The final log states the final filename.](https://res.cloudinary.com/deepgram/image/upload/v1635374325/blog/2021/11/transcribe-youtube-videos-nodejs/downloaded.png)\n\n## Get Transcript from Deepgram\n\nWhere the comment is above, prepare and create a Deepgram transcription request:\n\n```js\nconst file = {\n  buffer: fs.readFileSync(videoFileName),\n  mimetype: 'audio/mp3',\n}\nconst options = {\n  punctuate: true,\n}\n\nconst result = await deepgram.transcription\n  .preRecorded(file, options)\n  .catch((e) => console.log(e))\nconsole.log(result)\n```\n\nThere are lots of options which can make your transcript more useful including diarization which recognizes different speakers, a profanity filter which replaces profanity with nearby terms, and punctuation. We are using punctuation in this tutorial to show you how setting options works.\n\nRerun your code and you should see a JSON object printed in your terminal.\n\n![A terminal showing the file being downloaded, and then an object containing data from Deepgram. Within the object is a results object with a channels array. Further content is ommitted from the screenshot as it is nested too far.](https://res.cloudinary.com/deepgram/image/upload/v1635374324/blog/2021/11/transcribe-youtube-videos-nodejs/transcript.png)\n\n## Saving Transcript and Deleting Media\n\nThere is a lot of data that comes back from Deepgram, but all we want is the transcript which, with the options we provided, is a single string of text. Add the following line to access just the transcript:\n\n```js\nconst transcript = result.results.channels[0].alternatives[0].transcript\n```\n\nNow we have the string, we can create a text file with it:\n\n```js\nfs.writeFileSync(\n  `${videoFileName}.txt`,\n  transcript,\n  () => `Wrote ${videoFileName}.txt`\n)\n```\n\nThen, if desired, delete the mp3 file:\n\n```js\nfs.unlinkSync(videoFileName)\n```\n\n## Summary\n\nTranscribing YouTube videos has never been easier thanks to Deepgram's Speech Recognition API and the Deepgram Node SDK. You can find the final project code at https://github.com/deepgram-devs/youtube-transcripts.\n\nCheck out the other options supported by the [Deepgram Node SDK](https://github.com/deepgram/node-sdk) and if you have any questions feel free to reach out to us on Twitter (we are [@DeepgramDevs](https://twitter.com/DeepgramDevs)).";
}
function compiledContent() {
  return '<p>In this blog post we will be creating transcripts for YouTube videos using Deepgram\u2019s Speech Recognition API. First, we will download videos and convert them to mp3 audio files. Then, we will use Deepgram to generate a transcript. Finally, we will store the transcript in a text file and delete the media file.</p>\n<p>The final project code can be found at <a href="https://github.com/deepgram-devs/youtube-transcripts">https://github.com/deepgram-devs/youtube-transcripts</a>.</p>\n<p>Watch this tutorial as a video:</p>\n<YouTube id="LrNS_q886uQ" />\n<p>We need a sample video, so I am using a <a href="https://www.youtube.com/watch?v=ir-mWUYH_uo">Shang-Chi and The Legend of The Ten Rings teaser trailer</a> - if that is a spoiler for you please go ahead and grab another video link.</p>\n<YouTube id="ir-mWUYH_uo" />\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A YouTube Video ID which is part of the URL of a video. The one we will be using is <code is:raw>ir-mWUYH_uo</code>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk ffmpeg-static youtube-mp3-downloader</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these four packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">YoutubeMp3Downloader</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;youtube-mp3-downloader&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpeg</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p><code is:raw>fs</code> is the built-in file system module for Node.js. It is used to read and write files which we will be doing a few times throughout this post. <code is:raw>ffmpeg-static</code> includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.</p>\n<p>Initialize the Deepgram and YouTubeMp3Downloader clients:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">YoutubeMp3Downloader</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  ffmpegPath: ffmpeg,</span></span>\n<span class="line"><span style="color: #C9D1D9">  outputPath: </span><span style="color: #A5D6FF">&#39;./&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  youtubeVideoQuality: </span><span style="color: #A5D6FF">&#39;highestaudio&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="download-video-and-convert-to-mp3">Download Video and Convert to MP3</h2>\n<p>Under the hood, the <code is:raw>youtube-mp3-downloader</code> package will download the video and convert it with <code is:raw>ffmpeg</code> on our behalf. While it is doing this it triggers several events - we are going to use the <code is:raw>progress</code> event so we know how far through the download we are, and <code is:raw>finished</code> which indicates we can move on.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">download</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ir-mWUYH_uo&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;progress&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data.progress.percentage </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;% downloaded&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;finished&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">video</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">videoFileName</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> video.file</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Downloaded ${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Continue on to get transcript here</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Save and run the file with <code is:raw>node index.js</code> and you should see the file progress in your terminal and then have the file available in your file directory.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635374325/blog/2021/11/transcribe-youtube-videos-nodejs/downloaded.png" alt="A terminal showing various percentages downloaded ending with 100%. The final log states the final filename."></p>\n<h2 id="get-transcript-from-deepgram">Get Transcript from Deepgram</h2>\n<p>Where the comment is above, prepare and create a Deepgram transcription request:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(videoFileName),</span></span>\n<span class="line"><span style="color: #C9D1D9">  mimetype: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">options</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(file, options)</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">e</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(e))</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(result)</span></span></code></pre>\n<p>There are lots of options which can make your transcript more useful including diarization which recognizes different speakers, a profanity filter which replaces profanity with nearby terms, and punctuation. We are using punctuation in this tutorial to show you how setting options works.</p>\n<p>Rerun your code and you should see a JSON object printed in your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635374324/blog/2021/11/transcribe-youtube-videos-nodejs/transcript.png" alt="A terminal showing the file being downloaded, and then an object containing data from Deepgram. Within the object is a results object with a channels array. Further content is ommitted from the screenshot as it is nested too far."></p>\n<h2 id="saving-transcript-and-deleting-media">Saving Transcript and Deleting Media</h2>\n<p>There is a lot of data that comes back from Deepgram, but all we want is the transcript which, with the options we provided, is a single string of text. Add the following line to access just the transcript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> result.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span></code></pre>\n<p>Now we have the string, we can create a text file with it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">fs.</span><span style="color: #D2A8FF">writeFileSync</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}.txt`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  transcript,</span></span>\n<span class="line"><span style="color: #C9D1D9">  () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`Wrote ${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}.txt`</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Then, if desired, delete the mp3 file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">fs.</span><span style="color: #D2A8FF">unlinkSync</span><span style="color: #C9D1D9">(videoFileName)</span></span></code></pre>\n<h2 id="summary">Summary</h2>\n<p>Transcribing YouTube videos has never been easier thanks to Deepgram\u2019s Speech Recognition API and the Deepgram Node SDK. You can find the final project code at <a href="https://github.com/deepgram-devs/youtube-transcripts">https://github.com/deepgram-devs/youtube-transcripts</a>.</p>\n<p>Check out the other options supported by the <a href="https://github.com/deepgram/node-sdk">Deepgram Node SDK</a> and if you have any questions feel free to reach out to us on Twitter (we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>).</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribe-youtube-videos-nodejs/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>In this blog post we will be creating transcripts for YouTube videos using Deepgram’s Speech Recognition API. First, we will download videos and convert them to mp3 audio files. Then, we will use Deepgram to generate a transcript. Finally, we will store the transcript in a text file and delete the media file.</p>
<p>The final project code can be found at <a href="https://github.com/deepgram-devs/youtube-transcripts">https://github.com/deepgram-devs/youtube-transcripts</a>.</p>
<p>Watch this tutorial as a video:</p>
${renderComponent($$result, "YouTube", YouTube, { "id": "LrNS_q886uQ" })}
<p>We need a sample video, so I am using a <a href="https://www.youtube.com/watch?v=ir-mWUYH_uo">Shang-Chi and The Legend of The Ten Rings teaser trailer</a> - if that is a spoiler for you please go ahead and grab another video link.</p>
${renderComponent($$result, "YouTube", YouTube, { "id": "ir-mWUYH_uo" })}
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>
<li>A YouTube Video ID which is part of the URL of a video. The one we will be using is <code>ir-mWUYH_uo</code>.</li>
</ul>
<p>Create a new directory and navigate to it with your terminal. Run <code>npm init -y</code> to create a <code>package.json</code> file and then install the following packages:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk ffmpeg-static youtube-mp3-downloader</span></span></code></pre>
<p>Create an <code>index.js</code> file, and open it in your code editor.</p>
<h2 id="preparing-dependencies">Preparing Dependencies</h2>
<p>At the top of your file require these four packages:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">YoutubeMp3Downloader</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;youtube-mp3-downloader&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpeg</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p><code>fs</code> is the built-in file system module for Node.js. It is used to read and write files which we will be doing a few times throughout this post. <code>ffmpeg-static</code> includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.</p>
<p>Initialize the Deepgram and YouTubeMp3Downloader clients:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">YoutubeMp3Downloader</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  ffmpegPath: ffmpeg,</span></span>
<span class="line"><span style="color: #C9D1D9">  outputPath: </span><span style="color: #A5D6FF">&#39;./&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  youtubeVideoQuality: </span><span style="color: #A5D6FF">&#39;highestaudio&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<h2 id="download-video-and-convert-to-mp3">Download Video and Convert to MP3</h2>
<p>Under the hood, the <code>youtube-mp3-downloader</code> package will download the video and convert it with <code>ffmpeg</code> on our behalf. While it is doing this it triggers several events - we are going to use the <code>progress</code> event so we know how far through the download we are, and <code>finished</code> which indicates we can move on.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">download</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ir-mWUYH_uo&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;progress&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data.progress.percentage </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;% downloaded&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">YD</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;finished&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">video</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">videoFileName</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> video.file</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`Downloaded \${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Continue on to get transcript here</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Save and run the file with <code>node index.js</code> and you should see the file progress in your terminal and then have the file available in your file directory.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635374325/blog/2021/11/transcribe-youtube-videos-nodejs/downloaded.png" alt="A terminal showing various percentages downloaded ending with 100%. The final log states the final filename."></p>
<h2 id="get-transcript-from-deepgram">Get Transcript from Deepgram</h2>
<p>Where the comment is above, prepare and create a Deepgram transcription request:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(videoFileName),</span></span>
<span class="line"><span style="color: #C9D1D9">  mimetype: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">options</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(file, options)</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">e</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(e))</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(result)</span></span></code></pre>
<p>There are lots of options which can make your transcript more useful including diarization which recognizes different speakers, a profanity filter which replaces profanity with nearby terms, and punctuation. We are using punctuation in this tutorial to show you how setting options works.</p>
<p>Rerun your code and you should see a JSON object printed in your terminal.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635374324/blog/2021/11/transcribe-youtube-videos-nodejs/transcript.png" alt="A terminal showing the file being downloaded, and then an object containing data from Deepgram. Within the object is a results object with a channels array. Further content is ommitted from the screenshot as it is nested too far."></p>
<h2 id="saving-transcript-and-deleting-media">Saving Transcript and Deleting Media</h2>
<p>There is a lot of data that comes back from Deepgram, but all we want is the transcript which, with the options we provided, is a single string of text. Add the following line to access just the transcript:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> result.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span></code></pre>
<p>Now we have the string, we can create a text file with it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">fs.</span><span style="color: #D2A8FF">writeFileSync</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">\`\${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}.txt\`</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  transcript,</span></span>
<span class="line"><span style="color: #C9D1D9">  () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">\`Wrote \${</span><span style="color: #C9D1D9">videoFileName</span><span style="color: #A5D6FF">}.txt\`</span></span>
<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Then, if desired, delete the mp3 file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">fs.</span><span style="color: #D2A8FF">unlinkSync</span><span style="color: #C9D1D9">(videoFileName)</span></span></code></pre>
<h2 id="summary">Summary</h2>
<p>Transcribing YouTube videos has never been easier thanks to Deepgram’s Speech Recognition API and the Deepgram Node SDK. You can find the final project code at <a href="https://github.com/deepgram-devs/youtube-transcripts">https://github.com/deepgram-devs/youtube-transcripts</a>.</p>
<p>Check out the other options supported by the <a href="https://github.com/deepgram/node-sdk">Deepgram Node SDK</a> and if you have any questions feel free to reach out to us on Twitter (we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>).</p>`;
});

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
