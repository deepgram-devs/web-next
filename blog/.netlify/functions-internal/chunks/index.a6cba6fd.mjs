import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                          *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
/* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "get-user-microphone", "text": "Get User Microphone" }, { "depth": 2, "slug": "connect-to-deepgram", "text": "Connect to Deepgram" }, { "depth": 2, "slug": "sending-data-to-deepgram", "text": "Sending Data to Deepgram" }, { "depth": 2, "slug": "handling-the-deepgram-response", "text": "Handling the Deepgram Response" }, { "depth": 2, "slug": "showing-status--progress-in-browser", "text": "Showing Status & Progress In Browser" }], "source": "\nThere are so many projects you can build with Deepgram's streaming audio transcriptions. Today, we are going to get live transcriptions from a user's mic inside of your browser.\n\nWatch this tutorial as a video:\n\n<YouTube id=\"kIyPX16zuQY\"></YouTube>\n\n## Before We Start\n\nFor this project, you will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys). That's it in terms of dependencies - this project is entirely browser-based.\n\nCreate a new `index.html` file, open it in a code editor, and add the following boilerplate code:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\">Deepgram transcript will go here</p>\n    <script>\n      // Further code goes here\n    <\/script>\n  </body>\n</html>\n```\n\n## Get User Microphone\n\nYou can request access to a user's media input devices (microphones and cameras) using a built in `getUserMedia()` method. If allowed by the user, it will return a `MediaStream` which we can then prepare to send to Deepgram. Inside of your `<script>` add the following:\n\n```js\nnavigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n  console.log({ stream })\n  // Further code goes here\n})\n```\n\nLoad your `index.html` file in your browser, and you should immediately receive a prompt to access your microphone. Grant it, and then look at the console in your developer tools.\n\n![The first half of the image shows the browser asking for access to the mic. An arrow with the phrase \"once granted\" points to the second half of the image, which has the browser console open, showing an object containing a MediaStream](https://res.cloudinary.com/deepgram/image/upload/v1637186575/blog/2021/11/live-transcription-mic-browser/granting-mic.png)\n\nNow we have a `MediaStream` we must provide it to a `MediaRecorder` which will prepare the data and, once available, emit it with a `datavailable` event:\n\n```js\nconst mediaRecorder = new MediaRecorder(stream)\n```\n\nWe now have everything we need to send Deepgram.\n\n## Connect to Deepgram\n\nTo stream audio to Deepgram's Speech Recognition service, we must open a WebSocket connection and send data via it. First, establish the connection:\n\n```js\nconst socket = new WebSocket('wss://api.deepgram.com/v1/listen', [ 'token', 'YOUR_DEEPGRAM_API_KEY' ])\n```\n\n<Alert type=\"warning\">\nA reminder that this key is client-side and, therefore, your users can see it. Any user with access to your key can access the Deepgram APIs, which, in turn, may provide full account access. Refer to our post on <a href=\"https://blog.deepgram.com/protecting-api-key/\">protecting your API key with browser live transcription</a>.\n</Alert>\n\nThen, log when socket `onopen`, `onmessage`, `onclose`, and `onerror` events are triggered:\n\n```js\nsocket.onopen = () => {\n  console.log({ event: 'onopen' })\n}\n\nsocket.onmessage = (message) => {\n  console.log({ event: 'onmessage', message })\n}\n\nsocket.onclose = () => {\n  console.log({ event: 'onclose' })\n}\n\nsocket.onerror = (error) => {\n  console.log({ event: 'onerror', error })\n}\n```\n\nRefresh your browser and watch the console. You should see the socket connection is opened and then closed. To keep the connection open, we must swiftly send some data once the connection is opened.\n\n## Sending Data to Deepgram\n\nInside of the `socket.onopen` function send data to Deepgram in 250ms increments:\n\n```js\nmediaRecorder.addEventListener('dataavailable', event => {\n  if (event.data.size > 0 && socket.readyState == 1) {\n    socket.send(event.data)\n  }\n})\nmediaRecorder.start(250)\n```\n\nDeepgram isn't fussy about the timeslice you provide (here it's 250ms), but bear in mind that the bigger this number is, the longer between words being spoken and it being sent, slowing down your transcription. 100-250 is ideal.\n\nTake a look at your console now while speaking into your mic - you should be seeing data come back from Deepgram!\n\n![The browser console shows four onmessage events. The last one is expanded and shows a JSON object, including a data object. The data object contains the words \"how are you doing today.\"](https://res.cloudinary.com/deepgram/image/upload/v1635938341/blog/2021/11/live-transcription-mic-browser/onmessage.png)\n\n## Handling the Deepgram Response\n\nInside of the `socket.onmessage` function parse the data sent from Deepgram, pull out the transcript only, and determine if it's the final transcript for that phrase (\"utterance\"):\n\n```js\nconst received = JSON.parse(message.data)\nconst transcript = received.channel.alternatives[0].transcript\nif (transcript && received.is_final) {\n  console.log(transcript)\n}\n```\n\nYou may have noticed that for each phrase, you have received several messages from Deepgram - each growing by a word (for example \"hello\", \"hello how\", \"hello how are\", etc). Deepgram will send you back data as each word is transcribed, which is great for getting a speedy response. For this simple project, we will only show the final version of each utterance which is denoted by an `is_final` property in the response.\n\nTo neaten this up, remove the `console.log({ event: 'onmessage', message })` from this function, and then test your code again.\n\n![The terminal shows two phrases written in plain text.](https://res.cloudinary.com/deepgram/image/upload/v1635938773/blog/2021/11/live-transcription-mic-browser/is_final-log.png)\n\nThat's it! That's the project. Before we wrap up, let's give the user some indication of progress in the web page itself.\n\n## Showing Status & Progress In Browser\n\nChange the text inside of `<p id=\"status\">` to 'Not Connected'. Then, at the top of your `socket.onopen` function add this line:\n\n```js\ndocument.querySelector('#status').textContent = 'Connected'\n```\n\nRemove the text inside of `<p id=\"transcript\">`. Where you are logging the transcript in your `socket.onmessage` function add this line:\n\n```js\ndocument.querySelector('#transcript').textContent += transcript + ' '\n```\n\nTry your project once more, and your web page should show you when you're connected and what words you have spoken, thanks to Deepgram's Speech Recognition.\n\nThe full code is here:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\">Deepgram transcript will go here</p>\n    <script>\n      navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n        const mediaRecorder = new MediaRecorder(stream)\n        const socket = new WebSocket('wss://api.deepgram.com/v1/listen', [ 'token', 'YOUR_DEEPGRAM_API_KEY' ])\n\n        socket.onopen = () => {\n          console.log({ event: 'onopen' })\n          document.querySelector('#status').textContent = 'Connected'\n          mediaRecorder.addEventListener('dataavailable', event => {\n            if (event.data.size > 0 && socket.readyState == 1) {\n              socket.send(event.data)\n            }\n          })\n          mediaRecorder.start(250)\n        }\n\n        socket.onmessage = (message) => {\n          console.log({ event: 'onmessage', message })\n          const received = JSON.parse(message.data)\n          const transcript = received.channel.alternatives[0].transcript\n          if (transcript && received.is_final) {\n            document.querySelector('#transcript').textContent += transcript + ' '\n          }\n        }\n\n        socket.onclose = () => {\n          console.log({ event: 'onclose' })\n        }\n\n        socket.onerror = (error) => {\n          console.log({ event: 'onerror', error })\n        }\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nIf you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": `<p>There are so many projects you can build with Deepgram\u2019s streaming audio transcriptions. Today, we are going to get live transcriptions from a user\u2019s mic inside of your browser.</p>
<p>Watch this tutorial as a video:</p>
<YouTube id="kIyPX16zuQY" />
<h2 id="before-we-start">Before We Start</h2>
<p>For this project, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>. That\u2019s it in terms of dependencies - this project is entirely browser-based.</p>
<p>Create a new <code is:raw>index.html</code> file, open it in a code editor, and add the following boilerplate code:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;Deepgram transcript will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="get-user-microphone">Get User Microphone</h2>
<p>You can request access to a user\u2019s media input devices (microphones and cameras) using a built in <code is:raw>getUserMedia()</code> method. If allowed by the user, it will return a <code is:raw>MediaStream</code> which we can then prepare to send to Deepgram. Inside of your <code is:raw>&lt;script&gt;</code> add the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ stream })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Load your <code is:raw>index.html</code> file in your browser, and you should immediately receive a prompt to access your microphone. Grant it, and then look at the console in your developer tools.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637186575/blog/2021/11/live-transcription-mic-browser/granting-mic.png" alt="The first half of the image shows the browser asking for access to the mic. An arrow with the phrase &#x22;once granted&#x22; points to the second half of the image, which has the browser console open, showing an object containing a MediaStream"></p>
<p>Now we have a <code is:raw>MediaStream</code> we must provide it to a <code is:raw>MediaRecorder</code> which will prepare the data and, once available, emit it with a <code is:raw>datavailable</code> event:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span></code></pre>
<p>We now have everything we need to send Deepgram.</p>
<h2 id="connect-to-deepgram">Connect to Deepgram</h2>
<p>To stream audio to Deepgram\u2019s Speech Recognition service, we must open a WebSocket connection and send data via it. First, establish the connection:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9"> ])</span></span></code></pre>
<Alert type="warning"><p>A reminder that this key is client-side and, therefore, your users can see it. Any user with access to your key can access the Deepgram APIs, which, in turn, may provide full account access. Refer to our post on <a href="https://blog.deepgram.com/protecting-api-key/">protecting your API key with browser live transcription</a>.</p></Alert>
<p>Then, log when socket <code is:raw>onopen</code>, <code is:raw>onmessage</code>, <code is:raw>onclose</code>, and <code is:raw>onerror</code> events are triggered:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onmessage&#39;</span><span style="color: #C9D1D9">, message })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onclose</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onerror</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">, error })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Refresh your browser and watch the console. You should see the socket connection is opened and then closed. To keep the connection open, we must swiftly send some data once the connection is opened.</p>
<h2 id="sending-data-to-deepgram">Sending Data to Deepgram</h2>
<p>Inside of the <code is:raw>socket.onopen</code> function send data to Deepgram in 250ms increments:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Deepgram isn\u2019t fussy about the timeslice you provide (here it\u2019s 250ms), but bear in mind that the bigger this number is, the longer between words being spoken and it being sent, slowing down your transcription. 100-250 is ideal.</p>
<p>Take a look at your console now while speaking into your mic - you should be seeing data come back from Deepgram!</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635938341/blog/2021/11/live-transcription-mic-browser/onmessage.png" alt="The browser console shows four onmessage events. The last one is expanded and shows a JSON object, including a data object. The data object contains the words &#x22;how are you doing today.&#x22;"></p>
<h2 id="handling-the-deepgram-response">Handling the Deepgram Response</h2>
<p>Inside of the <code is:raw>socket.onmessage</code> function parse the data sent from Deepgram, pull out the transcript only, and determine if it\u2019s the final transcript for that phrase (\u201Cutterance\u201D):</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>You may have noticed that for each phrase, you have received several messages from Deepgram - each growing by a word (for example \u201Chello\u201D, \u201Chello how\u201D, \u201Chello how are\u201D, etc). Deepgram will send you back data as each word is transcribed, which is great for getting a speedy response. For this simple project, we will only show the final version of each utterance which is denoted by an <code is:raw>is_final</code> property in the response.</p>
<p>To neaten this up, remove the <code is:raw>console.log({ event: 'onmessage', message })</code> from this function, and then test your code again.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635938773/blog/2021/11/live-transcription-mic-browser/is_final-log.png" alt="The terminal shows two phrases written in plain text."></p>
<p>That\u2019s it! That\u2019s the project. Before we wrap up, let\u2019s give the user some indication of progress in the web page itself.</p>
<h2 id="showing-status--progress-in-browser">Showing Status & Progress In Browser</h2>
<p>Change the text inside of <code is:raw>&lt;p id="status"&gt;</code> to \u2018Not Connected\u2019. Then, at the top of your <code is:raw>socket.onopen</code> function add this line:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span></code></pre>
<p>Remove the text inside of <code is:raw>&lt;p id="transcript"&gt;</code>. Where you are logging the transcript in your <code is:raw>socket.onmessage</code> function add this line:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span></span></code></pre>
<p>Try your project once more, and your web page should show you when you\u2019re connected and what words you have spoken, thanks to Deepgram\u2019s Speech Recognition.</p>
<p>The full code is here:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;Deepgram transcript will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9"> ])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">          document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">          mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">              socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">            }</span></span>
<span class="line"><span style="color: #C9D1D9">          })</span></span>
<span class="line"><span style="color: #C9D1D9">          mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onmessage&#39;</span><span style="color: #C9D1D9">, message })</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">            document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span></span>
<span class="line"><span style="color: #C9D1D9">          }</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onclose</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onerror</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">, error })</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>` };
const frontmatter = { "title": "Get Live Speech Transcriptions In Your Browser", "description": "Learn how to use Deepgram's streaming audio feature with one HTML file.", "date": "2021-11-22T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1637012204/blog/2021/11/live-transcription-mic-browser/Get-Live-Speech-Transcriptions-In-Browser%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["javascript", "microphone"], "seo": { "title": "Get Live Speech Transcriptions In Your Browser", "description": "Learn how to use Deepgram's streaming audio feature with one HTML file." }, "shorturls": { "share": "https://dpgr.am/23585b8", "twitter": "https://dpgr.am/fc4da4c", "linkedin": "https://dpgr.am/45fca13", "reddit": "https://dpgr.am/2e16852", "facebook": "https://dpgr.am/a1fa559" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453810/blog/live-transcription-mic-browser/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "get-user-microphone", "text": "Get User Microphone" }, { "depth": 2, "slug": "connect-to-deepgram", "text": "Connect to Deepgram" }, { "depth": 2, "slug": "sending-data-to-deepgram", "text": "Sending Data to Deepgram" }, { "depth": 2, "slug": "handling-the-deepgram-response", "text": "Handling the Deepgram Response" }, { "depth": 2, "slug": "showing-status--progress-in-browser", "text": "Showing Status & Progress In Browser" }], "source": "\nThere are so many projects you can build with Deepgram's streaming audio transcriptions. Today, we are going to get live transcriptions from a user's mic inside of your browser.\n\nWatch this tutorial as a video:\n\n<YouTube id=\"kIyPX16zuQY\"></YouTube>\n\n## Before We Start\n\nFor this project, you will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys). That's it in terms of dependencies - this project is entirely browser-based.\n\nCreate a new `index.html` file, open it in a code editor, and add the following boilerplate code:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\">Deepgram transcript will go here</p>\n    <script>\n      // Further code goes here\n    <\/script>\n  </body>\n</html>\n```\n\n## Get User Microphone\n\nYou can request access to a user's media input devices (microphones and cameras) using a built in `getUserMedia()` method. If allowed by the user, it will return a `MediaStream` which we can then prepare to send to Deepgram. Inside of your `<script>` add the following:\n\n```js\nnavigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n  console.log({ stream })\n  // Further code goes here\n})\n```\n\nLoad your `index.html` file in your browser, and you should immediately receive a prompt to access your microphone. Grant it, and then look at the console in your developer tools.\n\n![The first half of the image shows the browser asking for access to the mic. An arrow with the phrase \"once granted\" points to the second half of the image, which has the browser console open, showing an object containing a MediaStream](https://res.cloudinary.com/deepgram/image/upload/v1637186575/blog/2021/11/live-transcription-mic-browser/granting-mic.png)\n\nNow we have a `MediaStream` we must provide it to a `MediaRecorder` which will prepare the data and, once available, emit it with a `datavailable` event:\n\n```js\nconst mediaRecorder = new MediaRecorder(stream)\n```\n\nWe now have everything we need to send Deepgram.\n\n## Connect to Deepgram\n\nTo stream audio to Deepgram's Speech Recognition service, we must open a WebSocket connection and send data via it. First, establish the connection:\n\n```js\nconst socket = new WebSocket('wss://api.deepgram.com/v1/listen', [ 'token', 'YOUR_DEEPGRAM_API_KEY' ])\n```\n\n<Alert type=\"warning\">\nA reminder that this key is client-side and, therefore, your users can see it. Any user with access to your key can access the Deepgram APIs, which, in turn, may provide full account access. Refer to our post on <a href=\"https://blog.deepgram.com/protecting-api-key/\">protecting your API key with browser live transcription</a>.\n</Alert>\n\nThen, log when socket `onopen`, `onmessage`, `onclose`, and `onerror` events are triggered:\n\n```js\nsocket.onopen = () => {\n  console.log({ event: 'onopen' })\n}\n\nsocket.onmessage = (message) => {\n  console.log({ event: 'onmessage', message })\n}\n\nsocket.onclose = () => {\n  console.log({ event: 'onclose' })\n}\n\nsocket.onerror = (error) => {\n  console.log({ event: 'onerror', error })\n}\n```\n\nRefresh your browser and watch the console. You should see the socket connection is opened and then closed. To keep the connection open, we must swiftly send some data once the connection is opened.\n\n## Sending Data to Deepgram\n\nInside of the `socket.onopen` function send data to Deepgram in 250ms increments:\n\n```js\nmediaRecorder.addEventListener('dataavailable', event => {\n  if (event.data.size > 0 && socket.readyState == 1) {\n    socket.send(event.data)\n  }\n})\nmediaRecorder.start(250)\n```\n\nDeepgram isn't fussy about the timeslice you provide (here it's 250ms), but bear in mind that the bigger this number is, the longer between words being spoken and it being sent, slowing down your transcription. 100-250 is ideal.\n\nTake a look at your console now while speaking into your mic - you should be seeing data come back from Deepgram!\n\n![The browser console shows four onmessage events. The last one is expanded and shows a JSON object, including a data object. The data object contains the words \"how are you doing today.\"](https://res.cloudinary.com/deepgram/image/upload/v1635938341/blog/2021/11/live-transcription-mic-browser/onmessage.png)\n\n## Handling the Deepgram Response\n\nInside of the `socket.onmessage` function parse the data sent from Deepgram, pull out the transcript only, and determine if it's the final transcript for that phrase (\"utterance\"):\n\n```js\nconst received = JSON.parse(message.data)\nconst transcript = received.channel.alternatives[0].transcript\nif (transcript && received.is_final) {\n  console.log(transcript)\n}\n```\n\nYou may have noticed that for each phrase, you have received several messages from Deepgram - each growing by a word (for example \"hello\", \"hello how\", \"hello how are\", etc). Deepgram will send you back data as each word is transcribed, which is great for getting a speedy response. For this simple project, we will only show the final version of each utterance which is denoted by an `is_final` property in the response.\n\nTo neaten this up, remove the `console.log({ event: 'onmessage', message })` from this function, and then test your code again.\n\n![The terminal shows two phrases written in plain text.](https://res.cloudinary.com/deepgram/image/upload/v1635938773/blog/2021/11/live-transcription-mic-browser/is_final-log.png)\n\nThat's it! That's the project. Before we wrap up, let's give the user some indication of progress in the web page itself.\n\n## Showing Status & Progress In Browser\n\nChange the text inside of `<p id=\"status\">` to 'Not Connected'. Then, at the top of your `socket.onopen` function add this line:\n\n```js\ndocument.querySelector('#status').textContent = 'Connected'\n```\n\nRemove the text inside of `<p id=\"transcript\">`. Where you are logging the transcript in your `socket.onmessage` function add this line:\n\n```js\ndocument.querySelector('#transcript').textContent += transcript + ' '\n```\n\nTry your project once more, and your web page should show you when you're connected and what words you have spoken, thanks to Deepgram's Speech Recognition.\n\nThe full code is here:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\">Deepgram transcript will go here</p>\n    <script>\n      navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n        const mediaRecorder = new MediaRecorder(stream)\n        const socket = new WebSocket('wss://api.deepgram.com/v1/listen', [ 'token', 'YOUR_DEEPGRAM_API_KEY' ])\n\n        socket.onopen = () => {\n          console.log({ event: 'onopen' })\n          document.querySelector('#status').textContent = 'Connected'\n          mediaRecorder.addEventListener('dataavailable', event => {\n            if (event.data.size > 0 && socket.readyState == 1) {\n              socket.send(event.data)\n            }\n          })\n          mediaRecorder.start(250)\n        }\n\n        socket.onmessage = (message) => {\n          console.log({ event: 'onmessage', message })\n          const received = JSON.parse(message.data)\n          const transcript = received.channel.alternatives[0].transcript\n          if (transcript && received.is_final) {\n            document.querySelector('#transcript').textContent += transcript + ' '\n          }\n        }\n\n        socket.onclose = () => {\n          console.log({ event: 'onclose' })\n        }\n\n        socket.onerror = (error) => {\n          console.log({ event: 'onerror', error })\n        }\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nIf you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": `<p>There are so many projects you can build with Deepgram\u2019s streaming audio transcriptions. Today, we are going to get live transcriptions from a user\u2019s mic inside of your browser.</p>
<p>Watch this tutorial as a video:</p>
<YouTube id="kIyPX16zuQY" />
<h2 id="before-we-start">Before We Start</h2>
<p>For this project, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>. That\u2019s it in terms of dependencies - this project is entirely browser-based.</p>
<p>Create a new <code is:raw>index.html</code> file, open it in a code editor, and add the following boilerplate code:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;Deepgram transcript will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="get-user-microphone">Get User Microphone</h2>
<p>You can request access to a user\u2019s media input devices (microphones and cameras) using a built in <code is:raw>getUserMedia()</code> method. If allowed by the user, it will return a <code is:raw>MediaStream</code> which we can then prepare to send to Deepgram. Inside of your <code is:raw>&lt;script&gt;</code> add the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ stream })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Load your <code is:raw>index.html</code> file in your browser, and you should immediately receive a prompt to access your microphone. Grant it, and then look at the console in your developer tools.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637186575/blog/2021/11/live-transcription-mic-browser/granting-mic.png" alt="The first half of the image shows the browser asking for access to the mic. An arrow with the phrase &#x22;once granted&#x22; points to the second half of the image, which has the browser console open, showing an object containing a MediaStream"></p>
<p>Now we have a <code is:raw>MediaStream</code> we must provide it to a <code is:raw>MediaRecorder</code> which will prepare the data and, once available, emit it with a <code is:raw>datavailable</code> event:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span></code></pre>
<p>We now have everything we need to send Deepgram.</p>
<h2 id="connect-to-deepgram">Connect to Deepgram</h2>
<p>To stream audio to Deepgram\u2019s Speech Recognition service, we must open a WebSocket connection and send data via it. First, establish the connection:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9"> ])</span></span></code></pre>
<Alert type="warning"><p>A reminder that this key is client-side and, therefore, your users can see it. Any user with access to your key can access the Deepgram APIs, which, in turn, may provide full account access. Refer to our post on <a href="https://blog.deepgram.com/protecting-api-key/">protecting your API key with browser live transcription</a>.</p></Alert>
<p>Then, log when socket <code is:raw>onopen</code>, <code is:raw>onmessage</code>, <code is:raw>onclose</code>, and <code is:raw>onerror</code> events are triggered:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onmessage&#39;</span><span style="color: #C9D1D9">, message })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onclose</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onerror</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">, error })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Refresh your browser and watch the console. You should see the socket connection is opened and then closed. To keep the connection open, we must swiftly send some data once the connection is opened.</p>
<h2 id="sending-data-to-deepgram">Sending Data to Deepgram</h2>
<p>Inside of the <code is:raw>socket.onopen</code> function send data to Deepgram in 250ms increments:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Deepgram isn\u2019t fussy about the timeslice you provide (here it\u2019s 250ms), but bear in mind that the bigger this number is, the longer between words being spoken and it being sent, slowing down your transcription. 100-250 is ideal.</p>
<p>Take a look at your console now while speaking into your mic - you should be seeing data come back from Deepgram!</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635938341/blog/2021/11/live-transcription-mic-browser/onmessage.png" alt="The browser console shows four onmessage events. The last one is expanded and shows a JSON object, including a data object. The data object contains the words &#x22;how are you doing today.&#x22;"></p>
<h2 id="handling-the-deepgram-response">Handling the Deepgram Response</h2>
<p>Inside of the <code is:raw>socket.onmessage</code> function parse the data sent from Deepgram, pull out the transcript only, and determine if it\u2019s the final transcript for that phrase (\u201Cutterance\u201D):</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>You may have noticed that for each phrase, you have received several messages from Deepgram - each growing by a word (for example \u201Chello\u201D, \u201Chello how\u201D, \u201Chello how are\u201D, etc). Deepgram will send you back data as each word is transcribed, which is great for getting a speedy response. For this simple project, we will only show the final version of each utterance which is denoted by an <code is:raw>is_final</code> property in the response.</p>
<p>To neaten this up, remove the <code is:raw>console.log({ event: 'onmessage', message })</code> from this function, and then test your code again.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635938773/blog/2021/11/live-transcription-mic-browser/is_final-log.png" alt="The terminal shows two phrases written in plain text."></p>
<p>That\u2019s it! That\u2019s the project. Before we wrap up, let\u2019s give the user some indication of progress in the web page itself.</p>
<h2 id="showing-status--progress-in-browser">Showing Status & Progress In Browser</h2>
<p>Change the text inside of <code is:raw>&lt;p id="status"&gt;</code> to \u2018Not Connected\u2019. Then, at the top of your <code is:raw>socket.onopen</code> function add this line:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span></code></pre>
<p>Remove the text inside of <code is:raw>&lt;p id="transcript"&gt;</code>. Where you are logging the transcript in your <code is:raw>socket.onmessage</code> function add this line:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span></span></code></pre>
<p>Try your project once more, and your web page should show you when you\u2019re connected and what words you have spoken, thanks to Deepgram\u2019s Speech Recognition.</p>
<p>The full code is here:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;Deepgram transcript will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9"> ])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">          document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">          mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">              socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">            }</span></span>
<span class="line"><span style="color: #C9D1D9">          })</span></span>
<span class="line"><span style="color: #C9D1D9">          mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onmessage&#39;</span><span style="color: #C9D1D9">, message })</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">            document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span></span>
<span class="line"><span style="color: #C9D1D9">          }</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onclose</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onerror</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">, error })</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>` }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcription-mic-browser/index.md" };
function rawContent() {
  return "\nThere are so many projects you can build with Deepgram's streaming audio transcriptions. Today, we are going to get live transcriptions from a user's mic inside of your browser.\n\nWatch this tutorial as a video:\n\n<YouTube id=\"kIyPX16zuQY\"></YouTube>\n\n## Before We Start\n\nFor this project, you will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys). That's it in terms of dependencies - this project is entirely browser-based.\n\nCreate a new `index.html` file, open it in a code editor, and add the following boilerplate code:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\">Deepgram transcript will go here</p>\n    <script>\n      // Further code goes here\n    <\/script>\n  </body>\n</html>\n```\n\n## Get User Microphone\n\nYou can request access to a user's media input devices (microphones and cameras) using a built in `getUserMedia()` method. If allowed by the user, it will return a `MediaStream` which we can then prepare to send to Deepgram. Inside of your `<script>` add the following:\n\n```js\nnavigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n  console.log({ stream })\n  // Further code goes here\n})\n```\n\nLoad your `index.html` file in your browser, and you should immediately receive a prompt to access your microphone. Grant it, and then look at the console in your developer tools.\n\n![The first half of the image shows the browser asking for access to the mic. An arrow with the phrase \"once granted\" points to the second half of the image, which has the browser console open, showing an object containing a MediaStream](https://res.cloudinary.com/deepgram/image/upload/v1637186575/blog/2021/11/live-transcription-mic-browser/granting-mic.png)\n\nNow we have a `MediaStream` we must provide it to a `MediaRecorder` which will prepare the data and, once available, emit it with a `datavailable` event:\n\n```js\nconst mediaRecorder = new MediaRecorder(stream)\n```\n\nWe now have everything we need to send Deepgram.\n\n## Connect to Deepgram\n\nTo stream audio to Deepgram's Speech Recognition service, we must open a WebSocket connection and send data via it. First, establish the connection:\n\n```js\nconst socket = new WebSocket('wss://api.deepgram.com/v1/listen', [ 'token', 'YOUR_DEEPGRAM_API_KEY' ])\n```\n\n<Alert type=\"warning\">\nA reminder that this key is client-side and, therefore, your users can see it. Any user with access to your key can access the Deepgram APIs, which, in turn, may provide full account access. Refer to our post on <a href=\"https://blog.deepgram.com/protecting-api-key/\">protecting your API key with browser live transcription</a>.\n</Alert>\n\nThen, log when socket `onopen`, `onmessage`, `onclose`, and `onerror` events are triggered:\n\n```js\nsocket.onopen = () => {\n  console.log({ event: 'onopen' })\n}\n\nsocket.onmessage = (message) => {\n  console.log({ event: 'onmessage', message })\n}\n\nsocket.onclose = () => {\n  console.log({ event: 'onclose' })\n}\n\nsocket.onerror = (error) => {\n  console.log({ event: 'onerror', error })\n}\n```\n\nRefresh your browser and watch the console. You should see the socket connection is opened and then closed. To keep the connection open, we must swiftly send some data once the connection is opened.\n\n## Sending Data to Deepgram\n\nInside of the `socket.onopen` function send data to Deepgram in 250ms increments:\n\n```js\nmediaRecorder.addEventListener('dataavailable', event => {\n  if (event.data.size > 0 && socket.readyState == 1) {\n    socket.send(event.data)\n  }\n})\nmediaRecorder.start(250)\n```\n\nDeepgram isn't fussy about the timeslice you provide (here it's 250ms), but bear in mind that the bigger this number is, the longer between words being spoken and it being sent, slowing down your transcription. 100-250 is ideal.\n\nTake a look at your console now while speaking into your mic - you should be seeing data come back from Deepgram!\n\n![The browser console shows four onmessage events. The last one is expanded and shows a JSON object, including a data object. The data object contains the words \"how are you doing today.\"](https://res.cloudinary.com/deepgram/image/upload/v1635938341/blog/2021/11/live-transcription-mic-browser/onmessage.png)\n\n## Handling the Deepgram Response\n\nInside of the `socket.onmessage` function parse the data sent from Deepgram, pull out the transcript only, and determine if it's the final transcript for that phrase (\"utterance\"):\n\n```js\nconst received = JSON.parse(message.data)\nconst transcript = received.channel.alternatives[0].transcript\nif (transcript && received.is_final) {\n  console.log(transcript)\n}\n```\n\nYou may have noticed that for each phrase, you have received several messages from Deepgram - each growing by a word (for example \"hello\", \"hello how\", \"hello how are\", etc). Deepgram will send you back data as each word is transcribed, which is great for getting a speedy response. For this simple project, we will only show the final version of each utterance which is denoted by an `is_final` property in the response.\n\nTo neaten this up, remove the `console.log({ event: 'onmessage', message })` from this function, and then test your code again.\n\n![The terminal shows two phrases written in plain text.](https://res.cloudinary.com/deepgram/image/upload/v1635938773/blog/2021/11/live-transcription-mic-browser/is_final-log.png)\n\nThat's it! That's the project. Before we wrap up, let's give the user some indication of progress in the web page itself.\n\n## Showing Status & Progress In Browser\n\nChange the text inside of `<p id=\"status\">` to 'Not Connected'. Then, at the top of your `socket.onopen` function add this line:\n\n```js\ndocument.querySelector('#status').textContent = 'Connected'\n```\n\nRemove the text inside of `<p id=\"transcript\">`. Where you are logging the transcript in your `socket.onmessage` function add this line:\n\n```js\ndocument.querySelector('#transcript').textContent += transcript + ' '\n```\n\nTry your project once more, and your web page should show you when you're connected and what words you have spoken, thanks to Deepgram's Speech Recognition.\n\nThe full code is here:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\">Deepgram transcript will go here</p>\n    <script>\n      navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n        const mediaRecorder = new MediaRecorder(stream)\n        const socket = new WebSocket('wss://api.deepgram.com/v1/listen', [ 'token', 'YOUR_DEEPGRAM_API_KEY' ])\n\n        socket.onopen = () => {\n          console.log({ event: 'onopen' })\n          document.querySelector('#status').textContent = 'Connected'\n          mediaRecorder.addEventListener('dataavailable', event => {\n            if (event.data.size > 0 && socket.readyState == 1) {\n              socket.send(event.data)\n            }\n          })\n          mediaRecorder.start(250)\n        }\n\n        socket.onmessage = (message) => {\n          console.log({ event: 'onmessage', message })\n          const received = JSON.parse(message.data)\n          const transcript = received.channel.alternatives[0].transcript\n          if (transcript && received.is_final) {\n            document.querySelector('#transcript').textContent += transcript + ' '\n          }\n        }\n\n        socket.onclose = () => {\n          console.log({ event: 'onclose' })\n        }\n\n        socket.onerror = (error) => {\n          console.log({ event: 'onerror', error })\n        }\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nIf you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ";
}
function compiledContent() {
  return `<p>There are so many projects you can build with Deepgram\u2019s streaming audio transcriptions. Today, we are going to get live transcriptions from a user\u2019s mic inside of your browser.</p>
<p>Watch this tutorial as a video:</p>
<YouTube id="kIyPX16zuQY" />
<h2 id="before-we-start">Before We Start</h2>
<p>For this project, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>. That\u2019s it in terms of dependencies - this project is entirely browser-based.</p>
<p>Create a new <code is:raw>index.html</code> file, open it in a code editor, and add the following boilerplate code:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;Deepgram transcript will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="get-user-microphone">Get User Microphone</h2>
<p>You can request access to a user\u2019s media input devices (microphones and cameras) using a built in <code is:raw>getUserMedia()</code> method. If allowed by the user, it will return a <code is:raw>MediaStream</code> which we can then prepare to send to Deepgram. Inside of your <code is:raw>&lt;script&gt;</code> add the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ stream })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Load your <code is:raw>index.html</code> file in your browser, and you should immediately receive a prompt to access your microphone. Grant it, and then look at the console in your developer tools.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637186575/blog/2021/11/live-transcription-mic-browser/granting-mic.png" alt="The first half of the image shows the browser asking for access to the mic. An arrow with the phrase &#x22;once granted&#x22; points to the second half of the image, which has the browser console open, showing an object containing a MediaStream"></p>
<p>Now we have a <code is:raw>MediaStream</code> we must provide it to a <code is:raw>MediaRecorder</code> which will prepare the data and, once available, emit it with a <code is:raw>datavailable</code> event:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span></code></pre>
<p>We now have everything we need to send Deepgram.</p>
<h2 id="connect-to-deepgram">Connect to Deepgram</h2>
<p>To stream audio to Deepgram\u2019s Speech Recognition service, we must open a WebSocket connection and send data via it. First, establish the connection:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9"> ])</span></span></code></pre>
<Alert type="warning"><p>A reminder that this key is client-side and, therefore, your users can see it. Any user with access to your key can access the Deepgram APIs, which, in turn, may provide full account access. Refer to our post on <a href="https://blog.deepgram.com/protecting-api-key/">protecting your API key with browser live transcription</a>.</p></Alert>
<p>Then, log when socket <code is:raw>onopen</code>, <code is:raw>onmessage</code>, <code is:raw>onclose</code>, and <code is:raw>onerror</code> events are triggered:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onmessage&#39;</span><span style="color: #C9D1D9">, message })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onclose</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onerror</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">, error })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Refresh your browser and watch the console. You should see the socket connection is opened and then closed. To keep the connection open, we must swiftly send some data once the connection is opened.</p>
<h2 id="sending-data-to-deepgram">Sending Data to Deepgram</h2>
<p>Inside of the <code is:raw>socket.onopen</code> function send data to Deepgram in 250ms increments:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Deepgram isn\u2019t fussy about the timeslice you provide (here it\u2019s 250ms), but bear in mind that the bigger this number is, the longer between words being spoken and it being sent, slowing down your transcription. 100-250 is ideal.</p>
<p>Take a look at your console now while speaking into your mic - you should be seeing data come back from Deepgram!</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635938341/blog/2021/11/live-transcription-mic-browser/onmessage.png" alt="The browser console shows four onmessage events. The last one is expanded and shows a JSON object, including a data object. The data object contains the words &#x22;how are you doing today.&#x22;"></p>
<h2 id="handling-the-deepgram-response">Handling the Deepgram Response</h2>
<p>Inside of the <code is:raw>socket.onmessage</code> function parse the data sent from Deepgram, pull out the transcript only, and determine if it\u2019s the final transcript for that phrase (\u201Cutterance\u201D):</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>You may have noticed that for each phrase, you have received several messages from Deepgram - each growing by a word (for example \u201Chello\u201D, \u201Chello how\u201D, \u201Chello how are\u201D, etc). Deepgram will send you back data as each word is transcribed, which is great for getting a speedy response. For this simple project, we will only show the final version of each utterance which is denoted by an <code is:raw>is_final</code> property in the response.</p>
<p>To neaten this up, remove the <code is:raw>console.log({ event: 'onmessage', message })</code> from this function, and then test your code again.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635938773/blog/2021/11/live-transcription-mic-browser/is_final-log.png" alt="The terminal shows two phrases written in plain text."></p>
<p>That\u2019s it! That\u2019s the project. Before we wrap up, let\u2019s give the user some indication of progress in the web page itself.</p>
<h2 id="showing-status--progress-in-browser">Showing Status & Progress In Browser</h2>
<p>Change the text inside of <code is:raw>&lt;p id="status"&gt;</code> to \u2018Not Connected\u2019. Then, at the top of your <code is:raw>socket.onopen</code> function add this line:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span></code></pre>
<p>Remove the text inside of <code is:raw>&lt;p id="transcript"&gt;</code>. Where you are logging the transcript in your <code is:raw>socket.onmessage</code> function add this line:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span></span></code></pre>
<p>Try your project once more, and your web page should show you when you\u2019re connected and what words you have spoken, thanks to Deepgram\u2019s Speech Recognition.</p>
<p>The full code is here:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;Deepgram transcript will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9"> ])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">          document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">          mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">              socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">            }</span></span>
<span class="line"><span style="color: #C9D1D9">          })</span></span>
<span class="line"><span style="color: #C9D1D9">          mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onmessage&#39;</span><span style="color: #C9D1D9">, message })</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">            document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span></span>
<span class="line"><span style="color: #C9D1D9">          }</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onclose</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onerror</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">, error })</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcription-mic-browser/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>There are so many projects you can build with Deepgram’s streaming audio transcriptions. Today, we are going to get live transcriptions from a user’s mic inside of your browser.</p>
<p>Watch this tutorial as a video:</p>
${renderComponent($$result, "YouTube", YouTube, { "id": "kIyPX16zuQY" })}
<h2 id="before-we-start">Before We Start</h2>
<p>For this project, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>. That’s it in terms of dependencies - this project is entirely browser-based.</p>
<p>Create a new <code>index.html</code> file, open it in a code editor, and add the following boilerplate code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;Deepgram transcript will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="get-user-microphone">Get User Microphone</h2>
<p>You can request access to a user’s media input devices (microphones and cameras) using a built in <code>getUserMedia()</code> method. If allowed by the user, it will return a <code>MediaStream</code> which we can then prepare to send to Deepgram. Inside of your <code>&lt;script&gt;</code> add the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ stream })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Load your <code>index.html</code> file in your browser, and you should immediately receive a prompt to access your microphone. Grant it, and then look at the console in your developer tools.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637186575/blog/2021/11/live-transcription-mic-browser/granting-mic.png" alt="The first half of the image shows the browser asking for access to the mic. An arrow with the phrase &quot;once granted&quot; points to the second half of the image, which has the browser console open, showing an object containing a MediaStream"></p>
<p>Now we have a <code>MediaStream</code> we must provide it to a <code>MediaRecorder</code> which will prepare the data and, once available, emit it with a <code>datavailable</code> event:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span></code></pre>
<p>We now have everything we need to send Deepgram.</p>
<h2 id="connect-to-deepgram">Connect to Deepgram</h2>
<p>To stream audio to Deepgram’s Speech Recognition service, we must open a WebSocket connection and send data via it. First, establish the connection:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9"> ])</span></span></code></pre>
${renderComponent($$result, "Alert", Alert, { "type": "warning" }, { "default": () => renderTemplate`<p>A reminder that this key is client-side and, therefore, your users can see it. Any user with access to your key can access the Deepgram APIs, which, in turn, may provide full account access. Refer to our post on <a href="https://blog.deepgram.com/protecting-api-key/">protecting your API key with browser live transcription</a>.</p>` })}
<p>Then, log when socket <code>onopen</code>, <code>onmessage</code>, <code>onclose</code>, and <code>onerror</code> events are triggered:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onmessage&#39;</span><span style="color: #C9D1D9">, message })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onclose</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onerror</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">, error })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Refresh your browser and watch the console. You should see the socket connection is opened and then closed. To keep the connection open, we must swiftly send some data once the connection is opened.</p>
<h2 id="sending-data-to-deepgram">Sending Data to Deepgram</h2>
<p>Inside of the <code>socket.onopen</code> function send data to Deepgram in 250ms increments:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Deepgram isn’t fussy about the timeslice you provide (here it’s 250ms), but bear in mind that the bigger this number is, the longer between words being spoken and it being sent, slowing down your transcription. 100-250 is ideal.</p>
<p>Take a look at your console now while speaking into your mic - you should be seeing data come back from Deepgram!</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635938341/blog/2021/11/live-transcription-mic-browser/onmessage.png" alt="The browser console shows four onmessage events. The last one is expanded and shows a JSON object, including a data object. The data object contains the words &quot;how are you doing today.&quot;"></p>
<h2 id="handling-the-deepgram-response">Handling the Deepgram Response</h2>
<p>Inside of the <code>socket.onmessage</code> function parse the data sent from Deepgram, pull out the transcript only, and determine if it’s the final transcript for that phrase (“utterance”):</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>You may have noticed that for each phrase, you have received several messages from Deepgram - each growing by a word (for example “hello”, “hello how”, “hello how are”, etc). Deepgram will send you back data as each word is transcribed, which is great for getting a speedy response. For this simple project, we will only show the final version of each utterance which is denoted by an <code>is_final</code> property in the response.</p>
<p>To neaten this up, remove the <code>console.log({ event: 'onmessage', message })</code> from this function, and then test your code again.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1635938773/blog/2021/11/live-transcription-mic-browser/is_final-log.png" alt="The terminal shows two phrases written in plain text."></p>
<p>That’s it! That’s the project. Before we wrap up, let’s give the user some indication of progress in the web page itself.</p>
<h2 id="showing-status--progress-in-browser">Showing Status & Progress In Browser</h2>
<p>Change the text inside of <code>&lt;p id="status"&gt;</code> to ‘Not Connected’. Then, at the top of your <code>socket.onopen</code> function add this line:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span></code></pre>
<p>Remove the text inside of <code>&lt;p id="transcript"&gt;</code>. Where you are logging the transcript in your <code>socket.onmessage</code> function add this line:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span></span></code></pre>
<p>Try your project once more, and your web page should show you when you’re connected and what words you have spoken, thanks to Deepgram’s Speech Recognition.</p>
<p>The full code is here:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;Deepgram transcript will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [ </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9"> ])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">          document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">          mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">              socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">            }</span></span>
<span class="line"><span style="color: #C9D1D9">          })</span></span>
<span class="line"><span style="color: #C9D1D9">          mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onmessage&#39;</span><span style="color: #C9D1D9">, message })</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">            document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span></span>
<span class="line"><span style="color: #C9D1D9">          }</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onclose</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">onerror</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({ event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">, error })</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>If you have any questions, please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcription-mic-browser/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
