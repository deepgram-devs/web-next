import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-you-start", "text": "Before You Start" }, { "depth": 2, "slug": "create-a-deepgram-live-transcription-session", "text": "Create a Deepgram Live Transcription Session" }, { "depth": 2, "slug": "fetch-real-time-data-from-radio-stations", "text": "Fetch Real-Time Data from Radio Stations" }, { "depth": 2, "slug": "transcribe-the-radio-station", "text": "Transcribe the Radio Station" }, { "depth": 2, "slug": "save-new-transcripts-to-a-file", "text": "Save New Transcripts to a File" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "There are so many uses for Deepgram's live transcription service - from captioning meetings and events to creating home assistance and supporting call center operators by picking up on keywords.\n\nToday, you'll use the Deepgram JavaScript SDK to provide live transcriptions to live radio broadcasts and store spoken words in a file that can then be further analyzed.\n\n## Before You Start\n\nYou will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\nCreate a new directory, open it on a code editor, and navigate to it in your terminal. Initialize a new Node.js project and install this project's dependencies:\n\n```\nnpm init -y\nnpm install cross-fetch @deepgram/sdk\n```\n\n[`cross-fetch`](https://npm.im/cross-fetch) is used to make HTTP requests more straightforward in your Node.js projects. Alternatives include `axios`, `got`, and `httpie` - use whatever works for you or the default `http` library in Node.js, which requires no dependencies.\n\nCreate an `index.js` file and open it in your code editor. Initialize the project dependencies:\n\n```js\nconst fetch = require('cross-fetch')\nconst { Deepgram } = require('@deepgram/sdk')\nconst fs = require('fs')\n```\n\n## Create a Deepgram Live Transcription Session\n\nInitialize the Deepgram JavaScript SDK, and create a new live transcription session:\n\n```js\nconst deepgram = new Deepgram('YOUR_DEEPGRAM_API_KEY')\nconst deepgramLive = deepgram.transcription.live({\n  punctuate: true,\n  tier: 'enhanced'\n})\n```\n\nTwo features are used in this session - punctuation and tier. Read more about [Deepgram features](https://developers.deepgram.com/documentation/features/) such as redaction, diarization, and language.\n\n## Fetch Real-Time Data from Radio Stations\n\nMake sure you have a direct audio stream for the radio station. A good way of testing this is to open the URL in a browser - you should see just the built-in browser audio player without an accompanying web page.\n\n![A browser showing a blank page, except one live native audio player](https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/livestream-station.png)\n\nHere are a few URLs for you to try:\n\n* BBC Radio 4 (works outside the UK): http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk\n* France Inter: https://direct.franceinter.fr/live/franceinter-midfi.mp3\n\nIf you use the French channel, be sure to add `language: fr` to your Deepgram session options.\n\n```js\nconst url = 'http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk'\n\nfetch(url).then(r => r.body).then(res => {\n  res.on('readable', () => {\n    const data = res.read()\n    console.log(data)\n  })\n})\n```\n\nRun your code with `node index.js`, leave it running for a couple of seconds, and stop it with `ctrl+c`. You should see a bunch of buffers logged to your console.\n\n![Terminal showing the code being run, and 4 buffers of data](https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/logging-buffers.png)\n\nThis is what you want to see - these buffers of audio data can be sent directly to Deepgram.\n\n## Transcribe the Radio Station\n\nReplace `console.log(data)` with the following to send the buffers to Deepgram if the connection is still open:\n\n```js\nif(deepgramLive.getReadyState() === 1) {\n    deepgramLive.send(data)\n}\n```\n\nAt the bottom of `index.js`, below all other code, add this code to listen for returned transcripts:\n\n```js\ndeepgramLive.addListener('transcriptReceived', (message) => {\n  const data = JSON.parse(message)\n  const transcript = data.channel.alternatives[0].transcript\n  if(transcript) {\n    console.log(transcript)\n  }\n})\n```\n\nRerun your code, and you should see transcripts in your terminal.\n\n![Terminal showing code being run, and 4 lines of transcripts](https://res.cloudinary.com/deepgram/image/upload/v1657636164/blog/2022/07/live-transcribing-radio-feeds-js/transcripts-in-term.png)\n\n## Save New Transcripts to a File\n\nTo save these transcripts to a file, you must first create a write stream and then write content to it. At the top of your file, just below your require statements, create the stream:\n\n```js\nconst stream = fs.createWriteStream('output.txt', { flags: 'a' })\n```\n\nThe `a` flag will open the file specifically for appending new data. If it does not exist, it will be automatically created.\n\nReplace `console.log(transcript)` with the following:\n\n```js\nstream.write(transcript + ' ')\n```\n\nThis will add the new transcript to the end of the existing file, ensuring there is a space between each item.\n\nRun your code again, wait a few seconds, and then stop it. Take a look at the new `output.txt` file, and you should see a big block of text which can then be stored in a database for compliance or further analysis.\n\n## In Summary\n\nThe full code is here:\n\n```js\nconst fetch = require('cross-fetch')\nconst { Deepgram } = require('@deepgram/sdk')\nconst fs = require('fs')\nconst stream = fs.createWriteStream('output.txt', { flags:'a' })\n\nconst deepgram = new Deepgram(deepgramApiKey)\nconst deepgramLive = deepgram.transcription.live({\n  punctuate: true,\n  tier: 'enhanced'\n})\n\nconst url = 'http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk'\n\nfetch(url).then(r => r.body).then(res => {\n  res.on('readable', () => {\n    const data = res.read()\n    if(deepgramLive.getReadyState() === 1) {\n      deepgramLive.send(data)\n    }\n  })\n})\n\ndeepgramLive.addListener('transcriptReceived', (message) => {\n  const data = JSON.parse(message)\n  const transcript = data.channel.alternatives[0].transcript\n  if(transcript) {\n    stream.write(transcript + ' ')\n  }\n})\n```\n\nIf you have any questions, please feel free to reach out to us over email (`devrel@deepgram.com`) or via Twitter ([@DeepgramDevs](https://twitter.com/deepgramdevs)).\n\n```\n    \n```", "html": '<p>There are so many uses for Deepgram\u2019s live transcription service - from captioning meetings and events to creating home assistance and supporting call center operators by picking up on keywords.</p>\n<p>Today, you\u2019ll use the Deepgram JavaScript SDK to provide live transcriptions to live radio broadcasts and store spoken words in a file that can then be further analyzed.</p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>You will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Create a new directory, open it on a code editor, and navigate to it in your terminal. Initialize a new Node.js project and install this project\u2019s dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm init -y</span></span>\n<span class="line"><span style="color: #c9d1d9">npm install cross-fetch @deepgram/sdk</span></span></code></pre>\n<p><a href="https://npm.im/cross-fetch"><code is:raw>cross-fetch</code></a> is used to make HTTP requests more straightforward in your Node.js projects. Alternatives include <code is:raw>axios</code>, <code is:raw>got</code>, and <code is:raw>httpie</code> - use whatever works for you or the default <code is:raw>http</code> library in Node.js, which requires no dependencies.</p>\n<p>Create an <code is:raw>index.js</code> file and open it in your code editor. Initialize the project dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="create-a-deepgram-live-transcription-session">Create a Deepgram Live Transcription Session</h2>\n<p>Initialize the Deepgram JavaScript SDK, and create a new live transcription session:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Two features are used in this session - punctuation and tier. Read more about <a href="https://developers.deepgram.com/documentation/features/">Deepgram features</a> such as redaction, diarization, and language.</p>\n<h2 id="fetch-real-time-data-from-radio-stations">Fetch Real-Time Data from Radio Stations</h2>\n<p>Make sure you have a direct audio stream for the radio station. A good way of testing this is to open the URL in a browser - you should see just the built-in browser audio player without an accompanying web page.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/livestream-station.png" alt="A browser showing a blank page, except one live native audio player"></p>\n<p>Here are a few URLs for you to try:</p>\n<ul>\n<li>BBC Radio 4 (works outside the UK): <a href="http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk">http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk</a></li>\n<li>France Inter: <a href="https://direct.franceinter.fr/live/franceinter-midfi.mp3">https://direct.franceinter.fr/live/franceinter-midfi.mp3</a></li>\n</ul>\n<p>If you use the French channel, be sure to add <code is:raw>language: fr</code> to your Deepgram session options.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Run your code with <code is:raw>node index.js</code>, leave it running for a couple of seconds, and stop it with <code is:raw>ctrl+c</code>. You should see a bunch of buffers logged to your console.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/logging-buffers.png" alt="Terminal showing the code being run, and 4 buffers of data"></p>\n<p>This is what you want to see - these buffers of audio data can be sent directly to Deepgram.</p>\n<h2 id="transcribe-the-radio-station">Transcribe the Radio Station</h2>\n<p>Replace <code is:raw>console.log(data)</code> with the following to send the buffers to Deepgram if the connection is still open:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>At the bottom of <code is:raw>index.js</code>, below all other code, add this code to listen for returned transcripts:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Rerun your code, and you should see transcripts in your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657636164/blog/2022/07/live-transcribing-radio-feeds-js/transcripts-in-term.png" alt="Terminal showing code being run, and 4 lines of transcripts"></p>\n<h2 id="save-new-transcripts-to-a-file">Save New Transcripts to a File</h2>\n<p>To save these transcripts to a file, you must first create a write stream and then write content to it. At the top of your file, just below your require statements, create the stream:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.txt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>The <code is:raw>a</code> flag will open the file specifically for appending new data. If it does not exist, it will be automatically created.</p>\n<p>Replace <code is:raw>console.log(transcript)</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>This will add the new transcript to the end of the existing file, ensuring there is a space between each item.</p>\n<p>Run your code again, wait a few seconds, and then stop it. Take a look at the new <code is:raw>output.txt</code> file, and you should see a big block of text which can then be stored in a database for compliance or further analysis.</p>\n<h2 id="in-summary">In Summary</h2>\n<p>The full code is here:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.txt&#39;</span><span style="color: #C9D1D9">, { flags:</span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(deepgramApiKey)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>If you have any questions, please feel free to reach out to us over email (<code is:raw>devrel@deepgram.com</code>) or via Twitter (<a href="https://twitter.com/deepgramdevs">@DeepgramDevs</a>).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    </span></span></code></pre>' };
const frontmatter = { "title": "Transcribing Radio Broadcasts With Node.js", "description": "Learn how to use Deepgram to generate and store transcripts for your favorite radio stations. An excellent starting point to learn more about live transcription.", "date": "2022-07-25T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1658753935/blog/2022/07/live-transcribing-radio-feeds-js/cover.png", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["javascript", "nodejs"], "seo": { "title": "Transcribing Radio Broadcasts With Node.js", "description": "Learn how to use Deepgram to generate and store transcripts for your favorite radio stations. An excellent starting point to learn more about live transcription." }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454108/blog/live-transcribing-radio-feeds-js/ograph.png" }, "shorturls": { "share": "https://dpgr.am/dd89e87", "twitter": "https://dpgr.am/dc14509", "linkedin": "https://dpgr.am/ac23935", "reddit": "https://dpgr.am/0f3c3af", "facebook": "https://dpgr.am/151cdf6" }, "astro": { "headings": [{ "depth": 2, "slug": "before-you-start", "text": "Before You Start" }, { "depth": 2, "slug": "create-a-deepgram-live-transcription-session", "text": "Create a Deepgram Live Transcription Session" }, { "depth": 2, "slug": "fetch-real-time-data-from-radio-stations", "text": "Fetch Real-Time Data from Radio Stations" }, { "depth": 2, "slug": "transcribe-the-radio-station", "text": "Transcribe the Radio Station" }, { "depth": 2, "slug": "save-new-transcripts-to-a-file", "text": "Save New Transcripts to a File" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "There are so many uses for Deepgram's live transcription service - from captioning meetings and events to creating home assistance and supporting call center operators by picking up on keywords.\n\nToday, you'll use the Deepgram JavaScript SDK to provide live transcriptions to live radio broadcasts and store spoken words in a file that can then be further analyzed.\n\n## Before You Start\n\nYou will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\nCreate a new directory, open it on a code editor, and navigate to it in your terminal. Initialize a new Node.js project and install this project's dependencies:\n\n```\nnpm init -y\nnpm install cross-fetch @deepgram/sdk\n```\n\n[`cross-fetch`](https://npm.im/cross-fetch) is used to make HTTP requests more straightforward in your Node.js projects. Alternatives include `axios`, `got`, and `httpie` - use whatever works for you or the default `http` library in Node.js, which requires no dependencies.\n\nCreate an `index.js` file and open it in your code editor. Initialize the project dependencies:\n\n```js\nconst fetch = require('cross-fetch')\nconst { Deepgram } = require('@deepgram/sdk')\nconst fs = require('fs')\n```\n\n## Create a Deepgram Live Transcription Session\n\nInitialize the Deepgram JavaScript SDK, and create a new live transcription session:\n\n```js\nconst deepgram = new Deepgram('YOUR_DEEPGRAM_API_KEY')\nconst deepgramLive = deepgram.transcription.live({\n  punctuate: true,\n  tier: 'enhanced'\n})\n```\n\nTwo features are used in this session - punctuation and tier. Read more about [Deepgram features](https://developers.deepgram.com/documentation/features/) such as redaction, diarization, and language.\n\n## Fetch Real-Time Data from Radio Stations\n\nMake sure you have a direct audio stream for the radio station. A good way of testing this is to open the URL in a browser - you should see just the built-in browser audio player without an accompanying web page.\n\n![A browser showing a blank page, except one live native audio player](https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/livestream-station.png)\n\nHere are a few URLs for you to try:\n\n* BBC Radio 4 (works outside the UK): http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk\n* France Inter: https://direct.franceinter.fr/live/franceinter-midfi.mp3\n\nIf you use the French channel, be sure to add `language: fr` to your Deepgram session options.\n\n```js\nconst url = 'http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk'\n\nfetch(url).then(r => r.body).then(res => {\n  res.on('readable', () => {\n    const data = res.read()\n    console.log(data)\n  })\n})\n```\n\nRun your code with `node index.js`, leave it running for a couple of seconds, and stop it with `ctrl+c`. You should see a bunch of buffers logged to your console.\n\n![Terminal showing the code being run, and 4 buffers of data](https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/logging-buffers.png)\n\nThis is what you want to see - these buffers of audio data can be sent directly to Deepgram.\n\n## Transcribe the Radio Station\n\nReplace `console.log(data)` with the following to send the buffers to Deepgram if the connection is still open:\n\n```js\nif(deepgramLive.getReadyState() === 1) {\n    deepgramLive.send(data)\n}\n```\n\nAt the bottom of `index.js`, below all other code, add this code to listen for returned transcripts:\n\n```js\ndeepgramLive.addListener('transcriptReceived', (message) => {\n  const data = JSON.parse(message)\n  const transcript = data.channel.alternatives[0].transcript\n  if(transcript) {\n    console.log(transcript)\n  }\n})\n```\n\nRerun your code, and you should see transcripts in your terminal.\n\n![Terminal showing code being run, and 4 lines of transcripts](https://res.cloudinary.com/deepgram/image/upload/v1657636164/blog/2022/07/live-transcribing-radio-feeds-js/transcripts-in-term.png)\n\n## Save New Transcripts to a File\n\nTo save these transcripts to a file, you must first create a write stream and then write content to it. At the top of your file, just below your require statements, create the stream:\n\n```js\nconst stream = fs.createWriteStream('output.txt', { flags: 'a' })\n```\n\nThe `a` flag will open the file specifically for appending new data. If it does not exist, it will be automatically created.\n\nReplace `console.log(transcript)` with the following:\n\n```js\nstream.write(transcript + ' ')\n```\n\nThis will add the new transcript to the end of the existing file, ensuring there is a space between each item.\n\nRun your code again, wait a few seconds, and then stop it. Take a look at the new `output.txt` file, and you should see a big block of text which can then be stored in a database for compliance or further analysis.\n\n## In Summary\n\nThe full code is here:\n\n```js\nconst fetch = require('cross-fetch')\nconst { Deepgram } = require('@deepgram/sdk')\nconst fs = require('fs')\nconst stream = fs.createWriteStream('output.txt', { flags:'a' })\n\nconst deepgram = new Deepgram(deepgramApiKey)\nconst deepgramLive = deepgram.transcription.live({\n  punctuate: true,\n  tier: 'enhanced'\n})\n\nconst url = 'http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk'\n\nfetch(url).then(r => r.body).then(res => {\n  res.on('readable', () => {\n    const data = res.read()\n    if(deepgramLive.getReadyState() === 1) {\n      deepgramLive.send(data)\n    }\n  })\n})\n\ndeepgramLive.addListener('transcriptReceived', (message) => {\n  const data = JSON.parse(message)\n  const transcript = data.channel.alternatives[0].transcript\n  if(transcript) {\n    stream.write(transcript + ' ')\n  }\n})\n```\n\nIf you have any questions, please feel free to reach out to us over email (`devrel@deepgram.com`) or via Twitter ([@DeepgramDevs](https://twitter.com/deepgramdevs)).\n\n```\n    \n```", "html": '<p>There are so many uses for Deepgram\u2019s live transcription service - from captioning meetings and events to creating home assistance and supporting call center operators by picking up on keywords.</p>\n<p>Today, you\u2019ll use the Deepgram JavaScript SDK to provide live transcriptions to live radio broadcasts and store spoken words in a file that can then be further analyzed.</p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>You will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Create a new directory, open it on a code editor, and navigate to it in your terminal. Initialize a new Node.js project and install this project\u2019s dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm init -y</span></span>\n<span class="line"><span style="color: #c9d1d9">npm install cross-fetch @deepgram/sdk</span></span></code></pre>\n<p><a href="https://npm.im/cross-fetch"><code is:raw>cross-fetch</code></a> is used to make HTTP requests more straightforward in your Node.js projects. Alternatives include <code is:raw>axios</code>, <code is:raw>got</code>, and <code is:raw>httpie</code> - use whatever works for you or the default <code is:raw>http</code> library in Node.js, which requires no dependencies.</p>\n<p>Create an <code is:raw>index.js</code> file and open it in your code editor. Initialize the project dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="create-a-deepgram-live-transcription-session">Create a Deepgram Live Transcription Session</h2>\n<p>Initialize the Deepgram JavaScript SDK, and create a new live transcription session:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Two features are used in this session - punctuation and tier. Read more about <a href="https://developers.deepgram.com/documentation/features/">Deepgram features</a> such as redaction, diarization, and language.</p>\n<h2 id="fetch-real-time-data-from-radio-stations">Fetch Real-Time Data from Radio Stations</h2>\n<p>Make sure you have a direct audio stream for the radio station. A good way of testing this is to open the URL in a browser - you should see just the built-in browser audio player without an accompanying web page.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/livestream-station.png" alt="A browser showing a blank page, except one live native audio player"></p>\n<p>Here are a few URLs for you to try:</p>\n<ul>\n<li>BBC Radio 4 (works outside the UK): <a href="http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk">http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk</a></li>\n<li>France Inter: <a href="https://direct.franceinter.fr/live/franceinter-midfi.mp3">https://direct.franceinter.fr/live/franceinter-midfi.mp3</a></li>\n</ul>\n<p>If you use the French channel, be sure to add <code is:raw>language: fr</code> to your Deepgram session options.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Run your code with <code is:raw>node index.js</code>, leave it running for a couple of seconds, and stop it with <code is:raw>ctrl+c</code>. You should see a bunch of buffers logged to your console.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/logging-buffers.png" alt="Terminal showing the code being run, and 4 buffers of data"></p>\n<p>This is what you want to see - these buffers of audio data can be sent directly to Deepgram.</p>\n<h2 id="transcribe-the-radio-station">Transcribe the Radio Station</h2>\n<p>Replace <code is:raw>console.log(data)</code> with the following to send the buffers to Deepgram if the connection is still open:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>At the bottom of <code is:raw>index.js</code>, below all other code, add this code to listen for returned transcripts:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Rerun your code, and you should see transcripts in your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657636164/blog/2022/07/live-transcribing-radio-feeds-js/transcripts-in-term.png" alt="Terminal showing code being run, and 4 lines of transcripts"></p>\n<h2 id="save-new-transcripts-to-a-file">Save New Transcripts to a File</h2>\n<p>To save these transcripts to a file, you must first create a write stream and then write content to it. At the top of your file, just below your require statements, create the stream:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.txt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>The <code is:raw>a</code> flag will open the file specifically for appending new data. If it does not exist, it will be automatically created.</p>\n<p>Replace <code is:raw>console.log(transcript)</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>This will add the new transcript to the end of the existing file, ensuring there is a space between each item.</p>\n<p>Run your code again, wait a few seconds, and then stop it. Take a look at the new <code is:raw>output.txt</code> file, and you should see a big block of text which can then be stored in a database for compliance or further analysis.</p>\n<h2 id="in-summary">In Summary</h2>\n<p>The full code is here:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.txt&#39;</span><span style="color: #C9D1D9">, { flags:</span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(deepgramApiKey)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>If you have any questions, please feel free to reach out to us over email (<code is:raw>devrel@deepgram.com</code>) or via Twitter (<a href="https://twitter.com/deepgramdevs">@DeepgramDevs</a>).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    </span></span></code></pre>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcribing-radio-feeds-js/index.md" };
function rawContent() {
  return "There are so many uses for Deepgram's live transcription service - from captioning meetings and events to creating home assistance and supporting call center operators by picking up on keywords.\n\nToday, you'll use the Deepgram JavaScript SDK to provide live transcriptions to live radio broadcasts and store spoken words in a file that can then be further analyzed.\n\n## Before You Start\n\nYou will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\nCreate a new directory, open it on a code editor, and navigate to it in your terminal. Initialize a new Node.js project and install this project's dependencies:\n\n```\nnpm init -y\nnpm install cross-fetch @deepgram/sdk\n```\n\n[`cross-fetch`](https://npm.im/cross-fetch) is used to make HTTP requests more straightforward in your Node.js projects. Alternatives include `axios`, `got`, and `httpie` - use whatever works for you or the default `http` library in Node.js, which requires no dependencies.\n\nCreate an `index.js` file and open it in your code editor. Initialize the project dependencies:\n\n```js\nconst fetch = require('cross-fetch')\nconst { Deepgram } = require('@deepgram/sdk')\nconst fs = require('fs')\n```\n\n## Create a Deepgram Live Transcription Session\n\nInitialize the Deepgram JavaScript SDK, and create a new live transcription session:\n\n```js\nconst deepgram = new Deepgram('YOUR_DEEPGRAM_API_KEY')\nconst deepgramLive = deepgram.transcription.live({\n  punctuate: true,\n  tier: 'enhanced'\n})\n```\n\nTwo features are used in this session - punctuation and tier. Read more about [Deepgram features](https://developers.deepgram.com/documentation/features/) such as redaction, diarization, and language.\n\n## Fetch Real-Time Data from Radio Stations\n\nMake sure you have a direct audio stream for the radio station. A good way of testing this is to open the URL in a browser - you should see just the built-in browser audio player without an accompanying web page.\n\n![A browser showing a blank page, except one live native audio player](https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/livestream-station.png)\n\nHere are a few URLs for you to try:\n\n* BBC Radio 4 (works outside the UK): http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk\n* France Inter: https://direct.franceinter.fr/live/franceinter-midfi.mp3\n\nIf you use the French channel, be sure to add `language: fr` to your Deepgram session options.\n\n```js\nconst url = 'http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk'\n\nfetch(url).then(r => r.body).then(res => {\n  res.on('readable', () => {\n    const data = res.read()\n    console.log(data)\n  })\n})\n```\n\nRun your code with `node index.js`, leave it running for a couple of seconds, and stop it with `ctrl+c`. You should see a bunch of buffers logged to your console.\n\n![Terminal showing the code being run, and 4 buffers of data](https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/logging-buffers.png)\n\nThis is what you want to see - these buffers of audio data can be sent directly to Deepgram.\n\n## Transcribe the Radio Station\n\nReplace `console.log(data)` with the following to send the buffers to Deepgram if the connection is still open:\n\n```js\nif(deepgramLive.getReadyState() === 1) {\n    deepgramLive.send(data)\n}\n```\n\nAt the bottom of `index.js`, below all other code, add this code to listen for returned transcripts:\n\n```js\ndeepgramLive.addListener('transcriptReceived', (message) => {\n  const data = JSON.parse(message)\n  const transcript = data.channel.alternatives[0].transcript\n  if(transcript) {\n    console.log(transcript)\n  }\n})\n```\n\nRerun your code, and you should see transcripts in your terminal.\n\n![Terminal showing code being run, and 4 lines of transcripts](https://res.cloudinary.com/deepgram/image/upload/v1657636164/blog/2022/07/live-transcribing-radio-feeds-js/transcripts-in-term.png)\n\n## Save New Transcripts to a File\n\nTo save these transcripts to a file, you must first create a write stream and then write content to it. At the top of your file, just below your require statements, create the stream:\n\n```js\nconst stream = fs.createWriteStream('output.txt', { flags: 'a' })\n```\n\nThe `a` flag will open the file specifically for appending new data. If it does not exist, it will be automatically created.\n\nReplace `console.log(transcript)` with the following:\n\n```js\nstream.write(transcript + ' ')\n```\n\nThis will add the new transcript to the end of the existing file, ensuring there is a space between each item.\n\nRun your code again, wait a few seconds, and then stop it. Take a look at the new `output.txt` file, and you should see a big block of text which can then be stored in a database for compliance or further analysis.\n\n## In Summary\n\nThe full code is here:\n\n```js\nconst fetch = require('cross-fetch')\nconst { Deepgram } = require('@deepgram/sdk')\nconst fs = require('fs')\nconst stream = fs.createWriteStream('output.txt', { flags:'a' })\n\nconst deepgram = new Deepgram(deepgramApiKey)\nconst deepgramLive = deepgram.transcription.live({\n  punctuate: true,\n  tier: 'enhanced'\n})\n\nconst url = 'http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk'\n\nfetch(url).then(r => r.body).then(res => {\n  res.on('readable', () => {\n    const data = res.read()\n    if(deepgramLive.getReadyState() === 1) {\n      deepgramLive.send(data)\n    }\n  })\n})\n\ndeepgramLive.addListener('transcriptReceived', (message) => {\n  const data = JSON.parse(message)\n  const transcript = data.channel.alternatives[0].transcript\n  if(transcript) {\n    stream.write(transcript + ' ')\n  }\n})\n```\n\nIf you have any questions, please feel free to reach out to us over email (`devrel@deepgram.com`) or via Twitter ([@DeepgramDevs](https://twitter.com/deepgramdevs)).\n\n```\n    \n```";
}
function compiledContent() {
  return '<p>There are so many uses for Deepgram\u2019s live transcription service - from captioning meetings and events to creating home assistance and supporting call center operators by picking up on keywords.</p>\n<p>Today, you\u2019ll use the Deepgram JavaScript SDK to provide live transcriptions to live radio broadcasts and store spoken words in a file that can then be further analyzed.</p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>You will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Create a new directory, open it on a code editor, and navigate to it in your terminal. Initialize a new Node.js project and install this project\u2019s dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm init -y</span></span>\n<span class="line"><span style="color: #c9d1d9">npm install cross-fetch @deepgram/sdk</span></span></code></pre>\n<p><a href="https://npm.im/cross-fetch"><code is:raw>cross-fetch</code></a> is used to make HTTP requests more straightforward in your Node.js projects. Alternatives include <code is:raw>axios</code>, <code is:raw>got</code>, and <code is:raw>httpie</code> - use whatever works for you or the default <code is:raw>http</code> library in Node.js, which requires no dependencies.</p>\n<p>Create an <code is:raw>index.js</code> file and open it in your code editor. Initialize the project dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="create-a-deepgram-live-transcription-session">Create a Deepgram Live Transcription Session</h2>\n<p>Initialize the Deepgram JavaScript SDK, and create a new live transcription session:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Two features are used in this session - punctuation and tier. Read more about <a href="https://developers.deepgram.com/documentation/features/">Deepgram features</a> such as redaction, diarization, and language.</p>\n<h2 id="fetch-real-time-data-from-radio-stations">Fetch Real-Time Data from Radio Stations</h2>\n<p>Make sure you have a direct audio stream for the radio station. A good way of testing this is to open the URL in a browser - you should see just the built-in browser audio player without an accompanying web page.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/livestream-station.png" alt="A browser showing a blank page, except one live native audio player"></p>\n<p>Here are a few URLs for you to try:</p>\n<ul>\n<li>BBC Radio 4 (works outside the UK): <a href="http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk">http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk</a></li>\n<li>France Inter: <a href="https://direct.franceinter.fr/live/franceinter-midfi.mp3">https://direct.franceinter.fr/live/franceinter-midfi.mp3</a></li>\n</ul>\n<p>If you use the French channel, be sure to add <code is:raw>language: fr</code> to your Deepgram session options.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Run your code with <code is:raw>node index.js</code>, leave it running for a couple of seconds, and stop it with <code is:raw>ctrl+c</code>. You should see a bunch of buffers logged to your console.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/logging-buffers.png" alt="Terminal showing the code being run, and 4 buffers of data"></p>\n<p>This is what you want to see - these buffers of audio data can be sent directly to Deepgram.</p>\n<h2 id="transcribe-the-radio-station">Transcribe the Radio Station</h2>\n<p>Replace <code is:raw>console.log(data)</code> with the following to send the buffers to Deepgram if the connection is still open:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>At the bottom of <code is:raw>index.js</code>, below all other code, add this code to listen for returned transcripts:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Rerun your code, and you should see transcripts in your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657636164/blog/2022/07/live-transcribing-radio-feeds-js/transcripts-in-term.png" alt="Terminal showing code being run, and 4 lines of transcripts"></p>\n<h2 id="save-new-transcripts-to-a-file">Save New Transcripts to a File</h2>\n<p>To save these transcripts to a file, you must first create a write stream and then write content to it. At the top of your file, just below your require statements, create the stream:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.txt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>The <code is:raw>a</code> flag will open the file specifically for appending new data. If it does not exist, it will be automatically created.</p>\n<p>Replace <code is:raw>console.log(transcript)</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>This will add the new transcript to the end of the existing file, ensuring there is a space between each item.</p>\n<p>Run your code again, wait a few seconds, and then stop it. Take a look at the new <code is:raw>output.txt</code> file, and you should see a big block of text which can then be stored in a database for compliance or further analysis.</p>\n<h2 id="in-summary">In Summary</h2>\n<p>The full code is here:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.txt&#39;</span><span style="color: #C9D1D9">, { flags:</span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(deepgramApiKey)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>If you have any questions, please feel free to reach out to us over email (<code is:raw>devrel@deepgram.com</code>) or via Twitter (<a href="https://twitter.com/deepgramdevs">@DeepgramDevs</a>).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    </span></span></code></pre>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcribing-radio-feeds-js/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>There are so many uses for Deepgram’s live transcription service - from captioning meetings and events to creating home assistance and supporting call center operators by picking up on keywords.</p>
<p>Today, you’ll use the Deepgram JavaScript SDK to provide live transcriptions to live radio broadcasts and store spoken words in a file that can then be further analyzed.</p>
<h2 id="before-you-start">Before You Start</h2>
<p>You will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>
<p>Create a new directory, open it on a code editor, and navigate to it in your terminal. Initialize a new Node.js project and install this project’s dependencies:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm init -y</span></span>
<span class="line"><span style="color: #c9d1d9">npm install cross-fetch @deepgram/sdk</span></span></code></pre>
<p><a href="https://npm.im/cross-fetch"><code>cross-fetch</code></a> is used to make HTTP requests more straightforward in your Node.js projects. Alternatives include <code>axios</code>, <code>got</code>, and <code>httpie</code> - use whatever works for you or the default <code>http</code> library in Node.js, which requires no dependencies.</p>
<p>Create an <code>index.js</code> file and open it in your code editor. Initialize the project dependencies:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="create-a-deepgram-live-transcription-session">Create a Deepgram Live Transcription Session</h2>
<p>Initialize the Deepgram JavaScript SDK, and create a new live transcription session:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Two features are used in this session - punctuation and tier. Read more about <a href="https://developers.deepgram.com/documentation/features/">Deepgram features</a> such as redaction, diarization, and language.</p>
<h2 id="fetch-real-time-data-from-radio-stations">Fetch Real-Time Data from Radio Stations</h2>
<p>Make sure you have a direct audio stream for the radio station. A good way of testing this is to open the URL in a browser - you should see just the built-in browser audio player without an accompanying web page.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/livestream-station.png" alt="A browser showing a blank page, except one live native audio player"></p>
<p>Here are a few URLs for you to try:</p>
<ul>
<li>BBC Radio 4 (works outside the UK): <a href="http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk">http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk</a></li>
<li>France Inter: <a href="https://direct.franceinter.fr/live/franceinter-midfi.mp3">https://direct.franceinter.fr/live/franceinter-midfi.mp3</a></li>
</ul>
<p>If you use the French channel, be sure to add <code>language: fr</code> to your Deepgram session options.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data)</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Run your code with <code>node index.js</code>, leave it running for a couple of seconds, and stop it with <code>ctrl+c</code>. You should see a bunch of buffers logged to your console.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657635287/blog/2022/07/live-transcribing-radio-feeds-js/logging-buffers.png" alt="Terminal showing the code being run, and 4 buffers of data"></p>
<p>This is what you want to see - these buffers of audio data can be sent directly to Deepgram.</p>
<h2 id="transcribe-the-radio-station">Transcribe the Radio Station</h2>
<p>Replace <code>console.log(data)</code> with the following to send the buffers to Deepgram if the connection is still open:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>At the bottom of <code>index.js</code>, below all other code, add this code to listen for returned transcripts:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Rerun your code, and you should see transcripts in your terminal.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657636164/blog/2022/07/live-transcribing-radio-feeds-js/transcripts-in-term.png" alt="Terminal showing code being run, and 4 lines of transcripts"></p>
<h2 id="save-new-transcripts-to-a-file">Save New Transcripts to a File</h2>
<p>To save these transcripts to a file, you must first create a write stream and then write content to it. At the top of your file, just below your require statements, create the stream:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.txt&#39;</span><span style="color: #C9D1D9">, { flags: </span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>
<p>The <code>a</code> flag will open the file specifically for appending new data. If it does not exist, it will be automatically created.</p>
<p>Replace <code>console.log(transcript)</code> with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This will add the new transcript to the end of the existing file, ensuring there is a space between each item.</p>
<p>Run your code again, wait a few seconds, and then stop it. Take a look at the new <code>output.txt</code> file, and you should see a big block of text which can then be stored in a database for compliance or further analysis.</p>
<h2 id="in-summary">In Summary</h2>
<p>The full code is here:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fetch</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;cross-fetch&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;output.txt&#39;</span><span style="color: #C9D1D9">, { flags:</span><span style="color: #A5D6FF">&#39;a&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(deepgramApiKey)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourlw_online_nonuk&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(url).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.body).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">res</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;readable&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">read</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(deepgramLive.</span><span style="color: #D2A8FF">getReadyState</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>
<span class="line"><span style="color: #C9D1D9">    stream.</span><span style="color: #D2A8FF">write</span><span style="color: #C9D1D9">(transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>If you have any questions, please feel free to reach out to us over email (<code>devrel@deepgram.com</code>) or via Twitter (<a href="https://twitter.com/deepgramdevs">@DeepgramDevs</a>).</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    </span></span></code></pre>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcribing-radio-feeds-js/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
