import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "cli---what-we-get-out-of-the-box", "text": "CLI - What we get out of the box" }, { "depth": 2, "slug": "project-files", "text": "Project Files" }, { "depth": 3, "slug": "indexhtml", "text": "index.html" }, { "depth": 3, "slug": "mainjs", "text": "main.js" }, { "depth": 5, "slug": "vue-2", "text": "Vue 2" }, { "depth": 5, "slug": "vue-3", "text": "Vue 3" }, { "depth": 3, "slug": "appvue", "text": "App.vue" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": "\nVue is a front-end JavaScript framework for building UIs (User Interfaces) and SPAs (Single-Page-Applications). Vue 3 has been out for a while, but until now, I hadn't taken the time to jump into it since it's a little daunting to have to learn something new.\n\nBut no more excuses. I'm diving into Vue 3, and I'm going to write my impressions of how it compares to Vue 2. If, like me, you have questions such as:\n\n*   How do I set up component files in Vue 3?\n*   What is this new `setup()` method?\n*   What is the Composition API (Vue 3) versus the Options API (Vue 2)?\n*   Are props, events, and lifecycle hooks basically the same? Or will I encounter big changes?\n*   How do I even get started with Vue 3?\n\nThen this series of posts will be valuable to you! Read on if you are interested in getting started in Vue 3.\n\n## CLI - What we get out of the box\n\nLet's start by comparing Vue 2 and Vue 3 project setup using the Vue CLI.\n\nVue CLI helps you bootstrap a new Vue project, giving you all the files you need to get up and running.\n\nWith Vue 2, all you had to do was run the following command in your terminal (as long as you had Vue installed first), and the CLI would guide you through setup.\n\n```js\nvue create YOUR-PROJECT-NAME\n```\n\nGood news! With Vue 3, it's almost entirely the same. After you have [installed Vue 3](https://v3.vuejs.org/guide/installation.html#npm), you can just type that command, and you will see a list to choose from. You can select either Vue 2 or Vue 3 for your new project.\n\n![Vue CLI choices](https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/vue-presets.png)\n\nI love this because it means I don't have to fully commit to going over to Vue 3 if it turns out it's not to my liking. I can easily bootstrap a project in either Vue 2 or Vue 3 after upgrading to Vue 3.\n\nI'll select Vue 3 this time, so I can see how this scaffolded project compares to what I would get out of the box with Vue 2. I'll start by looking at the files I expect I would need.\n\n## Project Files\n\nAs a Vue user, I know that three of the important files that make Vue work and render onto the page are:\n\n*   **index.html**\n*   **main.js**\n*   **App.vue**.\n\nI'll examine those files first to see if there are any noticeable changes between Vue 2 and Vue 3. Notice in the screenshot that the file structure of a project created by the CLI is identical for both Vue 2 and Vue 3. However, if we dig in and examine the three files I called out in the list above, we'll find some changes.\n\n![File trees Vue 2 vs Vue 3](https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/files-comparison.png)\n\n### index.html\n\nWhen building even the most basic webpage (not just Vue projects), the **index.html** file is the file that serves as the default starting page, giving the basic skeleton of what we see on the page (the basic HTML structure).\n\nHere is the **index.html** file that is created with a Vue 2 project. And interestingly, the file is exactly the same in a Vue 3 project.\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\" />\r\n    <title><%= htmlWebpackPlugin.options.title %></title>\r\n  </head>\r\n  <body>\r\n    <noscript>\r\n      <strong\r\n        >We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work\r\n        properly without JavaScript enabled. Please enable it to\r\n        continue.</strong\r\n      >\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    {/*<!-- built files will be auto injected -->*/}\r\n  </body>\r\n</html>\n```\n\nThis file is extremely important, which is why it is my first instinct to check it out and see if anything has changed between Vue 2 and Vue 3.\n\nThe **index.html** file contains a `div` element with `id=\"app\"`, and that is where Vue knows to look so it can mount the application into the DOM.\n\n```html\n<div id=\"app\"></div>\n```\n\nVue uses this `div` as an entry point for where to inject all the Vue files. Within those Vue files, the Vue magic happens, but it is that first entry point `div` that gets the Vue code into the main HTML page.\n\nSince this file is identical in both Vue 2 and Vue 3 projects, this tells me that at least in this aspect, both Vue 2 and Vue 3 use the same approach to putting Vue files in the DOM - they search for a `div` in the **index.html** file, and when the `div` is found, the Vue app attaches to that particular element.\n\n### main.js\n\nThe **main.js** file in a Vue project is where the Vue instance itself gets initialized. (A Vue application is a Javascript object under the hood - each unique Vue project is an instance object of the Vue object. It inherits properties and methods that make Vue work the way it does.)\n\nIn Vue 2, app initialization looks like this:\n\n```js\nimport Vue from 'vue'\r\nimport App from './App.vue'\r\n\r\nnew Vue({\r\n  render: (h) => h(App),\r\n}).$mount('#app')\n```\n\nBut in Vue 3, it looks like this:\n\n```js\nimport { createApp } from 'vue'\r\nimport App from './App.vue'\r\n\r\ncreateApp(App).mount('#app')\n```\n\nThis is clearly a big change. I want to understand both, so I'll first explain what's happening in Vue 2 and then compare it with Vue 3.\n\n##### Vue 2\n\nFirst, I'll take a look at what's going on in Vue 2. I notice these two important statements:\n\n```js\nimport Vue from 'vue'\r\nimport App from './App.vue'\n```\n\nThe **Vue** constructor function has to be imported from Vue so that it can be used to create a *new instance of Vue*. **App** is also imported (it is the **App.vue** file in the project) because I need a *root Vue component* where all my Vue code will live. Any children components I later build will come into the project through that App file.\n\nNext, I see this in the Vue 2 **main.js** file:\n\n```js\nnew Vue({\r\n  render: (h) => h(App),\r\n}).$mount('#app')\n```\n\nThis is the Vue constructor function being used. `new Vue()` creates a new instance of the Vue object. And an object is passed into the constructor function `Vue({...})` which is known as the **options** object. This is why Vue 2 is sometimes referred to as the **Options API** (even though the Options API is just a *part* of Vue 2). The options are those properties like data, methods, mounted, computed, and so on.\n\nOn the next line, I see `render: h => h(App)`. The render property tells Vue to render the component as HTML (`render` is actually a function that is part of the Vue options API). You can read more in [this article](https://css-tricks.com/what-does-the-h-stand-for-in-vues-render-method/) about why the `h` is used if you are curious. The code in the **App.vue** component file is passed into that render function, so it gets built out as HTML (and there is other stuff going on to make Vue do its reactivity magic).\n\nThe [$mount](https://vuejs.org/v2/api/#vm-mount) method is a built-in Vue method that manually starts the mounting of the Vue instance.\n\n##### Vue 3\n\nIn Vue 3, I see that the **main.js** file looks very different:\n\n```js\nimport { createApp } from 'vue'\r\nimport App from './App.vue'\r\n\r\ncreateApp(App).mount('#app')\n```\n\nThis seems like a lot less code. Instead of importing a constructor function to create a Vue object instance, I see a function called `createApp` being imported. It's striking to me that initialization is happening with just one line of code, `createApp(App).mount('#app')`.\n\nEven though it's not apparent here, the `createApp` function is actually still using the `new Vue()` constructor inside the function. The difference now is that it *makes a copy* of the Vue instance. Instead of using `new Vue()` directly (and directly adding configuration options which will affect all uses of that Vue instance, resulting in mutations to global state), the `createApp` makes a copy that can be separately configured. By encapsulating this within a function, it gives me the ability to create separate Vue instances, and configuration to each instance won't affect other instances.\n\nThis is an improvement because now it's easier to create two Vue objects with separate configurations if needed. Here is an example of a setup that is doing that:\n\n```js\nimport GlobalApp from './App.vue'\r\n\r\n//Create one Vue app using same global app file and add unique configuration\r\nconst app1 = Vue.createApp(GlobalApp)\r\n\r\napp.component('SearchInput', SearchInputComponent)\r\napp.directive('focus', FocusDirective)\r\napp.use(LocalPlugin)\r\n\r\n//Create second Vue app using same global app file and add unique configuration\r\nconst app2 = Vue.createApp(GlobalApp)\r\n\r\napp.component('Modal', ModalComponent)\r\napp.directive('toolip', TooltipDirective)\r\napp.use(DifferentPlugin)\n```\n\nWhy is this helpful? I can only imagine possible situations. Perhaps if different teams using Vue want to build off the same main App file but add their own options, plugins, features, etc. Or maybe so that I could build something as a core but then branch off on different paths to see how different configurations work.\n\nWhatever the reason, just having that ability has made Vue better.\n\n### App.vue\n\nThe last file I want to look at to see if there are any differences out of the box is the **App.vue** file.\n\nThe **App.vue** file is the root component, the one that is the starting point for rendering the Vue code when the application gets mounted to that DOM element in the **index.html** file.\n\nAfter comparing **App.vue** in Vue 2 and **App.vue** in Vue 3, I see only one difference, and it's in the template block.\n\nHere is the Vue 2 **App.vue** template:\n\n```html\n<template>\r\n  <div id=\"app\">\r\n    <img alt=\"Vue logo\" src=\"./assets/logo.png\" />\r\n    <HelloWorld msg=\"Welcome to Your Vue.js App\" />\r\n  </div>\r\n</template>\n```\n\nAnd here is the Vue 3 **App.vue** template:\n\n```html\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\" />\r\n  <HelloWorld msg=\"Welcome to Your Vue.js App\" />\r\n</template>\n```\n\nI'm surprised to see that there is no longer the need for the surrounding root div in the template. We are no longer required to have a single root element, like so:\n\n```html\n<template>\r\n  <div id=\"app\">...</div>\r\n</template>\n```\n\nIn Vue 2, we had to provide a single root element as the direct child of the template, but now in Vue 3, we can have many direct child elements, i.e., multiple root elements. This eliminates all the extra divs that showed up around the HTML code for each component.\n\nHowever, it means that if you put a non-prop attribute on the component, and you use multi-root elements rather than a single root element like in Vue 2, that attribute won't show up in your component unless you explicitly [bind an element to those attributes](https://v3.vuejs.org/guide/component-attrs.html#disabling-attribute-inheritance). Just something to be aware of.\n\n## Conclusion\n\nSo far, I'm not too intimidated by these changes I see in Vue 3 versus Vue 2, but I haven't really gotten into the big stuff yet.\n\nIn my next post in this series, I'll examine the `setup() ` function, which is probably the most important change to understand. It will be a good opportunity for comparing the Composition API (which comes with Vue 3) versus the Options API (which was the Vue 2 way of doing things).\n\nPlease follow me on [Twitter](https://twitter.com/sandra_rodgers_) if you want to dive into more Vue 3 with me!\n\n        ", "html": `<p>Vue is a front-end JavaScript framework for building UIs (User Interfaces) and SPAs (Single-Page-Applications). Vue 3 has been out for a while, but until now, I hadn\u2019t taken the time to jump into it since it\u2019s a little daunting to have to learn something new.</p>
<p>But no more excuses. I\u2019m diving into Vue 3, and I\u2019m going to write my impressions of how it compares to Vue 2. If, like me, you have questions such as:</p>
<ul>
<li>How do I set up component files in Vue 3?</li>
<li>What is this new <code is:raw>setup()</code> method?</li>
<li>What is the Composition API (Vue 3) versus the Options API (Vue 2)?</li>
<li>Are props, events, and lifecycle hooks basically the same? Or will I encounter big changes?</li>
<li>How do I even get started with Vue 3?</li>
</ul>
<p>Then this series of posts will be valuable to you! Read on if you are interested in getting started in Vue 3.</p>
<h2 id="cli---what-we-get-out-of-the-box">CLI - What we get out of the box</h2>
<p>Let\u2019s start by comparing Vue 2 and Vue 3 project setup using the Vue CLI.</p>
<p>Vue CLI helps you bootstrap a new Vue project, giving you all the files you need to get up and running.</p>
<p>With Vue 2, all you had to do was run the following command in your terminal (as long as you had Vue installed first), and the CLI would guide you through setup.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue create </span><span style="color: #79C0FF">YOUR</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">PROJECT</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">NAME</span></span></code></pre>
<p>Good news! With Vue 3, it\u2019s almost entirely the same. After you have <a href="https://v3.vuejs.org/guide/installation.html#npm">installed Vue 3</a>, you can just type that command, and you will see a list to choose from. You can select either Vue 2 or Vue 3 for your new project.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/vue-presets.png" alt="Vue CLI choices"></p>
<p>I love this because it means I don\u2019t have to fully commit to going over to Vue 3 if it turns out it\u2019s not to my liking. I can easily bootstrap a project in either Vue 2 or Vue 3 after upgrading to Vue 3.</p>
<p>I\u2019ll select Vue 3 this time, so I can see how this scaffolded project compares to what I would get out of the box with Vue 2. I\u2019ll start by looking at the files I expect I would need.</p>
<h2 id="project-files">Project Files</h2>
<p>As a Vue user, I know that three of the important files that make Vue work and render onto the page are:</p>
<ul>
<li><strong>index.html</strong></li>
<li><strong>main.js</strong></li>
<li><strong>App.vue</strong>.</li>
</ul>
<p>I\u2019ll examine those files first to see if there are any noticeable changes between Vue 2 and Vue 3. Notice in the screenshot that the file structure of a project created by the CLI is identical for both Vue 2 and Vue 3. However, if we dig in and examine the three files I called out in the list above, we\u2019ll find some changes.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/files-comparison.png" alt="File trees Vue 2 vs Vue 3"></p>
<h3 id="indexhtml">index.html</h3>
<p>When building even the most basic webpage (not just Vue projects), the <strong>index.html</strong> file is the file that serves as the default starting page, giving the basic skeleton of what we see on the page (the basic HTML structure).</p>
<p>Here is the <strong>index.html</strong> file that is created with a Vue 2 project. And interestingly, the file is exactly the same in a Vue 3 project.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;utf-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width,initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">link</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rel</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;icon&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #FFA198">&lt;</span><span style="color: #A5D6FF">%= BASE_URL %&gt;favicon.ico&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FFA198">&lt;</span><span style="color: #C9D1D9">%= htmlWebpackPlugin.options.title %&gt;&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">noscript</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">strong</span></span>
<span class="line"><span style="color: #C9D1D9">        &gt;We&#39;re sorry but </span><span style="color: #FFA198">&lt;</span><span style="color: #C9D1D9">%= htmlWebpackPlugin.options.title %&gt; doesn&#39;t work</span></span>
<span class="line"><span style="color: #C9D1D9">        properly without JavaScript enabled. Please enable it to</span></span>
<span class="line"><span style="color: #C9D1D9">        continue.&lt;/</span><span style="color: #7EE787">strong</span></span>
<span class="line"><span style="color: #C9D1D9">      &gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">noscript</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">&lt;!-- built files will be auto injected --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>This file is extremely important, which is why it is my first instinct to check it out and see if anything has changed between Vue 2 and Vue 3.</p>
<p>The <strong>index.html</strong> file contains a <code is:raw>div</code> element with <code is:raw>id="app"</code>, and that is where Vue knows to look so it can mount the application into the DOM.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Vue uses this <code is:raw>div</code> as an entry point for where to inject all the Vue files. Within those Vue files, the Vue magic happens, but it is that first entry point <code is:raw>div</code> that gets the Vue code into the main HTML page.</p>
<p>Since this file is identical in both Vue 2 and Vue 3 projects, this tells me that at least in this aspect, both Vue 2 and Vue 3 use the same approach to putting Vue files in the DOM - they search for a <code is:raw>div</code> in the <strong>index.html</strong> file, and when the <code is:raw>div</code> is found, the Vue app attaches to that particular element.</p>
<h3 id="mainjs">main.js</h3>
<p>The <strong>main.js</strong> file in a Vue project is where the Vue instance itself gets initialized. (A Vue application is a Javascript object under the hood - each unique Vue project is an instance object of the Vue object. It inherits properties and methods that make Vue work the way it does.)</p>
<p>In Vue 2, app initialization looks like this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Vue </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">: (</span><span style="color: #FFA657">h</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">h</span><span style="color: #C9D1D9">(App),</span></span>
<span class="line"><span style="color: #C9D1D9">}).</span><span style="color: #D2A8FF">$mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>But in Vue 3, it looks like this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This is clearly a big change. I want to understand both, so I\u2019ll first explain what\u2019s happening in Vue 2 and then compare it with Vue 3.</p>
<h5 id="vue-2">Vue 2</h5>
<p>First, I\u2019ll take a look at what\u2019s going on in Vue 2. I notice these two important statements:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Vue </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span></code></pre>
<p>The <strong>Vue</strong> constructor function has to be imported from Vue so that it can be used to create a <em>new instance of Vue</em>. <strong>App</strong> is also imported (it is the <strong>App.vue</strong> file in the project) because I need a <em>root Vue component</em> where all my Vue code will live. Any children components I later build will come into the project through that App file.</p>
<p>Next, I see this in the Vue 2 <strong>main.js</strong> file:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">: (</span><span style="color: #FFA657">h</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">h</span><span style="color: #C9D1D9">(App),</span></span>
<span class="line"><span style="color: #C9D1D9">}).</span><span style="color: #D2A8FF">$mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This is the Vue constructor function being used. <code is:raw>new Vue()</code> creates a new instance of the Vue object. And an object is passed into the constructor function <code is:raw>Vue({...})</code> which is known as the <strong>options</strong> object. This is why Vue 2 is sometimes referred to as the <strong>Options API</strong> (even though the Options API is just a <em>part</em> of Vue 2). The options are those properties like data, methods, mounted, computed, and so on.</p>
<p>On the next line, I see <code is:raw>render: h =&gt; h(App)</code>. The render property tells Vue to render the component as HTML (<code is:raw>render</code> is actually a function that is part of the Vue options API). You can read more in <a href="https://css-tricks.com/what-does-the-h-stand-for-in-vues-render-method/">this article</a> about why the <code is:raw>h</code> is used if you are curious. The code in the <strong>App.vue</strong> component file is passed into that render function, so it gets built out as HTML (and there is other stuff going on to make Vue do its reactivity magic).</p>
<p>The <a href="https://vuejs.org/v2/api/#vm-mount">$mount</a> method is a built-in Vue method that manually starts the mounting of the Vue instance.</p>
<h5 id="vue-3">Vue 3</h5>
<p>In Vue 3, I see that the <strong>main.js</strong> file looks very different:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This seems like a lot less code. Instead of importing a constructor function to create a Vue object instance, I see a function called <code is:raw>createApp</code> being imported. It\u2019s striking to me that initialization is happening with just one line of code, <code is:raw>createApp(App).mount('#app')</code>.</p>
<p>Even though it\u2019s not apparent here, the <code is:raw>createApp</code> function is actually still using the <code is:raw>new Vue()</code> constructor inside the function. The difference now is that it <em>makes a copy</em> of the Vue instance. Instead of using <code is:raw>new Vue()</code> directly (and directly adding configuration options which will affect all uses of that Vue instance, resulting in mutations to global state), the <code is:raw>createApp</code> makes a copy that can be separately configured. By encapsulating this within a function, it gives me the ability to create separate Vue instances, and configuration to each instance won\u2019t affect other instances.</p>
<p>This is an improvement because now it\u2019s easier to create two Vue objects with separate configurations if needed. Here is an example of a setup that is doing that:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> GlobalApp </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">//Create one Vue app using same global app file and add unique configuration</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app1</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Vue.</span><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(GlobalApp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">component</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;SearchInput&#39;</span><span style="color: #C9D1D9">, SearchInputComponent)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">directive</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;focus&#39;</span><span style="color: #C9D1D9">, FocusDirective)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(LocalPlugin)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">//Create second Vue app using same global app file and add unique configuration</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Vue.</span><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(GlobalApp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">component</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Modal&#39;</span><span style="color: #C9D1D9">, ModalComponent)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">directive</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;toolip&#39;</span><span style="color: #C9D1D9">, TooltipDirective)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(DifferentPlugin)</span></span></code></pre>
<p>Why is this helpful? I can only imagine possible situations. Perhaps if different teams using Vue want to build off the same main App file but add their own options, plugins, features, etc. Or maybe so that I could build something as a core but then branch off on different paths to see how different configurations work.</p>
<p>Whatever the reason, just having that ability has made Vue better.</p>
<h3 id="appvue">App.vue</h3>
<p>The last file I want to look at to see if there are any differences out of the box is the <strong>App.vue</strong> file.</p>
<p>The <strong>App.vue</strong> file is the root component, the one that is the starting point for rendering the Vue code when the application gets mounted to that DOM element in the <strong>index.html</strong> file.</p>
<p>After comparing <strong>App.vue</strong> in Vue 2 and <strong>App.vue</strong> in Vue 3, I see only one difference, and it\u2019s in the template block.</p>
<p>Here is the Vue 2 <strong>App.vue</strong> template:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">alt</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Vue logo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;./assets/logo.png&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #FFA198">HelloWorld</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">msg</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Welcome to Your Vue.js App&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>And here is the Vue 3 <strong>App.vue</strong> template:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">alt</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Vue logo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;./assets/logo.png&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #FFA198">HelloWorld</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">msg</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Welcome to Your Vue.js App&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>I\u2019m surprised to see that there is no longer the need for the surrounding root div in the template. We are no longer required to have a single root element, like so:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>In Vue 2, we had to provide a single root element as the direct child of the template, but now in Vue 3, we can have many direct child elements, i.e., multiple root elements. This eliminates all the extra divs that showed up around the HTML code for each component.</p>
<p>However, it means that if you put a non-prop attribute on the component, and you use multi-root elements rather than a single root element like in Vue 2, that attribute won\u2019t show up in your component unless you explicitly <a href="https://v3.vuejs.org/guide/component-attrs.html#disabling-attribute-inheritance">bind an element to those attributes</a>. Just something to be aware of.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So far, I\u2019m not too intimidated by these changes I see in Vue 3 versus Vue 2, but I haven\u2019t really gotten into the big stuff yet.</p>
<p>In my next post in this series, I\u2019ll examine the <code is:raw>setup() </code> function, which is probably the most important change to understand. It will be a good opportunity for comparing the Composition API (which comes with Vue 3) versus the Options API (which was the Vue 2 way of doing things).</p>
<p>Please follow me on <a href="https://twitter.com/sandra_rodgers_">Twitter</a> if you want to dive into more Vue 3 with me!</p>` };
const frontmatter = { "title": "Diving Into Vue 3 - Getting Started", "description": "Compare how setting up a project in Vue 3 differs from setting one up in Vue 2, and take a look at what Vue 3 gives out of the box.", "date": "2022-01-28T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1643297450/blog/2022/01/diving-into-vue-3-getting-started/dive-into-vue-3%402x.jpg", "authors": ["sandra-rodgers"], "category": "tutorial", "tags": ["vuejs", "javascript"], "seo": { "title": "Diving Into Vue 3 - Getting Started", "description": "Compare how setting up a project in Vue 3 differs from setting one up in Vue 2, and take a look at what Vue 3 gives out of the box." }, "shorturls": { "share": "https://dpgr.am/7f7a2e9", "twitter": "https://dpgr.am/d1d8f9b", "linkedin": "https://dpgr.am/2b4d230", "reddit": "https://dpgr.am/af0682a", "facebook": "https://dpgr.am/af881e5" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453841/blog/diving-into-vue-3-getting-started/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "cli---what-we-get-out-of-the-box", "text": "CLI - What we get out of the box" }, { "depth": 2, "slug": "project-files", "text": "Project Files" }, { "depth": 3, "slug": "indexhtml", "text": "index.html" }, { "depth": 3, "slug": "mainjs", "text": "main.js" }, { "depth": 5, "slug": "vue-2", "text": "Vue 2" }, { "depth": 5, "slug": "vue-3", "text": "Vue 3" }, { "depth": 3, "slug": "appvue", "text": "App.vue" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": "\nVue is a front-end JavaScript framework for building UIs (User Interfaces) and SPAs (Single-Page-Applications). Vue 3 has been out for a while, but until now, I hadn't taken the time to jump into it since it's a little daunting to have to learn something new.\n\nBut no more excuses. I'm diving into Vue 3, and I'm going to write my impressions of how it compares to Vue 2. If, like me, you have questions such as:\n\n*   How do I set up component files in Vue 3?\n*   What is this new `setup()` method?\n*   What is the Composition API (Vue 3) versus the Options API (Vue 2)?\n*   Are props, events, and lifecycle hooks basically the same? Or will I encounter big changes?\n*   How do I even get started with Vue 3?\n\nThen this series of posts will be valuable to you! Read on if you are interested in getting started in Vue 3.\n\n## CLI - What we get out of the box\n\nLet's start by comparing Vue 2 and Vue 3 project setup using the Vue CLI.\n\nVue CLI helps you bootstrap a new Vue project, giving you all the files you need to get up and running.\n\nWith Vue 2, all you had to do was run the following command in your terminal (as long as you had Vue installed first), and the CLI would guide you through setup.\n\n```js\nvue create YOUR-PROJECT-NAME\n```\n\nGood news! With Vue 3, it's almost entirely the same. After you have [installed Vue 3](https://v3.vuejs.org/guide/installation.html#npm), you can just type that command, and you will see a list to choose from. You can select either Vue 2 or Vue 3 for your new project.\n\n![Vue CLI choices](https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/vue-presets.png)\n\nI love this because it means I don't have to fully commit to going over to Vue 3 if it turns out it's not to my liking. I can easily bootstrap a project in either Vue 2 or Vue 3 after upgrading to Vue 3.\n\nI'll select Vue 3 this time, so I can see how this scaffolded project compares to what I would get out of the box with Vue 2. I'll start by looking at the files I expect I would need.\n\n## Project Files\n\nAs a Vue user, I know that three of the important files that make Vue work and render onto the page are:\n\n*   **index.html**\n*   **main.js**\n*   **App.vue**.\n\nI'll examine those files first to see if there are any noticeable changes between Vue 2 and Vue 3. Notice in the screenshot that the file structure of a project created by the CLI is identical for both Vue 2 and Vue 3. However, if we dig in and examine the three files I called out in the list above, we'll find some changes.\n\n![File trees Vue 2 vs Vue 3](https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/files-comparison.png)\n\n### index.html\n\nWhen building even the most basic webpage (not just Vue projects), the **index.html** file is the file that serves as the default starting page, giving the basic skeleton of what we see on the page (the basic HTML structure).\n\nHere is the **index.html** file that is created with a Vue 2 project. And interestingly, the file is exactly the same in a Vue 3 project.\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\" />\r\n    <title><%= htmlWebpackPlugin.options.title %></title>\r\n  </head>\r\n  <body>\r\n    <noscript>\r\n      <strong\r\n        >We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work\r\n        properly without JavaScript enabled. Please enable it to\r\n        continue.</strong\r\n      >\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    {/*<!-- built files will be auto injected -->*/}\r\n  </body>\r\n</html>\n```\n\nThis file is extremely important, which is why it is my first instinct to check it out and see if anything has changed between Vue 2 and Vue 3.\n\nThe **index.html** file contains a `div` element with `id=\"app\"`, and that is where Vue knows to look so it can mount the application into the DOM.\n\n```html\n<div id=\"app\"></div>\n```\n\nVue uses this `div` as an entry point for where to inject all the Vue files. Within those Vue files, the Vue magic happens, but it is that first entry point `div` that gets the Vue code into the main HTML page.\n\nSince this file is identical in both Vue 2 and Vue 3 projects, this tells me that at least in this aspect, both Vue 2 and Vue 3 use the same approach to putting Vue files in the DOM - they search for a `div` in the **index.html** file, and when the `div` is found, the Vue app attaches to that particular element.\n\n### main.js\n\nThe **main.js** file in a Vue project is where the Vue instance itself gets initialized. (A Vue application is a Javascript object under the hood - each unique Vue project is an instance object of the Vue object. It inherits properties and methods that make Vue work the way it does.)\n\nIn Vue 2, app initialization looks like this:\n\n```js\nimport Vue from 'vue'\r\nimport App from './App.vue'\r\n\r\nnew Vue({\r\n  render: (h) => h(App),\r\n}).$mount('#app')\n```\n\nBut in Vue 3, it looks like this:\n\n```js\nimport { createApp } from 'vue'\r\nimport App from './App.vue'\r\n\r\ncreateApp(App).mount('#app')\n```\n\nThis is clearly a big change. I want to understand both, so I'll first explain what's happening in Vue 2 and then compare it with Vue 3.\n\n##### Vue 2\n\nFirst, I'll take a look at what's going on in Vue 2. I notice these two important statements:\n\n```js\nimport Vue from 'vue'\r\nimport App from './App.vue'\n```\n\nThe **Vue** constructor function has to be imported from Vue so that it can be used to create a *new instance of Vue*. **App** is also imported (it is the **App.vue** file in the project) because I need a *root Vue component* where all my Vue code will live. Any children components I later build will come into the project through that App file.\n\nNext, I see this in the Vue 2 **main.js** file:\n\n```js\nnew Vue({\r\n  render: (h) => h(App),\r\n}).$mount('#app')\n```\n\nThis is the Vue constructor function being used. `new Vue()` creates a new instance of the Vue object. And an object is passed into the constructor function `Vue({...})` which is known as the **options** object. This is why Vue 2 is sometimes referred to as the **Options API** (even though the Options API is just a *part* of Vue 2). The options are those properties like data, methods, mounted, computed, and so on.\n\nOn the next line, I see `render: h => h(App)`. The render property tells Vue to render the component as HTML (`render` is actually a function that is part of the Vue options API). You can read more in [this article](https://css-tricks.com/what-does-the-h-stand-for-in-vues-render-method/) about why the `h` is used if you are curious. The code in the **App.vue** component file is passed into that render function, so it gets built out as HTML (and there is other stuff going on to make Vue do its reactivity magic).\n\nThe [$mount](https://vuejs.org/v2/api/#vm-mount) method is a built-in Vue method that manually starts the mounting of the Vue instance.\n\n##### Vue 3\n\nIn Vue 3, I see that the **main.js** file looks very different:\n\n```js\nimport { createApp } from 'vue'\r\nimport App from './App.vue'\r\n\r\ncreateApp(App).mount('#app')\n```\n\nThis seems like a lot less code. Instead of importing a constructor function to create a Vue object instance, I see a function called `createApp` being imported. It's striking to me that initialization is happening with just one line of code, `createApp(App).mount('#app')`.\n\nEven though it's not apparent here, the `createApp` function is actually still using the `new Vue()` constructor inside the function. The difference now is that it *makes a copy* of the Vue instance. Instead of using `new Vue()` directly (and directly adding configuration options which will affect all uses of that Vue instance, resulting in mutations to global state), the `createApp` makes a copy that can be separately configured. By encapsulating this within a function, it gives me the ability to create separate Vue instances, and configuration to each instance won't affect other instances.\n\nThis is an improvement because now it's easier to create two Vue objects with separate configurations if needed. Here is an example of a setup that is doing that:\n\n```js\nimport GlobalApp from './App.vue'\r\n\r\n//Create one Vue app using same global app file and add unique configuration\r\nconst app1 = Vue.createApp(GlobalApp)\r\n\r\napp.component('SearchInput', SearchInputComponent)\r\napp.directive('focus', FocusDirective)\r\napp.use(LocalPlugin)\r\n\r\n//Create second Vue app using same global app file and add unique configuration\r\nconst app2 = Vue.createApp(GlobalApp)\r\n\r\napp.component('Modal', ModalComponent)\r\napp.directive('toolip', TooltipDirective)\r\napp.use(DifferentPlugin)\n```\n\nWhy is this helpful? I can only imagine possible situations. Perhaps if different teams using Vue want to build off the same main App file but add their own options, plugins, features, etc. Or maybe so that I could build something as a core but then branch off on different paths to see how different configurations work.\n\nWhatever the reason, just having that ability has made Vue better.\n\n### App.vue\n\nThe last file I want to look at to see if there are any differences out of the box is the **App.vue** file.\n\nThe **App.vue** file is the root component, the one that is the starting point for rendering the Vue code when the application gets mounted to that DOM element in the **index.html** file.\n\nAfter comparing **App.vue** in Vue 2 and **App.vue** in Vue 3, I see only one difference, and it's in the template block.\n\nHere is the Vue 2 **App.vue** template:\n\n```html\n<template>\r\n  <div id=\"app\">\r\n    <img alt=\"Vue logo\" src=\"./assets/logo.png\" />\r\n    <HelloWorld msg=\"Welcome to Your Vue.js App\" />\r\n  </div>\r\n</template>\n```\n\nAnd here is the Vue 3 **App.vue** template:\n\n```html\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\" />\r\n  <HelloWorld msg=\"Welcome to Your Vue.js App\" />\r\n</template>\n```\n\nI'm surprised to see that there is no longer the need for the surrounding root div in the template. We are no longer required to have a single root element, like so:\n\n```html\n<template>\r\n  <div id=\"app\">...</div>\r\n</template>\n```\n\nIn Vue 2, we had to provide a single root element as the direct child of the template, but now in Vue 3, we can have many direct child elements, i.e., multiple root elements. This eliminates all the extra divs that showed up around the HTML code for each component.\n\nHowever, it means that if you put a non-prop attribute on the component, and you use multi-root elements rather than a single root element like in Vue 2, that attribute won't show up in your component unless you explicitly [bind an element to those attributes](https://v3.vuejs.org/guide/component-attrs.html#disabling-attribute-inheritance). Just something to be aware of.\n\n## Conclusion\n\nSo far, I'm not too intimidated by these changes I see in Vue 3 versus Vue 2, but I haven't really gotten into the big stuff yet.\n\nIn my next post in this series, I'll examine the `setup() ` function, which is probably the most important change to understand. It will be a good opportunity for comparing the Composition API (which comes with Vue 3) versus the Options API (which was the Vue 2 way of doing things).\n\nPlease follow me on [Twitter](https://twitter.com/sandra_rodgers_) if you want to dive into more Vue 3 with me!\n\n        ", "html": `<p>Vue is a front-end JavaScript framework for building UIs (User Interfaces) and SPAs (Single-Page-Applications). Vue 3 has been out for a while, but until now, I hadn\u2019t taken the time to jump into it since it\u2019s a little daunting to have to learn something new.</p>
<p>But no more excuses. I\u2019m diving into Vue 3, and I\u2019m going to write my impressions of how it compares to Vue 2. If, like me, you have questions such as:</p>
<ul>
<li>How do I set up component files in Vue 3?</li>
<li>What is this new <code is:raw>setup()</code> method?</li>
<li>What is the Composition API (Vue 3) versus the Options API (Vue 2)?</li>
<li>Are props, events, and lifecycle hooks basically the same? Or will I encounter big changes?</li>
<li>How do I even get started with Vue 3?</li>
</ul>
<p>Then this series of posts will be valuable to you! Read on if you are interested in getting started in Vue 3.</p>
<h2 id="cli---what-we-get-out-of-the-box">CLI - What we get out of the box</h2>
<p>Let\u2019s start by comparing Vue 2 and Vue 3 project setup using the Vue CLI.</p>
<p>Vue CLI helps you bootstrap a new Vue project, giving you all the files you need to get up and running.</p>
<p>With Vue 2, all you had to do was run the following command in your terminal (as long as you had Vue installed first), and the CLI would guide you through setup.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue create </span><span style="color: #79C0FF">YOUR</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">PROJECT</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">NAME</span></span></code></pre>
<p>Good news! With Vue 3, it\u2019s almost entirely the same. After you have <a href="https://v3.vuejs.org/guide/installation.html#npm">installed Vue 3</a>, you can just type that command, and you will see a list to choose from. You can select either Vue 2 or Vue 3 for your new project.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/vue-presets.png" alt="Vue CLI choices"></p>
<p>I love this because it means I don\u2019t have to fully commit to going over to Vue 3 if it turns out it\u2019s not to my liking. I can easily bootstrap a project in either Vue 2 or Vue 3 after upgrading to Vue 3.</p>
<p>I\u2019ll select Vue 3 this time, so I can see how this scaffolded project compares to what I would get out of the box with Vue 2. I\u2019ll start by looking at the files I expect I would need.</p>
<h2 id="project-files">Project Files</h2>
<p>As a Vue user, I know that three of the important files that make Vue work and render onto the page are:</p>
<ul>
<li><strong>index.html</strong></li>
<li><strong>main.js</strong></li>
<li><strong>App.vue</strong>.</li>
</ul>
<p>I\u2019ll examine those files first to see if there are any noticeable changes between Vue 2 and Vue 3. Notice in the screenshot that the file structure of a project created by the CLI is identical for both Vue 2 and Vue 3. However, if we dig in and examine the three files I called out in the list above, we\u2019ll find some changes.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/files-comparison.png" alt="File trees Vue 2 vs Vue 3"></p>
<h3 id="indexhtml">index.html</h3>
<p>When building even the most basic webpage (not just Vue projects), the <strong>index.html</strong> file is the file that serves as the default starting page, giving the basic skeleton of what we see on the page (the basic HTML structure).</p>
<p>Here is the <strong>index.html</strong> file that is created with a Vue 2 project. And interestingly, the file is exactly the same in a Vue 3 project.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;utf-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width,initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">link</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rel</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;icon&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #FFA198">&lt;</span><span style="color: #A5D6FF">%= BASE_URL %&gt;favicon.ico&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FFA198">&lt;</span><span style="color: #C9D1D9">%= htmlWebpackPlugin.options.title %&gt;&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">noscript</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">strong</span></span>
<span class="line"><span style="color: #C9D1D9">        &gt;We&#39;re sorry but </span><span style="color: #FFA198">&lt;</span><span style="color: #C9D1D9">%= htmlWebpackPlugin.options.title %&gt; doesn&#39;t work</span></span>
<span class="line"><span style="color: #C9D1D9">        properly without JavaScript enabled. Please enable it to</span></span>
<span class="line"><span style="color: #C9D1D9">        continue.&lt;/</span><span style="color: #7EE787">strong</span></span>
<span class="line"><span style="color: #C9D1D9">      &gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">noscript</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">&lt;!-- built files will be auto injected --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>This file is extremely important, which is why it is my first instinct to check it out and see if anything has changed between Vue 2 and Vue 3.</p>
<p>The <strong>index.html</strong> file contains a <code is:raw>div</code> element with <code is:raw>id="app"</code>, and that is where Vue knows to look so it can mount the application into the DOM.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Vue uses this <code is:raw>div</code> as an entry point for where to inject all the Vue files. Within those Vue files, the Vue magic happens, but it is that first entry point <code is:raw>div</code> that gets the Vue code into the main HTML page.</p>
<p>Since this file is identical in both Vue 2 and Vue 3 projects, this tells me that at least in this aspect, both Vue 2 and Vue 3 use the same approach to putting Vue files in the DOM - they search for a <code is:raw>div</code> in the <strong>index.html</strong> file, and when the <code is:raw>div</code> is found, the Vue app attaches to that particular element.</p>
<h3 id="mainjs">main.js</h3>
<p>The <strong>main.js</strong> file in a Vue project is where the Vue instance itself gets initialized. (A Vue application is a Javascript object under the hood - each unique Vue project is an instance object of the Vue object. It inherits properties and methods that make Vue work the way it does.)</p>
<p>In Vue 2, app initialization looks like this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Vue </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">: (</span><span style="color: #FFA657">h</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">h</span><span style="color: #C9D1D9">(App),</span></span>
<span class="line"><span style="color: #C9D1D9">}).</span><span style="color: #D2A8FF">$mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>But in Vue 3, it looks like this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This is clearly a big change. I want to understand both, so I\u2019ll first explain what\u2019s happening in Vue 2 and then compare it with Vue 3.</p>
<h5 id="vue-2">Vue 2</h5>
<p>First, I\u2019ll take a look at what\u2019s going on in Vue 2. I notice these two important statements:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Vue </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span></code></pre>
<p>The <strong>Vue</strong> constructor function has to be imported from Vue so that it can be used to create a <em>new instance of Vue</em>. <strong>App</strong> is also imported (it is the <strong>App.vue</strong> file in the project) because I need a <em>root Vue component</em> where all my Vue code will live. Any children components I later build will come into the project through that App file.</p>
<p>Next, I see this in the Vue 2 <strong>main.js</strong> file:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">: (</span><span style="color: #FFA657">h</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">h</span><span style="color: #C9D1D9">(App),</span></span>
<span class="line"><span style="color: #C9D1D9">}).</span><span style="color: #D2A8FF">$mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This is the Vue constructor function being used. <code is:raw>new Vue()</code> creates a new instance of the Vue object. And an object is passed into the constructor function <code is:raw>Vue({...})</code> which is known as the <strong>options</strong> object. This is why Vue 2 is sometimes referred to as the <strong>Options API</strong> (even though the Options API is just a <em>part</em> of Vue 2). The options are those properties like data, methods, mounted, computed, and so on.</p>
<p>On the next line, I see <code is:raw>render: h =&gt; h(App)</code>. The render property tells Vue to render the component as HTML (<code is:raw>render</code> is actually a function that is part of the Vue options API). You can read more in <a href="https://css-tricks.com/what-does-the-h-stand-for-in-vues-render-method/">this article</a> about why the <code is:raw>h</code> is used if you are curious. The code in the <strong>App.vue</strong> component file is passed into that render function, so it gets built out as HTML (and there is other stuff going on to make Vue do its reactivity magic).</p>
<p>The <a href="https://vuejs.org/v2/api/#vm-mount">$mount</a> method is a built-in Vue method that manually starts the mounting of the Vue instance.</p>
<h5 id="vue-3">Vue 3</h5>
<p>In Vue 3, I see that the <strong>main.js</strong> file looks very different:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This seems like a lot less code. Instead of importing a constructor function to create a Vue object instance, I see a function called <code is:raw>createApp</code> being imported. It\u2019s striking to me that initialization is happening with just one line of code, <code is:raw>createApp(App).mount('#app')</code>.</p>
<p>Even though it\u2019s not apparent here, the <code is:raw>createApp</code> function is actually still using the <code is:raw>new Vue()</code> constructor inside the function. The difference now is that it <em>makes a copy</em> of the Vue instance. Instead of using <code is:raw>new Vue()</code> directly (and directly adding configuration options which will affect all uses of that Vue instance, resulting in mutations to global state), the <code is:raw>createApp</code> makes a copy that can be separately configured. By encapsulating this within a function, it gives me the ability to create separate Vue instances, and configuration to each instance won\u2019t affect other instances.</p>
<p>This is an improvement because now it\u2019s easier to create two Vue objects with separate configurations if needed. Here is an example of a setup that is doing that:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> GlobalApp </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">//Create one Vue app using same global app file and add unique configuration</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app1</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Vue.</span><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(GlobalApp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">component</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;SearchInput&#39;</span><span style="color: #C9D1D9">, SearchInputComponent)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">directive</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;focus&#39;</span><span style="color: #C9D1D9">, FocusDirective)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(LocalPlugin)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">//Create second Vue app using same global app file and add unique configuration</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Vue.</span><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(GlobalApp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">component</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Modal&#39;</span><span style="color: #C9D1D9">, ModalComponent)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">directive</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;toolip&#39;</span><span style="color: #C9D1D9">, TooltipDirective)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(DifferentPlugin)</span></span></code></pre>
<p>Why is this helpful? I can only imagine possible situations. Perhaps if different teams using Vue want to build off the same main App file but add their own options, plugins, features, etc. Or maybe so that I could build something as a core but then branch off on different paths to see how different configurations work.</p>
<p>Whatever the reason, just having that ability has made Vue better.</p>
<h3 id="appvue">App.vue</h3>
<p>The last file I want to look at to see if there are any differences out of the box is the <strong>App.vue</strong> file.</p>
<p>The <strong>App.vue</strong> file is the root component, the one that is the starting point for rendering the Vue code when the application gets mounted to that DOM element in the <strong>index.html</strong> file.</p>
<p>After comparing <strong>App.vue</strong> in Vue 2 and <strong>App.vue</strong> in Vue 3, I see only one difference, and it\u2019s in the template block.</p>
<p>Here is the Vue 2 <strong>App.vue</strong> template:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">alt</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Vue logo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;./assets/logo.png&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #FFA198">HelloWorld</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">msg</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Welcome to Your Vue.js App&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>And here is the Vue 3 <strong>App.vue</strong> template:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">alt</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Vue logo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;./assets/logo.png&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #FFA198">HelloWorld</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">msg</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Welcome to Your Vue.js App&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>I\u2019m surprised to see that there is no longer the need for the surrounding root div in the template. We are no longer required to have a single root element, like so:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>In Vue 2, we had to provide a single root element as the direct child of the template, but now in Vue 3, we can have many direct child elements, i.e., multiple root elements. This eliminates all the extra divs that showed up around the HTML code for each component.</p>
<p>However, it means that if you put a non-prop attribute on the component, and you use multi-root elements rather than a single root element like in Vue 2, that attribute won\u2019t show up in your component unless you explicitly <a href="https://v3.vuejs.org/guide/component-attrs.html#disabling-attribute-inheritance">bind an element to those attributes</a>. Just something to be aware of.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So far, I\u2019m not too intimidated by these changes I see in Vue 3 versus Vue 2, but I haven\u2019t really gotten into the big stuff yet.</p>
<p>In my next post in this series, I\u2019ll examine the <code is:raw>setup() </code> function, which is probably the most important change to understand. It will be a good opportunity for comparing the Composition API (which comes with Vue 3) versus the Options API (which was the Vue 2 way of doing things).</p>
<p>Please follow me on <a href="https://twitter.com/sandra_rodgers_">Twitter</a> if you want to dive into more Vue 3 with me!</p>` }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/diving-into-vue-3-getting-started/index.md" };
function rawContent() {
  return "\nVue is a front-end JavaScript framework for building UIs (User Interfaces) and SPAs (Single-Page-Applications). Vue 3 has been out for a while, but until now, I hadn't taken the time to jump into it since it's a little daunting to have to learn something new.\n\nBut no more excuses. I'm diving into Vue 3, and I'm going to write my impressions of how it compares to Vue 2. If, like me, you have questions such as:\n\n*   How do I set up component files in Vue 3?\n*   What is this new `setup()` method?\n*   What is the Composition API (Vue 3) versus the Options API (Vue 2)?\n*   Are props, events, and lifecycle hooks basically the same? Or will I encounter big changes?\n*   How do I even get started with Vue 3?\n\nThen this series of posts will be valuable to you! Read on if you are interested in getting started in Vue 3.\n\n## CLI - What we get out of the box\n\nLet's start by comparing Vue 2 and Vue 3 project setup using the Vue CLI.\n\nVue CLI helps you bootstrap a new Vue project, giving you all the files you need to get up and running.\n\nWith Vue 2, all you had to do was run the following command in your terminal (as long as you had Vue installed first), and the CLI would guide you through setup.\n\n```js\nvue create YOUR-PROJECT-NAME\n```\n\nGood news! With Vue 3, it's almost entirely the same. After you have [installed Vue 3](https://v3.vuejs.org/guide/installation.html#npm), you can just type that command, and you will see a list to choose from. You can select either Vue 2 or Vue 3 for your new project.\n\n![Vue CLI choices](https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/vue-presets.png)\n\nI love this because it means I don't have to fully commit to going over to Vue 3 if it turns out it's not to my liking. I can easily bootstrap a project in either Vue 2 or Vue 3 after upgrading to Vue 3.\n\nI'll select Vue 3 this time, so I can see how this scaffolded project compares to what I would get out of the box with Vue 2. I'll start by looking at the files I expect I would need.\n\n## Project Files\n\nAs a Vue user, I know that three of the important files that make Vue work and render onto the page are:\n\n*   **index.html**\n*   **main.js**\n*   **App.vue**.\n\nI'll examine those files first to see if there are any noticeable changes between Vue 2 and Vue 3. Notice in the screenshot that the file structure of a project created by the CLI is identical for both Vue 2 and Vue 3. However, if we dig in and examine the three files I called out in the list above, we'll find some changes.\n\n![File trees Vue 2 vs Vue 3](https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/files-comparison.png)\n\n### index.html\n\nWhen building even the most basic webpage (not just Vue projects), the **index.html** file is the file that serves as the default starting page, giving the basic skeleton of what we see on the page (the basic HTML structure).\n\nHere is the **index.html** file that is created with a Vue 2 project. And interestingly, the file is exactly the same in a Vue 3 project.\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\" />\r\n    <title><%= htmlWebpackPlugin.options.title %></title>\r\n  </head>\r\n  <body>\r\n    <noscript>\r\n      <strong\r\n        >We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work\r\n        properly without JavaScript enabled. Please enable it to\r\n        continue.</strong\r\n      >\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    {/*<!-- built files will be auto injected -->*/}\r\n  </body>\r\n</html>\n```\n\nThis file is extremely important, which is why it is my first instinct to check it out and see if anything has changed between Vue 2 and Vue 3.\n\nThe **index.html** file contains a `div` element with `id=\"app\"`, and that is where Vue knows to look so it can mount the application into the DOM.\n\n```html\n<div id=\"app\"></div>\n```\n\nVue uses this `div` as an entry point for where to inject all the Vue files. Within those Vue files, the Vue magic happens, but it is that first entry point `div` that gets the Vue code into the main HTML page.\n\nSince this file is identical in both Vue 2 and Vue 3 projects, this tells me that at least in this aspect, both Vue 2 and Vue 3 use the same approach to putting Vue files in the DOM - they search for a `div` in the **index.html** file, and when the `div` is found, the Vue app attaches to that particular element.\n\n### main.js\n\nThe **main.js** file in a Vue project is where the Vue instance itself gets initialized. (A Vue application is a Javascript object under the hood - each unique Vue project is an instance object of the Vue object. It inherits properties and methods that make Vue work the way it does.)\n\nIn Vue 2, app initialization looks like this:\n\n```js\nimport Vue from 'vue'\r\nimport App from './App.vue'\r\n\r\nnew Vue({\r\n  render: (h) => h(App),\r\n}).$mount('#app')\n```\n\nBut in Vue 3, it looks like this:\n\n```js\nimport { createApp } from 'vue'\r\nimport App from './App.vue'\r\n\r\ncreateApp(App).mount('#app')\n```\n\nThis is clearly a big change. I want to understand both, so I'll first explain what's happening in Vue 2 and then compare it with Vue 3.\n\n##### Vue 2\n\nFirst, I'll take a look at what's going on in Vue 2. I notice these two important statements:\n\n```js\nimport Vue from 'vue'\r\nimport App from './App.vue'\n```\n\nThe **Vue** constructor function has to be imported from Vue so that it can be used to create a *new instance of Vue*. **App** is also imported (it is the **App.vue** file in the project) because I need a *root Vue component* where all my Vue code will live. Any children components I later build will come into the project through that App file.\n\nNext, I see this in the Vue 2 **main.js** file:\n\n```js\nnew Vue({\r\n  render: (h) => h(App),\r\n}).$mount('#app')\n```\n\nThis is the Vue constructor function being used. `new Vue()` creates a new instance of the Vue object. And an object is passed into the constructor function `Vue({...})` which is known as the **options** object. This is why Vue 2 is sometimes referred to as the **Options API** (even though the Options API is just a *part* of Vue 2). The options are those properties like data, methods, mounted, computed, and so on.\n\nOn the next line, I see `render: h => h(App)`. The render property tells Vue to render the component as HTML (`render` is actually a function that is part of the Vue options API). You can read more in [this article](https://css-tricks.com/what-does-the-h-stand-for-in-vues-render-method/) about why the `h` is used if you are curious. The code in the **App.vue** component file is passed into that render function, so it gets built out as HTML (and there is other stuff going on to make Vue do its reactivity magic).\n\nThe [$mount](https://vuejs.org/v2/api/#vm-mount) method is a built-in Vue method that manually starts the mounting of the Vue instance.\n\n##### Vue 3\n\nIn Vue 3, I see that the **main.js** file looks very different:\n\n```js\nimport { createApp } from 'vue'\r\nimport App from './App.vue'\r\n\r\ncreateApp(App).mount('#app')\n```\n\nThis seems like a lot less code. Instead of importing a constructor function to create a Vue object instance, I see a function called `createApp` being imported. It's striking to me that initialization is happening with just one line of code, `createApp(App).mount('#app')`.\n\nEven though it's not apparent here, the `createApp` function is actually still using the `new Vue()` constructor inside the function. The difference now is that it *makes a copy* of the Vue instance. Instead of using `new Vue()` directly (and directly adding configuration options which will affect all uses of that Vue instance, resulting in mutations to global state), the `createApp` makes a copy that can be separately configured. By encapsulating this within a function, it gives me the ability to create separate Vue instances, and configuration to each instance won't affect other instances.\n\nThis is an improvement because now it's easier to create two Vue objects with separate configurations if needed. Here is an example of a setup that is doing that:\n\n```js\nimport GlobalApp from './App.vue'\r\n\r\n//Create one Vue app using same global app file and add unique configuration\r\nconst app1 = Vue.createApp(GlobalApp)\r\n\r\napp.component('SearchInput', SearchInputComponent)\r\napp.directive('focus', FocusDirective)\r\napp.use(LocalPlugin)\r\n\r\n//Create second Vue app using same global app file and add unique configuration\r\nconst app2 = Vue.createApp(GlobalApp)\r\n\r\napp.component('Modal', ModalComponent)\r\napp.directive('toolip', TooltipDirective)\r\napp.use(DifferentPlugin)\n```\n\nWhy is this helpful? I can only imagine possible situations. Perhaps if different teams using Vue want to build off the same main App file but add their own options, plugins, features, etc. Or maybe so that I could build something as a core but then branch off on different paths to see how different configurations work.\n\nWhatever the reason, just having that ability has made Vue better.\n\n### App.vue\n\nThe last file I want to look at to see if there are any differences out of the box is the **App.vue** file.\n\nThe **App.vue** file is the root component, the one that is the starting point for rendering the Vue code when the application gets mounted to that DOM element in the **index.html** file.\n\nAfter comparing **App.vue** in Vue 2 and **App.vue** in Vue 3, I see only one difference, and it's in the template block.\n\nHere is the Vue 2 **App.vue** template:\n\n```html\n<template>\r\n  <div id=\"app\">\r\n    <img alt=\"Vue logo\" src=\"./assets/logo.png\" />\r\n    <HelloWorld msg=\"Welcome to Your Vue.js App\" />\r\n  </div>\r\n</template>\n```\n\nAnd here is the Vue 3 **App.vue** template:\n\n```html\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\" />\r\n  <HelloWorld msg=\"Welcome to Your Vue.js App\" />\r\n</template>\n```\n\nI'm surprised to see that there is no longer the need for the surrounding root div in the template. We are no longer required to have a single root element, like so:\n\n```html\n<template>\r\n  <div id=\"app\">...</div>\r\n</template>\n```\n\nIn Vue 2, we had to provide a single root element as the direct child of the template, but now in Vue 3, we can have many direct child elements, i.e., multiple root elements. This eliminates all the extra divs that showed up around the HTML code for each component.\n\nHowever, it means that if you put a non-prop attribute on the component, and you use multi-root elements rather than a single root element like in Vue 2, that attribute won't show up in your component unless you explicitly [bind an element to those attributes](https://v3.vuejs.org/guide/component-attrs.html#disabling-attribute-inheritance). Just something to be aware of.\n\n## Conclusion\n\nSo far, I'm not too intimidated by these changes I see in Vue 3 versus Vue 2, but I haven't really gotten into the big stuff yet.\n\nIn my next post in this series, I'll examine the `setup() ` function, which is probably the most important change to understand. It will be a good opportunity for comparing the Composition API (which comes with Vue 3) versus the Options API (which was the Vue 2 way of doing things).\n\nPlease follow me on [Twitter](https://twitter.com/sandra_rodgers_) if you want to dive into more Vue 3 with me!\n\n        ";
}
function compiledContent() {
  return `<p>Vue is a front-end JavaScript framework for building UIs (User Interfaces) and SPAs (Single-Page-Applications). Vue 3 has been out for a while, but until now, I hadn\u2019t taken the time to jump into it since it\u2019s a little daunting to have to learn something new.</p>
<p>But no more excuses. I\u2019m diving into Vue 3, and I\u2019m going to write my impressions of how it compares to Vue 2. If, like me, you have questions such as:</p>
<ul>
<li>How do I set up component files in Vue 3?</li>
<li>What is this new <code is:raw>setup()</code> method?</li>
<li>What is the Composition API (Vue 3) versus the Options API (Vue 2)?</li>
<li>Are props, events, and lifecycle hooks basically the same? Or will I encounter big changes?</li>
<li>How do I even get started with Vue 3?</li>
</ul>
<p>Then this series of posts will be valuable to you! Read on if you are interested in getting started in Vue 3.</p>
<h2 id="cli---what-we-get-out-of-the-box">CLI - What we get out of the box</h2>
<p>Let\u2019s start by comparing Vue 2 and Vue 3 project setup using the Vue CLI.</p>
<p>Vue CLI helps you bootstrap a new Vue project, giving you all the files you need to get up and running.</p>
<p>With Vue 2, all you had to do was run the following command in your terminal (as long as you had Vue installed first), and the CLI would guide you through setup.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue create </span><span style="color: #79C0FF">YOUR</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">PROJECT</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">NAME</span></span></code></pre>
<p>Good news! With Vue 3, it\u2019s almost entirely the same. After you have <a href="https://v3.vuejs.org/guide/installation.html#npm">installed Vue 3</a>, you can just type that command, and you will see a list to choose from. You can select either Vue 2 or Vue 3 for your new project.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/vue-presets.png" alt="Vue CLI choices"></p>
<p>I love this because it means I don\u2019t have to fully commit to going over to Vue 3 if it turns out it\u2019s not to my liking. I can easily bootstrap a project in either Vue 2 or Vue 3 after upgrading to Vue 3.</p>
<p>I\u2019ll select Vue 3 this time, so I can see how this scaffolded project compares to what I would get out of the box with Vue 2. I\u2019ll start by looking at the files I expect I would need.</p>
<h2 id="project-files">Project Files</h2>
<p>As a Vue user, I know that three of the important files that make Vue work and render onto the page are:</p>
<ul>
<li><strong>index.html</strong></li>
<li><strong>main.js</strong></li>
<li><strong>App.vue</strong>.</li>
</ul>
<p>I\u2019ll examine those files first to see if there are any noticeable changes between Vue 2 and Vue 3. Notice in the screenshot that the file structure of a project created by the CLI is identical for both Vue 2 and Vue 3. However, if we dig in and examine the three files I called out in the list above, we\u2019ll find some changes.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/files-comparison.png" alt="File trees Vue 2 vs Vue 3"></p>
<h3 id="indexhtml">index.html</h3>
<p>When building even the most basic webpage (not just Vue projects), the <strong>index.html</strong> file is the file that serves as the default starting page, giving the basic skeleton of what we see on the page (the basic HTML structure).</p>
<p>Here is the <strong>index.html</strong> file that is created with a Vue 2 project. And interestingly, the file is exactly the same in a Vue 3 project.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;utf-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width,initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">link</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rel</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;icon&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #FFA198">&lt;</span><span style="color: #A5D6FF">%= BASE_URL %&gt;favicon.ico&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FFA198">&lt;</span><span style="color: #C9D1D9">%= htmlWebpackPlugin.options.title %&gt;&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">noscript</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">strong</span></span>
<span class="line"><span style="color: #C9D1D9">        &gt;We&#39;re sorry but </span><span style="color: #FFA198">&lt;</span><span style="color: #C9D1D9">%= htmlWebpackPlugin.options.title %&gt; doesn&#39;t work</span></span>
<span class="line"><span style="color: #C9D1D9">        properly without JavaScript enabled. Please enable it to</span></span>
<span class="line"><span style="color: #C9D1D9">        continue.&lt;/</span><span style="color: #7EE787">strong</span></span>
<span class="line"><span style="color: #C9D1D9">      &gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">noscript</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">&lt;!-- built files will be auto injected --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>This file is extremely important, which is why it is my first instinct to check it out and see if anything has changed between Vue 2 and Vue 3.</p>
<p>The <strong>index.html</strong> file contains a <code is:raw>div</code> element with <code is:raw>id="app"</code>, and that is where Vue knows to look so it can mount the application into the DOM.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Vue uses this <code is:raw>div</code> as an entry point for where to inject all the Vue files. Within those Vue files, the Vue magic happens, but it is that first entry point <code is:raw>div</code> that gets the Vue code into the main HTML page.</p>
<p>Since this file is identical in both Vue 2 and Vue 3 projects, this tells me that at least in this aspect, both Vue 2 and Vue 3 use the same approach to putting Vue files in the DOM - they search for a <code is:raw>div</code> in the <strong>index.html</strong> file, and when the <code is:raw>div</code> is found, the Vue app attaches to that particular element.</p>
<h3 id="mainjs">main.js</h3>
<p>The <strong>main.js</strong> file in a Vue project is where the Vue instance itself gets initialized. (A Vue application is a Javascript object under the hood - each unique Vue project is an instance object of the Vue object. It inherits properties and methods that make Vue work the way it does.)</p>
<p>In Vue 2, app initialization looks like this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Vue </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">: (</span><span style="color: #FFA657">h</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">h</span><span style="color: #C9D1D9">(App),</span></span>
<span class="line"><span style="color: #C9D1D9">}).</span><span style="color: #D2A8FF">$mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>But in Vue 3, it looks like this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This is clearly a big change. I want to understand both, so I\u2019ll first explain what\u2019s happening in Vue 2 and then compare it with Vue 3.</p>
<h5 id="vue-2">Vue 2</h5>
<p>First, I\u2019ll take a look at what\u2019s going on in Vue 2. I notice these two important statements:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Vue </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span></code></pre>
<p>The <strong>Vue</strong> constructor function has to be imported from Vue so that it can be used to create a <em>new instance of Vue</em>. <strong>App</strong> is also imported (it is the <strong>App.vue</strong> file in the project) because I need a <em>root Vue component</em> where all my Vue code will live. Any children components I later build will come into the project through that App file.</p>
<p>Next, I see this in the Vue 2 <strong>main.js</strong> file:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">: (</span><span style="color: #FFA657">h</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">h</span><span style="color: #C9D1D9">(App),</span></span>
<span class="line"><span style="color: #C9D1D9">}).</span><span style="color: #D2A8FF">$mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This is the Vue constructor function being used. <code is:raw>new Vue()</code> creates a new instance of the Vue object. And an object is passed into the constructor function <code is:raw>Vue({...})</code> which is known as the <strong>options</strong> object. This is why Vue 2 is sometimes referred to as the <strong>Options API</strong> (even though the Options API is just a <em>part</em> of Vue 2). The options are those properties like data, methods, mounted, computed, and so on.</p>
<p>On the next line, I see <code is:raw>render: h =&gt; h(App)</code>. The render property tells Vue to render the component as HTML (<code is:raw>render</code> is actually a function that is part of the Vue options API). You can read more in <a href="https://css-tricks.com/what-does-the-h-stand-for-in-vues-render-method/">this article</a> about why the <code is:raw>h</code> is used if you are curious. The code in the <strong>App.vue</strong> component file is passed into that render function, so it gets built out as HTML (and there is other stuff going on to make Vue do its reactivity magic).</p>
<p>The <a href="https://vuejs.org/v2/api/#vm-mount">$mount</a> method is a built-in Vue method that manually starts the mounting of the Vue instance.</p>
<h5 id="vue-3">Vue 3</h5>
<p>In Vue 3, I see that the <strong>main.js</strong> file looks very different:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This seems like a lot less code. Instead of importing a constructor function to create a Vue object instance, I see a function called <code is:raw>createApp</code> being imported. It\u2019s striking to me that initialization is happening with just one line of code, <code is:raw>createApp(App).mount('#app')</code>.</p>
<p>Even though it\u2019s not apparent here, the <code is:raw>createApp</code> function is actually still using the <code is:raw>new Vue()</code> constructor inside the function. The difference now is that it <em>makes a copy</em> of the Vue instance. Instead of using <code is:raw>new Vue()</code> directly (and directly adding configuration options which will affect all uses of that Vue instance, resulting in mutations to global state), the <code is:raw>createApp</code> makes a copy that can be separately configured. By encapsulating this within a function, it gives me the ability to create separate Vue instances, and configuration to each instance won\u2019t affect other instances.</p>
<p>This is an improvement because now it\u2019s easier to create two Vue objects with separate configurations if needed. Here is an example of a setup that is doing that:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> GlobalApp </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">//Create one Vue app using same global app file and add unique configuration</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app1</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Vue.</span><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(GlobalApp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">component</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;SearchInput&#39;</span><span style="color: #C9D1D9">, SearchInputComponent)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">directive</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;focus&#39;</span><span style="color: #C9D1D9">, FocusDirective)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(LocalPlugin)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">//Create second Vue app using same global app file and add unique configuration</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Vue.</span><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(GlobalApp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">component</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Modal&#39;</span><span style="color: #C9D1D9">, ModalComponent)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">directive</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;toolip&#39;</span><span style="color: #C9D1D9">, TooltipDirective)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(DifferentPlugin)</span></span></code></pre>
<p>Why is this helpful? I can only imagine possible situations. Perhaps if different teams using Vue want to build off the same main App file but add their own options, plugins, features, etc. Or maybe so that I could build something as a core but then branch off on different paths to see how different configurations work.</p>
<p>Whatever the reason, just having that ability has made Vue better.</p>
<h3 id="appvue">App.vue</h3>
<p>The last file I want to look at to see if there are any differences out of the box is the <strong>App.vue</strong> file.</p>
<p>The <strong>App.vue</strong> file is the root component, the one that is the starting point for rendering the Vue code when the application gets mounted to that DOM element in the <strong>index.html</strong> file.</p>
<p>After comparing <strong>App.vue</strong> in Vue 2 and <strong>App.vue</strong> in Vue 3, I see only one difference, and it\u2019s in the template block.</p>
<p>Here is the Vue 2 <strong>App.vue</strong> template:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">alt</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Vue logo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;./assets/logo.png&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #FFA198">HelloWorld</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">msg</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Welcome to Your Vue.js App&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>And here is the Vue 3 <strong>App.vue</strong> template:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">alt</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Vue logo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;./assets/logo.png&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #FFA198">HelloWorld</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">msg</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Welcome to Your Vue.js App&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>I\u2019m surprised to see that there is no longer the need for the surrounding root div in the template. We are no longer required to have a single root element, like so:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>In Vue 2, we had to provide a single root element as the direct child of the template, but now in Vue 3, we can have many direct child elements, i.e., multiple root elements. This eliminates all the extra divs that showed up around the HTML code for each component.</p>
<p>However, it means that if you put a non-prop attribute on the component, and you use multi-root elements rather than a single root element like in Vue 2, that attribute won\u2019t show up in your component unless you explicitly <a href="https://v3.vuejs.org/guide/component-attrs.html#disabling-attribute-inheritance">bind an element to those attributes</a>. Just something to be aware of.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So far, I\u2019m not too intimidated by these changes I see in Vue 3 versus Vue 2, but I haven\u2019t really gotten into the big stuff yet.</p>
<p>In my next post in this series, I\u2019ll examine the <code is:raw>setup() </code> function, which is probably the most important change to understand. It will be a good opportunity for comparing the Composition API (which comes with Vue 3) versus the Options API (which was the Vue 2 way of doing things).</p>
<p>Please follow me on <a href="https://twitter.com/sandra_rodgers_">Twitter</a> if you want to dive into more Vue 3 with me!</p>`;
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/diving-into-vue-3-getting-started/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Vue is a front-end JavaScript framework for building UIs (User Interfaces) and SPAs (Single-Page-Applications). Vue 3 has been out for a while, but until now, I hadn’t taken the time to jump into it since it’s a little daunting to have to learn something new.</p>
<p>But no more excuses. I’m diving into Vue 3, and I’m going to write my impressions of how it compares to Vue 2. If, like me, you have questions such as:</p>
<ul>
<li>How do I set up component files in Vue 3?</li>
<li>What is this new <code>setup()</code> method?</li>
<li>What is the Composition API (Vue 3) versus the Options API (Vue 2)?</li>
<li>Are props, events, and lifecycle hooks basically the same? Or will I encounter big changes?</li>
<li>How do I even get started with Vue 3?</li>
</ul>
<p>Then this series of posts will be valuable to you! Read on if you are interested in getting started in Vue 3.</p>
<h2 id="cli---what-we-get-out-of-the-box">CLI - What we get out of the box</h2>
<p>Let’s start by comparing Vue 2 and Vue 3 project setup using the Vue CLI.</p>
<p>Vue CLI helps you bootstrap a new Vue project, giving you all the files you need to get up and running.</p>
<p>With Vue 2, all you had to do was run the following command in your terminal (as long as you had Vue installed first), and the CLI would guide you through setup.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">vue create </span><span style="color: #79C0FF">YOUR</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">PROJECT</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">NAME</span></span></code></pre>
<p>Good news! With Vue 3, it’s almost entirely the same. After you have <a href="https://v3.vuejs.org/guide/installation.html#npm">installed Vue 3</a>, you can just type that command, and you will see a list to choose from. You can select either Vue 2 or Vue 3 for your new project.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/vue-presets.png" alt="Vue CLI choices"></p>
<p>I love this because it means I don’t have to fully commit to going over to Vue 3 if it turns out it’s not to my liking. I can easily bootstrap a project in either Vue 2 or Vue 3 after upgrading to Vue 3.</p>
<p>I’ll select Vue 3 this time, so I can see how this scaffolded project compares to what I would get out of the box with Vue 2. I’ll start by looking at the files I expect I would need.</p>
<h2 id="project-files">Project Files</h2>
<p>As a Vue user, I know that three of the important files that make Vue work and render onto the page are:</p>
<ul>
<li><strong>index.html</strong></li>
<li><strong>main.js</strong></li>
<li><strong>App.vue</strong>.</li>
</ul>
<p>I’ll examine those files first to see if there are any noticeable changes between Vue 2 and Vue 3. Notice in the screenshot that the file structure of a project created by the CLI is identical for both Vue 2 and Vue 3. However, if we dig in and examine the three files I called out in the list above, we’ll find some changes.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642091717/blog/2022/01/diving-into-vue-3-getting-started/files-comparison.png" alt="File trees Vue 2 vs Vue 3"></p>
<h3 id="indexhtml">index.html</h3>
<p>When building even the most basic webpage (not just Vue projects), the <strong>index.html</strong> file is the file that serves as the default starting page, giving the basic skeleton of what we see on the page (the basic HTML structure).</p>
<p>Here is the <strong>index.html</strong> file that is created with a Vue 2 project. And interestingly, the file is exactly the same in a Vue 3 project.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;utf-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width,initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">link</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rel</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;icon&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;</span><span style="color: #FFA198">&lt;</span><span style="color: #A5D6FF">%= BASE_URL %&gt;favicon.ico&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FFA198">&lt;</span><span style="color: #C9D1D9">%= htmlWebpackPlugin.options.title %&gt;&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">noscript</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">strong</span></span>
<span class="line"><span style="color: #C9D1D9">        &gt;We&#39;re sorry but </span><span style="color: #FFA198">&lt;</span><span style="color: #C9D1D9">%= htmlWebpackPlugin.options.title %&gt; doesn&#39;t work</span></span>
<span class="line"><span style="color: #C9D1D9">        properly without JavaScript enabled. Please enable it to</span></span>
<span class="line"><span style="color: #C9D1D9">        continue.&lt;/</span><span style="color: #7EE787">strong</span></span>
<span class="line"><span style="color: #C9D1D9">      &gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">noscript</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">&lt;!-- built files will be auto injected --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>This file is extremely important, which is why it is my first instinct to check it out and see if anything has changed between Vue 2 and Vue 3.</p>
<p>The <strong>index.html</strong> file contains a <code>div</code> element with <code>id="app"</code>, and that is where Vue knows to look so it can mount the application into the DOM.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Vue uses this <code>div</code> as an entry point for where to inject all the Vue files. Within those Vue files, the Vue magic happens, but it is that first entry point <code>div</code> that gets the Vue code into the main HTML page.</p>
<p>Since this file is identical in both Vue 2 and Vue 3 projects, this tells me that at least in this aspect, both Vue 2 and Vue 3 use the same approach to putting Vue files in the DOM - they search for a <code>div</code> in the <strong>index.html</strong> file, and when the <code>div</code> is found, the Vue app attaches to that particular element.</p>
<h3 id="mainjs">main.js</h3>
<p>The <strong>main.js</strong> file in a Vue project is where the Vue instance itself gets initialized. (A Vue application is a Javascript object under the hood - each unique Vue project is an instance object of the Vue object. It inherits properties and methods that make Vue work the way it does.)</p>
<p>In Vue 2, app initialization looks like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Vue </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">: (</span><span style="color: #FFA657">h</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">h</span><span style="color: #C9D1D9">(App),</span></span>
<span class="line"><span style="color: #C9D1D9">}).</span><span style="color: #D2A8FF">$mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>But in Vue 3, it looks like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This is clearly a big change. I want to understand both, so I’ll first explain what’s happening in Vue 2 and then compare it with Vue 3.</p>
<h5 id="vue-2">Vue 2</h5>
<p>First, I’ll take a look at what’s going on in Vue 2. I notice these two important statements:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Vue </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span></code></pre>
<p>The <strong>Vue</strong> constructor function has to be imported from Vue so that it can be used to create a <em>new instance of Vue</em>. <strong>App</strong> is also imported (it is the <strong>App.vue</strong> file in the project) because I need a <em>root Vue component</em> where all my Vue code will live. Any children components I later build will come into the project through that App file.</p>
<p>Next, I see this in the Vue 2 <strong>main.js</strong> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">: (</span><span style="color: #FFA657">h</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">h</span><span style="color: #C9D1D9">(App),</span></span>
<span class="line"><span style="color: #C9D1D9">}).</span><span style="color: #D2A8FF">$mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This is the Vue constructor function being used. <code>new Vue()</code> creates a new instance of the Vue object. And an object is passed into the constructor function <code>Vue({...})</code> which is known as the <strong>options</strong> object. This is why Vue 2 is sometimes referred to as the <strong>Options API</strong> (even though the Options API is just a <em>part</em> of Vue 2). The options are those properties like data, methods, mounted, computed, and so on.</p>
<p>On the next line, I see <code>render: h =&gt; h(App)</code>. The render property tells Vue to render the component as HTML (<code>render</code> is actually a function that is part of the Vue options API). You can read more in <a href="https://css-tricks.com/what-does-the-h-stand-for-in-vues-render-method/">this article</a> about why the <code>h</code> is used if you are curious. The code in the <strong>App.vue</strong> component file is passed into that render function, so it gets built out as HTML (and there is other stuff going on to make Vue do its reactivity magic).</p>
<p>The <a href="https://vuejs.org/v2/api/#vm-mount">$mount</a> method is a built-in Vue method that manually starts the mounting of the Vue instance.</p>
<h5 id="vue-3">Vue 3</h5>
<p>In Vue 3, I see that the <strong>main.js</strong> file looks very different:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createApp } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vue&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> App </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(App).</span><span style="color: #D2A8FF">mount</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>This seems like a lot less code. Instead of importing a constructor function to create a Vue object instance, I see a function called <code>createApp</code> being imported. It’s striking to me that initialization is happening with just one line of code, <code>createApp(App).mount('#app')</code>.</p>
<p>Even though it’s not apparent here, the <code>createApp</code> function is actually still using the <code>new Vue()</code> constructor inside the function. The difference now is that it <em>makes a copy</em> of the Vue instance. Instead of using <code>new Vue()</code> directly (and directly adding configuration options which will affect all uses of that Vue instance, resulting in mutations to global state), the <code>createApp</code> makes a copy that can be separately configured. By encapsulating this within a function, it gives me the ability to create separate Vue instances, and configuration to each instance won’t affect other instances.</p>
<p>This is an improvement because now it’s easier to create two Vue objects with separate configurations if needed. Here is an example of a setup that is doing that:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> GlobalApp </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">//Create one Vue app using same global app file and add unique configuration</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app1</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Vue.</span><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(GlobalApp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">component</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;SearchInput&#39;</span><span style="color: #C9D1D9">, SearchInputComponent)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">directive</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;focus&#39;</span><span style="color: #C9D1D9">, FocusDirective)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(LocalPlugin)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">//Create second Vue app using same global app file and add unique configuration</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app2</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Vue.</span><span style="color: #D2A8FF">createApp</span><span style="color: #C9D1D9">(GlobalApp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">component</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Modal&#39;</span><span style="color: #C9D1D9">, ModalComponent)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">directive</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;toolip&#39;</span><span style="color: #C9D1D9">, TooltipDirective)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(DifferentPlugin)</span></span></code></pre>
<p>Why is this helpful? I can only imagine possible situations. Perhaps if different teams using Vue want to build off the same main App file but add their own options, plugins, features, etc. Or maybe so that I could build something as a core but then branch off on different paths to see how different configurations work.</p>
<p>Whatever the reason, just having that ability has made Vue better.</p>
<h3 id="appvue">App.vue</h3>
<p>The last file I want to look at to see if there are any differences out of the box is the <strong>App.vue</strong> file.</p>
<p>The <strong>App.vue</strong> file is the root component, the one that is the starting point for rendering the Vue code when the application gets mounted to that DOM element in the <strong>index.html</strong> file.</p>
<p>After comparing <strong>App.vue</strong> in Vue 2 and <strong>App.vue</strong> in Vue 3, I see only one difference, and it’s in the template block.</p>
<p>Here is the Vue 2 <strong>App.vue</strong> template:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">alt</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Vue logo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;./assets/logo.png&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #FFA198">HelloWorld</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">msg</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Welcome to Your Vue.js App&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>And here is the Vue 3 <strong>App.vue</strong> template:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">alt</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Vue logo&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;./assets/logo.png&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #FFA198">HelloWorld</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">msg</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Welcome to Your Vue.js App&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>I’m surprised to see that there is no longer the need for the surrounding root div in the template. We are no longer required to have a single root element, like so:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;...&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>In Vue 2, we had to provide a single root element as the direct child of the template, but now in Vue 3, we can have many direct child elements, i.e., multiple root elements. This eliminates all the extra divs that showed up around the HTML code for each component.</p>
<p>However, it means that if you put a non-prop attribute on the component, and you use multi-root elements rather than a single root element like in Vue 2, that attribute won’t show up in your component unless you explicitly <a href="https://v3.vuejs.org/guide/component-attrs.html#disabling-attribute-inheritance">bind an element to those attributes</a>. Just something to be aware of.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So far, I’m not too intimidated by these changes I see in Vue 3 versus Vue 2, but I haven’t really gotten into the big stuff yet.</p>
<p>In my next post in this series, I’ll examine the <code>setup() </code> function, which is probably the most important change to understand. It will be a good opportunity for comparing the Composition API (which comes with Vue 3) versus the Options API (which was the Vue 2 way of doing things).</p>
<p>Please follow me on <a href="https://twitter.com/sandra_rodgers_">Twitter</a> if you want to dive into more Vue 3 with me!</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/diving-into-vue-3-getting-started/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
