import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [], "source": '\r\nWhen we started building the [Documentation page here at Deepgram](https://developers.deepgram.com/documentation/), we had a lot of nested pages and routes. Rather than have all those links listed out on the side, we wanted the user to be able to expand and collapse them in order to have a cleaner look and feel.\r\n\r\nAt the top level of our navigation, we have a `SideNavigation.vue` component that gets the navigation information from a `navigation.yml` file in our content folder. Each navigation element can have a `children` property (shown below) that lists out the child routes of that page.\r\n\r\n![screenshot showing navigation routes and child navigation routes](https://res.cloudinary.com/deepgram/image/upload/v1642175788/blog/2022/01/nuxt-expand-nested-navigation/child-routes.png)\r\n\r\nThis is the original template we had set up for the component:\r\n\r\n```vue\r\n<template>\r\n  <ul>\r\n    <li\r\n      v-for="nav of navigation"\r\n      :key="nav.to"\r\n      :class="{ active: isActive(nav) }"\r\n    >\r\n      <NuxtLink :to="nav.to" :title="nav.title || nav.name">{{\r\n        nav.name\r\n      }}</NuxtLink>\r\n      <NavList v-if="nav.children" :navigation="nav.children" />\r\n    </li>\r\n  </ul>\r\n</template>\r\n```\r\n\r\nThe component was recursively going through the navigation object and creating new NavList components if there were children routes. Basically, it is rendering another version of itself inside of itself. So the NavList component renders another NavList component. Sort of like component Inception. Don\'t worry about an infinite rendering of NavLists though. It will render a child NavList only if there are children to the navigation object.\r\n\r\nI like the fact that it is recursive, making it dynamic. That way, we don\'t have to specify when to use a \'child\' `NavList` component. It also presented a problem. I needed some way to identify which sub-menus were open and which were not. After some thought and some rubber ducking, I settled on having a data property containing an array of the parent route paths that were expanded. I called it `childrenShow`.\r\n\r\n```js\r\ndata() {\r\n    return {\r\n      childrenShow: [],\r\n    }\r\n  },\r\n```\r\n\r\nIf a parent route has a path of `/documentation/getting-started/`, the entire string gets pushed into the array. Then, as the child `NavList` components get added to the page, I needed to check if they should be shown using a `v-show` directive. I did this by using the `isExpanded` method, which takes in the current `nav` object (which comes from the original YAML file for the nav list structure via the `v-for` above) and checks it against the `childrenShow` array to see if should be shown.\r\n\r\nAlso, since there is already a v-if on the `NavList`, and I can\'t use both a v-if and a v-show on the same element, I had to create a container template to handle the v-if. So the `NavList` line will change to this:\r\n\r\n```vue\r\n<template v-if="nav.children">\r\n  <NavList v-show="isExpanded(nav)" :navigation="nav.children" />\r\n</template>\r\n```\r\n\r\nThis worked well as-is. The menus collapse and expand when the user clicks on the respective expand/collapse button. The only issue now is that the transition wasn\'t smooth, which can be a little jarring.\r\n\r\nAfter playing with transitions for a while and not having much success for this use case, I talked to a co-worker, and he sent me [this article from Markus Oberlehner](https://markus.oberlehner.net/blog/transition-to-height-auto-with-vue/) that talks about transitioning to an element\'s full height. So I created a new component called `TransitionExpand.vue` and put this code in there:\r\n\r\n```vue\r\n<script>\r\nexport default {\r\n  name: `TransitionExpand`,\r\n  functional: true,\r\n  render(createElement, context) {\r\n    const data = {\r\n      props: {\r\n        name: `expand`,\r\n      },\r\n      on: {\r\n        afterEnter(element) {\r\n          // eslint-disable-next-line no-param-reassign\r\n          element.style.height = `auto`\r\n        },\r\n        enter(element) {\r\n          const { width } = getComputedStyle(element)\r\n\r\n          /* eslint-disable no-param-reassign */\r\n          element.style.width = width\r\n          element.style.position = `absolute`\r\n          element.style.visibility = `hidden`\r\n          element.style.height = `auto`\r\n          /* eslint-enable */\r\n\r\n          const { height } = getComputedStyle(element)\r\n\r\n          /* eslint-disable no-param-reassign */\r\n          element.style.width = null\r\n          element.style.position = null\r\n          element.style.visibility = null\r\n          element.style.height = 0\r\n          /* eslint-enable */\r\n\r\n          // Force repaint to make sure the\r\n          // animation is triggered correctly.\r\n          // eslint-disable-next-line no-unused-expressions\r\n          getComputedStyle(element).height\r\n\r\n          requestAnimationFrame(() => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            element.style.height = height\r\n          })\r\n        },\r\n        leave(element) {\r\n          const { height } = getComputedStyle(element)\r\n\r\n          // eslint-disable-next-line no-param-reassign\r\n          element.style.height = height\r\n\r\n          // Force repaint to make sure the\r\n          // animation is triggered correctly.\r\n          // eslint-disable-next-line no-unused-expressions\r\n          getComputedStyle(element).height\r\n\r\n          requestAnimationFrame(() => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            element.style.height = 0\r\n          })\r\n        },\r\n      },\r\n    }\r\n\r\n    return createElement(`transition`, data, context.children)\r\n  },\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\n* {\r\n  will-change: height;\r\n  transform: translateZ(0);\r\n  backface-visibility: hidden;\r\n  perspective: 1000px;\r\n}\r\n</style>\r\n\r\n<style>\r\n.expand-enter-active,\r\n.expand-leave-active {\r\n  transition: height 0.5s ease-in-out;\r\n  overflow: hidden;\r\n}\r\n\r\n.expand-enter,\r\n.expand-leave-to {\r\n  height: 0;\r\n}\r\n</style>\r\n```\r\n\r\nThere is a lot of stuff happening in that component. To understand it better, visit the link above to Markus\' blog. He goes into the detail you need.\r\n\r\nI then changed the template tag that was containing the child `NavList` component, to a `transition-expand` tag like this:\r\n\r\n```js\r\n<transition-expand v-if="nav.children">\r\n  <NavList v-show="isExpanded(nav)" :navigation="nav.children" />\r\n</transition-expand>\r\n```\r\n\r\nThat made the expand/collapse transition much smoother and created a better user experience. It was a challenging problem that was fun to figure out. If you want to see a working example of it, you can check out this [code sandbox](https://codesandbox.io/s/serene-stitch-30zmi). If you want to see it on our production site, you can see it on our [Documentation page](https://developers.deepgram.com/documentation/).\r\n\r\n<CodeEmbed src="https://codesandbox.io/s/serene-stitch-30zmi" />\r\n\r\n        ', "html": '<p>When we started building the <a href="https://developers.deepgram.com/documentation/">Documentation page here at Deepgram</a>, we had a lot of nested pages and routes. Rather than have all those links listed out on the side, we wanted the user to be able to expand and collapse them in order to have a cleaner look and feel.</p>\n<p>At the top level of our navigation, we have a <code is:raw>SideNavigation.vue</code> component that gets the navigation information from a <code is:raw>navigation.yml</code> file in our content folder. Each navigation element can have a <code is:raw>children</code> property (shown below) that lists out the child routes of that page.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642175788/blog/2022/01/nuxt-expand-nested-navigation/child-routes.png" alt="screenshot showing navigation routes and child navigation routes"></p>\n<p>This is the original template we had set up for the component:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> navigation</span><span style="color: #C9D1D9">&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">      :</span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.to</span><span style="color: #C9D1D9">&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">      :</span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">{ active: </span><span style="color: #D2A8FF">isActive</span><span style="color: #C9D1D9">(nav) }</span><span style="color: #C9D1D9">&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">NuxtLink</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">to</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.to</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">title</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.title </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> nav.name</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">&gt;{{</span></span>\n<span class="line"><span style="color: #C9D1D9">        nav.name</span></span>\n<span class="line"><span style="color: #C9D1D9">      }}&lt;/</span><span style="color: #7EE787">NuxtLink</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">navigation</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The component was recursively going through the navigation object and creating new NavList components if there were children routes. Basically, it is rendering another version of itself inside of itself. So the NavList component renders another NavList component. Sort of like component Inception. Don\u2019t worry about an infinite rendering of NavLists though. It will render a child NavList only if there are children to the navigation object.</p>\n<p>I like the fact that it is recursive, making it dynamic. That way, we don\u2019t have to specify when to use a \u2018child\u2019 <code is:raw>NavList</code> component. It also presented a problem. I needed some way to identify which sub-menus were open and which were not. After some thought and some rubber ducking, I settled on having a data property containing an array of the parent route paths that were expanded. I called it <code is:raw>childrenShow</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">data</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      childrenShow: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span></code></pre>\n<p>If a parent route has a path of <code is:raw>/documentation/getting-started/</code>, the entire string gets pushed into the array. Then, as the child <code is:raw>NavList</code> components get added to the page, I needed to check if they should be shown using a <code is:raw>v-show</code> directive. I did this by using the <code is:raw>isExpanded</code> method, which takes in the current <code is:raw>nav</code> object (which comes from the original YAML file for the nav list structure via the <code is:raw>v-for</code> above) and checks it against the <code is:raw>childrenShow</code> array to see if should be shown.</p>\n<p>Also, since there is already a v-if on the <code is:raw>NavList</code>, and I can\u2019t use both a v-if and a v-show on the same element, I had to create a container template to handle the v-if. So the <code is:raw>NavList</code> line will change to this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-show</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #D2A8FF">isExpanded</span><span style="color: #C9D1D9">(nav)</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">navigation</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This worked well as-is. The menus collapse and expand when the user clicks on the respective expand/collapse button. The only issue now is that the transition wasn\u2019t smooth, which can be a little jarring.</p>\n<p>After playing with transitions for a while and not having much success for this use case, I talked to a co-worker, and he sent me <a href="https://markus.oberlehner.net/blog/transition-to-height-auto-with-vue/">this article from Markus Oberlehner</a> that talks about transitioning to an element\u2019s full height. So I created a new component called <code is:raw>TransitionExpand.vue</code> and put this code in there:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> {</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #C9D1D9">name: </span><span style="color: #A5D6FF">`TransitionExpand`</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #C9D1D9">functional: </span><span style="color: #79C0FF">true</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #D2A8FF">render</span><span style="color: #FFA657">(createElement, context) </span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      props: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        name: </span><span style="color: #A5D6FF">`expand`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      on: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">afterEnter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`auto`</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">enter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-disable no-param-reassign */</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.position </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`absolute`</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.visibility </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`hidden`</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`auto`</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-enable */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-disable no-param-reassign */</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.position </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.visibility </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-enable */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Force repaint to make sure the</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// animation is triggered correctly.</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-unused-expressions</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element).height</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">requestAnimationFrame</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">            element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">leave</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Force repaint to make sure the</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// animation is triggered correctly.</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-unused-expressions</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element).height</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">requestAnimationFrame</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">            element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">createElement</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`transition`</span><span style="color: #C9D1D9">, data, context.children)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">scoped</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">will-change</span><span style="color: #C9D1D9">: height;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">transform</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">translateZ</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">backface-visibility</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">hidden</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">perspective</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1000</span><span style="color: #FF7B72">px</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #79C0FF">.expand-enter-active</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #79C0FF">.expand-leave-active</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">transition</span><span style="color: #C9D1D9">: height </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">s</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ease-in-out</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">overflow</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">hidden</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">.expand-enter</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #79C0FF">.expand-leave-to</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>There is a lot of stuff happening in that component. To understand it better, visit the link above to Markus\u2019 blog. He goes into the detail you need.</p>\n<p>I then changed the template tag that was containing the child <code is:raw>NavList</code> component, to a <code is:raw>transition-expand</code> tag like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">transition-expand</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;nav.children&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-show</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;isExpanded(nav)&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:navigation=&quot;nav.children&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">transition-expand</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>That made the expand/collapse transition much smoother and created a better user experience. It was a challenging problem that was fun to figure out. If you want to see a working example of it, you can check out this <a href="https://codesandbox.io/s/serene-stitch-30zmi">code sandbox</a>. If you want to see it on our production site, you can see it on our <a href="https://developers.deepgram.com/documentation/">Documentation page</a>.</p>\n<CodeEmbed src="https://codesandbox.io/s/serene-stitch-30zmi" />' };
const frontmatter = { "title": "Generating Collapsable Navigation from Nuxt Content", "description": "Generating Collapsable Navigation from Nuxt Content", "date": "2022-02-07T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1644257722/blog/2022/01/nuxt-expand-nested-navigation/Generating-Collapsable-Nav-from-Nuxt%402x.jpg", "authors": ["brian-barrow"], "category": "tutorial", "tags": ["nuxtjs", "vuejs"], "seo": { "title": "Generating Collapsable Navigation from Nuxt Content", "description": "Generating Collapsable Navigation from Nuxt Content" }, "shorturls": { "share": "https://dpgr.am/f02f34c", "twitter": "https://dpgr.am/bf11f9d", "linkedin": "https://dpgr.am/3c0918e", "reddit": "https://dpgr.am/6fa4f3d", "facebook": "https://dpgr.am/c273412" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453848/blog/nuxt-expand-nested-navigation/ograph.png" }, "astro": { "headings": [], "source": '\r\nWhen we started building the [Documentation page here at Deepgram](https://developers.deepgram.com/documentation/), we had a lot of nested pages and routes. Rather than have all those links listed out on the side, we wanted the user to be able to expand and collapse them in order to have a cleaner look and feel.\r\n\r\nAt the top level of our navigation, we have a `SideNavigation.vue` component that gets the navigation information from a `navigation.yml` file in our content folder. Each navigation element can have a `children` property (shown below) that lists out the child routes of that page.\r\n\r\n![screenshot showing navigation routes and child navigation routes](https://res.cloudinary.com/deepgram/image/upload/v1642175788/blog/2022/01/nuxt-expand-nested-navigation/child-routes.png)\r\n\r\nThis is the original template we had set up for the component:\r\n\r\n```vue\r\n<template>\r\n  <ul>\r\n    <li\r\n      v-for="nav of navigation"\r\n      :key="nav.to"\r\n      :class="{ active: isActive(nav) }"\r\n    >\r\n      <NuxtLink :to="nav.to" :title="nav.title || nav.name">{{\r\n        nav.name\r\n      }}</NuxtLink>\r\n      <NavList v-if="nav.children" :navigation="nav.children" />\r\n    </li>\r\n  </ul>\r\n</template>\r\n```\r\n\r\nThe component was recursively going through the navigation object and creating new NavList components if there were children routes. Basically, it is rendering another version of itself inside of itself. So the NavList component renders another NavList component. Sort of like component Inception. Don\'t worry about an infinite rendering of NavLists though. It will render a child NavList only if there are children to the navigation object.\r\n\r\nI like the fact that it is recursive, making it dynamic. That way, we don\'t have to specify when to use a \'child\' `NavList` component. It also presented a problem. I needed some way to identify which sub-menus were open and which were not. After some thought and some rubber ducking, I settled on having a data property containing an array of the parent route paths that were expanded. I called it `childrenShow`.\r\n\r\n```js\r\ndata() {\r\n    return {\r\n      childrenShow: [],\r\n    }\r\n  },\r\n```\r\n\r\nIf a parent route has a path of `/documentation/getting-started/`, the entire string gets pushed into the array. Then, as the child `NavList` components get added to the page, I needed to check if they should be shown using a `v-show` directive. I did this by using the `isExpanded` method, which takes in the current `nav` object (which comes from the original YAML file for the nav list structure via the `v-for` above) and checks it against the `childrenShow` array to see if should be shown.\r\n\r\nAlso, since there is already a v-if on the `NavList`, and I can\'t use both a v-if and a v-show on the same element, I had to create a container template to handle the v-if. So the `NavList` line will change to this:\r\n\r\n```vue\r\n<template v-if="nav.children">\r\n  <NavList v-show="isExpanded(nav)" :navigation="nav.children" />\r\n</template>\r\n```\r\n\r\nThis worked well as-is. The menus collapse and expand when the user clicks on the respective expand/collapse button. The only issue now is that the transition wasn\'t smooth, which can be a little jarring.\r\n\r\nAfter playing with transitions for a while and not having much success for this use case, I talked to a co-worker, and he sent me [this article from Markus Oberlehner](https://markus.oberlehner.net/blog/transition-to-height-auto-with-vue/) that talks about transitioning to an element\'s full height. So I created a new component called `TransitionExpand.vue` and put this code in there:\r\n\r\n```vue\r\n<script>\r\nexport default {\r\n  name: `TransitionExpand`,\r\n  functional: true,\r\n  render(createElement, context) {\r\n    const data = {\r\n      props: {\r\n        name: `expand`,\r\n      },\r\n      on: {\r\n        afterEnter(element) {\r\n          // eslint-disable-next-line no-param-reassign\r\n          element.style.height = `auto`\r\n        },\r\n        enter(element) {\r\n          const { width } = getComputedStyle(element)\r\n\r\n          /* eslint-disable no-param-reassign */\r\n          element.style.width = width\r\n          element.style.position = `absolute`\r\n          element.style.visibility = `hidden`\r\n          element.style.height = `auto`\r\n          /* eslint-enable */\r\n\r\n          const { height } = getComputedStyle(element)\r\n\r\n          /* eslint-disable no-param-reassign */\r\n          element.style.width = null\r\n          element.style.position = null\r\n          element.style.visibility = null\r\n          element.style.height = 0\r\n          /* eslint-enable */\r\n\r\n          // Force repaint to make sure the\r\n          // animation is triggered correctly.\r\n          // eslint-disable-next-line no-unused-expressions\r\n          getComputedStyle(element).height\r\n\r\n          requestAnimationFrame(() => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            element.style.height = height\r\n          })\r\n        },\r\n        leave(element) {\r\n          const { height } = getComputedStyle(element)\r\n\r\n          // eslint-disable-next-line no-param-reassign\r\n          element.style.height = height\r\n\r\n          // Force repaint to make sure the\r\n          // animation is triggered correctly.\r\n          // eslint-disable-next-line no-unused-expressions\r\n          getComputedStyle(element).height\r\n\r\n          requestAnimationFrame(() => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            element.style.height = 0\r\n          })\r\n        },\r\n      },\r\n    }\r\n\r\n    return createElement(`transition`, data, context.children)\r\n  },\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\n* {\r\n  will-change: height;\r\n  transform: translateZ(0);\r\n  backface-visibility: hidden;\r\n  perspective: 1000px;\r\n}\r\n</style>\r\n\r\n<style>\r\n.expand-enter-active,\r\n.expand-leave-active {\r\n  transition: height 0.5s ease-in-out;\r\n  overflow: hidden;\r\n}\r\n\r\n.expand-enter,\r\n.expand-leave-to {\r\n  height: 0;\r\n}\r\n</style>\r\n```\r\n\r\nThere is a lot of stuff happening in that component. To understand it better, visit the link above to Markus\' blog. He goes into the detail you need.\r\n\r\nI then changed the template tag that was containing the child `NavList` component, to a `transition-expand` tag like this:\r\n\r\n```js\r\n<transition-expand v-if="nav.children">\r\n  <NavList v-show="isExpanded(nav)" :navigation="nav.children" />\r\n</transition-expand>\r\n```\r\n\r\nThat made the expand/collapse transition much smoother and created a better user experience. It was a challenging problem that was fun to figure out. If you want to see a working example of it, you can check out this [code sandbox](https://codesandbox.io/s/serene-stitch-30zmi). If you want to see it on our production site, you can see it on our [Documentation page](https://developers.deepgram.com/documentation/).\r\n\r\n<CodeEmbed src="https://codesandbox.io/s/serene-stitch-30zmi" />\r\n\r\n        ', "html": '<p>When we started building the <a href="https://developers.deepgram.com/documentation/">Documentation page here at Deepgram</a>, we had a lot of nested pages and routes. Rather than have all those links listed out on the side, we wanted the user to be able to expand and collapse them in order to have a cleaner look and feel.</p>\n<p>At the top level of our navigation, we have a <code is:raw>SideNavigation.vue</code> component that gets the navigation information from a <code is:raw>navigation.yml</code> file in our content folder. Each navigation element can have a <code is:raw>children</code> property (shown below) that lists out the child routes of that page.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642175788/blog/2022/01/nuxt-expand-nested-navigation/child-routes.png" alt="screenshot showing navigation routes and child navigation routes"></p>\n<p>This is the original template we had set up for the component:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> navigation</span><span style="color: #C9D1D9">&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">      :</span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.to</span><span style="color: #C9D1D9">&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">      :</span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">{ active: </span><span style="color: #D2A8FF">isActive</span><span style="color: #C9D1D9">(nav) }</span><span style="color: #C9D1D9">&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">NuxtLink</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">to</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.to</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">title</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.title </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> nav.name</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">&gt;{{</span></span>\n<span class="line"><span style="color: #C9D1D9">        nav.name</span></span>\n<span class="line"><span style="color: #C9D1D9">      }}&lt;/</span><span style="color: #7EE787">NuxtLink</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">navigation</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The component was recursively going through the navigation object and creating new NavList components if there were children routes. Basically, it is rendering another version of itself inside of itself. So the NavList component renders another NavList component. Sort of like component Inception. Don\u2019t worry about an infinite rendering of NavLists though. It will render a child NavList only if there are children to the navigation object.</p>\n<p>I like the fact that it is recursive, making it dynamic. That way, we don\u2019t have to specify when to use a \u2018child\u2019 <code is:raw>NavList</code> component. It also presented a problem. I needed some way to identify which sub-menus were open and which were not. After some thought and some rubber ducking, I settled on having a data property containing an array of the parent route paths that were expanded. I called it <code is:raw>childrenShow</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">data</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      childrenShow: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span></code></pre>\n<p>If a parent route has a path of <code is:raw>/documentation/getting-started/</code>, the entire string gets pushed into the array. Then, as the child <code is:raw>NavList</code> components get added to the page, I needed to check if they should be shown using a <code is:raw>v-show</code> directive. I did this by using the <code is:raw>isExpanded</code> method, which takes in the current <code is:raw>nav</code> object (which comes from the original YAML file for the nav list structure via the <code is:raw>v-for</code> above) and checks it against the <code is:raw>childrenShow</code> array to see if should be shown.</p>\n<p>Also, since there is already a v-if on the <code is:raw>NavList</code>, and I can\u2019t use both a v-if and a v-show on the same element, I had to create a container template to handle the v-if. So the <code is:raw>NavList</code> line will change to this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-show</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #D2A8FF">isExpanded</span><span style="color: #C9D1D9">(nav)</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">navigation</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This worked well as-is. The menus collapse and expand when the user clicks on the respective expand/collapse button. The only issue now is that the transition wasn\u2019t smooth, which can be a little jarring.</p>\n<p>After playing with transitions for a while and not having much success for this use case, I talked to a co-worker, and he sent me <a href="https://markus.oberlehner.net/blog/transition-to-height-auto-with-vue/">this article from Markus Oberlehner</a> that talks about transitioning to an element\u2019s full height. So I created a new component called <code is:raw>TransitionExpand.vue</code> and put this code in there:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> {</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #C9D1D9">name: </span><span style="color: #A5D6FF">`TransitionExpand`</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #C9D1D9">functional: </span><span style="color: #79C0FF">true</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #D2A8FF">render</span><span style="color: #FFA657">(createElement, context) </span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      props: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        name: </span><span style="color: #A5D6FF">`expand`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      on: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">afterEnter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`auto`</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">enter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-disable no-param-reassign */</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.position </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`absolute`</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.visibility </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`hidden`</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`auto`</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-enable */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-disable no-param-reassign */</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.position </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.visibility </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-enable */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Force repaint to make sure the</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// animation is triggered correctly.</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-unused-expressions</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element).height</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">requestAnimationFrame</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">            element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">leave</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Force repaint to make sure the</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// animation is triggered correctly.</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-unused-expressions</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element).height</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">requestAnimationFrame</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">            element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">createElement</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`transition`</span><span style="color: #C9D1D9">, data, context.children)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">scoped</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">will-change</span><span style="color: #C9D1D9">: height;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">transform</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">translateZ</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">backface-visibility</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">hidden</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">perspective</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1000</span><span style="color: #FF7B72">px</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #79C0FF">.expand-enter-active</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #79C0FF">.expand-leave-active</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">transition</span><span style="color: #C9D1D9">: height </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">s</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ease-in-out</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">overflow</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">hidden</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">.expand-enter</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #79C0FF">.expand-leave-to</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>There is a lot of stuff happening in that component. To understand it better, visit the link above to Markus\u2019 blog. He goes into the detail you need.</p>\n<p>I then changed the template tag that was containing the child <code is:raw>NavList</code> component, to a <code is:raw>transition-expand</code> tag like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">transition-expand</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;nav.children&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-show</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;isExpanded(nav)&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:navigation=&quot;nav.children&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">transition-expand</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>That made the expand/collapse transition much smoother and created a better user experience. It was a challenging problem that was fun to figure out. If you want to see a working example of it, you can check out this <a href="https://codesandbox.io/s/serene-stitch-30zmi">code sandbox</a>. If you want to see it on our production site, you can see it on our <a href="https://developers.deepgram.com/documentation/">Documentation page</a>.</p>\n<CodeEmbed src="https://codesandbox.io/s/serene-stitch-30zmi" />' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/nuxt-expand-nested-navigation/index.md" };
function rawContent() {
  return '\r\nWhen we started building the [Documentation page here at Deepgram](https://developers.deepgram.com/documentation/), we had a lot of nested pages and routes. Rather than have all those links listed out on the side, we wanted the user to be able to expand and collapse them in order to have a cleaner look and feel.\r\n\r\nAt the top level of our navigation, we have a `SideNavigation.vue` component that gets the navigation information from a `navigation.yml` file in our content folder. Each navigation element can have a `children` property (shown below) that lists out the child routes of that page.\r\n\r\n![screenshot showing navigation routes and child navigation routes](https://res.cloudinary.com/deepgram/image/upload/v1642175788/blog/2022/01/nuxt-expand-nested-navigation/child-routes.png)\r\n\r\nThis is the original template we had set up for the component:\r\n\r\n```vue\r\n<template>\r\n  <ul>\r\n    <li\r\n      v-for="nav of navigation"\r\n      :key="nav.to"\r\n      :class="{ active: isActive(nav) }"\r\n    >\r\n      <NuxtLink :to="nav.to" :title="nav.title || nav.name">{{\r\n        nav.name\r\n      }}</NuxtLink>\r\n      <NavList v-if="nav.children" :navigation="nav.children" />\r\n    </li>\r\n  </ul>\r\n</template>\r\n```\r\n\r\nThe component was recursively going through the navigation object and creating new NavList components if there were children routes. Basically, it is rendering another version of itself inside of itself. So the NavList component renders another NavList component. Sort of like component Inception. Don\'t worry about an infinite rendering of NavLists though. It will render a child NavList only if there are children to the navigation object.\r\n\r\nI like the fact that it is recursive, making it dynamic. That way, we don\'t have to specify when to use a \'child\' `NavList` component. It also presented a problem. I needed some way to identify which sub-menus were open and which were not. After some thought and some rubber ducking, I settled on having a data property containing an array of the parent route paths that were expanded. I called it `childrenShow`.\r\n\r\n```js\r\ndata() {\r\n    return {\r\n      childrenShow: [],\r\n    }\r\n  },\r\n```\r\n\r\nIf a parent route has a path of `/documentation/getting-started/`, the entire string gets pushed into the array. Then, as the child `NavList` components get added to the page, I needed to check if they should be shown using a `v-show` directive. I did this by using the `isExpanded` method, which takes in the current `nav` object (which comes from the original YAML file for the nav list structure via the `v-for` above) and checks it against the `childrenShow` array to see if should be shown.\r\n\r\nAlso, since there is already a v-if on the `NavList`, and I can\'t use both a v-if and a v-show on the same element, I had to create a container template to handle the v-if. So the `NavList` line will change to this:\r\n\r\n```vue\r\n<template v-if="nav.children">\r\n  <NavList v-show="isExpanded(nav)" :navigation="nav.children" />\r\n</template>\r\n```\r\n\r\nThis worked well as-is. The menus collapse and expand when the user clicks on the respective expand/collapse button. The only issue now is that the transition wasn\'t smooth, which can be a little jarring.\r\n\r\nAfter playing with transitions for a while and not having much success for this use case, I talked to a co-worker, and he sent me [this article from Markus Oberlehner](https://markus.oberlehner.net/blog/transition-to-height-auto-with-vue/) that talks about transitioning to an element\'s full height. So I created a new component called `TransitionExpand.vue` and put this code in there:\r\n\r\n```vue\r\n<script>\r\nexport default {\r\n  name: `TransitionExpand`,\r\n  functional: true,\r\n  render(createElement, context) {\r\n    const data = {\r\n      props: {\r\n        name: `expand`,\r\n      },\r\n      on: {\r\n        afterEnter(element) {\r\n          // eslint-disable-next-line no-param-reassign\r\n          element.style.height = `auto`\r\n        },\r\n        enter(element) {\r\n          const { width } = getComputedStyle(element)\r\n\r\n          /* eslint-disable no-param-reassign */\r\n          element.style.width = width\r\n          element.style.position = `absolute`\r\n          element.style.visibility = `hidden`\r\n          element.style.height = `auto`\r\n          /* eslint-enable */\r\n\r\n          const { height } = getComputedStyle(element)\r\n\r\n          /* eslint-disable no-param-reassign */\r\n          element.style.width = null\r\n          element.style.position = null\r\n          element.style.visibility = null\r\n          element.style.height = 0\r\n          /* eslint-enable */\r\n\r\n          // Force repaint to make sure the\r\n          // animation is triggered correctly.\r\n          // eslint-disable-next-line no-unused-expressions\r\n          getComputedStyle(element).height\r\n\r\n          requestAnimationFrame(() => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            element.style.height = height\r\n          })\r\n        },\r\n        leave(element) {\r\n          const { height } = getComputedStyle(element)\r\n\r\n          // eslint-disable-next-line no-param-reassign\r\n          element.style.height = height\r\n\r\n          // Force repaint to make sure the\r\n          // animation is triggered correctly.\r\n          // eslint-disable-next-line no-unused-expressions\r\n          getComputedStyle(element).height\r\n\r\n          requestAnimationFrame(() => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            element.style.height = 0\r\n          })\r\n        },\r\n      },\r\n    }\r\n\r\n    return createElement(`transition`, data, context.children)\r\n  },\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\n* {\r\n  will-change: height;\r\n  transform: translateZ(0);\r\n  backface-visibility: hidden;\r\n  perspective: 1000px;\r\n}\r\n</style>\r\n\r\n<style>\r\n.expand-enter-active,\r\n.expand-leave-active {\r\n  transition: height 0.5s ease-in-out;\r\n  overflow: hidden;\r\n}\r\n\r\n.expand-enter,\r\n.expand-leave-to {\r\n  height: 0;\r\n}\r\n</style>\r\n```\r\n\r\nThere is a lot of stuff happening in that component. To understand it better, visit the link above to Markus\' blog. He goes into the detail you need.\r\n\r\nI then changed the template tag that was containing the child `NavList` component, to a `transition-expand` tag like this:\r\n\r\n```js\r\n<transition-expand v-if="nav.children">\r\n  <NavList v-show="isExpanded(nav)" :navigation="nav.children" />\r\n</transition-expand>\r\n```\r\n\r\nThat made the expand/collapse transition much smoother and created a better user experience. It was a challenging problem that was fun to figure out. If you want to see a working example of it, you can check out this [code sandbox](https://codesandbox.io/s/serene-stitch-30zmi). If you want to see it on our production site, you can see it on our [Documentation page](https://developers.deepgram.com/documentation/).\r\n\r\n<CodeEmbed src="https://codesandbox.io/s/serene-stitch-30zmi" />\r\n\r\n        ';
}
function compiledContent() {
  return '<p>When we started building the <a href="https://developers.deepgram.com/documentation/">Documentation page here at Deepgram</a>, we had a lot of nested pages and routes. Rather than have all those links listed out on the side, we wanted the user to be able to expand and collapse them in order to have a cleaner look and feel.</p>\n<p>At the top level of our navigation, we have a <code is:raw>SideNavigation.vue</code> component that gets the navigation information from a <code is:raw>navigation.yml</code> file in our content folder. Each navigation element can have a <code is:raw>children</code> property (shown below) that lists out the child routes of that page.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642175788/blog/2022/01/nuxt-expand-nested-navigation/child-routes.png" alt="screenshot showing navigation routes and child navigation routes"></p>\n<p>This is the original template we had set up for the component:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> navigation</span><span style="color: #C9D1D9">&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">      :</span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.to</span><span style="color: #C9D1D9">&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">      :</span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">{ active: </span><span style="color: #D2A8FF">isActive</span><span style="color: #C9D1D9">(nav) }</span><span style="color: #C9D1D9">&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">NuxtLink</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">to</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.to</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">title</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.title </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> nav.name</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">&gt;{{</span></span>\n<span class="line"><span style="color: #C9D1D9">        nav.name</span></span>\n<span class="line"><span style="color: #C9D1D9">      }}&lt;/</span><span style="color: #7EE787">NuxtLink</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">navigation</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The component was recursively going through the navigation object and creating new NavList components if there were children routes. Basically, it is rendering another version of itself inside of itself. So the NavList component renders another NavList component. Sort of like component Inception. Don\u2019t worry about an infinite rendering of NavLists though. It will render a child NavList only if there are children to the navigation object.</p>\n<p>I like the fact that it is recursive, making it dynamic. That way, we don\u2019t have to specify when to use a \u2018child\u2019 <code is:raw>NavList</code> component. It also presented a problem. I needed some way to identify which sub-menus were open and which were not. After some thought and some rubber ducking, I settled on having a data property containing an array of the parent route paths that were expanded. I called it <code is:raw>childrenShow</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">data</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      childrenShow: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span></code></pre>\n<p>If a parent route has a path of <code is:raw>/documentation/getting-started/</code>, the entire string gets pushed into the array. Then, as the child <code is:raw>NavList</code> components get added to the page, I needed to check if they should be shown using a <code is:raw>v-show</code> directive. I did this by using the <code is:raw>isExpanded</code> method, which takes in the current <code is:raw>nav</code> object (which comes from the original YAML file for the nav list structure via the <code is:raw>v-for</code> above) and checks it against the <code is:raw>childrenShow</code> array to see if should be shown.</p>\n<p>Also, since there is already a v-if on the <code is:raw>NavList</code>, and I can\u2019t use both a v-if and a v-show on the same element, I had to create a container template to handle the v-if. So the <code is:raw>NavList</code> line will change to this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-show</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #D2A8FF">isExpanded</span><span style="color: #C9D1D9">(nav)</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">navigation</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This worked well as-is. The menus collapse and expand when the user clicks on the respective expand/collapse button. The only issue now is that the transition wasn\u2019t smooth, which can be a little jarring.</p>\n<p>After playing with transitions for a while and not having much success for this use case, I talked to a co-worker, and he sent me <a href="https://markus.oberlehner.net/blog/transition-to-height-auto-with-vue/">this article from Markus Oberlehner</a> that talks about transitioning to an element\u2019s full height. So I created a new component called <code is:raw>TransitionExpand.vue</code> and put this code in there:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> {</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #C9D1D9">name: </span><span style="color: #A5D6FF">`TransitionExpand`</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #C9D1D9">functional: </span><span style="color: #79C0FF">true</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #D2A8FF">render</span><span style="color: #FFA657">(createElement, context) </span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      props: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        name: </span><span style="color: #A5D6FF">`expand`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      on: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">afterEnter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`auto`</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">enter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-disable no-param-reassign */</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.position </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`absolute`</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.visibility </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`hidden`</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`auto`</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-enable */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-disable no-param-reassign */</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.position </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.visibility </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-enable */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Force repaint to make sure the</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// animation is triggered correctly.</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-unused-expressions</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element).height</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">requestAnimationFrame</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">            element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">leave</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Force repaint to make sure the</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// animation is triggered correctly.</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-unused-expressions</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element).height</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">requestAnimationFrame</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>\n<span class="line"><span style="color: #C9D1D9">            element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">createElement</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`transition`</span><span style="color: #C9D1D9">, data, context.children)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">scoped</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">will-change</span><span style="color: #C9D1D9">: height;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">transform</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">translateZ</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">backface-visibility</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">hidden</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">perspective</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1000</span><span style="color: #FF7B72">px</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #79C0FF">.expand-enter-active</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #79C0FF">.expand-leave-active</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">transition</span><span style="color: #C9D1D9">: height </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">s</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ease-in-out</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">overflow</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">hidden</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">.expand-enter</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #79C0FF">.expand-leave-to</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>There is a lot of stuff happening in that component. To understand it better, visit the link above to Markus\u2019 blog. He goes into the detail you need.</p>\n<p>I then changed the template tag that was containing the child <code is:raw>NavList</code> component, to a <code is:raw>transition-expand</code> tag like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">transition-expand</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;nav.children&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-show</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;isExpanded(nav)&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:navigation=&quot;nav.children&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">transition-expand</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>That made the expand/collapse transition much smoother and created a better user experience. It was a challenging problem that was fun to figure out. If you want to see a working example of it, you can check out this <a href="https://codesandbox.io/s/serene-stitch-30zmi">code sandbox</a>. If you want to see it on our production site, you can see it on our <a href="https://developers.deepgram.com/documentation/">Documentation page</a>.</p>\n<CodeEmbed src="https://codesandbox.io/s/serene-stitch-30zmi" />';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/nuxt-expand-nested-navigation/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>When we started building the <a href="https://developers.deepgram.com/documentation/">Documentation page here at Deepgram</a>, we had a lot of nested pages and routes. Rather than have all those links listed out on the side, we wanted the user to be able to expand and collapse them in order to have a cleaner look and feel.</p>
<p>At the top level of our navigation, we have a <code>SideNavigation.vue</code> component that gets the navigation information from a <code>navigation.yml</code> file in our content folder. Each navigation element can have a <code>children</code> property (shown below) that lists out the child routes of that page.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1642175788/blog/2022/01/nuxt-expand-nested-navigation/child-routes.png" alt="screenshot showing navigation routes and child navigation routes"></p>
<p>This is the original template we had set up for the component:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> navigation</span><span style="color: #C9D1D9">&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">      :</span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.to</span><span style="color: #C9D1D9">&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">      :</span><span style="color: #79C0FF">class</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">{ active: </span><span style="color: #D2A8FF">isActive</span><span style="color: #C9D1D9">(nav) }</span><span style="color: #C9D1D9">&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">    &gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">NuxtLink</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">to</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.to</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">title</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.title </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> nav.name</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">&gt;{{</span></span>
<span class="line"><span style="color: #C9D1D9">        nav.name</span></span>
<span class="line"><span style="color: #C9D1D9">      }}&lt;/</span><span style="color: #7EE787">NuxtLink</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">navigation</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>The component was recursively going through the navigation object and creating new NavList components if there were children routes. Basically, it is rendering another version of itself inside of itself. So the NavList component renders another NavList component. Sort of like component Inception. Don’t worry about an infinite rendering of NavLists though. It will render a child NavList only if there are children to the navigation object.</p>
<p>I like the fact that it is recursive, making it dynamic. That way, we don’t have to specify when to use a ‘child’ <code>NavList</code> component. It also presented a problem. I needed some way to identify which sub-menus were open and which were not. After some thought and some rubber ducking, I settled on having a data property containing an array of the parent route paths that were expanded. I called it <code>childrenShow</code>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">data</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      childrenShow: [],</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span></code></pre>
<p>If a parent route has a path of <code>/documentation/getting-started/</code>, the entire string gets pushed into the array. Then, as the child <code>NavList</code> components get added to the page, I needed to check if they should be shown using a <code>v-show</code> directive. I did this by using the <code>isExpanded</code> method, which takes in the current <code>nav</code> object (which comes from the original YAML file for the nav list structure via the <code>v-for</code> above) and checks it against the <code>childrenShow</code> array to see if should be shown.</p>
<p>Also, since there is already a v-if on the <code>NavList</code>, and I can’t use both a v-if and a v-show on the same element, I had to create a container template to handle the v-if. So the <code>NavList</code> line will change to this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-show</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #D2A8FF">isExpanded</span><span style="color: #C9D1D9">(nav)</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> :</span><span style="color: #79C0FF">navigation</span><span style="color: #C9D1D9">=</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9">nav.children</span><span style="color: #C9D1D9">&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>This worked well as-is. The menus collapse and expand when the user clicks on the respective expand/collapse button. The only issue now is that the transition wasn’t smooth, which can be a little jarring.</p>
<p>After playing with transitions for a while and not having much success for this use case, I talked to a co-worker, and he sent me <a href="https://markus.oberlehner.net/blog/transition-to-height-auto-with-vue/">this article from Markus Oberlehner</a> that talks about transitioning to an element’s full height. So I created a new component called <code>TransitionExpand.vue</code> and put this code in there:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> {</span></span>
<span class="line"><span style="color: #FFA657">  </span><span style="color: #C9D1D9">name: </span><span style="color: #A5D6FF">\`TransitionExpand\`</span><span style="color: #FFA657">,</span></span>
<span class="line"><span style="color: #FFA657">  </span><span style="color: #C9D1D9">functional: </span><span style="color: #79C0FF">true</span><span style="color: #FFA657">,</span></span>
<span class="line"><span style="color: #FFA657">  </span><span style="color: #D2A8FF">render</span><span style="color: #FFA657">(createElement, context) </span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      props: {</span></span>
<span class="line"><span style="color: #C9D1D9">        name: </span><span style="color: #A5D6FF">\`expand\`</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      },</span></span>
<span class="line"><span style="color: #C9D1D9">      on: {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">afterEnter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>
<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">\`auto\`</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">enter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-disable no-param-reassign */</span></span>
<span class="line"><span style="color: #C9D1D9">          element.style.width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">          element.style.position </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">\`absolute\`</span></span>
<span class="line"><span style="color: #C9D1D9">          element.style.visibility </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">\`hidden\`</span></span>
<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">\`auto\`</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-enable */</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-disable no-param-reassign */</span></span>
<span class="line"><span style="color: #C9D1D9">          element.style.width </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>
<span class="line"><span style="color: #C9D1D9">          element.style.position </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>
<span class="line"><span style="color: #C9D1D9">          element.style.visibility </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">null</span></span>
<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">/* eslint-enable */</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Force repaint to make sure the</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// animation is triggered correctly.</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-unused-expressions</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element).height</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">requestAnimationFrame</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>
<span class="line"><span style="color: #C9D1D9">            element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height</span></span>
<span class="line"><span style="color: #C9D1D9">          })</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">leave</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">element</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>
<span class="line"><span style="color: #C9D1D9">          element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Force repaint to make sure the</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// animation is triggered correctly.</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// eslint-disable-next-line no-unused-expressions</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">getComputedStyle</span><span style="color: #C9D1D9">(element).height</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">requestAnimationFrame</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #8B949E">// eslint-disable-next-line no-param-reassign</span></span>
<span class="line"><span style="color: #C9D1D9">            element.style.height </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">          })</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">      },</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">createElement</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`transition\`</span><span style="color: #C9D1D9">, data, context.children)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span><span style="color: #FFA657">,</span></span>
<span class="line"><span style="color: #FFA657">}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">scoped</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">will-change</span><span style="color: #C9D1D9">: height;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">transform</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">translateZ</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">backface-visibility</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">hidden</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">perspective</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1000</span><span style="color: #FF7B72">px</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #79C0FF">.expand-enter-active</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #79C0FF">.expand-leave-active</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">transition</span><span style="color: #C9D1D9">: height </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">s</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ease-in-out</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">overflow</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">hidden</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">.expand-enter</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #79C0FF">.expand-leave-to</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">height</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>There is a lot of stuff happening in that component. To understand it better, visit the link above to Markus’ blog. He goes into the detail you need.</p>
<p>I then changed the template tag that was containing the child <code>NavList</code> component, to a <code>transition-expand</code> tag like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">transition-expand</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;nav.children&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">NavList</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-show</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;isExpanded(nav)&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">:navigation=&quot;nav.children&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">transition-expand</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>That made the expand/collapse transition much smoother and created a better user experience. It was a challenging problem that was fun to figure out. If you want to see a working example of it, you can check out this <a href="https://codesandbox.io/s/serene-stitch-30zmi">code sandbox</a>. If you want to see it on our production site, you can see it on our <a href="https://developers.deepgram.com/documentation/">Documentation page</a>.</p>
${renderComponent($$result, "CodeEmbed", CodeEmbed, { "src": "https://codesandbox.io/s/serene-stitch-30zmi" })}`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/nuxt-expand-nested-navigation/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
