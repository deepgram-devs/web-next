import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "create-a-nodejs-project", "text": "Create a Node.js Project" }, { "depth": 2, "slug": "start-the-enhance-job", "text": "Start the Enhance Job" }, { "depth": 2, "slug": "check-the-enhance-job-and-report-progress", "text": "Check the Enhance Job and Report Progress" }, { "depth": 2, "slug": "get-enhanced-file-url", "text": "Get Enhanced File URL" }, { "depth": 2, "slug": "run-the-enhance-logic", "text": "Run the Enhance Logic" }, { "depth": 2, "slug": "transcribe-with-deepgram", "text": "Transcribe With Deepgram" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": "\nYour recordings may not always be great quality - there might be a graininess to them, or background noise that interferes with what the listener is trying to focus on. While Deepgram may still perform fairly well, it's always true that better source audio results in a higher chance for accurate transcripts. For this tutorial, I'll use a low-quality audio file from the [Library of Congress](https://www.loc.gov).\n\nAn excellent tool for improving the quality of audio is [Dolby.io's Media Enhance API](https://docs.dolby.io/media-apis/reference/media-enhance-overview). With this API, all I have to do is make a `POST` request with the audio file, and Dolby.io can analyze it to remove the interfering sounds and the crackling or static you often hear with these types of recordings. I can even specify what type of content the audio is, such as an interview, podcast, or voice recording, and Dolby.io can enhance it even further for that type of content.\n\n## Before We Start\n\nBefore jumping into coding, I'll be sure to get an API key from each of the APIs I'll be using today. I'll head to [Dolby.io](https://dolby.io/signup) and then [Deepgram.com](https://console.deepgram.com/signup?jump=keys) to get keys.\n\nI'll also install the dependencies with the following command in my project directory:\n\n    npm install axios @deepgram/sdk\n\n## Create a Node.js Project\n\nI'll create an `index.js` file and require `axios` to help with making API requests:\n\n```js\nconst axios = require('axios')\n```\n\nI intend to send an audio file to Dolby.io for enhancement, wait for it to be processed, and wait for that file to come back to me. Since there will be an unknown amount of time involved in each step of the process, I need to write asynchronous functions for each step. Here are the steps:\n\n## Start the Enhance Job\n\nThe first asynchronous function will be called `startEnhanceJob`\n\n```js\nconst startEnhanceJob = async (url) => {}\n```\n\nI need to make the audio file available to Dolby.io by putting it in cloud storage. Dolby offers the option of me putting it in their temporary cloud storage, but I have to use the URL format they expect, which will start with `dlb://`. I'll write some JavaScript to create that Dolby.io URL format:\n\n```js\nconst startEnhanceJob = async (url) => {\r\n  const dlbUrl =\r\n    'dlb://out/' + url.split('/').slice(-1)[0].split('.')[0] + '.wav'\r\n}\n```\n\nThen I will make the `POST` request with the audio file to Dolby.io and receive a job ID for that enhance job (which I'll need in the next step).\n\n```js\nconst startEnhanceJob = async (url) => {\r\n  // create a dolby URL\r\n  const dlbUrl =\r\n    'dlb://out/' + url.split('/').slice(-1)[0].split('.')[0] + '.wav'\r\n\r\n  // POST request\r\n  const { data } = await axios({\r\n    method: 'post',\r\n    url: 'https://api.dolby.com/media/enhance',\r\n    headers: {\r\n      'x-api-key': 'YOUR_DOLBYIO_API_KEY',\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n    },\r\n    data: {\r\n      input: url,\r\n      output: dlbUrl,\r\n      content: { type: 'interview' },\r\n    },\r\n  })\r\n\r\n  return { jobId: data.job_id, dlbUrl }\r\n}\n```\n\nNotice that I added `content: { type: interview }` since the audio file I'm sending is an interview.\n\n## Check the Enhance Job and Report Progress\n\nIt will take some amount of time for the enhancement job to run. I need to track the progress so that I know when the file is ready. I'll write two functions in this step: `checkEnhanceJob` and `waitUntilJobCompletes`.\n\nFor `checkEnhanceJob`, I'll take the job ID that was returned from the `startEnhanceJob` function, and I'll use it to make a `GET` request to the Dolby.io Enhance API to get progress on the enhancement job:\n\n```js\nconst checkEnhanceJob = async (job_id) => {\r\n  const { data } = await axios({\r\n    method: 'GET',\r\n    url: 'https://api.dolby.com/media/enhance',\r\n    params: { job_id },\r\n    headers: {\r\n      'x-api-key': api_key,\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n    },\r\n  })\r\n\r\n  // Returns a number between 0 and 100\r\n  return data.progress\r\n}\n```\n\nThen I'll write a function that uses the `checkEnhanceJob` result in a loop to show a countdown as progress is being made on the enhance job. It will wait 2000ms (2 seconds) between each loop:\n\n```js\nconst waitUntilJobCompletes = async (job_id) => {\r\n  let progress = await checkEnhanceJob(job_id)\r\n  while (progress < 100) {\r\n    await new Promise((r) => setTimeout(r, 2000))\r\n    progress = await checkEnhanceJob(job_id)\r\n    console.log(progress)\r\n  }\r\n  return\r\n}\n```\n\n## Get Enhanced File URL\n\nOnce the enhancement of the file is complete, I need to output that new file to a URL that I can use (in this project, I'll be using it to pass on to Deepgram for transcription).\n\nI'll write a function that will make a `POST` request to put the output of the enhance job at the URL I created for temporary storage of the file. I'll also `console.log` the file URL so I can test it now and see how it sounds.\n\n```js\nconst getNewFileUrl = async (dlbUrl) => {\r\n  const { data } = await axios({\r\n    method: 'POST',\r\n    url: 'https://api.dolby.com/media/output',\r\n    data: { url: dlbUrl },\r\n    headers,\r\n  })\r\n\r\n  console.log(data.url)\r\n  return data.url\r\n}\n```\n\n## Run the Enhance Logic\n\nI wrote each step of the enhancement job, but now I need to write a main function that runs every step, i.e., every function I wrote.\n\nI also need to add the URL of the audio file I want to enhance. I've chose a file from the Library of Congress called [\"Interview with Lillie Haws, New York, New York, November 12, 2001\"](https://www.loc.gov/item/afc911000130/).\n\nHere is the `main` function:\n\n```js\nconst main = async () => {\r\n  // start enhancement of file:\r\n  const { jobId, dlbUrl } = await startEnhanceJob(\r\n    'https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3'\r\n  )\r\n\r\n  // track progress as it is processing:\r\n  await waitUntilJobCompletes(jobId)\r\n\r\n  // get the output URL:\r\n  const url = await getNewFileUrl(dlbUrl)\r\n}\r\n\r\nmain()\n```\n\nWhen it runs, I'll see the values of my loop that I printed counting up to completion of the enhancement job. And when it finishes, I'll see a very long URL that I can use to listen to my file.\n\n![A terminal showing values appearing with 2 seconds between them. The values are 0, 19, 19, 46, and 100. As soon as 100 appears, a long URL is shown.](https://res.cloudinary.com/deepgram/image/upload/v1653416323/blog/2022/05/enhance-audio-with-dolby-and-deepgram/progress_console.gif)\n\nIf I click on the link, I'm taken to the hosted audio file. It sounds so much better than the original! Now I'm ready to transcribe it with Deepgram.\n\n## Transcribe With Deepgram\n\nI'll be using Deepgram's API for transcribing [Pre-Recorded Audio](https://developers.deepgram.com/documentation/getting-started/prerecorded/). Deepgram has a Node.js SDK, so I'll require it in my `index.js` file. I'll also create a new instance of Deepgram by giving it my Deepgram API key:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\r\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\n```\n\nI will take the file URL that I received from Dolby.io and send that to Deepgram for transcription. It is the temporarily stored file that I assigned to the `url` variable in the main function (in the last section).\n\nI'll also specify that I would like Deepgram to add punctuation. I can do this by adding `{ punctuate:true }` to the request:\n\n```js\nconst response = await deepgram.transcription.preRecorded(\r\n  { url },\r\n  { punctuate: true }\r\n)\n```\n\nNow I can run the whole function, and I'll see that Deepgram transcribes the enhanced file. I'll `console.log` the response from Deepgram so I can actually see the transcription now:\n\n```js\n// main function\r\nconst main = async () => {\r\n  const { jobId, dlbUrl } = await startEnhanceJob(\r\n    'https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3'\r\n  )\r\n  await waitUntilJobCompletes(jobId)\r\n  const url = await getNewFileUrl(dlbUrl)\r\n  const response = await deepgram.transcription.preRecorded(\r\n    { url },\r\n    { punctuate: true }\r\n  )\r\n  console.log(response.results.channels[0])\r\n}\r\n\r\nmain()\n```\n\nAnd now I have a full transcript of the audio file from the Library of Congress.\n\n## Conclusion\n\nToday I used [Dolby.io](https://docs.dolby.io/) and [Deepgram](https://developers.deepgram.com/) to enhance an audio file and transcribe the speech of the interview into text. These two APIs seem like a great combination for many future projects!\n\nIf you enjoyed my post, follow me at [Twitter](https://twitter.com/sandra_rodgers_) to continue the conversation.\n\n        ", "html": '<p>Your recordings may not always be great quality - there might be a graininess to them, or background noise that interferes with what the listener is trying to focus on. While Deepgram may still perform fairly well, it\u2019s always true that better source audio results in a higher chance for accurate transcripts. For this tutorial, I\u2019ll use a low-quality audio file from the <a href="https://www.loc.gov">Library of Congress</a>.</p>\n<p>An excellent tool for improving the quality of audio is <a href="https://docs.dolby.io/media-apis/reference/media-enhance-overview">Dolby.io\u2019s Media Enhance API</a>. With this API, all I have to do is make a <code is:raw>POST</code> request with the audio file, and Dolby.io can analyze it to remove the interfering sounds and the crackling or static you often hear with these types of recordings. I can even specify what type of content the audio is, such as an interview, podcast, or voice recording, and Dolby.io can enhance it even further for that type of content.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>Before jumping into coding, I\u2019ll be sure to get an API key from each of the APIs I\u2019ll be using today. I\u2019ll head to <a href="https://dolby.io/signup">Dolby.io</a> and then <a href="https://console.deepgram.com/signup?jump=keys">Deepgram.com</a> to get keys.</p>\n<p>I\u2019ll also install the dependencies with the following command in my project directory:</p>\n<p>npm install axios @deepgram/sdk</p>\n<h2 id="create-a-nodejs-project">Create a Node.js Project</h2>\n<p>I\u2019ll create an <code is:raw>index.js</code> file and require <code is:raw>axios</code> to help with making API requests:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>I intend to send an audio file to Dolby.io for enhancement, wait for it to be processed, and wait for that file to come back to me. Since there will be an unknown amount of time involved in each step of the process, I need to write asynchronous functions for each step. Here are the steps:</p>\n<h2 id="start-the-enhance-job">Start the Enhance Job</h2>\n<p>The first asynchronous function will be called <code is:raw>startEnhanceJob</code></p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {}</span></span></code></pre>\n<p>I need to make the audio file available to Dolby.io by putting it in cloud storage. Dolby offers the option of me putting it in their temporary cloud storage, but I have to use the URL format they expect, which will start with <code is:raw>dlb://</code>. I\u2019ll write some JavaScript to create that Dolby.io URL format:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;dlb://out/&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;.wav&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then I will make the <code is:raw>POST</code> request with the audio file to Dolby.io and receive a job ID for that enhance job (which I\u2019ll need in the next step).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// create a dolby URL</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;dlb://out/&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;.wav&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// POST request</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/enhance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;x-api-key&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;YOUR_DOLBYIO_API_KEY&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      Accept: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      input: url,</span></span>\n<span class="line"><span style="color: #C9D1D9">      output: dlbUrl,</span></span>\n<span class="line"><span style="color: #C9D1D9">      content: { type: </span><span style="color: #A5D6FF">&#39;interview&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { jobId: data.job_id, dlbUrl }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Notice that I added <code is:raw>content: { type: interview }</code> since the audio file I\u2019m sending is an interview.</p>\n<h2 id="check-the-enhance-job-and-report-progress">Check the Enhance Job and Report Progress</h2>\n<p>It will take some amount of time for the enhancement job to run. I need to track the progress so that I know when the file is ready. I\u2019ll write two functions in this step: <code is:raw>checkEnhanceJob</code> and <code is:raw>waitUntilJobCompletes</code>.</p>\n<p>For <code is:raw>checkEnhanceJob</code>, I\u2019ll take the job ID that was returned from the <code is:raw>startEnhanceJob</code> function, and I\u2019ll use it to make a <code is:raw>GET</code> request to the Dolby.io Enhance API to get progress on the enhancement job:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">job_id</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/enhance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    params: { job_id },</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;x-api-key&#39;</span><span style="color: #C9D1D9">: api_key,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      Accept: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Returns a number between 0 and 100</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data.progress</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then I\u2019ll write a function that uses the <code is:raw>checkEnhanceJob</code> result in a loop to show a countdown as progress is being made on the enhance job. It will wait 2000ms (2 seconds) between each loop:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">job_id</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> progress </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9">(job_id)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> (progress </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(r, </span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">    progress </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9">(job_id)</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(progress)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="get-enhanced-file-url">Get Enhanced File URL</h2>\n<p>Once the enhancement of the file is complete, I need to output that new file to a URL that I can use (in this project, I\u2019ll be using it to pass on to Deepgram for transcription).</p>\n<p>I\u2019ll write a function that will make a <code is:raw>POST</code> request to put the output of the enhance job at the URL I created for temporary storage of the file. I\u2019ll also <code is:raw>console.log</code> the file URL so I can test it now and see how it sounds.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">dlbUrl</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/output&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    data: { url: dlbUrl },</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data.url)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data.url</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="run-the-enhance-logic">Run the Enhance Logic</h2>\n<p>I wrote each step of the enhancement job, but now I need to write a main function that runs every step, i.e., every function I wrote.</p>\n<p>I also need to add the URL of the audio file I want to enhance. I\u2019ve chose a file from the Library of Congress called <a href="https://www.loc.gov/item/afc911000130/">\u201CInterview with Lillie Haws, New York, New York, November 12, 2001\u201D</a>.</p>\n<p>Here is the <code is:raw>main</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// start enhancement of file:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">jobId</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// track progress as it is processing:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9">(jobId)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// get the output URL:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9">(dlbUrl)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>When it runs, I\u2019ll see the values of my loop that I printed counting up to completion of the enhancement job. And when it finishes, I\u2019ll see a very long URL that I can use to listen to my file.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1653416323/blog/2022/05/enhance-audio-with-dolby-and-deepgram/progress_console.gif" alt="A terminal showing values appearing with 2 seconds between them. The values are 0, 19, 19, 46, and 100. As soon as 100 appears, a long URL is shown."></p>\n<p>If I click on the link, I\u2019m taken to the hosted audio file. It sounds so much better than the original! Now I\u2019m ready to transcribe it with Deepgram.</p>\n<h2 id="transcribe-with-deepgram">Transcribe With Deepgram</h2>\n<p>I\u2019ll be using Deepgram\u2019s API for transcribing <a href="https://developers.deepgram.com/documentation/getting-started/prerecorded/">Pre-Recorded Audio</a>. Deepgram has a Node.js SDK, so I\u2019ll require it in my <code is:raw>index.js</code> file. I\u2019ll also create a new instance of Deepgram by giving it my Deepgram API key:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>I will take the file URL that I received from Dolby.io and send that to Deepgram for transcription. It is the temporarily stored file that I assigned to the <code is:raw>url</code> variable in the main function (in the last section).</p>\n<p>I\u2019ll also specify that I would like Deepgram to add punctuation. I can do this by adding <code is:raw>{ punctuate:true }</code> to the request:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  { url },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Now I can run the whole function, and I\u2019ll see that Deepgram transcribes the enhanced file. I\u2019ll <code is:raw>console.log</code> the response from Deepgram so I can actually see the transcription now:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// main function</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">jobId</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9">(jobId)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9">(dlbUrl)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    { url },</span></span>\n<span class="line"><span style="color: #C9D1D9">    { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(response.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>And now I have a full transcript of the audio file from the Library of Congress.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>Today I used <a href="https://docs.dolby.io/">Dolby.io</a> and <a href="https://developers.deepgram.com/">Deepgram</a> to enhance an audio file and transcribe the speech of the interview into text. These two APIs seem like a great combination for many future projects!</p>\n<p>If you enjoyed my post, follow me at <a href="https://twitter.com/sandra_rodgers_">Twitter</a> to continue the conversation.</p>' };
const frontmatter = { "title": "Enhance Your Audio With Dolby.io For Higher Quality Transcripts", "description": "Sometimes your audio will be low quality, and this may affect your transcripts. Learn how to use the Dolby.io Enhance API to clean up your files for better transcripts and happier ears.", "date": "2022-06-02T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1653416318/blog/2022/05/enhance-audio-with-dolby-and-deepgram/Enhance-Audio-wDolby-for-higher-quality%402x.jpg", "authors": ["sandra-rodgers"], "category": "tutorial", "tags": ["dolby", "accessibility"], "seo": { "title": "Enhance Your Audio With Dolby.io For Higher Quality Transcripts", "description": "Sometimes your audio will be low quality, and this may affect your transcripts. Learn how to use the Dolby.io Enhance API to clean up your files for better transcripts and happier ears." }, "shorturls": { "share": "https://dpgr.am/17f87f4", "twitter": "https://dpgr.am/5325f0a", "linkedin": "https://dpgr.am/2ca55ed", "reddit": "https://dpgr.am/0e2f8f5", "facebook": "https://dpgr.am/e4a028b" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454087/blog/enhance-audio-with-dolby-and-deepgram/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "create-a-nodejs-project", "text": "Create a Node.js Project" }, { "depth": 2, "slug": "start-the-enhance-job", "text": "Start the Enhance Job" }, { "depth": 2, "slug": "check-the-enhance-job-and-report-progress", "text": "Check the Enhance Job and Report Progress" }, { "depth": 2, "slug": "get-enhanced-file-url", "text": "Get Enhanced File URL" }, { "depth": 2, "slug": "run-the-enhance-logic", "text": "Run the Enhance Logic" }, { "depth": 2, "slug": "transcribe-with-deepgram", "text": "Transcribe With Deepgram" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": "\nYour recordings may not always be great quality - there might be a graininess to them, or background noise that interferes with what the listener is trying to focus on. While Deepgram may still perform fairly well, it's always true that better source audio results in a higher chance for accurate transcripts. For this tutorial, I'll use a low-quality audio file from the [Library of Congress](https://www.loc.gov).\n\nAn excellent tool for improving the quality of audio is [Dolby.io's Media Enhance API](https://docs.dolby.io/media-apis/reference/media-enhance-overview). With this API, all I have to do is make a `POST` request with the audio file, and Dolby.io can analyze it to remove the interfering sounds and the crackling or static you often hear with these types of recordings. I can even specify what type of content the audio is, such as an interview, podcast, or voice recording, and Dolby.io can enhance it even further for that type of content.\n\n## Before We Start\n\nBefore jumping into coding, I'll be sure to get an API key from each of the APIs I'll be using today. I'll head to [Dolby.io](https://dolby.io/signup) and then [Deepgram.com](https://console.deepgram.com/signup?jump=keys) to get keys.\n\nI'll also install the dependencies with the following command in my project directory:\n\n    npm install axios @deepgram/sdk\n\n## Create a Node.js Project\n\nI'll create an `index.js` file and require `axios` to help with making API requests:\n\n```js\nconst axios = require('axios')\n```\n\nI intend to send an audio file to Dolby.io for enhancement, wait for it to be processed, and wait for that file to come back to me. Since there will be an unknown amount of time involved in each step of the process, I need to write asynchronous functions for each step. Here are the steps:\n\n## Start the Enhance Job\n\nThe first asynchronous function will be called `startEnhanceJob`\n\n```js\nconst startEnhanceJob = async (url) => {}\n```\n\nI need to make the audio file available to Dolby.io by putting it in cloud storage. Dolby offers the option of me putting it in their temporary cloud storage, but I have to use the URL format they expect, which will start with `dlb://`. I'll write some JavaScript to create that Dolby.io URL format:\n\n```js\nconst startEnhanceJob = async (url) => {\r\n  const dlbUrl =\r\n    'dlb://out/' + url.split('/').slice(-1)[0].split('.')[0] + '.wav'\r\n}\n```\n\nThen I will make the `POST` request with the audio file to Dolby.io and receive a job ID for that enhance job (which I'll need in the next step).\n\n```js\nconst startEnhanceJob = async (url) => {\r\n  // create a dolby URL\r\n  const dlbUrl =\r\n    'dlb://out/' + url.split('/').slice(-1)[0].split('.')[0] + '.wav'\r\n\r\n  // POST request\r\n  const { data } = await axios({\r\n    method: 'post',\r\n    url: 'https://api.dolby.com/media/enhance',\r\n    headers: {\r\n      'x-api-key': 'YOUR_DOLBYIO_API_KEY',\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n    },\r\n    data: {\r\n      input: url,\r\n      output: dlbUrl,\r\n      content: { type: 'interview' },\r\n    },\r\n  })\r\n\r\n  return { jobId: data.job_id, dlbUrl }\r\n}\n```\n\nNotice that I added `content: { type: interview }` since the audio file I'm sending is an interview.\n\n## Check the Enhance Job and Report Progress\n\nIt will take some amount of time for the enhancement job to run. I need to track the progress so that I know when the file is ready. I'll write two functions in this step: `checkEnhanceJob` and `waitUntilJobCompletes`.\n\nFor `checkEnhanceJob`, I'll take the job ID that was returned from the `startEnhanceJob` function, and I'll use it to make a `GET` request to the Dolby.io Enhance API to get progress on the enhancement job:\n\n```js\nconst checkEnhanceJob = async (job_id) => {\r\n  const { data } = await axios({\r\n    method: 'GET',\r\n    url: 'https://api.dolby.com/media/enhance',\r\n    params: { job_id },\r\n    headers: {\r\n      'x-api-key': api_key,\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n    },\r\n  })\r\n\r\n  // Returns a number between 0 and 100\r\n  return data.progress\r\n}\n```\n\nThen I'll write a function that uses the `checkEnhanceJob` result in a loop to show a countdown as progress is being made on the enhance job. It will wait 2000ms (2 seconds) between each loop:\n\n```js\nconst waitUntilJobCompletes = async (job_id) => {\r\n  let progress = await checkEnhanceJob(job_id)\r\n  while (progress < 100) {\r\n    await new Promise((r) => setTimeout(r, 2000))\r\n    progress = await checkEnhanceJob(job_id)\r\n    console.log(progress)\r\n  }\r\n  return\r\n}\n```\n\n## Get Enhanced File URL\n\nOnce the enhancement of the file is complete, I need to output that new file to a URL that I can use (in this project, I'll be using it to pass on to Deepgram for transcription).\n\nI'll write a function that will make a `POST` request to put the output of the enhance job at the URL I created for temporary storage of the file. I'll also `console.log` the file URL so I can test it now and see how it sounds.\n\n```js\nconst getNewFileUrl = async (dlbUrl) => {\r\n  const { data } = await axios({\r\n    method: 'POST',\r\n    url: 'https://api.dolby.com/media/output',\r\n    data: { url: dlbUrl },\r\n    headers,\r\n  })\r\n\r\n  console.log(data.url)\r\n  return data.url\r\n}\n```\n\n## Run the Enhance Logic\n\nI wrote each step of the enhancement job, but now I need to write a main function that runs every step, i.e., every function I wrote.\n\nI also need to add the URL of the audio file I want to enhance. I've chose a file from the Library of Congress called [\"Interview with Lillie Haws, New York, New York, November 12, 2001\"](https://www.loc.gov/item/afc911000130/).\n\nHere is the `main` function:\n\n```js\nconst main = async () => {\r\n  // start enhancement of file:\r\n  const { jobId, dlbUrl } = await startEnhanceJob(\r\n    'https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3'\r\n  )\r\n\r\n  // track progress as it is processing:\r\n  await waitUntilJobCompletes(jobId)\r\n\r\n  // get the output URL:\r\n  const url = await getNewFileUrl(dlbUrl)\r\n}\r\n\r\nmain()\n```\n\nWhen it runs, I'll see the values of my loop that I printed counting up to completion of the enhancement job. And when it finishes, I'll see a very long URL that I can use to listen to my file.\n\n![A terminal showing values appearing with 2 seconds between them. The values are 0, 19, 19, 46, and 100. As soon as 100 appears, a long URL is shown.](https://res.cloudinary.com/deepgram/image/upload/v1653416323/blog/2022/05/enhance-audio-with-dolby-and-deepgram/progress_console.gif)\n\nIf I click on the link, I'm taken to the hosted audio file. It sounds so much better than the original! Now I'm ready to transcribe it with Deepgram.\n\n## Transcribe With Deepgram\n\nI'll be using Deepgram's API for transcribing [Pre-Recorded Audio](https://developers.deepgram.com/documentation/getting-started/prerecorded/). Deepgram has a Node.js SDK, so I'll require it in my `index.js` file. I'll also create a new instance of Deepgram by giving it my Deepgram API key:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\r\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\n```\n\nI will take the file URL that I received from Dolby.io and send that to Deepgram for transcription. It is the temporarily stored file that I assigned to the `url` variable in the main function (in the last section).\n\nI'll also specify that I would like Deepgram to add punctuation. I can do this by adding `{ punctuate:true }` to the request:\n\n```js\nconst response = await deepgram.transcription.preRecorded(\r\n  { url },\r\n  { punctuate: true }\r\n)\n```\n\nNow I can run the whole function, and I'll see that Deepgram transcribes the enhanced file. I'll `console.log` the response from Deepgram so I can actually see the transcription now:\n\n```js\n// main function\r\nconst main = async () => {\r\n  const { jobId, dlbUrl } = await startEnhanceJob(\r\n    'https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3'\r\n  )\r\n  await waitUntilJobCompletes(jobId)\r\n  const url = await getNewFileUrl(dlbUrl)\r\n  const response = await deepgram.transcription.preRecorded(\r\n    { url },\r\n    { punctuate: true }\r\n  )\r\n  console.log(response.results.channels[0])\r\n}\r\n\r\nmain()\n```\n\nAnd now I have a full transcript of the audio file from the Library of Congress.\n\n## Conclusion\n\nToday I used [Dolby.io](https://docs.dolby.io/) and [Deepgram](https://developers.deepgram.com/) to enhance an audio file and transcribe the speech of the interview into text. These two APIs seem like a great combination for many future projects!\n\nIf you enjoyed my post, follow me at [Twitter](https://twitter.com/sandra_rodgers_) to continue the conversation.\n\n        ", "html": '<p>Your recordings may not always be great quality - there might be a graininess to them, or background noise that interferes with what the listener is trying to focus on. While Deepgram may still perform fairly well, it\u2019s always true that better source audio results in a higher chance for accurate transcripts. For this tutorial, I\u2019ll use a low-quality audio file from the <a href="https://www.loc.gov">Library of Congress</a>.</p>\n<p>An excellent tool for improving the quality of audio is <a href="https://docs.dolby.io/media-apis/reference/media-enhance-overview">Dolby.io\u2019s Media Enhance API</a>. With this API, all I have to do is make a <code is:raw>POST</code> request with the audio file, and Dolby.io can analyze it to remove the interfering sounds and the crackling or static you often hear with these types of recordings. I can even specify what type of content the audio is, such as an interview, podcast, or voice recording, and Dolby.io can enhance it even further for that type of content.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>Before jumping into coding, I\u2019ll be sure to get an API key from each of the APIs I\u2019ll be using today. I\u2019ll head to <a href="https://dolby.io/signup">Dolby.io</a> and then <a href="https://console.deepgram.com/signup?jump=keys">Deepgram.com</a> to get keys.</p>\n<p>I\u2019ll also install the dependencies with the following command in my project directory:</p>\n<p>npm install axios @deepgram/sdk</p>\n<h2 id="create-a-nodejs-project">Create a Node.js Project</h2>\n<p>I\u2019ll create an <code is:raw>index.js</code> file and require <code is:raw>axios</code> to help with making API requests:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>I intend to send an audio file to Dolby.io for enhancement, wait for it to be processed, and wait for that file to come back to me. Since there will be an unknown amount of time involved in each step of the process, I need to write asynchronous functions for each step. Here are the steps:</p>\n<h2 id="start-the-enhance-job">Start the Enhance Job</h2>\n<p>The first asynchronous function will be called <code is:raw>startEnhanceJob</code></p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {}</span></span></code></pre>\n<p>I need to make the audio file available to Dolby.io by putting it in cloud storage. Dolby offers the option of me putting it in their temporary cloud storage, but I have to use the URL format they expect, which will start with <code is:raw>dlb://</code>. I\u2019ll write some JavaScript to create that Dolby.io URL format:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;dlb://out/&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;.wav&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then I will make the <code is:raw>POST</code> request with the audio file to Dolby.io and receive a job ID for that enhance job (which I\u2019ll need in the next step).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// create a dolby URL</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;dlb://out/&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;.wav&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// POST request</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/enhance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;x-api-key&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;YOUR_DOLBYIO_API_KEY&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      Accept: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      input: url,</span></span>\n<span class="line"><span style="color: #C9D1D9">      output: dlbUrl,</span></span>\n<span class="line"><span style="color: #C9D1D9">      content: { type: </span><span style="color: #A5D6FF">&#39;interview&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { jobId: data.job_id, dlbUrl }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Notice that I added <code is:raw>content: { type: interview }</code> since the audio file I\u2019m sending is an interview.</p>\n<h2 id="check-the-enhance-job-and-report-progress">Check the Enhance Job and Report Progress</h2>\n<p>It will take some amount of time for the enhancement job to run. I need to track the progress so that I know when the file is ready. I\u2019ll write two functions in this step: <code is:raw>checkEnhanceJob</code> and <code is:raw>waitUntilJobCompletes</code>.</p>\n<p>For <code is:raw>checkEnhanceJob</code>, I\u2019ll take the job ID that was returned from the <code is:raw>startEnhanceJob</code> function, and I\u2019ll use it to make a <code is:raw>GET</code> request to the Dolby.io Enhance API to get progress on the enhancement job:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">job_id</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/enhance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    params: { job_id },</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;x-api-key&#39;</span><span style="color: #C9D1D9">: api_key,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      Accept: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Returns a number between 0 and 100</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data.progress</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then I\u2019ll write a function that uses the <code is:raw>checkEnhanceJob</code> result in a loop to show a countdown as progress is being made on the enhance job. It will wait 2000ms (2 seconds) between each loop:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">job_id</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> progress </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9">(job_id)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> (progress </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(r, </span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">    progress </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9">(job_id)</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(progress)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="get-enhanced-file-url">Get Enhanced File URL</h2>\n<p>Once the enhancement of the file is complete, I need to output that new file to a URL that I can use (in this project, I\u2019ll be using it to pass on to Deepgram for transcription).</p>\n<p>I\u2019ll write a function that will make a <code is:raw>POST</code> request to put the output of the enhance job at the URL I created for temporary storage of the file. I\u2019ll also <code is:raw>console.log</code> the file URL so I can test it now and see how it sounds.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">dlbUrl</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/output&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    data: { url: dlbUrl },</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data.url)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data.url</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="run-the-enhance-logic">Run the Enhance Logic</h2>\n<p>I wrote each step of the enhancement job, but now I need to write a main function that runs every step, i.e., every function I wrote.</p>\n<p>I also need to add the URL of the audio file I want to enhance. I\u2019ve chose a file from the Library of Congress called <a href="https://www.loc.gov/item/afc911000130/">\u201CInterview with Lillie Haws, New York, New York, November 12, 2001\u201D</a>.</p>\n<p>Here is the <code is:raw>main</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// start enhancement of file:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">jobId</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// track progress as it is processing:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9">(jobId)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// get the output URL:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9">(dlbUrl)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>When it runs, I\u2019ll see the values of my loop that I printed counting up to completion of the enhancement job. And when it finishes, I\u2019ll see a very long URL that I can use to listen to my file.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1653416323/blog/2022/05/enhance-audio-with-dolby-and-deepgram/progress_console.gif" alt="A terminal showing values appearing with 2 seconds between them. The values are 0, 19, 19, 46, and 100. As soon as 100 appears, a long URL is shown."></p>\n<p>If I click on the link, I\u2019m taken to the hosted audio file. It sounds so much better than the original! Now I\u2019m ready to transcribe it with Deepgram.</p>\n<h2 id="transcribe-with-deepgram">Transcribe With Deepgram</h2>\n<p>I\u2019ll be using Deepgram\u2019s API for transcribing <a href="https://developers.deepgram.com/documentation/getting-started/prerecorded/">Pre-Recorded Audio</a>. Deepgram has a Node.js SDK, so I\u2019ll require it in my <code is:raw>index.js</code> file. I\u2019ll also create a new instance of Deepgram by giving it my Deepgram API key:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>I will take the file URL that I received from Dolby.io and send that to Deepgram for transcription. It is the temporarily stored file that I assigned to the <code is:raw>url</code> variable in the main function (in the last section).</p>\n<p>I\u2019ll also specify that I would like Deepgram to add punctuation. I can do this by adding <code is:raw>{ punctuate:true }</code> to the request:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  { url },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Now I can run the whole function, and I\u2019ll see that Deepgram transcribes the enhanced file. I\u2019ll <code is:raw>console.log</code> the response from Deepgram so I can actually see the transcription now:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// main function</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">jobId</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9">(jobId)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9">(dlbUrl)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    { url },</span></span>\n<span class="line"><span style="color: #C9D1D9">    { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(response.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>And now I have a full transcript of the audio file from the Library of Congress.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>Today I used <a href="https://docs.dolby.io/">Dolby.io</a> and <a href="https://developers.deepgram.com/">Deepgram</a> to enhance an audio file and transcribe the speech of the interview into text. These two APIs seem like a great combination for many future projects!</p>\n<p>If you enjoyed my post, follow me at <a href="https://twitter.com/sandra_rodgers_">Twitter</a> to continue the conversation.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/enhance-audio-with-dolby-and-deepgram/index.md" };
function rawContent() {
  return "\nYour recordings may not always be great quality - there might be a graininess to them, or background noise that interferes with what the listener is trying to focus on. While Deepgram may still perform fairly well, it's always true that better source audio results in a higher chance for accurate transcripts. For this tutorial, I'll use a low-quality audio file from the [Library of Congress](https://www.loc.gov).\n\nAn excellent tool for improving the quality of audio is [Dolby.io's Media Enhance API](https://docs.dolby.io/media-apis/reference/media-enhance-overview). With this API, all I have to do is make a `POST` request with the audio file, and Dolby.io can analyze it to remove the interfering sounds and the crackling or static you often hear with these types of recordings. I can even specify what type of content the audio is, such as an interview, podcast, or voice recording, and Dolby.io can enhance it even further for that type of content.\n\n## Before We Start\n\nBefore jumping into coding, I'll be sure to get an API key from each of the APIs I'll be using today. I'll head to [Dolby.io](https://dolby.io/signup) and then [Deepgram.com](https://console.deepgram.com/signup?jump=keys) to get keys.\n\nI'll also install the dependencies with the following command in my project directory:\n\n    npm install axios @deepgram/sdk\n\n## Create a Node.js Project\n\nI'll create an `index.js` file and require `axios` to help with making API requests:\n\n```js\nconst axios = require('axios')\n```\n\nI intend to send an audio file to Dolby.io for enhancement, wait for it to be processed, and wait for that file to come back to me. Since there will be an unknown amount of time involved in each step of the process, I need to write asynchronous functions for each step. Here are the steps:\n\n## Start the Enhance Job\n\nThe first asynchronous function will be called `startEnhanceJob`\n\n```js\nconst startEnhanceJob = async (url) => {}\n```\n\nI need to make the audio file available to Dolby.io by putting it in cloud storage. Dolby offers the option of me putting it in their temporary cloud storage, but I have to use the URL format they expect, which will start with `dlb://`. I'll write some JavaScript to create that Dolby.io URL format:\n\n```js\nconst startEnhanceJob = async (url) => {\r\n  const dlbUrl =\r\n    'dlb://out/' + url.split('/').slice(-1)[0].split('.')[0] + '.wav'\r\n}\n```\n\nThen I will make the `POST` request with the audio file to Dolby.io and receive a job ID for that enhance job (which I'll need in the next step).\n\n```js\nconst startEnhanceJob = async (url) => {\r\n  // create a dolby URL\r\n  const dlbUrl =\r\n    'dlb://out/' + url.split('/').slice(-1)[0].split('.')[0] + '.wav'\r\n\r\n  // POST request\r\n  const { data } = await axios({\r\n    method: 'post',\r\n    url: 'https://api.dolby.com/media/enhance',\r\n    headers: {\r\n      'x-api-key': 'YOUR_DOLBYIO_API_KEY',\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n    },\r\n    data: {\r\n      input: url,\r\n      output: dlbUrl,\r\n      content: { type: 'interview' },\r\n    },\r\n  })\r\n\r\n  return { jobId: data.job_id, dlbUrl }\r\n}\n```\n\nNotice that I added `content: { type: interview }` since the audio file I'm sending is an interview.\n\n## Check the Enhance Job and Report Progress\n\nIt will take some amount of time for the enhancement job to run. I need to track the progress so that I know when the file is ready. I'll write two functions in this step: `checkEnhanceJob` and `waitUntilJobCompletes`.\n\nFor `checkEnhanceJob`, I'll take the job ID that was returned from the `startEnhanceJob` function, and I'll use it to make a `GET` request to the Dolby.io Enhance API to get progress on the enhancement job:\n\n```js\nconst checkEnhanceJob = async (job_id) => {\r\n  const { data } = await axios({\r\n    method: 'GET',\r\n    url: 'https://api.dolby.com/media/enhance',\r\n    params: { job_id },\r\n    headers: {\r\n      'x-api-key': api_key,\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n    },\r\n  })\r\n\r\n  // Returns a number between 0 and 100\r\n  return data.progress\r\n}\n```\n\nThen I'll write a function that uses the `checkEnhanceJob` result in a loop to show a countdown as progress is being made on the enhance job. It will wait 2000ms (2 seconds) between each loop:\n\n```js\nconst waitUntilJobCompletes = async (job_id) => {\r\n  let progress = await checkEnhanceJob(job_id)\r\n  while (progress < 100) {\r\n    await new Promise((r) => setTimeout(r, 2000))\r\n    progress = await checkEnhanceJob(job_id)\r\n    console.log(progress)\r\n  }\r\n  return\r\n}\n```\n\n## Get Enhanced File URL\n\nOnce the enhancement of the file is complete, I need to output that new file to a URL that I can use (in this project, I'll be using it to pass on to Deepgram for transcription).\n\nI'll write a function that will make a `POST` request to put the output of the enhance job at the URL I created for temporary storage of the file. I'll also `console.log` the file URL so I can test it now and see how it sounds.\n\n```js\nconst getNewFileUrl = async (dlbUrl) => {\r\n  const { data } = await axios({\r\n    method: 'POST',\r\n    url: 'https://api.dolby.com/media/output',\r\n    data: { url: dlbUrl },\r\n    headers,\r\n  })\r\n\r\n  console.log(data.url)\r\n  return data.url\r\n}\n```\n\n## Run the Enhance Logic\n\nI wrote each step of the enhancement job, but now I need to write a main function that runs every step, i.e., every function I wrote.\n\nI also need to add the URL of the audio file I want to enhance. I've chose a file from the Library of Congress called [\"Interview with Lillie Haws, New York, New York, November 12, 2001\"](https://www.loc.gov/item/afc911000130/).\n\nHere is the `main` function:\n\n```js\nconst main = async () => {\r\n  // start enhancement of file:\r\n  const { jobId, dlbUrl } = await startEnhanceJob(\r\n    'https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3'\r\n  )\r\n\r\n  // track progress as it is processing:\r\n  await waitUntilJobCompletes(jobId)\r\n\r\n  // get the output URL:\r\n  const url = await getNewFileUrl(dlbUrl)\r\n}\r\n\r\nmain()\n```\n\nWhen it runs, I'll see the values of my loop that I printed counting up to completion of the enhancement job. And when it finishes, I'll see a very long URL that I can use to listen to my file.\n\n![A terminal showing values appearing with 2 seconds between them. The values are 0, 19, 19, 46, and 100. As soon as 100 appears, a long URL is shown.](https://res.cloudinary.com/deepgram/image/upload/v1653416323/blog/2022/05/enhance-audio-with-dolby-and-deepgram/progress_console.gif)\n\nIf I click on the link, I'm taken to the hosted audio file. It sounds so much better than the original! Now I'm ready to transcribe it with Deepgram.\n\n## Transcribe With Deepgram\n\nI'll be using Deepgram's API for transcribing [Pre-Recorded Audio](https://developers.deepgram.com/documentation/getting-started/prerecorded/). Deepgram has a Node.js SDK, so I'll require it in my `index.js` file. I'll also create a new instance of Deepgram by giving it my Deepgram API key:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\r\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\n```\n\nI will take the file URL that I received from Dolby.io and send that to Deepgram for transcription. It is the temporarily stored file that I assigned to the `url` variable in the main function (in the last section).\n\nI'll also specify that I would like Deepgram to add punctuation. I can do this by adding `{ punctuate:true }` to the request:\n\n```js\nconst response = await deepgram.transcription.preRecorded(\r\n  { url },\r\n  { punctuate: true }\r\n)\n```\n\nNow I can run the whole function, and I'll see that Deepgram transcribes the enhanced file. I'll `console.log` the response from Deepgram so I can actually see the transcription now:\n\n```js\n// main function\r\nconst main = async () => {\r\n  const { jobId, dlbUrl } = await startEnhanceJob(\r\n    'https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3'\r\n  )\r\n  await waitUntilJobCompletes(jobId)\r\n  const url = await getNewFileUrl(dlbUrl)\r\n  const response = await deepgram.transcription.preRecorded(\r\n    { url },\r\n    { punctuate: true }\r\n  )\r\n  console.log(response.results.channels[0])\r\n}\r\n\r\nmain()\n```\n\nAnd now I have a full transcript of the audio file from the Library of Congress.\n\n## Conclusion\n\nToday I used [Dolby.io](https://docs.dolby.io/) and [Deepgram](https://developers.deepgram.com/) to enhance an audio file and transcribe the speech of the interview into text. These two APIs seem like a great combination for many future projects!\n\nIf you enjoyed my post, follow me at [Twitter](https://twitter.com/sandra_rodgers_) to continue the conversation.\n\n        ";
}
function compiledContent() {
  return '<p>Your recordings may not always be great quality - there might be a graininess to them, or background noise that interferes with what the listener is trying to focus on. While Deepgram may still perform fairly well, it\u2019s always true that better source audio results in a higher chance for accurate transcripts. For this tutorial, I\u2019ll use a low-quality audio file from the <a href="https://www.loc.gov">Library of Congress</a>.</p>\n<p>An excellent tool for improving the quality of audio is <a href="https://docs.dolby.io/media-apis/reference/media-enhance-overview">Dolby.io\u2019s Media Enhance API</a>. With this API, all I have to do is make a <code is:raw>POST</code> request with the audio file, and Dolby.io can analyze it to remove the interfering sounds and the crackling or static you often hear with these types of recordings. I can even specify what type of content the audio is, such as an interview, podcast, or voice recording, and Dolby.io can enhance it even further for that type of content.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>Before jumping into coding, I\u2019ll be sure to get an API key from each of the APIs I\u2019ll be using today. I\u2019ll head to <a href="https://dolby.io/signup">Dolby.io</a> and then <a href="https://console.deepgram.com/signup?jump=keys">Deepgram.com</a> to get keys.</p>\n<p>I\u2019ll also install the dependencies with the following command in my project directory:</p>\n<p>npm install axios @deepgram/sdk</p>\n<h2 id="create-a-nodejs-project">Create a Node.js Project</h2>\n<p>I\u2019ll create an <code is:raw>index.js</code> file and require <code is:raw>axios</code> to help with making API requests:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>I intend to send an audio file to Dolby.io for enhancement, wait for it to be processed, and wait for that file to come back to me. Since there will be an unknown amount of time involved in each step of the process, I need to write asynchronous functions for each step. Here are the steps:</p>\n<h2 id="start-the-enhance-job">Start the Enhance Job</h2>\n<p>The first asynchronous function will be called <code is:raw>startEnhanceJob</code></p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {}</span></span></code></pre>\n<p>I need to make the audio file available to Dolby.io by putting it in cloud storage. Dolby offers the option of me putting it in their temporary cloud storage, but I have to use the URL format they expect, which will start with <code is:raw>dlb://</code>. I\u2019ll write some JavaScript to create that Dolby.io URL format:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;dlb://out/&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;.wav&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then I will make the <code is:raw>POST</code> request with the audio file to Dolby.io and receive a job ID for that enhance job (which I\u2019ll need in the next step).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// create a dolby URL</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;dlb://out/&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;.wav&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// POST request</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/enhance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;x-api-key&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;YOUR_DOLBYIO_API_KEY&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      Accept: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      input: url,</span></span>\n<span class="line"><span style="color: #C9D1D9">      output: dlbUrl,</span></span>\n<span class="line"><span style="color: #C9D1D9">      content: { type: </span><span style="color: #A5D6FF">&#39;interview&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { jobId: data.job_id, dlbUrl }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Notice that I added <code is:raw>content: { type: interview }</code> since the audio file I\u2019m sending is an interview.</p>\n<h2 id="check-the-enhance-job-and-report-progress">Check the Enhance Job and Report Progress</h2>\n<p>It will take some amount of time for the enhancement job to run. I need to track the progress so that I know when the file is ready. I\u2019ll write two functions in this step: <code is:raw>checkEnhanceJob</code> and <code is:raw>waitUntilJobCompletes</code>.</p>\n<p>For <code is:raw>checkEnhanceJob</code>, I\u2019ll take the job ID that was returned from the <code is:raw>startEnhanceJob</code> function, and I\u2019ll use it to make a <code is:raw>GET</code> request to the Dolby.io Enhance API to get progress on the enhancement job:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">job_id</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/enhance&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    params: { job_id },</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;x-api-key&#39;</span><span style="color: #C9D1D9">: api_key,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      Accept: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Returns a number between 0 and 100</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data.progress</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then I\u2019ll write a function that uses the <code is:raw>checkEnhanceJob</code> result in a loop to show a countdown as progress is being made on the enhance job. It will wait 2000ms (2 seconds) between each loop:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">job_id</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> progress </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9">(job_id)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> (progress </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(r, </span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">    progress </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9">(job_id)</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(progress)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="get-enhanced-file-url">Get Enhanced File URL</h2>\n<p>Once the enhancement of the file is complete, I need to output that new file to a URL that I can use (in this project, I\u2019ll be using it to pass on to Deepgram for transcription).</p>\n<p>I\u2019ll write a function that will make a <code is:raw>POST</code> request to put the output of the enhance job at the URL I created for temporary storage of the file. I\u2019ll also <code is:raw>console.log</code> the file URL so I can test it now and see how it sounds.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">dlbUrl</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/output&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    data: { url: dlbUrl },</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data.url)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data.url</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="run-the-enhance-logic">Run the Enhance Logic</h2>\n<p>I wrote each step of the enhancement job, but now I need to write a main function that runs every step, i.e., every function I wrote.</p>\n<p>I also need to add the URL of the audio file I want to enhance. I\u2019ve chose a file from the Library of Congress called <a href="https://www.loc.gov/item/afc911000130/">\u201CInterview with Lillie Haws, New York, New York, November 12, 2001\u201D</a>.</p>\n<p>Here is the <code is:raw>main</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// start enhancement of file:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">jobId</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// track progress as it is processing:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9">(jobId)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// get the output URL:</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9">(dlbUrl)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>When it runs, I\u2019ll see the values of my loop that I printed counting up to completion of the enhancement job. And when it finishes, I\u2019ll see a very long URL that I can use to listen to my file.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1653416323/blog/2022/05/enhance-audio-with-dolby-and-deepgram/progress_console.gif" alt="A terminal showing values appearing with 2 seconds between them. The values are 0, 19, 19, 46, and 100. As soon as 100 appears, a long URL is shown."></p>\n<p>If I click on the link, I\u2019m taken to the hosted audio file. It sounds so much better than the original! Now I\u2019m ready to transcribe it with Deepgram.</p>\n<h2 id="transcribe-with-deepgram">Transcribe With Deepgram</h2>\n<p>I\u2019ll be using Deepgram\u2019s API for transcribing <a href="https://developers.deepgram.com/documentation/getting-started/prerecorded/">Pre-Recorded Audio</a>. Deepgram has a Node.js SDK, so I\u2019ll require it in my <code is:raw>index.js</code> file. I\u2019ll also create a new instance of Deepgram by giving it my Deepgram API key:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>I will take the file URL that I received from Dolby.io and send that to Deepgram for transcription. It is the temporarily stored file that I assigned to the <code is:raw>url</code> variable in the main function (in the last section).</p>\n<p>I\u2019ll also specify that I would like Deepgram to add punctuation. I can do this by adding <code is:raw>{ punctuate:true }</code> to the request:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  { url },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Now I can run the whole function, and I\u2019ll see that Deepgram transcribes the enhanced file. I\u2019ll <code is:raw>console.log</code> the response from Deepgram so I can actually see the transcription now:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// main function</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">jobId</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9">(jobId)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9">(dlbUrl)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    { url },</span></span>\n<span class="line"><span style="color: #C9D1D9">    { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(response.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>And now I have a full transcript of the audio file from the Library of Congress.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>Today I used <a href="https://docs.dolby.io/">Dolby.io</a> and <a href="https://developers.deepgram.com/">Deepgram</a> to enhance an audio file and transcribe the speech of the interview into text. These two APIs seem like a great combination for many future projects!</p>\n<p>If you enjoyed my post, follow me at <a href="https://twitter.com/sandra_rodgers_">Twitter</a> to continue the conversation.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/enhance-audio-with-dolby-and-deepgram/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Your recordings may not always be great quality - there might be a graininess to them, or background noise that interferes with what the listener is trying to focus on. While Deepgram may still perform fairly well, it’s always true that better source audio results in a higher chance for accurate transcripts. For this tutorial, I’ll use a low-quality audio file from the <a href="https://www.loc.gov">Library of Congress</a>.</p>
<p>An excellent tool for improving the quality of audio is <a href="https://docs.dolby.io/media-apis/reference/media-enhance-overview">Dolby.io’s Media Enhance API</a>. With this API, all I have to do is make a <code>POST</code> request with the audio file, and Dolby.io can analyze it to remove the interfering sounds and the crackling or static you often hear with these types of recordings. I can even specify what type of content the audio is, such as an interview, podcast, or voice recording, and Dolby.io can enhance it even further for that type of content.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>Before jumping into coding, I’ll be sure to get an API key from each of the APIs I’ll be using today. I’ll head to <a href="https://dolby.io/signup">Dolby.io</a> and then <a href="https://console.deepgram.com/signup?jump=keys">Deepgram.com</a> to get keys.</p>
<p>I’ll also install the dependencies with the following command in my project directory:</p>
<p>npm install axios @deepgram/sdk</p>
<h2 id="create-a-nodejs-project">Create a Node.js Project</h2>
<p>I’ll create an <code>index.js</code> file and require <code>axios</code> to help with making API requests:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>I intend to send an audio file to Dolby.io for enhancement, wait for it to be processed, and wait for that file to come back to me. Since there will be an unknown amount of time involved in each step of the process, I need to write asynchronous functions for each step. Here are the steps:</p>
<h2 id="start-the-enhance-job">Start the Enhance Job</h2>
<p>The first asynchronous function will be called <code>startEnhanceJob</code></p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {}</span></span></code></pre>
<p>I need to make the audio file available to Dolby.io by putting it in cloud storage. Dolby offers the option of me putting it in their temporary cloud storage, but I have to use the URL format they expect, which will start with <code>dlb://</code>. I’ll write some JavaScript to create that Dolby.io URL format:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;dlb://out/&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;.wav&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Then I will make the <code>POST</code> request with the audio file to Dolby.io and receive a job ID for that enhance job (which I’ll need in the next step).</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// create a dolby URL</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;dlb://out/&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;.&#39;</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;.wav&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// POST request</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/enhance&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;x-api-key&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;YOUR_DOLBYIO_API_KEY&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      Accept: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">    data: {</span></span>
<span class="line"><span style="color: #C9D1D9">      input: url,</span></span>
<span class="line"><span style="color: #C9D1D9">      output: dlbUrl,</span></span>
<span class="line"><span style="color: #C9D1D9">      content: { type: </span><span style="color: #A5D6FF">&#39;interview&#39;</span><span style="color: #C9D1D9"> },</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { jobId: data.job_id, dlbUrl }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Notice that I added <code>content: { type: interview }</code> since the audio file I’m sending is an interview.</p>
<h2 id="check-the-enhance-job-and-report-progress">Check the Enhance Job and Report Progress</h2>
<p>It will take some amount of time for the enhancement job to run. I need to track the progress so that I know when the file is ready. I’ll write two functions in this step: <code>checkEnhanceJob</code> and <code>waitUntilJobCompletes</code>.</p>
<p>For <code>checkEnhanceJob</code>, I’ll take the job ID that was returned from the <code>startEnhanceJob</code> function, and I’ll use it to make a <code>GET</code> request to the Dolby.io Enhance API to get progress on the enhancement job:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">job_id</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/enhance&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    params: { job_id },</span></span>
<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;x-api-key&#39;</span><span style="color: #C9D1D9">: api_key,</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      Accept: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Returns a number between 0 and 100</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data.progress</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Then I’ll write a function that uses the <code>checkEnhanceJob</code> result in a loop to show a countdown as progress is being made on the enhance job. It will wait 2000ms (2 seconds) between each loop:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">job_id</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> progress </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9">(job_id)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> (progress </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(r, </span><span style="color: #79C0FF">2000</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    progress </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkEnhanceJob</span><span style="color: #C9D1D9">(job_id)</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(progress)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h2 id="get-enhanced-file-url">Get Enhanced File URL</h2>
<p>Once the enhancement of the file is complete, I need to output that new file to a URL that I can use (in this project, I’ll be using it to pass on to Deepgram for transcription).</p>
<p>I’ll write a function that will make a <code>POST</code> request to put the output of the enhance job at the URL I created for temporary storage of the file. I’ll also <code>console.log</code> the file URL so I can test it now and see how it sounds.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">dlbUrl</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://api.dolby.com/media/output&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    data: { url: dlbUrl },</span></span>
<span class="line"><span style="color: #C9D1D9">    headers,</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data.url)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data.url</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h2 id="run-the-enhance-logic">Run the Enhance Logic</h2>
<p>I wrote each step of the enhancement job, but now I need to write a main function that runs every step, i.e., every function I wrote.</p>
<p>I also need to add the URL of the audio file I want to enhance. I’ve chose a file from the Library of Congress called <a href="https://www.loc.gov/item/afc911000130/">“Interview with Lillie Haws, New York, New York, November 12, 2001”</a>.</p>
<p>Here is the <code>main</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// start enhancement of file:</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">jobId</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// track progress as it is processing:</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9">(jobId)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// get the output URL:</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9">(dlbUrl)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>
<p>When it runs, I’ll see the values of my loop that I printed counting up to completion of the enhancement job. And when it finishes, I’ll see a very long URL that I can use to listen to my file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1653416323/blog/2022/05/enhance-audio-with-dolby-and-deepgram/progress_console.gif" alt="A terminal showing values appearing with 2 seconds between them. The values are 0, 19, 19, 46, and 100. As soon as 100 appears, a long URL is shown."></p>
<p>If I click on the link, I’m taken to the hosted audio file. It sounds so much better than the original! Now I’m ready to transcribe it with Deepgram.</p>
<h2 id="transcribe-with-deepgram">Transcribe With Deepgram</h2>
<p>I’ll be using Deepgram’s API for transcribing <a href="https://developers.deepgram.com/documentation/getting-started/prerecorded/">Pre-Recorded Audio</a>. Deepgram has a Node.js SDK, so I’ll require it in my <code>index.js</code> file. I’ll also create a new instance of Deepgram by giving it my Deepgram API key:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>I will take the file URL that I received from Dolby.io and send that to Deepgram for transcription. It is the temporarily stored file that I assigned to the <code>url</code> variable in the main function (in the last section).</p>
<p>I’ll also specify that I would like Deepgram to add punctuation. I can do this by adding <code>{ punctuate:true }</code> to the request:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">  { url },</span></span>
<span class="line"><span style="color: #C9D1D9">  { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Now I can run the whole function, and I’ll see that Deepgram transcribes the enhanced file. I’ll <code>console.log</code> the response from Deepgram so I can actually see the transcription now:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// main function</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">jobId</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">dlbUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">startEnhanceJob</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;https://tile.loc.gov/storage-services/media/afc/911/afc2001015_sr298a01.mp3&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  )</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">waitUntilJobCompletes</span><span style="color: #C9D1D9">(jobId)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getNewFileUrl</span><span style="color: #C9D1D9">(dlbUrl)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    { url },</span></span>
<span class="line"><span style="color: #C9D1D9">    { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">  )</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(response.results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">()</span></span></code></pre>
<p>And now I have a full transcript of the audio file from the Library of Congress.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Today I used <a href="https://docs.dolby.io/">Dolby.io</a> and <a href="https://developers.deepgram.com/">Deepgram</a> to enhance an audio file and transcribe the speech of the interview into text. These two APIs seem like a great combination for many future projects!</p>
<p>If you enjoyed my post, follow me at <a href="https://twitter.com/sandra_rodgers_">Twitter</a> to continue the conversation.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/enhance-audio-with-dolby-and-deepgram/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
