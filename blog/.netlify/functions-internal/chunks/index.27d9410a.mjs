import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 2, "slug": "the-code", "text": "The Code" }], "source": "\r\nImagine having the ability to transcribe voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Vonage with Deepgram.\r\n\r\nWith Vonage, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.\r\n\r\nHere\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.\r\n\r\n![Deepgram voice-to-text with Vonage](https://res.cloudinary.com/deepgram/image/upload/v1651778132/blog/2022/05/deepgram-with-vonage/deepgram-vonage-transcript.png)\r\n\r\n## Getting Started\r\n\r\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to the [Deepgram console](https://console.deepgram.com/signup?jump=keys). We'll make sure to copy it and keep it in a safe place, as we won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\r\n\r\nThen we'll make sure to go to [Vonage](https://dashboard.nexmo.com/sign-up?icid=tryitfree_api-developer-adp_nexmodashbdfreetrialsignup_nav#_ga=2.180701287.1184321093.1651679801-1860855498.1651679801) and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities of type mobile.\r\n\r\nWe\u2019ll also need two phones to make the outgoing call and another to receive a call.\r\n\r\nIn the project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in the application. Ngrok will forward requests to the application that is running locally. We can download it [here](https://ngrok.com/).\r\n\r\nNext, we'll make a directory anywhere we\u2019d like.\r\n```bash\r\nmkdir deepgram-vonage\r\n```\r\nThen we'll change into that directory so we can start adding things to it.\r\n```bash\r\ncd deepgram-vonage\r\n```\r\nWe\u2019ll also need to set up a virtual environment to hold the project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one. It\u2019s recommended in Python to use a virtual environment so the project can be installed inside a container rather than installing it system-wide.\r\n\r\nWe need to ensure the virtual environment is activated because we\u2019ll install dependencies inside. If the virtual environment is named `venv`, then we'll need to activate it.\r\n```bash\r\nsource venv/bin/activate\r\n```\r\nWe'll install the dependencies for the project by running the below `pip` installs from the terminal inside the virtual environment.\r\n```bash\r\npip install deepgram-sdk\r\npip install vonage\r\npip install python-dotenv\r\npip install Flask\r\npip install 'flask[async]'\r\npip install pysondb\r\n```\r\nWe now can open up an editor and create a file called `deepgram-vonage-call.py`.\r\n\r\n## The Code\r\n\r\nNow to the fun part! Open the script called `deepgram-vonage-call.py` and add the following code to make sure the Flask application runs without errors:\r\n\r\n```python\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.get(\"/\")\r\ndef hello():\r\n    return \"Hello World!\"\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(port=5000)\r\n```\r\n\r\nWe'll run the Flask application by typing this into the terminal `python deepgram-vonage-call.py`.\r\n\r\nThen we'll pull up the browser window by going to `http://127.0.0.1:5000/` and we should see the text `Hello World`.\r\n\r\nAt the same time the application is running, we'll open a new terminal window and type:\r\n```bash\r\nngrok http 127.0.0.1:5000\r\n```\r\nHere's a snapshot of the terminal running with ngrok:\r\n\r\n![ngrok terminal with python flask](https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/ngrok-terminal-with-python-flask-deepgram.png)\r\n\r\nWe'll create a Vonage application in the Vonage API Dashboard by going to `Applications -> Create a new application`.\r\n\r\nWe'll give the application a friendly name that's meaningful and easy to remember. We'll call it `Deepgram Vonage`.\r\n\r\nWe'll also need to generate a private key by clicking the button `Generate public and private key`. Add\r\nthe private key to the same level directory as the `python deepgram-vonage-call.py` file.\r\n\r\nNext, under the section `Capabilities` toggle on the `Voice` option. We'll add the following webhooks, with the ngrok url\r\nand endpoints to the `Answer URL` and the `Event URL`. Please note that everyone has a different ngrok url.\r\n\r\n```\r\nhttp://a11f-104-6-9-133.ngrok.io/webhooks/answer\r\nhttp://a11f-104-6-9-133.ngrok.io/webhooks/event\r\n\r\n```\r\n\r\n![vonage webhooks](https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/vonage-answer-event-webhooks.png)\r\n\r\nWe\u2019ll implement the endpoints in a few.\r\n\r\nLeave both terminals running as those are needed to run the application and receive the phone call.\r\n\r\nThen we'll store the environment variables in a `.env` file with the following:\r\n```bash\r\nDEEPGRAM_API_KEY=['DEEPGRAM_API_KEY']\r\nVONAGE_NUMBER=['VONAGE_NUMBER']\r\nRECIPIENT_NUMBER=['RECIPIENT_NUMBER']\r\nVONAGE_APPLICATION_ID=['VONAGE_APPLICATION_ID']\r\nVONAGE_APPLICATION_PRIVATE_KEY_PATH=['PATH_TO_PRIVATE_KEY']\r\n```\r\nReplace `DEEPGRAM_API_KEY` with the API key we received from signing up in the Deepgram console, and the `RECIPIENT_NUMBER` is the phone number we would like to receive the call.\r\n\r\nWe'll replace the code in `deepgram-vonage-call.py` with the following:\r\n\r\n```python\r\nimport json\r\nimport os\r\nimport vonage\r\nfrom flask import Flask, request, jsonify, render_template\r\nfrom deepgram import Deepgram\r\nfrom pysondb import db\r\nfrom dotenv import load_dotenv\r\n\r\nload_dotenv()\r\n\r\napp = Flask(__name__)\r\n\r\ncalls_db=db.getDb('calls.json')\r\n\r\nRECIPIENT_NUMBER = os.getenv(\"RECIPIENT_NUMBER\")\r\nVONAGE_NUMBER = os.getenv(\"VONAGE_NUMBER\")\r\nVONAGE_APPLICATION_ID = os.getenv(\"VONAGE_APPLICATION_ID\")\r\nVONAGE_APPLICATION_PRIVATE_KEY_PATH = os.getenv(\"VONAGE_APPLICATION_PRIVATE_KEY_PATH\")\r\nDEEPGRAM_API_KEY = os.getenv(\"DEEPGRAM_API_KEY\")\r\n\r\nclient = vonage.Client(\r\n    application_id=VONAGE_APPLICATION_ID,\r\n    private_key=VONAGE_APPLICATION_PRIVATE_KEY_PATH,\r\n)\r\n\r\n@app.get(\"/webhooks/answer\")\r\ndef answer_call():\r\n    ncco = [\r\n        {\r\n            \"action\": \"talk\",\r\n            \"text\": \"Hi, we will shortly forward your call. This call is recorded for quality assurance purposes.\"\r\n        },\r\n        {\r\n            \"action\": \"record\",\r\n            \"eventUrl\": [\"http://a11f-104-6-9-133.ngrok.io/webhooks/recordings\"]\r\n        },\r\n        {\r\n            \"action\": \"connect\",\r\n            \"eventUrl\": [\"http://a11f-104-6-9-133.ngrok.io/webhooks/event\"],\r\n            \"from\": VONAGE_NUMBER,\r\n            \"endpoint\": [\r\n                {\r\n                    \"type\": \"phone\",\r\n                    \"number\": RECIPIENT_NUMBER\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n    return jsonify(ncco)\r\n```\r\n\r\nHere we are importing the libraries and creating a new instance of a Flask application. Then we create a new database named `calls`. We are using a lightweight JSON database called [PysonDB](https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija).\r\n\r\nWe create the `/webhooks/answer` endpoint, which allows us to make a voice call, connect to the Vonage number and record the call.\r\n\r\nNext, in the `/webhooks/recordings` route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of the call and using speech recognition to transcribe the audio. We check if `results` is in the response and format it by using a list comprehension and storing the results in `utterances`. We then add the `utterances` to the `calls` database. We return an empty dictionary in the `/webhooks/event` endpoint.\r\n\r\n```python\r\n@app.post(\"/webhooks/recordings\")\r\nasync def recordings():\r\n    print(\"recordings endpoint\")\r\n    deepgram = Deepgram(DEEPGRAM_API_KEY)\r\n    data = request.get_json()\r\n\r\n    response = client.get_recording(data['recording_url'])\r\n\r\n    source = {'buffer': response, 'mimetype': 'audio/mp3'}\r\n    transcript_data = await deepgram.transcription.prerecorded(source, {'punctuate': True,\r\n    'utterances': True,\r\n       'model': 'phonecall',\r\n        'multichannel': True \r\n})\r\n\r\n    if 'results' in transcript_data:\r\n        utterances = [\r\n            {\r\n                'channel': utterance['channel'],\r\n                'transcript': utterance['transcript']\r\n            } for utterance in transcript_data['results']['utterances']\r\n        ]\r\n\r\n        calls_db.addMany(utterances)\r\n\r\n        return json.dumps(utterances, indent=4)\r\n\r\n    return \"webhook received\"\r\n\r\n\r\n@app.get(\"/webhooks/event\")\r\ndef on_event():\r\n    return jsonify({})\r\n```\r\n\r\nWe can see how the utterances will look after they\u2019re formatted:\r\n```\r\n    [{'channel': 0, 'transcript': 'Hello?', 'id': 288397603074461838},\r\n    {'channel': 1, 'transcript': 'Hey. How's it going?', 'id': 109089630999017748},\r\n    {'channel': 0, 'transcript': 'Thank you for using Deepgram.', 'id': 124620676610936565},\r\n    {'channel': 1, 'transcript': 'Have a good day.', 'id': 182036969834868158}]\r\n```\r\nLastly, we'll add the `/transcribe` route and a templates folder with an `index.html` file that will display the phone speech-to-text transcript.\r\n\r\nIn the Python file, we'll add the following code to get the voice-to-text transcript from the database and render them in the HTML template.\r\n\r\n```python\r\n@app.get(\"/transcribe\")\r\ndef transcribe_call():\r\n    context = calls_db.getAll()\r\n    return render_template(\"index.html\", context=context )\r\n\r\nif __name__ == '__main__':\r\n    app.run(port=5000)\r\n```\r\n\r\nWe'll create a folder in the project directory called `templates` and add an `index.html` file. In that file, we'll add the following HTML and Jinja code:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Transcript</title>\r\n  </head>\r\n  <body>\r\n    {% for c in context %} {{ c.transcript }} <br />\r\n    {% endfor %}\r\n  </body>\r\n</html>\r\n```\r\n\r\nThen we'll loop through every transcript and display it on the screen.\r\n\r\nFinally, we'll try making a phone call and using the non-Vonage phone to initiate a phone conversation with the phone number we provided in the environment variable `VONAGE_NUMBER`. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in the browser when we navigate to `http://127.0.0.1:5000/transcribe`.\r\n\r\nCongratulations on building a speech-to-text Python project with Vonage and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ", "html": '<p>Imagine having the ability to transcribe voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Vonage with Deepgram.</p>\n<p>With Vonage, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.</p>\n<p>Here\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651778132/blog/2022/05/deepgram-with-vonage/deepgram-vonage-transcript.png" alt="Deepgram voice-to-text with Vonage"></p>\n<h2 id="getting-started">Getting Started</h2>\n<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to the <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. We\u2019ll make sure to copy it and keep it in a safe place, as we won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>\n<p>Then we\u2019ll make sure to go to <a href="https://dashboard.nexmo.com/sign-up?icid=tryitfree_api-developer-adp_nexmodashbdfreetrialsignup_nav#_ga=2.180701287.1184321093.1651679801-1860855498.1651679801">Vonage</a> and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities of type mobile.</p>\n<p>We\u2019ll also need two phones to make the outgoing call and another to receive a call.</p>\n<p>In the project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in the application. Ngrok will forward requests to the application that is running locally. We can download it <a href="https://ngrok.com/">here</a>.</p>\n<p>Next, we\u2019ll make a directory anywhere we\u2019d like.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mkdir deepgram-vonage</span></span></code></pre>\n<p>Then we\u2019ll change into that directory so we can start adding things to it.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> deepgram-vonage</span></span></code></pre>\n<p>We\u2019ll also need to set up a virtual environment to hold the project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one. It\u2019s recommended in Python to use a virtual environment so the project can be installed inside a container rather than installing it system-wide.</p>\n<p>We need to ensure the virtual environment is activated because we\u2019ll install dependencies inside. If the virtual environment is named <code is:raw>venv</code>, then we\u2019ll need to activate it.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> venv/bin/activate</span></span></code></pre>\n<p>We\u2019ll install the dependencies for the project by running the below <code is:raw>pip</code> installs from the terminal inside the virtual environment.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">pip install deepgram-sdk</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install vonage</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install python-dotenv</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install Flask</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install </span><span style="color: #A5D6FF">&#39;flask[async]&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install pysondb</span></span></code></pre>\n<p>We now can open up an editor and create a file called <code is:raw>deepgram-vonage-call.py</code>.</p>\n<h2 id="the-code">The Code</h2>\n<p>Now to the fun part! Open the script called <code is:raw>deepgram-vonage-call.py</code> and add the following code to make sure the Flask application runs without errors:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">hello</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello World!&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    app.run(</span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>We\u2019ll run the Flask application by typing this into the terminal <code is:raw>python deepgram-vonage-call.py</code>.</p>\n<p>Then we\u2019ll pull up the browser window by going to <code is:raw>http://127.0.0.1:5000/</code> and we should see the text <code is:raw>Hello World</code>.</p>\n<p>At the same time the application is running, we\u2019ll open a new terminal window and type:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">ngrok http 127.0.0.1:5000</span></span></code></pre>\n<p>Here\u2019s a snapshot of the terminal running with ngrok:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/ngrok-terminal-with-python-flask-deepgram.png" alt="ngrok terminal with python flask"></p>\n<p>We\u2019ll create a Vonage application in the Vonage API Dashboard by going to <code is:raw>Applications -&gt; Create a new application</code>.</p>\n<p>We\u2019ll give the application a friendly name that\u2019s meaningful and easy to remember. We\u2019ll call it <code is:raw>Deepgram Vonage</code>.</p>\n<p>We\u2019ll also need to generate a private key by clicking the button <code is:raw>Generate public and private key</code>. Add\r\nthe private key to the same level directory as the <code is:raw>python deepgram-vonage-call.py</code> file.</p>\n<p>Next, under the section <code is:raw>Capabilities</code> toggle on the <code is:raw>Voice</code> option. We\u2019ll add the following webhooks, with the ngrok url\r\nand endpoints to the <code is:raw>Answer URL</code> and the <code is:raw>Event URL</code>. Please note that everyone has a different ngrok url.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">http://a11f-104-6-9-133.ngrok.io/webhooks/answer</span></span>\n<span class="line"><span style="color: #c9d1d9">http://a11f-104-6-9-133.ngrok.io/webhooks/event</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/vonage-answer-event-webhooks.png" alt="vonage webhooks"></p>\n<p>We\u2019ll implement the endpoints in a few.</p>\n<p>Leave both terminals running as those are needed to run the application and receive the phone call.</p>\n<p>Then we\u2019ll store the environment variables in a <code is:raw>.env</code> file with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">DEEPGRAM_API_KEY=[</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">VONAGE_NUMBER=[</span><span style="color: #A5D6FF">&#39;VONAGE_NUMBER&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">RECIPIENT_NUMBER=[</span><span style="color: #A5D6FF">&#39;RECIPIENT_NUMBER&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">VONAGE_APPLICATION_ID=[</span><span style="color: #A5D6FF">&#39;VONAGE_APPLICATION_ID&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">VONAGE_APPLICATION_PRIVATE_KEY_PATH=[</span><span style="color: #A5D6FF">&#39;PATH_TO_PRIVATE_KEY&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Replace <code is:raw>DEEPGRAM_API_KEY</code> with the API key we received from signing up in the Deepgram console, and the <code is:raw>RECIPIENT_NUMBER</code> is the phone number we would like to receive the call.</p>\n<p>We\u2019ll replace the code in <code is:raw>deepgram-vonage-call.py</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> vonage</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, request, jsonify, render_template</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pysondb </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> db</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">calls_db</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">db.getDb(</span><span style="color: #A5D6FF">&#39;calls.json&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">RECIPIENT_NUMBER</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;RECIPIENT_NUMBER&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">VONAGE_NUMBER</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_NUMBER&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">VONAGE_APPLICATION_ID</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_APPLICATION_ID&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">VONAGE_APPLICATION_PRIVATE_KEY_PATH</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_APPLICATION_PRIVATE_KEY_PATH&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> vonage.Client(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">application_id</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">VONAGE_APPLICATION_ID</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">private_key</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">VONAGE_APPLICATION_PRIVATE_KEY_PATH</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/answer&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">answer_call</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    ncco </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;talk&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hi, we will shortly forward your call. This call is recorded for quality assurance purposes.&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;record&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;eventUrl&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;http://a11f-104-6-9-133.ngrok.io/webhooks/recordings&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;connect&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;eventUrl&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;http://a11f-104-6-9-133.ngrok.io/webhooks/event&quot;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;from&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">VONAGE_NUMBER</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;endpoint&quot;</span><span style="color: #C9D1D9">: [</span></span>\n<span class="line"><span style="color: #C9D1D9">                {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;phone&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;number&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">RECIPIENT_NUMBER</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"><span style="color: #C9D1D9">            ]</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    ]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> jsonify(ncco)</span></span></code></pre>\n<p>Here we are importing the libraries and creating a new instance of a Flask application. Then we create a new database named <code is:raw>calls</code>. We are using a lightweight JSON database called <a href="https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija">PysonDB</a>.</p>\n<p>We create the <code is:raw>/webhooks/answer</code> endpoint, which allows us to make a voice call, connect to the Vonage number and record the call.</p>\n<p>Next, in the <code is:raw>/webhooks/recordings</code> route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of the call and using speech recognition to transcribe the audio. We check if <code is:raw>results</code> is in the response and format it by using a list comprehension and storing the results in <code is:raw>utterances</code>. We then add the <code is:raw>utterances</code> to the <code is:raw>calls</code> database. We return an empty dictionary in the <code is:raw>/webhooks/event</code> endpoint.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/recordings&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recordings</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;recordings endpoint&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.get_json()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> client.get_recording(data[</span><span style="color: #A5D6FF">&#39;recording_url&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: response, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcript_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #A5D6FF">&#39;model&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;multichannel&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> </span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>\n<span class="line"><span style="color: #C9D1D9">        utterances </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">            {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">            } </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">        ]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        calls_db.addMany(utterances)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> json.dumps(utterances, </span><span style="color: #FFA657">indent</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;webhook received&quot;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/event&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">on_event</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> jsonify({})</span></span></code></pre>\n<p>We can see how the utterances will look after they\u2019re formatted:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    [{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 288397603074461838},</span></span>\n<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Hey. How&#39;s it going?&#39;, &#39;id&#39;: 109089630999017748},</span></span>\n<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Thank you for using Deepgram.&#39;, &#39;id&#39;: 124620676610936565},</span></span>\n<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Have a good day.&#39;, &#39;id&#39;: 182036969834868158}]</span></span></code></pre>\n<p>Lastly, we\u2019ll add the <code is:raw>/transcribe</code> route and a templates folder with an <code is:raw>index.html</code> file that will display the phone speech-to-text transcript.</p>\n<p>In the Python file, we\u2019ll add the following code to get the voice-to-text transcript from the database and render them in the HTML template.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/transcribe&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribe_call</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    context </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> calls_db.getAll()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&quot;index.html&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">context )</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    app.run(</span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>We\u2019ll create a folder in the project directory called <code is:raw>templates</code> and add an <code is:raw>index.html</code> file. In that file, we\u2019ll add the following HTML and Jinja code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Transcript&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% for c in context %} {{ c.transcript }} &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Then we\u2019ll loop through every transcript and display it on the screen.</p>\n<p>Finally, we\u2019ll try making a phone call and using the non-Vonage phone to initiate a phone conversation with the phone number we provided in the environment variable <code is:raw>VONAGE_NUMBER</code>. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in the browser when we navigate to <code is:raw>http://127.0.0.1:5000/transcribe</code>.</p>\n<p>Congratulations on building a speech-to-text Python project with Vonage and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Speech Recognition with Vonage and Python", "description": "Use Deepgram's speech-to-text features with Python and Vonage's API to transcribe real-time audio such as incoming phone calls.", "date": "2022-05-09T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1651757346/blog/2022/05/deepgram-with-vonage/Speech-Analytics-Real-Time-Audio-w-Vonage-Python%402x.jpg", "authors": ["tonya-sims"], "category": "tutorial", "tags": ["python", "vonage"], "seo": { "title": "Speech Recognition with Vonage and Python", "description": "Use Deepgram's speech-to-text features with Python and Vonage's API to transcribe real-time audio such as incoming phone calls." }, "shorturls": { "share": "https://dpgr.am/ef1d65f", "twitter": "https://dpgr.am/f818563", "linkedin": "https://dpgr.am/d1c4cf8", "reddit": "https://dpgr.am/a051411", "facebook": "https://dpgr.am/15a2bac" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454085/blog/deepgram-with-vonage/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 2, "slug": "the-code", "text": "The Code" }], "source": "\r\nImagine having the ability to transcribe voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Vonage with Deepgram.\r\n\r\nWith Vonage, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.\r\n\r\nHere\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.\r\n\r\n![Deepgram voice-to-text with Vonage](https://res.cloudinary.com/deepgram/image/upload/v1651778132/blog/2022/05/deepgram-with-vonage/deepgram-vonage-transcript.png)\r\n\r\n## Getting Started\r\n\r\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to the [Deepgram console](https://console.deepgram.com/signup?jump=keys). We'll make sure to copy it and keep it in a safe place, as we won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\r\n\r\nThen we'll make sure to go to [Vonage](https://dashboard.nexmo.com/sign-up?icid=tryitfree_api-developer-adp_nexmodashbdfreetrialsignup_nav#_ga=2.180701287.1184321093.1651679801-1860855498.1651679801) and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities of type mobile.\r\n\r\nWe\u2019ll also need two phones to make the outgoing call and another to receive a call.\r\n\r\nIn the project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in the application. Ngrok will forward requests to the application that is running locally. We can download it [here](https://ngrok.com/).\r\n\r\nNext, we'll make a directory anywhere we\u2019d like.\r\n```bash\r\nmkdir deepgram-vonage\r\n```\r\nThen we'll change into that directory so we can start adding things to it.\r\n```bash\r\ncd deepgram-vonage\r\n```\r\nWe\u2019ll also need to set up a virtual environment to hold the project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one. It\u2019s recommended in Python to use a virtual environment so the project can be installed inside a container rather than installing it system-wide.\r\n\r\nWe need to ensure the virtual environment is activated because we\u2019ll install dependencies inside. If the virtual environment is named `venv`, then we'll need to activate it.\r\n```bash\r\nsource venv/bin/activate\r\n```\r\nWe'll install the dependencies for the project by running the below `pip` installs from the terminal inside the virtual environment.\r\n```bash\r\npip install deepgram-sdk\r\npip install vonage\r\npip install python-dotenv\r\npip install Flask\r\npip install 'flask[async]'\r\npip install pysondb\r\n```\r\nWe now can open up an editor and create a file called `deepgram-vonage-call.py`.\r\n\r\n## The Code\r\n\r\nNow to the fun part! Open the script called `deepgram-vonage-call.py` and add the following code to make sure the Flask application runs without errors:\r\n\r\n```python\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.get(\"/\")\r\ndef hello():\r\n    return \"Hello World!\"\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(port=5000)\r\n```\r\n\r\nWe'll run the Flask application by typing this into the terminal `python deepgram-vonage-call.py`.\r\n\r\nThen we'll pull up the browser window by going to `http://127.0.0.1:5000/` and we should see the text `Hello World`.\r\n\r\nAt the same time the application is running, we'll open a new terminal window and type:\r\n```bash\r\nngrok http 127.0.0.1:5000\r\n```\r\nHere's a snapshot of the terminal running with ngrok:\r\n\r\n![ngrok terminal with python flask](https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/ngrok-terminal-with-python-flask-deepgram.png)\r\n\r\nWe'll create a Vonage application in the Vonage API Dashboard by going to `Applications -> Create a new application`.\r\n\r\nWe'll give the application a friendly name that's meaningful and easy to remember. We'll call it `Deepgram Vonage`.\r\n\r\nWe'll also need to generate a private key by clicking the button `Generate public and private key`. Add\r\nthe private key to the same level directory as the `python deepgram-vonage-call.py` file.\r\n\r\nNext, under the section `Capabilities` toggle on the `Voice` option. We'll add the following webhooks, with the ngrok url\r\nand endpoints to the `Answer URL` and the `Event URL`. Please note that everyone has a different ngrok url.\r\n\r\n```\r\nhttp://a11f-104-6-9-133.ngrok.io/webhooks/answer\r\nhttp://a11f-104-6-9-133.ngrok.io/webhooks/event\r\n\r\n```\r\n\r\n![vonage webhooks](https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/vonage-answer-event-webhooks.png)\r\n\r\nWe\u2019ll implement the endpoints in a few.\r\n\r\nLeave both terminals running as those are needed to run the application and receive the phone call.\r\n\r\nThen we'll store the environment variables in a `.env` file with the following:\r\n```bash\r\nDEEPGRAM_API_KEY=['DEEPGRAM_API_KEY']\r\nVONAGE_NUMBER=['VONAGE_NUMBER']\r\nRECIPIENT_NUMBER=['RECIPIENT_NUMBER']\r\nVONAGE_APPLICATION_ID=['VONAGE_APPLICATION_ID']\r\nVONAGE_APPLICATION_PRIVATE_KEY_PATH=['PATH_TO_PRIVATE_KEY']\r\n```\r\nReplace `DEEPGRAM_API_KEY` with the API key we received from signing up in the Deepgram console, and the `RECIPIENT_NUMBER` is the phone number we would like to receive the call.\r\n\r\nWe'll replace the code in `deepgram-vonage-call.py` with the following:\r\n\r\n```python\r\nimport json\r\nimport os\r\nimport vonage\r\nfrom flask import Flask, request, jsonify, render_template\r\nfrom deepgram import Deepgram\r\nfrom pysondb import db\r\nfrom dotenv import load_dotenv\r\n\r\nload_dotenv()\r\n\r\napp = Flask(__name__)\r\n\r\ncalls_db=db.getDb('calls.json')\r\n\r\nRECIPIENT_NUMBER = os.getenv(\"RECIPIENT_NUMBER\")\r\nVONAGE_NUMBER = os.getenv(\"VONAGE_NUMBER\")\r\nVONAGE_APPLICATION_ID = os.getenv(\"VONAGE_APPLICATION_ID\")\r\nVONAGE_APPLICATION_PRIVATE_KEY_PATH = os.getenv(\"VONAGE_APPLICATION_PRIVATE_KEY_PATH\")\r\nDEEPGRAM_API_KEY = os.getenv(\"DEEPGRAM_API_KEY\")\r\n\r\nclient = vonage.Client(\r\n    application_id=VONAGE_APPLICATION_ID,\r\n    private_key=VONAGE_APPLICATION_PRIVATE_KEY_PATH,\r\n)\r\n\r\n@app.get(\"/webhooks/answer\")\r\ndef answer_call():\r\n    ncco = [\r\n        {\r\n            \"action\": \"talk\",\r\n            \"text\": \"Hi, we will shortly forward your call. This call is recorded for quality assurance purposes.\"\r\n        },\r\n        {\r\n            \"action\": \"record\",\r\n            \"eventUrl\": [\"http://a11f-104-6-9-133.ngrok.io/webhooks/recordings\"]\r\n        },\r\n        {\r\n            \"action\": \"connect\",\r\n            \"eventUrl\": [\"http://a11f-104-6-9-133.ngrok.io/webhooks/event\"],\r\n            \"from\": VONAGE_NUMBER,\r\n            \"endpoint\": [\r\n                {\r\n                    \"type\": \"phone\",\r\n                    \"number\": RECIPIENT_NUMBER\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n    return jsonify(ncco)\r\n```\r\n\r\nHere we are importing the libraries and creating a new instance of a Flask application. Then we create a new database named `calls`. We are using a lightweight JSON database called [PysonDB](https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija).\r\n\r\nWe create the `/webhooks/answer` endpoint, which allows us to make a voice call, connect to the Vonage number and record the call.\r\n\r\nNext, in the `/webhooks/recordings` route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of the call and using speech recognition to transcribe the audio. We check if `results` is in the response and format it by using a list comprehension and storing the results in `utterances`. We then add the `utterances` to the `calls` database. We return an empty dictionary in the `/webhooks/event` endpoint.\r\n\r\n```python\r\n@app.post(\"/webhooks/recordings\")\r\nasync def recordings():\r\n    print(\"recordings endpoint\")\r\n    deepgram = Deepgram(DEEPGRAM_API_KEY)\r\n    data = request.get_json()\r\n\r\n    response = client.get_recording(data['recording_url'])\r\n\r\n    source = {'buffer': response, 'mimetype': 'audio/mp3'}\r\n    transcript_data = await deepgram.transcription.prerecorded(source, {'punctuate': True,\r\n    'utterances': True,\r\n       'model': 'phonecall',\r\n        'multichannel': True \r\n})\r\n\r\n    if 'results' in transcript_data:\r\n        utterances = [\r\n            {\r\n                'channel': utterance['channel'],\r\n                'transcript': utterance['transcript']\r\n            } for utterance in transcript_data['results']['utterances']\r\n        ]\r\n\r\n        calls_db.addMany(utterances)\r\n\r\n        return json.dumps(utterances, indent=4)\r\n\r\n    return \"webhook received\"\r\n\r\n\r\n@app.get(\"/webhooks/event\")\r\ndef on_event():\r\n    return jsonify({})\r\n```\r\n\r\nWe can see how the utterances will look after they\u2019re formatted:\r\n```\r\n    [{'channel': 0, 'transcript': 'Hello?', 'id': 288397603074461838},\r\n    {'channel': 1, 'transcript': 'Hey. How's it going?', 'id': 109089630999017748},\r\n    {'channel': 0, 'transcript': 'Thank you for using Deepgram.', 'id': 124620676610936565},\r\n    {'channel': 1, 'transcript': 'Have a good day.', 'id': 182036969834868158}]\r\n```\r\nLastly, we'll add the `/transcribe` route and a templates folder with an `index.html` file that will display the phone speech-to-text transcript.\r\n\r\nIn the Python file, we'll add the following code to get the voice-to-text transcript from the database and render them in the HTML template.\r\n\r\n```python\r\n@app.get(\"/transcribe\")\r\ndef transcribe_call():\r\n    context = calls_db.getAll()\r\n    return render_template(\"index.html\", context=context )\r\n\r\nif __name__ == '__main__':\r\n    app.run(port=5000)\r\n```\r\n\r\nWe'll create a folder in the project directory called `templates` and add an `index.html` file. In that file, we'll add the following HTML and Jinja code:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Transcript</title>\r\n  </head>\r\n  <body>\r\n    {% for c in context %} {{ c.transcript }} <br />\r\n    {% endfor %}\r\n  </body>\r\n</html>\r\n```\r\n\r\nThen we'll loop through every transcript and display it on the screen.\r\n\r\nFinally, we'll try making a phone call and using the non-Vonage phone to initiate a phone conversation with the phone number we provided in the environment variable `VONAGE_NUMBER`. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in the browser when we navigate to `http://127.0.0.1:5000/transcribe`.\r\n\r\nCongratulations on building a speech-to-text Python project with Vonage and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ", "html": '<p>Imagine having the ability to transcribe voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Vonage with Deepgram.</p>\n<p>With Vonage, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.</p>\n<p>Here\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651778132/blog/2022/05/deepgram-with-vonage/deepgram-vonage-transcript.png" alt="Deepgram voice-to-text with Vonage"></p>\n<h2 id="getting-started">Getting Started</h2>\n<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to the <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. We\u2019ll make sure to copy it and keep it in a safe place, as we won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>\n<p>Then we\u2019ll make sure to go to <a href="https://dashboard.nexmo.com/sign-up?icid=tryitfree_api-developer-adp_nexmodashbdfreetrialsignup_nav#_ga=2.180701287.1184321093.1651679801-1860855498.1651679801">Vonage</a> and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities of type mobile.</p>\n<p>We\u2019ll also need two phones to make the outgoing call and another to receive a call.</p>\n<p>In the project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in the application. Ngrok will forward requests to the application that is running locally. We can download it <a href="https://ngrok.com/">here</a>.</p>\n<p>Next, we\u2019ll make a directory anywhere we\u2019d like.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mkdir deepgram-vonage</span></span></code></pre>\n<p>Then we\u2019ll change into that directory so we can start adding things to it.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> deepgram-vonage</span></span></code></pre>\n<p>We\u2019ll also need to set up a virtual environment to hold the project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one. It\u2019s recommended in Python to use a virtual environment so the project can be installed inside a container rather than installing it system-wide.</p>\n<p>We need to ensure the virtual environment is activated because we\u2019ll install dependencies inside. If the virtual environment is named <code is:raw>venv</code>, then we\u2019ll need to activate it.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> venv/bin/activate</span></span></code></pre>\n<p>We\u2019ll install the dependencies for the project by running the below <code is:raw>pip</code> installs from the terminal inside the virtual environment.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">pip install deepgram-sdk</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install vonage</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install python-dotenv</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install Flask</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install </span><span style="color: #A5D6FF">&#39;flask[async]&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install pysondb</span></span></code></pre>\n<p>We now can open up an editor and create a file called <code is:raw>deepgram-vonage-call.py</code>.</p>\n<h2 id="the-code">The Code</h2>\n<p>Now to the fun part! Open the script called <code is:raw>deepgram-vonage-call.py</code> and add the following code to make sure the Flask application runs without errors:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">hello</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello World!&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    app.run(</span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>We\u2019ll run the Flask application by typing this into the terminal <code is:raw>python deepgram-vonage-call.py</code>.</p>\n<p>Then we\u2019ll pull up the browser window by going to <code is:raw>http://127.0.0.1:5000/</code> and we should see the text <code is:raw>Hello World</code>.</p>\n<p>At the same time the application is running, we\u2019ll open a new terminal window and type:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">ngrok http 127.0.0.1:5000</span></span></code></pre>\n<p>Here\u2019s a snapshot of the terminal running with ngrok:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/ngrok-terminal-with-python-flask-deepgram.png" alt="ngrok terminal with python flask"></p>\n<p>We\u2019ll create a Vonage application in the Vonage API Dashboard by going to <code is:raw>Applications -&gt; Create a new application</code>.</p>\n<p>We\u2019ll give the application a friendly name that\u2019s meaningful and easy to remember. We\u2019ll call it <code is:raw>Deepgram Vonage</code>.</p>\n<p>We\u2019ll also need to generate a private key by clicking the button <code is:raw>Generate public and private key</code>. Add\r\nthe private key to the same level directory as the <code is:raw>python deepgram-vonage-call.py</code> file.</p>\n<p>Next, under the section <code is:raw>Capabilities</code> toggle on the <code is:raw>Voice</code> option. We\u2019ll add the following webhooks, with the ngrok url\r\nand endpoints to the <code is:raw>Answer URL</code> and the <code is:raw>Event URL</code>. Please note that everyone has a different ngrok url.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">http://a11f-104-6-9-133.ngrok.io/webhooks/answer</span></span>\n<span class="line"><span style="color: #c9d1d9">http://a11f-104-6-9-133.ngrok.io/webhooks/event</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/vonage-answer-event-webhooks.png" alt="vonage webhooks"></p>\n<p>We\u2019ll implement the endpoints in a few.</p>\n<p>Leave both terminals running as those are needed to run the application and receive the phone call.</p>\n<p>Then we\u2019ll store the environment variables in a <code is:raw>.env</code> file with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">DEEPGRAM_API_KEY=[</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">VONAGE_NUMBER=[</span><span style="color: #A5D6FF">&#39;VONAGE_NUMBER&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">RECIPIENT_NUMBER=[</span><span style="color: #A5D6FF">&#39;RECIPIENT_NUMBER&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">VONAGE_APPLICATION_ID=[</span><span style="color: #A5D6FF">&#39;VONAGE_APPLICATION_ID&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">VONAGE_APPLICATION_PRIVATE_KEY_PATH=[</span><span style="color: #A5D6FF">&#39;PATH_TO_PRIVATE_KEY&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Replace <code is:raw>DEEPGRAM_API_KEY</code> with the API key we received from signing up in the Deepgram console, and the <code is:raw>RECIPIENT_NUMBER</code> is the phone number we would like to receive the call.</p>\n<p>We\u2019ll replace the code in <code is:raw>deepgram-vonage-call.py</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> vonage</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, request, jsonify, render_template</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pysondb </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> db</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">calls_db</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">db.getDb(</span><span style="color: #A5D6FF">&#39;calls.json&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">RECIPIENT_NUMBER</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;RECIPIENT_NUMBER&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">VONAGE_NUMBER</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_NUMBER&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">VONAGE_APPLICATION_ID</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_APPLICATION_ID&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">VONAGE_APPLICATION_PRIVATE_KEY_PATH</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_APPLICATION_PRIVATE_KEY_PATH&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> vonage.Client(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">application_id</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">VONAGE_APPLICATION_ID</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">private_key</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">VONAGE_APPLICATION_PRIVATE_KEY_PATH</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/answer&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">answer_call</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    ncco </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;talk&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hi, we will shortly forward your call. This call is recorded for quality assurance purposes.&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;record&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;eventUrl&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;http://a11f-104-6-9-133.ngrok.io/webhooks/recordings&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;connect&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;eventUrl&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;http://a11f-104-6-9-133.ngrok.io/webhooks/event&quot;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;from&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">VONAGE_NUMBER</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;endpoint&quot;</span><span style="color: #C9D1D9">: [</span></span>\n<span class="line"><span style="color: #C9D1D9">                {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;phone&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;number&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">RECIPIENT_NUMBER</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"><span style="color: #C9D1D9">            ]</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    ]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> jsonify(ncco)</span></span></code></pre>\n<p>Here we are importing the libraries and creating a new instance of a Flask application. Then we create a new database named <code is:raw>calls</code>. We are using a lightweight JSON database called <a href="https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija">PysonDB</a>.</p>\n<p>We create the <code is:raw>/webhooks/answer</code> endpoint, which allows us to make a voice call, connect to the Vonage number and record the call.</p>\n<p>Next, in the <code is:raw>/webhooks/recordings</code> route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of the call and using speech recognition to transcribe the audio. We check if <code is:raw>results</code> is in the response and format it by using a list comprehension and storing the results in <code is:raw>utterances</code>. We then add the <code is:raw>utterances</code> to the <code is:raw>calls</code> database. We return an empty dictionary in the <code is:raw>/webhooks/event</code> endpoint.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/recordings&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recordings</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;recordings endpoint&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.get_json()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> client.get_recording(data[</span><span style="color: #A5D6FF">&#39;recording_url&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: response, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcript_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #A5D6FF">&#39;model&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;multichannel&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> </span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>\n<span class="line"><span style="color: #C9D1D9">        utterances </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">            {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">            } </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">        ]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        calls_db.addMany(utterances)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> json.dumps(utterances, </span><span style="color: #FFA657">indent</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;webhook received&quot;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/event&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">on_event</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> jsonify({})</span></span></code></pre>\n<p>We can see how the utterances will look after they\u2019re formatted:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    [{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 288397603074461838},</span></span>\n<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Hey. How&#39;s it going?&#39;, &#39;id&#39;: 109089630999017748},</span></span>\n<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Thank you for using Deepgram.&#39;, &#39;id&#39;: 124620676610936565},</span></span>\n<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Have a good day.&#39;, &#39;id&#39;: 182036969834868158}]</span></span></code></pre>\n<p>Lastly, we\u2019ll add the <code is:raw>/transcribe</code> route and a templates folder with an <code is:raw>index.html</code> file that will display the phone speech-to-text transcript.</p>\n<p>In the Python file, we\u2019ll add the following code to get the voice-to-text transcript from the database and render them in the HTML template.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/transcribe&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribe_call</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    context </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> calls_db.getAll()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&quot;index.html&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">context )</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    app.run(</span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>We\u2019ll create a folder in the project directory called <code is:raw>templates</code> and add an <code is:raw>index.html</code> file. In that file, we\u2019ll add the following HTML and Jinja code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Transcript&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% for c in context %} {{ c.transcript }} &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Then we\u2019ll loop through every transcript and display it on the screen.</p>\n<p>Finally, we\u2019ll try making a phone call and using the non-Vonage phone to initiate a phone conversation with the phone number we provided in the environment variable <code is:raw>VONAGE_NUMBER</code>. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in the browser when we navigate to <code is:raw>http://127.0.0.1:5000/transcribe</code>.</p>\n<p>Congratulations on building a speech-to-text Python project with Vonage and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/deepgram-with-vonage/index.md" };
function rawContent() {
  return "\r\nImagine having the ability to transcribe voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Vonage with Deepgram.\r\n\r\nWith Vonage, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.\r\n\r\nHere\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.\r\n\r\n![Deepgram voice-to-text with Vonage](https://res.cloudinary.com/deepgram/image/upload/v1651778132/blog/2022/05/deepgram-with-vonage/deepgram-vonage-transcript.png)\r\n\r\n## Getting Started\r\n\r\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to the [Deepgram console](https://console.deepgram.com/signup?jump=keys). We'll make sure to copy it and keep it in a safe place, as we won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\r\n\r\nThen we'll make sure to go to [Vonage](https://dashboard.nexmo.com/sign-up?icid=tryitfree_api-developer-adp_nexmodashbdfreetrialsignup_nav#_ga=2.180701287.1184321093.1651679801-1860855498.1651679801) and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities of type mobile.\r\n\r\nWe\u2019ll also need two phones to make the outgoing call and another to receive a call.\r\n\r\nIn the project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in the application. Ngrok will forward requests to the application that is running locally. We can download it [here](https://ngrok.com/).\r\n\r\nNext, we'll make a directory anywhere we\u2019d like.\r\n```bash\r\nmkdir deepgram-vonage\r\n```\r\nThen we'll change into that directory so we can start adding things to it.\r\n```bash\r\ncd deepgram-vonage\r\n```\r\nWe\u2019ll also need to set up a virtual environment to hold the project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one. It\u2019s recommended in Python to use a virtual environment so the project can be installed inside a container rather than installing it system-wide.\r\n\r\nWe need to ensure the virtual environment is activated because we\u2019ll install dependencies inside. If the virtual environment is named `venv`, then we'll need to activate it.\r\n```bash\r\nsource venv/bin/activate\r\n```\r\nWe'll install the dependencies for the project by running the below `pip` installs from the terminal inside the virtual environment.\r\n```bash\r\npip install deepgram-sdk\r\npip install vonage\r\npip install python-dotenv\r\npip install Flask\r\npip install 'flask[async]'\r\npip install pysondb\r\n```\r\nWe now can open up an editor and create a file called `deepgram-vonage-call.py`.\r\n\r\n## The Code\r\n\r\nNow to the fun part! Open the script called `deepgram-vonage-call.py` and add the following code to make sure the Flask application runs without errors:\r\n\r\n```python\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.get(\"/\")\r\ndef hello():\r\n    return \"Hello World!\"\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(port=5000)\r\n```\r\n\r\nWe'll run the Flask application by typing this into the terminal `python deepgram-vonage-call.py`.\r\n\r\nThen we'll pull up the browser window by going to `http://127.0.0.1:5000/` and we should see the text `Hello World`.\r\n\r\nAt the same time the application is running, we'll open a new terminal window and type:\r\n```bash\r\nngrok http 127.0.0.1:5000\r\n```\r\nHere's a snapshot of the terminal running with ngrok:\r\n\r\n![ngrok terminal with python flask](https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/ngrok-terminal-with-python-flask-deepgram.png)\r\n\r\nWe'll create a Vonage application in the Vonage API Dashboard by going to `Applications -> Create a new application`.\r\n\r\nWe'll give the application a friendly name that's meaningful and easy to remember. We'll call it `Deepgram Vonage`.\r\n\r\nWe'll also need to generate a private key by clicking the button `Generate public and private key`. Add\r\nthe private key to the same level directory as the `python deepgram-vonage-call.py` file.\r\n\r\nNext, under the section `Capabilities` toggle on the `Voice` option. We'll add the following webhooks, with the ngrok url\r\nand endpoints to the `Answer URL` and the `Event URL`. Please note that everyone has a different ngrok url.\r\n\r\n```\r\nhttp://a11f-104-6-9-133.ngrok.io/webhooks/answer\r\nhttp://a11f-104-6-9-133.ngrok.io/webhooks/event\r\n\r\n```\r\n\r\n![vonage webhooks](https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/vonage-answer-event-webhooks.png)\r\n\r\nWe\u2019ll implement the endpoints in a few.\r\n\r\nLeave both terminals running as those are needed to run the application and receive the phone call.\r\n\r\nThen we'll store the environment variables in a `.env` file with the following:\r\n```bash\r\nDEEPGRAM_API_KEY=['DEEPGRAM_API_KEY']\r\nVONAGE_NUMBER=['VONAGE_NUMBER']\r\nRECIPIENT_NUMBER=['RECIPIENT_NUMBER']\r\nVONAGE_APPLICATION_ID=['VONAGE_APPLICATION_ID']\r\nVONAGE_APPLICATION_PRIVATE_KEY_PATH=['PATH_TO_PRIVATE_KEY']\r\n```\r\nReplace `DEEPGRAM_API_KEY` with the API key we received from signing up in the Deepgram console, and the `RECIPIENT_NUMBER` is the phone number we would like to receive the call.\r\n\r\nWe'll replace the code in `deepgram-vonage-call.py` with the following:\r\n\r\n```python\r\nimport json\r\nimport os\r\nimport vonage\r\nfrom flask import Flask, request, jsonify, render_template\r\nfrom deepgram import Deepgram\r\nfrom pysondb import db\r\nfrom dotenv import load_dotenv\r\n\r\nload_dotenv()\r\n\r\napp = Flask(__name__)\r\n\r\ncalls_db=db.getDb('calls.json')\r\n\r\nRECIPIENT_NUMBER = os.getenv(\"RECIPIENT_NUMBER\")\r\nVONAGE_NUMBER = os.getenv(\"VONAGE_NUMBER\")\r\nVONAGE_APPLICATION_ID = os.getenv(\"VONAGE_APPLICATION_ID\")\r\nVONAGE_APPLICATION_PRIVATE_KEY_PATH = os.getenv(\"VONAGE_APPLICATION_PRIVATE_KEY_PATH\")\r\nDEEPGRAM_API_KEY = os.getenv(\"DEEPGRAM_API_KEY\")\r\n\r\nclient = vonage.Client(\r\n    application_id=VONAGE_APPLICATION_ID,\r\n    private_key=VONAGE_APPLICATION_PRIVATE_KEY_PATH,\r\n)\r\n\r\n@app.get(\"/webhooks/answer\")\r\ndef answer_call():\r\n    ncco = [\r\n        {\r\n            \"action\": \"talk\",\r\n            \"text\": \"Hi, we will shortly forward your call. This call is recorded for quality assurance purposes.\"\r\n        },\r\n        {\r\n            \"action\": \"record\",\r\n            \"eventUrl\": [\"http://a11f-104-6-9-133.ngrok.io/webhooks/recordings\"]\r\n        },\r\n        {\r\n            \"action\": \"connect\",\r\n            \"eventUrl\": [\"http://a11f-104-6-9-133.ngrok.io/webhooks/event\"],\r\n            \"from\": VONAGE_NUMBER,\r\n            \"endpoint\": [\r\n                {\r\n                    \"type\": \"phone\",\r\n                    \"number\": RECIPIENT_NUMBER\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n    return jsonify(ncco)\r\n```\r\n\r\nHere we are importing the libraries and creating a new instance of a Flask application. Then we create a new database named `calls`. We are using a lightweight JSON database called [PysonDB](https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija).\r\n\r\nWe create the `/webhooks/answer` endpoint, which allows us to make a voice call, connect to the Vonage number and record the call.\r\n\r\nNext, in the `/webhooks/recordings` route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of the call and using speech recognition to transcribe the audio. We check if `results` is in the response and format it by using a list comprehension and storing the results in `utterances`. We then add the `utterances` to the `calls` database. We return an empty dictionary in the `/webhooks/event` endpoint.\r\n\r\n```python\r\n@app.post(\"/webhooks/recordings\")\r\nasync def recordings():\r\n    print(\"recordings endpoint\")\r\n    deepgram = Deepgram(DEEPGRAM_API_KEY)\r\n    data = request.get_json()\r\n\r\n    response = client.get_recording(data['recording_url'])\r\n\r\n    source = {'buffer': response, 'mimetype': 'audio/mp3'}\r\n    transcript_data = await deepgram.transcription.prerecorded(source, {'punctuate': True,\r\n    'utterances': True,\r\n       'model': 'phonecall',\r\n        'multichannel': True \r\n})\r\n\r\n    if 'results' in transcript_data:\r\n        utterances = [\r\n            {\r\n                'channel': utterance['channel'],\r\n                'transcript': utterance['transcript']\r\n            } for utterance in transcript_data['results']['utterances']\r\n        ]\r\n\r\n        calls_db.addMany(utterances)\r\n\r\n        return json.dumps(utterances, indent=4)\r\n\r\n    return \"webhook received\"\r\n\r\n\r\n@app.get(\"/webhooks/event\")\r\ndef on_event():\r\n    return jsonify({})\r\n```\r\n\r\nWe can see how the utterances will look after they\u2019re formatted:\r\n```\r\n    [{'channel': 0, 'transcript': 'Hello?', 'id': 288397603074461838},\r\n    {'channel': 1, 'transcript': 'Hey. How's it going?', 'id': 109089630999017748},\r\n    {'channel': 0, 'transcript': 'Thank you for using Deepgram.', 'id': 124620676610936565},\r\n    {'channel': 1, 'transcript': 'Have a good day.', 'id': 182036969834868158}]\r\n```\r\nLastly, we'll add the `/transcribe` route and a templates folder with an `index.html` file that will display the phone speech-to-text transcript.\r\n\r\nIn the Python file, we'll add the following code to get the voice-to-text transcript from the database and render them in the HTML template.\r\n\r\n```python\r\n@app.get(\"/transcribe\")\r\ndef transcribe_call():\r\n    context = calls_db.getAll()\r\n    return render_template(\"index.html\", context=context )\r\n\r\nif __name__ == '__main__':\r\n    app.run(port=5000)\r\n```\r\n\r\nWe'll create a folder in the project directory called `templates` and add an `index.html` file. In that file, we'll add the following HTML and Jinja code:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Transcript</title>\r\n  </head>\r\n  <body>\r\n    {% for c in context %} {{ c.transcript }} <br />\r\n    {% endfor %}\r\n  </body>\r\n</html>\r\n```\r\n\r\nThen we'll loop through every transcript and display it on the screen.\r\n\r\nFinally, we'll try making a phone call and using the non-Vonage phone to initiate a phone conversation with the phone number we provided in the environment variable `VONAGE_NUMBER`. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in the browser when we navigate to `http://127.0.0.1:5000/transcribe`.\r\n\r\nCongratulations on building a speech-to-text Python project with Vonage and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ";
}
function compiledContent() {
  return '<p>Imagine having the ability to transcribe voice calls. Look no further because we\u2019ll learn how to do that in this article by combining Vonage with Deepgram.</p>\n<p>With Vonage, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We\u2019ll use the Deepgram Python SDK in this example.</p>\n<p>Here\u2019s a snapshot of what we\u2019ll see in the browser after making the phone call and using Deepgram voice-to-text.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651778132/blog/2022/05/deepgram-with-vonage/deepgram-vonage-transcript.png" alt="Deepgram voice-to-text with Vonage"></p>\n<h2 id="getting-started">Getting Started</h2>\n<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can go to the <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. We\u2019ll make sure to copy it and keep it in a safe place, as we won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>\n<p>Then we\u2019ll make sure to go to <a href="https://dashboard.nexmo.com/sign-up?icid=tryitfree_api-developer-adp_nexmodashbdfreetrialsignup_nav#_ga=2.180701287.1184321093.1651679801-1860855498.1651679801">Vonage</a> and sign up for an account. We\u2019ll need to purchase a phone number with voice capabilities of type mobile.</p>\n<p>We\u2019ll also need two phones to make the outgoing call and another to receive a call.</p>\n<p>In the project, we\u2019ll use Ngrok, which provides a temporary URL that will act as the webhook in the application. Ngrok will forward requests to the application that is running locally. We can download it <a href="https://ngrok.com/">here</a>.</p>\n<p>Next, we\u2019ll make a directory anywhere we\u2019d like.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mkdir deepgram-vonage</span></span></code></pre>\n<p>Then we\u2019ll change into that directory so we can start adding things to it.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> deepgram-vonage</span></span></code></pre>\n<p>We\u2019ll also need to set up a virtual environment to hold the project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one. It\u2019s recommended in Python to use a virtual environment so the project can be installed inside a container rather than installing it system-wide.</p>\n<p>We need to ensure the virtual environment is activated because we\u2019ll install dependencies inside. If the virtual environment is named <code is:raw>venv</code>, then we\u2019ll need to activate it.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> venv/bin/activate</span></span></code></pre>\n<p>We\u2019ll install the dependencies for the project by running the below <code is:raw>pip</code> installs from the terminal inside the virtual environment.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">pip install deepgram-sdk</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install vonage</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install python-dotenv</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install Flask</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install </span><span style="color: #A5D6FF">&#39;flask[async]&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">pip install pysondb</span></span></code></pre>\n<p>We now can open up an editor and create a file called <code is:raw>deepgram-vonage-call.py</code>.</p>\n<h2 id="the-code">The Code</h2>\n<p>Now to the fun part! Open the script called <code is:raw>deepgram-vonage-call.py</code> and add the following code to make sure the Flask application runs without errors:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">hello</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello World!&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    app.run(</span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>We\u2019ll run the Flask application by typing this into the terminal <code is:raw>python deepgram-vonage-call.py</code>.</p>\n<p>Then we\u2019ll pull up the browser window by going to <code is:raw>http://127.0.0.1:5000/</code> and we should see the text <code is:raw>Hello World</code>.</p>\n<p>At the same time the application is running, we\u2019ll open a new terminal window and type:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">ngrok http 127.0.0.1:5000</span></span></code></pre>\n<p>Here\u2019s a snapshot of the terminal running with ngrok:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/ngrok-terminal-with-python-flask-deepgram.png" alt="ngrok terminal with python flask"></p>\n<p>We\u2019ll create a Vonage application in the Vonage API Dashboard by going to <code is:raw>Applications -&gt; Create a new application</code>.</p>\n<p>We\u2019ll give the application a friendly name that\u2019s meaningful and easy to remember. We\u2019ll call it <code is:raw>Deepgram Vonage</code>.</p>\n<p>We\u2019ll also need to generate a private key by clicking the button <code is:raw>Generate public and private key</code>. Add\r\nthe private key to the same level directory as the <code is:raw>python deepgram-vonage-call.py</code> file.</p>\n<p>Next, under the section <code is:raw>Capabilities</code> toggle on the <code is:raw>Voice</code> option. We\u2019ll add the following webhooks, with the ngrok url\r\nand endpoints to the <code is:raw>Answer URL</code> and the <code is:raw>Event URL</code>. Please note that everyone has a different ngrok url.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">http://a11f-104-6-9-133.ngrok.io/webhooks/answer</span></span>\n<span class="line"><span style="color: #c9d1d9">http://a11f-104-6-9-133.ngrok.io/webhooks/event</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/vonage-answer-event-webhooks.png" alt="vonage webhooks"></p>\n<p>We\u2019ll implement the endpoints in a few.</p>\n<p>Leave both terminals running as those are needed to run the application and receive the phone call.</p>\n<p>Then we\u2019ll store the environment variables in a <code is:raw>.env</code> file with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">DEEPGRAM_API_KEY=[</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">VONAGE_NUMBER=[</span><span style="color: #A5D6FF">&#39;VONAGE_NUMBER&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">RECIPIENT_NUMBER=[</span><span style="color: #A5D6FF">&#39;RECIPIENT_NUMBER&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">VONAGE_APPLICATION_ID=[</span><span style="color: #A5D6FF">&#39;VONAGE_APPLICATION_ID&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">VONAGE_APPLICATION_PRIVATE_KEY_PATH=[</span><span style="color: #A5D6FF">&#39;PATH_TO_PRIVATE_KEY&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Replace <code is:raw>DEEPGRAM_API_KEY</code> with the API key we received from signing up in the Deepgram console, and the <code is:raw>RECIPIENT_NUMBER</code> is the phone number we would like to receive the call.</p>\n<p>We\u2019ll replace the code in <code is:raw>deepgram-vonage-call.py</code> with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> vonage</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, request, jsonify, render_template</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pysondb </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> db</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">calls_db</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">db.getDb(</span><span style="color: #A5D6FF">&#39;calls.json&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">RECIPIENT_NUMBER</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;RECIPIENT_NUMBER&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">VONAGE_NUMBER</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_NUMBER&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">VONAGE_APPLICATION_ID</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_APPLICATION_ID&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">VONAGE_APPLICATION_PRIVATE_KEY_PATH</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_APPLICATION_PRIVATE_KEY_PATH&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> vonage.Client(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">application_id</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">VONAGE_APPLICATION_ID</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">private_key</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">VONAGE_APPLICATION_PRIVATE_KEY_PATH</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/answer&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">answer_call</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    ncco </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;talk&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hi, we will shortly forward your call. This call is recorded for quality assurance purposes.&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;record&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;eventUrl&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;http://a11f-104-6-9-133.ngrok.io/webhooks/recordings&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;connect&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;eventUrl&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;http://a11f-104-6-9-133.ngrok.io/webhooks/event&quot;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;from&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">VONAGE_NUMBER</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;endpoint&quot;</span><span style="color: #C9D1D9">: [</span></span>\n<span class="line"><span style="color: #C9D1D9">                {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;phone&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;number&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">RECIPIENT_NUMBER</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"><span style="color: #C9D1D9">            ]</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    ]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> jsonify(ncco)</span></span></code></pre>\n<p>Here we are importing the libraries and creating a new instance of a Flask application. Then we create a new database named <code is:raw>calls</code>. We are using a lightweight JSON database called <a href="https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija">PysonDB</a>.</p>\n<p>We create the <code is:raw>/webhooks/answer</code> endpoint, which allows us to make a voice call, connect to the Vonage number and record the call.</p>\n<p>Next, in the <code is:raw>/webhooks/recordings</code> route below, we tap into Deepgram\u2019s speech-to-text feature by getting the recording of the call and using speech recognition to transcribe the audio. We check if <code is:raw>results</code> is in the response and format it by using a list comprehension and storing the results in <code is:raw>utterances</code>. We then add the <code is:raw>utterances</code> to the <code is:raw>calls</code> database. We return an empty dictionary in the <code is:raw>/webhooks/event</code> endpoint.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/recordings&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recordings</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;recordings endpoint&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.get_json()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> client.get_recording(data[</span><span style="color: #A5D6FF">&#39;recording_url&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: response, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcript_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #A5D6FF">&#39;model&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;multichannel&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> </span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>\n<span class="line"><span style="color: #C9D1D9">        utterances </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>\n<span class="line"><span style="color: #C9D1D9">            {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">            } </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">        ]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        calls_db.addMany(utterances)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> json.dumps(utterances, </span><span style="color: #FFA657">indent</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;webhook received&quot;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/event&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">on_event</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> jsonify({})</span></span></code></pre>\n<p>We can see how the utterances will look after they\u2019re formatted:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    [{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 288397603074461838},</span></span>\n<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Hey. How&#39;s it going?&#39;, &#39;id&#39;: 109089630999017748},</span></span>\n<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Thank you for using Deepgram.&#39;, &#39;id&#39;: 124620676610936565},</span></span>\n<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Have a good day.&#39;, &#39;id&#39;: 182036969834868158}]</span></span></code></pre>\n<p>Lastly, we\u2019ll add the <code is:raw>/transcribe</code> route and a templates folder with an <code is:raw>index.html</code> file that will display the phone speech-to-text transcript.</p>\n<p>In the Python file, we\u2019ll add the following code to get the voice-to-text transcript from the database and render them in the HTML template.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/transcribe&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribe_call</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    context </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> calls_db.getAll()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&quot;index.html&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">context )</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    app.run(</span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>We\u2019ll create a folder in the project directory called <code is:raw>templates</code> and add an <code is:raw>index.html</code> file. In that file, we\u2019ll add the following HTML and Jinja code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Transcript&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% for c in context %} {{ c.transcript }} &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Then we\u2019ll loop through every transcript and display it on the screen.</p>\n<p>Finally, we\u2019ll try making a phone call and using the non-Vonage phone to initiate a phone conversation with the phone number we provided in the environment variable <code is:raw>VONAGE_NUMBER</code>. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in the browser when we navigate to <code is:raw>http://127.0.0.1:5000/transcribe</code>.</p>\n<p>Congratulations on building a speech-to-text Python project with Vonage and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/deepgram-with-vonage/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Imagine having the ability to transcribe voice calls. Look no further because we’ll learn how to do that in this article by combining Vonage with Deepgram.</p>
<p>With Vonage, we can use one of their phone numbers to receive and record incoming calls and get a transcript using the Deepgram Speech Recognition API. We’ll use the Deepgram Python SDK in this example.</p>
<p>Here’s a snapshot of what we’ll see in the browser after making the phone call and using Deepgram voice-to-text.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651778132/blog/2022/05/deepgram-with-vonage/deepgram-vonage-transcript.png" alt="Deepgram voice-to-text with Vonage"></p>
<h2 id="getting-started">Getting Started</h2>
<p>Before we start, it’s essential to generate a Deepgram API key to use in our project. We can go to the <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. We’ll make sure to copy it and keep it in a safe place, as we won’t be able to retrieve it again and will have to create a new one. In this tutorial, we’ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Then we’ll make sure to go to <a href="https://dashboard.nexmo.com/sign-up?icid=tryitfree_api-developer-adp_nexmodashbdfreetrialsignup_nav#_ga=2.180701287.1184321093.1651679801-1860855498.1651679801">Vonage</a> and sign up for an account. We’ll need to purchase a phone number with voice capabilities of type mobile.</p>
<p>We’ll also need two phones to make the outgoing call and another to receive a call.</p>
<p>In the project, we’ll use Ngrok, which provides a temporary URL that will act as the webhook in the application. Ngrok will forward requests to the application that is running locally. We can download it <a href="https://ngrok.com/">here</a>.</p>
<p>Next, we’ll make a directory anywhere we’d like.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">mkdir deepgram-vonage</span></span></code></pre>
<p>Then we’ll change into that directory so we can start adding things to it.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> deepgram-vonage</span></span></code></pre>
<p>We’ll also need to set up a virtual environment to hold the project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one. It’s recommended in Python to use a virtual environment so the project can be installed inside a container rather than installing it system-wide.</p>
<p>We need to ensure the virtual environment is activated because we’ll install dependencies inside. If the virtual environment is named <code>venv</code>, then we’ll need to activate it.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> venv/bin/activate</span></span></code></pre>
<p>We’ll install the dependencies for the project by running the below <code>pip</code> installs from the terminal inside the virtual environment.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #C9D1D9">pip install vonage</span></span>
<span class="line"><span style="color: #C9D1D9">pip install python-dotenv</span></span>
<span class="line"><span style="color: #C9D1D9">pip install Flask</span></span>
<span class="line"><span style="color: #C9D1D9">pip install </span><span style="color: #A5D6FF">&#39;flask[async]&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">pip install pysondb</span></span></code></pre>
<p>We now can open up an editor and create a file called <code>deepgram-vonage-call.py</code>.</p>
<h2 id="the-code">The Code</h2>
<p>Now to the fun part! Open the script called <code>deepgram-vonage-call.py</code> and add the following code to make sure the Flask application runs without errors:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">hello</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello World!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;__main__&quot;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">    app.run(</span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>We’ll run the Flask application by typing this into the terminal <code>python deepgram-vonage-call.py</code>.</p>
<p>Then we’ll pull up the browser window by going to <code>http://127.0.0.1:5000/</code> and we should see the text <code>Hello World</code>.</p>
<p>At the same time the application is running, we’ll open a new terminal window and type:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">ngrok http 127.0.0.1:5000</span></span></code></pre>
<p>Here’s a snapshot of the terminal running with ngrok:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/ngrok-terminal-with-python-flask-deepgram.png" alt="ngrok terminal with python flask"></p>
<p>We’ll create a Vonage application in the Vonage API Dashboard by going to <code>Applications -&gt; Create a new application</code>.</p>
<p>We’ll give the application a friendly name that’s meaningful and easy to remember. We’ll call it <code>Deepgram Vonage</code>.</p>
<p>We’ll also need to generate a private key by clicking the button <code>Generate public and private key</code>. Add
the private key to the same level directory as the <code>python deepgram-vonage-call.py</code> file.</p>
<p>Next, under the section <code>Capabilities</code> toggle on the <code>Voice</code> option. We’ll add the following webhooks, with the ngrok url
and endpoints to the <code>Answer URL</code> and the <code>Event URL</code>. Please note that everyone has a different ngrok url.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">http://a11f-104-6-9-133.ngrok.io/webhooks/answer</span></span>
<span class="line"><span style="color: #c9d1d9">http://a11f-104-6-9-133.ngrok.io/webhooks/event</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651757357/blog/2022/05/deepgram-with-vonage/vonage-answer-event-webhooks.png" alt="vonage webhooks"></p>
<p>We’ll implement the endpoints in a few.</p>
<p>Leave both terminals running as those are needed to run the application and receive the phone call.</p>
<p>Then we’ll store the environment variables in a <code>.env</code> file with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">DEEPGRAM_API_KEY=[</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">VONAGE_NUMBER=[</span><span style="color: #A5D6FF">&#39;VONAGE_NUMBER&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">RECIPIENT_NUMBER=[</span><span style="color: #A5D6FF">&#39;RECIPIENT_NUMBER&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">VONAGE_APPLICATION_ID=[</span><span style="color: #A5D6FF">&#39;VONAGE_APPLICATION_ID&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">VONAGE_APPLICATION_PRIVATE_KEY_PATH=[</span><span style="color: #A5D6FF">&#39;PATH_TO_PRIVATE_KEY&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Replace <code>DEEPGRAM_API_KEY</code> with the API key we received from signing up in the Deepgram console, and the <code>RECIPIENT_NUMBER</code> is the phone number we would like to receive the call.</p>
<p>We’ll replace the code in <code>deepgram-vonage-call.py</code> with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> json</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> vonage</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, request, jsonify, render_template</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> pysondb </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> db</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">calls_db</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">db.getDb(</span><span style="color: #A5D6FF">&#39;calls.json&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">RECIPIENT_NUMBER</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;RECIPIENT_NUMBER&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #79C0FF">VONAGE_NUMBER</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_NUMBER&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #79C0FF">VONAGE_APPLICATION_ID</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_APPLICATION_ID&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #79C0FF">VONAGE_APPLICATION_PRIVATE_KEY_PATH</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;VONAGE_APPLICATION_PRIVATE_KEY_PATH&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> vonage.Client(</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">application_id</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">VONAGE_APPLICATION_ID</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">private_key</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">VONAGE_APPLICATION_PRIVATE_KEY_PATH</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/answer&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">answer_call</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    ncco </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">        {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;talk&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hi, we will shortly forward your call. This call is recorded for quality assurance purposes.&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">        {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;record&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;eventUrl&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;http://a11f-104-6-9-133.ngrok.io/webhooks/recordings&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">        {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;connect&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;eventUrl&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;http://a11f-104-6-9-133.ngrok.io/webhooks/event&quot;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;from&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">VONAGE_NUMBER</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;endpoint&quot;</span><span style="color: #C9D1D9">: [</span></span>
<span class="line"><span style="color: #C9D1D9">                {</span></span>
<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;phone&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #A5D6FF">&quot;number&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">RECIPIENT_NUMBER</span></span>
<span class="line"><span style="color: #C9D1D9">                }</span></span>
<span class="line"><span style="color: #C9D1D9">            ]</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    ]</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> jsonify(ncco)</span></span></code></pre>
<p>Here we are importing the libraries and creating a new instance of a Flask application. Then we create a new database named <code>calls</code>. We are using a lightweight JSON database called <a href="https://dev.to/fredysomy/pysondb-a-json-based-lightweight-database-for-python-ija">PysonDB</a>.</p>
<p>We create the <code>/webhooks/answer</code> endpoint, which allows us to make a voice call, connect to the Vonage number and record the call.</p>
<p>Next, in the <code>/webhooks/recordings</code> route below, we tap into Deepgram’s speech-to-text feature by getting the recording of the call and using speech recognition to transcribe the audio. We check if <code>results</code> is in the response and format it by using a list comprehension and storing the results in <code>utterances</code>. We then add the <code>utterances</code> to the <code>calls</code> database. We return an empty dictionary in the <code>/webhooks/event</code> endpoint.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/recordings&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recordings</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;recordings endpoint&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> request.get_json()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> client.get_recording(data[</span><span style="color: #A5D6FF">&#39;recording_url&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: response, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">    transcript_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #A5D6FF">&#39;model&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #A5D6FF">&#39;multichannel&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> </span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">        utterances </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">            {</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: utterance[</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">            } </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;utterances&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">        ]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        calls_db.addMany(utterances)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> json.dumps(utterances, </span><span style="color: #FFA657">indent</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">4</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;webhook received&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/webhooks/event&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">on_event</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> jsonify({})</span></span></code></pre>
<p>We can see how the utterances will look after they’re formatted:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    [{&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Hello?&#39;, &#39;id&#39;: 288397603074461838},</span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Hey. How&#39;s it going?&#39;, &#39;id&#39;: 109089630999017748},</span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 0, &#39;transcript&#39;: &#39;Thank you for using Deepgram.&#39;, &#39;id&#39;: 124620676610936565},</span></span>
<span class="line"><span style="color: #c9d1d9">    {&#39;channel&#39;: 1, &#39;transcript&#39;: &#39;Have a good day.&#39;, &#39;id&#39;: 182036969834868158}]</span></span></code></pre>
<p>Lastly, we’ll add the <code>/transcribe</code> route and a templates folder with an <code>index.html</code> file that will display the phone speech-to-text transcript.</p>
<p>In the Python file, we’ll add the following code to get the voice-to-text transcript from the database and render them in the HTML template.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/transcribe&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribe_call</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    context </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> calls_db.getAll()</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render_template(</span><span style="color: #A5D6FF">&quot;index.html&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">context )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">    app.run(</span><span style="color: #FFA657">port</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">5000</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>We’ll create a folder in the project directory called <code>templates</code> and add an <code>index.html</code> file. In that file, we’ll add the following HTML and Jinja code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Transcript&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% for c in context %} {{ c.transcript }} &lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    {% endfor %}</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Then we’ll loop through every transcript and display it on the screen.</p>
<p>Finally, we’ll try making a phone call and using the non-Vonage phone to initiate a phone conversation with the phone number we provided in the environment variable <code>VONAGE_NUMBER</code>. We should be able to receive a call and engage in a conversation. After we hang up, the transcript will appear in the browser when we navigate to <code>http://127.0.0.1:5000/transcribe</code>.</p>
<p>Congratulations on building a speech-to-text Python project with Vonage and Deepgram! If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/deepgram-with-vonage/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
