import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                          *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
/* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "collision-detection", "text": "Collision Detection" }, { "depth": 3, "slug": "example-blocking-walls", "text": "Example: Blocking Walls" }, { "depth": 2, "slug": "entity-management", "text": "Entity Management" }, { "depth": 2, "slug": "keeping-score", "text": "Keeping Score" }, { "depth": 2, "slug": "starting-winning-and-losing", "text": "Starting, Winning, and Losing" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "\r\nThis is the second in a three-part series on P5.js (from here 'P5') - a creative coding library that makes working with the Canvas API much easier. [In part one](https://blog.deepgram.com/p5js-getting-started/), we covered how to draw elements on the screen and react to keyboard and mouse input.\r\n\r\nToday, we're taking that theoretical knowledge and building some features you may need when creating a game. Then, in next week's final part, we will add voice functionality to our game using Deepgram.\r\n\r\n## Collision Detection\r\n\r\nEvery element you draw in a P5 sketch has a specific placement and size. Collision detection in games lets you know when one element overlaps with another or touches a location such as a wall. This is often used to avoid users going through walls or floors or to 'pick up' items such as food or hearts.\r\n\r\nAssuming a collision check between you (the 'player') and another entity (a 'pick up'), a collision detection relies on four conditional checks:\r\n\r\n1.  Is your x position greater than the leftmost x position of the pickup?\r\n2.  Is your x position less than the rightmost x position of the pickup?\r\n3.  Is your y position greater than the topmost y position of the pickup?\r\n4.  Is your y position less than the bottommost y position of the pickup?\r\n\r\nLet's start putting this into practice. Create an `index.html` file, open it in your code editor, and add the following to it:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head></head>\r\n<body>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js\"><\/script>\r\n    <script>\r\n        const pickupX = 200\r\n        const pickupY = 50\r\n        const pickupSize = 100\r\n\r\n        function setup() {\r\n            createCanvas(500, 200)\r\n        }\r\n\r\n        function draw() {\r\n            background(100)\r\n\r\n            const collisionX = mouseX>pickupX && mouseX<pickupX+pickupSize\r\n            const collisionY = mouseY>pickupY && mouseY<pickupY+pickupSize\r\n            if(collisionX && collisionY) fill('green')\r\n            else fill('red')\r\n\r\n            square(pickupX, pickupY, pickupSize)\r\n        }\r\n    <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\nTo see your sketch running, just double click the `index.html` file in your file explorer and it will open in your default browser. To see new changes once you save your code, refresh the browser.\r\n\r\n![A gray canvas has a red square in the middle. When the mouse cursor touches the box, the square goes green.](https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/mouse-collision.gif)\r\n\r\nIf the player is bigger than a single pixel point, you need to offset the conditionals by the size of the player. Try this:\r\n\r\n```js\r\nconst pickupX = 225\r\nconst pickupY = 75\r\nconst pickupSize = 50\r\nconst playerSize = 50\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    fill('black')\r\n    square(pickupX, pickupY, pickupSize)\r\n\r\n    const collisionX = mouseX>pickupX-pickupSize && mouseX<pickupX+pickupSize\r\n    const collisionY = mouseY>pickupY-pickupSize && mouseY<pickupY+pickupSize\r\n    if(collisionX && collisionY) fill('green')\r\n    else fill('white')\r\n\r\n    square(mouseX, mouseY, playerSize)\r\n}\r\n```\r\n\r\n![On the bottom-right of the cursor is a white box which moves with the cursor. When it touches the box in the middle, the box goes green.](https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/square-collision.gif)\r\n\r\nIf you want to learn more about collision detection, check out [this lovely video](https://www.youtube.com/watch?v=uAfw-ko3kB8) by Dan Shiffman.\r\n\r\n### Example: Blocking Walls\r\n\r\nThe P5-provided `width` and `height` variables are always set to the canvas values provided in `createCanvas()`. You can use these along with the collision detection conditionals above to ensure a user cannot navigate outside of the canvas.\r\n\r\nExpanding on our keyboard user input introduction in [last week's post](https://blog.deepgram.com/p5js-getting-started/), try this:\r\n\r\n```js\r\nlet playerX = 20\r\nlet playerY = 20\r\nconst playerSize = 10\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    if(keyIsPressed) {\r\n        if(key == 'ArrowLeft') playerX -= 1\r\n        if(key == 'ArrowRight') playerX += 1\r\n        if(key == 'ArrowUp') playerY -= 1\r\n        if(key == 'ArrowDown') playerY += 1\r\n    }\r\n\r\n    // Not allowing out-of-bounds values\r\n    if(playerX < 0) playerX = 0\r\n    if(playerX > width - playerSize) playerX = width - playerSize\r\n    if(playerY < 0) playerY = 0\r\n    if(playerY > height - playerSize) playerY = height - playerSize\r\n\r\n    square(playerX, playerY, playerSize)\r\n}\r\n```\r\n\r\nIf a player attempts to set `playerX` or `playerY` outside of the allowed bounds, they are set at the bounds. This means a player will see their square stop moving.\r\n\r\n## Entity Management\r\n\r\nGames often have many entities: players, enemies, and items. Entities of the same category likely have similar logic but need to maintain their own state. In P5 sketches, it's common to use JavaScript classes for game entity management. Classes provide a blueprint for an object. They have their own properties, including data and functions (called 'methods' in a class). Try this code, and then we'll walk through it:\r\n\r\n```js\r\nconst bubbles = []\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n    for(let i = 0; i < 100; i++) {\r\n        bubbles.push(new Bubble(250, 100))\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n    for(let bubble of bubbles) {\r\n        bubble.move()\r\n        bubble.display()\r\n    }\r\n}\r\n\r\nclass Bubble {\r\n    constructor(x, y) {\r\n        this.x = x\r\n        this.y = y\r\n        this.xOff = random(0, 1000)\r\n        this.yOff = random(0, 1000)\r\n    }\r\n\r\n    move() {\r\n        this.xOff += 0.01\r\n        this.yOff += 0.01\r\n\r\n        this.x = noise(this.xOff) * width\r\n        this.y = noise(this.yOff) * height\r\n    }\r\n\r\n    display() {\r\n        circle(this.x, this.y, 5)\r\n    }\r\n}\r\n```\r\n\r\n![On a gray canvas, 100 small white circles move around.](https://res.cloudinary.com/deepgram/image/upload/v1646780529/blog/2022/03/p5js-game-logic/perlin.gif)\r\n\r\nStarting at the bottom with the `Bubble` class. When a new class instance is created, it expects a starting x and y value, which is made available inside of the class as member properties called `this.x` and `this.y`. Two other member properties are also created - `xOff` (x offset) and `yOff` (y offset). More on these later.\r\n\r\nThis class has two methods - you can name methods whatever you want, but `move` and `display` are common in P5 sketches.\r\n\r\nThe `move()` method uses the P5-provided `noise()` function to return a value in a Perlin noise sequence. Perlin noise generates a random value that exists in a more natural-looking sequence - by very slightly modifying the value passed into `noise()`, the bubbles look to follow a 'path.' The small changes in `xOff` and `yOff` are used to move the bubbles smoothly. Perlin noise is fascinating, and I encourage you to [read more about `noise()`](https://p5js.org/reference/#/p5/noise).\r\n\r\nThe `display()` method draws a circle at the new values stored in `this.x` and `this.y`.\r\n\r\nDuring `setup()`, 100 `Bubble` instances are created with a starting position of `(250, 100)` and stored in the `bubbles` array. Every `draw()`, each `bubble` has it's `move()` and `display()` methods run.\r\n\r\nThe next example combines collision detection and entity management:\r\n\r\n```js\r\nconst bubbles = []\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n    frameRate(10)\r\n    for(let i = 0; i < 10; i++) {\r\n        bubbles.push(new Bubble(250, 100))\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n    for(let bubble of bubbles) {\r\n        bubble.move()\r\n        bubble.checkIfTouched()\r\n        bubble.display()\r\n    }\r\n}\r\n\r\nclass Bubble {\r\n    constructor(x, y) {\r\n        this.x = x\r\n        this.y = y\r\n        this.xOff = random(0, 1000)\r\n        this.yOff = random(0, 1000)\r\n\r\n        this.radius = 10\r\n        this.touched = false\r\n    }\r\n\r\n    move() {\r\n        this.xOff += 0.01\r\n        this.yOff += 0.01\r\n\r\n        this.x = noise(this.xOff) * width\r\n        this.y = noise(this.yOff) * height\r\n    }\r\n\r\n    checkIfTouched() {\r\n        const d = dist(mouseX, mouseY, this.x, this.y)\r\n        if(d < this.radius) {\r\n            this.touched = true\r\n        }\r\n    }\r\n\r\n    display() {\r\n        if(this.touched) fill('green')\r\n        else fill('white')\r\n        circle(this.x, this.y, this.radius * 2)\r\n    }\r\n}\r\n```\r\n\r\nWhat's changed?\r\n\r\n1.  The `frameRate(10)` function in `setup()` drastically slows down the rate at which `draw()` is run from about 60 times per second to 10. This is only done to make this game playable.\r\n2.  There are only ten instances of `Bubble` created instead of 100.\r\n3.  Two new properties are now included in `Bubble` - `radius` and `touched`. The `radius` is used in the collision detection and when drawing the bubble.\r\n4.  A new `checkifTouched()` method is included in `Bubble`. This method determines the distance (`dist()`) between the mouse position and the bubble center (x, y). If it is less than the radius, you know a collision has taken place and set `this.touched` to `true`.\r\n5.  The color of the bubble changed once touched.\r\n6.  The `checkIfTouched()` method is called for every bubble in `draw()`.\r\n\r\n![10 larger white circles move around the canvas. When the cursor touches them, they turn green permanently.](https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/dist.gif)\r\n\r\n## Keeping Score\r\n\r\nCurrently, every bubble currently tracks its own state, but there is no global indication of how a player has scored. This can be implemented with a global variable. Follow these steps:\r\n\r\n1.  Add a global variable called `score` with a value of `0`.\r\n2.  Inside of the `Bubble.checkIfTouched()` method, before `this.touched` is set to `true`, check if `this.touched` is still false, and then  also increment `score`.\r\n3.  In the `draw()` function, set the color to white using `fill('white')`, and then display the `score` by using `text()`.\r\n\r\nIn case you don't remember the parameters for `text()` that we went over in the previous post, `text()` takes three arguments - the text to display, and the (x,y) coordinates.\r\n\r\nFor step 2, the additional check is required to stop `score` incrementing more than once. If successful, your sketch should function like this:\r\n\r\n![When circles are hovered over, they go green and a number in the top-left goes up by 1.](https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/score.gif)\r\n\r\n## Starting, Winning, and Losing\r\n\r\nMost games have a number of states - a landing page on load, the game itself, and an endgame. This state can often be held in global scope, and code that runs in `draw()` can be altered as a result. Leaving your `Bubble` class unchanged, try this to implement game state management:\r\n\r\n```js\r\nconst bubbles = []\r\nlet score = 0\r\nlet win = false\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n    frameRate(10)\r\n    for(let i = 0; i < 3; i++) {\r\n        bubbles.push(new Bubble(250, 100))\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    if(score >= 3) win = true\r\n\r\n    if(!win) {\r\n        for(let bubble of bubbles) {\r\n            bubble.move()\r\n            bubble.checkIfTouched()\r\n            bubble.display()\r\n        }\r\n        fill('white')\r\n        text(score, 10, 20)\r\n    } else {\r\n        textSize(36)\r\n        textAlign(CENTER)\r\n        text('You Win!', width/2, height/2-16)\r\n    }\r\n}\r\n```\r\n\r\nThe `win` variable starts as false, and when the `score` reaches three or more, the game logic stops running, and the text 'You Win!' will be shown instead.\r\n\r\nThis is a simplistic example, but the same approach can be taken to implement more game states.\r\n\r\n![3 white circles move on the canvas. When the mouse cursor touches them they go green and the score goes up by one. When all 3 are green, the game ends and the text \"You win\" is displayed on the screen.](https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/win.gif)\r\n\r\n## In Summary\r\n\r\nTogether with the first post in this series, I hope you have the tools you need to build a fun game with P5.js with these game logic implementations. For further inspiration, here are some of my favorite P5 examples:\r\n\r\n*   [Particles in a flow field](https://openprocessing.org/sketch/1245844) - this example uses perlin noise in a way which may help further illustrate how it works.\r\n*   [A game of snake](https://p5js.org/examples/interaction-snake-game.html)\r\n*   [Full 2D platformer game](https://editor.p5js.org/L0808866/sketches/lvURvk4QN)\r\n*   [A kaleidoscope drawing program](https://p5js.org/examples/interaction-kaleidoscope.html)\r\n*   [Interactive artwork with animated interactive stars](https://openprocessing.org/sketch/570102)\r\n*   [A generative painting program](https://p5js.org/examples/hello-p5-drawing.html)\r\n*   [John Conway's Game of Life cellular automata](https://p5js.org/examples/simulate-game-of-life.html)\r\n*   [L-Systems generative art](https://p5js.org/examples/simulate-l-systems.html)\r\n*   [Applying realistic forces like gravity](https://p5js.org/examples/simulate-forces.html)\r\n*   [Rainbow meatballs shader](https://openprocessing.org/sketch/838276) - this involved writing a shader which is an advanced topic but it looks extremely cool.\r\n\r\nNext week in the third and final part of this series, we'll cover how to integrate voice into your P5 sketches. Until then, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs) if you have any questions or thoughts.\r\n\r\n        ", "html": `<p>This is the second in a three-part series on P5.js (from here \u2018P5\u2019) - a creative coding library that makes working with the Canvas API much easier. <a href="https://blog.deepgram.com/p5js-getting-started/">In part one</a>, we covered how to draw elements on the screen and react to keyboard and mouse input.</p>
<p>Today, we\u2019re taking that theoretical knowledge and building some features you may need when creating a game. Then, in next week\u2019s final part, we will add voice functionality to our game using Deepgram.</p>
<h2 id="collision-detection">Collision Detection</h2>
<p>Every element you draw in a P5 sketch has a specific placement and size. Collision detection in games lets you know when one element overlaps with another or touches a location such as a wall. This is often used to avoid users going through walls or floors or to \u2018pick up\u2019 items such as food or hearts.</p>
<p>Assuming a collision check between you (the \u2018player\u2019) and another entity (a \u2018pick up\u2019), a collision detection relies on four conditional checks:</p>
<ol>
<li>Is your x position greater than the leftmost x position of the pickup?</li>
<li>Is your x position less than the rightmost x position of the pickup?</li>
<li>Is your y position greater than the topmost y position of the pickup?</li>
<li>Is your y position less than the bottommost y position of the pickup?</li>
</ol>
<p>Let\u2019s start putting this into practice. Create an <code is:raw>index.html</code> file, open it in your code editor, and add the following to it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">200</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupY </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(collisionX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> collisionY) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(pickupX, pickupY, pickupSize)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>To see your sketch running, just double click the <code is:raw>index.html</code> file in your file explorer and it will open in your default browser. To see new changes once you save your code, refresh the browser.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/mouse-collision.gif" alt="A gray canvas has a red square in the middle. When the mouse cursor touches the box, the square goes green."></p>
<p>If the player is bigger than a single pixel point, you need to offset the conditionals by the size of the player. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">225</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">75</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">playerSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;black&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(pickupX, pickupY, pickupSize)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">pickupSize </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">pickupSize </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(collisionX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> collisionY) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(mouseX, mouseY, playerSize)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/square-collision.gif" alt="On the bottom-right of the cursor is a white box which moves with the cursor. When it touches the box in the middle, the box goes green."></p>
<p>If you want to learn more about collision detection, check out <a href="https://www.youtube.com/watch?v=uAfw-ko3kB8">this lovely video</a> by Dan Shiffman.</p>
<h3 id="example-blocking-walls">Example: Blocking Walls</h3>
<p>The P5-provided <code is:raw>width</code> and <code is:raw>height</code> variables are always set to the canvas values provided in <code is:raw>createCanvas()</code>. You can use these along with the collision detection conditionals above to ensure a user cannot navigate outside of the canvas.</p>
<p>Expanding on our keyboard user input introduction in <a href="https://blog.deepgram.com/p5js-getting-started/">last week\u2019s post</a>, try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">playerSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(keyIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Not allowing out-of-bounds values</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerX </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerX </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize) playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerY </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerY </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> height </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize) playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(playerX, playerY, playerSize)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>If a player attempts to set <code is:raw>playerX</code> or <code is:raw>playerY</code> outside of the allowed bounds, they are set at the bounds. This means a player will see their square stop moving.</p>
<h2 id="entity-management">Entity Management</h2>
<p>Games often have many entities: players, enemies, and items. Entities of the same category likely have similar logic but need to maintain their own state. In P5 sketches, it\u2019s common to use JavaScript classes for game entity management. Classes provide a blueprint for an object. They have their own properties, including data and functions (called \u2018methods\u2019 in a class). Try this code, and then we\u2019ll walk through it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bubble</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">x</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">y</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> x</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> y</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> height</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780529/blog/2022/03/p5js-game-logic/perlin.gif" alt="On a gray canvas, 100 small white circles move around."></p>
<p>Starting at the bottom with the <code is:raw>Bubble</code> class. When a new class instance is created, it expects a starting x and y value, which is made available inside of the class as member properties called <code is:raw>this.x</code> and <code is:raw>this.y</code>. Two other member properties are also created - <code is:raw>xOff</code> (x offset) and <code is:raw>yOff</code> (y offset). More on these later.</p>
<p>This class has two methods - you can name methods whatever you want, but <code is:raw>move</code> and <code is:raw>display</code> are common in P5 sketches.</p>
<p>The <code is:raw>move()</code> method uses the P5-provided <code is:raw>noise()</code> function to return a value in a Perlin noise sequence. Perlin noise generates a random value that exists in a more natural-looking sequence - by very slightly modifying the value passed into <code is:raw>noise()</code>, the bubbles look to follow a \u2018path.\u2019 The small changes in <code is:raw>xOff</code> and <code is:raw>yOff</code> are used to move the bubbles smoothly. Perlin noise is fascinating, and I encourage you to <a href="https://p5js.org/reference/#/p5/noise">read more about <code is:raw>noise()</code></a>.</p>
<p>The <code is:raw>display()</code> method draws a circle at the new values stored in <code is:raw>this.x</code> and <code is:raw>this.y</code>.</p>
<p>During <code is:raw>setup()</code>, 100 <code is:raw>Bubble</code> instances are created with a starting position of <code is:raw>(250, 100)</code> and stored in the <code is:raw>bubbles</code> array. Every <code is:raw>draw()</code>, each <code is:raw>bubble</code> has it\u2019s <code is:raw>move()</code> and <code is:raw>display()</code> methods run.</p>
<p>The next example combines collision detection and entity management:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bubble</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">x</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">y</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> x</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> y</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> height</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(mouseX, mouseY, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius) {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>What\u2019s changed?</p>
<ol>
<li>The <code is:raw>frameRate(10)</code> function in <code is:raw>setup()</code> drastically slows down the rate at which <code is:raw>draw()</code> is run from about 60 times per second to 10. This is only done to make this game playable.</li>
<li>There are only ten instances of <code is:raw>Bubble</code> created instead of 100.</li>
<li>Two new properties are now included in <code is:raw>Bubble</code> - <code is:raw>radius</code> and <code is:raw>touched</code>. The <code is:raw>radius</code> is used in the collision detection and when drawing the bubble.</li>
<li>A new <code is:raw>checkifTouched()</code> method is included in <code is:raw>Bubble</code>. This method determines the distance (<code is:raw>dist()</code>) between the mouse position and the bubble center (x, y). If it is less than the radius, you know a collision has taken place and set <code is:raw>this.touched</code> to <code is:raw>true</code>.</li>
<li>The color of the bubble changed once touched.</li>
<li>The <code is:raw>checkIfTouched()</code> method is called for every bubble in <code is:raw>draw()</code>.</li>
</ol>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/dist.gif" alt="10 larger white circles move around the canvas. When the cursor touches them, they turn green permanently."></p>
<h2 id="keeping-score">Keeping Score</h2>
<p>Currently, every bubble currently tracks its own state, but there is no global indication of how a player has scored. This can be implemented with a global variable. Follow these steps:</p>
<ol>
<li>Add a global variable called <code is:raw>score</code> with a value of <code is:raw>0</code>.</li>
<li>Inside of the <code is:raw>Bubble.checkIfTouched()</code> method, before <code is:raw>this.touched</code> is set to <code is:raw>true</code>, check if <code is:raw>this.touched</code> is still false, and then  also increment <code is:raw>score</code>.</li>
<li>In the <code is:raw>draw()</code> function, set the color to white using <code is:raw>fill('white')</code>, and then display the <code is:raw>score</code> by using <code is:raw>text()</code>.</li>
</ol>
<p>In case you don\u2019t remember the parameters for <code is:raw>text()</code> that we went over in the previous post, <code is:raw>text()</code> takes three arguments - the text to display, and the (x,y) coordinates.</p>
<p>For step 2, the additional check is required to stop <code is:raw>score</code> incrementing more than once. If successful, your sketch should function like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/score.gif" alt="When circles are hovered over, they go green and a number in the top-left goes up by 1."></p>
<h2 id="starting-winning-and-losing">Starting, Winning, and Losing</h2>
<p>Most games have a number of states - a landing page on load, the game itself, and an endgame. This state can often be held in global scope, and code that runs in <code is:raw>draw()</code> can be altered as a result. Leaving your <code is:raw>Bubble</code> class unchanged, try this to implement game state management:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> score </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> win </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(score </span><span style="color: #FF7B72">&gt;=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">) win </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">win) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(score, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">36</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You Win!&#39;</span><span style="color: #C9D1D9">, width</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, height</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">16</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code is:raw>win</code> variable starts as false, and when the <code is:raw>score</code> reaches three or more, the game logic stops running, and the text \u2018You Win!\u2019 will be shown instead.</p>
<p>This is a simplistic example, but the same approach can be taken to implement more game states.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/win.gif" alt="3 white circles move on the canvas. When the mouse cursor touches them they go green and the score goes up by one. When all 3 are green, the game ends and the text &#x22;You win&#x22; is displayed on the screen."></p>
<h2 id="in-summary">In Summary</h2>
<p>Together with the first post in this series, I hope you have the tools you need to build a fun game with P5.js with these game logic implementations. For further inspiration, here are some of my favorite P5 examples:</p>
<ul>
<li><a href="https://openprocessing.org/sketch/1245844">Particles in a flow field</a> - this example uses perlin noise in a way which may help further illustrate how it works.</li>
<li><a href="https://p5js.org/examples/interaction-snake-game.html">A game of snake</a></li>
<li><a href="https://editor.p5js.org/L0808866/sketches/lvURvk4QN">Full 2D platformer game</a></li>
<li><a href="https://p5js.org/examples/interaction-kaleidoscope.html">A kaleidoscope drawing program</a></li>
<li><a href="https://openprocessing.org/sketch/570102">Interactive artwork with animated interactive stars</a></li>
<li><a href="https://p5js.org/examples/hello-p5-drawing.html">A generative painting program</a></li>
<li><a href="https://p5js.org/examples/simulate-game-of-life.html">John Conway\u2019s Game of Life cellular automata</a></li>
<li><a href="https://p5js.org/examples/simulate-l-systems.html">L-Systems generative art</a></li>
<li><a href="https://p5js.org/examples/simulate-forces.html">Applying realistic forces like gravity</a></li>
<li><a href="https://openprocessing.org/sketch/838276">Rainbow meatballs shader</a> - this involved writing a shader which is an advanced topic but it looks extremely cool.</li>
</ul>
<p>Next week in the third and final part of this series, we\u2019ll cover how to integrate voice into your P5 sketches. Until then, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> if you have any questions or thoughts.</p>` };
const frontmatter = { "title": "Playing With P5.js: Implementing Game Logic", "description": "In this post, we'll use P5.js to implement collision detection, manage entities with classes, and handle game state. Learn more now.", "date": "2022-03-15T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1646780523/blog/2022/03/p5js-game-logic/Playing-with-p5js%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["javascript", "p5js", "beginner"], "seo": { "title": "Playing With P5.js: Implementing Game Logic", "description": "In this post, we'll use P5.js to implement collision detection, manage entities with classes, and handle game state. Learn more now." }, "shorturls": { "share": "https://dpgr.am/5e8b30b", "twitter": "https://dpgr.am/f15c93a", "linkedin": "https://dpgr.am/13a6df7", "reddit": "https://dpgr.am/060133c", "facebook": "https://dpgr.am/9b5bbd1" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454042/blog/p5js-game-logic/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "collision-detection", "text": "Collision Detection" }, { "depth": 3, "slug": "example-blocking-walls", "text": "Example: Blocking Walls" }, { "depth": 2, "slug": "entity-management", "text": "Entity Management" }, { "depth": 2, "slug": "keeping-score", "text": "Keeping Score" }, { "depth": 2, "slug": "starting-winning-and-losing", "text": "Starting, Winning, and Losing" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "\r\nThis is the second in a three-part series on P5.js (from here 'P5') - a creative coding library that makes working with the Canvas API much easier. [In part one](https://blog.deepgram.com/p5js-getting-started/), we covered how to draw elements on the screen and react to keyboard and mouse input.\r\n\r\nToday, we're taking that theoretical knowledge and building some features you may need when creating a game. Then, in next week's final part, we will add voice functionality to our game using Deepgram.\r\n\r\n## Collision Detection\r\n\r\nEvery element you draw in a P5 sketch has a specific placement and size. Collision detection in games lets you know when one element overlaps with another or touches a location such as a wall. This is often used to avoid users going through walls or floors or to 'pick up' items such as food or hearts.\r\n\r\nAssuming a collision check between you (the 'player') and another entity (a 'pick up'), a collision detection relies on four conditional checks:\r\n\r\n1.  Is your x position greater than the leftmost x position of the pickup?\r\n2.  Is your x position less than the rightmost x position of the pickup?\r\n3.  Is your y position greater than the topmost y position of the pickup?\r\n4.  Is your y position less than the bottommost y position of the pickup?\r\n\r\nLet's start putting this into practice. Create an `index.html` file, open it in your code editor, and add the following to it:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head></head>\r\n<body>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js\"><\/script>\r\n    <script>\r\n        const pickupX = 200\r\n        const pickupY = 50\r\n        const pickupSize = 100\r\n\r\n        function setup() {\r\n            createCanvas(500, 200)\r\n        }\r\n\r\n        function draw() {\r\n            background(100)\r\n\r\n            const collisionX = mouseX>pickupX && mouseX<pickupX+pickupSize\r\n            const collisionY = mouseY>pickupY && mouseY<pickupY+pickupSize\r\n            if(collisionX && collisionY) fill('green')\r\n            else fill('red')\r\n\r\n            square(pickupX, pickupY, pickupSize)\r\n        }\r\n    <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\nTo see your sketch running, just double click the `index.html` file in your file explorer and it will open in your default browser. To see new changes once you save your code, refresh the browser.\r\n\r\n![A gray canvas has a red square in the middle. When the mouse cursor touches the box, the square goes green.](https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/mouse-collision.gif)\r\n\r\nIf the player is bigger than a single pixel point, you need to offset the conditionals by the size of the player. Try this:\r\n\r\n```js\r\nconst pickupX = 225\r\nconst pickupY = 75\r\nconst pickupSize = 50\r\nconst playerSize = 50\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    fill('black')\r\n    square(pickupX, pickupY, pickupSize)\r\n\r\n    const collisionX = mouseX>pickupX-pickupSize && mouseX<pickupX+pickupSize\r\n    const collisionY = mouseY>pickupY-pickupSize && mouseY<pickupY+pickupSize\r\n    if(collisionX && collisionY) fill('green')\r\n    else fill('white')\r\n\r\n    square(mouseX, mouseY, playerSize)\r\n}\r\n```\r\n\r\n![On the bottom-right of the cursor is a white box which moves with the cursor. When it touches the box in the middle, the box goes green.](https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/square-collision.gif)\r\n\r\nIf you want to learn more about collision detection, check out [this lovely video](https://www.youtube.com/watch?v=uAfw-ko3kB8) by Dan Shiffman.\r\n\r\n### Example: Blocking Walls\r\n\r\nThe P5-provided `width` and `height` variables are always set to the canvas values provided in `createCanvas()`. You can use these along with the collision detection conditionals above to ensure a user cannot navigate outside of the canvas.\r\n\r\nExpanding on our keyboard user input introduction in [last week's post](https://blog.deepgram.com/p5js-getting-started/), try this:\r\n\r\n```js\r\nlet playerX = 20\r\nlet playerY = 20\r\nconst playerSize = 10\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    if(keyIsPressed) {\r\n        if(key == 'ArrowLeft') playerX -= 1\r\n        if(key == 'ArrowRight') playerX += 1\r\n        if(key == 'ArrowUp') playerY -= 1\r\n        if(key == 'ArrowDown') playerY += 1\r\n    }\r\n\r\n    // Not allowing out-of-bounds values\r\n    if(playerX < 0) playerX = 0\r\n    if(playerX > width - playerSize) playerX = width - playerSize\r\n    if(playerY < 0) playerY = 0\r\n    if(playerY > height - playerSize) playerY = height - playerSize\r\n\r\n    square(playerX, playerY, playerSize)\r\n}\r\n```\r\n\r\nIf a player attempts to set `playerX` or `playerY` outside of the allowed bounds, they are set at the bounds. This means a player will see their square stop moving.\r\n\r\n## Entity Management\r\n\r\nGames often have many entities: players, enemies, and items. Entities of the same category likely have similar logic but need to maintain their own state. In P5 sketches, it's common to use JavaScript classes for game entity management. Classes provide a blueprint for an object. They have their own properties, including data and functions (called 'methods' in a class). Try this code, and then we'll walk through it:\r\n\r\n```js\r\nconst bubbles = []\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n    for(let i = 0; i < 100; i++) {\r\n        bubbles.push(new Bubble(250, 100))\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n    for(let bubble of bubbles) {\r\n        bubble.move()\r\n        bubble.display()\r\n    }\r\n}\r\n\r\nclass Bubble {\r\n    constructor(x, y) {\r\n        this.x = x\r\n        this.y = y\r\n        this.xOff = random(0, 1000)\r\n        this.yOff = random(0, 1000)\r\n    }\r\n\r\n    move() {\r\n        this.xOff += 0.01\r\n        this.yOff += 0.01\r\n\r\n        this.x = noise(this.xOff) * width\r\n        this.y = noise(this.yOff) * height\r\n    }\r\n\r\n    display() {\r\n        circle(this.x, this.y, 5)\r\n    }\r\n}\r\n```\r\n\r\n![On a gray canvas, 100 small white circles move around.](https://res.cloudinary.com/deepgram/image/upload/v1646780529/blog/2022/03/p5js-game-logic/perlin.gif)\r\n\r\nStarting at the bottom with the `Bubble` class. When a new class instance is created, it expects a starting x and y value, which is made available inside of the class as member properties called `this.x` and `this.y`. Two other member properties are also created - `xOff` (x offset) and `yOff` (y offset). More on these later.\r\n\r\nThis class has two methods - you can name methods whatever you want, but `move` and `display` are common in P5 sketches.\r\n\r\nThe `move()` method uses the P5-provided `noise()` function to return a value in a Perlin noise sequence. Perlin noise generates a random value that exists in a more natural-looking sequence - by very slightly modifying the value passed into `noise()`, the bubbles look to follow a 'path.' The small changes in `xOff` and `yOff` are used to move the bubbles smoothly. Perlin noise is fascinating, and I encourage you to [read more about `noise()`](https://p5js.org/reference/#/p5/noise).\r\n\r\nThe `display()` method draws a circle at the new values stored in `this.x` and `this.y`.\r\n\r\nDuring `setup()`, 100 `Bubble` instances are created with a starting position of `(250, 100)` and stored in the `bubbles` array. Every `draw()`, each `bubble` has it's `move()` and `display()` methods run.\r\n\r\nThe next example combines collision detection and entity management:\r\n\r\n```js\r\nconst bubbles = []\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n    frameRate(10)\r\n    for(let i = 0; i < 10; i++) {\r\n        bubbles.push(new Bubble(250, 100))\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n    for(let bubble of bubbles) {\r\n        bubble.move()\r\n        bubble.checkIfTouched()\r\n        bubble.display()\r\n    }\r\n}\r\n\r\nclass Bubble {\r\n    constructor(x, y) {\r\n        this.x = x\r\n        this.y = y\r\n        this.xOff = random(0, 1000)\r\n        this.yOff = random(0, 1000)\r\n\r\n        this.radius = 10\r\n        this.touched = false\r\n    }\r\n\r\n    move() {\r\n        this.xOff += 0.01\r\n        this.yOff += 0.01\r\n\r\n        this.x = noise(this.xOff) * width\r\n        this.y = noise(this.yOff) * height\r\n    }\r\n\r\n    checkIfTouched() {\r\n        const d = dist(mouseX, mouseY, this.x, this.y)\r\n        if(d < this.radius) {\r\n            this.touched = true\r\n        }\r\n    }\r\n\r\n    display() {\r\n        if(this.touched) fill('green')\r\n        else fill('white')\r\n        circle(this.x, this.y, this.radius * 2)\r\n    }\r\n}\r\n```\r\n\r\nWhat's changed?\r\n\r\n1.  The `frameRate(10)` function in `setup()` drastically slows down the rate at which `draw()` is run from about 60 times per second to 10. This is only done to make this game playable.\r\n2.  There are only ten instances of `Bubble` created instead of 100.\r\n3.  Two new properties are now included in `Bubble` - `radius` and `touched`. The `radius` is used in the collision detection and when drawing the bubble.\r\n4.  A new `checkifTouched()` method is included in `Bubble`. This method determines the distance (`dist()`) between the mouse position and the bubble center (x, y). If it is less than the radius, you know a collision has taken place and set `this.touched` to `true`.\r\n5.  The color of the bubble changed once touched.\r\n6.  The `checkIfTouched()` method is called for every bubble in `draw()`.\r\n\r\n![10 larger white circles move around the canvas. When the cursor touches them, they turn green permanently.](https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/dist.gif)\r\n\r\n## Keeping Score\r\n\r\nCurrently, every bubble currently tracks its own state, but there is no global indication of how a player has scored. This can be implemented with a global variable. Follow these steps:\r\n\r\n1.  Add a global variable called `score` with a value of `0`.\r\n2.  Inside of the `Bubble.checkIfTouched()` method, before `this.touched` is set to `true`, check if `this.touched` is still false, and then  also increment `score`.\r\n3.  In the `draw()` function, set the color to white using `fill('white')`, and then display the `score` by using `text()`.\r\n\r\nIn case you don't remember the parameters for `text()` that we went over in the previous post, `text()` takes three arguments - the text to display, and the (x,y) coordinates.\r\n\r\nFor step 2, the additional check is required to stop `score` incrementing more than once. If successful, your sketch should function like this:\r\n\r\n![When circles are hovered over, they go green and a number in the top-left goes up by 1.](https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/score.gif)\r\n\r\n## Starting, Winning, and Losing\r\n\r\nMost games have a number of states - a landing page on load, the game itself, and an endgame. This state can often be held in global scope, and code that runs in `draw()` can be altered as a result. Leaving your `Bubble` class unchanged, try this to implement game state management:\r\n\r\n```js\r\nconst bubbles = []\r\nlet score = 0\r\nlet win = false\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n    frameRate(10)\r\n    for(let i = 0; i < 3; i++) {\r\n        bubbles.push(new Bubble(250, 100))\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    if(score >= 3) win = true\r\n\r\n    if(!win) {\r\n        for(let bubble of bubbles) {\r\n            bubble.move()\r\n            bubble.checkIfTouched()\r\n            bubble.display()\r\n        }\r\n        fill('white')\r\n        text(score, 10, 20)\r\n    } else {\r\n        textSize(36)\r\n        textAlign(CENTER)\r\n        text('You Win!', width/2, height/2-16)\r\n    }\r\n}\r\n```\r\n\r\nThe `win` variable starts as false, and when the `score` reaches three or more, the game logic stops running, and the text 'You Win!' will be shown instead.\r\n\r\nThis is a simplistic example, but the same approach can be taken to implement more game states.\r\n\r\n![3 white circles move on the canvas. When the mouse cursor touches them they go green and the score goes up by one. When all 3 are green, the game ends and the text \"You win\" is displayed on the screen.](https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/win.gif)\r\n\r\n## In Summary\r\n\r\nTogether with the first post in this series, I hope you have the tools you need to build a fun game with P5.js with these game logic implementations. For further inspiration, here are some of my favorite P5 examples:\r\n\r\n*   [Particles in a flow field](https://openprocessing.org/sketch/1245844) - this example uses perlin noise in a way which may help further illustrate how it works.\r\n*   [A game of snake](https://p5js.org/examples/interaction-snake-game.html)\r\n*   [Full 2D platformer game](https://editor.p5js.org/L0808866/sketches/lvURvk4QN)\r\n*   [A kaleidoscope drawing program](https://p5js.org/examples/interaction-kaleidoscope.html)\r\n*   [Interactive artwork with animated interactive stars](https://openprocessing.org/sketch/570102)\r\n*   [A generative painting program](https://p5js.org/examples/hello-p5-drawing.html)\r\n*   [John Conway's Game of Life cellular automata](https://p5js.org/examples/simulate-game-of-life.html)\r\n*   [L-Systems generative art](https://p5js.org/examples/simulate-l-systems.html)\r\n*   [Applying realistic forces like gravity](https://p5js.org/examples/simulate-forces.html)\r\n*   [Rainbow meatballs shader](https://openprocessing.org/sketch/838276) - this involved writing a shader which is an advanced topic but it looks extremely cool.\r\n\r\nNext week in the third and final part of this series, we'll cover how to integrate voice into your P5 sketches. Until then, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs) if you have any questions or thoughts.\r\n\r\n        ", "html": `<p>This is the second in a three-part series on P5.js (from here \u2018P5\u2019) - a creative coding library that makes working with the Canvas API much easier. <a href="https://blog.deepgram.com/p5js-getting-started/">In part one</a>, we covered how to draw elements on the screen and react to keyboard and mouse input.</p>
<p>Today, we\u2019re taking that theoretical knowledge and building some features you may need when creating a game. Then, in next week\u2019s final part, we will add voice functionality to our game using Deepgram.</p>
<h2 id="collision-detection">Collision Detection</h2>
<p>Every element you draw in a P5 sketch has a specific placement and size. Collision detection in games lets you know when one element overlaps with another or touches a location such as a wall. This is often used to avoid users going through walls or floors or to \u2018pick up\u2019 items such as food or hearts.</p>
<p>Assuming a collision check between you (the \u2018player\u2019) and another entity (a \u2018pick up\u2019), a collision detection relies on four conditional checks:</p>
<ol>
<li>Is your x position greater than the leftmost x position of the pickup?</li>
<li>Is your x position less than the rightmost x position of the pickup?</li>
<li>Is your y position greater than the topmost y position of the pickup?</li>
<li>Is your y position less than the bottommost y position of the pickup?</li>
</ol>
<p>Let\u2019s start putting this into practice. Create an <code is:raw>index.html</code> file, open it in your code editor, and add the following to it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">200</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupY </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(collisionX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> collisionY) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(pickupX, pickupY, pickupSize)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>To see your sketch running, just double click the <code is:raw>index.html</code> file in your file explorer and it will open in your default browser. To see new changes once you save your code, refresh the browser.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/mouse-collision.gif" alt="A gray canvas has a red square in the middle. When the mouse cursor touches the box, the square goes green."></p>
<p>If the player is bigger than a single pixel point, you need to offset the conditionals by the size of the player. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">225</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">75</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">playerSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;black&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(pickupX, pickupY, pickupSize)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">pickupSize </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">pickupSize </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(collisionX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> collisionY) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(mouseX, mouseY, playerSize)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/square-collision.gif" alt="On the bottom-right of the cursor is a white box which moves with the cursor. When it touches the box in the middle, the box goes green."></p>
<p>If you want to learn more about collision detection, check out <a href="https://www.youtube.com/watch?v=uAfw-ko3kB8">this lovely video</a> by Dan Shiffman.</p>
<h3 id="example-blocking-walls">Example: Blocking Walls</h3>
<p>The P5-provided <code is:raw>width</code> and <code is:raw>height</code> variables are always set to the canvas values provided in <code is:raw>createCanvas()</code>. You can use these along with the collision detection conditionals above to ensure a user cannot navigate outside of the canvas.</p>
<p>Expanding on our keyboard user input introduction in <a href="https://blog.deepgram.com/p5js-getting-started/">last week\u2019s post</a>, try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">playerSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(keyIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Not allowing out-of-bounds values</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerX </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerX </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize) playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerY </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerY </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> height </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize) playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(playerX, playerY, playerSize)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>If a player attempts to set <code is:raw>playerX</code> or <code is:raw>playerY</code> outside of the allowed bounds, they are set at the bounds. This means a player will see their square stop moving.</p>
<h2 id="entity-management">Entity Management</h2>
<p>Games often have many entities: players, enemies, and items. Entities of the same category likely have similar logic but need to maintain their own state. In P5 sketches, it\u2019s common to use JavaScript classes for game entity management. Classes provide a blueprint for an object. They have their own properties, including data and functions (called \u2018methods\u2019 in a class). Try this code, and then we\u2019ll walk through it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bubble</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">x</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">y</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> x</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> y</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> height</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780529/blog/2022/03/p5js-game-logic/perlin.gif" alt="On a gray canvas, 100 small white circles move around."></p>
<p>Starting at the bottom with the <code is:raw>Bubble</code> class. When a new class instance is created, it expects a starting x and y value, which is made available inside of the class as member properties called <code is:raw>this.x</code> and <code is:raw>this.y</code>. Two other member properties are also created - <code is:raw>xOff</code> (x offset) and <code is:raw>yOff</code> (y offset). More on these later.</p>
<p>This class has two methods - you can name methods whatever you want, but <code is:raw>move</code> and <code is:raw>display</code> are common in P5 sketches.</p>
<p>The <code is:raw>move()</code> method uses the P5-provided <code is:raw>noise()</code> function to return a value in a Perlin noise sequence. Perlin noise generates a random value that exists in a more natural-looking sequence - by very slightly modifying the value passed into <code is:raw>noise()</code>, the bubbles look to follow a \u2018path.\u2019 The small changes in <code is:raw>xOff</code> and <code is:raw>yOff</code> are used to move the bubbles smoothly. Perlin noise is fascinating, and I encourage you to <a href="https://p5js.org/reference/#/p5/noise">read more about <code is:raw>noise()</code></a>.</p>
<p>The <code is:raw>display()</code> method draws a circle at the new values stored in <code is:raw>this.x</code> and <code is:raw>this.y</code>.</p>
<p>During <code is:raw>setup()</code>, 100 <code is:raw>Bubble</code> instances are created with a starting position of <code is:raw>(250, 100)</code> and stored in the <code is:raw>bubbles</code> array. Every <code is:raw>draw()</code>, each <code is:raw>bubble</code> has it\u2019s <code is:raw>move()</code> and <code is:raw>display()</code> methods run.</p>
<p>The next example combines collision detection and entity management:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bubble</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">x</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">y</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> x</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> y</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> height</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(mouseX, mouseY, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius) {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>What\u2019s changed?</p>
<ol>
<li>The <code is:raw>frameRate(10)</code> function in <code is:raw>setup()</code> drastically slows down the rate at which <code is:raw>draw()</code> is run from about 60 times per second to 10. This is only done to make this game playable.</li>
<li>There are only ten instances of <code is:raw>Bubble</code> created instead of 100.</li>
<li>Two new properties are now included in <code is:raw>Bubble</code> - <code is:raw>radius</code> and <code is:raw>touched</code>. The <code is:raw>radius</code> is used in the collision detection and when drawing the bubble.</li>
<li>A new <code is:raw>checkifTouched()</code> method is included in <code is:raw>Bubble</code>. This method determines the distance (<code is:raw>dist()</code>) between the mouse position and the bubble center (x, y). If it is less than the radius, you know a collision has taken place and set <code is:raw>this.touched</code> to <code is:raw>true</code>.</li>
<li>The color of the bubble changed once touched.</li>
<li>The <code is:raw>checkIfTouched()</code> method is called for every bubble in <code is:raw>draw()</code>.</li>
</ol>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/dist.gif" alt="10 larger white circles move around the canvas. When the cursor touches them, they turn green permanently."></p>
<h2 id="keeping-score">Keeping Score</h2>
<p>Currently, every bubble currently tracks its own state, but there is no global indication of how a player has scored. This can be implemented with a global variable. Follow these steps:</p>
<ol>
<li>Add a global variable called <code is:raw>score</code> with a value of <code is:raw>0</code>.</li>
<li>Inside of the <code is:raw>Bubble.checkIfTouched()</code> method, before <code is:raw>this.touched</code> is set to <code is:raw>true</code>, check if <code is:raw>this.touched</code> is still false, and then  also increment <code is:raw>score</code>.</li>
<li>In the <code is:raw>draw()</code> function, set the color to white using <code is:raw>fill('white')</code>, and then display the <code is:raw>score</code> by using <code is:raw>text()</code>.</li>
</ol>
<p>In case you don\u2019t remember the parameters for <code is:raw>text()</code> that we went over in the previous post, <code is:raw>text()</code> takes three arguments - the text to display, and the (x,y) coordinates.</p>
<p>For step 2, the additional check is required to stop <code is:raw>score</code> incrementing more than once. If successful, your sketch should function like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/score.gif" alt="When circles are hovered over, they go green and a number in the top-left goes up by 1."></p>
<h2 id="starting-winning-and-losing">Starting, Winning, and Losing</h2>
<p>Most games have a number of states - a landing page on load, the game itself, and an endgame. This state can often be held in global scope, and code that runs in <code is:raw>draw()</code> can be altered as a result. Leaving your <code is:raw>Bubble</code> class unchanged, try this to implement game state management:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> score </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> win </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(score </span><span style="color: #FF7B72">&gt;=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">) win </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">win) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(score, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">36</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You Win!&#39;</span><span style="color: #C9D1D9">, width</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, height</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">16</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code is:raw>win</code> variable starts as false, and when the <code is:raw>score</code> reaches three or more, the game logic stops running, and the text \u2018You Win!\u2019 will be shown instead.</p>
<p>This is a simplistic example, but the same approach can be taken to implement more game states.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/win.gif" alt="3 white circles move on the canvas. When the mouse cursor touches them they go green and the score goes up by one. When all 3 are green, the game ends and the text &#x22;You win&#x22; is displayed on the screen."></p>
<h2 id="in-summary">In Summary</h2>
<p>Together with the first post in this series, I hope you have the tools you need to build a fun game with P5.js with these game logic implementations. For further inspiration, here are some of my favorite P5 examples:</p>
<ul>
<li><a href="https://openprocessing.org/sketch/1245844">Particles in a flow field</a> - this example uses perlin noise in a way which may help further illustrate how it works.</li>
<li><a href="https://p5js.org/examples/interaction-snake-game.html">A game of snake</a></li>
<li><a href="https://editor.p5js.org/L0808866/sketches/lvURvk4QN">Full 2D platformer game</a></li>
<li><a href="https://p5js.org/examples/interaction-kaleidoscope.html">A kaleidoscope drawing program</a></li>
<li><a href="https://openprocessing.org/sketch/570102">Interactive artwork with animated interactive stars</a></li>
<li><a href="https://p5js.org/examples/hello-p5-drawing.html">A generative painting program</a></li>
<li><a href="https://p5js.org/examples/simulate-game-of-life.html">John Conway\u2019s Game of Life cellular automata</a></li>
<li><a href="https://p5js.org/examples/simulate-l-systems.html">L-Systems generative art</a></li>
<li><a href="https://p5js.org/examples/simulate-forces.html">Applying realistic forces like gravity</a></li>
<li><a href="https://openprocessing.org/sketch/838276">Rainbow meatballs shader</a> - this involved writing a shader which is an advanced topic but it looks extremely cool.</li>
</ul>
<p>Next week in the third and final part of this series, we\u2019ll cover how to integrate voice into your P5 sketches. Until then, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> if you have any questions or thoughts.</p>` }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/p5js-game-logic/index.md" };
function rawContent() {
  return "\r\nThis is the second in a three-part series on P5.js (from here 'P5') - a creative coding library that makes working with the Canvas API much easier. [In part one](https://blog.deepgram.com/p5js-getting-started/), we covered how to draw elements on the screen and react to keyboard and mouse input.\r\n\r\nToday, we're taking that theoretical knowledge and building some features you may need when creating a game. Then, in next week's final part, we will add voice functionality to our game using Deepgram.\r\n\r\n## Collision Detection\r\n\r\nEvery element you draw in a P5 sketch has a specific placement and size. Collision detection in games lets you know when one element overlaps with another or touches a location such as a wall. This is often used to avoid users going through walls or floors or to 'pick up' items such as food or hearts.\r\n\r\nAssuming a collision check between you (the 'player') and another entity (a 'pick up'), a collision detection relies on four conditional checks:\r\n\r\n1.  Is your x position greater than the leftmost x position of the pickup?\r\n2.  Is your x position less than the rightmost x position of the pickup?\r\n3.  Is your y position greater than the topmost y position of the pickup?\r\n4.  Is your y position less than the bottommost y position of the pickup?\r\n\r\nLet's start putting this into practice. Create an `index.html` file, open it in your code editor, and add the following to it:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head></head>\r\n<body>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js\"><\/script>\r\n    <script>\r\n        const pickupX = 200\r\n        const pickupY = 50\r\n        const pickupSize = 100\r\n\r\n        function setup() {\r\n            createCanvas(500, 200)\r\n        }\r\n\r\n        function draw() {\r\n            background(100)\r\n\r\n            const collisionX = mouseX>pickupX && mouseX<pickupX+pickupSize\r\n            const collisionY = mouseY>pickupY && mouseY<pickupY+pickupSize\r\n            if(collisionX && collisionY) fill('green')\r\n            else fill('red')\r\n\r\n            square(pickupX, pickupY, pickupSize)\r\n        }\r\n    <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\nTo see your sketch running, just double click the `index.html` file in your file explorer and it will open in your default browser. To see new changes once you save your code, refresh the browser.\r\n\r\n![A gray canvas has a red square in the middle. When the mouse cursor touches the box, the square goes green.](https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/mouse-collision.gif)\r\n\r\nIf the player is bigger than a single pixel point, you need to offset the conditionals by the size of the player. Try this:\r\n\r\n```js\r\nconst pickupX = 225\r\nconst pickupY = 75\r\nconst pickupSize = 50\r\nconst playerSize = 50\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    fill('black')\r\n    square(pickupX, pickupY, pickupSize)\r\n\r\n    const collisionX = mouseX>pickupX-pickupSize && mouseX<pickupX+pickupSize\r\n    const collisionY = mouseY>pickupY-pickupSize && mouseY<pickupY+pickupSize\r\n    if(collisionX && collisionY) fill('green')\r\n    else fill('white')\r\n\r\n    square(mouseX, mouseY, playerSize)\r\n}\r\n```\r\n\r\n![On the bottom-right of the cursor is a white box which moves with the cursor. When it touches the box in the middle, the box goes green.](https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/square-collision.gif)\r\n\r\nIf you want to learn more about collision detection, check out [this lovely video](https://www.youtube.com/watch?v=uAfw-ko3kB8) by Dan Shiffman.\r\n\r\n### Example: Blocking Walls\r\n\r\nThe P5-provided `width` and `height` variables are always set to the canvas values provided in `createCanvas()`. You can use these along with the collision detection conditionals above to ensure a user cannot navigate outside of the canvas.\r\n\r\nExpanding on our keyboard user input introduction in [last week's post](https://blog.deepgram.com/p5js-getting-started/), try this:\r\n\r\n```js\r\nlet playerX = 20\r\nlet playerY = 20\r\nconst playerSize = 10\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    if(keyIsPressed) {\r\n        if(key == 'ArrowLeft') playerX -= 1\r\n        if(key == 'ArrowRight') playerX += 1\r\n        if(key == 'ArrowUp') playerY -= 1\r\n        if(key == 'ArrowDown') playerY += 1\r\n    }\r\n\r\n    // Not allowing out-of-bounds values\r\n    if(playerX < 0) playerX = 0\r\n    if(playerX > width - playerSize) playerX = width - playerSize\r\n    if(playerY < 0) playerY = 0\r\n    if(playerY > height - playerSize) playerY = height - playerSize\r\n\r\n    square(playerX, playerY, playerSize)\r\n}\r\n```\r\n\r\nIf a player attempts to set `playerX` or `playerY` outside of the allowed bounds, they are set at the bounds. This means a player will see their square stop moving.\r\n\r\n## Entity Management\r\n\r\nGames often have many entities: players, enemies, and items. Entities of the same category likely have similar logic but need to maintain their own state. In P5 sketches, it's common to use JavaScript classes for game entity management. Classes provide a blueprint for an object. They have their own properties, including data and functions (called 'methods' in a class). Try this code, and then we'll walk through it:\r\n\r\n```js\r\nconst bubbles = []\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n    for(let i = 0; i < 100; i++) {\r\n        bubbles.push(new Bubble(250, 100))\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n    for(let bubble of bubbles) {\r\n        bubble.move()\r\n        bubble.display()\r\n    }\r\n}\r\n\r\nclass Bubble {\r\n    constructor(x, y) {\r\n        this.x = x\r\n        this.y = y\r\n        this.xOff = random(0, 1000)\r\n        this.yOff = random(0, 1000)\r\n    }\r\n\r\n    move() {\r\n        this.xOff += 0.01\r\n        this.yOff += 0.01\r\n\r\n        this.x = noise(this.xOff) * width\r\n        this.y = noise(this.yOff) * height\r\n    }\r\n\r\n    display() {\r\n        circle(this.x, this.y, 5)\r\n    }\r\n}\r\n```\r\n\r\n![On a gray canvas, 100 small white circles move around.](https://res.cloudinary.com/deepgram/image/upload/v1646780529/blog/2022/03/p5js-game-logic/perlin.gif)\r\n\r\nStarting at the bottom with the `Bubble` class. When a new class instance is created, it expects a starting x and y value, which is made available inside of the class as member properties called `this.x` and `this.y`. Two other member properties are also created - `xOff` (x offset) and `yOff` (y offset). More on these later.\r\n\r\nThis class has two methods - you can name methods whatever you want, but `move` and `display` are common in P5 sketches.\r\n\r\nThe `move()` method uses the P5-provided `noise()` function to return a value in a Perlin noise sequence. Perlin noise generates a random value that exists in a more natural-looking sequence - by very slightly modifying the value passed into `noise()`, the bubbles look to follow a 'path.' The small changes in `xOff` and `yOff` are used to move the bubbles smoothly. Perlin noise is fascinating, and I encourage you to [read more about `noise()`](https://p5js.org/reference/#/p5/noise).\r\n\r\nThe `display()` method draws a circle at the new values stored in `this.x` and `this.y`.\r\n\r\nDuring `setup()`, 100 `Bubble` instances are created with a starting position of `(250, 100)` and stored in the `bubbles` array. Every `draw()`, each `bubble` has it's `move()` and `display()` methods run.\r\n\r\nThe next example combines collision detection and entity management:\r\n\r\n```js\r\nconst bubbles = []\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n    frameRate(10)\r\n    for(let i = 0; i < 10; i++) {\r\n        bubbles.push(new Bubble(250, 100))\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n    for(let bubble of bubbles) {\r\n        bubble.move()\r\n        bubble.checkIfTouched()\r\n        bubble.display()\r\n    }\r\n}\r\n\r\nclass Bubble {\r\n    constructor(x, y) {\r\n        this.x = x\r\n        this.y = y\r\n        this.xOff = random(0, 1000)\r\n        this.yOff = random(0, 1000)\r\n\r\n        this.radius = 10\r\n        this.touched = false\r\n    }\r\n\r\n    move() {\r\n        this.xOff += 0.01\r\n        this.yOff += 0.01\r\n\r\n        this.x = noise(this.xOff) * width\r\n        this.y = noise(this.yOff) * height\r\n    }\r\n\r\n    checkIfTouched() {\r\n        const d = dist(mouseX, mouseY, this.x, this.y)\r\n        if(d < this.radius) {\r\n            this.touched = true\r\n        }\r\n    }\r\n\r\n    display() {\r\n        if(this.touched) fill('green')\r\n        else fill('white')\r\n        circle(this.x, this.y, this.radius * 2)\r\n    }\r\n}\r\n```\r\n\r\nWhat's changed?\r\n\r\n1.  The `frameRate(10)` function in `setup()` drastically slows down the rate at which `draw()` is run from about 60 times per second to 10. This is only done to make this game playable.\r\n2.  There are only ten instances of `Bubble` created instead of 100.\r\n3.  Two new properties are now included in `Bubble` - `radius` and `touched`. The `radius` is used in the collision detection and when drawing the bubble.\r\n4.  A new `checkifTouched()` method is included in `Bubble`. This method determines the distance (`dist()`) between the mouse position and the bubble center (x, y). If it is less than the radius, you know a collision has taken place and set `this.touched` to `true`.\r\n5.  The color of the bubble changed once touched.\r\n6.  The `checkIfTouched()` method is called for every bubble in `draw()`.\r\n\r\n![10 larger white circles move around the canvas. When the cursor touches them, they turn green permanently.](https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/dist.gif)\r\n\r\n## Keeping Score\r\n\r\nCurrently, every bubble currently tracks its own state, but there is no global indication of how a player has scored. This can be implemented with a global variable. Follow these steps:\r\n\r\n1.  Add a global variable called `score` with a value of `0`.\r\n2.  Inside of the `Bubble.checkIfTouched()` method, before `this.touched` is set to `true`, check if `this.touched` is still false, and then  also increment `score`.\r\n3.  In the `draw()` function, set the color to white using `fill('white')`, and then display the `score` by using `text()`.\r\n\r\nIn case you don't remember the parameters for `text()` that we went over in the previous post, `text()` takes three arguments - the text to display, and the (x,y) coordinates.\r\n\r\nFor step 2, the additional check is required to stop `score` incrementing more than once. If successful, your sketch should function like this:\r\n\r\n![When circles are hovered over, they go green and a number in the top-left goes up by 1.](https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/score.gif)\r\n\r\n## Starting, Winning, and Losing\r\n\r\nMost games have a number of states - a landing page on load, the game itself, and an endgame. This state can often be held in global scope, and code that runs in `draw()` can be altered as a result. Leaving your `Bubble` class unchanged, try this to implement game state management:\r\n\r\n```js\r\nconst bubbles = []\r\nlet score = 0\r\nlet win = false\r\n\r\nfunction setup() {\r\n    createCanvas(500, 200)\r\n    frameRate(10)\r\n    for(let i = 0; i < 3; i++) {\r\n        bubbles.push(new Bubble(250, 100))\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    if(score >= 3) win = true\r\n\r\n    if(!win) {\r\n        for(let bubble of bubbles) {\r\n            bubble.move()\r\n            bubble.checkIfTouched()\r\n            bubble.display()\r\n        }\r\n        fill('white')\r\n        text(score, 10, 20)\r\n    } else {\r\n        textSize(36)\r\n        textAlign(CENTER)\r\n        text('You Win!', width/2, height/2-16)\r\n    }\r\n}\r\n```\r\n\r\nThe `win` variable starts as false, and when the `score` reaches three or more, the game logic stops running, and the text 'You Win!' will be shown instead.\r\n\r\nThis is a simplistic example, but the same approach can be taken to implement more game states.\r\n\r\n![3 white circles move on the canvas. When the mouse cursor touches them they go green and the score goes up by one. When all 3 are green, the game ends and the text \"You win\" is displayed on the screen.](https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/win.gif)\r\n\r\n## In Summary\r\n\r\nTogether with the first post in this series, I hope you have the tools you need to build a fun game with P5.js with these game logic implementations. For further inspiration, here are some of my favorite P5 examples:\r\n\r\n*   [Particles in a flow field](https://openprocessing.org/sketch/1245844) - this example uses perlin noise in a way which may help further illustrate how it works.\r\n*   [A game of snake](https://p5js.org/examples/interaction-snake-game.html)\r\n*   [Full 2D platformer game](https://editor.p5js.org/L0808866/sketches/lvURvk4QN)\r\n*   [A kaleidoscope drawing program](https://p5js.org/examples/interaction-kaleidoscope.html)\r\n*   [Interactive artwork with animated interactive stars](https://openprocessing.org/sketch/570102)\r\n*   [A generative painting program](https://p5js.org/examples/hello-p5-drawing.html)\r\n*   [John Conway's Game of Life cellular automata](https://p5js.org/examples/simulate-game-of-life.html)\r\n*   [L-Systems generative art](https://p5js.org/examples/simulate-l-systems.html)\r\n*   [Applying realistic forces like gravity](https://p5js.org/examples/simulate-forces.html)\r\n*   [Rainbow meatballs shader](https://openprocessing.org/sketch/838276) - this involved writing a shader which is an advanced topic but it looks extremely cool.\r\n\r\nNext week in the third and final part of this series, we'll cover how to integrate voice into your P5 sketches. Until then, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs) if you have any questions or thoughts.\r\n\r\n        ";
}
function compiledContent() {
  return `<p>This is the second in a three-part series on P5.js (from here \u2018P5\u2019) - a creative coding library that makes working with the Canvas API much easier. <a href="https://blog.deepgram.com/p5js-getting-started/">In part one</a>, we covered how to draw elements on the screen and react to keyboard and mouse input.</p>
<p>Today, we\u2019re taking that theoretical knowledge and building some features you may need when creating a game. Then, in next week\u2019s final part, we will add voice functionality to our game using Deepgram.</p>
<h2 id="collision-detection">Collision Detection</h2>
<p>Every element you draw in a P5 sketch has a specific placement and size. Collision detection in games lets you know when one element overlaps with another or touches a location such as a wall. This is often used to avoid users going through walls or floors or to \u2018pick up\u2019 items such as food or hearts.</p>
<p>Assuming a collision check between you (the \u2018player\u2019) and another entity (a \u2018pick up\u2019), a collision detection relies on four conditional checks:</p>
<ol>
<li>Is your x position greater than the leftmost x position of the pickup?</li>
<li>Is your x position less than the rightmost x position of the pickup?</li>
<li>Is your y position greater than the topmost y position of the pickup?</li>
<li>Is your y position less than the bottommost y position of the pickup?</li>
</ol>
<p>Let\u2019s start putting this into practice. Create an <code is:raw>index.html</code> file, open it in your code editor, and add the following to it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">200</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupY </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(collisionX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> collisionY) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(pickupX, pickupY, pickupSize)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>To see your sketch running, just double click the <code is:raw>index.html</code> file in your file explorer and it will open in your default browser. To see new changes once you save your code, refresh the browser.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/mouse-collision.gif" alt="A gray canvas has a red square in the middle. When the mouse cursor touches the box, the square goes green."></p>
<p>If the player is bigger than a single pixel point, you need to offset the conditionals by the size of the player. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">225</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">75</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">playerSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;black&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(pickupX, pickupY, pickupSize)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">pickupSize </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">pickupSize </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(collisionX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> collisionY) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(mouseX, mouseY, playerSize)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/square-collision.gif" alt="On the bottom-right of the cursor is a white box which moves with the cursor. When it touches the box in the middle, the box goes green."></p>
<p>If you want to learn more about collision detection, check out <a href="https://www.youtube.com/watch?v=uAfw-ko3kB8">this lovely video</a> by Dan Shiffman.</p>
<h3 id="example-blocking-walls">Example: Blocking Walls</h3>
<p>The P5-provided <code is:raw>width</code> and <code is:raw>height</code> variables are always set to the canvas values provided in <code is:raw>createCanvas()</code>. You can use these along with the collision detection conditionals above to ensure a user cannot navigate outside of the canvas.</p>
<p>Expanding on our keyboard user input introduction in <a href="https://blog.deepgram.com/p5js-getting-started/">last week\u2019s post</a>, try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">playerSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(keyIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Not allowing out-of-bounds values</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerX </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerX </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize) playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerY </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerY </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> height </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize) playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(playerX, playerY, playerSize)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>If a player attempts to set <code is:raw>playerX</code> or <code is:raw>playerY</code> outside of the allowed bounds, they are set at the bounds. This means a player will see their square stop moving.</p>
<h2 id="entity-management">Entity Management</h2>
<p>Games often have many entities: players, enemies, and items. Entities of the same category likely have similar logic but need to maintain their own state. In P5 sketches, it\u2019s common to use JavaScript classes for game entity management. Classes provide a blueprint for an object. They have their own properties, including data and functions (called \u2018methods\u2019 in a class). Try this code, and then we\u2019ll walk through it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bubble</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">x</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">y</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> x</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> y</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> height</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780529/blog/2022/03/p5js-game-logic/perlin.gif" alt="On a gray canvas, 100 small white circles move around."></p>
<p>Starting at the bottom with the <code is:raw>Bubble</code> class. When a new class instance is created, it expects a starting x and y value, which is made available inside of the class as member properties called <code is:raw>this.x</code> and <code is:raw>this.y</code>. Two other member properties are also created - <code is:raw>xOff</code> (x offset) and <code is:raw>yOff</code> (y offset). More on these later.</p>
<p>This class has two methods - you can name methods whatever you want, but <code is:raw>move</code> and <code is:raw>display</code> are common in P5 sketches.</p>
<p>The <code is:raw>move()</code> method uses the P5-provided <code is:raw>noise()</code> function to return a value in a Perlin noise sequence. Perlin noise generates a random value that exists in a more natural-looking sequence - by very slightly modifying the value passed into <code is:raw>noise()</code>, the bubbles look to follow a \u2018path.\u2019 The small changes in <code is:raw>xOff</code> and <code is:raw>yOff</code> are used to move the bubbles smoothly. Perlin noise is fascinating, and I encourage you to <a href="https://p5js.org/reference/#/p5/noise">read more about <code is:raw>noise()</code></a>.</p>
<p>The <code is:raw>display()</code> method draws a circle at the new values stored in <code is:raw>this.x</code> and <code is:raw>this.y</code>.</p>
<p>During <code is:raw>setup()</code>, 100 <code is:raw>Bubble</code> instances are created with a starting position of <code is:raw>(250, 100)</code> and stored in the <code is:raw>bubbles</code> array. Every <code is:raw>draw()</code>, each <code is:raw>bubble</code> has it\u2019s <code is:raw>move()</code> and <code is:raw>display()</code> methods run.</p>
<p>The next example combines collision detection and entity management:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bubble</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">x</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">y</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> x</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> y</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> height</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(mouseX, mouseY, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius) {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>What\u2019s changed?</p>
<ol>
<li>The <code is:raw>frameRate(10)</code> function in <code is:raw>setup()</code> drastically slows down the rate at which <code is:raw>draw()</code> is run from about 60 times per second to 10. This is only done to make this game playable.</li>
<li>There are only ten instances of <code is:raw>Bubble</code> created instead of 100.</li>
<li>Two new properties are now included in <code is:raw>Bubble</code> - <code is:raw>radius</code> and <code is:raw>touched</code>. The <code is:raw>radius</code> is used in the collision detection and when drawing the bubble.</li>
<li>A new <code is:raw>checkifTouched()</code> method is included in <code is:raw>Bubble</code>. This method determines the distance (<code is:raw>dist()</code>) between the mouse position and the bubble center (x, y). If it is less than the radius, you know a collision has taken place and set <code is:raw>this.touched</code> to <code is:raw>true</code>.</li>
<li>The color of the bubble changed once touched.</li>
<li>The <code is:raw>checkIfTouched()</code> method is called for every bubble in <code is:raw>draw()</code>.</li>
</ol>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/dist.gif" alt="10 larger white circles move around the canvas. When the cursor touches them, they turn green permanently."></p>
<h2 id="keeping-score">Keeping Score</h2>
<p>Currently, every bubble currently tracks its own state, but there is no global indication of how a player has scored. This can be implemented with a global variable. Follow these steps:</p>
<ol>
<li>Add a global variable called <code is:raw>score</code> with a value of <code is:raw>0</code>.</li>
<li>Inside of the <code is:raw>Bubble.checkIfTouched()</code> method, before <code is:raw>this.touched</code> is set to <code is:raw>true</code>, check if <code is:raw>this.touched</code> is still false, and then  also increment <code is:raw>score</code>.</li>
<li>In the <code is:raw>draw()</code> function, set the color to white using <code is:raw>fill('white')</code>, and then display the <code is:raw>score</code> by using <code is:raw>text()</code>.</li>
</ol>
<p>In case you don\u2019t remember the parameters for <code is:raw>text()</code> that we went over in the previous post, <code is:raw>text()</code> takes three arguments - the text to display, and the (x,y) coordinates.</p>
<p>For step 2, the additional check is required to stop <code is:raw>score</code> incrementing more than once. If successful, your sketch should function like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/score.gif" alt="When circles are hovered over, they go green and a number in the top-left goes up by 1."></p>
<h2 id="starting-winning-and-losing">Starting, Winning, and Losing</h2>
<p>Most games have a number of states - a landing page on load, the game itself, and an endgame. This state can often be held in global scope, and code that runs in <code is:raw>draw()</code> can be altered as a result. Leaving your <code is:raw>Bubble</code> class unchanged, try this to implement game state management:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> score </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> win </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(score </span><span style="color: #FF7B72">&gt;=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">) win </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">win) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(score, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">36</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You Win!&#39;</span><span style="color: #C9D1D9">, width</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, height</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">16</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code is:raw>win</code> variable starts as false, and when the <code is:raw>score</code> reaches three or more, the game logic stops running, and the text \u2018You Win!\u2019 will be shown instead.</p>
<p>This is a simplistic example, but the same approach can be taken to implement more game states.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/win.gif" alt="3 white circles move on the canvas. When the mouse cursor touches them they go green and the score goes up by one. When all 3 are green, the game ends and the text &#x22;You win&#x22; is displayed on the screen."></p>
<h2 id="in-summary">In Summary</h2>
<p>Together with the first post in this series, I hope you have the tools you need to build a fun game with P5.js with these game logic implementations. For further inspiration, here are some of my favorite P5 examples:</p>
<ul>
<li><a href="https://openprocessing.org/sketch/1245844">Particles in a flow field</a> - this example uses perlin noise in a way which may help further illustrate how it works.</li>
<li><a href="https://p5js.org/examples/interaction-snake-game.html">A game of snake</a></li>
<li><a href="https://editor.p5js.org/L0808866/sketches/lvURvk4QN">Full 2D platformer game</a></li>
<li><a href="https://p5js.org/examples/interaction-kaleidoscope.html">A kaleidoscope drawing program</a></li>
<li><a href="https://openprocessing.org/sketch/570102">Interactive artwork with animated interactive stars</a></li>
<li><a href="https://p5js.org/examples/hello-p5-drawing.html">A generative painting program</a></li>
<li><a href="https://p5js.org/examples/simulate-game-of-life.html">John Conway\u2019s Game of Life cellular automata</a></li>
<li><a href="https://p5js.org/examples/simulate-l-systems.html">L-Systems generative art</a></li>
<li><a href="https://p5js.org/examples/simulate-forces.html">Applying realistic forces like gravity</a></li>
<li><a href="https://openprocessing.org/sketch/838276">Rainbow meatballs shader</a> - this involved writing a shader which is an advanced topic but it looks extremely cool.</li>
</ul>
<p>Next week in the third and final part of this series, we\u2019ll cover how to integrate voice into your P5 sketches. Until then, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> if you have any questions or thoughts.</p>`;
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/p5js-game-logic/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>This is the second in a three-part series on P5.js (from here ‘P5’) - a creative coding library that makes working with the Canvas API much easier. <a href="https://blog.deepgram.com/p5js-getting-started/">In part one</a>, we covered how to draw elements on the screen and react to keyboard and mouse input.</p>
<p>Today, we’re taking that theoretical knowledge and building some features you may need when creating a game. Then, in next week’s final part, we will add voice functionality to our game using Deepgram.</p>
<h2 id="collision-detection">Collision Detection</h2>
<p>Every element you draw in a P5 sketch has a specific placement and size. Collision detection in games lets you know when one element overlaps with another or touches a location such as a wall. This is often used to avoid users going through walls or floors or to ‘pick up’ items such as food or hearts.</p>
<p>Assuming a collision check between you (the ‘player’) and another entity (a ‘pick up’), a collision detection relies on four conditional checks:</p>
<ol>
<li>Is your x position greater than the leftmost x position of the pickup?</li>
<li>Is your x position less than the rightmost x position of the pickup?</li>
<li>Is your y position greater than the topmost y position of the pickup?</li>
<li>Is your y position less than the bottommost y position of the pickup?</li>
</ol>
<p>Let’s start putting this into practice. Create an <code>index.html</code> file, open it in your code editor, and add the following to it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">200</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupY </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(collisionX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> collisionY) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(pickupX, pickupY, pickupSize)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>To see your sketch running, just double click the <code>index.html</code> file in your file explorer and it will open in your default browser. To see new changes once you save your code, refresh the browser.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/mouse-collision.gif" alt="A gray canvas has a red square in the middle. When the mouse cursor touches the box, the square goes green."></p>
<p>If the player is bigger than a single pixel point, you need to offset the conditionals by the size of the player. Try this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">225</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">75</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">pickupSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">playerSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">50</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;black&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(pickupX, pickupY, pickupSize)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">pickupSize </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseX</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupX</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">collisionY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9">pickupSize </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> mouseY</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">pickupY</span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">pickupSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(collisionX </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> collisionY) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(mouseX, mouseY, playerSize)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/square-collision.gif" alt="On the bottom-right of the cursor is a white box which moves with the cursor. When it touches the box in the middle, the box goes green."></p>
<p>If you want to learn more about collision detection, check out <a href="https://www.youtube.com/watch?v=uAfw-ko3kB8">this lovely video</a> by Dan Shiffman.</p>
<h3 id="example-blocking-walls">Example: Blocking Walls</h3>
<p>The P5-provided <code>width</code> and <code>height</code> variables are always set to the canvas values provided in <code>createCanvas()</code>. You can use these along with the collision detection conditionals above to ensure a user cannot navigate outside of the canvas.</p>
<p>Expanding on our keyboard user input introduction in <a href="https://blog.deepgram.com/p5js-getting-started/">last week’s post</a>, try this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">playerSize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(keyIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Not allowing out-of-bounds values</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerX </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerX </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize) playerX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> width </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerY </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(playerY </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> height </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize) playerY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> height </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> playerSize</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(playerX, playerY, playerSize)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>If a player attempts to set <code>playerX</code> or <code>playerY</code> outside of the allowed bounds, they are set at the bounds. This means a player will see their square stop moving.</p>
<h2 id="entity-management">Entity Management</h2>
<p>Games often have many entities: players, enemies, and items. Entities of the same category likely have similar logic but need to maintain their own state. In P5 sketches, it’s common to use JavaScript classes for game entity management. Classes provide a blueprint for an object. They have their own properties, including data and functions (called ‘methods’ in a class). Try this code, and then we’ll walk through it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bubble</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">x</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">y</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> x</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> y</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> height</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">5</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780529/blog/2022/03/p5js-game-logic/perlin.gif" alt="On a gray canvas, 100 small white circles move around."></p>
<p>Starting at the bottom with the <code>Bubble</code> class. When a new class instance is created, it expects a starting x and y value, which is made available inside of the class as member properties called <code>this.x</code> and <code>this.y</code>. Two other member properties are also created - <code>xOff</code> (x offset) and <code>yOff</code> (y offset). More on these later.</p>
<p>This class has two methods - you can name methods whatever you want, but <code>move</code> and <code>display</code> are common in P5 sketches.</p>
<p>The <code>move()</code> method uses the P5-provided <code>noise()</code> function to return a value in a Perlin noise sequence. Perlin noise generates a random value that exists in a more natural-looking sequence - by very slightly modifying the value passed into <code>noise()</code>, the bubbles look to follow a ‘path.’ The small changes in <code>xOff</code> and <code>yOff</code> are used to move the bubbles smoothly. Perlin noise is fascinating, and I encourage you to <a href="https://p5js.org/reference/#/p5/noise">read more about <code>noise()</code></a>.</p>
<p>The <code>display()</code> method draws a circle at the new values stored in <code>this.x</code> and <code>this.y</code>.</p>
<p>During <code>setup()</code>, 100 <code>Bubble</code> instances are created with a starting position of <code>(250, 100)</code> and stored in the <code>bubbles</code> array. Every <code>draw()</code>, each <code>bubble</code> has it’s <code>move()</code> and <code>display()</code> methods run.</p>
<p>The next example combines collision detection and entity management:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Bubble</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">constructor</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">x</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">y</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> x</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> y</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">10</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.01</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.xOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> width</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">noise</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.yOff) </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> height</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">dist</span><span style="color: #C9D1D9">(mouseX, mouseY, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(d </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius) {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.touched) </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.x, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.y, </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.radius </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>What’s changed?</p>
<ol>
<li>The <code>frameRate(10)</code> function in <code>setup()</code> drastically slows down the rate at which <code>draw()</code> is run from about 60 times per second to 10. This is only done to make this game playable.</li>
<li>There are only ten instances of <code>Bubble</code> created instead of 100.</li>
<li>Two new properties are now included in <code>Bubble</code> - <code>radius</code> and <code>touched</code>. The <code>radius</code> is used in the collision detection and when drawing the bubble.</li>
<li>A new <code>checkifTouched()</code> method is included in <code>Bubble</code>. This method determines the distance (<code>dist()</code>) between the mouse position and the bubble center (x, y). If it is less than the radius, you know a collision has taken place and set <code>this.touched</code> to <code>true</code>.</li>
<li>The color of the bubble changed once touched.</li>
<li>The <code>checkIfTouched()</code> method is called for every bubble in <code>draw()</code>.</li>
</ol>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/dist.gif" alt="10 larger white circles move around the canvas. When the cursor touches them, they turn green permanently."></p>
<h2 id="keeping-score">Keeping Score</h2>
<p>Currently, every bubble currently tracks its own state, but there is no global indication of how a player has scored. This can be implemented with a global variable. Follow these steps:</p>
<ol>
<li>Add a global variable called <code>score</code> with a value of <code>0</code>.</li>
<li>Inside of the <code>Bubble.checkIfTouched()</code> method, before <code>this.touched</code> is set to <code>true</code>, check if <code>this.touched</code> is still false, and then  also increment <code>score</code>.</li>
<li>In the <code>draw()</code> function, set the color to white using <code>fill('white')</code>, and then display the <code>score</code> by using <code>text()</code>.</li>
</ol>
<p>In case you don’t remember the parameters for <code>text()</code> that we went over in the previous post, <code>text()</code> takes three arguments - the text to display, and the (x,y) coordinates.</p>
<p>For step 2, the additional check is required to stop <code>score</code> incrementing more than once. If successful, your sketch should function like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780526/blog/2022/03/p5js-game-logic/score.gif" alt="When circles are hovered over, they go green and a number in the top-left goes up by 1."></p>
<h2 id="starting-winning-and-losing">Starting, Winning, and Losing</h2>
<p>Most games have a number of states - a landing page on load, the game itself, and an endgame. This state can often be held in global scope, and code that runs in <code>draw()</code> can be altered as a result. Leaving your <code>Bubble</code> class unchanged, try this to implement game state management:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bubbles</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> score </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> win </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">frameRate</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        bubbles.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Bubble</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(score </span><span style="color: #FF7B72">&gt;=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">) win </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">win) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bubble </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> bubbles) {</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">move</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">checkIfTouched</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">            bubble.</span><span style="color: #D2A8FF">display</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(score, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">36</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">textAlign</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">CENTER</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You Win!&#39;</span><span style="color: #C9D1D9">, width</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">, height</span><span style="color: #FF7B72">/</span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">16</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code>win</code> variable starts as false, and when the <code>score</code> reaches three or more, the game logic stops running, and the text ‘You Win!’ will be shown instead.</p>
<p>This is a simplistic example, but the same approach can be taken to implement more game states.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646780525/blog/2022/03/p5js-game-logic/win.gif" alt="3 white circles move on the canvas. When the mouse cursor touches them they go green and the score goes up by one. When all 3 are green, the game ends and the text &quot;You win&quot; is displayed on the screen."></p>
<h2 id="in-summary">In Summary</h2>
<p>Together with the first post in this series, I hope you have the tools you need to build a fun game with P5.js with these game logic implementations. For further inspiration, here are some of my favorite P5 examples:</p>
<ul>
<li><a href="https://openprocessing.org/sketch/1245844">Particles in a flow field</a> - this example uses perlin noise in a way which may help further illustrate how it works.</li>
<li><a href="https://p5js.org/examples/interaction-snake-game.html">A game of snake</a></li>
<li><a href="https://editor.p5js.org/L0808866/sketches/lvURvk4QN">Full 2D platformer game</a></li>
<li><a href="https://p5js.org/examples/interaction-kaleidoscope.html">A kaleidoscope drawing program</a></li>
<li><a href="https://openprocessing.org/sketch/570102">Interactive artwork with animated interactive stars</a></li>
<li><a href="https://p5js.org/examples/hello-p5-drawing.html">A generative painting program</a></li>
<li><a href="https://p5js.org/examples/simulate-game-of-life.html">John Conway’s Game of Life cellular automata</a></li>
<li><a href="https://p5js.org/examples/simulate-l-systems.html">L-Systems generative art</a></li>
<li><a href="https://p5js.org/examples/simulate-forces.html">Applying realistic forces like gravity</a></li>
<li><a href="https://openprocessing.org/sketch/838276">Rainbow meatballs shader</a> - this involved writing a shader which is an advanced topic but it looks extremely cool.</li>
</ul>
<p>Next week in the third and final part of this series, we’ll cover how to integrate voice into your P5 sketches. Until then, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> if you have any questions or thoughts.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/p5js-game-logic/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
