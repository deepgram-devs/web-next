import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "making-an-executable-script", "text": "Making an Executable Script" }, { "depth": 2, "slug": "handling-arguments", "text": "Handling Arguments" }, { "depth": 2, "slug": "executing-logic-from-main-package", "text": "Executing Logic From Main Package" }, { "depth": 2, "slug": "validating-command-inputs", "text": "Validating Command Inputs" }, { "depth": 2, "slug": "publishing--using-package", "text": "Publishing & Using Package" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\r\n<Alert type=\"info\">This post is effectively part 2 on building and publishing npm packages. If you haven't read the first post, you can do so [here](https://blog.deepgram.com/build-npm-packages/).</Alert>\r\n\r\nNode Package Manager (npm) allows JavaScript developers to manage and include packages in their projects. Bundled with npm is an additional utility - `npx` - which can be used to **run** Node.js scripts hosted in npm packages or at any other URL. Even if not already installed, it will download the package into a cache to execute the files.\r\n\r\nScripts with npx are often used to:\r\n\r\n*   Scaffold applications (`create-react-app` and `create-nuxt-app`)\r\n*   Run common long-living tooling (`nodemon`, `tailwindcss`, and `ngrok`)\r\n*   Make you smile (`workin-hard`, `cowsay`)\r\n\r\n[We showed you how to create an npm package in a previous blog post.](https://blog.deepgram.com/build-npm-packages) In this post, we'll extend on that sample project and build an npx command to interact with our package that queried [The Open Movie Database](http://www.omdbapi.com).\r\n\r\nThe final project code is available on the [npx branch of our npm-package repository](https://github.com/deepgram-devs/npm-package/tree/npx).\r\n\r\n## Before We Start\r\n\r\nYou will need:\r\n\r\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\r\n*   An npm account - [get one here](https://www.npmjs.com/signup).\r\n*   An Open Movie Database API Key - [get one here](http://www.omdbapi.com/apikey.aspx) and be sure to use the verification link in the email with the key.\r\n\r\nYou will also need to clone the previous project, open the new directory in your code editor of choice, and install the dependencies:\r\n\r\n```bash\r\ngit clone https://github.com/deepgram-devs/npm-package\r\ncd npm-package\r\nnpm install\r\n```\r\n\r\n## Making an Executable Script\r\n\r\nThere are four things you need to do to create an executable script:\r\n\r\n1.  Create a file specifically for this logic - commonly `bin.js`.\r\n2.  Specify the executable file in `package.json`.\r\n3.  Start the `bin.js` file with a 'shebang'.\r\n4.  Ensure the code in the file will run whenever the file is executed (not behind a function).\r\n\r\nCreate a `bin.js` file in your project, open `package.json`, and add a new `bin` property:\r\n\r\n```json\r\n{\r\n  \"name\": \"@username/first-package\",\r\n  \"version\": \"0.0.3\",\r\n  \"dependencies\": {\r\n    \"axios\": \"^0.24.0\"\r\n  },\r\n  \"bin\": \"./bin.js\"\r\n}\r\n```\r\n\r\nOnce the location of your executable file has been specified, it's time to create and populate the executable. Open `bin.js` in your code editor, make the first line a Node shebang, and then create a basic script that will run when the file is executed:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconsole.log('Hello world!')\r\n```\r\n\r\nThe shebang tells the machine which interpreter to use when running this file - Node is specified here.\r\n\r\nTime to test it! Open your terminal, navigate to the project directory, type `npx .`, and you should see *Hello world!* printed.\r\n\r\n## Handling Arguments\r\n\r\nCommand-Line Interfaces (CLIs) often accept or require additional information when being run - these are known as arguments. All of the arguments in a command can be accessed with `process.args` - try updating the `bin.js` file:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconsole.log(process.args)\r\n```\r\n\r\nRun it with `npx . hello world` and you should see something like this:\r\n\r\n```js\r\n;[\r\n  '/Users/kevin/.nvm/versions/node/v16.13.0/bin/node',\r\n  '/Users/kevin/.npm/_npx/0b61241d7c17bcbb/node_modules/.bin/first-package',\r\n  'hello',\r\n  'world',\r\n]\r\n```\r\n\r\nEvery space-separated string is represented - the first two represent your `node` installation and `first-package`. Then, `hello` and `world` are included.\r\n\r\nThis is great if you know exactly which order arguments will be passed, but it isn't always the case. If you need more flexible access to arguments, you can use a package called [`yargs`](https://www.npmjs.com/package/yargs). Install it from your terminal with `npm install yargs` and update your `bin.js` file:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconst yargs = require('yargs')\r\n\r\nconsole.log(yargs.argv)\r\n```\r\n\r\nThen run the following command:\r\n\r\n```bash\r\nnpx . --capitalize --phrase \"Hello World\" extra args\r\n```\r\n\r\nThe result should look like this:\r\n\r\n```js\r\n{\r\n  capitalize: true,\r\n  phrase: 'Hello World',\r\n  _: ['extra', 'args']\r\n}\r\n```\r\n\r\nThis allows you to check for named argument existence and values, as well as non-hyphenated options inside of your `bin.js` file.\r\n\r\n## Executing Logic From Main Package\r\n\r\nSo far, this has all been quite abstract. This section will show how to access the main package features and execute them from your CLI.\r\n\r\nAs a reminder, the main package code in `index.js` exports a class that expects an `apiKey` value when initialized. It has one member method - `get(parameters)` - that takes in an object with properties with which to call The Open Movie Database API.\r\n\r\nSo, how do you get an API Key from the user? There are several approaches:\r\n\r\n1.  Require it as an argument\r\n2.  Require it as an environment variable on the target machine\r\n3.  Require the user to run an 'init' command which saves the values to a file on the machine, and then use that file's value when making calls\r\n\r\nIn this tutorial, the project will take the first approach for brevity, but you may consider the others in your future packages. Update `bin.js`:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconst yargs = require('yargs')\r\nconst OpenMovieDatabase = require('./index')\r\n\r\nconst omdb = new OpenMovieDatabase(yargs.argv.key)\r\n\r\nif (yargs.argv.title) {\r\n  omdb.get({ t: yargs.argv.title }).then((results) => {\r\n    console.log(results)\r\n  })\r\n}\r\n\r\nif (yargs.argv.search) {\r\n  omdb.get({ s: yargs.argv.search }).then((results) => {\r\n    console.log(results.Search)\r\n  })\r\n}\r\n```\r\n\r\nTry the following commands:\r\n\r\n```bash\r\nnpx . --key=your_api_key --title \"Zombieland\"\r\nnpx . --key=your_api_key --search \"Spiderman\"\r\n```\r\n\r\nYou'll notice a friendlier interface via this CLI than the main API here - instead of needing to know that the parameters as `t` or `s`, you allow the user to provide the `title` or `search` arguments.\r\n\r\n## Validating Command Inputs\r\n\r\nFor this CLI to work, the user **must** provide a `key` argument and **either** a `title` argument or a `search` argument. You will also want to restrict the user from providing both as that will lead to two logs which doesn't look great. Thanks to `yargs`, you already know if arguments have been provided, so some boolean logic is all that's needed.\r\n\r\nJust above where `omdb` is declared, add the following checks:\r\n\r\n```js\r\nif (!yargs.argv.key) {\r\n  return console.log('You must provide a key argument with an OMDb API Key')\r\n}\r\n\r\nif (!yargs.argv.title && !yargs.argv.search) {\r\n  return console.log(\r\n    'You must provide either a title or search argument - you have provided neither'\r\n  )\r\n}\r\n\r\nif (yargs.argv.title && yargs.argv.search) {\r\n  return console.log(\r\n    'You must provide either a title or search argument - not both'\r\n  )\r\n}\r\n```\r\n\r\nTry now to omit `key`, omit `title` and `search`, or provide both `title` and `search`.\r\n\r\n## Publishing & Using Package\r\n\r\nLike publishing any updated to npm packages, you must increment the version in `package.json` and then run `npm publish` from your terminal.\r\n\r\nOnce published, you can run the final package with `npx @username/first-package --key=your_api_key --title \"Zombieland\"`.\r\n\r\nWant to try mine? Use `npx @phazonoverload/first-package --key=your_api_key --title \"Zombieland\"`.\r\n\r\n## Wrapping Up\r\n\r\nLike creating npm packages, making them executable with npx was something I struggled to find clear and correct learning material for. I hope this helps fill a gap and gets your project built!\r\n\r\nThe final project code is available on the [npx branch of our npm-package repository](https://github.com/deepgram-devs/npm-package/tree/npx), and if you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ", "html": '<Alert type="info">This post is effectively part 2 on building and publishing npm packages. If you haven\u2019t read the first post, you can do so <a href="https://blog.deepgram.com/build-npm-packages/">here</a>.</Alert>\n<p>Node Package Manager (npm) allows JavaScript developers to manage and include packages in their projects. Bundled with npm is an additional utility - <code is:raw>npx</code> - which can be used to <strong>run</strong> Node.js scripts hosted in npm packages or at any other URL. Even if not already installed, it will download the package into a cache to execute the files.</p>\n<p>Scripts with npx are often used to:</p>\n<ul>\n<li>Scaffold applications (<code is:raw>create-react-app</code> and <code is:raw>create-nuxt-app</code>)</li>\n<li>Run common long-living tooling (<code is:raw>nodemon</code>, <code is:raw>tailwindcss</code>, and <code is:raw>ngrok</code>)</li>\n<li>Make you smile (<code is:raw>workin-hard</code>, <code is:raw>cowsay</code>)</li>\n</ul>\n<p><a href="https://blog.deepgram.com/build-npm-packages">We showed you how to create an npm package in a previous blog post.</a> In this post, we\u2019ll extend on that sample project and build an npx command to interact with our package that queried <a href="http://www.omdbapi.com">The Open Movie Database</a>.</p>\n<p>The final project code is available on the <a href="https://github.com/deepgram-devs/npm-package/tree/npx">npx branch of our npm-package repository</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>An npm account - <a href="https://www.npmjs.com/signup">get one here</a>.</li>\n<li>An Open Movie Database API Key - <a href="http://www.omdbapi.com/apikey.aspx">get one here</a> and be sure to use the verification link in the email with the key.</li>\n</ul>\n<p>You will also need to clone the previous project, open the new directory in your code editor of choice, and install the dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">git clone https://github.com/deepgram-devs/npm-package</span></span>\n<span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> npm-package</span></span>\n<span class="line"><span style="color: #C9D1D9">npm install</span></span></code></pre>\n<h2 id="making-an-executable-script">Making an Executable Script</h2>\n<p>There are four things you need to do to create an executable script:</p>\n<ol>\n<li>Create a file specifically for this logic - commonly <code is:raw>bin.js</code>.</li>\n<li>Specify the executable file in <code is:raw>package.json</code>.</li>\n<li>Start the <code is:raw>bin.js</code> file with a \u2018shebang\u2019.</li>\n<li>Ensure the code in the file will run whenever the file is executed (not behind a function).</li>\n</ol>\n<p>Create a <code is:raw>bin.js</code> file in your project, open <code is:raw>package.json</code>, and add a new <code is:raw>bin</code> property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;@username/first-package&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;0.0.3&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;dependencies&quot;</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;axios&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;^0.24.0&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;bin&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;./bin.js&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Once the location of your executable file has been specified, it\u2019s time to create and populate the executable. Open <code is:raw>bin.js</code> in your code editor, make the first line a Node shebang, and then create a basic script that will run when the file is executed:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world!&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>The shebang tells the machine which interpreter to use when running this file - Node is specified here.</p>\n<p>Time to test it! Open your terminal, navigate to the project directory, type <code is:raw>npx .</code>, and you should see <em>Hello world!</em> printed.</p>\n<h2 id="handling-arguments">Handling Arguments</h2>\n<p>Command-Line Interfaces (CLIs) often accept or require additional information when being run - these are known as arguments. All of the arguments in a command can be accessed with <code is:raw>process.args</code> - try updating the <code is:raw>bin.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(process.args)</span></span></code></pre>\n<p>Run it with <code is:raw>npx . hello world</code> and you should see something like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">;[</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;/Users/kevin/.nvm/versions/node/v16.13.0/bin/node&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;/Users/kevin/.npm/_npx/0b61241d7c17bcbb/node_modules/.bin/first-package&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;hello&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;world&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Every space-separated string is represented - the first two represent your <code is:raw>node</code> installation and <code is:raw>first-package</code>. Then, <code is:raw>hello</code> and <code is:raw>world</code> are included.</p>\n<p>This is great if you know exactly which order arguments will be passed, but it isn\u2019t always the case. If you need more flexible access to arguments, you can use a package called <a href="https://www.npmjs.com/package/yargs"><code is:raw>yargs</code></a>. Install it from your terminal with <code is:raw>npm install yargs</code> and update your <code is:raw>bin.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">yargs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;yargs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(yargs.argv)</span></span></code></pre>\n<p>Then run the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --capitalize --phrase </span><span style="color: #A5D6FF">&quot;Hello World&quot;</span><span style="color: #C9D1D9"> extra args</span></span></code></pre>\n<p>The result should look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">capitalize</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">phrase</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hello World&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">_</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&#39;extra&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;args&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This allows you to check for named argument existence and values, as well as non-hyphenated options inside of your <code is:raw>bin.js</code> file.</p>\n<h2 id="executing-logic-from-main-package">Executing Logic From Main Package</h2>\n<p>So far, this has all been quite abstract. This section will show how to access the main package features and execute them from your CLI.</p>\n<p>As a reminder, the main package code in <code is:raw>index.js</code> exports a class that expects an <code is:raw>apiKey</code> value when initialized. It has one member method - <code is:raw>get(parameters)</code> - that takes in an object with properties with which to call The Open Movie Database API.</p>\n<p>So, how do you get an API Key from the user? There are several approaches:</p>\n<ol>\n<li>Require it as an argument</li>\n<li>Require it as an environment variable on the target machine</li>\n<li>Require the user to run an \u2018init\u2019 command which saves the values to a file on the machine, and then use that file\u2019s value when making calls</li>\n</ol>\n<p>In this tutorial, the project will take the first approach for brevity, but you may consider the others in your future packages. Update <code is:raw>bin.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">yargs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;yargs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OpenMovieDatabase</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">omdb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">OpenMovieDatabase</span><span style="color: #C9D1D9">(yargs.argv.key)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.title) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  omdb.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ t: yargs.argv.title }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.search) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  omdb.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ s: yargs.argv.search }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results.Search)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try the following commands:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --key=your_api_key --title </span><span style="color: #A5D6FF">&quot;Zombieland&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --key=your_api_key --search </span><span style="color: #A5D6FF">&quot;Spiderman&quot;</span></span></code></pre>\n<p>You\u2019ll notice a friendlier interface via this CLI than the main API here - instead of needing to know that the parameters as <code is:raw>t</code> or <code is:raw>s</code>, you allow the user to provide the <code is:raw>title</code> or <code is:raw>search</code> arguments.</p>\n<h2 id="validating-command-inputs">Validating Command Inputs</h2>\n<p>For this CLI to work, the user <strong>must</strong> provide a <code is:raw>key</code> argument and <strong>either</strong> a <code is:raw>title</code> argument or a <code is:raw>search</code> argument. You will also want to restrict the user from providing both as that will lead to two logs which doesn\u2019t look great. Thanks to <code is:raw>yargs</code>, you already know if arguments have been provided, so some boolean logic is all that\u2019s needed.</p>\n<p>Just above where <code is:raw>omdb</code> is declared, add the following checks:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.key) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide a key argument with an OMDb API Key&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.title </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.search) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;You must provide either a title or search argument - you have provided neither&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.title </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> yargs.argv.search) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;You must provide either a title or search argument - not both&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try now to omit <code is:raw>key</code>, omit <code is:raw>title</code> and <code is:raw>search</code>, or provide both <code is:raw>title</code> and <code is:raw>search</code>.</p>\n<h2 id="publishing--using-package">Publishing & Using Package</h2>\n<p>Like publishing any updated to npm packages, you must increment the version in <code is:raw>package.json</code> and then run <code is:raw>npm publish</code> from your terminal.</p>\n<p>Once published, you can run the final package with <code is:raw>npx @username/first-package --key=your_api_key --title "Zombieland"</code>.</p>\n<p>Want to try mine? Use <code is:raw>npx @phazonoverload/first-package --key=your_api_key --title "Zombieland"</code>.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>Like creating npm packages, making them executable with npx was something I struggled to find clear and correct learning material for. I hope this helps fill a gap and gets your project built!</p>\n<p>The final project code is available on the <a href="https://github.com/deepgram-devs/npm-package/tree/npx">npx branch of our npm-package repository</a>, and if you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Creating an npx Command", "description": "Build, locally test, and publish npx command scripts", "date": "2022-01-06T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1640023176/blog/2022/01/npx-script/building-an-npm-package%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["nodejs"], "seo": { "title": "Creating an npx Command", "description": "Build, locally test, and publish npx command scripts" }, "shorturls": { "share": "https://dpgr.am/5d3010e", "twitter": "https://dpgr.am/cf21007", "linkedin": "https://dpgr.am/78c8c7d", "reddit": "https://dpgr.am/31193f0", "facebook": "https://dpgr.am/a2ddc9d" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453846/blog/npx-script/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "making-an-executable-script", "text": "Making an Executable Script" }, { "depth": 2, "slug": "handling-arguments", "text": "Handling Arguments" }, { "depth": 2, "slug": "executing-logic-from-main-package", "text": "Executing Logic From Main Package" }, { "depth": 2, "slug": "validating-command-inputs", "text": "Validating Command Inputs" }, { "depth": 2, "slug": "publishing--using-package", "text": "Publishing & Using Package" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\r\n<Alert type=\"info\">This post is effectively part 2 on building and publishing npm packages. If you haven't read the first post, you can do so [here](https://blog.deepgram.com/build-npm-packages/).</Alert>\r\n\r\nNode Package Manager (npm) allows JavaScript developers to manage and include packages in their projects. Bundled with npm is an additional utility - `npx` - which can be used to **run** Node.js scripts hosted in npm packages or at any other URL. Even if not already installed, it will download the package into a cache to execute the files.\r\n\r\nScripts with npx are often used to:\r\n\r\n*   Scaffold applications (`create-react-app` and `create-nuxt-app`)\r\n*   Run common long-living tooling (`nodemon`, `tailwindcss`, and `ngrok`)\r\n*   Make you smile (`workin-hard`, `cowsay`)\r\n\r\n[We showed you how to create an npm package in a previous blog post.](https://blog.deepgram.com/build-npm-packages) In this post, we'll extend on that sample project and build an npx command to interact with our package that queried [The Open Movie Database](http://www.omdbapi.com).\r\n\r\nThe final project code is available on the [npx branch of our npm-package repository](https://github.com/deepgram-devs/npm-package/tree/npx).\r\n\r\n## Before We Start\r\n\r\nYou will need:\r\n\r\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\r\n*   An npm account - [get one here](https://www.npmjs.com/signup).\r\n*   An Open Movie Database API Key - [get one here](http://www.omdbapi.com/apikey.aspx) and be sure to use the verification link in the email with the key.\r\n\r\nYou will also need to clone the previous project, open the new directory in your code editor of choice, and install the dependencies:\r\n\r\n```bash\r\ngit clone https://github.com/deepgram-devs/npm-package\r\ncd npm-package\r\nnpm install\r\n```\r\n\r\n## Making an Executable Script\r\n\r\nThere are four things you need to do to create an executable script:\r\n\r\n1.  Create a file specifically for this logic - commonly `bin.js`.\r\n2.  Specify the executable file in `package.json`.\r\n3.  Start the `bin.js` file with a 'shebang'.\r\n4.  Ensure the code in the file will run whenever the file is executed (not behind a function).\r\n\r\nCreate a `bin.js` file in your project, open `package.json`, and add a new `bin` property:\r\n\r\n```json\r\n{\r\n  \"name\": \"@username/first-package\",\r\n  \"version\": \"0.0.3\",\r\n  \"dependencies\": {\r\n    \"axios\": \"^0.24.0\"\r\n  },\r\n  \"bin\": \"./bin.js\"\r\n}\r\n```\r\n\r\nOnce the location of your executable file has been specified, it's time to create and populate the executable. Open `bin.js` in your code editor, make the first line a Node shebang, and then create a basic script that will run when the file is executed:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconsole.log('Hello world!')\r\n```\r\n\r\nThe shebang tells the machine which interpreter to use when running this file - Node is specified here.\r\n\r\nTime to test it! Open your terminal, navigate to the project directory, type `npx .`, and you should see *Hello world!* printed.\r\n\r\n## Handling Arguments\r\n\r\nCommand-Line Interfaces (CLIs) often accept or require additional information when being run - these are known as arguments. All of the arguments in a command can be accessed with `process.args` - try updating the `bin.js` file:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconsole.log(process.args)\r\n```\r\n\r\nRun it with `npx . hello world` and you should see something like this:\r\n\r\n```js\r\n;[\r\n  '/Users/kevin/.nvm/versions/node/v16.13.0/bin/node',\r\n  '/Users/kevin/.npm/_npx/0b61241d7c17bcbb/node_modules/.bin/first-package',\r\n  'hello',\r\n  'world',\r\n]\r\n```\r\n\r\nEvery space-separated string is represented - the first two represent your `node` installation and `first-package`. Then, `hello` and `world` are included.\r\n\r\nThis is great if you know exactly which order arguments will be passed, but it isn't always the case. If you need more flexible access to arguments, you can use a package called [`yargs`](https://www.npmjs.com/package/yargs). Install it from your terminal with `npm install yargs` and update your `bin.js` file:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconst yargs = require('yargs')\r\n\r\nconsole.log(yargs.argv)\r\n```\r\n\r\nThen run the following command:\r\n\r\n```bash\r\nnpx . --capitalize --phrase \"Hello World\" extra args\r\n```\r\n\r\nThe result should look like this:\r\n\r\n```js\r\n{\r\n  capitalize: true,\r\n  phrase: 'Hello World',\r\n  _: ['extra', 'args']\r\n}\r\n```\r\n\r\nThis allows you to check for named argument existence and values, as well as non-hyphenated options inside of your `bin.js` file.\r\n\r\n## Executing Logic From Main Package\r\n\r\nSo far, this has all been quite abstract. This section will show how to access the main package features and execute them from your CLI.\r\n\r\nAs a reminder, the main package code in `index.js` exports a class that expects an `apiKey` value when initialized. It has one member method - `get(parameters)` - that takes in an object with properties with which to call The Open Movie Database API.\r\n\r\nSo, how do you get an API Key from the user? There are several approaches:\r\n\r\n1.  Require it as an argument\r\n2.  Require it as an environment variable on the target machine\r\n3.  Require the user to run an 'init' command which saves the values to a file on the machine, and then use that file's value when making calls\r\n\r\nIn this tutorial, the project will take the first approach for brevity, but you may consider the others in your future packages. Update `bin.js`:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconst yargs = require('yargs')\r\nconst OpenMovieDatabase = require('./index')\r\n\r\nconst omdb = new OpenMovieDatabase(yargs.argv.key)\r\n\r\nif (yargs.argv.title) {\r\n  omdb.get({ t: yargs.argv.title }).then((results) => {\r\n    console.log(results)\r\n  })\r\n}\r\n\r\nif (yargs.argv.search) {\r\n  omdb.get({ s: yargs.argv.search }).then((results) => {\r\n    console.log(results.Search)\r\n  })\r\n}\r\n```\r\n\r\nTry the following commands:\r\n\r\n```bash\r\nnpx . --key=your_api_key --title \"Zombieland\"\r\nnpx . --key=your_api_key --search \"Spiderman\"\r\n```\r\n\r\nYou'll notice a friendlier interface via this CLI than the main API here - instead of needing to know that the parameters as `t` or `s`, you allow the user to provide the `title` or `search` arguments.\r\n\r\n## Validating Command Inputs\r\n\r\nFor this CLI to work, the user **must** provide a `key` argument and **either** a `title` argument or a `search` argument. You will also want to restrict the user from providing both as that will lead to two logs which doesn't look great. Thanks to `yargs`, you already know if arguments have been provided, so some boolean logic is all that's needed.\r\n\r\nJust above where `omdb` is declared, add the following checks:\r\n\r\n```js\r\nif (!yargs.argv.key) {\r\n  return console.log('You must provide a key argument with an OMDb API Key')\r\n}\r\n\r\nif (!yargs.argv.title && !yargs.argv.search) {\r\n  return console.log(\r\n    'You must provide either a title or search argument - you have provided neither'\r\n  )\r\n}\r\n\r\nif (yargs.argv.title && yargs.argv.search) {\r\n  return console.log(\r\n    'You must provide either a title or search argument - not both'\r\n  )\r\n}\r\n```\r\n\r\nTry now to omit `key`, omit `title` and `search`, or provide both `title` and `search`.\r\n\r\n## Publishing & Using Package\r\n\r\nLike publishing any updated to npm packages, you must increment the version in `package.json` and then run `npm publish` from your terminal.\r\n\r\nOnce published, you can run the final package with `npx @username/first-package --key=your_api_key --title \"Zombieland\"`.\r\n\r\nWant to try mine? Use `npx @phazonoverload/first-package --key=your_api_key --title \"Zombieland\"`.\r\n\r\n## Wrapping Up\r\n\r\nLike creating npm packages, making them executable with npx was something I struggled to find clear and correct learning material for. I hope this helps fill a gap and gets your project built!\r\n\r\nThe final project code is available on the [npx branch of our npm-package repository](https://github.com/deepgram-devs/npm-package/tree/npx), and if you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ", "html": '<Alert type="info">This post is effectively part 2 on building and publishing npm packages. If you haven\u2019t read the first post, you can do so <a href="https://blog.deepgram.com/build-npm-packages/">here</a>.</Alert>\n<p>Node Package Manager (npm) allows JavaScript developers to manage and include packages in their projects. Bundled with npm is an additional utility - <code is:raw>npx</code> - which can be used to <strong>run</strong> Node.js scripts hosted in npm packages or at any other URL. Even if not already installed, it will download the package into a cache to execute the files.</p>\n<p>Scripts with npx are often used to:</p>\n<ul>\n<li>Scaffold applications (<code is:raw>create-react-app</code> and <code is:raw>create-nuxt-app</code>)</li>\n<li>Run common long-living tooling (<code is:raw>nodemon</code>, <code is:raw>tailwindcss</code>, and <code is:raw>ngrok</code>)</li>\n<li>Make you smile (<code is:raw>workin-hard</code>, <code is:raw>cowsay</code>)</li>\n</ul>\n<p><a href="https://blog.deepgram.com/build-npm-packages">We showed you how to create an npm package in a previous blog post.</a> In this post, we\u2019ll extend on that sample project and build an npx command to interact with our package that queried <a href="http://www.omdbapi.com">The Open Movie Database</a>.</p>\n<p>The final project code is available on the <a href="https://github.com/deepgram-devs/npm-package/tree/npx">npx branch of our npm-package repository</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>An npm account - <a href="https://www.npmjs.com/signup">get one here</a>.</li>\n<li>An Open Movie Database API Key - <a href="http://www.omdbapi.com/apikey.aspx">get one here</a> and be sure to use the verification link in the email with the key.</li>\n</ul>\n<p>You will also need to clone the previous project, open the new directory in your code editor of choice, and install the dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">git clone https://github.com/deepgram-devs/npm-package</span></span>\n<span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> npm-package</span></span>\n<span class="line"><span style="color: #C9D1D9">npm install</span></span></code></pre>\n<h2 id="making-an-executable-script">Making an Executable Script</h2>\n<p>There are four things you need to do to create an executable script:</p>\n<ol>\n<li>Create a file specifically for this logic - commonly <code is:raw>bin.js</code>.</li>\n<li>Specify the executable file in <code is:raw>package.json</code>.</li>\n<li>Start the <code is:raw>bin.js</code> file with a \u2018shebang\u2019.</li>\n<li>Ensure the code in the file will run whenever the file is executed (not behind a function).</li>\n</ol>\n<p>Create a <code is:raw>bin.js</code> file in your project, open <code is:raw>package.json</code>, and add a new <code is:raw>bin</code> property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;@username/first-package&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;0.0.3&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;dependencies&quot;</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;axios&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;^0.24.0&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;bin&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;./bin.js&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Once the location of your executable file has been specified, it\u2019s time to create and populate the executable. Open <code is:raw>bin.js</code> in your code editor, make the first line a Node shebang, and then create a basic script that will run when the file is executed:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world!&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>The shebang tells the machine which interpreter to use when running this file - Node is specified here.</p>\n<p>Time to test it! Open your terminal, navigate to the project directory, type <code is:raw>npx .</code>, and you should see <em>Hello world!</em> printed.</p>\n<h2 id="handling-arguments">Handling Arguments</h2>\n<p>Command-Line Interfaces (CLIs) often accept or require additional information when being run - these are known as arguments. All of the arguments in a command can be accessed with <code is:raw>process.args</code> - try updating the <code is:raw>bin.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(process.args)</span></span></code></pre>\n<p>Run it with <code is:raw>npx . hello world</code> and you should see something like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">;[</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;/Users/kevin/.nvm/versions/node/v16.13.0/bin/node&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;/Users/kevin/.npm/_npx/0b61241d7c17bcbb/node_modules/.bin/first-package&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;hello&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;world&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Every space-separated string is represented - the first two represent your <code is:raw>node</code> installation and <code is:raw>first-package</code>. Then, <code is:raw>hello</code> and <code is:raw>world</code> are included.</p>\n<p>This is great if you know exactly which order arguments will be passed, but it isn\u2019t always the case. If you need more flexible access to arguments, you can use a package called <a href="https://www.npmjs.com/package/yargs"><code is:raw>yargs</code></a>. Install it from your terminal with <code is:raw>npm install yargs</code> and update your <code is:raw>bin.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">yargs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;yargs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(yargs.argv)</span></span></code></pre>\n<p>Then run the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --capitalize --phrase </span><span style="color: #A5D6FF">&quot;Hello World&quot;</span><span style="color: #C9D1D9"> extra args</span></span></code></pre>\n<p>The result should look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">capitalize</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">phrase</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hello World&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">_</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&#39;extra&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;args&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This allows you to check for named argument existence and values, as well as non-hyphenated options inside of your <code is:raw>bin.js</code> file.</p>\n<h2 id="executing-logic-from-main-package">Executing Logic From Main Package</h2>\n<p>So far, this has all been quite abstract. This section will show how to access the main package features and execute them from your CLI.</p>\n<p>As a reminder, the main package code in <code is:raw>index.js</code> exports a class that expects an <code is:raw>apiKey</code> value when initialized. It has one member method - <code is:raw>get(parameters)</code> - that takes in an object with properties with which to call The Open Movie Database API.</p>\n<p>So, how do you get an API Key from the user? There are several approaches:</p>\n<ol>\n<li>Require it as an argument</li>\n<li>Require it as an environment variable on the target machine</li>\n<li>Require the user to run an \u2018init\u2019 command which saves the values to a file on the machine, and then use that file\u2019s value when making calls</li>\n</ol>\n<p>In this tutorial, the project will take the first approach for brevity, but you may consider the others in your future packages. Update <code is:raw>bin.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">yargs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;yargs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OpenMovieDatabase</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">omdb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">OpenMovieDatabase</span><span style="color: #C9D1D9">(yargs.argv.key)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.title) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  omdb.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ t: yargs.argv.title }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.search) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  omdb.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ s: yargs.argv.search }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results.Search)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try the following commands:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --key=your_api_key --title </span><span style="color: #A5D6FF">&quot;Zombieland&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --key=your_api_key --search </span><span style="color: #A5D6FF">&quot;Spiderman&quot;</span></span></code></pre>\n<p>You\u2019ll notice a friendlier interface via this CLI than the main API here - instead of needing to know that the parameters as <code is:raw>t</code> or <code is:raw>s</code>, you allow the user to provide the <code is:raw>title</code> or <code is:raw>search</code> arguments.</p>\n<h2 id="validating-command-inputs">Validating Command Inputs</h2>\n<p>For this CLI to work, the user <strong>must</strong> provide a <code is:raw>key</code> argument and <strong>either</strong> a <code is:raw>title</code> argument or a <code is:raw>search</code> argument. You will also want to restrict the user from providing both as that will lead to two logs which doesn\u2019t look great. Thanks to <code is:raw>yargs</code>, you already know if arguments have been provided, so some boolean logic is all that\u2019s needed.</p>\n<p>Just above where <code is:raw>omdb</code> is declared, add the following checks:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.key) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide a key argument with an OMDb API Key&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.title </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.search) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;You must provide either a title or search argument - you have provided neither&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.title </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> yargs.argv.search) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;You must provide either a title or search argument - not both&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try now to omit <code is:raw>key</code>, omit <code is:raw>title</code> and <code is:raw>search</code>, or provide both <code is:raw>title</code> and <code is:raw>search</code>.</p>\n<h2 id="publishing--using-package">Publishing & Using Package</h2>\n<p>Like publishing any updated to npm packages, you must increment the version in <code is:raw>package.json</code> and then run <code is:raw>npm publish</code> from your terminal.</p>\n<p>Once published, you can run the final package with <code is:raw>npx @username/first-package --key=your_api_key --title "Zombieland"</code>.</p>\n<p>Want to try mine? Use <code is:raw>npx @phazonoverload/first-package --key=your_api_key --title "Zombieland"</code>.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>Like creating npm packages, making them executable with npx was something I struggled to find clear and correct learning material for. I hope this helps fill a gap and gets your project built!</p>\n<p>The final project code is available on the <a href="https://github.com/deepgram-devs/npm-package/tree/npx">npx branch of our npm-package repository</a>, and if you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/npx-script/index.md" };
function rawContent() {
  return "\r\n<Alert type=\"info\">This post is effectively part 2 on building and publishing npm packages. If you haven't read the first post, you can do so [here](https://blog.deepgram.com/build-npm-packages/).</Alert>\r\n\r\nNode Package Manager (npm) allows JavaScript developers to manage and include packages in their projects. Bundled with npm is an additional utility - `npx` - which can be used to **run** Node.js scripts hosted in npm packages or at any other URL. Even if not already installed, it will download the package into a cache to execute the files.\r\n\r\nScripts with npx are often used to:\r\n\r\n*   Scaffold applications (`create-react-app` and `create-nuxt-app`)\r\n*   Run common long-living tooling (`nodemon`, `tailwindcss`, and `ngrok`)\r\n*   Make you smile (`workin-hard`, `cowsay`)\r\n\r\n[We showed you how to create an npm package in a previous blog post.](https://blog.deepgram.com/build-npm-packages) In this post, we'll extend on that sample project and build an npx command to interact with our package that queried [The Open Movie Database](http://www.omdbapi.com).\r\n\r\nThe final project code is available on the [npx branch of our npm-package repository](https://github.com/deepgram-devs/npm-package/tree/npx).\r\n\r\n## Before We Start\r\n\r\nYou will need:\r\n\r\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\r\n*   An npm account - [get one here](https://www.npmjs.com/signup).\r\n*   An Open Movie Database API Key - [get one here](http://www.omdbapi.com/apikey.aspx) and be sure to use the verification link in the email with the key.\r\n\r\nYou will also need to clone the previous project, open the new directory in your code editor of choice, and install the dependencies:\r\n\r\n```bash\r\ngit clone https://github.com/deepgram-devs/npm-package\r\ncd npm-package\r\nnpm install\r\n```\r\n\r\n## Making an Executable Script\r\n\r\nThere are four things you need to do to create an executable script:\r\n\r\n1.  Create a file specifically for this logic - commonly `bin.js`.\r\n2.  Specify the executable file in `package.json`.\r\n3.  Start the `bin.js` file with a 'shebang'.\r\n4.  Ensure the code in the file will run whenever the file is executed (not behind a function).\r\n\r\nCreate a `bin.js` file in your project, open `package.json`, and add a new `bin` property:\r\n\r\n```json\r\n{\r\n  \"name\": \"@username/first-package\",\r\n  \"version\": \"0.0.3\",\r\n  \"dependencies\": {\r\n    \"axios\": \"^0.24.0\"\r\n  },\r\n  \"bin\": \"./bin.js\"\r\n}\r\n```\r\n\r\nOnce the location of your executable file has been specified, it's time to create and populate the executable. Open `bin.js` in your code editor, make the first line a Node shebang, and then create a basic script that will run when the file is executed:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconsole.log('Hello world!')\r\n```\r\n\r\nThe shebang tells the machine which interpreter to use when running this file - Node is specified here.\r\n\r\nTime to test it! Open your terminal, navigate to the project directory, type `npx .`, and you should see *Hello world!* printed.\r\n\r\n## Handling Arguments\r\n\r\nCommand-Line Interfaces (CLIs) often accept or require additional information when being run - these are known as arguments. All of the arguments in a command can be accessed with `process.args` - try updating the `bin.js` file:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconsole.log(process.args)\r\n```\r\n\r\nRun it with `npx . hello world` and you should see something like this:\r\n\r\n```js\r\n;[\r\n  '/Users/kevin/.nvm/versions/node/v16.13.0/bin/node',\r\n  '/Users/kevin/.npm/_npx/0b61241d7c17bcbb/node_modules/.bin/first-package',\r\n  'hello',\r\n  'world',\r\n]\r\n```\r\n\r\nEvery space-separated string is represented - the first two represent your `node` installation and `first-package`. Then, `hello` and `world` are included.\r\n\r\nThis is great if you know exactly which order arguments will be passed, but it isn't always the case. If you need more flexible access to arguments, you can use a package called [`yargs`](https://www.npmjs.com/package/yargs). Install it from your terminal with `npm install yargs` and update your `bin.js` file:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconst yargs = require('yargs')\r\n\r\nconsole.log(yargs.argv)\r\n```\r\n\r\nThen run the following command:\r\n\r\n```bash\r\nnpx . --capitalize --phrase \"Hello World\" extra args\r\n```\r\n\r\nThe result should look like this:\r\n\r\n```js\r\n{\r\n  capitalize: true,\r\n  phrase: 'Hello World',\r\n  _: ['extra', 'args']\r\n}\r\n```\r\n\r\nThis allows you to check for named argument existence and values, as well as non-hyphenated options inside of your `bin.js` file.\r\n\r\n## Executing Logic From Main Package\r\n\r\nSo far, this has all been quite abstract. This section will show how to access the main package features and execute them from your CLI.\r\n\r\nAs a reminder, the main package code in `index.js` exports a class that expects an `apiKey` value when initialized. It has one member method - `get(parameters)` - that takes in an object with properties with which to call The Open Movie Database API.\r\n\r\nSo, how do you get an API Key from the user? There are several approaches:\r\n\r\n1.  Require it as an argument\r\n2.  Require it as an environment variable on the target machine\r\n3.  Require the user to run an 'init' command which saves the values to a file on the machine, and then use that file's value when making calls\r\n\r\nIn this tutorial, the project will take the first approach for brevity, but you may consider the others in your future packages. Update `bin.js`:\r\n\r\n```js\r\n#!/usr/bin/env node\r\n\r\nconst yargs = require('yargs')\r\nconst OpenMovieDatabase = require('./index')\r\n\r\nconst omdb = new OpenMovieDatabase(yargs.argv.key)\r\n\r\nif (yargs.argv.title) {\r\n  omdb.get({ t: yargs.argv.title }).then((results) => {\r\n    console.log(results)\r\n  })\r\n}\r\n\r\nif (yargs.argv.search) {\r\n  omdb.get({ s: yargs.argv.search }).then((results) => {\r\n    console.log(results.Search)\r\n  })\r\n}\r\n```\r\n\r\nTry the following commands:\r\n\r\n```bash\r\nnpx . --key=your_api_key --title \"Zombieland\"\r\nnpx . --key=your_api_key --search \"Spiderman\"\r\n```\r\n\r\nYou'll notice a friendlier interface via this CLI than the main API here - instead of needing to know that the parameters as `t` or `s`, you allow the user to provide the `title` or `search` arguments.\r\n\r\n## Validating Command Inputs\r\n\r\nFor this CLI to work, the user **must** provide a `key` argument and **either** a `title` argument or a `search` argument. You will also want to restrict the user from providing both as that will lead to two logs which doesn't look great. Thanks to `yargs`, you already know if arguments have been provided, so some boolean logic is all that's needed.\r\n\r\nJust above where `omdb` is declared, add the following checks:\r\n\r\n```js\r\nif (!yargs.argv.key) {\r\n  return console.log('You must provide a key argument with an OMDb API Key')\r\n}\r\n\r\nif (!yargs.argv.title && !yargs.argv.search) {\r\n  return console.log(\r\n    'You must provide either a title or search argument - you have provided neither'\r\n  )\r\n}\r\n\r\nif (yargs.argv.title && yargs.argv.search) {\r\n  return console.log(\r\n    'You must provide either a title or search argument - not both'\r\n  )\r\n}\r\n```\r\n\r\nTry now to omit `key`, omit `title` and `search`, or provide both `title` and `search`.\r\n\r\n## Publishing & Using Package\r\n\r\nLike publishing any updated to npm packages, you must increment the version in `package.json` and then run `npm publish` from your terminal.\r\n\r\nOnce published, you can run the final package with `npx @username/first-package --key=your_api_key --title \"Zombieland\"`.\r\n\r\nWant to try mine? Use `npx @phazonoverload/first-package --key=your_api_key --title \"Zombieland\"`.\r\n\r\n## Wrapping Up\r\n\r\nLike creating npm packages, making them executable with npx was something I struggled to find clear and correct learning material for. I hope this helps fill a gap and gets your project built!\r\n\r\nThe final project code is available on the [npx branch of our npm-package repository](https://github.com/deepgram-devs/npm-package/tree/npx), and if you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ";
}
function compiledContent() {
  return '<Alert type="info">This post is effectively part 2 on building and publishing npm packages. If you haven\u2019t read the first post, you can do so <a href="https://blog.deepgram.com/build-npm-packages/">here</a>.</Alert>\n<p>Node Package Manager (npm) allows JavaScript developers to manage and include packages in their projects. Bundled with npm is an additional utility - <code is:raw>npx</code> - which can be used to <strong>run</strong> Node.js scripts hosted in npm packages or at any other URL. Even if not already installed, it will download the package into a cache to execute the files.</p>\n<p>Scripts with npx are often used to:</p>\n<ul>\n<li>Scaffold applications (<code is:raw>create-react-app</code> and <code is:raw>create-nuxt-app</code>)</li>\n<li>Run common long-living tooling (<code is:raw>nodemon</code>, <code is:raw>tailwindcss</code>, and <code is:raw>ngrok</code>)</li>\n<li>Make you smile (<code is:raw>workin-hard</code>, <code is:raw>cowsay</code>)</li>\n</ul>\n<p><a href="https://blog.deepgram.com/build-npm-packages">We showed you how to create an npm package in a previous blog post.</a> In this post, we\u2019ll extend on that sample project and build an npx command to interact with our package that queried <a href="http://www.omdbapi.com">The Open Movie Database</a>.</p>\n<p>The final project code is available on the <a href="https://github.com/deepgram-devs/npm-package/tree/npx">npx branch of our npm-package repository</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>An npm account - <a href="https://www.npmjs.com/signup">get one here</a>.</li>\n<li>An Open Movie Database API Key - <a href="http://www.omdbapi.com/apikey.aspx">get one here</a> and be sure to use the verification link in the email with the key.</li>\n</ul>\n<p>You will also need to clone the previous project, open the new directory in your code editor of choice, and install the dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">git clone https://github.com/deepgram-devs/npm-package</span></span>\n<span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> npm-package</span></span>\n<span class="line"><span style="color: #C9D1D9">npm install</span></span></code></pre>\n<h2 id="making-an-executable-script">Making an Executable Script</h2>\n<p>There are four things you need to do to create an executable script:</p>\n<ol>\n<li>Create a file specifically for this logic - commonly <code is:raw>bin.js</code>.</li>\n<li>Specify the executable file in <code is:raw>package.json</code>.</li>\n<li>Start the <code is:raw>bin.js</code> file with a \u2018shebang\u2019.</li>\n<li>Ensure the code in the file will run whenever the file is executed (not behind a function).</li>\n</ol>\n<p>Create a <code is:raw>bin.js</code> file in your project, open <code is:raw>package.json</code>, and add a new <code is:raw>bin</code> property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;@username/first-package&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;0.0.3&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;dependencies&quot;</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;axios&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;^0.24.0&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;bin&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;./bin.js&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Once the location of your executable file has been specified, it\u2019s time to create and populate the executable. Open <code is:raw>bin.js</code> in your code editor, make the first line a Node shebang, and then create a basic script that will run when the file is executed:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world!&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>The shebang tells the machine which interpreter to use when running this file - Node is specified here.</p>\n<p>Time to test it! Open your terminal, navigate to the project directory, type <code is:raw>npx .</code>, and you should see <em>Hello world!</em> printed.</p>\n<h2 id="handling-arguments">Handling Arguments</h2>\n<p>Command-Line Interfaces (CLIs) often accept or require additional information when being run - these are known as arguments. All of the arguments in a command can be accessed with <code is:raw>process.args</code> - try updating the <code is:raw>bin.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(process.args)</span></span></code></pre>\n<p>Run it with <code is:raw>npx . hello world</code> and you should see something like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">;[</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;/Users/kevin/.nvm/versions/node/v16.13.0/bin/node&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;/Users/kevin/.npm/_npx/0b61241d7c17bcbb/node_modules/.bin/first-package&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;hello&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;world&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Every space-separated string is represented - the first two represent your <code is:raw>node</code> installation and <code is:raw>first-package</code>. Then, <code is:raw>hello</code> and <code is:raw>world</code> are included.</p>\n<p>This is great if you know exactly which order arguments will be passed, but it isn\u2019t always the case. If you need more flexible access to arguments, you can use a package called <a href="https://www.npmjs.com/package/yargs"><code is:raw>yargs</code></a>. Install it from your terminal with <code is:raw>npm install yargs</code> and update your <code is:raw>bin.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">yargs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;yargs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(yargs.argv)</span></span></code></pre>\n<p>Then run the following command:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --capitalize --phrase </span><span style="color: #A5D6FF">&quot;Hello World&quot;</span><span style="color: #C9D1D9"> extra args</span></span></code></pre>\n<p>The result should look like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">capitalize</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">phrase</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hello World&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">_</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&#39;extra&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;args&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This allows you to check for named argument existence and values, as well as non-hyphenated options inside of your <code is:raw>bin.js</code> file.</p>\n<h2 id="executing-logic-from-main-package">Executing Logic From Main Package</h2>\n<p>So far, this has all been quite abstract. This section will show how to access the main package features and execute them from your CLI.</p>\n<p>As a reminder, the main package code in <code is:raw>index.js</code> exports a class that expects an <code is:raw>apiKey</code> value when initialized. It has one member method - <code is:raw>get(parameters)</code> - that takes in an object with properties with which to call The Open Movie Database API.</p>\n<p>So, how do you get an API Key from the user? There are several approaches:</p>\n<ol>\n<li>Require it as an argument</li>\n<li>Require it as an environment variable on the target machine</li>\n<li>Require the user to run an \u2018init\u2019 command which saves the values to a file on the machine, and then use that file\u2019s value when making calls</li>\n</ol>\n<p>In this tutorial, the project will take the first approach for brevity, but you may consider the others in your future packages. Update <code is:raw>bin.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">yargs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;yargs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OpenMovieDatabase</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">omdb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">OpenMovieDatabase</span><span style="color: #C9D1D9">(yargs.argv.key)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.title) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  omdb.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ t: yargs.argv.title }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.search) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  omdb.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ s: yargs.argv.search }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results.Search)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try the following commands:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --key=your_api_key --title </span><span style="color: #A5D6FF">&quot;Zombieland&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --key=your_api_key --search </span><span style="color: #A5D6FF">&quot;Spiderman&quot;</span></span></code></pre>\n<p>You\u2019ll notice a friendlier interface via this CLI than the main API here - instead of needing to know that the parameters as <code is:raw>t</code> or <code is:raw>s</code>, you allow the user to provide the <code is:raw>title</code> or <code is:raw>search</code> arguments.</p>\n<h2 id="validating-command-inputs">Validating Command Inputs</h2>\n<p>For this CLI to work, the user <strong>must</strong> provide a <code is:raw>key</code> argument and <strong>either</strong> a <code is:raw>title</code> argument or a <code is:raw>search</code> argument. You will also want to restrict the user from providing both as that will lead to two logs which doesn\u2019t look great. Thanks to <code is:raw>yargs</code>, you already know if arguments have been provided, so some boolean logic is all that\u2019s needed.</p>\n<p>Just above where <code is:raw>omdb</code> is declared, add the following checks:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.key) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide a key argument with an OMDb API Key&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.title </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.search) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;You must provide either a title or search argument - you have provided neither&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.title </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> yargs.argv.search) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;You must provide either a title or search argument - not both&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Try now to omit <code is:raw>key</code>, omit <code is:raw>title</code> and <code is:raw>search</code>, or provide both <code is:raw>title</code> and <code is:raw>search</code>.</p>\n<h2 id="publishing--using-package">Publishing & Using Package</h2>\n<p>Like publishing any updated to npm packages, you must increment the version in <code is:raw>package.json</code> and then run <code is:raw>npm publish</code> from your terminal.</p>\n<p>Once published, you can run the final package with <code is:raw>npx @username/first-package --key=your_api_key --title "Zombieland"</code>.</p>\n<p>Want to try mine? Use <code is:raw>npx @phazonoverload/first-package --key=your_api_key --title "Zombieland"</code>.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>Like creating npm packages, making them executable with npx was something I struggled to find clear and correct learning material for. I hope this helps fill a gap and gets your project built!</p>\n<p>The final project code is available on the <a href="https://github.com/deepgram-devs/npm-package/tree/npx">npx branch of our npm-package repository</a>, and if you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/npx-script/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head>${renderComponent($$result, "Alert", Alert, { "type": "info" }, { "default": () => renderTemplate`This post is effectively part 2 on building and publishing npm packages. If you haven’t read the first post, you can do so <a href="https://blog.deepgram.com/build-npm-packages/">here</a>.` })}
<p>Node Package Manager (npm) allows JavaScript developers to manage and include packages in their projects. Bundled with npm is an additional utility - <code>npx</code> - which can be used to <strong>run</strong> Node.js scripts hosted in npm packages or at any other URL. Even if not already installed, it will download the package into a cache to execute the files.</p>
<p>Scripts with npx are often used to:</p>
<ul>
<li>Scaffold applications (<code>create-react-app</code> and <code>create-nuxt-app</code>)</li>
<li>Run common long-living tooling (<code>nodemon</code>, <code>tailwindcss</code>, and <code>ngrok</code>)</li>
<li>Make you smile (<code>workin-hard</code>, <code>cowsay</code>)</li>
</ul>
<p><a href="https://blog.deepgram.com/build-npm-packages">We showed you how to create an npm package in a previous blog post.</a> In this post, we’ll extend on that sample project and build an npx command to interact with our package that queried <a href="http://www.omdbapi.com">The Open Movie Database</a>.</p>
<p>The final project code is available on the <a href="https://github.com/deepgram-devs/npm-package/tree/npx">npx branch of our npm-package repository</a>.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>An npm account - <a href="https://www.npmjs.com/signup">get one here</a>.</li>
<li>An Open Movie Database API Key - <a href="http://www.omdbapi.com/apikey.aspx">get one here</a> and be sure to use the verification link in the email with the key.</li>
</ul>
<p>You will also need to clone the previous project, open the new directory in your code editor of choice, and install the dependencies:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">git clone https://github.com/deepgram-devs/npm-package</span></span>
<span class="line"><span style="color: #79C0FF">cd</span><span style="color: #C9D1D9"> npm-package</span></span>
<span class="line"><span style="color: #C9D1D9">npm install</span></span></code></pre>
<h2 id="making-an-executable-script">Making an Executable Script</h2>
<p>There are four things you need to do to create an executable script:</p>
<ol>
<li>Create a file specifically for this logic - commonly <code>bin.js</code>.</li>
<li>Specify the executable file in <code>package.json</code>.</li>
<li>Start the <code>bin.js</code> file with a ‘shebang’.</li>
<li>Ensure the code in the file will run whenever the file is executed (not behind a function).</li>
</ol>
<p>Create a <code>bin.js</code> file in your project, open <code>package.json</code>, and add a new <code>bin</code> property:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;@username/first-package&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;0.0.3&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;dependencies&quot;</span><span style="color: #C9D1D9">: {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;axios&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;^0.24.0&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">&quot;bin&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;./bin.js&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Once the location of your executable file has been specified, it’s time to create and populate the executable. Open <code>bin.js</code> in your code editor, make the first line a Node shebang, and then create a basic script that will run when the file is executed:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world!&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>The shebang tells the machine which interpreter to use when running this file - Node is specified here.</p>
<p>Time to test it! Open your terminal, navigate to the project directory, type <code>npx .</code>, and you should see <em>Hello world!</em> printed.</p>
<h2 id="handling-arguments">Handling Arguments</h2>
<p>Command-Line Interfaces (CLIs) often accept or require additional information when being run - these are known as arguments. All of the arguments in a command can be accessed with <code>process.args</code> - try updating the <code>bin.js</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(process.args)</span></span></code></pre>
<p>Run it with <code>npx . hello world</code> and you should see something like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">;[</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;/Users/kevin/.nvm/versions/node/v16.13.0/bin/node&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;/Users/kevin/.npm/_npx/0b61241d7c17bcbb/node_modules/.bin/first-package&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;hello&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;world&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Every space-separated string is represented - the first two represent your <code>node</code> installation and <code>first-package</code>. Then, <code>hello</code> and <code>world</code> are included.</p>
<p>This is great if you know exactly which order arguments will be passed, but it isn’t always the case. If you need more flexible access to arguments, you can use a package called <a href="https://www.npmjs.com/package/yargs"><code>yargs</code></a>. Install it from your terminal with <code>npm install yargs</code> and update your <code>bin.js</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">yargs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;yargs&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(yargs.argv)</span></span></code></pre>
<p>Then run the following command:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --capitalize --phrase </span><span style="color: #A5D6FF">&quot;Hello World&quot;</span><span style="color: #C9D1D9"> extra args</span></span></code></pre>
<p>The result should look like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">capitalize</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">phrase</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Hello World&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">_</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&#39;extra&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;args&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This allows you to check for named argument existence and values, as well as non-hyphenated options inside of your <code>bin.js</code> file.</p>
<h2 id="executing-logic-from-main-package">Executing Logic From Main Package</h2>
<p>So far, this has all been quite abstract. This section will show how to access the main package features and execute them from your CLI.</p>
<p>As a reminder, the main package code in <code>index.js</code> exports a class that expects an <code>apiKey</code> value when initialized. It has one member method - <code>get(parameters)</code> - that takes in an object with properties with which to call The Open Movie Database API.</p>
<p>So, how do you get an API Key from the user? There are several approaches:</p>
<ol>
<li>Require it as an argument</li>
<li>Require it as an environment variable on the target machine</li>
<li>Require the user to run an ‘init’ command which saves the values to a file on the machine, and then use that file’s value when making calls</li>
</ol>
<p>In this tutorial, the project will take the first approach for brevity, but you may consider the others in your future packages. Update <code>bin.js</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">yargs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;yargs&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">OpenMovieDatabase</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;./index&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">omdb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">OpenMovieDatabase</span><span style="color: #C9D1D9">(yargs.argv.key)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.title) {</span></span>
<span class="line"><span style="color: #C9D1D9">  omdb.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ t: yargs.argv.title }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results)</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.search) {</span></span>
<span class="line"><span style="color: #C9D1D9">  omdb.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">({ s: yargs.argv.search }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">results</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results.Search)</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Try the following commands:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --key=your_api_key --title </span><span style="color: #A5D6FF">&quot;Zombieland&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">npx </span><span style="color: #79C0FF">.</span><span style="color: #C9D1D9"> --key=your_api_key --search </span><span style="color: #A5D6FF">&quot;Spiderman&quot;</span></span></code></pre>
<p>You’ll notice a friendlier interface via this CLI than the main API here - instead of needing to know that the parameters as <code>t</code> or <code>s</code>, you allow the user to provide the <code>title</code> or <code>search</code> arguments.</p>
<h2 id="validating-command-inputs">Validating Command Inputs</h2>
<p>For this CLI to work, the user <strong>must</strong> provide a <code>key</code> argument and <strong>either</strong> a <code>title</code> argument or a <code>search</code> argument. You will also want to restrict the user from providing both as that will lead to two logs which doesn’t look great. Thanks to <code>yargs</code>, you already know if arguments have been provided, so some boolean logic is all that’s needed.</p>
<p>Just above where <code>omdb</code> is declared, add the following checks:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.key) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide a key argument with an OMDb API Key&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.title </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">yargs.argv.search) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;You must provide either a title or search argument - you have provided neither&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  )</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (yargs.argv.title </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> yargs.argv.search) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;You must provide either a title or search argument - not both&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  )</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Try now to omit <code>key</code>, omit <code>title</code> and <code>search</code>, or provide both <code>title</code> and <code>search</code>.</p>
<h2 id="publishing--using-package">Publishing & Using Package</h2>
<p>Like publishing any updated to npm packages, you must increment the version in <code>package.json</code> and then run <code>npm publish</code> from your terminal.</p>
<p>Once published, you can run the final package with <code>npx @username/first-package --key=your_api_key --title "Zombieland"</code>.</p>
<p>Want to try mine? Use <code>npx @phazonoverload/first-package --key=your_api_key --title "Zombieland"</code>.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Like creating npm packages, making them executable with npx was something I struggled to find clear and correct learning material for. I hope this helps fill a gap and gets your project built!</p>
<p>The final project code is available on the <a href="https://github.com/deepgram-devs/npm-package/tree/npx">npx branch of our npm-package repository</a>, and if you have any questions, please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/npx-script/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
