import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 2, "slug": "install-dependencies", "text": "Install Dependencies" }, { "depth": 2, "slug": "create-a-django-project", "text": "Create a Django Project" }, { "depth": 2, "slug": "create-a-django-app", "text": "Create a Django App" }, { "depth": 2, "slug": "create-index-view", "text": "Create Index View" }, { "depth": 2, "slug": "integrate-django-channels", "text": "Integrate Django Channels" }, { "depth": 2, "slug": "add-deepgram-api-key", "text": "Add Deepgram API Key" }, { "depth": 2, "slug": "get-mic-data-from-browser", "text": "Get Mic Data From Browser" }, { "depth": 2, "slug": "websocket-connection-between-server-and-browser", "text": "Websocket Connection Between Server and Browser" }, { "depth": 2, "slug": "websocket-connection-between-server-and-deepgram", "text": "Websocket Connection Between Server and Deepgram" }], "source": "\nHave you ever wondered how to do live voice-to-text transcription with Python? We'll use Django and Deepgram to achieve our goal in this article.\n\nDjango is a familiar Python web framework for rapid development. It provides a lot of things we need \"out of the box\" and everything is included with the framework, following a \u201CBatteries included\u201D philosophy. Deepgram uses AI speech recognition to do real-time audio transcription, and we\u2019ll be using our Python SDK.\n\nThe final code for this project is [here in Github](https://github.com/deepgram-devs/live-transcription-django) if you want to jump ahead.\n\n## Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can [go here](https://console.deepgram.com/signup?jump=keys). For this tutorial, we'll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. We're also going to use Django version 4.0 and [Django Channels](https://channels.readthedocs.io/en/stable/introduction.html) to handle the WebSockets. We'll need to set up a virtual environment to hold our project. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n## Install Dependencies\n\nCreate a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.\n\nFor a quick reference, here are the commands we need to create and activate our virtual environment:\n\n    mkdir [% NAME_OF_YOUR_DIRECTORY %]\n    cd [% NAME_OF_YOUR_DIRECTORY %]\n    python3 -m venv venv\n    source venv/bin/activate\n\nWe need to install the following dependencies from our terminal:\n\n*   The latest version of Django\n*   The Deepgram Python SDK\n*   The dotenv library, which helps us work with our environment variables\n*   The latest version of Django Channels\n\n{/*<!---->*/}\n\n    pip install Django\n    pip install deepgram-sdk\n    pip install python-dotenv\n    pip install channels\n\n## Create a Django Project\n\nLet's get a Django project created by running this command from our terminal, `django-admin startproject stream`.\n\nOur project directory will now look like this:\n\n![django project structure](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-project.png)\n\n## Create a Django App\n\nWe need to hold our code for the server part of our application inside an app called `transcript`. Let\u2019s ensure we\u2019re inside our project with `manage.py`. We need to change directories into our stream project by doing the following:\n\n    cd stream\n    python3 manage.py startapp transcript\n\nWe\u2019ll see our new app `transcript` at the same directory level as our project.\n\n![django app](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-app.png)\n\nWe also need to tell our project that we\u2019re using this new `transcript` app. To do so, go to our `stream` folder inside our `settings.py` file and add our app to `INSTALLED_APPS`.\n\n![django settings](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-installed-apps.png)\n\n## Create Index View\n\nLet\u2019s get a starter Django application up and running that renders an HTML page so that we can progress on our live transcription project.\n\nCreate a folder called `templates` inside our `transcript` app. Inside the templates folder, create an `index.html` file inside another directory called `transcript`.\n\n![django templates folder](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/templates-folder.png)\n\nInside our `transcript/templates/transcript/index.html` add the following HTML markup:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Live Transcription</title>\n  </head>\n  <body>\n    <h1>Transcribe Audio With Django</h1>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\"></p>\n  </body>\n</html>\n```\n\nThen add the following code to our `views.py` and `transcript` app.\n\n```python\nfrom django.shortcuts import render\n\ndef index(request):\n   return render(request, 'transcript/index.html')\n```\n\nWe need to create a `urls.py` inside our `transcript` app to call our view.\n\n![django urls](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/urls-app.png)\n\nLet\u2019s add the following code to our new `urls.py` file:\n\n```python\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n   path('', views.index, name='index'),\n]\n```\n\nWe have to point this file at the `transcript.urls` module to `stream/urls.py`. In the `stream/urls.py` add the code:\n\n```python\nfrom django.conf.urls import include\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n   path('', include('transcript.urls')),\n   path('admin/', admin.site.urls),\n]\n```\n\nIf we start our development server from the terminal to run the project using `python3 manage.py runserver`, the `index.html` page renders in the browser when we navigate to our localhost at `http://127.0.0.1:8000`.\n\n![render the index HTML page](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-index.png)\n\n## Integrate Django Channels\n\nWe need to add code to our `stream/asgi.py` file.\n\n![django asgi file](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/asgi.png)\n\n```python\nimport os\n\nfrom channels.auth import AuthMiddlewareStack\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom django.core.asgi import get_asgi_application\nimport transcript.routing\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"stream.settings\")\n\napplication = ProtocolTypeRouter({\n \"http\": get_asgi_application(),\n \"websocket\": AuthMiddlewareStack(\n       URLRouter(\n           transcript.routing.websocket_urlpatterns\n       )\n   ),\n})\n```\n\nNow we have to add the Channels library to our `INSTALLED_APPS` in the `settings.py` file at `stream/settings.py`\n\n![django settings add channels](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-channels.png)\n\nWe also need to add the following line to our `stream/settings.py` at the bottom of the file:\n\n`ASGI_APPLICATION = 'stream.asgi.application'`\n\nTo ensure everything is working correctly with Channels, run the development server `python3 manage.py runserver`. We should see the output in our terminal like the following:\n\n![django channels output in terminal](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/channels-output.png)\n\n## Add Deepgram API Key\n\nOur API Key will allow access to use Deepgram. Let\u2019s create a `.env` file that will store our key. When we push our code to Github, hide our key, make sure to add this to our `.gitignore` file.\n\n![hide api key with .env file](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-env-file.png)\n\nIn our file, add the following environment variable with our Deepgram API key, which we can [grab here](https://console.deepgram.com/signup?jump=keys):\n\n    DEEPGRAM_API_KEY=\"abcde12345\"\n\nNext, create a `consumers.py` file inside our `transcript` app, acting as our server.\n\n![django consumers file to hold server](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/consumers-file.png)\n\nLet\u2019s add this code to our `consumers.py`. This code loads our key into the project and accesses it in our application:\n\n```python\nfrom channels.generic.websocket import AsyncWebsocketConsumer\nfrom dotenv import load_dotenv\nfrom deepgram import Deepgram\n\nimport os\n\nload_dotenv()\n\nclass TranscriptConsumer(AsyncWebsocketConsumer):\n   dg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n```\n\nWe also have to add a `routing.py` file inside our `transcript` app. This file will direct channels to run the correct code when we make an HTTP request intercepted by the Channels server.\n\n![django routing file in channels](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/routing-file.png)\n\n```python\nfrom django.urls import re_path\n\nfrom . import consumers\n\nwebsocket_urlpatterns = [\n   re_path(r'listen', consumers.TranscriptConsumer.as_asgi()),\n]\n```\n\n## Get Mic Data From Browser\n\nOur next step is to get the microphone data from the browser, which will require a little JavaScript.\n\nUse this code inside the `<script><\/script>` tag in `index.html` to access data from the user\u2019s microphone.\n\n```js\n<script>\n  navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n    const mediaRecorder = new MediaRecorder(stream)\n  })\n<\/script>\n```\n\nIf you want to learn more about working with the mic in the browser, please check out [this post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n## Websocket Connection Between Server and Browser\n\nWe\u2019ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.\n\nThe first WebSocket connection is between our Python server that holds our Django application and our browser client. In this project, we\u2019ll use [Django Channels](https://channels.readthedocs.io/en/stable/introduction.html) to handle the WebSocket server.\n\nWe need to create a WebSocket endpoint that listens to our Django web server code for client connections. In the `consumers.py` file from the previous section `re_path(r'listen', consumers.TranscriptConsumer.as_asgi())` accomplishes this connection.\n\n```python\nclass TranscriptConsumer(AsyncWebsocketConsumer):\n   dg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n\n    async def connect(self):\n       await self.connect_to_deepgram()\n       await self.accept()\n\n      async def receive(self, bytes_data):\n       self.socket.send(bytes_data)\n```\n\nThe above code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. While the server and browser connection remains open, we\u2019ll wait for messages and send data.\n\nIn `index.html`, this code listens for a client connection then connects to the client like so:\n\n```js\n<script>... const socket = new WebSocket('ws://localhost:8000/listen')<\/script>\n```\n\n## Websocket Connection Between Server and Deepgram\n\nWe need to establish a connection between our central Django server and Deepgram to get the audio and real-time transcription. Add this code to our `consumers.py` file.\n\n```python\nfrom typing import Dict\n\nclass TranscriptConsumer(AsyncWebsocketConsumer):\n   dg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n\n   async def get_transcript(self, data: Dict) -> None:\n       if 'channel' in data:\n           transcript = data['channel']['alternatives'][0]['transcript']\n\n           if transcript:\n               await self.send(transcript)\n\n\n   async def connect_to_deepgram(self):\n       try:\n           self.socket = await self.dg_client.transcription.live({'punctuate': True, 'interim_results': False})\n           self.socket.registerHandler(self.socket.event.CLOSE, lambda c: print(f'Connection closed with code {c}.'))\n           self.socket.registerHandler(self.socket.event.TRANSCRIPT_RECEIVED, self.get_transcript)\n\n       except Exception as e:\n           raise Exception(f'Could not open socket: {e}')\n\n   async def connect(self):\n       await self.connect_to_deepgram()\n       await self.accept()\n\n\n   async def disconnect(self, close_code):\n       await self.channel_layer.group_discard(\n           self.room_group_name,\n           self.channel_name\n       )\n\n   async def receive(self, bytes_data):\n       self.socket.send(bytes_data)\n```\n\nThe `connect_to_deepgram` function connects us to Deepgram and creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects. The `get_transcript` method gets the transcript from Deepgram and sends it back to the client.\n\nLastly, in our `index.html`, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out [this blog post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n```js\n<script>\n  socket.onopen = () => {\n    document.querySelector('#status').textContent = 'Connected'\n    console.log({\n        event: 'onopen'\n    })\n    mediaRecorder.addEventListener('dataavailable', async (event) => {\n        if (event.data.size > 0 && socket.readyState == 1) {\n            socket.send(event.data)\n        }\n    })\n    mediaRecorder.start(250)\n}\n\n  socket.onmessage = (message) => {\n      const received = message.data\n      if (received) {\n          console.log(received)\n          document.querySelector('#transcript').textContent += ' ' + received\n      }\n  }\n\n  socket.onclose = () => {\n      console.log({\n          event: 'onclose'\n      })\n  }\n\n  socket.onerror = (error) => {\n      console.log({\n          event: 'onerror',\n          error\n      })\n  }\n<\/script>\n```\n\nLet\u2019s start our application and start getting real-time transcriptions. From our terminal, run `python3 manage.py runserver` and pull up our localhost on port 8000, `http://127.0.0.1:8000/`. If we haven\u2019t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:\n\n![final result in Django live streaming example](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-final-screenshot.png)\n\nCongratulations on building a real-time transcription project with Django and Deepgram. You can find the [code here](https://github.com/deepgram-devs/live-transcription-django) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": `<p>Have you ever wondered how to do live voice-to-text transcription with Python? We\u2019ll use Django and Deepgram to achieve our goal in this article.</p>
<p>Django is a familiar Python web framework for rapid development. It provides a lot of things we need \u201Cout of the box\u201D and everything is included with the framework, following a \u201CBatteries included\u201D philosophy. Deepgram uses AI speech recognition to do real-time audio transcription, and we\u2019ll be using our Python SDK.</p>
<p>The final code for this project is <a href="https://github.com/deepgram-devs/live-transcription-django">here in Github</a> if you want to jump ahead.</p>
<h2 id="getting-started">Getting Started</h2>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can <a href="https://console.deepgram.com/signup?jump=keys">go here</a>. For this tutorial, we\u2019ll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. We\u2019re also going to use Django version 4.0 and <a href="https://channels.readthedocs.io/en/stable/introduction.html">Django Channels</a> to handle the WebSockets. We\u2019ll need to set up a virtual environment to hold our project. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<h2 id="install-dependencies">Install Dependencies</h2>
<p>Create a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.</p>
<p>For a quick reference, here are the commands we need to create and activate our virtual environment:</p>
<p>mkdir [% NAME_OF_YOUR_DIRECTORY %]
cd [% NAME_OF_YOUR_DIRECTORY %]
python3 -m venv venv
source venv/bin/activate</p>
<p>We need to install the following dependencies from our terminal:</p>
<ul>
<li>The latest version of Django</li>
<li>The Deepgram Python SDK</li>
<li>The dotenv library, which helps us work with our environment variables</li>
<li>The latest version of Django Channels</li>
</ul>
{/*<!---->*/}
<p>pip install Django
pip install deepgram-sdk
pip install python-dotenv
pip install channels</p>
<h2 id="create-a-django-project">Create a Django Project</h2>
<p>Let\u2019s get a Django project created by running this command from our terminal, <code is:raw>django-admin startproject stream</code>.</p>
<p>Our project directory will now look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-project.png" alt="django project structure"></p>
<h2 id="create-a-django-app">Create a Django App</h2>
<p>We need to hold our code for the server part of our application inside an app called <code is:raw>transcript</code>. Let\u2019s ensure we\u2019re inside our project with <code is:raw>manage.py</code>. We need to change directories into our stream project by doing the following:</p>
<p>cd stream
python3 manage.py startapp transcript</p>
<p>We\u2019ll see our new app <code is:raw>transcript</code> at the same directory level as our project.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-app.png" alt="django app"></p>
<p>We also need to tell our project that we\u2019re using this new <code is:raw>transcript</code> app. To do so, go to our <code is:raw>stream</code> folder inside our <code is:raw>settings.py</code> file and add our app to <code is:raw>INSTALLED_APPS</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-installed-apps.png" alt="django settings"></p>
<h2 id="create-index-view">Create Index View</h2>
<p>Let\u2019s get a starter Django application up and running that renders an HTML page so that we can progress on our live transcription project.</p>
<p>Create a folder called <code is:raw>templates</code> inside our <code is:raw>transcript</code> app. Inside the templates folder, create an <code is:raw>index.html</code> file inside another directory called <code is:raw>transcript</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/templates-folder.png" alt="django templates folder"></p>
<p>Inside our <code is:raw>transcript/templates/transcript/index.html</code> add the following HTML markup:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Live Transcription&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Transcribe Audio With Django&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Then add the following code to our <code is:raw>views.py</code> and <code is:raw>transcript</code> app.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.shortcuts </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> render</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">(request):</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render(request, </span><span style="color: #A5D6FF">&#39;transcript/index.html&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>We need to create a <code is:raw>urls.py</code> inside our <code is:raw>transcript</code> app to call our view.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/urls-app.png" alt="django urls"></p>
<p>Let\u2019s add the following code to our new <code is:raw>urls.py</code> file:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> . </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> views</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">, views.index, </span><span style="color: #FFA657">name</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>We have to point this file at the <code is:raw>transcript.urls</code> module to <code is:raw>stream/urls.py</code>. In the <code is:raw>stream/urls.py</code> add the code:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.conf.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> include</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.contrib </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> admin</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">, include(</span><span style="color: #A5D6FF">&#39;transcript.urls&#39;</span><span style="color: #C9D1D9">)),</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;admin/&#39;</span><span style="color: #C9D1D9">, admin.site.urls),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>If we start our development server from the terminal to run the project using <code is:raw>python3 manage.py runserver</code>, the <code is:raw>index.html</code> page renders in the browser when we navigate to our localhost at <code is:raw>http://127.0.0.1:8000</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-index.png" alt="render the index HTML page"></p>
<h2 id="integrate-django-channels">Integrate Django Channels</h2>
<p>We need to add code to our <code is:raw>stream/asgi.py</code> file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/asgi.png" alt="django asgi file"></p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.auth </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> AuthMiddlewareStack</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.routing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> ProtocolTypeRouter, URLRouter</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.core.asgi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> get_asgi_application</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> transcript.routing</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">os.environ.setdefault(</span><span style="color: #A5D6FF">&quot;DJANGO_SETTINGS_MODULE&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;stream.settings&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">application </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> ProtocolTypeRouter({</span></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;http&quot;</span><span style="color: #C9D1D9">: get_asgi_application(),</span></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;websocket&quot;</span><span style="color: #C9D1D9">: AuthMiddlewareStack(</span></span>
<span class="line"><span style="color: #C9D1D9">       URLRouter(</span></span>
<span class="line"><span style="color: #C9D1D9">           transcript.routing.websocket_urlpatterns</span></span>
<span class="line"><span style="color: #C9D1D9">       )</span></span>
<span class="line"><span style="color: #C9D1D9">   ),</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Now we have to add the Channels library to our <code is:raw>INSTALLED_APPS</code> in the <code is:raw>settings.py</code> file at <code is:raw>stream/settings.py</code></p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-channels.png" alt="django settings add channels"></p>
<p>We also need to add the following line to our <code is:raw>stream/settings.py</code> at the bottom of the file:</p>
<p><code is:raw>ASGI_APPLICATION = 'stream.asgi.application'</code></p>
<p>To ensure everything is working correctly with Channels, run the development server <code is:raw>python3 manage.py runserver</code>. We should see the output in our terminal like the following:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/channels-output.png" alt="django channels output in terminal"></p>
<h2 id="add-deepgram-api-key">Add Deepgram API Key</h2>
<p>Our API Key will allow access to use Deepgram. Let\u2019s create a <code is:raw>.env</code> file that will store our key. When we push our code to Github, hide our key, make sure to add this to our <code is:raw>.gitignore</code> file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-env-file.png" alt="hide api key with .env file"></p>
<p>In our file, add the following environment variable with our Deepgram API key, which we can <a href="https://console.deepgram.com/signup?jump=keys">grab here</a>:</p>
<p>DEEPGRAM_API_KEY=\u201Cabcde12345\u201D</p>
<p>Next, create a <code is:raw>consumers.py</code> file inside our <code is:raw>transcript</code> app, acting as our server.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/consumers-file.png" alt="django consumers file to hold server"></p>
<p>Let\u2019s add this code to our <code is:raw>consumers.py</code>. This code loads our key into the project and accesses it in our application:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.generic.websocket </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> AsyncWebsocketConsumer</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>We also have to add a <code is:raw>routing.py</code> file inside our <code is:raw>transcript</code> app. This file will direct channels to run the correct code when we make an HTTP request intercepted by the Channels server.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/routing-file.png" alt="django routing file in channels"></p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> re_path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> . </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> consumers</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">websocket_urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   re_path(</span><span style="color: #FF7B72">r</span><span style="color: #A5D6FF">&#39;listen&#39;</span><span style="color: #C9D1D9">, consumers.TranscriptConsumer.as_asgi()),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<h2 id="get-mic-data-from-browser">Get Mic Data From Browser</h2>
<p>Our next step is to get the microphone data from the browser, which will require a little JavaScript.</p>
<p>Use this code inside the <code is:raw>&lt;script&gt;&lt;/script&gt;</code> tag in <code is:raw>index.html</code> to access data from the user\u2019s microphone.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  navigator.mediaDevices.getUserMedia(</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">).then((stream) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">    const mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>If you want to learn more about working with the mic in the browser, please check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this post</a>.</p>
<h2 id="websocket-connection-between-server-and-browser">Websocket Connection Between Server and Browser</h2>
<p>We\u2019ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.</p>
<p>The first WebSocket connection is between our Python server that holds our Django application and our browser client. In this project, we\u2019ll use <a href="https://channels.readthedocs.io/en/stable/introduction.html">Django Channels</a> to handle the WebSocket server.</p>
<p>We need to create a WebSocket endpoint that listens to our Django web server code for client connections. In the <code is:raw>consumers.py</code> file from the previous section <code is:raw>re_path(r'listen', consumers.TranscriptConsumer.as_asgi())</code> accomplishes this connection.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.connect_to_deepgram()</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.accept()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">receive</span><span style="color: #C9D1D9">(self, bytes_data):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.send(bytes_data)</span></span></code></pre>
<p>The above code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. While the server and browser connection remains open, we\u2019ll wait for messages and send data.</p>
<p>In <code is:raw>index.html</code>, this code listens for a client connection then connects to the client like so:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;... const socket = new WebSocket(&#39;ws://localhost:8000/listen&#39;)&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="websocket-connection-between-server-and-deepgram">Websocket Connection Between Server and Deepgram</h2>
<p>We need to establish a connection between our central Django server and Deepgram to get the audio and real-time transcription. Add this code to our <code is:raw>consumers.py</code> file.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_transcript</span><span style="color: #C9D1D9">(self, data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data:</span></span>
<span class="line"><span style="color: #C9D1D9">           transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.send(transcript)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_to_deepgram</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.dg_client.transcription.live({</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;interim_results&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">False</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.registerHandler(</span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.event.</span><span style="color: #79C0FF">CLOSE</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">lambda</span><span style="color: #C9D1D9"> c: </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Connection closed with code </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">c</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">.&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.registerHandler(</span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.event.</span><span style="color: #79C0FF">TRANSCRIPT_RECEIVED</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.get_transcript)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> e:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Could not open socket: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">e</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.connect_to_deepgram()</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.accept()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">disconnect</span><span style="color: #C9D1D9">(self, close_code):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.channel_layer.group_discard(</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.room_group_name,</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.channel_name</span></span>
<span class="line"><span style="color: #C9D1D9">       )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">receive</span><span style="color: #C9D1D9">(self, bytes_data):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.send(bytes_data)</span></span></code></pre>
<p>The <code is:raw>connect_to_deepgram</code> function connects us to Deepgram and creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects. The <code is:raw>get_transcript</code> method gets the transcript from Deepgram and sends it back to the client.</p>
<p>Lastly, in our <code is:raw>index.html</code>, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this blog post</a>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  socket.onopen = () =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">        event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onmessage = (message) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      const received </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> message.data</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9"> (received) {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.log(received)</span></span>
<span class="line"><span style="color: #C9D1D9">          document.querySelector(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent += </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> + received</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onclose = () =&gt; {</span></span>
<span class="line"><span style="color: #C9D1D9">      console.log({</span></span>
<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onerror = (error) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          error</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Let\u2019s start our application and start getting real-time transcriptions. From our terminal, run <code is:raw>python3 manage.py runserver</code> and pull up our localhost on port 8000, <code is:raw>http://127.0.0.1:8000/</code>. If we haven\u2019t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-final-screenshot.png" alt="final result in Django live streaming example"></p>
<p>Congratulations on building a real-time transcription project with Django and Deepgram. You can find the <a href="https://github.com/deepgram-devs/live-transcription-django">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>` };
const frontmatter = { "title": "Live Transcription With Python and Django", "description": "Learn how to do a live, real-time transcription with Django in Python and Deepgram", "date": "2022-03-03T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1646295674/blog/2022/03/live-transcription-django/Live-Transcription-With-Python-Django-Deepgram%402x.jpg", "authors": ["tonya-sims"], "category": "tutorial", "tags": ["python", "django"], "seo": { "title": "Live Transcription With Python and Django", "description": "Learn how to do a live, real-time transcription with Django in Python and Deepgram" }, "shorturls": { "share": "https://dpgr.am/abcb022", "twitter": "https://dpgr.am/ba1aaba", "linkedin": "https://dpgr.am/b5ab554", "reddit": "https://dpgr.am/654438d", "facebook": "https://dpgr.am/3d4f4bd" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454032/blog/live-transcription-django/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 2, "slug": "install-dependencies", "text": "Install Dependencies" }, { "depth": 2, "slug": "create-a-django-project", "text": "Create a Django Project" }, { "depth": 2, "slug": "create-a-django-app", "text": "Create a Django App" }, { "depth": 2, "slug": "create-index-view", "text": "Create Index View" }, { "depth": 2, "slug": "integrate-django-channels", "text": "Integrate Django Channels" }, { "depth": 2, "slug": "add-deepgram-api-key", "text": "Add Deepgram API Key" }, { "depth": 2, "slug": "get-mic-data-from-browser", "text": "Get Mic Data From Browser" }, { "depth": 2, "slug": "websocket-connection-between-server-and-browser", "text": "Websocket Connection Between Server and Browser" }, { "depth": 2, "slug": "websocket-connection-between-server-and-deepgram", "text": "Websocket Connection Between Server and Deepgram" }], "source": "\nHave you ever wondered how to do live voice-to-text transcription with Python? We'll use Django and Deepgram to achieve our goal in this article.\n\nDjango is a familiar Python web framework for rapid development. It provides a lot of things we need \"out of the box\" and everything is included with the framework, following a \u201CBatteries included\u201D philosophy. Deepgram uses AI speech recognition to do real-time audio transcription, and we\u2019ll be using our Python SDK.\n\nThe final code for this project is [here in Github](https://github.com/deepgram-devs/live-transcription-django) if you want to jump ahead.\n\n## Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can [go here](https://console.deepgram.com/signup?jump=keys). For this tutorial, we'll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. We're also going to use Django version 4.0 and [Django Channels](https://channels.readthedocs.io/en/stable/introduction.html) to handle the WebSockets. We'll need to set up a virtual environment to hold our project. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n## Install Dependencies\n\nCreate a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.\n\nFor a quick reference, here are the commands we need to create and activate our virtual environment:\n\n    mkdir [% NAME_OF_YOUR_DIRECTORY %]\n    cd [% NAME_OF_YOUR_DIRECTORY %]\n    python3 -m venv venv\n    source venv/bin/activate\n\nWe need to install the following dependencies from our terminal:\n\n*   The latest version of Django\n*   The Deepgram Python SDK\n*   The dotenv library, which helps us work with our environment variables\n*   The latest version of Django Channels\n\n{/*<!---->*/}\n\n    pip install Django\n    pip install deepgram-sdk\n    pip install python-dotenv\n    pip install channels\n\n## Create a Django Project\n\nLet's get a Django project created by running this command from our terminal, `django-admin startproject stream`.\n\nOur project directory will now look like this:\n\n![django project structure](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-project.png)\n\n## Create a Django App\n\nWe need to hold our code for the server part of our application inside an app called `transcript`. Let\u2019s ensure we\u2019re inside our project with `manage.py`. We need to change directories into our stream project by doing the following:\n\n    cd stream\n    python3 manage.py startapp transcript\n\nWe\u2019ll see our new app `transcript` at the same directory level as our project.\n\n![django app](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-app.png)\n\nWe also need to tell our project that we\u2019re using this new `transcript` app. To do so, go to our `stream` folder inside our `settings.py` file and add our app to `INSTALLED_APPS`.\n\n![django settings](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-installed-apps.png)\n\n## Create Index View\n\nLet\u2019s get a starter Django application up and running that renders an HTML page so that we can progress on our live transcription project.\n\nCreate a folder called `templates` inside our `transcript` app. Inside the templates folder, create an `index.html` file inside another directory called `transcript`.\n\n![django templates folder](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/templates-folder.png)\n\nInside our `transcript/templates/transcript/index.html` add the following HTML markup:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Live Transcription</title>\n  </head>\n  <body>\n    <h1>Transcribe Audio With Django</h1>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\"></p>\n  </body>\n</html>\n```\n\nThen add the following code to our `views.py` and `transcript` app.\n\n```python\nfrom django.shortcuts import render\n\ndef index(request):\n   return render(request, 'transcript/index.html')\n```\n\nWe need to create a `urls.py` inside our `transcript` app to call our view.\n\n![django urls](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/urls-app.png)\n\nLet\u2019s add the following code to our new `urls.py` file:\n\n```python\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n   path('', views.index, name='index'),\n]\n```\n\nWe have to point this file at the `transcript.urls` module to `stream/urls.py`. In the `stream/urls.py` add the code:\n\n```python\nfrom django.conf.urls import include\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n   path('', include('transcript.urls')),\n   path('admin/', admin.site.urls),\n]\n```\n\nIf we start our development server from the terminal to run the project using `python3 manage.py runserver`, the `index.html` page renders in the browser when we navigate to our localhost at `http://127.0.0.1:8000`.\n\n![render the index HTML page](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-index.png)\n\n## Integrate Django Channels\n\nWe need to add code to our `stream/asgi.py` file.\n\n![django asgi file](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/asgi.png)\n\n```python\nimport os\n\nfrom channels.auth import AuthMiddlewareStack\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom django.core.asgi import get_asgi_application\nimport transcript.routing\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"stream.settings\")\n\napplication = ProtocolTypeRouter({\n \"http\": get_asgi_application(),\n \"websocket\": AuthMiddlewareStack(\n       URLRouter(\n           transcript.routing.websocket_urlpatterns\n       )\n   ),\n})\n```\n\nNow we have to add the Channels library to our `INSTALLED_APPS` in the `settings.py` file at `stream/settings.py`\n\n![django settings add channels](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-channels.png)\n\nWe also need to add the following line to our `stream/settings.py` at the bottom of the file:\n\n`ASGI_APPLICATION = 'stream.asgi.application'`\n\nTo ensure everything is working correctly with Channels, run the development server `python3 manage.py runserver`. We should see the output in our terminal like the following:\n\n![django channels output in terminal](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/channels-output.png)\n\n## Add Deepgram API Key\n\nOur API Key will allow access to use Deepgram. Let\u2019s create a `.env` file that will store our key. When we push our code to Github, hide our key, make sure to add this to our `.gitignore` file.\n\n![hide api key with .env file](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-env-file.png)\n\nIn our file, add the following environment variable with our Deepgram API key, which we can [grab here](https://console.deepgram.com/signup?jump=keys):\n\n    DEEPGRAM_API_KEY=\"abcde12345\"\n\nNext, create a `consumers.py` file inside our `transcript` app, acting as our server.\n\n![django consumers file to hold server](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/consumers-file.png)\n\nLet\u2019s add this code to our `consumers.py`. This code loads our key into the project and accesses it in our application:\n\n```python\nfrom channels.generic.websocket import AsyncWebsocketConsumer\nfrom dotenv import load_dotenv\nfrom deepgram import Deepgram\n\nimport os\n\nload_dotenv()\n\nclass TranscriptConsumer(AsyncWebsocketConsumer):\n   dg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n```\n\nWe also have to add a `routing.py` file inside our `transcript` app. This file will direct channels to run the correct code when we make an HTTP request intercepted by the Channels server.\n\n![django routing file in channels](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/routing-file.png)\n\n```python\nfrom django.urls import re_path\n\nfrom . import consumers\n\nwebsocket_urlpatterns = [\n   re_path(r'listen', consumers.TranscriptConsumer.as_asgi()),\n]\n```\n\n## Get Mic Data From Browser\n\nOur next step is to get the microphone data from the browser, which will require a little JavaScript.\n\nUse this code inside the `<script><\/script>` tag in `index.html` to access data from the user\u2019s microphone.\n\n```js\n<script>\n  navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n    const mediaRecorder = new MediaRecorder(stream)\n  })\n<\/script>\n```\n\nIf you want to learn more about working with the mic in the browser, please check out [this post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n## Websocket Connection Between Server and Browser\n\nWe\u2019ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.\n\nThe first WebSocket connection is between our Python server that holds our Django application and our browser client. In this project, we\u2019ll use [Django Channels](https://channels.readthedocs.io/en/stable/introduction.html) to handle the WebSocket server.\n\nWe need to create a WebSocket endpoint that listens to our Django web server code for client connections. In the `consumers.py` file from the previous section `re_path(r'listen', consumers.TranscriptConsumer.as_asgi())` accomplishes this connection.\n\n```python\nclass TranscriptConsumer(AsyncWebsocketConsumer):\n   dg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n\n    async def connect(self):\n       await self.connect_to_deepgram()\n       await self.accept()\n\n      async def receive(self, bytes_data):\n       self.socket.send(bytes_data)\n```\n\nThe above code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. While the server and browser connection remains open, we\u2019ll wait for messages and send data.\n\nIn `index.html`, this code listens for a client connection then connects to the client like so:\n\n```js\n<script>... const socket = new WebSocket('ws://localhost:8000/listen')<\/script>\n```\n\n## Websocket Connection Between Server and Deepgram\n\nWe need to establish a connection between our central Django server and Deepgram to get the audio and real-time transcription. Add this code to our `consumers.py` file.\n\n```python\nfrom typing import Dict\n\nclass TranscriptConsumer(AsyncWebsocketConsumer):\n   dg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n\n   async def get_transcript(self, data: Dict) -> None:\n       if 'channel' in data:\n           transcript = data['channel']['alternatives'][0]['transcript']\n\n           if transcript:\n               await self.send(transcript)\n\n\n   async def connect_to_deepgram(self):\n       try:\n           self.socket = await self.dg_client.transcription.live({'punctuate': True, 'interim_results': False})\n           self.socket.registerHandler(self.socket.event.CLOSE, lambda c: print(f'Connection closed with code {c}.'))\n           self.socket.registerHandler(self.socket.event.TRANSCRIPT_RECEIVED, self.get_transcript)\n\n       except Exception as e:\n           raise Exception(f'Could not open socket: {e}')\n\n   async def connect(self):\n       await self.connect_to_deepgram()\n       await self.accept()\n\n\n   async def disconnect(self, close_code):\n       await self.channel_layer.group_discard(\n           self.room_group_name,\n           self.channel_name\n       )\n\n   async def receive(self, bytes_data):\n       self.socket.send(bytes_data)\n```\n\nThe `connect_to_deepgram` function connects us to Deepgram and creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects. The `get_transcript` method gets the transcript from Deepgram and sends it back to the client.\n\nLastly, in our `index.html`, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out [this blog post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n```js\n<script>\n  socket.onopen = () => {\n    document.querySelector('#status').textContent = 'Connected'\n    console.log({\n        event: 'onopen'\n    })\n    mediaRecorder.addEventListener('dataavailable', async (event) => {\n        if (event.data.size > 0 && socket.readyState == 1) {\n            socket.send(event.data)\n        }\n    })\n    mediaRecorder.start(250)\n}\n\n  socket.onmessage = (message) => {\n      const received = message.data\n      if (received) {\n          console.log(received)\n          document.querySelector('#transcript').textContent += ' ' + received\n      }\n  }\n\n  socket.onclose = () => {\n      console.log({\n          event: 'onclose'\n      })\n  }\n\n  socket.onerror = (error) => {\n      console.log({\n          event: 'onerror',\n          error\n      })\n  }\n<\/script>\n```\n\nLet\u2019s start our application and start getting real-time transcriptions. From our terminal, run `python3 manage.py runserver` and pull up our localhost on port 8000, `http://127.0.0.1:8000/`. If we haven\u2019t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:\n\n![final result in Django live streaming example](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-final-screenshot.png)\n\nCongratulations on building a real-time transcription project with Django and Deepgram. You can find the [code here](https://github.com/deepgram-devs/live-transcription-django) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": `<p>Have you ever wondered how to do live voice-to-text transcription with Python? We\u2019ll use Django and Deepgram to achieve our goal in this article.</p>
<p>Django is a familiar Python web framework for rapid development. It provides a lot of things we need \u201Cout of the box\u201D and everything is included with the framework, following a \u201CBatteries included\u201D philosophy. Deepgram uses AI speech recognition to do real-time audio transcription, and we\u2019ll be using our Python SDK.</p>
<p>The final code for this project is <a href="https://github.com/deepgram-devs/live-transcription-django">here in Github</a> if you want to jump ahead.</p>
<h2 id="getting-started">Getting Started</h2>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can <a href="https://console.deepgram.com/signup?jump=keys">go here</a>. For this tutorial, we\u2019ll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. We\u2019re also going to use Django version 4.0 and <a href="https://channels.readthedocs.io/en/stable/introduction.html">Django Channels</a> to handle the WebSockets. We\u2019ll need to set up a virtual environment to hold our project. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<h2 id="install-dependencies">Install Dependencies</h2>
<p>Create a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.</p>
<p>For a quick reference, here are the commands we need to create and activate our virtual environment:</p>
<p>mkdir [% NAME_OF_YOUR_DIRECTORY %]
cd [% NAME_OF_YOUR_DIRECTORY %]
python3 -m venv venv
source venv/bin/activate</p>
<p>We need to install the following dependencies from our terminal:</p>
<ul>
<li>The latest version of Django</li>
<li>The Deepgram Python SDK</li>
<li>The dotenv library, which helps us work with our environment variables</li>
<li>The latest version of Django Channels</li>
</ul>
{/*<!---->*/}
<p>pip install Django
pip install deepgram-sdk
pip install python-dotenv
pip install channels</p>
<h2 id="create-a-django-project">Create a Django Project</h2>
<p>Let\u2019s get a Django project created by running this command from our terminal, <code is:raw>django-admin startproject stream</code>.</p>
<p>Our project directory will now look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-project.png" alt="django project structure"></p>
<h2 id="create-a-django-app">Create a Django App</h2>
<p>We need to hold our code for the server part of our application inside an app called <code is:raw>transcript</code>. Let\u2019s ensure we\u2019re inside our project with <code is:raw>manage.py</code>. We need to change directories into our stream project by doing the following:</p>
<p>cd stream
python3 manage.py startapp transcript</p>
<p>We\u2019ll see our new app <code is:raw>transcript</code> at the same directory level as our project.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-app.png" alt="django app"></p>
<p>We also need to tell our project that we\u2019re using this new <code is:raw>transcript</code> app. To do so, go to our <code is:raw>stream</code> folder inside our <code is:raw>settings.py</code> file and add our app to <code is:raw>INSTALLED_APPS</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-installed-apps.png" alt="django settings"></p>
<h2 id="create-index-view">Create Index View</h2>
<p>Let\u2019s get a starter Django application up and running that renders an HTML page so that we can progress on our live transcription project.</p>
<p>Create a folder called <code is:raw>templates</code> inside our <code is:raw>transcript</code> app. Inside the templates folder, create an <code is:raw>index.html</code> file inside another directory called <code is:raw>transcript</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/templates-folder.png" alt="django templates folder"></p>
<p>Inside our <code is:raw>transcript/templates/transcript/index.html</code> add the following HTML markup:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Live Transcription&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Transcribe Audio With Django&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Then add the following code to our <code is:raw>views.py</code> and <code is:raw>transcript</code> app.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.shortcuts </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> render</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">(request):</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render(request, </span><span style="color: #A5D6FF">&#39;transcript/index.html&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>We need to create a <code is:raw>urls.py</code> inside our <code is:raw>transcript</code> app to call our view.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/urls-app.png" alt="django urls"></p>
<p>Let\u2019s add the following code to our new <code is:raw>urls.py</code> file:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> . </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> views</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">, views.index, </span><span style="color: #FFA657">name</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>We have to point this file at the <code is:raw>transcript.urls</code> module to <code is:raw>stream/urls.py</code>. In the <code is:raw>stream/urls.py</code> add the code:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.conf.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> include</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.contrib </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> admin</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">, include(</span><span style="color: #A5D6FF">&#39;transcript.urls&#39;</span><span style="color: #C9D1D9">)),</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;admin/&#39;</span><span style="color: #C9D1D9">, admin.site.urls),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>If we start our development server from the terminal to run the project using <code is:raw>python3 manage.py runserver</code>, the <code is:raw>index.html</code> page renders in the browser when we navigate to our localhost at <code is:raw>http://127.0.0.1:8000</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-index.png" alt="render the index HTML page"></p>
<h2 id="integrate-django-channels">Integrate Django Channels</h2>
<p>We need to add code to our <code is:raw>stream/asgi.py</code> file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/asgi.png" alt="django asgi file"></p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.auth </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> AuthMiddlewareStack</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.routing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> ProtocolTypeRouter, URLRouter</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.core.asgi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> get_asgi_application</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> transcript.routing</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">os.environ.setdefault(</span><span style="color: #A5D6FF">&quot;DJANGO_SETTINGS_MODULE&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;stream.settings&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">application </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> ProtocolTypeRouter({</span></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;http&quot;</span><span style="color: #C9D1D9">: get_asgi_application(),</span></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;websocket&quot;</span><span style="color: #C9D1D9">: AuthMiddlewareStack(</span></span>
<span class="line"><span style="color: #C9D1D9">       URLRouter(</span></span>
<span class="line"><span style="color: #C9D1D9">           transcript.routing.websocket_urlpatterns</span></span>
<span class="line"><span style="color: #C9D1D9">       )</span></span>
<span class="line"><span style="color: #C9D1D9">   ),</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Now we have to add the Channels library to our <code is:raw>INSTALLED_APPS</code> in the <code is:raw>settings.py</code> file at <code is:raw>stream/settings.py</code></p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-channels.png" alt="django settings add channels"></p>
<p>We also need to add the following line to our <code is:raw>stream/settings.py</code> at the bottom of the file:</p>
<p><code is:raw>ASGI_APPLICATION = 'stream.asgi.application'</code></p>
<p>To ensure everything is working correctly with Channels, run the development server <code is:raw>python3 manage.py runserver</code>. We should see the output in our terminal like the following:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/channels-output.png" alt="django channels output in terminal"></p>
<h2 id="add-deepgram-api-key">Add Deepgram API Key</h2>
<p>Our API Key will allow access to use Deepgram. Let\u2019s create a <code is:raw>.env</code> file that will store our key. When we push our code to Github, hide our key, make sure to add this to our <code is:raw>.gitignore</code> file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-env-file.png" alt="hide api key with .env file"></p>
<p>In our file, add the following environment variable with our Deepgram API key, which we can <a href="https://console.deepgram.com/signup?jump=keys">grab here</a>:</p>
<p>DEEPGRAM_API_KEY=\u201Cabcde12345\u201D</p>
<p>Next, create a <code is:raw>consumers.py</code> file inside our <code is:raw>transcript</code> app, acting as our server.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/consumers-file.png" alt="django consumers file to hold server"></p>
<p>Let\u2019s add this code to our <code is:raw>consumers.py</code>. This code loads our key into the project and accesses it in our application:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.generic.websocket </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> AsyncWebsocketConsumer</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>We also have to add a <code is:raw>routing.py</code> file inside our <code is:raw>transcript</code> app. This file will direct channels to run the correct code when we make an HTTP request intercepted by the Channels server.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/routing-file.png" alt="django routing file in channels"></p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> re_path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> . </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> consumers</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">websocket_urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   re_path(</span><span style="color: #FF7B72">r</span><span style="color: #A5D6FF">&#39;listen&#39;</span><span style="color: #C9D1D9">, consumers.TranscriptConsumer.as_asgi()),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<h2 id="get-mic-data-from-browser">Get Mic Data From Browser</h2>
<p>Our next step is to get the microphone data from the browser, which will require a little JavaScript.</p>
<p>Use this code inside the <code is:raw>&lt;script&gt;&lt;/script&gt;</code> tag in <code is:raw>index.html</code> to access data from the user\u2019s microphone.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  navigator.mediaDevices.getUserMedia(</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">).then((stream) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">    const mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>If you want to learn more about working with the mic in the browser, please check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this post</a>.</p>
<h2 id="websocket-connection-between-server-and-browser">Websocket Connection Between Server and Browser</h2>
<p>We\u2019ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.</p>
<p>The first WebSocket connection is between our Python server that holds our Django application and our browser client. In this project, we\u2019ll use <a href="https://channels.readthedocs.io/en/stable/introduction.html">Django Channels</a> to handle the WebSocket server.</p>
<p>We need to create a WebSocket endpoint that listens to our Django web server code for client connections. In the <code is:raw>consumers.py</code> file from the previous section <code is:raw>re_path(r'listen', consumers.TranscriptConsumer.as_asgi())</code> accomplishes this connection.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.connect_to_deepgram()</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.accept()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">receive</span><span style="color: #C9D1D9">(self, bytes_data):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.send(bytes_data)</span></span></code></pre>
<p>The above code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. While the server and browser connection remains open, we\u2019ll wait for messages and send data.</p>
<p>In <code is:raw>index.html</code>, this code listens for a client connection then connects to the client like so:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;... const socket = new WebSocket(&#39;ws://localhost:8000/listen&#39;)&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="websocket-connection-between-server-and-deepgram">Websocket Connection Between Server and Deepgram</h2>
<p>We need to establish a connection between our central Django server and Deepgram to get the audio and real-time transcription. Add this code to our <code is:raw>consumers.py</code> file.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_transcript</span><span style="color: #C9D1D9">(self, data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data:</span></span>
<span class="line"><span style="color: #C9D1D9">           transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.send(transcript)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_to_deepgram</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.dg_client.transcription.live({</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;interim_results&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">False</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.registerHandler(</span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.event.</span><span style="color: #79C0FF">CLOSE</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">lambda</span><span style="color: #C9D1D9"> c: </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Connection closed with code </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">c</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">.&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.registerHandler(</span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.event.</span><span style="color: #79C0FF">TRANSCRIPT_RECEIVED</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.get_transcript)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> e:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Could not open socket: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">e</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.connect_to_deepgram()</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.accept()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">disconnect</span><span style="color: #C9D1D9">(self, close_code):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.channel_layer.group_discard(</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.room_group_name,</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.channel_name</span></span>
<span class="line"><span style="color: #C9D1D9">       )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">receive</span><span style="color: #C9D1D9">(self, bytes_data):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.send(bytes_data)</span></span></code></pre>
<p>The <code is:raw>connect_to_deepgram</code> function connects us to Deepgram and creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects. The <code is:raw>get_transcript</code> method gets the transcript from Deepgram and sends it back to the client.</p>
<p>Lastly, in our <code is:raw>index.html</code>, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this blog post</a>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  socket.onopen = () =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">        event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onmessage = (message) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      const received </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> message.data</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9"> (received) {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.log(received)</span></span>
<span class="line"><span style="color: #C9D1D9">          document.querySelector(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent += </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> + received</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onclose = () =&gt; {</span></span>
<span class="line"><span style="color: #C9D1D9">      console.log({</span></span>
<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onerror = (error) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          error</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Let\u2019s start our application and start getting real-time transcriptions. From our terminal, run <code is:raw>python3 manage.py runserver</code> and pull up our localhost on port 8000, <code is:raw>http://127.0.0.1:8000/</code>. If we haven\u2019t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-final-screenshot.png" alt="final result in Django live streaming example"></p>
<p>Congratulations on building a real-time transcription project with Django and Deepgram. You can find the <a href="https://github.com/deepgram-devs/live-transcription-django">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>` }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcription-django/index.md" };
function rawContent() {
  return "\nHave you ever wondered how to do live voice-to-text transcription with Python? We'll use Django and Deepgram to achieve our goal in this article.\n\nDjango is a familiar Python web framework for rapid development. It provides a lot of things we need \"out of the box\" and everything is included with the framework, following a \u201CBatteries included\u201D philosophy. Deepgram uses AI speech recognition to do real-time audio transcription, and we\u2019ll be using our Python SDK.\n\nThe final code for this project is [here in Github](https://github.com/deepgram-devs/live-transcription-django) if you want to jump ahead.\n\n## Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can [go here](https://console.deepgram.com/signup?jump=keys). For this tutorial, we'll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. We're also going to use Django version 4.0 and [Django Channels](https://channels.readthedocs.io/en/stable/introduction.html) to handle the WebSockets. We'll need to set up a virtual environment to hold our project. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n## Install Dependencies\n\nCreate a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.\n\nFor a quick reference, here are the commands we need to create and activate our virtual environment:\n\n    mkdir [% NAME_OF_YOUR_DIRECTORY %]\n    cd [% NAME_OF_YOUR_DIRECTORY %]\n    python3 -m venv venv\n    source venv/bin/activate\n\nWe need to install the following dependencies from our terminal:\n\n*   The latest version of Django\n*   The Deepgram Python SDK\n*   The dotenv library, which helps us work with our environment variables\n*   The latest version of Django Channels\n\n{/*<!---->*/}\n\n    pip install Django\n    pip install deepgram-sdk\n    pip install python-dotenv\n    pip install channels\n\n## Create a Django Project\n\nLet's get a Django project created by running this command from our terminal, `django-admin startproject stream`.\n\nOur project directory will now look like this:\n\n![django project structure](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-project.png)\n\n## Create a Django App\n\nWe need to hold our code for the server part of our application inside an app called `transcript`. Let\u2019s ensure we\u2019re inside our project with `manage.py`. We need to change directories into our stream project by doing the following:\n\n    cd stream\n    python3 manage.py startapp transcript\n\nWe\u2019ll see our new app `transcript` at the same directory level as our project.\n\n![django app](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-app.png)\n\nWe also need to tell our project that we\u2019re using this new `transcript` app. To do so, go to our `stream` folder inside our `settings.py` file and add our app to `INSTALLED_APPS`.\n\n![django settings](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-installed-apps.png)\n\n## Create Index View\n\nLet\u2019s get a starter Django application up and running that renders an HTML page so that we can progress on our live transcription project.\n\nCreate a folder called `templates` inside our `transcript` app. Inside the templates folder, create an `index.html` file inside another directory called `transcript`.\n\n![django templates folder](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/templates-folder.png)\n\nInside our `transcript/templates/transcript/index.html` add the following HTML markup:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Live Transcription</title>\n  </head>\n  <body>\n    <h1>Transcribe Audio With Django</h1>\n    <p id=\"status\">Connection status will go here</p>\n    <p id=\"transcript\"></p>\n  </body>\n</html>\n```\n\nThen add the following code to our `views.py` and `transcript` app.\n\n```python\nfrom django.shortcuts import render\n\ndef index(request):\n   return render(request, 'transcript/index.html')\n```\n\nWe need to create a `urls.py` inside our `transcript` app to call our view.\n\n![django urls](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/urls-app.png)\n\nLet\u2019s add the following code to our new `urls.py` file:\n\n```python\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n   path('', views.index, name='index'),\n]\n```\n\nWe have to point this file at the `transcript.urls` module to `stream/urls.py`. In the `stream/urls.py` add the code:\n\n```python\nfrom django.conf.urls import include\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n   path('', include('transcript.urls')),\n   path('admin/', admin.site.urls),\n]\n```\n\nIf we start our development server from the terminal to run the project using `python3 manage.py runserver`, the `index.html` page renders in the browser when we navigate to our localhost at `http://127.0.0.1:8000`.\n\n![render the index HTML page](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-index.png)\n\n## Integrate Django Channels\n\nWe need to add code to our `stream/asgi.py` file.\n\n![django asgi file](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/asgi.png)\n\n```python\nimport os\n\nfrom channels.auth import AuthMiddlewareStack\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom django.core.asgi import get_asgi_application\nimport transcript.routing\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"stream.settings\")\n\napplication = ProtocolTypeRouter({\n \"http\": get_asgi_application(),\n \"websocket\": AuthMiddlewareStack(\n       URLRouter(\n           transcript.routing.websocket_urlpatterns\n       )\n   ),\n})\n```\n\nNow we have to add the Channels library to our `INSTALLED_APPS` in the `settings.py` file at `stream/settings.py`\n\n![django settings add channels](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-channels.png)\n\nWe also need to add the following line to our `stream/settings.py` at the bottom of the file:\n\n`ASGI_APPLICATION = 'stream.asgi.application'`\n\nTo ensure everything is working correctly with Channels, run the development server `python3 manage.py runserver`. We should see the output in our terminal like the following:\n\n![django channels output in terminal](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/channels-output.png)\n\n## Add Deepgram API Key\n\nOur API Key will allow access to use Deepgram. Let\u2019s create a `.env` file that will store our key. When we push our code to Github, hide our key, make sure to add this to our `.gitignore` file.\n\n![hide api key with .env file](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-env-file.png)\n\nIn our file, add the following environment variable with our Deepgram API key, which we can [grab here](https://console.deepgram.com/signup?jump=keys):\n\n    DEEPGRAM_API_KEY=\"abcde12345\"\n\nNext, create a `consumers.py` file inside our `transcript` app, acting as our server.\n\n![django consumers file to hold server](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/consumers-file.png)\n\nLet\u2019s add this code to our `consumers.py`. This code loads our key into the project and accesses it in our application:\n\n```python\nfrom channels.generic.websocket import AsyncWebsocketConsumer\nfrom dotenv import load_dotenv\nfrom deepgram import Deepgram\n\nimport os\n\nload_dotenv()\n\nclass TranscriptConsumer(AsyncWebsocketConsumer):\n   dg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n```\n\nWe also have to add a `routing.py` file inside our `transcript` app. This file will direct channels to run the correct code when we make an HTTP request intercepted by the Channels server.\n\n![django routing file in channels](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/routing-file.png)\n\n```python\nfrom django.urls import re_path\n\nfrom . import consumers\n\nwebsocket_urlpatterns = [\n   re_path(r'listen', consumers.TranscriptConsumer.as_asgi()),\n]\n```\n\n## Get Mic Data From Browser\n\nOur next step is to get the microphone data from the browser, which will require a little JavaScript.\n\nUse this code inside the `<script><\/script>` tag in `index.html` to access data from the user\u2019s microphone.\n\n```js\n<script>\n  navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n    const mediaRecorder = new MediaRecorder(stream)\n  })\n<\/script>\n```\n\nIf you want to learn more about working with the mic in the browser, please check out [this post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n## Websocket Connection Between Server and Browser\n\nWe\u2019ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.\n\nThe first WebSocket connection is between our Python server that holds our Django application and our browser client. In this project, we\u2019ll use [Django Channels](https://channels.readthedocs.io/en/stable/introduction.html) to handle the WebSocket server.\n\nWe need to create a WebSocket endpoint that listens to our Django web server code for client connections. In the `consumers.py` file from the previous section `re_path(r'listen', consumers.TranscriptConsumer.as_asgi())` accomplishes this connection.\n\n```python\nclass TranscriptConsumer(AsyncWebsocketConsumer):\n   dg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n\n    async def connect(self):\n       await self.connect_to_deepgram()\n       await self.accept()\n\n      async def receive(self, bytes_data):\n       self.socket.send(bytes_data)\n```\n\nThe above code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. While the server and browser connection remains open, we\u2019ll wait for messages and send data.\n\nIn `index.html`, this code listens for a client connection then connects to the client like so:\n\n```js\n<script>... const socket = new WebSocket('ws://localhost:8000/listen')<\/script>\n```\n\n## Websocket Connection Between Server and Deepgram\n\nWe need to establish a connection between our central Django server and Deepgram to get the audio and real-time transcription. Add this code to our `consumers.py` file.\n\n```python\nfrom typing import Dict\n\nclass TranscriptConsumer(AsyncWebsocketConsumer):\n   dg_client = Deepgram(os.getenv('DEEPGRAM_API_KEY'))\n\n   async def get_transcript(self, data: Dict) -> None:\n       if 'channel' in data:\n           transcript = data['channel']['alternatives'][0]['transcript']\n\n           if transcript:\n               await self.send(transcript)\n\n\n   async def connect_to_deepgram(self):\n       try:\n           self.socket = await self.dg_client.transcription.live({'punctuate': True, 'interim_results': False})\n           self.socket.registerHandler(self.socket.event.CLOSE, lambda c: print(f'Connection closed with code {c}.'))\n           self.socket.registerHandler(self.socket.event.TRANSCRIPT_RECEIVED, self.get_transcript)\n\n       except Exception as e:\n           raise Exception(f'Could not open socket: {e}')\n\n   async def connect(self):\n       await self.connect_to_deepgram()\n       await self.accept()\n\n\n   async def disconnect(self, close_code):\n       await self.channel_layer.group_discard(\n           self.room_group_name,\n           self.channel_name\n       )\n\n   async def receive(self, bytes_data):\n       self.socket.send(bytes_data)\n```\n\nThe `connect_to_deepgram` function connects us to Deepgram and creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects. The `get_transcript` method gets the transcript from Deepgram and sends it back to the client.\n\nLastly, in our `index.html`, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out [this blog post](https://blog.deepgram.com/live-transcription-mic-browser/).\n\n```js\n<script>\n  socket.onopen = () => {\n    document.querySelector('#status').textContent = 'Connected'\n    console.log({\n        event: 'onopen'\n    })\n    mediaRecorder.addEventListener('dataavailable', async (event) => {\n        if (event.data.size > 0 && socket.readyState == 1) {\n            socket.send(event.data)\n        }\n    })\n    mediaRecorder.start(250)\n}\n\n  socket.onmessage = (message) => {\n      const received = message.data\n      if (received) {\n          console.log(received)\n          document.querySelector('#transcript').textContent += ' ' + received\n      }\n  }\n\n  socket.onclose = () => {\n      console.log({\n          event: 'onclose'\n      })\n  }\n\n  socket.onerror = (error) => {\n      console.log({\n          event: 'onerror',\n          error\n      })\n  }\n<\/script>\n```\n\nLet\u2019s start our application and start getting real-time transcriptions. From our terminal, run `python3 manage.py runserver` and pull up our localhost on port 8000, `http://127.0.0.1:8000/`. If we haven\u2019t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:\n\n![final result in Django live streaming example](https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-final-screenshot.png)\n\nCongratulations on building a real-time transcription project with Django and Deepgram. You can find the [code here](https://github.com/deepgram-devs/live-transcription-django) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ";
}
function compiledContent() {
  return `<p>Have you ever wondered how to do live voice-to-text transcription with Python? We\u2019ll use Django and Deepgram to achieve our goal in this article.</p>
<p>Django is a familiar Python web framework for rapid development. It provides a lot of things we need \u201Cout of the box\u201D and everything is included with the framework, following a \u201CBatteries included\u201D philosophy. Deepgram uses AI speech recognition to do real-time audio transcription, and we\u2019ll be using our Python SDK.</p>
<p>The final code for this project is <a href="https://github.com/deepgram-devs/live-transcription-django">here in Github</a> if you want to jump ahead.</p>
<h2 id="getting-started">Getting Started</h2>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. We can <a href="https://console.deepgram.com/signup?jump=keys">go here</a>. For this tutorial, we\u2019ll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. We\u2019re also going to use Django version 4.0 and <a href="https://channels.readthedocs.io/en/stable/introduction.html">Django Channels</a> to handle the WebSockets. We\u2019ll need to set up a virtual environment to hold our project. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<h2 id="install-dependencies">Install Dependencies</h2>
<p>Create a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.</p>
<p>For a quick reference, here are the commands we need to create and activate our virtual environment:</p>
<p>mkdir [% NAME_OF_YOUR_DIRECTORY %]
cd [% NAME_OF_YOUR_DIRECTORY %]
python3 -m venv venv
source venv/bin/activate</p>
<p>We need to install the following dependencies from our terminal:</p>
<ul>
<li>The latest version of Django</li>
<li>The Deepgram Python SDK</li>
<li>The dotenv library, which helps us work with our environment variables</li>
<li>The latest version of Django Channels</li>
</ul>
{/*<!---->*/}
<p>pip install Django
pip install deepgram-sdk
pip install python-dotenv
pip install channels</p>
<h2 id="create-a-django-project">Create a Django Project</h2>
<p>Let\u2019s get a Django project created by running this command from our terminal, <code is:raw>django-admin startproject stream</code>.</p>
<p>Our project directory will now look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-project.png" alt="django project structure"></p>
<h2 id="create-a-django-app">Create a Django App</h2>
<p>We need to hold our code for the server part of our application inside an app called <code is:raw>transcript</code>. Let\u2019s ensure we\u2019re inside our project with <code is:raw>manage.py</code>. We need to change directories into our stream project by doing the following:</p>
<p>cd stream
python3 manage.py startapp transcript</p>
<p>We\u2019ll see our new app <code is:raw>transcript</code> at the same directory level as our project.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-app.png" alt="django app"></p>
<p>We also need to tell our project that we\u2019re using this new <code is:raw>transcript</code> app. To do so, go to our <code is:raw>stream</code> folder inside our <code is:raw>settings.py</code> file and add our app to <code is:raw>INSTALLED_APPS</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-installed-apps.png" alt="django settings"></p>
<h2 id="create-index-view">Create Index View</h2>
<p>Let\u2019s get a starter Django application up and running that renders an HTML page so that we can progress on our live transcription project.</p>
<p>Create a folder called <code is:raw>templates</code> inside our <code is:raw>transcript</code> app. Inside the templates folder, create an <code is:raw>index.html</code> file inside another directory called <code is:raw>transcript</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/templates-folder.png" alt="django templates folder"></p>
<p>Inside our <code is:raw>transcript/templates/transcript/index.html</code> add the following HTML markup:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Live Transcription&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Transcribe Audio With Django&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Then add the following code to our <code is:raw>views.py</code> and <code is:raw>transcript</code> app.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.shortcuts </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> render</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">(request):</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render(request, </span><span style="color: #A5D6FF">&#39;transcript/index.html&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>We need to create a <code is:raw>urls.py</code> inside our <code is:raw>transcript</code> app to call our view.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/urls-app.png" alt="django urls"></p>
<p>Let\u2019s add the following code to our new <code is:raw>urls.py</code> file:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> . </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> views</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">, views.index, </span><span style="color: #FFA657">name</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>We have to point this file at the <code is:raw>transcript.urls</code> module to <code is:raw>stream/urls.py</code>. In the <code is:raw>stream/urls.py</code> add the code:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.conf.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> include</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.contrib </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> admin</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">, include(</span><span style="color: #A5D6FF">&#39;transcript.urls&#39;</span><span style="color: #C9D1D9">)),</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;admin/&#39;</span><span style="color: #C9D1D9">, admin.site.urls),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>If we start our development server from the terminal to run the project using <code is:raw>python3 manage.py runserver</code>, the <code is:raw>index.html</code> page renders in the browser when we navigate to our localhost at <code is:raw>http://127.0.0.1:8000</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-index.png" alt="render the index HTML page"></p>
<h2 id="integrate-django-channels">Integrate Django Channels</h2>
<p>We need to add code to our <code is:raw>stream/asgi.py</code> file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/asgi.png" alt="django asgi file"></p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.auth </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> AuthMiddlewareStack</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.routing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> ProtocolTypeRouter, URLRouter</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.core.asgi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> get_asgi_application</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> transcript.routing</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">os.environ.setdefault(</span><span style="color: #A5D6FF">&quot;DJANGO_SETTINGS_MODULE&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;stream.settings&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">application </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> ProtocolTypeRouter({</span></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;http&quot;</span><span style="color: #C9D1D9">: get_asgi_application(),</span></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;websocket&quot;</span><span style="color: #C9D1D9">: AuthMiddlewareStack(</span></span>
<span class="line"><span style="color: #C9D1D9">       URLRouter(</span></span>
<span class="line"><span style="color: #C9D1D9">           transcript.routing.websocket_urlpatterns</span></span>
<span class="line"><span style="color: #C9D1D9">       )</span></span>
<span class="line"><span style="color: #C9D1D9">   ),</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Now we have to add the Channels library to our <code is:raw>INSTALLED_APPS</code> in the <code is:raw>settings.py</code> file at <code is:raw>stream/settings.py</code></p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-channels.png" alt="django settings add channels"></p>
<p>We also need to add the following line to our <code is:raw>stream/settings.py</code> at the bottom of the file:</p>
<p><code is:raw>ASGI_APPLICATION = 'stream.asgi.application'</code></p>
<p>To ensure everything is working correctly with Channels, run the development server <code is:raw>python3 manage.py runserver</code>. We should see the output in our terminal like the following:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/channels-output.png" alt="django channels output in terminal"></p>
<h2 id="add-deepgram-api-key">Add Deepgram API Key</h2>
<p>Our API Key will allow access to use Deepgram. Let\u2019s create a <code is:raw>.env</code> file that will store our key. When we push our code to Github, hide our key, make sure to add this to our <code is:raw>.gitignore</code> file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-env-file.png" alt="hide api key with .env file"></p>
<p>In our file, add the following environment variable with our Deepgram API key, which we can <a href="https://console.deepgram.com/signup?jump=keys">grab here</a>:</p>
<p>DEEPGRAM_API_KEY=\u201Cabcde12345\u201D</p>
<p>Next, create a <code is:raw>consumers.py</code> file inside our <code is:raw>transcript</code> app, acting as our server.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/consumers-file.png" alt="django consumers file to hold server"></p>
<p>Let\u2019s add this code to our <code is:raw>consumers.py</code>. This code loads our key into the project and accesses it in our application:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.generic.websocket </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> AsyncWebsocketConsumer</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>We also have to add a <code is:raw>routing.py</code> file inside our <code is:raw>transcript</code> app. This file will direct channels to run the correct code when we make an HTTP request intercepted by the Channels server.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/routing-file.png" alt="django routing file in channels"></p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> re_path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> . </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> consumers</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">websocket_urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   re_path(</span><span style="color: #FF7B72">r</span><span style="color: #A5D6FF">&#39;listen&#39;</span><span style="color: #C9D1D9">, consumers.TranscriptConsumer.as_asgi()),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<h2 id="get-mic-data-from-browser">Get Mic Data From Browser</h2>
<p>Our next step is to get the microphone data from the browser, which will require a little JavaScript.</p>
<p>Use this code inside the <code is:raw>&lt;script&gt;&lt;/script&gt;</code> tag in <code is:raw>index.html</code> to access data from the user\u2019s microphone.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  navigator.mediaDevices.getUserMedia(</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">).then((stream) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">    const mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>If you want to learn more about working with the mic in the browser, please check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this post</a>.</p>
<h2 id="websocket-connection-between-server-and-browser">Websocket Connection Between Server and Browser</h2>
<p>We\u2019ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.</p>
<p>The first WebSocket connection is between our Python server that holds our Django application and our browser client. In this project, we\u2019ll use <a href="https://channels.readthedocs.io/en/stable/introduction.html">Django Channels</a> to handle the WebSocket server.</p>
<p>We need to create a WebSocket endpoint that listens to our Django web server code for client connections. In the <code is:raw>consumers.py</code> file from the previous section <code is:raw>re_path(r'listen', consumers.TranscriptConsumer.as_asgi())</code> accomplishes this connection.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.connect_to_deepgram()</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.accept()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">receive</span><span style="color: #C9D1D9">(self, bytes_data):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.send(bytes_data)</span></span></code></pre>
<p>The above code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. While the server and browser connection remains open, we\u2019ll wait for messages and send data.</p>
<p>In <code is:raw>index.html</code>, this code listens for a client connection then connects to the client like so:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;... const socket = new WebSocket(&#39;ws://localhost:8000/listen&#39;)&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="websocket-connection-between-server-and-deepgram">Websocket Connection Between Server and Deepgram</h2>
<p>We need to establish a connection between our central Django server and Deepgram to get the audio and real-time transcription. Add this code to our <code is:raw>consumers.py</code> file.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_transcript</span><span style="color: #C9D1D9">(self, data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data:</span></span>
<span class="line"><span style="color: #C9D1D9">           transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.send(transcript)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_to_deepgram</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.dg_client.transcription.live({</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;interim_results&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">False</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.registerHandler(</span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.event.</span><span style="color: #79C0FF">CLOSE</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">lambda</span><span style="color: #C9D1D9"> c: </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Connection closed with code </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">c</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">.&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.registerHandler(</span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.event.</span><span style="color: #79C0FF">TRANSCRIPT_RECEIVED</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.get_transcript)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> e:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Could not open socket: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">e</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.connect_to_deepgram()</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.accept()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">disconnect</span><span style="color: #C9D1D9">(self, close_code):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.channel_layer.group_discard(</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.room_group_name,</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.channel_name</span></span>
<span class="line"><span style="color: #C9D1D9">       )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">receive</span><span style="color: #C9D1D9">(self, bytes_data):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.send(bytes_data)</span></span></code></pre>
<p>The <code is:raw>connect_to_deepgram</code> function connects us to Deepgram and creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects. The <code is:raw>get_transcript</code> method gets the transcript from Deepgram and sends it back to the client.</p>
<p>Lastly, in our <code is:raw>index.html</code>, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this blog post</a>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  socket.onopen = () =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">        event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onmessage = (message) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      const received </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> message.data</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9"> (received) {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.log(received)</span></span>
<span class="line"><span style="color: #C9D1D9">          document.querySelector(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent += </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> + received</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onclose = () =&gt; {</span></span>
<span class="line"><span style="color: #C9D1D9">      console.log({</span></span>
<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onerror = (error) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          error</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Let\u2019s start our application and start getting real-time transcriptions. From our terminal, run <code is:raw>python3 manage.py runserver</code> and pull up our localhost on port 8000, <code is:raw>http://127.0.0.1:8000/</code>. If we haven\u2019t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-final-screenshot.png" alt="final result in Django live streaming example"></p>
<p>Congratulations on building a real-time transcription project with Django and Deepgram. You can find the <a href="https://github.com/deepgram-devs/live-transcription-django">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcription-django/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Have you ever wondered how to do live voice-to-text transcription with Python? We’ll use Django and Deepgram to achieve our goal in this article.</p>
<p>Django is a familiar Python web framework for rapid development. It provides a lot of things we need “out of the box” and everything is included with the framework, following a “Batteries included” philosophy. Deepgram uses AI speech recognition to do real-time audio transcription, and we’ll be using our Python SDK.</p>
<p>The final code for this project is <a href="https://github.com/deepgram-devs/live-transcription-django">here in Github</a> if you want to jump ahead.</p>
<h2 id="getting-started">Getting Started</h2>
<p>Before we start, it’s essential to generate a Deepgram API key to use in our project. We can <a href="https://console.deepgram.com/signup?jump=keys">go here</a>. For this tutorial, we’ll be using Python 3.10, but Deepgram supports some earlier versions of Python as well. We’re also going to use Django version 4.0 and <a href="https://channels.readthedocs.io/en/stable/introduction.html">Django Channels</a> to handle the WebSockets. We’ll need to set up a virtual environment to hold our project. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<h2 id="install-dependencies">Install Dependencies</h2>
<p>Create a folder directory to store all of our project files, and inside of it, create a virtual environment. Ensure our virtual environment is activated, as described in the article in the previous section. Make sure that all of the dependencies get installed inside that environment.</p>
<p>For a quick reference, here are the commands we need to create and activate our virtual environment:</p>
<p>mkdir [% NAME_OF_YOUR_DIRECTORY %]
cd [% NAME_OF_YOUR_DIRECTORY %]
python3 -m venv venv
source venv/bin/activate</p>
<p>We need to install the following dependencies from our terminal:</p>
<ul>
<li>The latest version of Django</li>
<li>The Deepgram Python SDK</li>
<li>The dotenv library, which helps us work with our environment variables</li>
<li>The latest version of Django Channels</li>
</ul>

<p>pip install Django
pip install deepgram-sdk
pip install python-dotenv
pip install channels</p>
<h2 id="create-a-django-project">Create a Django Project</h2>
<p>Let’s get a Django project created by running this command from our terminal, <code>django-admin startproject stream</code>.</p>
<p>Our project directory will now look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-project.png" alt="django project structure"></p>
<h2 id="create-a-django-app">Create a Django App</h2>
<p>We need to hold our code for the server part of our application inside an app called <code>transcript</code>. Let’s ensure we’re inside our project with <code>manage.py</code>. We need to change directories into our stream project by doing the following:</p>
<p>cd stream
python3 manage.py startapp transcript</p>
<p>We’ll see our new app <code>transcript</code> at the same directory level as our project.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-app.png" alt="django app"></p>
<p>We also need to tell our project that we’re using this new <code>transcript</code> app. To do so, go to our <code>stream</code> folder inside our <code>settings.py</code> file and add our app to <code>INSTALLED_APPS</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-installed-apps.png" alt="django settings"></p>
<h2 id="create-index-view">Create Index View</h2>
<p>Let’s get a starter Django application up and running that renders an HTML page so that we can progress on our live transcription project.</p>
<p>Create a folder called <code>templates</code> inside our <code>transcript</code> app. Inside the templates folder, create an <code>index.html</code> file inside another directory called <code>transcript</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/templates-folder.png" alt="django templates folder"></p>
<p>Inside our <code>transcript/templates/transcript/index.html</code> add the following HTML markup:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Live Transcription&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Transcribe Audio With Django&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;status&quot;</span><span style="color: #C9D1D9">&gt;Connection status will go here&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Then add the following code to our <code>views.py</code> and <code>transcript</code> app.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.shortcuts </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> render</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">index</span><span style="color: #C9D1D9">(request):</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> render(request, </span><span style="color: #A5D6FF">&#39;transcript/index.html&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>We need to create a <code>urls.py</code> inside our <code>transcript</code> app to call our view.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/urls-app.png" alt="django urls"></p>
<p>Let’s add the following code to our new <code>urls.py</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> . </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> views</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">, views.index, </span><span style="color: #FFA657">name</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>We have to point this file at the <code>transcript.urls</code> module to <code>stream/urls.py</code>. In the <code>stream/urls.py</code> add the code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.conf.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> include</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.contrib </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> admin</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">, include(</span><span style="color: #A5D6FF">&#39;transcript.urls&#39;</span><span style="color: #C9D1D9">)),</span></span>
<span class="line"><span style="color: #C9D1D9">   path(</span><span style="color: #A5D6FF">&#39;admin/&#39;</span><span style="color: #C9D1D9">, admin.site.urls),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>If we start our development server from the terminal to run the project using <code>python3 manage.py runserver</code>, the <code>index.html</code> page renders in the browser when we navigate to our localhost at <code>http://127.0.0.1:8000</code>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-index.png" alt="render the index HTML page"></p>
<h2 id="integrate-django-channels">Integrate Django Channels</h2>
<p>We need to add code to our <code>stream/asgi.py</code> file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/asgi.png" alt="django asgi file"></p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.auth </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> AuthMiddlewareStack</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.routing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> ProtocolTypeRouter, URLRouter</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.core.asgi </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> get_asgi_application</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> transcript.routing</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">os.environ.setdefault(</span><span style="color: #A5D6FF">&quot;DJANGO_SETTINGS_MODULE&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;stream.settings&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">application </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> ProtocolTypeRouter({</span></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;http&quot;</span><span style="color: #C9D1D9">: get_asgi_application(),</span></span>
<span class="line"><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;websocket&quot;</span><span style="color: #C9D1D9">: AuthMiddlewareStack(</span></span>
<span class="line"><span style="color: #C9D1D9">       URLRouter(</span></span>
<span class="line"><span style="color: #C9D1D9">           transcript.routing.websocket_urlpatterns</span></span>
<span class="line"><span style="color: #C9D1D9">       )</span></span>
<span class="line"><span style="color: #C9D1D9">   ),</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Now we have to add the Channels library to our <code>INSTALLED_APPS</code> in the <code>settings.py</code> file at <code>stream/settings.py</code></p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/settings-channels.png" alt="django settings add channels"></p>
<p>We also need to add the following line to our <code>stream/settings.py</code> at the bottom of the file:</p>
<p><code>ASGI_APPLICATION = 'stream.asgi.application'</code></p>
<p>To ensure everything is working correctly with Channels, run the development server <code>python3 manage.py runserver</code>. We should see the output in our terminal like the following:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/channels-output.png" alt="django channels output in terminal"></p>
<h2 id="add-deepgram-api-key">Add Deepgram API Key</h2>
<p>Our API Key will allow access to use Deepgram. Let’s create a <code>.env</code> file that will store our key. When we push our code to Github, hide our key, make sure to add this to our <code>.gitignore</code> file.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-env-file.png" alt="hide api key with .env file"></p>
<p>In our file, add the following environment variable with our Deepgram API key, which we can <a href="https://console.deepgram.com/signup?jump=keys">grab here</a>:</p>
<p>DEEPGRAM_API_KEY=“abcde12345”</p>
<p>Next, create a <code>consumers.py</code> file inside our <code>transcript</code> app, acting as our server.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/consumers-file.png" alt="django consumers file to hold server"></p>
<p>Let’s add this code to our <code>consumers.py</code>. This code loads our key into the project and accesses it in our application:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> channels.generic.websocket </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> AsyncWebsocketConsumer</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>We also have to add a <code>routing.py</code> file inside our <code>transcript</code> app. This file will direct channels to run the correct code when we make an HTTP request intercepted by the Channels server.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/routing-file.png" alt="django routing file in channels"></p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> django.urls </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> re_path</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> . </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> consumers</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">websocket_urlpatterns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span></span>
<span class="line"><span style="color: #C9D1D9">   re_path(</span><span style="color: #FF7B72">r</span><span style="color: #A5D6FF">&#39;listen&#39;</span><span style="color: #C9D1D9">, consumers.TranscriptConsumer.as_asgi()),</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<h2 id="get-mic-data-from-browser">Get Mic Data From Browser</h2>
<p>Our next step is to get the microphone data from the browser, which will require a little JavaScript.</p>
<p>Use this code inside the <code>&lt;script&gt;&lt;/script&gt;</code> tag in <code>index.html</code> to access data from the user’s microphone.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  navigator.mediaDevices.getUserMedia(</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">).then((stream) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">    const mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>If you want to learn more about working with the mic in the browser, please check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this post</a>.</p>
<h2 id="websocket-connection-between-server-and-browser">Websocket Connection Between Server and Browser</h2>
<p>We’ll need to work with WebSockets in our project. We can think of WebSockets as a connection between a server and a client that stays open and allows sending continuous messages back and forth.</p>
<p>The first WebSocket connection is between our Python server that holds our Django application and our browser client. In this project, we’ll use <a href="https://channels.readthedocs.io/en/stable/introduction.html">Django Channels</a> to handle the WebSocket server.</p>
<p>We need to create a WebSocket endpoint that listens to our Django web server code for client connections. In the <code>consumers.py</code> file from the previous section <code>re_path(r'listen', consumers.TranscriptConsumer.as_asgi())</code> accomplishes this connection.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.connect_to_deepgram()</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.accept()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">receive</span><span style="color: #C9D1D9">(self, bytes_data):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.send(bytes_data)</span></span></code></pre>
<p>The above code accepts a WebSocket connection between the server and the client. As long as the connection stays open, we will receive bytes and wait until we get a message from the client. While the server and browser connection remains open, we’ll wait for messages and send data.</p>
<p>In <code>index.html</code>, this code listens for a client connection then connects to the client like so:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;... const socket = new WebSocket(&#39;ws://localhost:8000/listen&#39;)&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="websocket-connection-between-server-and-deepgram">Websocket Connection Between Server and Deepgram</h2>
<p>We need to establish a connection between our central Django server and Deepgram to get the audio and real-time transcription. Add this code to our <code>consumers.py</code> file.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">class</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">TranscriptConsumer</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">AsyncWebsocketConsumer</span><span style="color: #C9D1D9">):</span></span>
<span class="line"><span style="color: #C9D1D9">   dg_client </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">get_transcript</span><span style="color: #C9D1D9">(self, data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> data:</span></span>
<span class="line"><span style="color: #C9D1D9">           transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data[</span><span style="color: #A5D6FF">&#39;channel&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.send(transcript)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_to_deepgram</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.dg_client.transcription.live({</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;interim_results&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">False</span><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.registerHandler(</span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.event.</span><span style="color: #79C0FF">CLOSE</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">lambda</span><span style="color: #C9D1D9"> c: </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Connection closed with code </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">c</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">.&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.registerHandler(</span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.event.</span><span style="color: #79C0FF">TRANSCRIPT_RECEIVED</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.get_transcript)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> e:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">raise</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Exception</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&#39;Could not open socket: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">e</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(self):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.connect_to_deepgram()</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.accept()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">disconnect</span><span style="color: #C9D1D9">(self, close_code):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.channel_layer.group_discard(</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.room_group_name,</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.channel_name</span></span>
<span class="line"><span style="color: #C9D1D9">       )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">receive</span><span style="color: #C9D1D9">(self, bytes_data):</span></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #79C0FF">self</span><span style="color: #C9D1D9">.socket.send(bytes_data)</span></span></code></pre>
<p>The <code>connect_to_deepgram</code> function connects us to Deepgram and creates a socket connection to deepgram, listens for the connection to close, and gets incoming transcription objects. The <code>get_transcript</code> method gets the transcript from Deepgram and sends it back to the client.</p>
<p>Lastly, in our <code>index.html</code>, we need to receive and obtain data with the below events. Notice they are getting logged to our console. If you want to know more about what these events do, check out <a href="https://blog.deepgram.com/live-transcription-mic-browser/">this blog post</a>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  socket.onopen = () =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#status&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connected&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">        event: </span><span style="color: #A5D6FF">&#39;onopen&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">            socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onmessage = (message) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      const received </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> message.data</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9"> (received) {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.log(received)</span></span>
<span class="line"><span style="color: #C9D1D9">          document.querySelector(</span><span style="color: #A5D6FF">&#39;#transcript&#39;</span><span style="color: #C9D1D9">).textContent += </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> + received</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onclose = () =&gt; {</span></span>
<span class="line"><span style="color: #C9D1D9">      console.log({</span></span>
<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onclose&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  socket.onerror = (error) =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">          event: </span><span style="color: #A5D6FF">&#39;onerror&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          error</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Let’s start our application and start getting real-time transcriptions. From our terminal, run <code>python3 manage.py runserver</code> and pull up our localhost on port 8000, <code>http://127.0.0.1:8000/</code>. If we haven’t already, allow access to our microphone. Start speaking, and we should see a transcript like the one below:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646295675/blog/2022/03/live-transcription-django/django-final-screenshot.png" alt="final result in Django live streaming example"></p>
<p>Congratulations on building a real-time transcription project with Django and Deepgram. You can find the <a href="https://github.com/deepgram-devs/live-transcription-django">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/live-transcription-django/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
