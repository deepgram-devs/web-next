import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "preparing-dependencies", "text": "Preparing Dependencies" }, { "depth": 2, "slug": "creating-an-express-server", "text": "Creating An Express Server" }, { "depth": 2, "slug": "project-overview", "text": "Project Overview" }, { "depth": 2, "slug": "configure-your-twilio-number", "text": "Configure Your Twilio Number" }, { "depth": 2, "slug": "handle-inbound-calls", "text": "Handle Inbound Calls" }, { "depth": 2, "slug": "generate-and-save-transcripts", "text": "Generate and Save Transcripts" }, { "depth": 2, "slug": "get-all-recordings", "text": "Get All Recordings" }, { "depth": 2, "slug": "receive-data-in-the-browser", "text": "Receive Data In The Browser" }, { "depth": 2, "slug": "search-transcripts", "text": "Search Transcripts" }, { "depth": 2, "slug": "show-full-transcript", "text": "Show Full Transcript" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nImagine being able to search phrases in every call you've had to find exactly what was said. That's the dream, right? Well - it's my dream, and it's what we're building today.\n\nUsers can call a Twilio phone number, which will be forwarded to your agent while recording. Once the call is completed, we will get a transcript using Deepgram's Speech Recognition API and make it available through a searchable dashboard we'll put together with Vue.js. The front-end is super light, so you could build it with any framework (or none at all).\n\n![Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right.](https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png)\n\nIf you want to look at the final project code, you can find it at https://github.com/deepgram-devs/twilio-voice-searchable-log.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   A Twilio Account SID and Auth Token and a Twilio phone number - [get one here](https://console.twilio.com).\n*   Use of two phones to test your project - one to make the call and one to receive.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n```\nnpm install @deepgram/sdk twilio dotenv express body-parser nedb-promises\n```\nCreate a `.env` file, open it in your code editor, and populate it with your credentials and settings:\n\n```\nDG_KEY=replace_with_deepgram_key\nTWILIO_ACCOUNT_SID=replace_with_sid\nTWILIO_AUTH_TOKEN=replace_with_auth_token\nTWILIO_NUMBER=replace_with_twilio_phone_number\nFORWARDING_NUMBER=replace_with_your_phone_number\n```\n<Alert type=\"warning\">You should not share this .env file as it contains sensitive credentials. If you are using git version control, make sure to ignore this file.</Alert>\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these packages:\n\n```js\nrequire('dotenv').config()\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst nedb = require('nedb-promises')\nconst Twilio = require('twilio')\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nCreate a new nedb database. This will either load an existing file, or create one if it doesn't exist:\n\n```js\nconst db = nedb.create('calls.db')\n```\n\nInitialize the Twilio Helper library and [Deepgram Node SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/):\n\n```js\nconst twilio = new Twilio(\n  process.env.TWILIO_ACCOUNT_SID,\n  process.env.TWILIO_AUTH_TOKEN\n)\nconst deepgram = new Deepgram(process.env.DG_KEY)\n```\n\n## Creating An Express Server\n\nInitialize an `express` instance, configure `body-parser` and a `public` directory, and start it at port 3000:\n\n```js\nconst app = express()\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(express.static('public'))\n\n// Further code goes here\n\napp.listen(3000, console.log(`Listening at ${new Date().toISOString()}`))\n```\n\n## Project Overview\n\nWhen a user rings our Twilio number, our application will be sent a POST request with a bunch of information - we will grab their phone number and the call identifier and add it to our database. We will instruct our application to forward the call to our real number and begin recording. Once the call is completed (or after the default one-hour limit), the recording will be saved, and, once ready, Twilio will send recording information back to our application.\n\nWe send the recording URL to Deepgram and receive a transcript in return. The recording details also contain the call identifier, so we can add the recording URL and the transcript to the existing database entry.\n\nOnce we have data in a database - the final step is to build the web dashboard with client-side search, which we will do towards the end of this blog post.\n\n## Configure Your Twilio Number\n\nWhen Twilio sends data to an application, it expects a publicly-accessible URL, but our application is only on our local machine. Fortunately, we can use [ngrok](https://ngrok.com) to provide a temporary public URL that will forward requests to our locally-running application. Open a new terminal and run the following:\n\n```bash\nnpx ngrok http 3000\n```\n\nOnce running, you will see a Ngrok URL in the terminal dashboard which we can provide to Twilio. If you restart your terminal, ngrok, or after 24 hours, the URL will change, and you need to complete the next step again.\n\n![Accept incoming Voice Calls, configure with Webhook, a call comes in webhook to ngrok url /inbound](https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/voice-config.png)\n\nNavigate to your phone number's settings in the Twilio Console, and configure incoming calls to send a HTTP POST request to your ngrok URL followed by `/inbound`.\n\n## Handle Inbound Calls\n\nIn your `index.js` file add a new route handler for receiving Twilio calls:\n\n```js\napp.post('/inbound', async (req, res) => {\n  const { Caller, CallSid } = req.body\n\n  // Add caller number, call indetifier, and date to the database\n  await db.insert({ Caller, CallSid, date: new Date() })\n\n  // Create Twilio instructions\n  const twiml = new Twilio.twiml.VoiceResponse()\n  const dial = twiml.dial({\n    record: 'record-from-answer-dual',\n    recordingStatusCallback: '/recordings',\n  })\n  dial.number(process.env.FORWARDING_NUMBER)\n\n  // Send response to Twilio\n  res.type('text/xml')\n  res.end(twiml.toString())\n})\n\n// Further code here\n```\n\nThe `dial` variable is the most critical bit here - we tell Twilio to record the call once it is answered and to record each speaker in their own channel. This isn't required but will lead to higher-quality transcripts later. Once the recording is ready, we tell Twilio to send a POST request with data to `/recordings`. Finally, we tell Twilio to forward this call to the number in our `.env` file - perhaps a reception or sales rep.\n\nBefore we test this, create an empty route handler for recordings:\n\n```js\napp.post('/recordings', async (req, res) => {\n  console.log('Recording received')\n  // Further code here\n\n  res.send('ok')\n})\n```\n\n**Test your code!** Run with `node index.js` while making sure ngrok is still running. Call your Twilio number from a phone number that is different from the one in .env and your forwarding number should ring. Answer, speak, hang up, and you should see 'Recording received' in your terminal a few seconds later.\n\n## Generate and Save Transcripts\n\nReplace your `/recordings` route handler:\n\n```js\napp.post('/recordings', async (req, res) => {\n  console.log('Recording received')\n\n  // Get values from data\n  const { CallSid, RecordingUrl } = req.body\n\n  // Get transcript\n  const transcriptionFeatures = {\n    punctuate: true,\n    utterances: true,\n    model: 'phonecall',\n    multichannel: true,\n  }\n  const transcript = await deepgram.transcription.preRecorded(\n    { url: RecordingUrl },\n    transcriptionFeatures\n  )\n\n  // Format response\n  const utterances = transcript.results.utterances.map((utterance) => ({\n    channel: utterance.channel,\n    transcript: utterance.transcript,\n  }))\n\n  // Update database entry\n  await db.update({ CallSid }, { $set: { RecordingUrl, utterances } })\n  res.send('ok')\n})\n```\n\nTwilio sends a body of data along with this request - we only care about the call identifier and the URL of the recording, so we pull those out by destcructuring the object.\n\nThen, we ask Deepgram for a transcript. Let's recap the features we use:\n\n*   The `punctuate` feature adds punctuation for easier reading.\n*   The `utterances` feature will return the spoken phrases rather than just words, and specifies the user who spoke them.\n*   The `model` feature lets us specify a model to use. We have a few, and the default model would probably perform quite well, but we specifically have one trained for phone calls, so we specify it here.\n*   The `multichannel` feature tells Deepgram that we are sending an audio file with multiple audio channels (one for each speaker). It improves transcription quality as we can accurately identify who is speaking at any point in time.\n\nOnce we provide the recording URL and receive a response from Deepgram, we format the response. The output is an array that looks like this:\n\n```json\n[\n  { \"channel\": 1, \"transcript\": \"Hi, Kev.\" },\n  { \"channel\": 0, \"transcript\": \"Hello. How are you mum?\" },\n  { \"channel\": 1, \"transcript\": \"I'm fine. Thank you. How are you?\" },\n  { \"channel\": 0, \"transcript\": \"Yes. Not too bad at all. Thank you\" }\n]\n```\n\nFinally, we update the existing database entry for this call to include both the recording URL and the utterances spoken.\n\n**Test your code!** Repeat the previous test steps, and you should see the database file (`calls.db`) now containing the new data.\n\n## Get All Recordings\n\nThe final step to the server-side of this project is to build a route handler that will return all calls which have a transcript included:\n\n```js\napp.get('/recordings', async (req, res) => {\n  const recordings = await db\n    .find({ utterances: { $exists: true } })\n    .sort({ date: -1 })\n  res.json(recordings)\n})\n```\n\nThis route handler will also sort results, so it's the latest-first.\n\n## Receive Data In The Browser\n\nOur search will consist of three parts:\n\n1.  A search box which, when typed in, will [fuzzy search](https://en.wikipedia.org/wiki/Approximate_string_matching) all call transcripts fetched from the database. We will use [Fuse.js](https://fusejs.io) for the fuzzy search.\n2.  An updating list of results which will show the phrases that matched the earch term.\n3.  When a result is clicked, a full transcript of the call.\n\nCreate a `public` directory and an `index.html` file inside of it. Open the file and scaffold a page:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Twilio x Deepgram Call Transcripts</title>\n    <style></style>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.14\"><\/script>\n    <script src=\"https://cdn.jsdelivr.net/npm/fuse.js@6.4.6\"><\/script>\n    <script>\n      const app = new Vue({\n        el: '#app',\n        data: {\n          fuse: false,\n          calls: {\n            all: [],\n            selected: false,\n          },\n          filter: {\n            term: '',\n            results: [],\n          },\n        },\n        async created() {\n          // Further code goes here\n        },\n        methods: {\n          search() {},\n        },\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nOur first goal is to populate `data.calls.all` with the items from the database returned from the GET `/recordings` route handler, and then create a Fuse search index with those items. Inside the `created()` method:\n\n```js\nthis.calls.all = await fetch('/recordings').then((r) => r.json())\nthis.fuse = new Fuse(this.calls.all, {\n  keys: ['Caller', 'utterances.transcript'],\n  includeMatches: true,\n  threshold: 0.5,\n})\n```\n\nRestart your server, navigate to `http://localhost:3000` in your browser. Open the DevTools Console and type `app.calls.all` to see if the value was populated correctly:\n\n![Browser console showing app.calls.all as an array containing four objects](https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/app-calls-all.png)\n\n## Search Transcripts\n\nInside of your `<div id=\"app\">` add a text input:\n\n```html\n<input\n  type=\"text\"\n  placeholder=\"Search term\"\n  v-model=\"filter.term\"\n  @keyup=\"search\"\n/>\n```\n\nThen, inside of the empty `search()` method conduct a search with Fuse and assign the result to `data.filter.results`:\n\n```js\nthis.filter.results = this.fuse.search(this.filter.term)\n```\n\nNow we have results being computed, let's display them right under the `<input>`:\n\n```html\n<ol id=\"results\">\n  <li v-for=\"result in filter.results\">\n    <p><b>{{ result.item.Caller }} on {{ result.item.date }}</b></p>\n    <p v-for=\"match in result.matches\">{{ match.value }}</p>\n  </li>\n</ol>\n```\n\n![A text box with the word \"yesterday\" in it, and three results. Each result shows the matching phrases.](https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/filtered-results.png)\n\n## Show Full Transcript\n\nWhen an search result is clicked, let's show the whole transcript. Add this attribute to the end of the `<li>` element - it will set `data.calls.selected` to the clicked item:\n\n```html\n<li v-for=\"result in filter.results\" @click=\"calls.selected = result\"></li>\n```\n\nThen, below the `<ol>` add another `<ol>` to show the utterances in the transcript:\n\n```html\n<ol id=\"full-call\" v-if=\"calls.selected\">\n  <li v-for=\"utterance in calls.selected.item.utterances\">\n    <small>{{ utterance.channel == 0 ? 'Receiver' : 'Caller' }}</small>\n    <p>{{ utterance.transcript }}</p>\n  </li>\n</ol>\n```\n\nWith the predictability of multichannel audio from Twilio, the receiver of the forwarded call is always on channel 0, so we can display in nicer terms who is speaking.\n\nFinally, add the following CSS to the `<style>` tag in the `<head>`:\n\n```css\n* { margin: 0; padding: 0; font-family: sans-serif; }\n#app { display: grid; grid-template-columns: 1fr 1fr; paddi g: 1em; gap: 2em }\ninput { grid-column: 1 / span 2; font-size: 1em; padding: 0.5em; }\nli { list-style: none; margin-bottom: 1em; }\n#results li { cursor: pointer; }\n```\n\nRefresh and you should see the finished project:\n\n![Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right.](https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png)\n\n## Wrapping Up\n\nWe've done quite a lot here - how to forward and record calls with Twilio, how to handle recording payloads to get transcripts, and implement basic client-side fuzzy search. There's a lot more we could do to expand on this project:\n\n*   Implement outbound call recording\n*   Group calls under specific callers\n*   Allow users to make notes for calls or callers\n*   Use a more permanent database like Supabase - [Brian wrote a getting started post here](https://blog.deepgram.com/getting-started-with-supabase/)\n\nThe complete project is available at https://github.com/deepgram-devs/twilio-voice-searchable-log and if you have any questions please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n", "html": '<p>Imagine being able to search phrases in every call you\u2019ve had to find exactly what was said. That\u2019s the dream, right? Well - it\u2019s my dream, and it\u2019s what we\u2019re building today.</p>\n<p>Users can call a Twilio phone number, which will be forwarded to your agent while recording. Once the call is completed, we will get a transcript using Deepgram\u2019s Speech Recognition API and make it available through a searchable dashboard we\u2019ll put together with Vue.js. The front-end is super light, so you could build it with any framework (or none at all).</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png" alt="Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right."></p>\n<p>If you want to look at the final project code, you can find it at <a href="https://github.com/deepgram-devs/twilio-voice-searchable-log">https://github.com/deepgram-devs/twilio-voice-searchable-log</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A Twilio Account SID and Auth Token and a Twilio phone number - <a href="https://console.twilio.com">get one here</a>.</li>\n<li>Use of two phones to test your project - one to make the call and one to receive.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk twilio dotenv express body-parser nedb-promises</span></span></code></pre>\n<p>Create a <code is:raw>.env</code> file, open it in your code editor, and populate it with your credentials and settings:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DG_KEY=replace_with_deepgram_key</span></span>\n<span class="line"><span style="color: #c9d1d9">TWILIO_ACCOUNT_SID=replace_with_sid</span></span>\n<span class="line"><span style="color: #c9d1d9">TWILIO_AUTH_TOKEN=replace_with_auth_token</span></span>\n<span class="line"><span style="color: #c9d1d9">TWILIO_NUMBER=replace_with_twilio_phone_number</span></span>\n<span class="line"><span style="color: #c9d1d9">FORWARDING_NUMBER=replace_with_your_phone_number</span></span></code></pre>\n<Alert type="warning">You should not share this .env file as it contains sensitive credentials. If you are using git version control, make sure to ignore this file.</Alert>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bodyParser</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;body-parser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">nedb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;nedb-promises&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Twilio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;twilio&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Create a new nedb database. This will either load an existing file, or create one if it doesn\u2019t exist:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">db</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> nedb.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;calls.db&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Initialize the Twilio Helper library and <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram Node SDK</a>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Twilio</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  process.env.</span><span style="color: #79C0FF">TWILIO_ACCOUNT_SID</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  process.env.</span><span style="color: #79C0FF">TWILIO_AUTH_TOKEN</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="creating-an-express-server">Creating An Express Server</h2>\n<p>Initialize an <code is:raw>express</code> instance, configure <code is:raw>body-parser</code> and a <code is:raw>public</code> directory, and start it at port 3000:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(bodyParser.</span><span style="color: #D2A8FF">urlencoded</span><span style="color: #C9D1D9">({ extended: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> }))</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Listening at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<h2 id="project-overview">Project Overview</h2>\n<p>When a user rings our Twilio number, our application will be sent a POST request with a bunch of information - we will grab their phone number and the call identifier and add it to our database. We will instruct our application to forward the call to our real number and begin recording. Once the call is completed (or after the default one-hour limit), the recording will be saved, and, once ready, Twilio will send recording information back to our application.</p>\n<p>We send the recording URL to Deepgram and receive a transcript in return. The recording details also contain the call identifier, so we can add the recording URL and the transcript to the existing database entry.</p>\n<p>Once we have data in a database - the final step is to build the web dashboard with client-side search, which we will do towards the end of this blog post.</p>\n<h2 id="configure-your-twilio-number">Configure Your Twilio Number</h2>\n<p>When Twilio sends data to an application, it expects a publicly-accessible URL, but our application is only on our local machine. Fortunately, we can use <a href="https://ngrok.com">ngrok</a> to provide a temporary public URL that will forward requests to our locally-running application. Open a new terminal and run the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx ngrok http 3000</span></span></code></pre>\n<p>Once running, you will see a Ngrok URL in the terminal dashboard which we can provide to Twilio. If you restart your terminal, ngrok, or after 24 hours, the URL will change, and you need to complete the next step again.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/voice-config.png" alt="Accept incoming Voice Calls, configure with Webhook, a call comes in webhook to ngrok url /inbound"></p>\n<p>Navigate to your phone number\u2019s settings in the Twilio Console, and configure incoming calls to send a HTTP POST request to your ngrok URL followed by <code is:raw>/inbound</code>.</p>\n<h2 id="handle-inbound-calls">Handle Inbound Calls</h2>\n<p>In your <code is:raw>index.js</code> file add a new route handler for receiving Twilio calls:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/inbound&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Caller</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add caller number, call indetifier, and date to the database</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db.</span><span style="color: #D2A8FF">insert</span><span style="color: #C9D1D9">({ Caller, CallSid, date: </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">() })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create Twilio instructions</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twiml</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dial</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> twiml.</span><span style="color: #D2A8FF">dial</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    record: </span><span style="color: #A5D6FF">&#39;record-from-answer-dual&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  dial.</span><span style="color: #D2A8FF">number</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">FORWARDING_NUMBER</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Send response to Twilio</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">type</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;text/xml&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">(twiml.</span><span style="color: #D2A8FF">toString</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>\n<p>The <code is:raw>dial</code> variable is the most critical bit here - we tell Twilio to record the call once it is answered and to record each speaker in their own channel. This isn\u2019t required but will lead to higher-quality transcripts later. Once the recording is ready, we tell Twilio to send a POST request with data to <code is:raw>/recordings</code>. Finally, we tell Twilio to forward this call to the number in our <code is:raw>.env</code> file - perhaps a reception or sales rep.</p>\n<p>Before we test this, create an empty route handler for recordings:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Recording received&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p><strong>Test your code!</strong> Run with <code is:raw>node index.js</code> while making sure ngrok is still running. Call your Twilio number from a phone number that is different from the one in .env and your forwarding number should ring. Answer, speak, hang up, and you should see \u2018Recording received\u2019 in your terminal a few seconds later.</p>\n<h2 id="generate-and-save-transcripts">Generate and Save Transcripts</h2>\n<p>Replace your <code is:raw>/recordings</code> route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Recording received&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get values from data</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    model: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    multichannel: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    { url: RecordingUrl },</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcriptionFeatures</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Format response</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterances</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.results.utterances.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">utterance</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    channel: utterance.channel,</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcript: utterance.transcript,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Update database entry</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db.</span><span style="color: #D2A8FF">update</span><span style="color: #C9D1D9">({ CallSid }, { $set: { RecordingUrl, utterances } })</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Twilio sends a body of data along with this request - we only care about the call identifier and the URL of the recording, so we pull those out by destcructuring the object.</p>\n<p>Then, we ask Deepgram for a transcript. Let\u2019s recap the features we use:</p>\n<ul>\n<li>The <code is:raw>punctuate</code> feature adds punctuation for easier reading.</li>\n<li>The <code is:raw>utterances</code> feature will return the spoken phrases rather than just words, and specifies the user who spoke them.</li>\n<li>The <code is:raw>model</code> feature lets us specify a model to use. We have a few, and the default model would probably perform quite well, but we specifically have one trained for phone calls, so we specify it here.</li>\n<li>The <code is:raw>multichannel</code> feature tells Deepgram that we are sending an audio file with multiple audio channels (one for each speaker). It improves transcription quality as we can accurately identify who is speaking at any point in time.</li>\n</ul>\n<p>Once we provide the recording URL and receive a response from Deepgram, we format the response. The output is an array that looks like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hi, Kev.&quot;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hello. How are you mum?&quot;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;I&#39;m fine. Thank you. How are you?&quot;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Yes. Not too bad at all. Thank you&quot;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Finally, we update the existing database entry for this call to include both the recording URL and the utterances spoken.</p>\n<p><strong>Test your code!</strong> Repeat the previous test steps, and you should see the database file (<code is:raw>calls.db</code>) now containing the new data.</p>\n<h2 id="get-all-recordings">Get All Recordings</h2>\n<p>The final step to the server-side of this project is to build a route handler that will return all calls which have a transcript included:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recordings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">({ utterances: { $exists: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> } })</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">sort</span><span style="color: #C9D1D9">({ date: </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">(recordings)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This route handler will also sort results, so it\u2019s the latest-first.</p>\n<h2 id="receive-data-in-the-browser">Receive Data In The Browser</h2>\n<p>Our search will consist of three parts:</p>\n<ol>\n<li>A search box which, when typed in, will <a href="https://en.wikipedia.org/wiki/Approximate_string_matching">fuzzy search</a> all call transcripts fetched from the database. We will use <a href="https://fusejs.io">Fuse.js</a> for the fuzzy search.</li>\n<li>An updating list of results which will show the phrases that matched the earch term.</li>\n<li>When a result is clicked, a full transcript of the call.</li>\n</ol>\n<p>Create a <code is:raw>public</code> directory and an <code is:raw>index.html</code> file inside of it. Open the file and scaffold a page:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Twilio x Deepgram Call Transcripts&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/fuse.js@6.4.6&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">          fuse: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          calls: {</span></span>\n<span class="line"><span style="color: #C9D1D9">            all: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">            selected: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          },</span></span>\n<span class="line"><span style="color: #C9D1D9">          filter: {</span></span>\n<span class="line"><span style="color: #C9D1D9">            term: </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            results: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">          },</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        methods: {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">() {},</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Our first goal is to populate <code is:raw>data.calls.all</code> with the items from the database returned from the GET <code is:raw>/recordings</code> route handler, and then create a Fuse search index with those items. Inside the <code is:raw>created()</code> method:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.calls.all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.fuse </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Fuse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.calls.all, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  keys: [</span><span style="color: #A5D6FF">&#39;Caller&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;utterances.transcript&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">  includeMatches: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  threshold: </span><span style="color: #79C0FF">0.5</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server, navigate to <code is:raw>http://localhost:3000</code> in your browser. Open the DevTools Console and type <code is:raw>app.calls.all</code> to see if the value was populated correctly:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/app-calls-all.png" alt="Browser console showing app.calls.all as an array containing four objects"></p>\n<h2 id="search-transcripts">Search Transcripts</h2>\n<p>Inside of your <code is:raw>&lt;div id="app"&gt;</code> add a text input:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">input</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">placeholder</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Search term&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">v-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;filter.term&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">@keyup</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;search&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">/&gt;</span></span></code></pre>\n<p>Then, inside of the empty <code is:raw>search()</code> method conduct a search with Fuse and assign the result to <code is:raw>data.filter.results</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.filter.results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.fuse.</span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.filter.term)</span></span></code></pre>\n<p>Now we have results being computed, let\u2019s display them right under the <code is:raw>&lt;input&gt;</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;result in filter.results&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ result.item.Caller }} on {{ result.item.date }}&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;match in result.matches&quot;</span><span style="color: #C9D1D9">&gt;{{ match.value }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/filtered-results.png" alt="A text box with the word &#x22;yesterday&#x22; in it, and three results. Each result shows the matching phrases."></p>\n<h2 id="show-full-transcript">Show Full Transcript</h2>\n<p>When an search result is clicked, let\u2019s show the whole transcript. Add this attribute to the end of the <code is:raw>&lt;li&gt;</code> element - it will set <code is:raw>data.calls.selected</code> to the clicked item:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;result in filter.results&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;calls.selected = result&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Then, below the <code is:raw>&lt;ol&gt;</code> add another <code is:raw>&lt;ol&gt;</code> to show the utterances in the transcript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;full-call&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;calls.selected&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;utterance in calls.selected.item.utterances&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">small</span><span style="color: #C9D1D9">&gt;{{ utterance.channel == 0 ? &#39;Receiver&#39; : &#39;Caller&#39; }}&lt;/</span><span style="color: #7EE787">small</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;{{ utterance.transcript }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>With the predictability of multichannel audio from Twilio, the receiver of the forwarded call is always on channel 0, so we can display in nicer terms who is speaking.</p>\n<p>Finally, add the following CSS to the <code is:raw>&lt;style&gt;</code> tag in the <code is:raw>&lt;head&gt;</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">margin</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">sans-serif</span><span style="color: #C9D1D9">; }</span></span>\n<span class="line"><span style="color: #79C0FF">#app</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">grid</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">grid-template-columns</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">paddi</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">g</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">gap</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">grid-column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9"> / span </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; }</span></span>\n<span class="line"><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">list-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">margin-bottom</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; }</span></span>\n<span class="line"><span style="color: #79C0FF">#results</span><span style="color: #C9D1D9"> </span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">cursor</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">pointer</span><span style="color: #C9D1D9">; }</span></span></code></pre>\n<p>Refresh and you should see the finished project:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png" alt="Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right."></p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>We\u2019ve done quite a lot here - how to forward and record calls with Twilio, how to handle recording payloads to get transcripts, and implement basic client-side fuzzy search. There\u2019s a lot more we could do to expand on this project:</p>\n<ul>\n<li>Implement outbound call recording</li>\n<li>Group calls under specific callers</li>\n<li>Allow users to make notes for calls or callers</li>\n<li>Use a more permanent database like Supabase - <a href="https://blog.deepgram.com/getting-started-with-supabase/">Brian wrote a getting started post here</a></li>\n</ul>\n<p>The complete project is available at <a href="https://github.com/deepgram-devs/twilio-voice-searchable-log">https://github.com/deepgram-devs/twilio-voice-searchable-log</a> and if you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Build a Searchable Phone Call Dashboard with Twilio", "description": "Automatically log and search your inbound Twilio calls", "date": "2021-12-02T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1638306971/blog/2021/12/twilio-crm-log-js/Build-CRM-w-Searchable-Call-Transcripts-twilio-blog%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["nodejs", "twilio"], "seo": { "title": "Build a Searchable Phone Call Dashboard with Twilio", "description": "Automatically log and search your inbound Twilio calls" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453836/blog/twilio-crm-log-js/ograph.png" }, "shorturls": { "share": "https://dpgr.am/6b12fa8", "twitter": "https://dpgr.am/66efe38", "linkedin": "https://dpgr.am/20d5645", "reddit": "https://dpgr.am/91a22f2", "facebook": "https://dpgr.am/87e4c65" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "preparing-dependencies", "text": "Preparing Dependencies" }, { "depth": 2, "slug": "creating-an-express-server", "text": "Creating An Express Server" }, { "depth": 2, "slug": "project-overview", "text": "Project Overview" }, { "depth": 2, "slug": "configure-your-twilio-number", "text": "Configure Your Twilio Number" }, { "depth": 2, "slug": "handle-inbound-calls", "text": "Handle Inbound Calls" }, { "depth": 2, "slug": "generate-and-save-transcripts", "text": "Generate and Save Transcripts" }, { "depth": 2, "slug": "get-all-recordings", "text": "Get All Recordings" }, { "depth": 2, "slug": "receive-data-in-the-browser", "text": "Receive Data In The Browser" }, { "depth": 2, "slug": "search-transcripts", "text": "Search Transcripts" }, { "depth": 2, "slug": "show-full-transcript", "text": "Show Full Transcript" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nImagine being able to search phrases in every call you've had to find exactly what was said. That's the dream, right? Well - it's my dream, and it's what we're building today.\n\nUsers can call a Twilio phone number, which will be forwarded to your agent while recording. Once the call is completed, we will get a transcript using Deepgram's Speech Recognition API and make it available through a searchable dashboard we'll put together with Vue.js. The front-end is super light, so you could build it with any framework (or none at all).\n\n![Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right.](https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png)\n\nIf you want to look at the final project code, you can find it at https://github.com/deepgram-devs/twilio-voice-searchable-log.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   A Twilio Account SID and Auth Token and a Twilio phone number - [get one here](https://console.twilio.com).\n*   Use of two phones to test your project - one to make the call and one to receive.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n```\nnpm install @deepgram/sdk twilio dotenv express body-parser nedb-promises\n```\nCreate a `.env` file, open it in your code editor, and populate it with your credentials and settings:\n\n```\nDG_KEY=replace_with_deepgram_key\nTWILIO_ACCOUNT_SID=replace_with_sid\nTWILIO_AUTH_TOKEN=replace_with_auth_token\nTWILIO_NUMBER=replace_with_twilio_phone_number\nFORWARDING_NUMBER=replace_with_your_phone_number\n```\n<Alert type=\"warning\">You should not share this .env file as it contains sensitive credentials. If you are using git version control, make sure to ignore this file.</Alert>\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these packages:\n\n```js\nrequire('dotenv').config()\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst nedb = require('nedb-promises')\nconst Twilio = require('twilio')\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nCreate a new nedb database. This will either load an existing file, or create one if it doesn't exist:\n\n```js\nconst db = nedb.create('calls.db')\n```\n\nInitialize the Twilio Helper library and [Deepgram Node SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/):\n\n```js\nconst twilio = new Twilio(\n  process.env.TWILIO_ACCOUNT_SID,\n  process.env.TWILIO_AUTH_TOKEN\n)\nconst deepgram = new Deepgram(process.env.DG_KEY)\n```\n\n## Creating An Express Server\n\nInitialize an `express` instance, configure `body-parser` and a `public` directory, and start it at port 3000:\n\n```js\nconst app = express()\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(express.static('public'))\n\n// Further code goes here\n\napp.listen(3000, console.log(`Listening at ${new Date().toISOString()}`))\n```\n\n## Project Overview\n\nWhen a user rings our Twilio number, our application will be sent a POST request with a bunch of information - we will grab their phone number and the call identifier and add it to our database. We will instruct our application to forward the call to our real number and begin recording. Once the call is completed (or after the default one-hour limit), the recording will be saved, and, once ready, Twilio will send recording information back to our application.\n\nWe send the recording URL to Deepgram and receive a transcript in return. The recording details also contain the call identifier, so we can add the recording URL and the transcript to the existing database entry.\n\nOnce we have data in a database - the final step is to build the web dashboard with client-side search, which we will do towards the end of this blog post.\n\n## Configure Your Twilio Number\n\nWhen Twilio sends data to an application, it expects a publicly-accessible URL, but our application is only on our local machine. Fortunately, we can use [ngrok](https://ngrok.com) to provide a temporary public URL that will forward requests to our locally-running application. Open a new terminal and run the following:\n\n```bash\nnpx ngrok http 3000\n```\n\nOnce running, you will see a Ngrok URL in the terminal dashboard which we can provide to Twilio. If you restart your terminal, ngrok, or after 24 hours, the URL will change, and you need to complete the next step again.\n\n![Accept incoming Voice Calls, configure with Webhook, a call comes in webhook to ngrok url /inbound](https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/voice-config.png)\n\nNavigate to your phone number's settings in the Twilio Console, and configure incoming calls to send a HTTP POST request to your ngrok URL followed by `/inbound`.\n\n## Handle Inbound Calls\n\nIn your `index.js` file add a new route handler for receiving Twilio calls:\n\n```js\napp.post('/inbound', async (req, res) => {\n  const { Caller, CallSid } = req.body\n\n  // Add caller number, call indetifier, and date to the database\n  await db.insert({ Caller, CallSid, date: new Date() })\n\n  // Create Twilio instructions\n  const twiml = new Twilio.twiml.VoiceResponse()\n  const dial = twiml.dial({\n    record: 'record-from-answer-dual',\n    recordingStatusCallback: '/recordings',\n  })\n  dial.number(process.env.FORWARDING_NUMBER)\n\n  // Send response to Twilio\n  res.type('text/xml')\n  res.end(twiml.toString())\n})\n\n// Further code here\n```\n\nThe `dial` variable is the most critical bit here - we tell Twilio to record the call once it is answered and to record each speaker in their own channel. This isn't required but will lead to higher-quality transcripts later. Once the recording is ready, we tell Twilio to send a POST request with data to `/recordings`. Finally, we tell Twilio to forward this call to the number in our `.env` file - perhaps a reception or sales rep.\n\nBefore we test this, create an empty route handler for recordings:\n\n```js\napp.post('/recordings', async (req, res) => {\n  console.log('Recording received')\n  // Further code here\n\n  res.send('ok')\n})\n```\n\n**Test your code!** Run with `node index.js` while making sure ngrok is still running. Call your Twilio number from a phone number that is different from the one in .env and your forwarding number should ring. Answer, speak, hang up, and you should see 'Recording received' in your terminal a few seconds later.\n\n## Generate and Save Transcripts\n\nReplace your `/recordings` route handler:\n\n```js\napp.post('/recordings', async (req, res) => {\n  console.log('Recording received')\n\n  // Get values from data\n  const { CallSid, RecordingUrl } = req.body\n\n  // Get transcript\n  const transcriptionFeatures = {\n    punctuate: true,\n    utterances: true,\n    model: 'phonecall',\n    multichannel: true,\n  }\n  const transcript = await deepgram.transcription.preRecorded(\n    { url: RecordingUrl },\n    transcriptionFeatures\n  )\n\n  // Format response\n  const utterances = transcript.results.utterances.map((utterance) => ({\n    channel: utterance.channel,\n    transcript: utterance.transcript,\n  }))\n\n  // Update database entry\n  await db.update({ CallSid }, { $set: { RecordingUrl, utterances } })\n  res.send('ok')\n})\n```\n\nTwilio sends a body of data along with this request - we only care about the call identifier and the URL of the recording, so we pull those out by destcructuring the object.\n\nThen, we ask Deepgram for a transcript. Let's recap the features we use:\n\n*   The `punctuate` feature adds punctuation for easier reading.\n*   The `utterances` feature will return the spoken phrases rather than just words, and specifies the user who spoke them.\n*   The `model` feature lets us specify a model to use. We have a few, and the default model would probably perform quite well, but we specifically have one trained for phone calls, so we specify it here.\n*   The `multichannel` feature tells Deepgram that we are sending an audio file with multiple audio channels (one for each speaker). It improves transcription quality as we can accurately identify who is speaking at any point in time.\n\nOnce we provide the recording URL and receive a response from Deepgram, we format the response. The output is an array that looks like this:\n\n```json\n[\n  { \"channel\": 1, \"transcript\": \"Hi, Kev.\" },\n  { \"channel\": 0, \"transcript\": \"Hello. How are you mum?\" },\n  { \"channel\": 1, \"transcript\": \"I'm fine. Thank you. How are you?\" },\n  { \"channel\": 0, \"transcript\": \"Yes. Not too bad at all. Thank you\" }\n]\n```\n\nFinally, we update the existing database entry for this call to include both the recording URL and the utterances spoken.\n\n**Test your code!** Repeat the previous test steps, and you should see the database file (`calls.db`) now containing the new data.\n\n## Get All Recordings\n\nThe final step to the server-side of this project is to build a route handler that will return all calls which have a transcript included:\n\n```js\napp.get('/recordings', async (req, res) => {\n  const recordings = await db\n    .find({ utterances: { $exists: true } })\n    .sort({ date: -1 })\n  res.json(recordings)\n})\n```\n\nThis route handler will also sort results, so it's the latest-first.\n\n## Receive Data In The Browser\n\nOur search will consist of three parts:\n\n1.  A search box which, when typed in, will [fuzzy search](https://en.wikipedia.org/wiki/Approximate_string_matching) all call transcripts fetched from the database. We will use [Fuse.js](https://fusejs.io) for the fuzzy search.\n2.  An updating list of results which will show the phrases that matched the earch term.\n3.  When a result is clicked, a full transcript of the call.\n\nCreate a `public` directory and an `index.html` file inside of it. Open the file and scaffold a page:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Twilio x Deepgram Call Transcripts</title>\n    <style></style>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.14\"><\/script>\n    <script src=\"https://cdn.jsdelivr.net/npm/fuse.js@6.4.6\"><\/script>\n    <script>\n      const app = new Vue({\n        el: '#app',\n        data: {\n          fuse: false,\n          calls: {\n            all: [],\n            selected: false,\n          },\n          filter: {\n            term: '',\n            results: [],\n          },\n        },\n        async created() {\n          // Further code goes here\n        },\n        methods: {\n          search() {},\n        },\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nOur first goal is to populate `data.calls.all` with the items from the database returned from the GET `/recordings` route handler, and then create a Fuse search index with those items. Inside the `created()` method:\n\n```js\nthis.calls.all = await fetch('/recordings').then((r) => r.json())\nthis.fuse = new Fuse(this.calls.all, {\n  keys: ['Caller', 'utterances.transcript'],\n  includeMatches: true,\n  threshold: 0.5,\n})\n```\n\nRestart your server, navigate to `http://localhost:3000` in your browser. Open the DevTools Console and type `app.calls.all` to see if the value was populated correctly:\n\n![Browser console showing app.calls.all as an array containing four objects](https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/app-calls-all.png)\n\n## Search Transcripts\n\nInside of your `<div id=\"app\">` add a text input:\n\n```html\n<input\n  type=\"text\"\n  placeholder=\"Search term\"\n  v-model=\"filter.term\"\n  @keyup=\"search\"\n/>\n```\n\nThen, inside of the empty `search()` method conduct a search with Fuse and assign the result to `data.filter.results`:\n\n```js\nthis.filter.results = this.fuse.search(this.filter.term)\n```\n\nNow we have results being computed, let's display them right under the `<input>`:\n\n```html\n<ol id=\"results\">\n  <li v-for=\"result in filter.results\">\n    <p><b>{{ result.item.Caller }} on {{ result.item.date }}</b></p>\n    <p v-for=\"match in result.matches\">{{ match.value }}</p>\n  </li>\n</ol>\n```\n\n![A text box with the word \"yesterday\" in it, and three results. Each result shows the matching phrases.](https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/filtered-results.png)\n\n## Show Full Transcript\n\nWhen an search result is clicked, let's show the whole transcript. Add this attribute to the end of the `<li>` element - it will set `data.calls.selected` to the clicked item:\n\n```html\n<li v-for=\"result in filter.results\" @click=\"calls.selected = result\"></li>\n```\n\nThen, below the `<ol>` add another `<ol>` to show the utterances in the transcript:\n\n```html\n<ol id=\"full-call\" v-if=\"calls.selected\">\n  <li v-for=\"utterance in calls.selected.item.utterances\">\n    <small>{{ utterance.channel == 0 ? 'Receiver' : 'Caller' }}</small>\n    <p>{{ utterance.transcript }}</p>\n  </li>\n</ol>\n```\n\nWith the predictability of multichannel audio from Twilio, the receiver of the forwarded call is always on channel 0, so we can display in nicer terms who is speaking.\n\nFinally, add the following CSS to the `<style>` tag in the `<head>`:\n\n```css\n* { margin: 0; padding: 0; font-family: sans-serif; }\n#app { display: grid; grid-template-columns: 1fr 1fr; paddi g: 1em; gap: 2em }\ninput { grid-column: 1 / span 2; font-size: 1em; padding: 0.5em; }\nli { list-style: none; margin-bottom: 1em; }\n#results li { cursor: pointer; }\n```\n\nRefresh and you should see the finished project:\n\n![Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right.](https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png)\n\n## Wrapping Up\n\nWe've done quite a lot here - how to forward and record calls with Twilio, how to handle recording payloads to get transcripts, and implement basic client-side fuzzy search. There's a lot more we could do to expand on this project:\n\n*   Implement outbound call recording\n*   Group calls under specific callers\n*   Allow users to make notes for calls or callers\n*   Use a more permanent database like Supabase - [Brian wrote a getting started post here](https://blog.deepgram.com/getting-started-with-supabase/)\n\nThe complete project is available at https://github.com/deepgram-devs/twilio-voice-searchable-log and if you have any questions please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n", "html": '<p>Imagine being able to search phrases in every call you\u2019ve had to find exactly what was said. That\u2019s the dream, right? Well - it\u2019s my dream, and it\u2019s what we\u2019re building today.</p>\n<p>Users can call a Twilio phone number, which will be forwarded to your agent while recording. Once the call is completed, we will get a transcript using Deepgram\u2019s Speech Recognition API and make it available through a searchable dashboard we\u2019ll put together with Vue.js. The front-end is super light, so you could build it with any framework (or none at all).</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png" alt="Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right."></p>\n<p>If you want to look at the final project code, you can find it at <a href="https://github.com/deepgram-devs/twilio-voice-searchable-log">https://github.com/deepgram-devs/twilio-voice-searchable-log</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A Twilio Account SID and Auth Token and a Twilio phone number - <a href="https://console.twilio.com">get one here</a>.</li>\n<li>Use of two phones to test your project - one to make the call and one to receive.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk twilio dotenv express body-parser nedb-promises</span></span></code></pre>\n<p>Create a <code is:raw>.env</code> file, open it in your code editor, and populate it with your credentials and settings:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DG_KEY=replace_with_deepgram_key</span></span>\n<span class="line"><span style="color: #c9d1d9">TWILIO_ACCOUNT_SID=replace_with_sid</span></span>\n<span class="line"><span style="color: #c9d1d9">TWILIO_AUTH_TOKEN=replace_with_auth_token</span></span>\n<span class="line"><span style="color: #c9d1d9">TWILIO_NUMBER=replace_with_twilio_phone_number</span></span>\n<span class="line"><span style="color: #c9d1d9">FORWARDING_NUMBER=replace_with_your_phone_number</span></span></code></pre>\n<Alert type="warning">You should not share this .env file as it contains sensitive credentials. If you are using git version control, make sure to ignore this file.</Alert>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bodyParser</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;body-parser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">nedb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;nedb-promises&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Twilio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;twilio&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Create a new nedb database. This will either load an existing file, or create one if it doesn\u2019t exist:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">db</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> nedb.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;calls.db&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Initialize the Twilio Helper library and <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram Node SDK</a>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Twilio</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  process.env.</span><span style="color: #79C0FF">TWILIO_ACCOUNT_SID</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  process.env.</span><span style="color: #79C0FF">TWILIO_AUTH_TOKEN</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="creating-an-express-server">Creating An Express Server</h2>\n<p>Initialize an <code is:raw>express</code> instance, configure <code is:raw>body-parser</code> and a <code is:raw>public</code> directory, and start it at port 3000:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(bodyParser.</span><span style="color: #D2A8FF">urlencoded</span><span style="color: #C9D1D9">({ extended: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> }))</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Listening at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<h2 id="project-overview">Project Overview</h2>\n<p>When a user rings our Twilio number, our application will be sent a POST request with a bunch of information - we will grab their phone number and the call identifier and add it to our database. We will instruct our application to forward the call to our real number and begin recording. Once the call is completed (or after the default one-hour limit), the recording will be saved, and, once ready, Twilio will send recording information back to our application.</p>\n<p>We send the recording URL to Deepgram and receive a transcript in return. The recording details also contain the call identifier, so we can add the recording URL and the transcript to the existing database entry.</p>\n<p>Once we have data in a database - the final step is to build the web dashboard with client-side search, which we will do towards the end of this blog post.</p>\n<h2 id="configure-your-twilio-number">Configure Your Twilio Number</h2>\n<p>When Twilio sends data to an application, it expects a publicly-accessible URL, but our application is only on our local machine. Fortunately, we can use <a href="https://ngrok.com">ngrok</a> to provide a temporary public URL that will forward requests to our locally-running application. Open a new terminal and run the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx ngrok http 3000</span></span></code></pre>\n<p>Once running, you will see a Ngrok URL in the terminal dashboard which we can provide to Twilio. If you restart your terminal, ngrok, or after 24 hours, the URL will change, and you need to complete the next step again.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/voice-config.png" alt="Accept incoming Voice Calls, configure with Webhook, a call comes in webhook to ngrok url /inbound"></p>\n<p>Navigate to your phone number\u2019s settings in the Twilio Console, and configure incoming calls to send a HTTP POST request to your ngrok URL followed by <code is:raw>/inbound</code>.</p>\n<h2 id="handle-inbound-calls">Handle Inbound Calls</h2>\n<p>In your <code is:raw>index.js</code> file add a new route handler for receiving Twilio calls:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/inbound&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Caller</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add caller number, call indetifier, and date to the database</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db.</span><span style="color: #D2A8FF">insert</span><span style="color: #C9D1D9">({ Caller, CallSid, date: </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">() })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create Twilio instructions</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twiml</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dial</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> twiml.</span><span style="color: #D2A8FF">dial</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    record: </span><span style="color: #A5D6FF">&#39;record-from-answer-dual&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  dial.</span><span style="color: #D2A8FF">number</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">FORWARDING_NUMBER</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Send response to Twilio</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">type</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;text/xml&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">(twiml.</span><span style="color: #D2A8FF">toString</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>\n<p>The <code is:raw>dial</code> variable is the most critical bit here - we tell Twilio to record the call once it is answered and to record each speaker in their own channel. This isn\u2019t required but will lead to higher-quality transcripts later. Once the recording is ready, we tell Twilio to send a POST request with data to <code is:raw>/recordings</code>. Finally, we tell Twilio to forward this call to the number in our <code is:raw>.env</code> file - perhaps a reception or sales rep.</p>\n<p>Before we test this, create an empty route handler for recordings:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Recording received&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p><strong>Test your code!</strong> Run with <code is:raw>node index.js</code> while making sure ngrok is still running. Call your Twilio number from a phone number that is different from the one in .env and your forwarding number should ring. Answer, speak, hang up, and you should see \u2018Recording received\u2019 in your terminal a few seconds later.</p>\n<h2 id="generate-and-save-transcripts">Generate and Save Transcripts</h2>\n<p>Replace your <code is:raw>/recordings</code> route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Recording received&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get values from data</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    model: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    multichannel: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    { url: RecordingUrl },</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcriptionFeatures</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Format response</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterances</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.results.utterances.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">utterance</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    channel: utterance.channel,</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcript: utterance.transcript,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Update database entry</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db.</span><span style="color: #D2A8FF">update</span><span style="color: #C9D1D9">({ CallSid }, { $set: { RecordingUrl, utterances } })</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Twilio sends a body of data along with this request - we only care about the call identifier and the URL of the recording, so we pull those out by destcructuring the object.</p>\n<p>Then, we ask Deepgram for a transcript. Let\u2019s recap the features we use:</p>\n<ul>\n<li>The <code is:raw>punctuate</code> feature adds punctuation for easier reading.</li>\n<li>The <code is:raw>utterances</code> feature will return the spoken phrases rather than just words, and specifies the user who spoke them.</li>\n<li>The <code is:raw>model</code> feature lets us specify a model to use. We have a few, and the default model would probably perform quite well, but we specifically have one trained for phone calls, so we specify it here.</li>\n<li>The <code is:raw>multichannel</code> feature tells Deepgram that we are sending an audio file with multiple audio channels (one for each speaker). It improves transcription quality as we can accurately identify who is speaking at any point in time.</li>\n</ul>\n<p>Once we provide the recording URL and receive a response from Deepgram, we format the response. The output is an array that looks like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hi, Kev.&quot;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hello. How are you mum?&quot;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;I&#39;m fine. Thank you. How are you?&quot;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Yes. Not too bad at all. Thank you&quot;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Finally, we update the existing database entry for this call to include both the recording URL and the utterances spoken.</p>\n<p><strong>Test your code!</strong> Repeat the previous test steps, and you should see the database file (<code is:raw>calls.db</code>) now containing the new data.</p>\n<h2 id="get-all-recordings">Get All Recordings</h2>\n<p>The final step to the server-side of this project is to build a route handler that will return all calls which have a transcript included:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recordings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">({ utterances: { $exists: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> } })</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">sort</span><span style="color: #C9D1D9">({ date: </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">(recordings)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This route handler will also sort results, so it\u2019s the latest-first.</p>\n<h2 id="receive-data-in-the-browser">Receive Data In The Browser</h2>\n<p>Our search will consist of three parts:</p>\n<ol>\n<li>A search box which, when typed in, will <a href="https://en.wikipedia.org/wiki/Approximate_string_matching">fuzzy search</a> all call transcripts fetched from the database. We will use <a href="https://fusejs.io">Fuse.js</a> for the fuzzy search.</li>\n<li>An updating list of results which will show the phrases that matched the earch term.</li>\n<li>When a result is clicked, a full transcript of the call.</li>\n</ol>\n<p>Create a <code is:raw>public</code> directory and an <code is:raw>index.html</code> file inside of it. Open the file and scaffold a page:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Twilio x Deepgram Call Transcripts&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/fuse.js@6.4.6&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">          fuse: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          calls: {</span></span>\n<span class="line"><span style="color: #C9D1D9">            all: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">            selected: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          },</span></span>\n<span class="line"><span style="color: #C9D1D9">          filter: {</span></span>\n<span class="line"><span style="color: #C9D1D9">            term: </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            results: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">          },</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        methods: {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">() {},</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Our first goal is to populate <code is:raw>data.calls.all</code> with the items from the database returned from the GET <code is:raw>/recordings</code> route handler, and then create a Fuse search index with those items. Inside the <code is:raw>created()</code> method:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.calls.all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.fuse </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Fuse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.calls.all, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  keys: [</span><span style="color: #A5D6FF">&#39;Caller&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;utterances.transcript&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">  includeMatches: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  threshold: </span><span style="color: #79C0FF">0.5</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server, navigate to <code is:raw>http://localhost:3000</code> in your browser. Open the DevTools Console and type <code is:raw>app.calls.all</code> to see if the value was populated correctly:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/app-calls-all.png" alt="Browser console showing app.calls.all as an array containing four objects"></p>\n<h2 id="search-transcripts">Search Transcripts</h2>\n<p>Inside of your <code is:raw>&lt;div id="app"&gt;</code> add a text input:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">input</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">placeholder</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Search term&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">v-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;filter.term&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">@keyup</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;search&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">/&gt;</span></span></code></pre>\n<p>Then, inside of the empty <code is:raw>search()</code> method conduct a search with Fuse and assign the result to <code is:raw>data.filter.results</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.filter.results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.fuse.</span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.filter.term)</span></span></code></pre>\n<p>Now we have results being computed, let\u2019s display them right under the <code is:raw>&lt;input&gt;</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;result in filter.results&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ result.item.Caller }} on {{ result.item.date }}&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;match in result.matches&quot;</span><span style="color: #C9D1D9">&gt;{{ match.value }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/filtered-results.png" alt="A text box with the word &#x22;yesterday&#x22; in it, and three results. Each result shows the matching phrases."></p>\n<h2 id="show-full-transcript">Show Full Transcript</h2>\n<p>When an search result is clicked, let\u2019s show the whole transcript. Add this attribute to the end of the <code is:raw>&lt;li&gt;</code> element - it will set <code is:raw>data.calls.selected</code> to the clicked item:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;result in filter.results&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;calls.selected = result&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Then, below the <code is:raw>&lt;ol&gt;</code> add another <code is:raw>&lt;ol&gt;</code> to show the utterances in the transcript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;full-call&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;calls.selected&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;utterance in calls.selected.item.utterances&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">small</span><span style="color: #C9D1D9">&gt;{{ utterance.channel == 0 ? &#39;Receiver&#39; : &#39;Caller&#39; }}&lt;/</span><span style="color: #7EE787">small</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;{{ utterance.transcript }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>With the predictability of multichannel audio from Twilio, the receiver of the forwarded call is always on channel 0, so we can display in nicer terms who is speaking.</p>\n<p>Finally, add the following CSS to the <code is:raw>&lt;style&gt;</code> tag in the <code is:raw>&lt;head&gt;</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">margin</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">sans-serif</span><span style="color: #C9D1D9">; }</span></span>\n<span class="line"><span style="color: #79C0FF">#app</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">grid</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">grid-template-columns</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">paddi</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">g</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">gap</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">grid-column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9"> / span </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; }</span></span>\n<span class="line"><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">list-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">margin-bottom</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; }</span></span>\n<span class="line"><span style="color: #79C0FF">#results</span><span style="color: #C9D1D9"> </span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">cursor</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">pointer</span><span style="color: #C9D1D9">; }</span></span></code></pre>\n<p>Refresh and you should see the finished project:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png" alt="Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right."></p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>We\u2019ve done quite a lot here - how to forward and record calls with Twilio, how to handle recording payloads to get transcripts, and implement basic client-side fuzzy search. There\u2019s a lot more we could do to expand on this project:</p>\n<ul>\n<li>Implement outbound call recording</li>\n<li>Group calls under specific callers</li>\n<li>Allow users to make notes for calls or callers</li>\n<li>Use a more permanent database like Supabase - <a href="https://blog.deepgram.com/getting-started-with-supabase/">Brian wrote a getting started post here</a></li>\n</ul>\n<p>The complete project is available at <a href="https://github.com/deepgram-devs/twilio-voice-searchable-log">https://github.com/deepgram-devs/twilio-voice-searchable-log</a> and if you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/twilio-crm-log-js/index.md" };
function rawContent() {
  return "\nImagine being able to search phrases in every call you've had to find exactly what was said. That's the dream, right? Well - it's my dream, and it's what we're building today.\n\nUsers can call a Twilio phone number, which will be forwarded to your agent while recording. Once the call is completed, we will get a transcript using Deepgram's Speech Recognition API and make it available through a searchable dashboard we'll put together with Vue.js. The front-end is super light, so you could build it with any framework (or none at all).\n\n![Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right.](https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png)\n\nIf you want to look at the final project code, you can find it at https://github.com/deepgram-devs/twilio-voice-searchable-log.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   A Twilio Account SID and Auth Token and a Twilio phone number - [get one here](https://console.twilio.com).\n*   Use of two phones to test your project - one to make the call and one to receive.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n```\nnpm install @deepgram/sdk twilio dotenv express body-parser nedb-promises\n```\nCreate a `.env` file, open it in your code editor, and populate it with your credentials and settings:\n\n```\nDG_KEY=replace_with_deepgram_key\nTWILIO_ACCOUNT_SID=replace_with_sid\nTWILIO_AUTH_TOKEN=replace_with_auth_token\nTWILIO_NUMBER=replace_with_twilio_phone_number\nFORWARDING_NUMBER=replace_with_your_phone_number\n```\n<Alert type=\"warning\">You should not share this .env file as it contains sensitive credentials. If you are using git version control, make sure to ignore this file.</Alert>\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these packages:\n\n```js\nrequire('dotenv').config()\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst nedb = require('nedb-promises')\nconst Twilio = require('twilio')\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nCreate a new nedb database. This will either load an existing file, or create one if it doesn't exist:\n\n```js\nconst db = nedb.create('calls.db')\n```\n\nInitialize the Twilio Helper library and [Deepgram Node SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/):\n\n```js\nconst twilio = new Twilio(\n  process.env.TWILIO_ACCOUNT_SID,\n  process.env.TWILIO_AUTH_TOKEN\n)\nconst deepgram = new Deepgram(process.env.DG_KEY)\n```\n\n## Creating An Express Server\n\nInitialize an `express` instance, configure `body-parser` and a `public` directory, and start it at port 3000:\n\n```js\nconst app = express()\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(express.static('public'))\n\n// Further code goes here\n\napp.listen(3000, console.log(`Listening at ${new Date().toISOString()}`))\n```\n\n## Project Overview\n\nWhen a user rings our Twilio number, our application will be sent a POST request with a bunch of information - we will grab their phone number and the call identifier and add it to our database. We will instruct our application to forward the call to our real number and begin recording. Once the call is completed (or after the default one-hour limit), the recording will be saved, and, once ready, Twilio will send recording information back to our application.\n\nWe send the recording URL to Deepgram and receive a transcript in return. The recording details also contain the call identifier, so we can add the recording URL and the transcript to the existing database entry.\n\nOnce we have data in a database - the final step is to build the web dashboard with client-side search, which we will do towards the end of this blog post.\n\n## Configure Your Twilio Number\n\nWhen Twilio sends data to an application, it expects a publicly-accessible URL, but our application is only on our local machine. Fortunately, we can use [ngrok](https://ngrok.com) to provide a temporary public URL that will forward requests to our locally-running application. Open a new terminal and run the following:\n\n```bash\nnpx ngrok http 3000\n```\n\nOnce running, you will see a Ngrok URL in the terminal dashboard which we can provide to Twilio. If you restart your terminal, ngrok, or after 24 hours, the URL will change, and you need to complete the next step again.\n\n![Accept incoming Voice Calls, configure with Webhook, a call comes in webhook to ngrok url /inbound](https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/voice-config.png)\n\nNavigate to your phone number's settings in the Twilio Console, and configure incoming calls to send a HTTP POST request to your ngrok URL followed by `/inbound`.\n\n## Handle Inbound Calls\n\nIn your `index.js` file add a new route handler for receiving Twilio calls:\n\n```js\napp.post('/inbound', async (req, res) => {\n  const { Caller, CallSid } = req.body\n\n  // Add caller number, call indetifier, and date to the database\n  await db.insert({ Caller, CallSid, date: new Date() })\n\n  // Create Twilio instructions\n  const twiml = new Twilio.twiml.VoiceResponse()\n  const dial = twiml.dial({\n    record: 'record-from-answer-dual',\n    recordingStatusCallback: '/recordings',\n  })\n  dial.number(process.env.FORWARDING_NUMBER)\n\n  // Send response to Twilio\n  res.type('text/xml')\n  res.end(twiml.toString())\n})\n\n// Further code here\n```\n\nThe `dial` variable is the most critical bit here - we tell Twilio to record the call once it is answered and to record each speaker in their own channel. This isn't required but will lead to higher-quality transcripts later. Once the recording is ready, we tell Twilio to send a POST request with data to `/recordings`. Finally, we tell Twilio to forward this call to the number in our `.env` file - perhaps a reception or sales rep.\n\nBefore we test this, create an empty route handler for recordings:\n\n```js\napp.post('/recordings', async (req, res) => {\n  console.log('Recording received')\n  // Further code here\n\n  res.send('ok')\n})\n```\n\n**Test your code!** Run with `node index.js` while making sure ngrok is still running. Call your Twilio number from a phone number that is different from the one in .env and your forwarding number should ring. Answer, speak, hang up, and you should see 'Recording received' in your terminal a few seconds later.\n\n## Generate and Save Transcripts\n\nReplace your `/recordings` route handler:\n\n```js\napp.post('/recordings', async (req, res) => {\n  console.log('Recording received')\n\n  // Get values from data\n  const { CallSid, RecordingUrl } = req.body\n\n  // Get transcript\n  const transcriptionFeatures = {\n    punctuate: true,\n    utterances: true,\n    model: 'phonecall',\n    multichannel: true,\n  }\n  const transcript = await deepgram.transcription.preRecorded(\n    { url: RecordingUrl },\n    transcriptionFeatures\n  )\n\n  // Format response\n  const utterances = transcript.results.utterances.map((utterance) => ({\n    channel: utterance.channel,\n    transcript: utterance.transcript,\n  }))\n\n  // Update database entry\n  await db.update({ CallSid }, { $set: { RecordingUrl, utterances } })\n  res.send('ok')\n})\n```\n\nTwilio sends a body of data along with this request - we only care about the call identifier and the URL of the recording, so we pull those out by destcructuring the object.\n\nThen, we ask Deepgram for a transcript. Let's recap the features we use:\n\n*   The `punctuate` feature adds punctuation for easier reading.\n*   The `utterances` feature will return the spoken phrases rather than just words, and specifies the user who spoke them.\n*   The `model` feature lets us specify a model to use. We have a few, and the default model would probably perform quite well, but we specifically have one trained for phone calls, so we specify it here.\n*   The `multichannel` feature tells Deepgram that we are sending an audio file with multiple audio channels (one for each speaker). It improves transcription quality as we can accurately identify who is speaking at any point in time.\n\nOnce we provide the recording URL and receive a response from Deepgram, we format the response. The output is an array that looks like this:\n\n```json\n[\n  { \"channel\": 1, \"transcript\": \"Hi, Kev.\" },\n  { \"channel\": 0, \"transcript\": \"Hello. How are you mum?\" },\n  { \"channel\": 1, \"transcript\": \"I'm fine. Thank you. How are you?\" },\n  { \"channel\": 0, \"transcript\": \"Yes. Not too bad at all. Thank you\" }\n]\n```\n\nFinally, we update the existing database entry for this call to include both the recording URL and the utterances spoken.\n\n**Test your code!** Repeat the previous test steps, and you should see the database file (`calls.db`) now containing the new data.\n\n## Get All Recordings\n\nThe final step to the server-side of this project is to build a route handler that will return all calls which have a transcript included:\n\n```js\napp.get('/recordings', async (req, res) => {\n  const recordings = await db\n    .find({ utterances: { $exists: true } })\n    .sort({ date: -1 })\n  res.json(recordings)\n})\n```\n\nThis route handler will also sort results, so it's the latest-first.\n\n## Receive Data In The Browser\n\nOur search will consist of three parts:\n\n1.  A search box which, when typed in, will [fuzzy search](https://en.wikipedia.org/wiki/Approximate_string_matching) all call transcripts fetched from the database. We will use [Fuse.js](https://fusejs.io) for the fuzzy search.\n2.  An updating list of results which will show the phrases that matched the earch term.\n3.  When a result is clicked, a full transcript of the call.\n\nCreate a `public` directory and an `index.html` file inside of it. Open the file and scaffold a page:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Twilio x Deepgram Call Transcripts</title>\n    <style></style>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.14\"><\/script>\n    <script src=\"https://cdn.jsdelivr.net/npm/fuse.js@6.4.6\"><\/script>\n    <script>\n      const app = new Vue({\n        el: '#app',\n        data: {\n          fuse: false,\n          calls: {\n            all: [],\n            selected: false,\n          },\n          filter: {\n            term: '',\n            results: [],\n          },\n        },\n        async created() {\n          // Further code goes here\n        },\n        methods: {\n          search() {},\n        },\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nOur first goal is to populate `data.calls.all` with the items from the database returned from the GET `/recordings` route handler, and then create a Fuse search index with those items. Inside the `created()` method:\n\n```js\nthis.calls.all = await fetch('/recordings').then((r) => r.json())\nthis.fuse = new Fuse(this.calls.all, {\n  keys: ['Caller', 'utterances.transcript'],\n  includeMatches: true,\n  threshold: 0.5,\n})\n```\n\nRestart your server, navigate to `http://localhost:3000` in your browser. Open the DevTools Console and type `app.calls.all` to see if the value was populated correctly:\n\n![Browser console showing app.calls.all as an array containing four objects](https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/app-calls-all.png)\n\n## Search Transcripts\n\nInside of your `<div id=\"app\">` add a text input:\n\n```html\n<input\n  type=\"text\"\n  placeholder=\"Search term\"\n  v-model=\"filter.term\"\n  @keyup=\"search\"\n/>\n```\n\nThen, inside of the empty `search()` method conduct a search with Fuse and assign the result to `data.filter.results`:\n\n```js\nthis.filter.results = this.fuse.search(this.filter.term)\n```\n\nNow we have results being computed, let's display them right under the `<input>`:\n\n```html\n<ol id=\"results\">\n  <li v-for=\"result in filter.results\">\n    <p><b>{{ result.item.Caller }} on {{ result.item.date }}</b></p>\n    <p v-for=\"match in result.matches\">{{ match.value }}</p>\n  </li>\n</ol>\n```\n\n![A text box with the word \"yesterday\" in it, and three results. Each result shows the matching phrases.](https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/filtered-results.png)\n\n## Show Full Transcript\n\nWhen an search result is clicked, let's show the whole transcript. Add this attribute to the end of the `<li>` element - it will set `data.calls.selected` to the clicked item:\n\n```html\n<li v-for=\"result in filter.results\" @click=\"calls.selected = result\"></li>\n```\n\nThen, below the `<ol>` add another `<ol>` to show the utterances in the transcript:\n\n```html\n<ol id=\"full-call\" v-if=\"calls.selected\">\n  <li v-for=\"utterance in calls.selected.item.utterances\">\n    <small>{{ utterance.channel == 0 ? 'Receiver' : 'Caller' }}</small>\n    <p>{{ utterance.transcript }}</p>\n  </li>\n</ol>\n```\n\nWith the predictability of multichannel audio from Twilio, the receiver of the forwarded call is always on channel 0, so we can display in nicer terms who is speaking.\n\nFinally, add the following CSS to the `<style>` tag in the `<head>`:\n\n```css\n* { margin: 0; padding: 0; font-family: sans-serif; }\n#app { display: grid; grid-template-columns: 1fr 1fr; paddi g: 1em; gap: 2em }\ninput { grid-column: 1 / span 2; font-size: 1em; padding: 0.5em; }\nli { list-style: none; margin-bottom: 1em; }\n#results li { cursor: pointer; }\n```\n\nRefresh and you should see the finished project:\n\n![Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right.](https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png)\n\n## Wrapping Up\n\nWe've done quite a lot here - how to forward and record calls with Twilio, how to handle recording payloads to get transcripts, and implement basic client-side fuzzy search. There's a lot more we could do to expand on this project:\n\n*   Implement outbound call recording\n*   Group calls under specific callers\n*   Allow users to make notes for calls or callers\n*   Use a more permanent database like Supabase - [Brian wrote a getting started post here](https://blog.deepgram.com/getting-started-with-supabase/)\n\nThe complete project is available at https://github.com/deepgram-devs/twilio-voice-searchable-log and if you have any questions please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n";
}
function compiledContent() {
  return '<p>Imagine being able to search phrases in every call you\u2019ve had to find exactly what was said. That\u2019s the dream, right? Well - it\u2019s my dream, and it\u2019s what we\u2019re building today.</p>\n<p>Users can call a Twilio phone number, which will be forwarded to your agent while recording. Once the call is completed, we will get a transcript using Deepgram\u2019s Speech Recognition API and make it available through a searchable dashboard we\u2019ll put together with Vue.js. The front-end is super light, so you could build it with any framework (or none at all).</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png" alt="Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right."></p>\n<p>If you want to look at the final project code, you can find it at <a href="https://github.com/deepgram-devs/twilio-voice-searchable-log">https://github.com/deepgram-devs/twilio-voice-searchable-log</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A Twilio Account SID and Auth Token and a Twilio phone number - <a href="https://console.twilio.com">get one here</a>.</li>\n<li>Use of two phones to test your project - one to make the call and one to receive.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk twilio dotenv express body-parser nedb-promises</span></span></code></pre>\n<p>Create a <code is:raw>.env</code> file, open it in your code editor, and populate it with your credentials and settings:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DG_KEY=replace_with_deepgram_key</span></span>\n<span class="line"><span style="color: #c9d1d9">TWILIO_ACCOUNT_SID=replace_with_sid</span></span>\n<span class="line"><span style="color: #c9d1d9">TWILIO_AUTH_TOKEN=replace_with_auth_token</span></span>\n<span class="line"><span style="color: #c9d1d9">TWILIO_NUMBER=replace_with_twilio_phone_number</span></span>\n<span class="line"><span style="color: #c9d1d9">FORWARDING_NUMBER=replace_with_your_phone_number</span></span></code></pre>\n<Alert type="warning">You should not share this .env file as it contains sensitive credentials. If you are using git version control, make sure to ignore this file.</Alert>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bodyParser</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;body-parser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">nedb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;nedb-promises&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Twilio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;twilio&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Create a new nedb database. This will either load an existing file, or create one if it doesn\u2019t exist:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">db</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> nedb.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;calls.db&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Initialize the Twilio Helper library and <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram Node SDK</a>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Twilio</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">  process.env.</span><span style="color: #79C0FF">TWILIO_ACCOUNT_SID</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  process.env.</span><span style="color: #79C0FF">TWILIO_AUTH_TOKEN</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="creating-an-express-server">Creating An Express Server</h2>\n<p>Initialize an <code is:raw>express</code> instance, configure <code is:raw>body-parser</code> and a <code is:raw>public</code> directory, and start it at port 3000:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(bodyParser.</span><span style="color: #D2A8FF">urlencoded</span><span style="color: #C9D1D9">({ extended: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> }))</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Listening at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<h2 id="project-overview">Project Overview</h2>\n<p>When a user rings our Twilio number, our application will be sent a POST request with a bunch of information - we will grab their phone number and the call identifier and add it to our database. We will instruct our application to forward the call to our real number and begin recording. Once the call is completed (or after the default one-hour limit), the recording will be saved, and, once ready, Twilio will send recording information back to our application.</p>\n<p>We send the recording URL to Deepgram and receive a transcript in return. The recording details also contain the call identifier, so we can add the recording URL and the transcript to the existing database entry.</p>\n<p>Once we have data in a database - the final step is to build the web dashboard with client-side search, which we will do towards the end of this blog post.</p>\n<h2 id="configure-your-twilio-number">Configure Your Twilio Number</h2>\n<p>When Twilio sends data to an application, it expects a publicly-accessible URL, but our application is only on our local machine. Fortunately, we can use <a href="https://ngrok.com">ngrok</a> to provide a temporary public URL that will forward requests to our locally-running application. Open a new terminal and run the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx ngrok http 3000</span></span></code></pre>\n<p>Once running, you will see a Ngrok URL in the terminal dashboard which we can provide to Twilio. If you restart your terminal, ngrok, or after 24 hours, the URL will change, and you need to complete the next step again.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/voice-config.png" alt="Accept incoming Voice Calls, configure with Webhook, a call comes in webhook to ngrok url /inbound"></p>\n<p>Navigate to your phone number\u2019s settings in the Twilio Console, and configure incoming calls to send a HTTP POST request to your ngrok URL followed by <code is:raw>/inbound</code>.</p>\n<h2 id="handle-inbound-calls">Handle Inbound Calls</h2>\n<p>In your <code is:raw>index.js</code> file add a new route handler for receiving Twilio calls:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/inbound&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Caller</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add caller number, call indetifier, and date to the database</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db.</span><span style="color: #D2A8FF">insert</span><span style="color: #C9D1D9">({ Caller, CallSid, date: </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">() })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create Twilio instructions</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twiml</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dial</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> twiml.</span><span style="color: #D2A8FF">dial</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    record: </span><span style="color: #A5D6FF">&#39;record-from-answer-dual&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  dial.</span><span style="color: #D2A8FF">number</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">FORWARDING_NUMBER</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Send response to Twilio</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">type</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;text/xml&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">(twiml.</span><span style="color: #D2A8FF">toString</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>\n<p>The <code is:raw>dial</code> variable is the most critical bit here - we tell Twilio to record the call once it is answered and to record each speaker in their own channel. This isn\u2019t required but will lead to higher-quality transcripts later. Once the recording is ready, we tell Twilio to send a POST request with data to <code is:raw>/recordings</code>. Finally, we tell Twilio to forward this call to the number in our <code is:raw>.env</code> file - perhaps a reception or sales rep.</p>\n<p>Before we test this, create an empty route handler for recordings:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Recording received&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p><strong>Test your code!</strong> Run with <code is:raw>node index.js</code> while making sure ngrok is still running. Call your Twilio number from a phone number that is different from the one in .env and your forwarding number should ring. Answer, speak, hang up, and you should see \u2018Recording received\u2019 in your terminal a few seconds later.</p>\n<h2 id="generate-and-save-transcripts">Generate and Save Transcripts</h2>\n<p>Replace your <code is:raw>/recordings</code> route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Recording received&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get values from data</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    model: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    multichannel: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    { url: RecordingUrl },</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcriptionFeatures</span></span>\n<span class="line"><span style="color: #C9D1D9">  )</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Format response</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterances</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.results.utterances.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">utterance</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>\n<span class="line"><span style="color: #C9D1D9">    channel: utterance.channel,</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcript: utterance.transcript,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Update database entry</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db.</span><span style="color: #D2A8FF">update</span><span style="color: #C9D1D9">({ CallSid }, { $set: { RecordingUrl, utterances } })</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Twilio sends a body of data along with this request - we only care about the call identifier and the URL of the recording, so we pull those out by destcructuring the object.</p>\n<p>Then, we ask Deepgram for a transcript. Let\u2019s recap the features we use:</p>\n<ul>\n<li>The <code is:raw>punctuate</code> feature adds punctuation for easier reading.</li>\n<li>The <code is:raw>utterances</code> feature will return the spoken phrases rather than just words, and specifies the user who spoke them.</li>\n<li>The <code is:raw>model</code> feature lets us specify a model to use. We have a few, and the default model would probably perform quite well, but we specifically have one trained for phone calls, so we specify it here.</li>\n<li>The <code is:raw>multichannel</code> feature tells Deepgram that we are sending an audio file with multiple audio channels (one for each speaker). It improves transcription quality as we can accurately identify who is speaking at any point in time.</li>\n</ul>\n<p>Once we provide the recording URL and receive a response from Deepgram, we format the response. The output is an array that looks like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hi, Kev.&quot;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hello. How are you mum?&quot;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;I&#39;m fine. Thank you. How are you?&quot;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Yes. Not too bad at all. Thank you&quot;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Finally, we update the existing database entry for this call to include both the recording URL and the utterances spoken.</p>\n<p><strong>Test your code!</strong> Repeat the previous test steps, and you should see the database file (<code is:raw>calls.db</code>) now containing the new data.</p>\n<h2 id="get-all-recordings">Get All Recordings</h2>\n<p>The final step to the server-side of this project is to build a route handler that will return all calls which have a transcript included:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recordings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">({ utterances: { $exists: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> } })</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">sort</span><span style="color: #C9D1D9">({ date: </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">(recordings)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This route handler will also sort results, so it\u2019s the latest-first.</p>\n<h2 id="receive-data-in-the-browser">Receive Data In The Browser</h2>\n<p>Our search will consist of three parts:</p>\n<ol>\n<li>A search box which, when typed in, will <a href="https://en.wikipedia.org/wiki/Approximate_string_matching">fuzzy search</a> all call transcripts fetched from the database. We will use <a href="https://fusejs.io">Fuse.js</a> for the fuzzy search.</li>\n<li>An updating list of results which will show the phrases that matched the earch term.</li>\n<li>When a result is clicked, a full transcript of the call.</li>\n</ol>\n<p>Create a <code is:raw>public</code> directory and an <code is:raw>index.html</code> file inside of it. Open the file and scaffold a page:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Twilio x Deepgram Call Transcripts&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/fuse.js@6.4.6&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">          fuse: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          calls: {</span></span>\n<span class="line"><span style="color: #C9D1D9">            all: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">            selected: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          },</span></span>\n<span class="line"><span style="color: #C9D1D9">          filter: {</span></span>\n<span class="line"><span style="color: #C9D1D9">            term: </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            results: [],</span></span>\n<span class="line"><span style="color: #C9D1D9">          },</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        methods: {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">() {},</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Our first goal is to populate <code is:raw>data.calls.all</code> with the items from the database returned from the GET <code is:raw>/recordings</code> route handler, and then create a Fuse search index with those items. Inside the <code is:raw>created()</code> method:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.calls.all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.fuse </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Fuse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.calls.all, {</span></span>\n<span class="line"><span style="color: #C9D1D9">  keys: [</span><span style="color: #A5D6FF">&#39;Caller&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;utterances.transcript&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">  includeMatches: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  threshold: </span><span style="color: #79C0FF">0.5</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server, navigate to <code is:raw>http://localhost:3000</code> in your browser. Open the DevTools Console and type <code is:raw>app.calls.all</code> to see if the value was populated correctly:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/app-calls-all.png" alt="Browser console showing app.calls.all as an array containing four objects"></p>\n<h2 id="search-transcripts">Search Transcripts</h2>\n<p>Inside of your <code is:raw>&lt;div id="app"&gt;</code> add a text input:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">input</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">placeholder</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Search term&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">v-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;filter.term&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">@keyup</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;search&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">/&gt;</span></span></code></pre>\n<p>Then, inside of the empty <code is:raw>search()</code> method conduct a search with Fuse and assign the result to <code is:raw>data.filter.results</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.filter.results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.fuse.</span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.filter.term)</span></span></code></pre>\n<p>Now we have results being computed, let\u2019s display them right under the <code is:raw>&lt;input&gt;</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;result in filter.results&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ result.item.Caller }} on {{ result.item.date }}&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;match in result.matches&quot;</span><span style="color: #C9D1D9">&gt;{{ match.value }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/filtered-results.png" alt="A text box with the word &#x22;yesterday&#x22; in it, and three results. Each result shows the matching phrases."></p>\n<h2 id="show-full-transcript">Show Full Transcript</h2>\n<p>When an search result is clicked, let\u2019s show the whole transcript. Add this attribute to the end of the <code is:raw>&lt;li&gt;</code> element - it will set <code is:raw>data.calls.selected</code> to the clicked item:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;result in filter.results&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;calls.selected = result&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Then, below the <code is:raw>&lt;ol&gt;</code> add another <code is:raw>&lt;ol&gt;</code> to show the utterances in the transcript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;full-call&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;calls.selected&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;utterance in calls.selected.item.utterances&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">small</span><span style="color: #C9D1D9">&gt;{{ utterance.channel == 0 ? &#39;Receiver&#39; : &#39;Caller&#39; }}&lt;/</span><span style="color: #7EE787">small</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;{{ utterance.transcript }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>With the predictability of multichannel audio from Twilio, the receiver of the forwarded call is always on channel 0, so we can display in nicer terms who is speaking.</p>\n<p>Finally, add the following CSS to the <code is:raw>&lt;style&gt;</code> tag in the <code is:raw>&lt;head&gt;</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">margin</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">sans-serif</span><span style="color: #C9D1D9">; }</span></span>\n<span class="line"><span style="color: #79C0FF">#app</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">grid</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">grid-template-columns</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">paddi</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">g</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">gap</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">grid-column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9"> / span </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; }</span></span>\n<span class="line"><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">list-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">margin-bottom</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; }</span></span>\n<span class="line"><span style="color: #79C0FF">#results</span><span style="color: #C9D1D9"> </span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">cursor</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">pointer</span><span style="color: #C9D1D9">; }</span></span></code></pre>\n<p>Refresh and you should see the finished project:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png" alt="Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right."></p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>We\u2019ve done quite a lot here - how to forward and record calls with Twilio, how to handle recording payloads to get transcripts, and implement basic client-side fuzzy search. There\u2019s a lot more we could do to expand on this project:</p>\n<ul>\n<li>Implement outbound call recording</li>\n<li>Group calls under specific callers</li>\n<li>Allow users to make notes for calls or callers</li>\n<li>Use a more permanent database like Supabase - <a href="https://blog.deepgram.com/getting-started-with-supabase/">Brian wrote a getting started post here</a></li>\n</ul>\n<p>The complete project is available at <a href="https://github.com/deepgram-devs/twilio-voice-searchable-log">https://github.com/deepgram-devs/twilio-voice-searchable-log</a> and if you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/twilio-crm-log-js/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Imagine being able to search phrases in every call you’ve had to find exactly what was said. That’s the dream, right? Well - it’s my dream, and it’s what we’re building today.</p>
<p>Users can call a Twilio phone number, which will be forwarded to your agent while recording. Once the call is completed, we will get a transcript using Deepgram’s Speech Recognition API and make it available through a searchable dashboard we’ll put together with Vue.js. The front-end is super light, so you could build it with any framework (or none at all).</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png" alt="Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right."></p>
<p>If you want to look at the final project code, you can find it at <a href="https://github.com/deepgram-devs/twilio-voice-searchable-log">https://github.com/deepgram-devs/twilio-voice-searchable-log</a>.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>
<li>A Twilio Account SID and Auth Token and a Twilio phone number - <a href="https://console.twilio.com">get one here</a>.</li>
<li>Use of two phones to test your project - one to make the call and one to receive.</li>
</ul>
<p>Create a new directory and navigate to it with your terminal. Run <code>npm init -y</code> to create a <code>package.json</code> file and then install the following packages:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk twilio dotenv express body-parser nedb-promises</span></span></code></pre>
<p>Create a <code>.env</code> file, open it in your code editor, and populate it with your credentials and settings:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DG_KEY=replace_with_deepgram_key</span></span>
<span class="line"><span style="color: #c9d1d9">TWILIO_ACCOUNT_SID=replace_with_sid</span></span>
<span class="line"><span style="color: #c9d1d9">TWILIO_AUTH_TOKEN=replace_with_auth_token</span></span>
<span class="line"><span style="color: #c9d1d9">TWILIO_NUMBER=replace_with_twilio_phone_number</span></span>
<span class="line"><span style="color: #c9d1d9">FORWARDING_NUMBER=replace_with_your_phone_number</span></span></code></pre>
${renderComponent($$result, "Alert", Alert, { "type": "warning" }, { "default": () => renderTemplate`You should not share this .env file as it contains sensitive credentials. If you are using git version control, make sure to ignore this file.` })}
<p>Create an <code>index.js</code> file, and open it in your code editor.</p>
<h2 id="preparing-dependencies">Preparing Dependencies</h2>
<p>At the top of your file require these packages:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bodyParser</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;body-parser&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">nedb</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;nedb-promises&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Twilio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;twilio&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Create a new nedb database. This will either load an existing file, or create one if it doesn’t exist:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">db</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> nedb.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;calls.db&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Initialize the Twilio Helper library and <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram Node SDK</a>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilio</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Twilio</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">  process.env.</span><span style="color: #79C0FF">TWILIO_ACCOUNT_SID</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  process.env.</span><span style="color: #79C0FF">TWILIO_AUTH_TOKEN</span></span>
<span class="line"><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="creating-an-express-server">Creating An Express Server</h2>
<p>Initialize an <code>express</code> instance, configure <code>body-parser</code> and a <code>public</code> directory, and start it at port 3000:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(bodyParser.</span><span style="color: #D2A8FF">urlencoded</span><span style="color: #C9D1D9">({ extended: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> }))</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`Listening at \${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">))</span></span></code></pre>
<h2 id="project-overview">Project Overview</h2>
<p>When a user rings our Twilio number, our application will be sent a POST request with a bunch of information - we will grab their phone number and the call identifier and add it to our database. We will instruct our application to forward the call to our real number and begin recording. Once the call is completed (or after the default one-hour limit), the recording will be saved, and, once ready, Twilio will send recording information back to our application.</p>
<p>We send the recording URL to Deepgram and receive a transcript in return. The recording details also contain the call identifier, so we can add the recording URL and the transcript to the existing database entry.</p>
<p>Once we have data in a database - the final step is to build the web dashboard with client-side search, which we will do towards the end of this blog post.</p>
<h2 id="configure-your-twilio-number">Configure Your Twilio Number</h2>
<p>When Twilio sends data to an application, it expects a publicly-accessible URL, but our application is only on our local machine. Fortunately, we can use <a href="https://ngrok.com">ngrok</a> to provide a temporary public URL that will forward requests to our locally-running application. Open a new terminal and run the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npx ngrok http 3000</span></span></code></pre>
<p>Once running, you will see a Ngrok URL in the terminal dashboard which we can provide to Twilio. If you restart your terminal, ngrok, or after 24 hours, the URL will change, and you need to complete the next step again.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/voice-config.png" alt="Accept incoming Voice Calls, configure with Webhook, a call comes in webhook to ngrok url /inbound"></p>
<p>Navigate to your phone number’s settings in the Twilio Console, and configure incoming calls to send a HTTP POST request to your ngrok URL followed by <code>/inbound</code>.</p>
<h2 id="handle-inbound-calls">Handle Inbound Calls</h2>
<p>In your <code>index.js</code> file add a new route handler for receiving Twilio calls:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/inbound&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Caller</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add caller number, call indetifier, and date to the database</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db.</span><span style="color: #D2A8FF">insert</span><span style="color: #C9D1D9">({ Caller, CallSid, date: </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Date</span><span style="color: #C9D1D9">() })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create Twilio instructions</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twiml</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dial</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> twiml.</span><span style="color: #D2A8FF">dial</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    record: </span><span style="color: #A5D6FF">&#39;record-from-answer-dual&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">  dial.</span><span style="color: #D2A8FF">number</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">FORWARDING_NUMBER</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Send response to Twilio</span></span>
<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">type</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;text/xml&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">end</span><span style="color: #C9D1D9">(twiml.</span><span style="color: #D2A8FF">toString</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>
<p>The <code>dial</code> variable is the most critical bit here - we tell Twilio to record the call once it is answered and to record each speaker in their own channel. This isn’t required but will lead to higher-quality transcripts later. Once the recording is ready, we tell Twilio to send a POST request with data to <code>/recordings</code>. Finally, we tell Twilio to forward this call to the number in our <code>.env</code> file - perhaps a reception or sales rep.</p>
<p>Before we test this, create an empty route handler for recordings:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Recording received&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p><strong>Test your code!</strong> Run with <code>node index.js</code> while making sure ngrok is still running. Call your Twilio number from a phone number that is different from the one in .env and your forwarding number should ring. Answer, speak, hang up, and you should see ‘Recording received’ in your terminal a few seconds later.</p>
<h2 id="generate-and-save-transcripts">Generate and Save Transcripts</h2>
<p>Replace your <code>/recordings</code> route handler:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Recording received&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get values from data</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get transcript</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    model: </span><span style="color: #A5D6FF">&#39;phonecall&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    multichannel: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    { url: RecordingUrl },</span></span>
<span class="line"><span style="color: #C9D1D9">    transcriptionFeatures</span></span>
<span class="line"><span style="color: #C9D1D9">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Format response</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterances</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript.results.utterances.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">utterance</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({</span></span>
<span class="line"><span style="color: #C9D1D9">    channel: utterance.channel,</span></span>
<span class="line"><span style="color: #C9D1D9">    transcript: utterance.transcript,</span></span>
<span class="line"><span style="color: #C9D1D9">  }))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Update database entry</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db.</span><span style="color: #D2A8FF">update</span><span style="color: #C9D1D9">({ CallSid }, { $set: { RecordingUrl, utterances } })</span></span>
<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Twilio sends a body of data along with this request - we only care about the call identifier and the URL of the recording, so we pull those out by destcructuring the object.</p>
<p>Then, we ask Deepgram for a transcript. Let’s recap the features we use:</p>
<ul>
<li>The <code>punctuate</code> feature adds punctuation for easier reading.</li>
<li>The <code>utterances</code> feature will return the spoken phrases rather than just words, and specifies the user who spoke them.</li>
<li>The <code>model</code> feature lets us specify a model to use. We have a few, and the default model would probably perform quite well, but we specifically have one trained for phone calls, so we specify it here.</li>
<li>The <code>multichannel</code> feature tells Deepgram that we are sending an audio file with multiple audio channels (one for each speaker). It improves transcription quality as we can accurately identify who is speaking at any point in time.</li>
</ul>
<p>Once we provide the recording URL and receive a response from Deepgram, we format the response. The output is an array that looks like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span></span>
<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hi, Kev.&quot;</span><span style="color: #C9D1D9"> },</span></span>
<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Hello. How are you mum?&quot;</span><span style="color: #C9D1D9"> },</span></span>
<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;I&#39;m fine. Thank you. How are you?&quot;</span><span style="color: #C9D1D9"> },</span></span>
<span class="line"><span style="color: #C9D1D9">  { </span><span style="color: #7EE787">&quot;channel&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #7EE787">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Yes. Not too bad at all. Thank you&quot;</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Finally, we update the existing database entry for this call to include both the recording URL and the utterances spoken.</p>
<p><strong>Test your code!</strong> Repeat the previous test steps, and you should see the database file (<code>calls.db</code>) now containing the new data.</p>
<h2 id="get-all-recordings">Get All Recordings</h2>
<p>The final step to the server-side of this project is to build a route handler that will return all calls which have a transcript included:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recordings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> db</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">({ utterances: { $exists: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> } })</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">sort</span><span style="color: #C9D1D9">({ date: </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">(recordings)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>This route handler will also sort results, so it’s the latest-first.</p>
<h2 id="receive-data-in-the-browser">Receive Data In The Browser</h2>
<p>Our search will consist of three parts:</p>
<ol>
<li>A search box which, when typed in, will <a href="https://en.wikipedia.org/wiki/Approximate_string_matching">fuzzy search</a> all call transcripts fetched from the database. We will use <a href="https://fusejs.io">Fuse.js</a> for the fuzzy search.</li>
<li>An updating list of results which will show the phrases that matched the earch term.</li>
<li>When a result is clicked, a full transcript of the call.</li>
</ol>
<p>Create a <code>public</code> directory and an <code>index.html</code> file inside of it. Open the file and scaffold a page:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Twilio x Deepgram Call Transcripts&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/fuse.js@6.4.6&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">        el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        data: {</span></span>
<span class="line"><span style="color: #C9D1D9">          fuse: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          calls: {</span></span>
<span class="line"><span style="color: #C9D1D9">            all: [],</span></span>
<span class="line"><span style="color: #C9D1D9">            selected: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          },</span></span>
<span class="line"><span style="color: #C9D1D9">          filter: {</span></span>
<span class="line"><span style="color: #C9D1D9">            term: </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            results: [],</span></span>
<span class="line"><span style="color: #C9D1D9">          },</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">        methods: {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">() {},</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Our first goal is to populate <code>data.calls.all</code> with the items from the database returned from the GET <code>/recordings</code> route handler, and then create a Fuse search index with those items. Inside the <code>created()</code> method:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.calls.all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/recordings&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.fuse </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Fuse</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.calls.all, {</span></span>
<span class="line"><span style="color: #C9D1D9">  keys: [</span><span style="color: #A5D6FF">&#39;Caller&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;utterances.transcript&#39;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">  includeMatches: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  threshold: </span><span style="color: #79C0FF">0.5</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Restart your server, navigate to <code>http://localhost:3000</code> in your browser. Open the DevTools Console and type <code>app.calls.all</code> to see if the value was populated correctly:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/app-calls-all.png" alt="Browser console showing app.calls.all as an array containing four objects"></p>
<h2 id="search-transcripts">Search Transcripts</h2>
<p>Inside of your <code>&lt;div id="app"&gt;</code> add a text input:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">input</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">placeholder</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Search term&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">v-model</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;filter.term&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">@keyup</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;search&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">/&gt;</span></span></code></pre>
<p>Then, inside of the empty <code>search()</code> method conduct a search with Fuse and assign the result to <code>data.filter.results</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.filter.results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.fuse.</span><span style="color: #D2A8FF">search</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.filter.term)</span></span></code></pre>
<p>Now we have results being computed, let’s display them right under the <code>&lt;input&gt;</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;result in filter.results&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ result.item.Caller }} on {{ result.item.date }}&lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;match in result.matches&quot;</span><span style="color: #C9D1D9">&gt;{{ match.value }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306975/blog/2021/12/twilio-crm-log-js/filtered-results.png" alt="A text box with the word &quot;yesterday&quot; in it, and three results. Each result shows the matching phrases."></p>
<h2 id="show-full-transcript">Show Full Transcript</h2>
<p>When an search result is clicked, let’s show the whole transcript. Add this attribute to the end of the <code>&lt;li&gt;</code> element - it will set <code>data.calls.selected</code> to the clicked item:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;result in filter.results&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;calls.selected = result&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Then, below the <code>&lt;ol&gt;</code> add another <code>&lt;ol&gt;</code> to show the utterances in the transcript:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;full-call&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-if</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;calls.selected&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;utterance in calls.selected.item.utterances&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">small</span><span style="color: #C9D1D9">&gt;{{ utterance.channel == 0 ? &#39;Receiver&#39; : &#39;Caller&#39; }}&lt;/</span><span style="color: #7EE787">small</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;{{ utterance.transcript }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ol</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>With the predictability of multichannel audio from Twilio, the receiver of the forwarded call is always on channel 0, so we can display in nicer terms who is speaking.</p>
<p>Finally, add the following CSS to the <code>&lt;style&gt;</code> tag in the <code>&lt;head&gt;</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">margin</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">sans-serif</span><span style="color: #C9D1D9">; }</span></span>
<span class="line"><span style="color: #79C0FF">#app</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">grid</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">grid-template-columns</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">paddi</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">g</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">gap</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">grid-column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9"> / span </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; }</span></span>
<span class="line"><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">list-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">; </span><span style="color: #79C0FF">margin-bottom</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">; }</span></span>
<span class="line"><span style="color: #79C0FF">#results</span><span style="color: #C9D1D9"> </span><span style="color: #7EE787">li</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">cursor</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">pointer</span><span style="color: #C9D1D9">; }</span></span></code></pre>
<p>Refresh and you should see the finished project:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1638306976/blog/2021/12/twilio-crm-log-js/final-project.png" alt="Webpage with three parts - a text box along the top, a list of phone calls on the left with phrases matching the keyword, and a full transcript on the right."></p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>We’ve done quite a lot here - how to forward and record calls with Twilio, how to handle recording payloads to get transcripts, and implement basic client-side fuzzy search. There’s a lot more we could do to expand on this project:</p>
<ul>
<li>Implement outbound call recording</li>
<li>Group calls under specific callers</li>
<li>Allow users to make notes for calls or callers</li>
<li>Use a more permanent database like Supabase - <a href="https://blog.deepgram.com/getting-started-with-supabase/">Brian wrote a getting started post here</a></li>
</ul>
<p>The complete project is available at <a href="https://github.com/deepgram-devs/twilio-voice-searchable-log">https://github.com/deepgram-devs/twilio-voice-searchable-log</a> and if you have any questions please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/twilio-crm-log-js/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
