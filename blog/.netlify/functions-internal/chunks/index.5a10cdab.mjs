import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                          *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
/* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "pre-requisites", "text": "Pre-requisites" }, { "depth": 2, "slug": "setting-up-a-twiml-bin", "text": "Setting Up a TwiML Bin" }, { "depth": 2, "slug": "the-twilio-proxy-server", "text": "The Twilio Proxy Server" }, { "depth": 2, "slug": "setup-the-rust-project-and-mainrs", "text": "Setup the Rust Project and main.rs" }, { "depth": 2, "slug": "staters-twilio_responsers-and-messagers", "text": "state.rs, twilio_response.rs, and message.rs" }, { "depth": 2, "slug": "the-websocket-endpoint-handlers", "text": "The WebSocket Endpoint Handlers" }, { "depth": 2, "slug": "processing-the-audio-in-audiors", "text": "Processing the Audio in audio.rs" }, { "depth": 2, "slug": "running-the-server-and-testing-with-websocat", "text": "Running the Server and Testing with websocat" }, { "depth": 2, "slug": "making-a-docker-image-for-the-server", "text": "Making a Docker Image for the Server" }, { "depth": 2, "slug": "further-development", "text": "Further Development" }], "source": '\r\nIn a [previous blog post](https://blog.deepgram.com/deepgram-twilio-streaming/), we showed how to build an integration\r\nbetween Deepgram and Twilio for real-time, live transcription using Python. In this post, we will revisit this integration and implement\r\nit in Rust. The [Rust programming language](https://www.rust-lang.org/) is a favorite among Deepgram engineers, and is known for its\r\ntype safety, performance, and powerful memory management achieved via a strict ownership system which eliminates entire categories of bugs!\r\n\r\nWe will be building our Twilio streaming app using the [Axum web framework](https://docs.rs/axum/latest/axum/)\r\nwhich is built on top of the powerful and popular asynchronous [Tokio crate](https://tokio.rs/). Using Rust with\r\nan efficient asynchronous runtime like Tokio is a good choice for reliable and performant web app backends.\r\n\r\n## Pre-requisites\r\n\r\nYou will need:\r\n\r\n*   a [Twilio account](https://www.twilio.com/try-twilio) with a Twilio number (the free tier will work)\r\n*   a Deepgram API Key - [get an API Key here](https://console.deepgram.com/signup)\r\n*   [Rust installed](https://www.rust-lang.org/tools/install)\r\n*   *(optional)* [ngrok](https://ngrok.com/) to let Twilio access a local server\r\n\r\n## Setting Up a TwiML Bin\r\n\r\nWe will use TwiML Bins to make Twilio fork audio data from phone calls to a server that we will write.\r\nIn the Twilio Console, search for TwiML Bin, and click "Create TwiML Bin."\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025616/blog/2022/06/deepgram-twilio-streaming-rust/assets/find_twiml_bin.png" alt="Navigate to your TwiML Bins." style="max-width: 606px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nGive the TwiML Bin a "Friendly Name" and enter the following as the the contents of the TwiML Bin:\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<Response>\r\n  <Start>\r\n    <Stream url="wss://INSERT_YOUR_SERVER_URL/twilio" track="both_tracks"/>\r\n  </Start>\r\n  <Say voice="woman" language="en">"This call may be monitored or recorded for quality purposes."</Say>\r\n  <Dial>+11231231234</Dial>\r\n</Response>\r\n```\r\n\r\nIn the `Dial` section, enter your phone number. Where it says `INSERT_YOUR_SERVER_URL` insert the URL where you will be hosting the server.\r\nWithout having to spin up and configure a cloud instance, you can use `ngrok` to expose a port on localhost. To do this for, say,\r\nport 5000, run:\r\n\r\n    ngrok http 5000\r\n\r\n`ngrok` will then generate a public URL which forwards requests to your computer at `localhost:5000`. This URL may look something like:\r\n`c52e-71-212-124-133.ngrok.io` - enter this URL in your TwiML Bin.\r\n\r\nNow the last thing to do on the Twilio Console before hopping over to write our server code is to hook up one of your Twilio numbers to this TwiML Bin.\r\nGo to the "Develop" tab on the left side of the Twilio Console, navigate to `Phone Numbers -> Manage -> Active numbers`, and click on your Twilio number in the list.\r\nThen, under the field "A Call Comes In", click the drop-down and select "TwiML Bin"; for the field directly next to this one, click the drop-down and select\r\nthe TwiML Bin you just created.\r\nClick "Save" at the bottom of the Twilio Console.\r\n\r\n## The Twilio Proxy Server\r\n\r\nThe system that we will be building is illustrated here:\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025618/blog/2022/06/deepgram-twilio-streaming-rust/assets/deepgram_twilio_diagram.png" alt="The big picture." style="display: block;margin-left: auto;margin-right: auto;">\r\n\r\nWe want audio from phone calls going through Twilio\'s server to be forked to the proxy server we will be writing. The proxy server then buffers\r\nand processes the audio, sends it to Deepgram, and receives transcripts back from Deepgram. The proxy server also accepts client connections which\r\nsubscribe to ongoing calls, and whenever the server receives transcripts from Deepgram for those calls, it broadcasts those transcripts to all subscribers.\r\nThis will all be done via WebSockets at near-real-time! Typical latencies for this system hover around 500 ms.\r\n\r\nDownload the code from [this repository](https://github.com/deepgram-devs/deepgram-twilio-streaming-rust).\r\n\r\nBelow we will go through creating this project from scratch, but this will also act as a comprehensive code-tour of the repository.\r\nIf you are keen on trying the server out right away and perusing the code\r\nmore at your leisure, feel free to skip to the [Running the Server and Testing with websocat](#running-the-server-and-testing-with-websocat) section!\r\n\r\n## Setup the Rust Project and `main.rs`\r\n\r\nCreate a new Rust project using `cargo new`:\r\n\r\n```\r\ncargo new deepgram-twilio-streaming-rust\r\n```\r\n\r\nGo into the project directory and edit the `Cargo.toml` file, giving it the following contents:\r\n\r\n```toml\r\n[package]\r\nname = "deepgram-twilio-streaming-rust"\r\nversion = "0.1.0"\r\nedition = "2021"\r\n\r\n[dependencies]\r\naxum = { version = "0.5.1", features = ["ws"] }\r\naxum-server = { version = "0.4.0", features = ["tls-rustls"] }\r\nbase64 = "0.13.0"\r\nfutures = "0.3.21"\r\nhttp = "0.2.6"\r\nserde = { version = "1.0.136", features = ["derive"] }\r\nserde_json = "1.0.79"\r\ntokio = { version = "1.17.0", features = ["macros", "rt", "rt-multi-thread"] }\r\ntokio-tungstenite = { version = "0.15.0", features = ["native-tls"] }\r\ntungstenite = "0.14.0"\r\n```\r\nNow let\'s modify `src/main.rs`. Let\'s begin by adding the `use` statements we will need, and defining some modules:\r\n\r\n```rust\r\nuse axum::{routing::get, Extension, Router};\r\nuse axum_server::tls_rustls::RustlsConfig;\r\nuse futures::lock::Mutex;\r\nuse std::{collections::HashMap, sync::Arc};\r\n\r\nmod audio;\r\nmod handlers;\r\nmod message;\r\nmod state;\r\nmod twilio_response;\r\n```\r\n\r\nThe modules we declared are: `audio`, `handlers`, `message`, `state`, and `twilio_response`.\r\nWe will go over each one, but briefly these will be for the following:\r\n\r\n*   `audio`: handle processing of audio data from Twilio\r\n*   `handlers`: handlers for the websocket endpoints `/twilio` and `/client`\r\n*   `message`: a helper module to convert between `axum` and `tungstenite` websocket messages\r\n*   `state`: will contain the definition for the global state of the server\r\n*   `twilio_response`: will contain definitions for Twilio\'s websocket message shape\r\n\r\nNow, let\'s start defining our `main` function and set up the state to be shared among the handlers:\r\n\r\n```rust\r\n#[tokio::main]\r\nasync fn main() {\r\n    let proxy_url = std::env::var("PROXY_URL").unwrap_or_else(|_| "127.0.0.1:5000".to_string());\r\n\r\n    let deepgram_url = std::env::var("DEEPGRAM_URL")\r\n        .unwrap_or_else(|_| "wss://api.deepgram.com/v1/listen?encoding=mulaw&sample_rate=8000&channels=2&multichannel=true".to_string());\r\n\r\n    let api_key =\r\n        std::env::var("DEEPGRAM_API_KEY").expect("Using this server requires a Deepgram API Key.");\r\n\r\n    let cert_pem = std::env::var("CERT_PEM").ok();\r\n    let key_pem = std::env::var("KEY_PEM").ok();\r\n\r\n    let config = match (cert_pem, key_pem) {\r\n        (Some(cert_pem), Some(key_pem)) => Some(\r\n            RustlsConfig::from_pem_file(cert_pem, key_pem)\r\n                .await\r\n                .expect("Failed to make RustlsConfig from cert/key pem files."),\r\n        ),\r\n        (None, None) => None,\r\n        _ => {\r\n            panic!("Failed to start - invalid cert/key.")\r\n        }\r\n    };\r\n\r\n    let state = Arc::new(state::State {\r\n        deepgram_url,\r\n        api_key,\r\n        subscribers: Mutex::new(HashMap::new()),\r\n    });\r\n```\r\n\r\nOur `main` function is set up to be asynchronous via the use of the `#[tokio::main]` macro.\r\n`main` and every async function that `main` then calls will be executed by\r\nthe Tokio runtime. Inside `main` we grab the following environment variables:\r\n\r\n*   `PROXY_URL`: the URL that this server will run on - by default it will use localhost and port 5000\r\n*   `DEEPGRAM_URL`: the URL of Deepgram\'s streaming endpoint, including query parameters (Twilio audio uses the `mulaw` encoding with\r\n    a sample rate of 8000, and we will be streaming stereo (2 channel) audio)\r\n*   `DEEPGRAM_API_KEY`: your Deepgram API Key\r\n*   `CERT_PEM`: an optional environment variable pointing to a `cert.pem` file used for TLS\r\n*   `KEY_PEM`: an optional environment variable pointing to a `key.pem` file used for TLS\r\n\r\nWe use these environment variables to construct an `Arc<State>` object to store the global server state.\r\n\r\nNow, let\'s finish filling in our `main` function by configuring our routes and spinning up the `axum` server to serve these routes:\r\n\r\n```rust\r\n    let app = Router::new()\r\n        .route("/twilio", get(handlers::twilio::twilio_handler))\r\n        .route("/client", get(handlers::subscriber::subscriber_handler))\r\n        .layer(Extension(state));\r\n\r\n    match config {\r\n        Some(config) => {\r\n            axum_server::bind_rustls(proxy_url.parse().unwrap(), config)\r\n                .serve(app.into_make_service())\r\n                .await\r\n                .unwrap();\r\n        }\r\n        None => {\r\n            axum_server::bind(proxy_url.parse().unwrap())\r\n                .serve(app.into_make_service())\r\n                .await\r\n                .unwrap();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe `axum` server is spun up with or without TLS support depending on whether\r\nor not the `CERT_PEM` and `KEY_PEM` environment variables are set.\r\n\r\nThat\'s all there is to `main.rs`! The bulk of the application logic will live in the websocket endpoint handlers, but before diving into them\r\nlet\'s go over some of the objects the server will use.\r\n\r\n## `state.rs`, `twilio_response.rs`, and `message.rs`\r\n\r\nCreate the file `src/state.rs` and give it the following contents:\r\n\r\n```rust\r\nuse axum::extract::ws::WebSocket;\r\nuse futures::lock::Mutex;\r\nuse std::collections::HashMap;\r\n\r\npub struct State {\r\n    pub deepgram_url: String,\r\n    pub api_key: String,\r\n    pub subscribers: Mutex<HashMap<String, Vec<WebSocket>>>,\r\n}\r\n```\r\n\r\nThis will represent the global state of the server. The server will need to know the URL of Deepgram\'s streaming endpoint and a Deepgram API Key to use as authentication when connecting to this endpoint. Additionally, the server will contain\r\na `HashMap` of websocket handlers for subscribers, one for each incoming connection from Twilio. These websocket handlers will be accessed\r\nvia the `callsid` of the Twilio call, and wrapped in a `Mutex` to handle concurrency.\r\n\r\nNext, create the file `src/twilio_response.rs` and give it the following contents:\r\n\r\n```rust\r\n    //! Definitions for the Twilio messages we need to parse\r\n\r\nuse serde::{Deserialize, Serialize};\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub struct Event {\r\n    pub event: String,\r\n    pub sequence_number: String,\r\n    #[serde(flatten)]\r\n    pub event_type: EventType,\r\n    pub stream_sid: String,\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub enum EventType {\r\n    Start(EventStart),\r\n    Media(EventMedia),\r\n}\r\n\r\nimpl Default for EventType {\r\n    fn default() -> Self {\r\n        EventType::Media(Default::default())\r\n    }\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub struct EventStart {\r\n    pub account_sid: String,\r\n    pub stream_sid: String,\r\n    pub call_sid: String,\r\n    pub tracks: Vec<String>,\r\n    pub media_format: MediaFormat,\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub struct MediaFormat {\r\n    pub encoding: String,\r\n    pub sample_rate: u32,\r\n    pub channels: u32,\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\npub struct EventMedia {\r\n    pub track: String,\r\n    pub chunk: String,\r\n    pub timestamp: String,\r\n    pub payload: String,\r\n}\r\n```\r\n\r\nThese are just basic structs defining the shape of the messages Twilio will send our server. Feel free to checkout\r\n[Twilio\'s documentation](https://www.twilio.com/docs/voice/twiml/stream#websocket-messages-from-twilio) for more details.\r\n\r\nFinally, create the file `src/message.rs` and give it the following contents:\r\n\r\n```rust\r\n#[derive(Clone)]\r\npub enum Message {\r\n    Text(String),\r\n    Binary(Vec<u8>),\r\n    Ping(Vec<u8>),\r\n    Pong(Vec<u8>),\r\n    Close(Option<tungstenite::protocol::CloseFrame<\'static>>),\r\n}\r\n\r\nimpl From<axum::extract::ws::Message> for Message {\r\n    fn from(item: axum::extract::ws::Message) -> Self {\r\n        match item {\r\n            axum::extract::ws::Message::Text(text) => Message::Text(text),\r\n            axum::extract::ws::Message::Binary(binary) => Message::Binary(binary),\r\n            axum::extract::ws::Message::Ping(ping) => Message::Ping(ping),\r\n            axum::extract::ws::Message::Pong(pong) => Message::Pong(pong),\r\n            // will deal with this later\r\n            axum::extract::ws::Message::Close(_) => Message::Close(None),\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<tokio_tungstenite::tungstenite::Message> for Message {\r\n    fn from(item: tokio_tungstenite::tungstenite::Message) -> Self {\r\n        match item {\r\n            tokio_tungstenite::tungstenite::Message::Text(text) => Message::Text(text),\r\n            tokio_tungstenite::tungstenite::Message::Binary(binary) => Message::Binary(binary),\r\n            tokio_tungstenite::tungstenite::Message::Ping(ping) => Message::Ping(ping),\r\n            tokio_tungstenite::tungstenite::Message::Pong(pong) => Message::Pong(pong),\r\n            // will deal with this later\r\n            tokio_tungstenite::tungstenite::Message::Close(_) => Message::Close(None),\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<Message> for axum::extract::ws::Message {\r\n    fn from(item: Message) -> axum::extract::ws::Message {\r\n        match item {\r\n            Message::Text(text) => axum::extract::ws::Message::Text(text),\r\n            Message::Binary(binary) => axum::extract::ws::Message::Binary(binary),\r\n            Message::Ping(ping) => axum::extract::ws::Message::Ping(ping),\r\n            Message::Pong(pong) => axum::extract::ws::Message::Pong(pong),\r\n            // will deal with this later\r\n            Message::Close(_) => axum::extract::ws::Message::Close(None),\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<Message> for tokio_tungstenite::tungstenite::Message {\r\n    fn from(item: Message) -> tokio_tungstenite::tungstenite::Message {\r\n        match item {\r\n            Message::Text(text) => tokio_tungstenite::tungstenite::Message::Text(text),\r\n            Message::Binary(binary) => tokio_tungstenite::tungstenite::Message::Binary(binary),\r\n            Message::Ping(ping) => tokio_tungstenite::tungstenite::Message::Ping(ping),\r\n            Message::Pong(pong) => tokio_tungstenite::tungstenite::Message::Pong(pong),\r\n            // will deal with this later\r\n            Message::Close(_) => tokio_tungstenite::tungstenite::Message::Close(None),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis is also a straightforward module which creates our own websocket `Message` type which can\r\nbe used to convert to and from `axum` websocket messages and `tungstenite` websocket messages.\r\n\r\n## The WebSocket Endpoint Handlers\r\n\r\nNow let\'s get into the core logic of the server. We need to define functions to handle client/subscriber\r\nconnections to `/client` and Twilio connections to `/twilio`. Let\'s start with the client handler.\r\n\r\nStart by creating `src/handlers/mod.rs` with the following contents:\r\n\r\n```rust\r\npub mod subscriber;\r\npub mod twilio;\r\n```\r\n\r\nThis simply declares the modules we will use to handle the client/subsriber and Twilio websocket connections.\r\n\r\nThen, create the file `src/handlers/subscriber.rs` with the following contents:\r\n\r\n```rust\r\nuse crate::message::Message;\r\nuse crate::state::State;\r\nuse axum::{\r\n    extract::ws::{WebSocket, WebSocketUpgrade},\r\n    response::IntoResponse,\r\n    Extension,\r\n};\r\nuse std::sync::Arc;\r\n\r\npub async fn subscriber_handler(\r\n    ws: WebSocketUpgrade,\r\n    Extension(state): Extension<Arc<State>>,\r\n) -> impl IntoResponse {\r\n    ws.on_upgrade(|socket| handle_socket(socket, state))\r\n}\r\n\r\nasync fn handle_socket(mut socket: WebSocket, state: Arc<State>) {\r\n    let mut subscribers = state.subscribers.lock().await;\r\n    // send these keys (which will be twilio callsids) to the client\r\n    let keys = subscribers.keys().map(|key| key.to_string()).collect();\r\n    socket\r\n        .send(Message::Text(keys).into())\r\n        .await\r\n        .expect("Failed to send callsids to client.");\r\n\r\n    // wait for the first message from the client\r\n    // and interpret it as the callsid to subscribe to\r\n    if let Some(Ok(msg)) = socket.recv().await {\r\n        let msg = Message::from(msg);\r\n        if let Message::Text(callsid) = msg {\r\n            let callsid = callsid.trim();\r\n            if let Some(subscribers) = subscribers.get_mut(callsid) {\r\n                subscribers.push(socket);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAs we saw in `main.rs`, `subscriber_handler` is the function which will be called when a client tries to connect to the\r\n`/client` endpoint of our server. From there, we perform an upgrade from HTTP to websockets. Then, we try to obtain the\r\nsubscribers `HashMap` from our server\'s global state and send to the client a list of the `callsid`s of all ongoing\r\nTwilio calls that the server is handling. The server then waits for a single message back from the client, and it interprets\r\nthis message as the `callsid` to subscribe to. If the server receives a valid `callsid`, it will push the websocket handle\r\ninto the subscribers `HashMap`. When the Twilio handler receives a transcript for that `callsid`, it will broadcast it to all\r\nsubscribers, including the one we just pushed. That\'s it for `subscriber.rs`!\r\n\r\nNow let\'s look at the bulkier `twilio.rs`. Create `src/handlers/twilio.rs`. Let\'s build this module\r\npiece by piece, starting with some `use` statements:\r\n\r\n```rust\r\nuse crate::audio;\r\nuse crate::message::Message;\r\nuse crate::state::State;\r\nuse crate::twilio_response;\r\nuse axum::{\r\n    extract::ws::{WebSocket, WebSocketUpgrade},\r\n    response::IntoResponse,\r\n    Extension,\r\n};\r\nuse futures::channel::oneshot;\r\nuse futures::{\r\n    sink::SinkExt,\r\n    stream::{SplitSink, SplitStream, StreamExt},\r\n};\r\nuse std::{convert::From, sync::Arc};\r\nuse tokio::net::TcpStream;\r\nuse tokio_tungstenite::{connect_async, MaybeTlsStream, WebSocketStream};\r\n\r\nThen, add the following functions:\r\n\r\npub async fn twilio_handler(\r\n    ws: WebSocketUpgrade,\r\n    Extension(state): Extension<Arc<State>>,\r\n) -> impl IntoResponse {\r\n    ws.on_upgrade(|socket| handle_socket(socket, state))\r\n}\r\n\r\nasync fn handle_socket(socket: WebSocket, state: Arc<State>) {\r\n    let (_this_sender, this_receiver) = socket.split();\r\n\r\n    // prepare the connection request with the api key authentication\r\n    let builder = http::Request::builder()\r\n        .method(http::Method::GET)\r\n        .uri(&state.deepgram_url);\r\n    let builder = builder.header("Authorization", format!("Token {}", state.api_key));\r\n    let request = builder\r\n        .body(())\r\n        .expect("Failed to build a connection request to Deepgram.");\r\n\r\n    // connect to deepgram\r\n    let (deepgram_socket, _) = connect_async(request)\r\n        .await\r\n        .expect("Failed to connect to Deepgram.");\r\n    let (deepgram_sender, deepgram_reader) = deepgram_socket.split();\r\n\r\n    let (callsid_tx, callsid_rx) = oneshot::channel::<String>();\r\n\r\n    tokio::spawn(handle_to_subscribers(\r\n        Arc::clone(&state),\r\n        callsid_rx,\r\n        deepgram_reader,\r\n    ));\r\n    tokio::spawn(handle_from_twilio(\r\n        Arc::clone(&state),\r\n        callsid_tx,\r\n        this_receiver,\r\n        deepgram_sender,\r\n    ));\r\n}\r\n```\r\n\r\nIncoming Twilio connections hitting `/twilio` will be first directed to the function\r\n`twilio_handler` where the websocket upgrade will be performed. Then `handle_socket` will split the websocket connection\r\ninto a receiver and a sender, open up an entirely new websocket connection to Deepgram, split the Deepgram websocket\r\nconnection into a receiver and a sender, and spawn tasks which call the functions `handle_to_subscribers` and\r\n`handle_from_twilio` which take these receivers and senders as arguments. A oneshot channel is also set up so that\r\n`handle_from_twilio` can send the `callsid` of the Twilio call to `handle_to_subscribers` in a thread-safe manner -\r\nthe `callsid` is not yet known when these initial websocket connections are established, it only becomes available\r\nwhen Twilio sends this information in a Twilio `start` event websocket message.\r\n\r\nLet\'s now define the `handle_to_subscribers` function:\r\n\r\n```rust\r\nasync fn handle_to_subscribers(\r\n    state: Arc<State>,\r\n    callsid_rx: oneshot::Receiver<String>,\r\n    mut deepgram_receiver: SplitStream<WebSocketStream<MaybeTlsStream<TcpStream>>>,\r\n) {\r\n    let callsid = callsid_rx\r\n        .await\r\n        .expect("Failed to receive callsid from handle_from_twilio.");\r\n\r\n    while let Some(Ok(msg)) = deepgram_receiver.next().await {\r\n        let mut subscribers = state.subscribers.lock().await;\r\n        if let Some(subscribers) = subscribers.get_mut(&callsid) {\r\n            // send the message to all subscribers concurrently\r\n            let futs = subscribers\r\n                .iter_mut()\r\n                .map(|subscriber| subscriber.send(Message::from(msg.clone()).into()));\r\n            let results = futures::future::join_all(futs).await;\r\n\r\n            // if we successfully sent a message then the subscriber is still connected\r\n            // other subscribers should be removed\r\n            *subscribers = subscribers\r\n                .drain(..)\r\n                .zip(results)\r\n                .filter_map(|(subscriber, result)| result.is_ok().then(|| subscriber))\r\n                .collect();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis function first waits to receive the `callsid`\r\nfrom `handle_from_twilio` and then proceeds to read messages off the Deepgram websocket receiver, broadcasting all\r\nmessages that it obtains to all subscribers to that `callsid`.\r\n\r\nNow let\'s define `handle_from_twilio` as follows:\r\n\r\n```rust\r\nasync fn handle_from_twilio(\r\n    state: Arc<State>,\r\n    callsid_tx: oneshot::Sender<String>,\r\n    mut this_receiver: SplitStream<WebSocket>,\r\n    mut deepgram_sender: SplitSink<\r\n        WebSocketStream<MaybeTlsStream<TcpStream>>,\r\n        tokio_tungstenite::tungstenite::Message,\r\n    >,\r\n) {\r\n    let mut buffer_data = audio::BufferData {\r\n        inbound_buffer: Vec::new(),\r\n        outbound_buffer: Vec::new(),\r\n        inbound_last_timestamp: 0,\r\n        outbound_last_timestamp: 0,\r\n    };\r\n\r\n    // wrap our oneshot in an Option because we will need it in a loop\r\n    let mut callsid_tx = Some(callsid_tx);\r\n    let mut callsid: Option<String> = None;\r\n\r\n    while let Some(Ok(msg)) = this_receiver.next().await {\r\n        let msg = Message::from(msg);\r\n        if let Message::Text(msg) = msg {\r\n            let event: Result<twilio_response::Event, _> = serde_json::from_str(&msg);\r\n            if let Ok(event) = event {\r\n                match event.event_type {\r\n                    twilio_response::EventType::Start(start) => {\r\n                        // the "start" event only happens once, so having our oneshot in here is kosher\r\n                        callsid = Some(start.call_sid.clone());\r\n\r\n                        // sending this callsid on our oneshot will let `handle_to_subscribers` know the callsid\r\n                        if let Some(callsid_tx) = callsid_tx.take() {\r\n                            callsid_tx\r\n                                .send(start.call_sid.clone())\r\n                                .expect("Failed to send callsid to handle_to_subscribers.");\r\n                        }\r\n\r\n                        // make a new set of subscribers for this call, using the callsid as the key\r\n                        state\r\n                            .subscribers\r\n                            .lock()\r\n                            .await\r\n                            .entry(start.call_sid)\r\n                            .or_default();\r\n                    }\r\n                    twilio_response::EventType::Media(media) => {\r\n                        if let Some(mixed) = audio::process_twilio_media(media, &mut buffer_data) {\r\n                            // send the audio on to deepgram\r\n                            if deepgram_sender\r\n                                .send(Message::Binary(mixed).into())\r\n                                .await\r\n                                .is_err()\r\n                            {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // close and remove the subscribers, if we have a callsid\r\n    if let Some(callsid) = callsid {\r\n        let mut subscribers = state.subscribers.lock().await;\r\n        if let Some(subscribers) = subscribers.remove(&callsid) {\r\n            for mut subscriber in subscribers {\r\n                // we don\'t really care if this succeeds or fails as we are closing/dropping these\r\n                let _ = subscriber.send(Message::Close(None).into()).await;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis function begins by setting up an object to help handle the audio buffers\r\nfrom the inbound and outbound callers. We then start reading websocket messages from the Twilio websocket receiver.\r\nWhen we obtain the Twilio `start` event message, we can grab the `callsid`, use it to set up subscribers\r\nto this call, and send it off to the `handle_to_subscribers` task via the oneshot channel we set up earlier. Subsequent\r\nTwilio media events are then processed via `audio::process_twilio_media`, and when a buffer of mixed stereo audio is\r\nready, we send it to Deepgram via the Deepgram websocket sender.\r\n\r\nFinally, when Twilio closes the connection to our server (or some error occurs), we must remember to remove all subscribers\r\nfrom the subscriber `HashMap` and close the connections to those subscribers.\r\n\r\n## Processing the Audio in `audio.rs`\r\n\r\nWhen discussing the Twilio websocket handler, the processing of Twilio media events was delegated to `audio::process_twilio_media`.\r\nWe will define this function in `src/audio.rs`. Make `src/audio.rs` with the following contents:\r\n\r\n```rust\r\nuse crate::twilio_response;\r\n\r\nconst MULAW_SILENCE: u8 = 0xff;\r\nconst MULAW_BYTES_PER_MS: usize = 8;\r\nconst TWILIO_MS_PER_CHUNK: usize = 20;\r\nconst MIN_TWILIO_CHUNKS_TO_MIX: usize = 20;\r\n\r\npub struct BufferData {\r\n    pub inbound_buffer: Vec<u8>,\r\n    pub outbound_buffer: Vec<u8>,\r\n    pub inbound_last_timestamp: u32,\r\n    pub outbound_last_timestamp: u32,\r\n}\r\n\r\nfn pad_with_silence(buffer: &mut Vec<u8>, current_timestamp: u32, previous_timestamp: u32) {\r\n    let time_lost = if current_timestamp < previous_timestamp + TWILIO_MS_PER_CHUNK as u32 {\r\n        // here we have received a timestamp that is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous timestamp\r\n        // this occasionally occurs and is unexpected behavior from Twilio\r\n        0\r\n    } else {\r\n        current_timestamp - (previous_timestamp + TWILIO_MS_PER_CHUNK as u32)\r\n    };\r\n    let silence = std::iter::repeat(MULAW_SILENCE).take(MULAW_BYTES_PER_MS * time_lost as usize);\r\n    buffer.extend(silence);\r\n}\r\n\r\n/// (1) decodes twilio media events\r\n/// (2) pads inbound and outbound buffers with silence if needed\r\n/// (3) if there is more than MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms\r\n///     of audio in both inbound and outbound audio buffers, drains as much audio from\r\n///     both buffers as can be mixed together, mixes and returns this audio\r\npub fn process_twilio_media(\r\n    media: twilio_response::EventMedia,\r\n    mut buffer_data: &mut BufferData,\r\n) -> Option<Vec<u8>> {\r\n    // NOTE: when Twilio sends media data, it should send TWILIO_MS_PER_CHUNK = 20 ms audio chunks\r\n    // at a time, where each ms of audio is MULAW_BYTES_PER_MS = 8 bytes\r\n    let media_chunk = base64::decode(media.payload).unwrap();\r\n    let media_chunk_size = media_chunk.len();\r\n    if media_chunk_size != TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS {\r\n        // here, the Twilio media chunk size is not the expected size of TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS bytes\r\n        // this occasionally occurs and is unexpected behavior from Twilio\r\n    }\r\n    // NOTE: There are rare cases where the timestamp is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous chunk\r\n    let timestamp = media.timestamp.parse::<u32>().unwrap();\r\n\r\n    // pad the inbound or outbound buffer with silence if needed depending on timestamp info\r\n    // and then add the audio data from the twilio media message to the buffer\r\n    if media.track == "inbound" {\r\n        pad_with_silence(\r\n            &mut buffer_data.inbound_buffer,\r\n            timestamp,\r\n            buffer_data.inbound_last_timestamp,\r\n        );\r\n        buffer_data.inbound_buffer.extend(media_chunk);\r\n        buffer_data.inbound_last_timestamp = timestamp;\r\n    } else if media.track == "outbound" {\r\n        pad_with_silence(\r\n            &mut buffer_data.outbound_buffer,\r\n            timestamp,\r\n            buffer_data.outbound_last_timestamp,\r\n        );\r\n        buffer_data.outbound_buffer.extend(media_chunk);\r\n        buffer_data.outbound_last_timestamp = timestamp;\r\n    }\r\n\r\n    // we will return mixed audio of MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms (or more)\r\n    // corresponding to MIN_TWILIO_CHUNKS_TO_MIX = 20 twilio media messages (or more)\r\n    let minimum_chunk_size = MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS;\r\n    let mixable_data_size = std::cmp::min(\r\n        buffer_data.inbound_buffer.len(),\r\n        buffer_data.outbound_buffer.len(),\r\n    );\r\n    if mixable_data_size >= minimum_chunk_size {\r\n        let mut mixed = Vec::with_capacity(mixable_data_size * 2);\r\n        let inbound_buffer_segment = buffer_data.inbound_buffer.drain(0..mixable_data_size);\r\n        let outbound_buffer_segment = buffer_data.outbound_buffer.drain(0..mixable_data_size);\r\n\r\n        for (inbound, outbound) in inbound_buffer_segment.zip(outbound_buffer_segment) {\r\n            mixed.push(inbound);\r\n            mixed.push(outbound);\r\n        }\r\n        Some(mixed)\r\n    } else {\r\n        None\r\n    }\r\n}\r\n```\r\n\r\nTwilio sends its audio data as 8000 Hz `mulaw` data, independently for inbound and outbound callers. Additionally, sometimes Twilio\r\n(or the phones which use Twilio) will drop packets of audio. The function `process_twilio_media`, then, handles inserting silence\r\nshould there be dropped packets or timing issues, and mixes together the inbound and outbound audio into a valid stereo audio stream\r\nwhich we can then send to Deepgram. Several of the finer details are explained in the comments in this file.\r\n\r\n## Running the Server and Testing with websocat\r\n\r\nLet\'s use websocat to quickly test our server.\r\n\r\nRun the server with the following:\r\n\r\n    DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY cargo run\r\n\r\nreplacing `INSERT_YOUR_DEEPGRAM_API_KEY` with your Deepgram API Key.\r\n\r\nThis server will need to be accessible to Twilio, and this is set up in the TwiML Bin you created in the previous [Setting Up a TwiML Bin](#setting-up-a-twiml-bin) section. If you are using `ngrok`, make sure your TwiML Bin\r\nis updated with the current `ngrok` URL.\r\n\r\nNow, call your Twilio number with one phone, and answer the call on the phone your Twilio number forwards to.\r\nThen, latch onto the proxy server via the client endpoint with websocat:\r\n```\r\nwebsocat ws://localhost:5000/client\r\n```\r\nWebsocat should immediately send you a message containing a list of the `callsid`s of all active calls (which in this case should be one).\r\nReply to the message with the `callsid` by copy/pasting and hitting enter:\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/connect_to_callsid.png" alt="Subscribe to the call via the `callsid`." style="display: block;margin-left: auto;margin-right: auto;">\r\n\r\nYou should start to see transcription results appear in your websocat session in real time:\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/websocat_streaming_asr_results.png" alt="Websocat streaming ASR results." style="display: block;margin-left: auto;margin-right: auto;">\r\n\r\nFeel free to try setting up multiple Twilio numbers, and multiple client sessions!\r\n\r\n## Making a Docker Image for the Server\r\n\r\nLet\'s go through the process of building a Docker image so that this server can be portably deployed. We\'ll start by making a `rust-toolchain` file with the following contents:\r\n\r\n    1.61\r\n\r\n(quite the simple file!). This will ensure that when you run `cargo build` (either manually, or as part of building a Docker image), the same version of Rust will be used\r\nevery time.\r\n\r\nNow, let\'s create a Dockerfile called `Dockerfile` and give it the following contents:\r\n```\r\nFROM ubuntu:22.04 as builder\r\n\r\nLABEL maintainer="YOUR_INFO"\r\n\r\nENV DEBIAN_FRONTEND=noninteractive\r\n\r\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n        ca-certificates \\\r\n        clang \\\r\n        curl \\\r\n        libpq-dev \\\r\n        libssl-dev \\\r\n        pkg-config\r\n\r\nCOPY rust-toolchain /rust-toolchain\r\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(cat /rust-toolchain) && \\\r\n    . $HOME/.cargo/env\r\n\r\nCOPY . /deepgram-twilio-streaming-rust\r\n\r\nRUN . $HOME/.cargo/env && \\\r\n    cargo install --path /deepgram-twilio-streaming-rust --root /\r\n\r\nFROM ubuntu:22.04\r\n\r\nLABEL maintainer="YOUR_INFO"\r\n\r\nENV DEBIAN_FRONTEND=noninteractive\r\n\r\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n        ca-certificates \\\r\n        libpq5 \\\r\n        libssl3 && \\\r\n    apt-get clean\r\n\r\nCOPY --from=builder /bin/deepgram-twilio-streaming-rust /bin/deepgram-twilio-streaming-rust\r\n\r\nENTRYPOINT ["/bin/deepgram-twilio-streaming-rust"]\r\nCMD [""]\r\n```\r\n\r\nReplace `YOUR_INFO` with your name and email address (for me, for example, this would be `Nikola Whallon <nikola@deepgram.com>`).\r\nThe key bits to take away are:\r\n\r\n*   we start with an Ubuntu 22.04 image\r\n*   we install several dependencies via `apt`\r\n*   we use the `rust-toolchain` and build+install our executable with `cargo install`\r\n*   we set the `ENTRYPOINT` to `/bin/deepgram-twilio-streaming-rust`, with no command-line arguments (`CMD`)\r\n\r\nNow with the Dockerfile written, build the Docker image with:\r\n\r\n```\r\ndocker build -t your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0 -f Dockerfile .\r\n```\r\nIf you will be pushing this image to Docker Hub so that the image can be pulled from a remote server (like an AWS instance),\r\nreplace `your-docker-hub-account` with your Docker Hub account. For local testing, simply using the image name `deepgram-twilio-streaming-rust:0.1.0`\r\n(or whatever you would like) will work. You are also free to pull and use `deepgram/deepgram-twilio-treaming-rust:0.1.0`!\r\n\r\nNow you can run the Docker image in a container locally via:\r\n```\r\ndocker run -e PROXY_URL=0.0.0.0:5000 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\\r\n    -p 5000:5000 your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0\r\n```\r\nreplacing `INSERT_YOUR_DEEPGRAM_API_KEY` with your Deepgram API Key, and make sure the Docker image name matches what you built. This will\r\nrun the image in a container in your current terminal, but you can include a `-d` to detach the process to run in the background. If you do this,\r\nyou will need to keep track of whether or not it is running with `docker ps` and similar commands.\r\n\r\nRefer to the [Docker CLI documentation](https://docs.docker.com/engine/reference/commandline/cli/) for more info.\r\n\r\nNow that the Twilio proxy server should be running in a Docker container, feel free to give your Twilio number a call, and subscribe to the call\r\nwith websocat by doing:\r\n\r\n```\r\n websocat ws://localhost:5000/client\r\n```\r\nand replying to the server with the `callsid` it sends you.\r\n\r\nYou should be all set to push this Docker image to your Docker Hub (or use ours: `deepgram/deepgram-twilio-treaming-rust:0.1.0`), and pull\r\nand use it on your cloud server! You will need to provide the additional environment variables `CERT_PEM` and `KEY_PEM` to do this, making\r\nsure those files are accessible to the Docker continer by using `-v`, and you may need to specify\r\nthe port as `443` in the `PROXY_URL` and use `-p 443:443` among other subtle changes.\r\nYou should refer to your cloud server provider\'s documentation on setting up an https/wss enabled server with certificates. As an example,\r\nhere\'s how I spun up the server app on an AWS Ubuntu 20.04 instance:\r\n\r\n```\r\ndocker run -v /home/ubuntu:/foo -p 443:443 -d \\\r\n    -e PROXY_URL=0.0.0.0:443 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\\r\n    -e CERT_PEM=/foo/cert.pem -e KEY_PEM=/foo/key.pem \\\r\n    deepgram/deepgram-twilio-streaming-rust:0.1.0\r\n```\r\n## Further Development\r\n\r\nThis should get you up and running with an almost-production-ready Twilio-Deepgram proxy server, written in Rust. There are a few pieces\r\nthat have been left out, for the sake of brevity and for the sake of being agnostic to the needs of your desired system. For example, calls to the\r\n`/client` endpoint are currently entirely unauthenticated, and indeed calls to `/twilio` are also unauthenticated (see\r\n[these Twilio docs](https://www.twilio.com/docs/usage/security) for more details). For a fully-production-ready service, you should\r\ntake authentication into consideration. Also, no logging or telemetry is presented in the proxy server.\r\n\r\nFinally, you will very likely need to build a front-end to interact with the server and properly parse the JSON messages being streamed.\r\nwebsocat is great for testing, but is not a reasonable final solution for subscribing to calls!\r\n\r\nIf you have any questions, please feel free to reach out on Twitter - we\'re [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ', "html": '<p>In a <a href="https://blog.deepgram.com/deepgram-twilio-streaming/">previous blog post</a>, we showed how to build an integration\r\nbetween Deepgram and Twilio for real-time, live transcription using Python. In this post, we will revisit this integration and implement\r\nit in Rust. The <a href="https://www.rust-lang.org/">Rust programming language</a> is a favorite among Deepgram engineers, and is known for its\r\ntype safety, performance, and powerful memory management achieved via a strict ownership system which eliminates entire categories of bugs!</p>\n<p>We will be building our Twilio streaming app using the <a href="https://docs.rs/axum/latest/axum/">Axum web framework</a>\r\nwhich is built on top of the powerful and popular asynchronous <a href="https://tokio.rs/">Tokio crate</a>. Using Rust with\r\nan efficient asynchronous runtime like Tokio is a good choice for reliable and performant web app backends.</p>\n<h2 id="pre-requisites">Pre-requisites</h2>\n<p>You will need:</p>\n<ul>\n<li>a <a href="https://www.twilio.com/try-twilio">Twilio account</a> with a Twilio number (the free tier will work)</li>\n<li>a Deepgram API Key - <a href="https://console.deepgram.com/signup">get an API Key here</a></li>\n<li><a href="https://www.rust-lang.org/tools/install">Rust installed</a></li>\n<li><em>(optional)</em> <a href="https://ngrok.com/">ngrok</a> to let Twilio access a local server</li>\n</ul>\n<h2 id="setting-up-a-twiml-bin">Setting Up a TwiML Bin</h2>\n<p>We will use TwiML Bins to make Twilio fork audio data from phone calls to a server that we will write.\r\nIn the Twilio Console, search for TwiML Bin, and click \u201CCreate TwiML Bin.\u201D</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025616/blog/2022/06/deepgram-twilio-streaming-rust/assets/find_twiml_bin.png" alt="Navigate to your TwiML Bins." style="max-width: 606px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Give the TwiML Bin a \u201CFriendly Name\u201D and enter the following as the the contents of the TwiML Bin:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;?</span><span style="color: #7EE787">xml</span><span style="color: #79C0FF"> version</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;1.0&quot;</span><span style="color: #79C0FF"> encoding</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9">?&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">Response</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Start</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">Stream</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;wss://INSERT_YOUR_SERVER_URL/twilio&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">track</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;both_tracks&quot;</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">Start</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Say</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">voice</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;woman&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">language</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;&quot;This call may be monitored or recorded for quality purposes.&quot;&lt;/</span><span style="color: #7EE787">Say</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Dial</span><span style="color: #C9D1D9">&gt;+11231231234&lt;/</span><span style="color: #7EE787">Dial</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">Response</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In the <code is:raw>Dial</code> section, enter your phone number. Where it says <code is:raw>INSERT_YOUR_SERVER_URL</code> insert the URL where you will be hosting the server.\r\nWithout having to spin up and configure a cloud instance, you can use <code is:raw>ngrok</code> to expose a port on localhost. To do this for, say,\r\nport 5000, run:</p>\n<p>ngrok http 5000</p>\n<p><code is:raw>ngrok</code> will then generate a public URL which forwards requests to your computer at <code is:raw>localhost:5000</code>. This URL may look something like:\r\n<code is:raw>c52e-71-212-124-133.ngrok.io</code> - enter this URL in your TwiML Bin.</p>\n<p>Now the last thing to do on the Twilio Console before hopping over to write our server code is to hook up one of your Twilio numbers to this TwiML Bin.\r\nGo to the \u201CDevelop\u201D tab on the left side of the Twilio Console, navigate to <code is:raw>Phone Numbers -&gt; Manage -&gt; Active numbers</code>, and click on your Twilio number in the list.\r\nThen, under the field \u201CA Call Comes In\u201D, click the drop-down and select \u201CTwiML Bin\u201D; for the field directly next to this one, click the drop-down and select\r\nthe TwiML Bin you just created.\r\nClick \u201CSave\u201D at the bottom of the Twilio Console.</p>\n<h2 id="the-twilio-proxy-server">The Twilio Proxy Server</h2>\n<p>The system that we will be building is illustrated here:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025618/blog/2022/06/deepgram-twilio-streaming-rust/assets/deepgram_twilio_diagram.png" alt="The big picture." style="display: block;margin-left: auto;margin-right: auto;" />\n<p>We want audio from phone calls going through Twilio\u2019s server to be forked to the proxy server we will be writing. The proxy server then buffers\r\nand processes the audio, sends it to Deepgram, and receives transcripts back from Deepgram. The proxy server also accepts client connections which\r\nsubscribe to ongoing calls, and whenever the server receives transcripts from Deepgram for those calls, it broadcasts those transcripts to all subscribers.\r\nThis will all be done via WebSockets at near-real-time! Typical latencies for this system hover around 500 ms.</p>\n<p>Download the code from <a href="https://github.com/deepgram-devs/deepgram-twilio-streaming-rust">this repository</a>.</p>\n<p>Below we will go through creating this project from scratch, but this will also act as a comprehensive code-tour of the repository.\r\nIf you are keen on trying the server out right away and perusing the code\r\nmore at your leisure, feel free to skip to the <a href="#running-the-server-and-testing-with-websocat">Running the Server and Testing with websocat</a> section!</p>\n<h2 id="setup-the-rust-project-and-mainrs">Setup the Rust Project and <code is:raw>main.rs</code></h2>\n<p>Create a new Rust project using <code is:raw>cargo new</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cargo new deepgram-twilio-streaming-rust</span></span></code></pre>\n<p>Go into the project directory and edit the <code is:raw>Cargo.toml</code> file, giving it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span><span style="color: #FFA657">package</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">name = </span><span style="color: #A5D6FF">&quot;deepgram-twilio-streaming-rust&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">version = </span><span style="color: #A5D6FF">&quot;0.1.0&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">edition = </span><span style="color: #A5D6FF">&quot;2021&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">[</span><span style="color: #FFA657">dependencies</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">axum = { version = </span><span style="color: #A5D6FF">&quot;0.5.1&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;ws&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">axum-server = { version = </span><span style="color: #A5D6FF">&quot;0.4.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;tls-rustls&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">base64 = </span><span style="color: #A5D6FF">&quot;0.13.0&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">futures = </span><span style="color: #A5D6FF">&quot;0.3.21&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">http = </span><span style="color: #A5D6FF">&quot;0.2.6&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">serde = { version = </span><span style="color: #A5D6FF">&quot;1.0.136&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;derive&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">serde_json = </span><span style="color: #A5D6FF">&quot;1.0.79&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">tokio = { version = </span><span style="color: #A5D6FF">&quot;1.17.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;macros&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rt&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rt-multi-thread&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">tokio-tungstenite = { version = </span><span style="color: #A5D6FF">&quot;0.15.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;native-tls&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">tungstenite = </span><span style="color: #A5D6FF">&quot;0.14.0&quot;</span></span></code></pre>\n<p>Now let\u2019s modify <code is:raw>src/main.rs</code>. Let\u2019s begin by adding the <code is:raw>use</code> statements we will need, and defining some modules:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">routing</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">get, </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Router</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tls_rustls</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">RustlsConfig</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">lock</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">collections</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">handlers</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">state</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio_response</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>The modules we declared are: <code is:raw>audio</code>, <code is:raw>handlers</code>, <code is:raw>message</code>, <code is:raw>state</code>, and <code is:raw>twilio_response</code>.\r\nWe will go over each one, but briefly these will be for the following:</p>\n<ul>\n<li><code is:raw>audio</code>: handle processing of audio data from Twilio</li>\n<li><code is:raw>handlers</code>: handlers for the websocket endpoints <code is:raw>/twilio</code> and <code is:raw>/client</code></li>\n<li><code is:raw>message</code>: a helper module to convert between <code is:raw>axum</code> and <code is:raw>tungstenite</code> websocket messages</li>\n<li><code is:raw>state</code>: will contain the definition for the global state of the server</li>\n<li><code is:raw>twilio_response</code>: will contain definitions for Twilio\u2019s websocket message shape</li>\n</ul>\n<p>Now, let\u2019s start defining our <code is:raw>main</code> function and set up the state to be shared among the handlers:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">#[tokio</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">main]</span></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> proxy_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PROXY_URL&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap_or_else</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">_</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;127.0.0.1:5000&quot;</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> deepgram_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_URL&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap_or_else</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">_</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;wss://api.deepgram.com/v1/listen?encoding=mulaw&amp;sample_rate=8000&amp;channels=2&amp;multichannel=true&quot;</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> api_key </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Using this server requires a Deepgram API Key.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> cert_pem </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;CERT_PEM&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">ok</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> key_pem </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;KEY_PEM&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">ok</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> config </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> (cert_pem, key_pem) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        (</span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(cert_pem), </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(key_pem)) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">RustlsConfig</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from_pem_file</span><span style="color: #C9D1D9">(cert_pem, key_pem)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to make RustlsConfig from cert/key pem files.&quot;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        ),</span></span>\n<span class="line"><span style="color: #C9D1D9">        (</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        _ </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">panic!</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to start - invalid cert/key.&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> state </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgram_url,</span></span>\n<span class="line"><span style="color: #C9D1D9">        api_key,</span></span>\n<span class="line"><span style="color: #C9D1D9">        subscribers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Mutex</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">HashMap</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">()),</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span></code></pre>\n<p>Our <code is:raw>main</code> function is set up to be asynchronous via the use of the <code is:raw>#[tokio::main]</code> macro.\r\n<code is:raw>main</code> and every async function that <code is:raw>main</code> then calls will be executed by\r\nthe Tokio runtime. Inside <code is:raw>main</code> we grab the following environment variables:</p>\n<ul>\n<li><code is:raw>PROXY_URL</code>: the URL that this server will run on - by default it will use localhost and port 5000</li>\n<li><code is:raw>DEEPGRAM_URL</code>: the URL of Deepgram\u2019s streaming endpoint, including query parameters (Twilio audio uses the <code is:raw>mulaw</code> encoding with\r\na sample rate of 8000, and we will be streaming stereo (2 channel) audio)</li>\n<li><code is:raw>DEEPGRAM_API_KEY</code>: your Deepgram API Key</li>\n<li><code is:raw>CERT_PEM</code>: an optional environment variable pointing to a <code is:raw>cert.pem</code> file used for TLS</li>\n<li><code is:raw>KEY_PEM</code>: an optional environment variable pointing to a <code is:raw>key.pem</code> file used for TLS</li>\n</ul>\n<p>We use these environment variables to construct an <code is:raw>Arc&lt;State&gt;</code> object to store the global server state.</p>\n<p>Now, let\u2019s finish filling in our <code is:raw>main</code> function by configuring our routes and spinning up the <code is:raw>axum</code> server to serve these routes:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Router</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/twilio&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">handlers</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">twilio</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">twilio_handler))</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/client&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">handlers</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">subscriber</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">subscriber_handler))</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">layer</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> config {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(config) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">bind_rustls</span><span style="color: #C9D1D9">(proxy_url</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">(), config)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">serve</span><span style="color: #C9D1D9">(app</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into_make_service</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">bind</span><span style="color: #C9D1D9">(proxy_url</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">serve</span><span style="color: #C9D1D9">(app</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into_make_service</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The <code is:raw>axum</code> server is spun up with or without TLS support depending on whether\r\nor not the <code is:raw>CERT_PEM</code> and <code is:raw>KEY_PEM</code> environment variables are set.</p>\n<p>That\u2019s all there is to <code is:raw>main.rs</code>! The bulk of the application logic will live in the websocket endpoint handlers, but before diving into them\r\nlet\u2019s go over some of the objects the server will use.</p>\n<h2 id="staters-twilio_responsers-and-messagers"><code is:raw>state.rs</code>, <code is:raw>twilio_response.rs</code>, and <code is:raw>message.rs</code></h2>\n<p>Create the file <code is:raw>src/state.rs</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">lock</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">collections</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">State</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> deepgram_url</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> api_key</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">&gt;&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This will represent the global state of the server. The server will need to know the URL of Deepgram\u2019s streaming endpoint and a Deepgram API Key to use as authentication when connecting to this endpoint. Additionally, the server will contain\r\na <code is:raw>HashMap</code> of websocket handlers for subscribers, one for each incoming connection from Twilio. These websocket handlers will be accessed\r\nvia the <code is:raw>callsid</code> of the Twilio call, and wrapped in a <code is:raw>Mutex</code> to handle concurrency.</p>\n<p>Next, create the file <code is:raw>src/twilio_response.rs</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">    //! Definitions for the Twilio messages we need to parse</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">serde</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Event</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> sequence_number</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    #[serde(flatten)]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> event_type</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> stream_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">enum</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Start</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">EventStart</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">default</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Default</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">default</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventStart</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> account_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> stream_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> call_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> tracks</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> media_format</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">MediaFormat</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">MediaFormat</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> encoding</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> sample_rate</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> channels</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> track</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> chunk</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> payload</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>These are just basic structs defining the shape of the messages Twilio will send our server. Feel free to checkout\r\n<a href="https://www.twilio.com/docs/voice/twiml/stream#websocket-messages-from-twilio">Twilio\u2019s documentation</a> for more details.</p>\n<p>Finally, create the file <code is:raw>src/message.rs</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Clone</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">enum</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">protocol</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">CloseFrame</span><span style="color: #C9D1D9">&lt;&#39;</span><span style="color: #FFA657">static</span><span style="color: #C9D1D9">&gt;&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">extract</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This is also a straightforward module which creates our own websocket <code is:raw>Message</code> type which can\r\nbe used to convert to and from <code is:raw>axum</code> websocket messages and <code is:raw>tungstenite</code> websocket messages.</p>\n<h2 id="the-websocket-endpoint-handlers">The WebSocket Endpoint Handlers</h2>\n<p>Now let\u2019s get into the core logic of the server. We need to define functions to handle client/subscriber\r\nconnections to <code is:raw>/client</code> and Twilio connections to <code is:raw>/twilio</code>. Let\u2019s start with the client handler.</p>\n<p>Start by creating <code is:raw>src/handlers/mod.rs</code> with the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">subscriber</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>This simply declares the modules we will use to handle the client/subsriber and Twilio websocket connections.</p>\n<p>Then, create the file <code is:raw>src/handlers/subscriber.rs</code> with the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">message</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">subscriber_handler</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state)</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">on_upgrade</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">socket</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket, state))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">    // send these keys (which will be twilio callsids) to the client</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> keys </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">keys</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">key</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> key</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">collect</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    socket</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(keys)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to send callsids to client.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // wait for the first message from the client</span></span>\n<span class="line"><span style="color: #8B949E">    // and interpret it as the callsid to subscribe to</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">recv</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> msg </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(callsid) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> msg {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">get_mut</span><span style="color: #C9D1D9">(callsid) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(socket);</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>As we saw in <code is:raw>main.rs</code>, <code is:raw>subscriber_handler</code> is the function which will be called when a client tries to connect to the\r\n<code is:raw>/client</code> endpoint of our server. From there, we perform an upgrade from HTTP to websockets. Then, we try to obtain the\r\nsubscribers <code is:raw>HashMap</code> from our server\u2019s global state and send to the client a list of the <code is:raw>callsid</code>s of all ongoing\r\nTwilio calls that the server is handling. The server then waits for a single message back from the client, and it interprets\r\nthis message as the <code is:raw>callsid</code> to subscribe to. If the server receives a valid <code is:raw>callsid</code>, it will push the websocket handle\r\ninto the subscribers <code is:raw>HashMap</code>. When the Twilio handler receives a transcript for that <code is:raw>callsid</code>, it will broadcast it to all\r\nsubscribers, including the one we just pushed. That\u2019s it for <code is:raw>subscriber.rs</code>!</p>\n<p>Now let\u2019s look at the bulkier <code is:raw>twilio.rs</code>. Create <code is:raw>src/handlers/twilio.rs</code>. Let\u2019s build this module\r\npiece by piece, starting with some <code is:raw>use</code> statements:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">audio;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">message</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">twilio_response;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">channel</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">oneshot;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">sink</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">SinkExt</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">stream</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">SplitSink</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">StreamExt</span><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">convert</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">net</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{connect_async, </span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA657">Then</span><span style="color: #C9D1D9">, add the following functions</span><span style="color: #FF7B72">:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">twilio_handler</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state)</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">on_upgrade</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">socket</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket, state))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (_this_sender, this_receiver) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // prepare the connection request with the api key authentication</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> builder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">http</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Request</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">builder</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">method</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">http</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Method</span><span style="color: #FF7B72">::</span><span style="color: #79C0FF">GET</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">uri</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">deepgram_url);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> builder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> builder</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">header</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Authorization&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">format!</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Token {}&quot;</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">api_key));</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> request </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> builder</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">body</span><span style="color: #C9D1D9">(())</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to build a connection request to Deepgram.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // connect to deepgram</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (deepgram_socket, _) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_async</span><span style="color: #C9D1D9">(request)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to connect to Deepgram.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (deepgram_sender, deepgram_reader) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram_socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (callsid_tx, callsid_rx) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">channel</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">spawn</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">handle_to_subscribers</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state),</span></span>\n<span class="line"><span style="color: #C9D1D9">        callsid_rx,</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgram_reader,</span></span>\n<span class="line"><span style="color: #C9D1D9">    ));</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">spawn</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">handle_from_twilio</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state),</span></span>\n<span class="line"><span style="color: #C9D1D9">        callsid_tx,</span></span>\n<span class="line"><span style="color: #C9D1D9">        this_receiver,</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgram_sender,</span></span>\n<span class="line"><span style="color: #C9D1D9">    ));</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Incoming Twilio connections hitting <code is:raw>/twilio</code> will be first directed to the function\r\n<code is:raw>twilio_handler</code> where the websocket upgrade will be performed. Then <code is:raw>handle_socket</code> will split the websocket connection\r\ninto a receiver and a sender, open up an entirely new websocket connection to Deepgram, split the Deepgram websocket\r\nconnection into a receiver and a sender, and spawn tasks which call the functions <code is:raw>handle_to_subscribers</code> and\r\n<code is:raw>handle_from_twilio</code> which take these receivers and senders as arguments. A oneshot channel is also set up so that\r\n<code is:raw>handle_from_twilio</code> can send the <code is:raw>callsid</code> of the Twilio call to <code is:raw>handle_to_subscribers</code> in a thread-safe manner -\r\nthe <code is:raw>callsid</code> is not yet known when these initial websocket connections are established, it only becomes available\r\nwhen Twilio sends this information in a Twilio <code is:raw>start</code> event websocket message.</p>\n<p>Let\u2019s now define the <code is:raw>handle_to_subscribers</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_to_subscribers</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    callsid_rx</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Receiver</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> deepgram_receiver</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">&gt;&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid_rx</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to receive callsid from handle_from_twilio.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram_receiver</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">get_mut</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">callsid) {</span></span>\n<span class="line"><span style="color: #8B949E">            // send the message to all subscribers concurrently</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> futs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">iter_mut</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">subscriber</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> subscriber</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">()));</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">future</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">join_all</span><span style="color: #C9D1D9">(futs)</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">            // if we successfully sent a message then the subscriber is still connected</span></span>\n<span class="line"><span style="color: #8B949E">            // other subscribers should be removed</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9">subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">zip</span><span style="color: #C9D1D9">(results)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">filter_map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">(subscriber, result)</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> result</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">is_ok</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> subscriber))</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">collect</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function first waits to receive the <code is:raw>callsid</code>\r\nfrom <code is:raw>handle_from_twilio</code> and then proceeds to read messages off the Deepgram websocket receiver, broadcasting all\r\nmessages that it obtains to all subscribers to that <code is:raw>callsid</code>.</p>\n<p>Now let\u2019s define <code is:raw>handle_from_twilio</code> as follows:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_from_twilio</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    callsid_tx</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Sender</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> this_receiver</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> deepgram_sender</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitSink</span><span style="color: #C9D1D9">&lt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">        tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    &gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> buffer_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        inbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">        outbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">        inbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        outbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // wrap our oneshot in an Option because we will need it in a loop</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> callsid_tx </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid_tx);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> callsid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> this_receiver</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> msg </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(msg) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> msg {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Result</span><span style="color: #C9D1D9">&lt;twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Event</span><span style="color: #C9D1D9">, _&gt; </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">serde_json</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from_str</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">msg);</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(event) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">event_type {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Start</span><span style="color: #C9D1D9">(start) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #8B949E">                        // the &quot;start&quot; event only happens once, so having our oneshot in here is kosher</span></span>\n<span class="line"><span style="color: #C9D1D9">                        callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">                        // sending this callsid on our oneshot will let `handle_to_subscribers` know the callsid</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid_tx) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid_tx</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">take</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">                            callsid_tx</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to send callsid to handle_to_subscribers.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">                        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">                        // make a new set of subscribers for this call, using the callsid as the key</span></span>\n<span class="line"><span style="color: #C9D1D9">                        state</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">entry</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid)</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">or_default</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">                    }</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(media) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(mixed) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">process_twilio_media</span><span style="color: #C9D1D9">(media, </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data) {</span></span>\n<span class="line"><span style="color: #8B949E">                            // send the audio on to deepgram</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> deepgram_sender</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(mixed)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">is_err</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">                            {</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">break</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">                            }</span></span>\n<span class="line"><span style="color: #C9D1D9">                        }</span></span>\n<span class="line"><span style="color: #C9D1D9">                    }</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // close and remove the subscribers, if we have a callsid</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">callsid) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscriber </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> subscribers {</span></span>\n<span class="line"><span style="color: #8B949E">                // we don&#39;t really care if this succeeds or fails as we are closing/dropping these</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> _ </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscriber</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function begins by setting up an object to help handle the audio buffers\r\nfrom the inbound and outbound callers. We then start reading websocket messages from the Twilio websocket receiver.\r\nWhen we obtain the Twilio <code is:raw>start</code> event message, we can grab the <code is:raw>callsid</code>, use it to set up subscribers\r\nto this call, and send it off to the <code is:raw>handle_to_subscribers</code> task via the oneshot channel we set up earlier. Subsequent\r\nTwilio media events are then processed via <code is:raw>audio::process_twilio_media</code>, and when a buffer of mixed stereo audio is\r\nready, we send it to Deepgram via the Deepgram websocket sender.</p>\n<p>Finally, when Twilio closes the connection to our server (or some error occurs), we must remember to remove all subscribers\r\nfrom the subscriber <code is:raw>HashMap</code> and close the connections to those subscribers.</p>\n<h2 id="processing-the-audio-in-audiors">Processing the Audio in <code is:raw>audio.rs</code></h2>\n<p>When discussing the Twilio websocket handler, the processing of Twilio media events was delegated to <code is:raw>audio::process_twilio_media</code>.\r\nWe will define this function in <code is:raw>src/audio.rs</code>. Make <code is:raw>src/audio.rs</code> with the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">twilio_response;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_SILENCE</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0xff</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">8</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MIN_TWILIO_CHUNKS_TO_MIX</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> inbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> outbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> inbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> outbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;, current_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">, previous_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> time_lost </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> current_timestamp </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> previous_timestamp </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #8B949E">        // here we have received a timestamp that is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous timestamp</span></span>\n<span class="line"><span style="color: #8B949E">        // this occasionally occurs and is unexpected behavior from Twilio</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        current_timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> (previous_timestamp </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> silence </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">iter</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">repeat</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">MULAW_SILENCE</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">take</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> time_lost </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(silence);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">/// (1) decodes twilio media events</span></span>\n<span class="line"><span style="color: #8B949E">/// (2) pads inbound and outbound buffers with silence if needed</span></span>\n<span class="line"><span style="color: #8B949E">/// (3) if there is more than MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms</span></span>\n<span class="line"><span style="color: #8B949E">///     of audio in both inbound and outbound audio buffers, drains as much audio from</span></span>\n<span class="line"><span style="color: #8B949E">///     both buffers as can be mixed together, mixes and returns this audio</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">process_twilio_media</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    media</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;&gt; {</span></span>\n<span class="line"><span style="color: #8B949E">    // NOTE: when Twilio sends media data, it should send TWILIO_MS_PER_CHUNK = 20 ms audio chunks</span></span>\n<span class="line"><span style="color: #8B949E">    // at a time, where each ms of audio is MULAW_BYTES_PER_MS = 8 bytes</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> media_chunk </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">base64</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">decode</span><span style="color: #C9D1D9">(media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">payload)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> media_chunk_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> media_chunk</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media_chunk_size </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #8B949E">        // here, the Twilio media chunk size is not the expected size of TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS bytes</span></span>\n<span class="line"><span style="color: #8B949E">        // this occasionally occurs and is unexpected behavior from Twilio</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #8B949E">    // NOTE: There are rare cases where the timestamp is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous chunk</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">timestamp</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">&gt;()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // pad the inbound or outbound buffer with silence if needed depending on timestamp info</span></span>\n<span class="line"><span style="color: #8B949E">    // and then add the audio data from the twilio media message to the buffer</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">track </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;inbound&quot;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer,</span></span>\n<span class="line"><span style="color: #C9D1D9">            timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">            buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_last_timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">        );</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(media_chunk);</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_last_timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp;</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">track </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;outbound&quot;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer,</span></span>\n<span class="line"><span style="color: #C9D1D9">            timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">            buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_last_timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">        );</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(media_chunk);</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_last_timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // we will return mixed audio of MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms (or more)</span></span>\n<span class="line"><span style="color: #8B949E">    // corresponding to MIN_TWILIO_CHUNKS_TO_MIX = 20 twilio media messages (or more)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> minimum_chunk_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MIN_TWILIO_CHUNKS_TO_MIX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> mixable_data_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">cmp</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">min</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">    );</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> mixable_data_size </span><span style="color: #FF7B72">&gt;=</span><span style="color: #C9D1D9"> minimum_chunk_size {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> mixed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">with_capacity</span><span style="color: #C9D1D9">(mixable_data_size </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> inbound_buffer_segment </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">mixable_data_size);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> outbound_buffer_segment </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">mixable_data_size);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (inbound, outbound) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> inbound_buffer_segment</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">zip</span><span style="color: #C9D1D9">(outbound_buffer_segment) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            mixed</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(inbound);</span></span>\n<span class="line"><span style="color: #C9D1D9">            mixed</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(outbound);</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(mixed)</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">None</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Twilio sends its audio data as 8000 Hz <code is:raw>mulaw</code> data, independently for inbound and outbound callers. Additionally, sometimes Twilio\r\n(or the phones which use Twilio) will drop packets of audio. The function <code is:raw>process_twilio_media</code>, then, handles inserting silence\r\nshould there be dropped packets or timing issues, and mixes together the inbound and outbound audio into a valid stereo audio stream\r\nwhich we can then send to Deepgram. Several of the finer details are explained in the comments in this file.</p>\n<h2 id="running-the-server-and-testing-with-websocat">Running the Server and Testing with websocat</h2>\n<p>Let\u2019s use websocat to quickly test our server.</p>\n<p>Run the server with the following:</p>\n<p>DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY cargo run</p>\n<p>replacing <code is:raw>INSERT_YOUR_DEEPGRAM_API_KEY</code> with your Deepgram API Key.</p>\n<p>This server will need to be accessible to Twilio, and this is set up in the TwiML Bin you created in the previous <a href="#setting-up-a-twiml-bin">Setting Up a TwiML Bin</a> section. If you are using <code is:raw>ngrok</code>, make sure your TwiML Bin\r\nis updated with the current <code is:raw>ngrok</code> URL.</p>\n<p>Now, call your Twilio number with one phone, and answer the call on the phone your Twilio number forwards to.\r\nThen, latch onto the proxy server via the client endpoint with websocat:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">websocat ws://localhost:5000/client</span></span></code></pre>\n<p>Websocat should immediately send you a message containing a list of the <code is:raw>callsid</code>s of all active calls (which in this case should be one).\r\nReply to the message with the <code is:raw>callsid</code> by copy/pasting and hitting enter:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/connect_to_callsid.png" alt="Subscribe to the call via the `callsid`." style="display: block;margin-left: auto;margin-right: auto;" />\n<p>You should start to see transcription results appear in your websocat session in real time:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/websocat_streaming_asr_results.png" alt="Websocat streaming ASR results." style="display: block;margin-left: auto;margin-right: auto;" />\n<p>Feel free to try setting up multiple Twilio numbers, and multiple client sessions!</p>\n<h2 id="making-a-docker-image-for-the-server">Making a Docker Image for the Server</h2>\n<p>Let\u2019s go through the process of building a Docker image so that this server can be portably deployed. We\u2019ll start by making a <code is:raw>rust-toolchain</code> file with the following contents:</p>\n<p>1.61</p>\n<p>(quite the simple file!). This will ensure that when you run <code is:raw>cargo build</code> (either manually, or as part of building a Docker image), the same version of Rust will be used\r\nevery time.</p>\n<p>Now, let\u2019s create a Dockerfile called <code is:raw>Dockerfile</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">FROM ubuntu:22.04 as builder</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">LABEL maintainer=&quot;YOUR_INFO&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">ENV DEBIAN_FRONTEND=noninteractive</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">RUN apt-get update &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    apt-get install -y --no-install-recommends \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        ca-certificates \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        clang \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        curl \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libpq-dev \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libssl-dev \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        pkg-config</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">COPY rust-toolchain /rust-toolchain</span></span>\n<span class="line"><span style="color: #c9d1d9">RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(cat /rust-toolchain) &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    . $HOME/.cargo/env</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">COPY . /deepgram-twilio-streaming-rust</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">RUN . $HOME/.cargo/env &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    cargo install --path /deepgram-twilio-streaming-rust --root /</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">FROM ubuntu:22.04</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">LABEL maintainer=&quot;YOUR_INFO&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">ENV DEBIAN_FRONTEND=noninteractive</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">RUN apt-get update &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    apt-get install -y --no-install-recommends \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        ca-certificates \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libpq5 \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libssl3 &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    apt-get clean</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">COPY --from=builder /bin/deepgram-twilio-streaming-rust /bin/deepgram-twilio-streaming-rust</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">ENTRYPOINT [&quot;/bin/deepgram-twilio-streaming-rust&quot;]</span></span>\n<span class="line"><span style="color: #c9d1d9">CMD [&quot;&quot;]</span></span></code></pre>\n<p>Replace <code is:raw>YOUR_INFO</code> with your name and email address (for me, for example, this would be <code is:raw>Nikola Whallon &lt;nikola@deepgram.com&gt;</code>).\r\nThe key bits to take away are:</p>\n<ul>\n<li>we start with an Ubuntu 22.04 image</li>\n<li>we install several dependencies via <code is:raw>apt</code></li>\n<li>we use the <code is:raw>rust-toolchain</code> and build+install our executable with <code is:raw>cargo install</code></li>\n<li>we set the <code is:raw>ENTRYPOINT</code> to <code is:raw>/bin/deepgram-twilio-streaming-rust</code>, with no command-line arguments (<code is:raw>CMD</code>)</li>\n</ul>\n<p>Now with the Dockerfile written, build the Docker image with:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker build -t your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0 -f Dockerfile .</span></span></code></pre>\n<p>If you will be pushing this image to Docker Hub so that the image can be pulled from a remote server (like an AWS instance),\r\nreplace <code is:raw>your-docker-hub-account</code> with your Docker Hub account. For local testing, simply using the image name <code is:raw>deepgram-twilio-streaming-rust:0.1.0</code>\r\n(or whatever you would like) will work. You are also free to pull and use <code is:raw>deepgram/deepgram-twilio-treaming-rust:0.1.0</code>!</p>\n<p>Now you can run the Docker image in a container locally via:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker run -e PROXY_URL=0.0.0.0:5000 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    -p 5000:5000 your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0</span></span></code></pre>\n<p>replacing <code is:raw>INSERT_YOUR_DEEPGRAM_API_KEY</code> with your Deepgram API Key, and make sure the Docker image name matches what you built. This will\r\nrun the image in a container in your current terminal, but you can include a <code is:raw>-d</code> to detach the process to run in the background. If you do this,\r\nyou will need to keep track of whether or not it is running with <code is:raw>docker ps</code> and similar commands.</p>\n<p>Refer to the <a href="https://docs.docker.com/engine/reference/commandline/cli/">Docker CLI documentation</a> for more info.</p>\n<p>Now that the Twilio proxy server should be running in a Docker container, feel free to give your Twilio number a call, and subscribe to the call\r\nwith websocat by doing:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9"> websocat ws://localhost:5000/client</span></span></code></pre>\n<p>and replying to the server with the <code is:raw>callsid</code> it sends you.</p>\n<p>You should be all set to push this Docker image to your Docker Hub (or use ours: <code is:raw>deepgram/deepgram-twilio-treaming-rust:0.1.0</code>), and pull\r\nand use it on your cloud server! You will need to provide the additional environment variables <code is:raw>CERT_PEM</code> and <code is:raw>KEY_PEM</code> to do this, making\r\nsure those files are accessible to the Docker continer by using <code is:raw>-v</code>, and you may need to specify\r\nthe port as <code is:raw>443</code> in the <code is:raw>PROXY_URL</code> and use <code is:raw>-p 443:443</code> among other subtle changes.\r\nYou should refer to your cloud server provider\u2019s documentation on setting up an https/wss enabled server with certificates. As an example,\r\nhere\u2019s how I spun up the server app on an AWS Ubuntu 20.04 instance:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker run -v /home/ubuntu:/foo -p 443:443 -d \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    -e PROXY_URL=0.0.0.0:443 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    -e CERT_PEM=/foo/cert.pem -e KEY_PEM=/foo/key.pem \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    deepgram/deepgram-twilio-streaming-rust:0.1.0</span></span></code></pre>\n<h2 id="further-development">Further Development</h2>\n<p>This should get you up and running with an almost-production-ready Twilio-Deepgram proxy server, written in Rust. There are a few pieces\r\nthat have been left out, for the sake of brevity and for the sake of being agnostic to the needs of your desired system. For example, calls to the\r\n<code is:raw>/client</code> endpoint are currently entirely unauthenticated, and indeed calls to <code is:raw>/twilio</code> are also unauthenticated (see\r\n<a href="https://www.twilio.com/docs/usage/security">these Twilio docs</a> for more details). For a fully-production-ready service, you should\r\ntake authentication into consideration. Also, no logging or telemetry is presented in the proxy server.</p>\n<p>Finally, you will very likely need to build a front-end to interact with the server and properly parse the JSON messages being streamed.\r\nwebsocat is great for testing, but is not a reasonable final solution for subscribing to calls!</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Transcribe Twilio Voice Calls in Real-Time with Rust and Deepgram", "description": "Learn how to transcribe Twilio Voice calls with Deepgram using real-time speech-to-text in Rust.", "date": "2022-06-07T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1654025615/blog/2022/06/deepgram-twilio-streaming-rust/Transcribing-Twilio-Rust-Calls-Real-Time-w-Deepgram%402x.jpg", "authors": ["nikola-whallon"], "category": "tutorial", "tags": ["twilio", "rust"], "seo": { "title": "Transcribe Twilio Voice Calls in Real-Time with Rust and Deepgram", "description": "Learn how to transcribe Twilio Voice calls with Deepgram using real-time speech-to-text in Rust." }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454095/blog/deepgram-twilio-streaming-rust/ograph.png" }, "shorturls": { "share": "https://dpgr.am/eefb3c8", "twitter": "https://dpgr.am/e4fdda8", "linkedin": "https://dpgr.am/817df91", "reddit": "https://dpgr.am/37913ea", "facebook": "https://dpgr.am/ee177cb" }, "astro": { "headings": [{ "depth": 2, "slug": "pre-requisites", "text": "Pre-requisites" }, { "depth": 2, "slug": "setting-up-a-twiml-bin", "text": "Setting Up a TwiML Bin" }, { "depth": 2, "slug": "the-twilio-proxy-server", "text": "The Twilio Proxy Server" }, { "depth": 2, "slug": "setup-the-rust-project-and-mainrs", "text": "Setup the Rust Project and main.rs" }, { "depth": 2, "slug": "staters-twilio_responsers-and-messagers", "text": "state.rs, twilio_response.rs, and message.rs" }, { "depth": 2, "slug": "the-websocket-endpoint-handlers", "text": "The WebSocket Endpoint Handlers" }, { "depth": 2, "slug": "processing-the-audio-in-audiors", "text": "Processing the Audio in audio.rs" }, { "depth": 2, "slug": "running-the-server-and-testing-with-websocat", "text": "Running the Server and Testing with websocat" }, { "depth": 2, "slug": "making-a-docker-image-for-the-server", "text": "Making a Docker Image for the Server" }, { "depth": 2, "slug": "further-development", "text": "Further Development" }], "source": '\r\nIn a [previous blog post](https://blog.deepgram.com/deepgram-twilio-streaming/), we showed how to build an integration\r\nbetween Deepgram and Twilio for real-time, live transcription using Python. In this post, we will revisit this integration and implement\r\nit in Rust. The [Rust programming language](https://www.rust-lang.org/) is a favorite among Deepgram engineers, and is known for its\r\ntype safety, performance, and powerful memory management achieved via a strict ownership system which eliminates entire categories of bugs!\r\n\r\nWe will be building our Twilio streaming app using the [Axum web framework](https://docs.rs/axum/latest/axum/)\r\nwhich is built on top of the powerful and popular asynchronous [Tokio crate](https://tokio.rs/). Using Rust with\r\nan efficient asynchronous runtime like Tokio is a good choice for reliable and performant web app backends.\r\n\r\n## Pre-requisites\r\n\r\nYou will need:\r\n\r\n*   a [Twilio account](https://www.twilio.com/try-twilio) with a Twilio number (the free tier will work)\r\n*   a Deepgram API Key - [get an API Key here](https://console.deepgram.com/signup)\r\n*   [Rust installed](https://www.rust-lang.org/tools/install)\r\n*   *(optional)* [ngrok](https://ngrok.com/) to let Twilio access a local server\r\n\r\n## Setting Up a TwiML Bin\r\n\r\nWe will use TwiML Bins to make Twilio fork audio data from phone calls to a server that we will write.\r\nIn the Twilio Console, search for TwiML Bin, and click "Create TwiML Bin."\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025616/blog/2022/06/deepgram-twilio-streaming-rust/assets/find_twiml_bin.png" alt="Navigate to your TwiML Bins." style="max-width: 606px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nGive the TwiML Bin a "Friendly Name" and enter the following as the the contents of the TwiML Bin:\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<Response>\r\n  <Start>\r\n    <Stream url="wss://INSERT_YOUR_SERVER_URL/twilio" track="both_tracks"/>\r\n  </Start>\r\n  <Say voice="woman" language="en">"This call may be monitored or recorded for quality purposes."</Say>\r\n  <Dial>+11231231234</Dial>\r\n</Response>\r\n```\r\n\r\nIn the `Dial` section, enter your phone number. Where it says `INSERT_YOUR_SERVER_URL` insert the URL where you will be hosting the server.\r\nWithout having to spin up and configure a cloud instance, you can use `ngrok` to expose a port on localhost. To do this for, say,\r\nport 5000, run:\r\n\r\n    ngrok http 5000\r\n\r\n`ngrok` will then generate a public URL which forwards requests to your computer at `localhost:5000`. This URL may look something like:\r\n`c52e-71-212-124-133.ngrok.io` - enter this URL in your TwiML Bin.\r\n\r\nNow the last thing to do on the Twilio Console before hopping over to write our server code is to hook up one of your Twilio numbers to this TwiML Bin.\r\nGo to the "Develop" tab on the left side of the Twilio Console, navigate to `Phone Numbers -> Manage -> Active numbers`, and click on your Twilio number in the list.\r\nThen, under the field "A Call Comes In", click the drop-down and select "TwiML Bin"; for the field directly next to this one, click the drop-down and select\r\nthe TwiML Bin you just created.\r\nClick "Save" at the bottom of the Twilio Console.\r\n\r\n## The Twilio Proxy Server\r\n\r\nThe system that we will be building is illustrated here:\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025618/blog/2022/06/deepgram-twilio-streaming-rust/assets/deepgram_twilio_diagram.png" alt="The big picture." style="display: block;margin-left: auto;margin-right: auto;">\r\n\r\nWe want audio from phone calls going through Twilio\'s server to be forked to the proxy server we will be writing. The proxy server then buffers\r\nand processes the audio, sends it to Deepgram, and receives transcripts back from Deepgram. The proxy server also accepts client connections which\r\nsubscribe to ongoing calls, and whenever the server receives transcripts from Deepgram for those calls, it broadcasts those transcripts to all subscribers.\r\nThis will all be done via WebSockets at near-real-time! Typical latencies for this system hover around 500 ms.\r\n\r\nDownload the code from [this repository](https://github.com/deepgram-devs/deepgram-twilio-streaming-rust).\r\n\r\nBelow we will go through creating this project from scratch, but this will also act as a comprehensive code-tour of the repository.\r\nIf you are keen on trying the server out right away and perusing the code\r\nmore at your leisure, feel free to skip to the [Running the Server and Testing with websocat](#running-the-server-and-testing-with-websocat) section!\r\n\r\n## Setup the Rust Project and `main.rs`\r\n\r\nCreate a new Rust project using `cargo new`:\r\n\r\n```\r\ncargo new deepgram-twilio-streaming-rust\r\n```\r\n\r\nGo into the project directory and edit the `Cargo.toml` file, giving it the following contents:\r\n\r\n```toml\r\n[package]\r\nname = "deepgram-twilio-streaming-rust"\r\nversion = "0.1.0"\r\nedition = "2021"\r\n\r\n[dependencies]\r\naxum = { version = "0.5.1", features = ["ws"] }\r\naxum-server = { version = "0.4.0", features = ["tls-rustls"] }\r\nbase64 = "0.13.0"\r\nfutures = "0.3.21"\r\nhttp = "0.2.6"\r\nserde = { version = "1.0.136", features = ["derive"] }\r\nserde_json = "1.0.79"\r\ntokio = { version = "1.17.0", features = ["macros", "rt", "rt-multi-thread"] }\r\ntokio-tungstenite = { version = "0.15.0", features = ["native-tls"] }\r\ntungstenite = "0.14.0"\r\n```\r\nNow let\'s modify `src/main.rs`. Let\'s begin by adding the `use` statements we will need, and defining some modules:\r\n\r\n```rust\r\nuse axum::{routing::get, Extension, Router};\r\nuse axum_server::tls_rustls::RustlsConfig;\r\nuse futures::lock::Mutex;\r\nuse std::{collections::HashMap, sync::Arc};\r\n\r\nmod audio;\r\nmod handlers;\r\nmod message;\r\nmod state;\r\nmod twilio_response;\r\n```\r\n\r\nThe modules we declared are: `audio`, `handlers`, `message`, `state`, and `twilio_response`.\r\nWe will go over each one, but briefly these will be for the following:\r\n\r\n*   `audio`: handle processing of audio data from Twilio\r\n*   `handlers`: handlers for the websocket endpoints `/twilio` and `/client`\r\n*   `message`: a helper module to convert between `axum` and `tungstenite` websocket messages\r\n*   `state`: will contain the definition for the global state of the server\r\n*   `twilio_response`: will contain definitions for Twilio\'s websocket message shape\r\n\r\nNow, let\'s start defining our `main` function and set up the state to be shared among the handlers:\r\n\r\n```rust\r\n#[tokio::main]\r\nasync fn main() {\r\n    let proxy_url = std::env::var("PROXY_URL").unwrap_or_else(|_| "127.0.0.1:5000".to_string());\r\n\r\n    let deepgram_url = std::env::var("DEEPGRAM_URL")\r\n        .unwrap_or_else(|_| "wss://api.deepgram.com/v1/listen?encoding=mulaw&sample_rate=8000&channels=2&multichannel=true".to_string());\r\n\r\n    let api_key =\r\n        std::env::var("DEEPGRAM_API_KEY").expect("Using this server requires a Deepgram API Key.");\r\n\r\n    let cert_pem = std::env::var("CERT_PEM").ok();\r\n    let key_pem = std::env::var("KEY_PEM").ok();\r\n\r\n    let config = match (cert_pem, key_pem) {\r\n        (Some(cert_pem), Some(key_pem)) => Some(\r\n            RustlsConfig::from_pem_file(cert_pem, key_pem)\r\n                .await\r\n                .expect("Failed to make RustlsConfig from cert/key pem files."),\r\n        ),\r\n        (None, None) => None,\r\n        _ => {\r\n            panic!("Failed to start - invalid cert/key.")\r\n        }\r\n    };\r\n\r\n    let state = Arc::new(state::State {\r\n        deepgram_url,\r\n        api_key,\r\n        subscribers: Mutex::new(HashMap::new()),\r\n    });\r\n```\r\n\r\nOur `main` function is set up to be asynchronous via the use of the `#[tokio::main]` macro.\r\n`main` and every async function that `main` then calls will be executed by\r\nthe Tokio runtime. Inside `main` we grab the following environment variables:\r\n\r\n*   `PROXY_URL`: the URL that this server will run on - by default it will use localhost and port 5000\r\n*   `DEEPGRAM_URL`: the URL of Deepgram\'s streaming endpoint, including query parameters (Twilio audio uses the `mulaw` encoding with\r\n    a sample rate of 8000, and we will be streaming stereo (2 channel) audio)\r\n*   `DEEPGRAM_API_KEY`: your Deepgram API Key\r\n*   `CERT_PEM`: an optional environment variable pointing to a `cert.pem` file used for TLS\r\n*   `KEY_PEM`: an optional environment variable pointing to a `key.pem` file used for TLS\r\n\r\nWe use these environment variables to construct an `Arc<State>` object to store the global server state.\r\n\r\nNow, let\'s finish filling in our `main` function by configuring our routes and spinning up the `axum` server to serve these routes:\r\n\r\n```rust\r\n    let app = Router::new()\r\n        .route("/twilio", get(handlers::twilio::twilio_handler))\r\n        .route("/client", get(handlers::subscriber::subscriber_handler))\r\n        .layer(Extension(state));\r\n\r\n    match config {\r\n        Some(config) => {\r\n            axum_server::bind_rustls(proxy_url.parse().unwrap(), config)\r\n                .serve(app.into_make_service())\r\n                .await\r\n                .unwrap();\r\n        }\r\n        None => {\r\n            axum_server::bind(proxy_url.parse().unwrap())\r\n                .serve(app.into_make_service())\r\n                .await\r\n                .unwrap();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe `axum` server is spun up with or without TLS support depending on whether\r\nor not the `CERT_PEM` and `KEY_PEM` environment variables are set.\r\n\r\nThat\'s all there is to `main.rs`! The bulk of the application logic will live in the websocket endpoint handlers, but before diving into them\r\nlet\'s go over some of the objects the server will use.\r\n\r\n## `state.rs`, `twilio_response.rs`, and `message.rs`\r\n\r\nCreate the file `src/state.rs` and give it the following contents:\r\n\r\n```rust\r\nuse axum::extract::ws::WebSocket;\r\nuse futures::lock::Mutex;\r\nuse std::collections::HashMap;\r\n\r\npub struct State {\r\n    pub deepgram_url: String,\r\n    pub api_key: String,\r\n    pub subscribers: Mutex<HashMap<String, Vec<WebSocket>>>,\r\n}\r\n```\r\n\r\nThis will represent the global state of the server. The server will need to know the URL of Deepgram\'s streaming endpoint and a Deepgram API Key to use as authentication when connecting to this endpoint. Additionally, the server will contain\r\na `HashMap` of websocket handlers for subscribers, one for each incoming connection from Twilio. These websocket handlers will be accessed\r\nvia the `callsid` of the Twilio call, and wrapped in a `Mutex` to handle concurrency.\r\n\r\nNext, create the file `src/twilio_response.rs` and give it the following contents:\r\n\r\n```rust\r\n    //! Definitions for the Twilio messages we need to parse\r\n\r\nuse serde::{Deserialize, Serialize};\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub struct Event {\r\n    pub event: String,\r\n    pub sequence_number: String,\r\n    #[serde(flatten)]\r\n    pub event_type: EventType,\r\n    pub stream_sid: String,\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub enum EventType {\r\n    Start(EventStart),\r\n    Media(EventMedia),\r\n}\r\n\r\nimpl Default for EventType {\r\n    fn default() -> Self {\r\n        EventType::Media(Default::default())\r\n    }\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub struct EventStart {\r\n    pub account_sid: String,\r\n    pub stream_sid: String,\r\n    pub call_sid: String,\r\n    pub tracks: Vec<String>,\r\n    pub media_format: MediaFormat,\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub struct MediaFormat {\r\n    pub encoding: String,\r\n    pub sample_rate: u32,\r\n    pub channels: u32,\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\npub struct EventMedia {\r\n    pub track: String,\r\n    pub chunk: String,\r\n    pub timestamp: String,\r\n    pub payload: String,\r\n}\r\n```\r\n\r\nThese are just basic structs defining the shape of the messages Twilio will send our server. Feel free to checkout\r\n[Twilio\'s documentation](https://www.twilio.com/docs/voice/twiml/stream#websocket-messages-from-twilio) for more details.\r\n\r\nFinally, create the file `src/message.rs` and give it the following contents:\r\n\r\n```rust\r\n#[derive(Clone)]\r\npub enum Message {\r\n    Text(String),\r\n    Binary(Vec<u8>),\r\n    Ping(Vec<u8>),\r\n    Pong(Vec<u8>),\r\n    Close(Option<tungstenite::protocol::CloseFrame<\'static>>),\r\n}\r\n\r\nimpl From<axum::extract::ws::Message> for Message {\r\n    fn from(item: axum::extract::ws::Message) -> Self {\r\n        match item {\r\n            axum::extract::ws::Message::Text(text) => Message::Text(text),\r\n            axum::extract::ws::Message::Binary(binary) => Message::Binary(binary),\r\n            axum::extract::ws::Message::Ping(ping) => Message::Ping(ping),\r\n            axum::extract::ws::Message::Pong(pong) => Message::Pong(pong),\r\n            // will deal with this later\r\n            axum::extract::ws::Message::Close(_) => Message::Close(None),\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<tokio_tungstenite::tungstenite::Message> for Message {\r\n    fn from(item: tokio_tungstenite::tungstenite::Message) -> Self {\r\n        match item {\r\n            tokio_tungstenite::tungstenite::Message::Text(text) => Message::Text(text),\r\n            tokio_tungstenite::tungstenite::Message::Binary(binary) => Message::Binary(binary),\r\n            tokio_tungstenite::tungstenite::Message::Ping(ping) => Message::Ping(ping),\r\n            tokio_tungstenite::tungstenite::Message::Pong(pong) => Message::Pong(pong),\r\n            // will deal with this later\r\n            tokio_tungstenite::tungstenite::Message::Close(_) => Message::Close(None),\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<Message> for axum::extract::ws::Message {\r\n    fn from(item: Message) -> axum::extract::ws::Message {\r\n        match item {\r\n            Message::Text(text) => axum::extract::ws::Message::Text(text),\r\n            Message::Binary(binary) => axum::extract::ws::Message::Binary(binary),\r\n            Message::Ping(ping) => axum::extract::ws::Message::Ping(ping),\r\n            Message::Pong(pong) => axum::extract::ws::Message::Pong(pong),\r\n            // will deal with this later\r\n            Message::Close(_) => axum::extract::ws::Message::Close(None),\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<Message> for tokio_tungstenite::tungstenite::Message {\r\n    fn from(item: Message) -> tokio_tungstenite::tungstenite::Message {\r\n        match item {\r\n            Message::Text(text) => tokio_tungstenite::tungstenite::Message::Text(text),\r\n            Message::Binary(binary) => tokio_tungstenite::tungstenite::Message::Binary(binary),\r\n            Message::Ping(ping) => tokio_tungstenite::tungstenite::Message::Ping(ping),\r\n            Message::Pong(pong) => tokio_tungstenite::tungstenite::Message::Pong(pong),\r\n            // will deal with this later\r\n            Message::Close(_) => tokio_tungstenite::tungstenite::Message::Close(None),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis is also a straightforward module which creates our own websocket `Message` type which can\r\nbe used to convert to and from `axum` websocket messages and `tungstenite` websocket messages.\r\n\r\n## The WebSocket Endpoint Handlers\r\n\r\nNow let\'s get into the core logic of the server. We need to define functions to handle client/subscriber\r\nconnections to `/client` and Twilio connections to `/twilio`. Let\'s start with the client handler.\r\n\r\nStart by creating `src/handlers/mod.rs` with the following contents:\r\n\r\n```rust\r\npub mod subscriber;\r\npub mod twilio;\r\n```\r\n\r\nThis simply declares the modules we will use to handle the client/subsriber and Twilio websocket connections.\r\n\r\nThen, create the file `src/handlers/subscriber.rs` with the following contents:\r\n\r\n```rust\r\nuse crate::message::Message;\r\nuse crate::state::State;\r\nuse axum::{\r\n    extract::ws::{WebSocket, WebSocketUpgrade},\r\n    response::IntoResponse,\r\n    Extension,\r\n};\r\nuse std::sync::Arc;\r\n\r\npub async fn subscriber_handler(\r\n    ws: WebSocketUpgrade,\r\n    Extension(state): Extension<Arc<State>>,\r\n) -> impl IntoResponse {\r\n    ws.on_upgrade(|socket| handle_socket(socket, state))\r\n}\r\n\r\nasync fn handle_socket(mut socket: WebSocket, state: Arc<State>) {\r\n    let mut subscribers = state.subscribers.lock().await;\r\n    // send these keys (which will be twilio callsids) to the client\r\n    let keys = subscribers.keys().map(|key| key.to_string()).collect();\r\n    socket\r\n        .send(Message::Text(keys).into())\r\n        .await\r\n        .expect("Failed to send callsids to client.");\r\n\r\n    // wait for the first message from the client\r\n    // and interpret it as the callsid to subscribe to\r\n    if let Some(Ok(msg)) = socket.recv().await {\r\n        let msg = Message::from(msg);\r\n        if let Message::Text(callsid) = msg {\r\n            let callsid = callsid.trim();\r\n            if let Some(subscribers) = subscribers.get_mut(callsid) {\r\n                subscribers.push(socket);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAs we saw in `main.rs`, `subscriber_handler` is the function which will be called when a client tries to connect to the\r\n`/client` endpoint of our server. From there, we perform an upgrade from HTTP to websockets. Then, we try to obtain the\r\nsubscribers `HashMap` from our server\'s global state and send to the client a list of the `callsid`s of all ongoing\r\nTwilio calls that the server is handling. The server then waits for a single message back from the client, and it interprets\r\nthis message as the `callsid` to subscribe to. If the server receives a valid `callsid`, it will push the websocket handle\r\ninto the subscribers `HashMap`. When the Twilio handler receives a transcript for that `callsid`, it will broadcast it to all\r\nsubscribers, including the one we just pushed. That\'s it for `subscriber.rs`!\r\n\r\nNow let\'s look at the bulkier `twilio.rs`. Create `src/handlers/twilio.rs`. Let\'s build this module\r\npiece by piece, starting with some `use` statements:\r\n\r\n```rust\r\nuse crate::audio;\r\nuse crate::message::Message;\r\nuse crate::state::State;\r\nuse crate::twilio_response;\r\nuse axum::{\r\n    extract::ws::{WebSocket, WebSocketUpgrade},\r\n    response::IntoResponse,\r\n    Extension,\r\n};\r\nuse futures::channel::oneshot;\r\nuse futures::{\r\n    sink::SinkExt,\r\n    stream::{SplitSink, SplitStream, StreamExt},\r\n};\r\nuse std::{convert::From, sync::Arc};\r\nuse tokio::net::TcpStream;\r\nuse tokio_tungstenite::{connect_async, MaybeTlsStream, WebSocketStream};\r\n\r\nThen, add the following functions:\r\n\r\npub async fn twilio_handler(\r\n    ws: WebSocketUpgrade,\r\n    Extension(state): Extension<Arc<State>>,\r\n) -> impl IntoResponse {\r\n    ws.on_upgrade(|socket| handle_socket(socket, state))\r\n}\r\n\r\nasync fn handle_socket(socket: WebSocket, state: Arc<State>) {\r\n    let (_this_sender, this_receiver) = socket.split();\r\n\r\n    // prepare the connection request with the api key authentication\r\n    let builder = http::Request::builder()\r\n        .method(http::Method::GET)\r\n        .uri(&state.deepgram_url);\r\n    let builder = builder.header("Authorization", format!("Token {}", state.api_key));\r\n    let request = builder\r\n        .body(())\r\n        .expect("Failed to build a connection request to Deepgram.");\r\n\r\n    // connect to deepgram\r\n    let (deepgram_socket, _) = connect_async(request)\r\n        .await\r\n        .expect("Failed to connect to Deepgram.");\r\n    let (deepgram_sender, deepgram_reader) = deepgram_socket.split();\r\n\r\n    let (callsid_tx, callsid_rx) = oneshot::channel::<String>();\r\n\r\n    tokio::spawn(handle_to_subscribers(\r\n        Arc::clone(&state),\r\n        callsid_rx,\r\n        deepgram_reader,\r\n    ));\r\n    tokio::spawn(handle_from_twilio(\r\n        Arc::clone(&state),\r\n        callsid_tx,\r\n        this_receiver,\r\n        deepgram_sender,\r\n    ));\r\n}\r\n```\r\n\r\nIncoming Twilio connections hitting `/twilio` will be first directed to the function\r\n`twilio_handler` where the websocket upgrade will be performed. Then `handle_socket` will split the websocket connection\r\ninto a receiver and a sender, open up an entirely new websocket connection to Deepgram, split the Deepgram websocket\r\nconnection into a receiver and a sender, and spawn tasks which call the functions `handle_to_subscribers` and\r\n`handle_from_twilio` which take these receivers and senders as arguments. A oneshot channel is also set up so that\r\n`handle_from_twilio` can send the `callsid` of the Twilio call to `handle_to_subscribers` in a thread-safe manner -\r\nthe `callsid` is not yet known when these initial websocket connections are established, it only becomes available\r\nwhen Twilio sends this information in a Twilio `start` event websocket message.\r\n\r\nLet\'s now define the `handle_to_subscribers` function:\r\n\r\n```rust\r\nasync fn handle_to_subscribers(\r\n    state: Arc<State>,\r\n    callsid_rx: oneshot::Receiver<String>,\r\n    mut deepgram_receiver: SplitStream<WebSocketStream<MaybeTlsStream<TcpStream>>>,\r\n) {\r\n    let callsid = callsid_rx\r\n        .await\r\n        .expect("Failed to receive callsid from handle_from_twilio.");\r\n\r\n    while let Some(Ok(msg)) = deepgram_receiver.next().await {\r\n        let mut subscribers = state.subscribers.lock().await;\r\n        if let Some(subscribers) = subscribers.get_mut(&callsid) {\r\n            // send the message to all subscribers concurrently\r\n            let futs = subscribers\r\n                .iter_mut()\r\n                .map(|subscriber| subscriber.send(Message::from(msg.clone()).into()));\r\n            let results = futures::future::join_all(futs).await;\r\n\r\n            // if we successfully sent a message then the subscriber is still connected\r\n            // other subscribers should be removed\r\n            *subscribers = subscribers\r\n                .drain(..)\r\n                .zip(results)\r\n                .filter_map(|(subscriber, result)| result.is_ok().then(|| subscriber))\r\n                .collect();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis function first waits to receive the `callsid`\r\nfrom `handle_from_twilio` and then proceeds to read messages off the Deepgram websocket receiver, broadcasting all\r\nmessages that it obtains to all subscribers to that `callsid`.\r\n\r\nNow let\'s define `handle_from_twilio` as follows:\r\n\r\n```rust\r\nasync fn handle_from_twilio(\r\n    state: Arc<State>,\r\n    callsid_tx: oneshot::Sender<String>,\r\n    mut this_receiver: SplitStream<WebSocket>,\r\n    mut deepgram_sender: SplitSink<\r\n        WebSocketStream<MaybeTlsStream<TcpStream>>,\r\n        tokio_tungstenite::tungstenite::Message,\r\n    >,\r\n) {\r\n    let mut buffer_data = audio::BufferData {\r\n        inbound_buffer: Vec::new(),\r\n        outbound_buffer: Vec::new(),\r\n        inbound_last_timestamp: 0,\r\n        outbound_last_timestamp: 0,\r\n    };\r\n\r\n    // wrap our oneshot in an Option because we will need it in a loop\r\n    let mut callsid_tx = Some(callsid_tx);\r\n    let mut callsid: Option<String> = None;\r\n\r\n    while let Some(Ok(msg)) = this_receiver.next().await {\r\n        let msg = Message::from(msg);\r\n        if let Message::Text(msg) = msg {\r\n            let event: Result<twilio_response::Event, _> = serde_json::from_str(&msg);\r\n            if let Ok(event) = event {\r\n                match event.event_type {\r\n                    twilio_response::EventType::Start(start) => {\r\n                        // the "start" event only happens once, so having our oneshot in here is kosher\r\n                        callsid = Some(start.call_sid.clone());\r\n\r\n                        // sending this callsid on our oneshot will let `handle_to_subscribers` know the callsid\r\n                        if let Some(callsid_tx) = callsid_tx.take() {\r\n                            callsid_tx\r\n                                .send(start.call_sid.clone())\r\n                                .expect("Failed to send callsid to handle_to_subscribers.");\r\n                        }\r\n\r\n                        // make a new set of subscribers for this call, using the callsid as the key\r\n                        state\r\n                            .subscribers\r\n                            .lock()\r\n                            .await\r\n                            .entry(start.call_sid)\r\n                            .or_default();\r\n                    }\r\n                    twilio_response::EventType::Media(media) => {\r\n                        if let Some(mixed) = audio::process_twilio_media(media, &mut buffer_data) {\r\n                            // send the audio on to deepgram\r\n                            if deepgram_sender\r\n                                .send(Message::Binary(mixed).into())\r\n                                .await\r\n                                .is_err()\r\n                            {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // close and remove the subscribers, if we have a callsid\r\n    if let Some(callsid) = callsid {\r\n        let mut subscribers = state.subscribers.lock().await;\r\n        if let Some(subscribers) = subscribers.remove(&callsid) {\r\n            for mut subscriber in subscribers {\r\n                // we don\'t really care if this succeeds or fails as we are closing/dropping these\r\n                let _ = subscriber.send(Message::Close(None).into()).await;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis function begins by setting up an object to help handle the audio buffers\r\nfrom the inbound and outbound callers. We then start reading websocket messages from the Twilio websocket receiver.\r\nWhen we obtain the Twilio `start` event message, we can grab the `callsid`, use it to set up subscribers\r\nto this call, and send it off to the `handle_to_subscribers` task via the oneshot channel we set up earlier. Subsequent\r\nTwilio media events are then processed via `audio::process_twilio_media`, and when a buffer of mixed stereo audio is\r\nready, we send it to Deepgram via the Deepgram websocket sender.\r\n\r\nFinally, when Twilio closes the connection to our server (or some error occurs), we must remember to remove all subscribers\r\nfrom the subscriber `HashMap` and close the connections to those subscribers.\r\n\r\n## Processing the Audio in `audio.rs`\r\n\r\nWhen discussing the Twilio websocket handler, the processing of Twilio media events was delegated to `audio::process_twilio_media`.\r\nWe will define this function in `src/audio.rs`. Make `src/audio.rs` with the following contents:\r\n\r\n```rust\r\nuse crate::twilio_response;\r\n\r\nconst MULAW_SILENCE: u8 = 0xff;\r\nconst MULAW_BYTES_PER_MS: usize = 8;\r\nconst TWILIO_MS_PER_CHUNK: usize = 20;\r\nconst MIN_TWILIO_CHUNKS_TO_MIX: usize = 20;\r\n\r\npub struct BufferData {\r\n    pub inbound_buffer: Vec<u8>,\r\n    pub outbound_buffer: Vec<u8>,\r\n    pub inbound_last_timestamp: u32,\r\n    pub outbound_last_timestamp: u32,\r\n}\r\n\r\nfn pad_with_silence(buffer: &mut Vec<u8>, current_timestamp: u32, previous_timestamp: u32) {\r\n    let time_lost = if current_timestamp < previous_timestamp + TWILIO_MS_PER_CHUNK as u32 {\r\n        // here we have received a timestamp that is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous timestamp\r\n        // this occasionally occurs and is unexpected behavior from Twilio\r\n        0\r\n    } else {\r\n        current_timestamp - (previous_timestamp + TWILIO_MS_PER_CHUNK as u32)\r\n    };\r\n    let silence = std::iter::repeat(MULAW_SILENCE).take(MULAW_BYTES_PER_MS * time_lost as usize);\r\n    buffer.extend(silence);\r\n}\r\n\r\n/// (1) decodes twilio media events\r\n/// (2) pads inbound and outbound buffers with silence if needed\r\n/// (3) if there is more than MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms\r\n///     of audio in both inbound and outbound audio buffers, drains as much audio from\r\n///     both buffers as can be mixed together, mixes and returns this audio\r\npub fn process_twilio_media(\r\n    media: twilio_response::EventMedia,\r\n    mut buffer_data: &mut BufferData,\r\n) -> Option<Vec<u8>> {\r\n    // NOTE: when Twilio sends media data, it should send TWILIO_MS_PER_CHUNK = 20 ms audio chunks\r\n    // at a time, where each ms of audio is MULAW_BYTES_PER_MS = 8 bytes\r\n    let media_chunk = base64::decode(media.payload).unwrap();\r\n    let media_chunk_size = media_chunk.len();\r\n    if media_chunk_size != TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS {\r\n        // here, the Twilio media chunk size is not the expected size of TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS bytes\r\n        // this occasionally occurs and is unexpected behavior from Twilio\r\n    }\r\n    // NOTE: There are rare cases where the timestamp is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous chunk\r\n    let timestamp = media.timestamp.parse::<u32>().unwrap();\r\n\r\n    // pad the inbound or outbound buffer with silence if needed depending on timestamp info\r\n    // and then add the audio data from the twilio media message to the buffer\r\n    if media.track == "inbound" {\r\n        pad_with_silence(\r\n            &mut buffer_data.inbound_buffer,\r\n            timestamp,\r\n            buffer_data.inbound_last_timestamp,\r\n        );\r\n        buffer_data.inbound_buffer.extend(media_chunk);\r\n        buffer_data.inbound_last_timestamp = timestamp;\r\n    } else if media.track == "outbound" {\r\n        pad_with_silence(\r\n            &mut buffer_data.outbound_buffer,\r\n            timestamp,\r\n            buffer_data.outbound_last_timestamp,\r\n        );\r\n        buffer_data.outbound_buffer.extend(media_chunk);\r\n        buffer_data.outbound_last_timestamp = timestamp;\r\n    }\r\n\r\n    // we will return mixed audio of MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms (or more)\r\n    // corresponding to MIN_TWILIO_CHUNKS_TO_MIX = 20 twilio media messages (or more)\r\n    let minimum_chunk_size = MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS;\r\n    let mixable_data_size = std::cmp::min(\r\n        buffer_data.inbound_buffer.len(),\r\n        buffer_data.outbound_buffer.len(),\r\n    );\r\n    if mixable_data_size >= minimum_chunk_size {\r\n        let mut mixed = Vec::with_capacity(mixable_data_size * 2);\r\n        let inbound_buffer_segment = buffer_data.inbound_buffer.drain(0..mixable_data_size);\r\n        let outbound_buffer_segment = buffer_data.outbound_buffer.drain(0..mixable_data_size);\r\n\r\n        for (inbound, outbound) in inbound_buffer_segment.zip(outbound_buffer_segment) {\r\n            mixed.push(inbound);\r\n            mixed.push(outbound);\r\n        }\r\n        Some(mixed)\r\n    } else {\r\n        None\r\n    }\r\n}\r\n```\r\n\r\nTwilio sends its audio data as 8000 Hz `mulaw` data, independently for inbound and outbound callers. Additionally, sometimes Twilio\r\n(or the phones which use Twilio) will drop packets of audio. The function `process_twilio_media`, then, handles inserting silence\r\nshould there be dropped packets or timing issues, and mixes together the inbound and outbound audio into a valid stereo audio stream\r\nwhich we can then send to Deepgram. Several of the finer details are explained in the comments in this file.\r\n\r\n## Running the Server and Testing with websocat\r\n\r\nLet\'s use websocat to quickly test our server.\r\n\r\nRun the server with the following:\r\n\r\n    DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY cargo run\r\n\r\nreplacing `INSERT_YOUR_DEEPGRAM_API_KEY` with your Deepgram API Key.\r\n\r\nThis server will need to be accessible to Twilio, and this is set up in the TwiML Bin you created in the previous [Setting Up a TwiML Bin](#setting-up-a-twiml-bin) section. If you are using `ngrok`, make sure your TwiML Bin\r\nis updated with the current `ngrok` URL.\r\n\r\nNow, call your Twilio number with one phone, and answer the call on the phone your Twilio number forwards to.\r\nThen, latch onto the proxy server via the client endpoint with websocat:\r\n```\r\nwebsocat ws://localhost:5000/client\r\n```\r\nWebsocat should immediately send you a message containing a list of the `callsid`s of all active calls (which in this case should be one).\r\nReply to the message with the `callsid` by copy/pasting and hitting enter:\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/connect_to_callsid.png" alt="Subscribe to the call via the `callsid`." style="display: block;margin-left: auto;margin-right: auto;">\r\n\r\nYou should start to see transcription results appear in your websocat session in real time:\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/websocat_streaming_asr_results.png" alt="Websocat streaming ASR results." style="display: block;margin-left: auto;margin-right: auto;">\r\n\r\nFeel free to try setting up multiple Twilio numbers, and multiple client sessions!\r\n\r\n## Making a Docker Image for the Server\r\n\r\nLet\'s go through the process of building a Docker image so that this server can be portably deployed. We\'ll start by making a `rust-toolchain` file with the following contents:\r\n\r\n    1.61\r\n\r\n(quite the simple file!). This will ensure that when you run `cargo build` (either manually, or as part of building a Docker image), the same version of Rust will be used\r\nevery time.\r\n\r\nNow, let\'s create a Dockerfile called `Dockerfile` and give it the following contents:\r\n```\r\nFROM ubuntu:22.04 as builder\r\n\r\nLABEL maintainer="YOUR_INFO"\r\n\r\nENV DEBIAN_FRONTEND=noninteractive\r\n\r\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n        ca-certificates \\\r\n        clang \\\r\n        curl \\\r\n        libpq-dev \\\r\n        libssl-dev \\\r\n        pkg-config\r\n\r\nCOPY rust-toolchain /rust-toolchain\r\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(cat /rust-toolchain) && \\\r\n    . $HOME/.cargo/env\r\n\r\nCOPY . /deepgram-twilio-streaming-rust\r\n\r\nRUN . $HOME/.cargo/env && \\\r\n    cargo install --path /deepgram-twilio-streaming-rust --root /\r\n\r\nFROM ubuntu:22.04\r\n\r\nLABEL maintainer="YOUR_INFO"\r\n\r\nENV DEBIAN_FRONTEND=noninteractive\r\n\r\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n        ca-certificates \\\r\n        libpq5 \\\r\n        libssl3 && \\\r\n    apt-get clean\r\n\r\nCOPY --from=builder /bin/deepgram-twilio-streaming-rust /bin/deepgram-twilio-streaming-rust\r\n\r\nENTRYPOINT ["/bin/deepgram-twilio-streaming-rust"]\r\nCMD [""]\r\n```\r\n\r\nReplace `YOUR_INFO` with your name and email address (for me, for example, this would be `Nikola Whallon <nikola@deepgram.com>`).\r\nThe key bits to take away are:\r\n\r\n*   we start with an Ubuntu 22.04 image\r\n*   we install several dependencies via `apt`\r\n*   we use the `rust-toolchain` and build+install our executable with `cargo install`\r\n*   we set the `ENTRYPOINT` to `/bin/deepgram-twilio-streaming-rust`, with no command-line arguments (`CMD`)\r\n\r\nNow with the Dockerfile written, build the Docker image with:\r\n\r\n```\r\ndocker build -t your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0 -f Dockerfile .\r\n```\r\nIf you will be pushing this image to Docker Hub so that the image can be pulled from a remote server (like an AWS instance),\r\nreplace `your-docker-hub-account` with your Docker Hub account. For local testing, simply using the image name `deepgram-twilio-streaming-rust:0.1.0`\r\n(or whatever you would like) will work. You are also free to pull and use `deepgram/deepgram-twilio-treaming-rust:0.1.0`!\r\n\r\nNow you can run the Docker image in a container locally via:\r\n```\r\ndocker run -e PROXY_URL=0.0.0.0:5000 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\\r\n    -p 5000:5000 your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0\r\n```\r\nreplacing `INSERT_YOUR_DEEPGRAM_API_KEY` with your Deepgram API Key, and make sure the Docker image name matches what you built. This will\r\nrun the image in a container in your current terminal, but you can include a `-d` to detach the process to run in the background. If you do this,\r\nyou will need to keep track of whether or not it is running with `docker ps` and similar commands.\r\n\r\nRefer to the [Docker CLI documentation](https://docs.docker.com/engine/reference/commandline/cli/) for more info.\r\n\r\nNow that the Twilio proxy server should be running in a Docker container, feel free to give your Twilio number a call, and subscribe to the call\r\nwith websocat by doing:\r\n\r\n```\r\n websocat ws://localhost:5000/client\r\n```\r\nand replying to the server with the `callsid` it sends you.\r\n\r\nYou should be all set to push this Docker image to your Docker Hub (or use ours: `deepgram/deepgram-twilio-treaming-rust:0.1.0`), and pull\r\nand use it on your cloud server! You will need to provide the additional environment variables `CERT_PEM` and `KEY_PEM` to do this, making\r\nsure those files are accessible to the Docker continer by using `-v`, and you may need to specify\r\nthe port as `443` in the `PROXY_URL` and use `-p 443:443` among other subtle changes.\r\nYou should refer to your cloud server provider\'s documentation on setting up an https/wss enabled server with certificates. As an example,\r\nhere\'s how I spun up the server app on an AWS Ubuntu 20.04 instance:\r\n\r\n```\r\ndocker run -v /home/ubuntu:/foo -p 443:443 -d \\\r\n    -e PROXY_URL=0.0.0.0:443 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\\r\n    -e CERT_PEM=/foo/cert.pem -e KEY_PEM=/foo/key.pem \\\r\n    deepgram/deepgram-twilio-streaming-rust:0.1.0\r\n```\r\n## Further Development\r\n\r\nThis should get you up and running with an almost-production-ready Twilio-Deepgram proxy server, written in Rust. There are a few pieces\r\nthat have been left out, for the sake of brevity and for the sake of being agnostic to the needs of your desired system. For example, calls to the\r\n`/client` endpoint are currently entirely unauthenticated, and indeed calls to `/twilio` are also unauthenticated (see\r\n[these Twilio docs](https://www.twilio.com/docs/usage/security) for more details). For a fully-production-ready service, you should\r\ntake authentication into consideration. Also, no logging or telemetry is presented in the proxy server.\r\n\r\nFinally, you will very likely need to build a front-end to interact with the server and properly parse the JSON messages being streamed.\r\nwebsocat is great for testing, but is not a reasonable final solution for subscribing to calls!\r\n\r\nIf you have any questions, please feel free to reach out on Twitter - we\'re [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ', "html": '<p>In a <a href="https://blog.deepgram.com/deepgram-twilio-streaming/">previous blog post</a>, we showed how to build an integration\r\nbetween Deepgram and Twilio for real-time, live transcription using Python. In this post, we will revisit this integration and implement\r\nit in Rust. The <a href="https://www.rust-lang.org/">Rust programming language</a> is a favorite among Deepgram engineers, and is known for its\r\ntype safety, performance, and powerful memory management achieved via a strict ownership system which eliminates entire categories of bugs!</p>\n<p>We will be building our Twilio streaming app using the <a href="https://docs.rs/axum/latest/axum/">Axum web framework</a>\r\nwhich is built on top of the powerful and popular asynchronous <a href="https://tokio.rs/">Tokio crate</a>. Using Rust with\r\nan efficient asynchronous runtime like Tokio is a good choice for reliable and performant web app backends.</p>\n<h2 id="pre-requisites">Pre-requisites</h2>\n<p>You will need:</p>\n<ul>\n<li>a <a href="https://www.twilio.com/try-twilio">Twilio account</a> with a Twilio number (the free tier will work)</li>\n<li>a Deepgram API Key - <a href="https://console.deepgram.com/signup">get an API Key here</a></li>\n<li><a href="https://www.rust-lang.org/tools/install">Rust installed</a></li>\n<li><em>(optional)</em> <a href="https://ngrok.com/">ngrok</a> to let Twilio access a local server</li>\n</ul>\n<h2 id="setting-up-a-twiml-bin">Setting Up a TwiML Bin</h2>\n<p>We will use TwiML Bins to make Twilio fork audio data from phone calls to a server that we will write.\r\nIn the Twilio Console, search for TwiML Bin, and click \u201CCreate TwiML Bin.\u201D</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025616/blog/2022/06/deepgram-twilio-streaming-rust/assets/find_twiml_bin.png" alt="Navigate to your TwiML Bins." style="max-width: 606px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Give the TwiML Bin a \u201CFriendly Name\u201D and enter the following as the the contents of the TwiML Bin:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;?</span><span style="color: #7EE787">xml</span><span style="color: #79C0FF"> version</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;1.0&quot;</span><span style="color: #79C0FF"> encoding</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9">?&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">Response</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Start</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">Stream</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;wss://INSERT_YOUR_SERVER_URL/twilio&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">track</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;both_tracks&quot;</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">Start</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Say</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">voice</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;woman&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">language</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;&quot;This call may be monitored or recorded for quality purposes.&quot;&lt;/</span><span style="color: #7EE787">Say</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Dial</span><span style="color: #C9D1D9">&gt;+11231231234&lt;/</span><span style="color: #7EE787">Dial</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">Response</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In the <code is:raw>Dial</code> section, enter your phone number. Where it says <code is:raw>INSERT_YOUR_SERVER_URL</code> insert the URL where you will be hosting the server.\r\nWithout having to spin up and configure a cloud instance, you can use <code is:raw>ngrok</code> to expose a port on localhost. To do this for, say,\r\nport 5000, run:</p>\n<p>ngrok http 5000</p>\n<p><code is:raw>ngrok</code> will then generate a public URL which forwards requests to your computer at <code is:raw>localhost:5000</code>. This URL may look something like:\r\n<code is:raw>c52e-71-212-124-133.ngrok.io</code> - enter this URL in your TwiML Bin.</p>\n<p>Now the last thing to do on the Twilio Console before hopping over to write our server code is to hook up one of your Twilio numbers to this TwiML Bin.\r\nGo to the \u201CDevelop\u201D tab on the left side of the Twilio Console, navigate to <code is:raw>Phone Numbers -&gt; Manage -&gt; Active numbers</code>, and click on your Twilio number in the list.\r\nThen, under the field \u201CA Call Comes In\u201D, click the drop-down and select \u201CTwiML Bin\u201D; for the field directly next to this one, click the drop-down and select\r\nthe TwiML Bin you just created.\r\nClick \u201CSave\u201D at the bottom of the Twilio Console.</p>\n<h2 id="the-twilio-proxy-server">The Twilio Proxy Server</h2>\n<p>The system that we will be building is illustrated here:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025618/blog/2022/06/deepgram-twilio-streaming-rust/assets/deepgram_twilio_diagram.png" alt="The big picture." style="display: block;margin-left: auto;margin-right: auto;" />\n<p>We want audio from phone calls going through Twilio\u2019s server to be forked to the proxy server we will be writing. The proxy server then buffers\r\nand processes the audio, sends it to Deepgram, and receives transcripts back from Deepgram. The proxy server also accepts client connections which\r\nsubscribe to ongoing calls, and whenever the server receives transcripts from Deepgram for those calls, it broadcasts those transcripts to all subscribers.\r\nThis will all be done via WebSockets at near-real-time! Typical latencies for this system hover around 500 ms.</p>\n<p>Download the code from <a href="https://github.com/deepgram-devs/deepgram-twilio-streaming-rust">this repository</a>.</p>\n<p>Below we will go through creating this project from scratch, but this will also act as a comprehensive code-tour of the repository.\r\nIf you are keen on trying the server out right away and perusing the code\r\nmore at your leisure, feel free to skip to the <a href="#running-the-server-and-testing-with-websocat">Running the Server and Testing with websocat</a> section!</p>\n<h2 id="setup-the-rust-project-and-mainrs">Setup the Rust Project and <code is:raw>main.rs</code></h2>\n<p>Create a new Rust project using <code is:raw>cargo new</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cargo new deepgram-twilio-streaming-rust</span></span></code></pre>\n<p>Go into the project directory and edit the <code is:raw>Cargo.toml</code> file, giving it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span><span style="color: #FFA657">package</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">name = </span><span style="color: #A5D6FF">&quot;deepgram-twilio-streaming-rust&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">version = </span><span style="color: #A5D6FF">&quot;0.1.0&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">edition = </span><span style="color: #A5D6FF">&quot;2021&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">[</span><span style="color: #FFA657">dependencies</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">axum = { version = </span><span style="color: #A5D6FF">&quot;0.5.1&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;ws&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">axum-server = { version = </span><span style="color: #A5D6FF">&quot;0.4.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;tls-rustls&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">base64 = </span><span style="color: #A5D6FF">&quot;0.13.0&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">futures = </span><span style="color: #A5D6FF">&quot;0.3.21&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">http = </span><span style="color: #A5D6FF">&quot;0.2.6&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">serde = { version = </span><span style="color: #A5D6FF">&quot;1.0.136&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;derive&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">serde_json = </span><span style="color: #A5D6FF">&quot;1.0.79&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">tokio = { version = </span><span style="color: #A5D6FF">&quot;1.17.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;macros&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rt&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rt-multi-thread&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">tokio-tungstenite = { version = </span><span style="color: #A5D6FF">&quot;0.15.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;native-tls&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">tungstenite = </span><span style="color: #A5D6FF">&quot;0.14.0&quot;</span></span></code></pre>\n<p>Now let\u2019s modify <code is:raw>src/main.rs</code>. Let\u2019s begin by adding the <code is:raw>use</code> statements we will need, and defining some modules:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">routing</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">get, </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Router</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tls_rustls</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">RustlsConfig</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">lock</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">collections</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">handlers</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">state</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio_response</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>The modules we declared are: <code is:raw>audio</code>, <code is:raw>handlers</code>, <code is:raw>message</code>, <code is:raw>state</code>, and <code is:raw>twilio_response</code>.\r\nWe will go over each one, but briefly these will be for the following:</p>\n<ul>\n<li><code is:raw>audio</code>: handle processing of audio data from Twilio</li>\n<li><code is:raw>handlers</code>: handlers for the websocket endpoints <code is:raw>/twilio</code> and <code is:raw>/client</code></li>\n<li><code is:raw>message</code>: a helper module to convert between <code is:raw>axum</code> and <code is:raw>tungstenite</code> websocket messages</li>\n<li><code is:raw>state</code>: will contain the definition for the global state of the server</li>\n<li><code is:raw>twilio_response</code>: will contain definitions for Twilio\u2019s websocket message shape</li>\n</ul>\n<p>Now, let\u2019s start defining our <code is:raw>main</code> function and set up the state to be shared among the handlers:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">#[tokio</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">main]</span></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> proxy_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PROXY_URL&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap_or_else</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">_</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;127.0.0.1:5000&quot;</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> deepgram_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_URL&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap_or_else</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">_</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;wss://api.deepgram.com/v1/listen?encoding=mulaw&amp;sample_rate=8000&amp;channels=2&amp;multichannel=true&quot;</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> api_key </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Using this server requires a Deepgram API Key.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> cert_pem </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;CERT_PEM&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">ok</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> key_pem </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;KEY_PEM&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">ok</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> config </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> (cert_pem, key_pem) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        (</span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(cert_pem), </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(key_pem)) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">RustlsConfig</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from_pem_file</span><span style="color: #C9D1D9">(cert_pem, key_pem)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to make RustlsConfig from cert/key pem files.&quot;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        ),</span></span>\n<span class="line"><span style="color: #C9D1D9">        (</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        _ </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">panic!</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to start - invalid cert/key.&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> state </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgram_url,</span></span>\n<span class="line"><span style="color: #C9D1D9">        api_key,</span></span>\n<span class="line"><span style="color: #C9D1D9">        subscribers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Mutex</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">HashMap</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">()),</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span></code></pre>\n<p>Our <code is:raw>main</code> function is set up to be asynchronous via the use of the <code is:raw>#[tokio::main]</code> macro.\r\n<code is:raw>main</code> and every async function that <code is:raw>main</code> then calls will be executed by\r\nthe Tokio runtime. Inside <code is:raw>main</code> we grab the following environment variables:</p>\n<ul>\n<li><code is:raw>PROXY_URL</code>: the URL that this server will run on - by default it will use localhost and port 5000</li>\n<li><code is:raw>DEEPGRAM_URL</code>: the URL of Deepgram\u2019s streaming endpoint, including query parameters (Twilio audio uses the <code is:raw>mulaw</code> encoding with\r\na sample rate of 8000, and we will be streaming stereo (2 channel) audio)</li>\n<li><code is:raw>DEEPGRAM_API_KEY</code>: your Deepgram API Key</li>\n<li><code is:raw>CERT_PEM</code>: an optional environment variable pointing to a <code is:raw>cert.pem</code> file used for TLS</li>\n<li><code is:raw>KEY_PEM</code>: an optional environment variable pointing to a <code is:raw>key.pem</code> file used for TLS</li>\n</ul>\n<p>We use these environment variables to construct an <code is:raw>Arc&lt;State&gt;</code> object to store the global server state.</p>\n<p>Now, let\u2019s finish filling in our <code is:raw>main</code> function by configuring our routes and spinning up the <code is:raw>axum</code> server to serve these routes:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Router</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/twilio&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">handlers</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">twilio</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">twilio_handler))</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/client&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">handlers</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">subscriber</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">subscriber_handler))</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">layer</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> config {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(config) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">bind_rustls</span><span style="color: #C9D1D9">(proxy_url</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">(), config)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">serve</span><span style="color: #C9D1D9">(app</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into_make_service</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">bind</span><span style="color: #C9D1D9">(proxy_url</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">serve</span><span style="color: #C9D1D9">(app</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into_make_service</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The <code is:raw>axum</code> server is spun up with or without TLS support depending on whether\r\nor not the <code is:raw>CERT_PEM</code> and <code is:raw>KEY_PEM</code> environment variables are set.</p>\n<p>That\u2019s all there is to <code is:raw>main.rs</code>! The bulk of the application logic will live in the websocket endpoint handlers, but before diving into them\r\nlet\u2019s go over some of the objects the server will use.</p>\n<h2 id="staters-twilio_responsers-and-messagers"><code is:raw>state.rs</code>, <code is:raw>twilio_response.rs</code>, and <code is:raw>message.rs</code></h2>\n<p>Create the file <code is:raw>src/state.rs</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">lock</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">collections</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">State</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> deepgram_url</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> api_key</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">&gt;&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This will represent the global state of the server. The server will need to know the URL of Deepgram\u2019s streaming endpoint and a Deepgram API Key to use as authentication when connecting to this endpoint. Additionally, the server will contain\r\na <code is:raw>HashMap</code> of websocket handlers for subscribers, one for each incoming connection from Twilio. These websocket handlers will be accessed\r\nvia the <code is:raw>callsid</code> of the Twilio call, and wrapped in a <code is:raw>Mutex</code> to handle concurrency.</p>\n<p>Next, create the file <code is:raw>src/twilio_response.rs</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">    //! Definitions for the Twilio messages we need to parse</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">serde</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Event</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> sequence_number</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    #[serde(flatten)]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> event_type</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> stream_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">enum</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Start</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">EventStart</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">default</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Default</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">default</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventStart</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> account_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> stream_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> call_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> tracks</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> media_format</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">MediaFormat</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">MediaFormat</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> encoding</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> sample_rate</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> channels</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> track</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> chunk</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> payload</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>These are just basic structs defining the shape of the messages Twilio will send our server. Feel free to checkout\r\n<a href="https://www.twilio.com/docs/voice/twiml/stream#websocket-messages-from-twilio">Twilio\u2019s documentation</a> for more details.</p>\n<p>Finally, create the file <code is:raw>src/message.rs</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Clone</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">enum</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">protocol</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">CloseFrame</span><span style="color: #C9D1D9">&lt;&#39;</span><span style="color: #FFA657">static</span><span style="color: #C9D1D9">&gt;&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">extract</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This is also a straightforward module which creates our own websocket <code is:raw>Message</code> type which can\r\nbe used to convert to and from <code is:raw>axum</code> websocket messages and <code is:raw>tungstenite</code> websocket messages.</p>\n<h2 id="the-websocket-endpoint-handlers">The WebSocket Endpoint Handlers</h2>\n<p>Now let\u2019s get into the core logic of the server. We need to define functions to handle client/subscriber\r\nconnections to <code is:raw>/client</code> and Twilio connections to <code is:raw>/twilio</code>. Let\u2019s start with the client handler.</p>\n<p>Start by creating <code is:raw>src/handlers/mod.rs</code> with the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">subscriber</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>This simply declares the modules we will use to handle the client/subsriber and Twilio websocket connections.</p>\n<p>Then, create the file <code is:raw>src/handlers/subscriber.rs</code> with the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">message</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">subscriber_handler</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state)</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">on_upgrade</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">socket</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket, state))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">    // send these keys (which will be twilio callsids) to the client</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> keys </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">keys</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">key</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> key</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">collect</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    socket</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(keys)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to send callsids to client.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // wait for the first message from the client</span></span>\n<span class="line"><span style="color: #8B949E">    // and interpret it as the callsid to subscribe to</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">recv</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> msg </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(callsid) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> msg {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">get_mut</span><span style="color: #C9D1D9">(callsid) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(socket);</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>As we saw in <code is:raw>main.rs</code>, <code is:raw>subscriber_handler</code> is the function which will be called when a client tries to connect to the\r\n<code is:raw>/client</code> endpoint of our server. From there, we perform an upgrade from HTTP to websockets. Then, we try to obtain the\r\nsubscribers <code is:raw>HashMap</code> from our server\u2019s global state and send to the client a list of the <code is:raw>callsid</code>s of all ongoing\r\nTwilio calls that the server is handling. The server then waits for a single message back from the client, and it interprets\r\nthis message as the <code is:raw>callsid</code> to subscribe to. If the server receives a valid <code is:raw>callsid</code>, it will push the websocket handle\r\ninto the subscribers <code is:raw>HashMap</code>. When the Twilio handler receives a transcript for that <code is:raw>callsid</code>, it will broadcast it to all\r\nsubscribers, including the one we just pushed. That\u2019s it for <code is:raw>subscriber.rs</code>!</p>\n<p>Now let\u2019s look at the bulkier <code is:raw>twilio.rs</code>. Create <code is:raw>src/handlers/twilio.rs</code>. Let\u2019s build this module\r\npiece by piece, starting with some <code is:raw>use</code> statements:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">audio;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">message</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">twilio_response;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">channel</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">oneshot;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">sink</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">SinkExt</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">stream</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">SplitSink</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">StreamExt</span><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">convert</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">net</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{connect_async, </span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA657">Then</span><span style="color: #C9D1D9">, add the following functions</span><span style="color: #FF7B72">:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">twilio_handler</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state)</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">on_upgrade</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">socket</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket, state))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (_this_sender, this_receiver) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // prepare the connection request with the api key authentication</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> builder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">http</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Request</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">builder</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">method</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">http</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Method</span><span style="color: #FF7B72">::</span><span style="color: #79C0FF">GET</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">uri</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">deepgram_url);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> builder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> builder</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">header</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Authorization&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">format!</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Token {}&quot;</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">api_key));</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> request </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> builder</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">body</span><span style="color: #C9D1D9">(())</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to build a connection request to Deepgram.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // connect to deepgram</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (deepgram_socket, _) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_async</span><span style="color: #C9D1D9">(request)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to connect to Deepgram.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (deepgram_sender, deepgram_reader) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram_socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (callsid_tx, callsid_rx) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">channel</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">spawn</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">handle_to_subscribers</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state),</span></span>\n<span class="line"><span style="color: #C9D1D9">        callsid_rx,</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgram_reader,</span></span>\n<span class="line"><span style="color: #C9D1D9">    ));</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">spawn</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">handle_from_twilio</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state),</span></span>\n<span class="line"><span style="color: #C9D1D9">        callsid_tx,</span></span>\n<span class="line"><span style="color: #C9D1D9">        this_receiver,</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgram_sender,</span></span>\n<span class="line"><span style="color: #C9D1D9">    ));</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Incoming Twilio connections hitting <code is:raw>/twilio</code> will be first directed to the function\r\n<code is:raw>twilio_handler</code> where the websocket upgrade will be performed. Then <code is:raw>handle_socket</code> will split the websocket connection\r\ninto a receiver and a sender, open up an entirely new websocket connection to Deepgram, split the Deepgram websocket\r\nconnection into a receiver and a sender, and spawn tasks which call the functions <code is:raw>handle_to_subscribers</code> and\r\n<code is:raw>handle_from_twilio</code> which take these receivers and senders as arguments. A oneshot channel is also set up so that\r\n<code is:raw>handle_from_twilio</code> can send the <code is:raw>callsid</code> of the Twilio call to <code is:raw>handle_to_subscribers</code> in a thread-safe manner -\r\nthe <code is:raw>callsid</code> is not yet known when these initial websocket connections are established, it only becomes available\r\nwhen Twilio sends this information in a Twilio <code is:raw>start</code> event websocket message.</p>\n<p>Let\u2019s now define the <code is:raw>handle_to_subscribers</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_to_subscribers</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    callsid_rx</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Receiver</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> deepgram_receiver</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">&gt;&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid_rx</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to receive callsid from handle_from_twilio.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram_receiver</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">get_mut</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">callsid) {</span></span>\n<span class="line"><span style="color: #8B949E">            // send the message to all subscribers concurrently</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> futs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">iter_mut</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">subscriber</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> subscriber</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">()));</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">future</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">join_all</span><span style="color: #C9D1D9">(futs)</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">            // if we successfully sent a message then the subscriber is still connected</span></span>\n<span class="line"><span style="color: #8B949E">            // other subscribers should be removed</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9">subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">zip</span><span style="color: #C9D1D9">(results)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">filter_map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">(subscriber, result)</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> result</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">is_ok</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> subscriber))</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">collect</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function first waits to receive the <code is:raw>callsid</code>\r\nfrom <code is:raw>handle_from_twilio</code> and then proceeds to read messages off the Deepgram websocket receiver, broadcasting all\r\nmessages that it obtains to all subscribers to that <code is:raw>callsid</code>.</p>\n<p>Now let\u2019s define <code is:raw>handle_from_twilio</code> as follows:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_from_twilio</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    callsid_tx</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Sender</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> this_receiver</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> deepgram_sender</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitSink</span><span style="color: #C9D1D9">&lt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">        tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    &gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> buffer_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        inbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">        outbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">        inbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        outbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // wrap our oneshot in an Option because we will need it in a loop</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> callsid_tx </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid_tx);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> callsid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> this_receiver</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> msg </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(msg) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> msg {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Result</span><span style="color: #C9D1D9">&lt;twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Event</span><span style="color: #C9D1D9">, _&gt; </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">serde_json</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from_str</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">msg);</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(event) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">event_type {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Start</span><span style="color: #C9D1D9">(start) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #8B949E">                        // the &quot;start&quot; event only happens once, so having our oneshot in here is kosher</span></span>\n<span class="line"><span style="color: #C9D1D9">                        callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">                        // sending this callsid on our oneshot will let `handle_to_subscribers` know the callsid</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid_tx) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid_tx</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">take</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">                            callsid_tx</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to send callsid to handle_to_subscribers.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">                        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">                        // make a new set of subscribers for this call, using the callsid as the key</span></span>\n<span class="line"><span style="color: #C9D1D9">                        state</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">entry</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid)</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">or_default</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">                    }</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(media) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(mixed) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">process_twilio_media</span><span style="color: #C9D1D9">(media, </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data) {</span></span>\n<span class="line"><span style="color: #8B949E">                            // send the audio on to deepgram</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> deepgram_sender</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(mixed)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">is_err</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">                            {</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">break</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">                            }</span></span>\n<span class="line"><span style="color: #C9D1D9">                        }</span></span>\n<span class="line"><span style="color: #C9D1D9">                    }</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // close and remove the subscribers, if we have a callsid</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">callsid) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscriber </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> subscribers {</span></span>\n<span class="line"><span style="color: #8B949E">                // we don&#39;t really care if this succeeds or fails as we are closing/dropping these</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> _ </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscriber</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function begins by setting up an object to help handle the audio buffers\r\nfrom the inbound and outbound callers. We then start reading websocket messages from the Twilio websocket receiver.\r\nWhen we obtain the Twilio <code is:raw>start</code> event message, we can grab the <code is:raw>callsid</code>, use it to set up subscribers\r\nto this call, and send it off to the <code is:raw>handle_to_subscribers</code> task via the oneshot channel we set up earlier. Subsequent\r\nTwilio media events are then processed via <code is:raw>audio::process_twilio_media</code>, and when a buffer of mixed stereo audio is\r\nready, we send it to Deepgram via the Deepgram websocket sender.</p>\n<p>Finally, when Twilio closes the connection to our server (or some error occurs), we must remember to remove all subscribers\r\nfrom the subscriber <code is:raw>HashMap</code> and close the connections to those subscribers.</p>\n<h2 id="processing-the-audio-in-audiors">Processing the Audio in <code is:raw>audio.rs</code></h2>\n<p>When discussing the Twilio websocket handler, the processing of Twilio media events was delegated to <code is:raw>audio::process_twilio_media</code>.\r\nWe will define this function in <code is:raw>src/audio.rs</code>. Make <code is:raw>src/audio.rs</code> with the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">twilio_response;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_SILENCE</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0xff</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">8</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MIN_TWILIO_CHUNKS_TO_MIX</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> inbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> outbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> inbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> outbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;, current_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">, previous_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> time_lost </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> current_timestamp </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> previous_timestamp </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #8B949E">        // here we have received a timestamp that is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous timestamp</span></span>\n<span class="line"><span style="color: #8B949E">        // this occasionally occurs and is unexpected behavior from Twilio</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        current_timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> (previous_timestamp </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> silence </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">iter</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">repeat</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">MULAW_SILENCE</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">take</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> time_lost </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(silence);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">/// (1) decodes twilio media events</span></span>\n<span class="line"><span style="color: #8B949E">/// (2) pads inbound and outbound buffers with silence if needed</span></span>\n<span class="line"><span style="color: #8B949E">/// (3) if there is more than MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms</span></span>\n<span class="line"><span style="color: #8B949E">///     of audio in both inbound and outbound audio buffers, drains as much audio from</span></span>\n<span class="line"><span style="color: #8B949E">///     both buffers as can be mixed together, mixes and returns this audio</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">process_twilio_media</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    media</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;&gt; {</span></span>\n<span class="line"><span style="color: #8B949E">    // NOTE: when Twilio sends media data, it should send TWILIO_MS_PER_CHUNK = 20 ms audio chunks</span></span>\n<span class="line"><span style="color: #8B949E">    // at a time, where each ms of audio is MULAW_BYTES_PER_MS = 8 bytes</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> media_chunk </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">base64</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">decode</span><span style="color: #C9D1D9">(media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">payload)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> media_chunk_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> media_chunk</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media_chunk_size </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #8B949E">        // here, the Twilio media chunk size is not the expected size of TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS bytes</span></span>\n<span class="line"><span style="color: #8B949E">        // this occasionally occurs and is unexpected behavior from Twilio</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #8B949E">    // NOTE: There are rare cases where the timestamp is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous chunk</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">timestamp</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">&gt;()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // pad the inbound or outbound buffer with silence if needed depending on timestamp info</span></span>\n<span class="line"><span style="color: #8B949E">    // and then add the audio data from the twilio media message to the buffer</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">track </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;inbound&quot;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer,</span></span>\n<span class="line"><span style="color: #C9D1D9">            timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">            buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_last_timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">        );</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(media_chunk);</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_last_timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp;</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">track </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;outbound&quot;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer,</span></span>\n<span class="line"><span style="color: #C9D1D9">            timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">            buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_last_timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">        );</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(media_chunk);</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_last_timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // we will return mixed audio of MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms (or more)</span></span>\n<span class="line"><span style="color: #8B949E">    // corresponding to MIN_TWILIO_CHUNKS_TO_MIX = 20 twilio media messages (or more)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> minimum_chunk_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MIN_TWILIO_CHUNKS_TO_MIX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> mixable_data_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">cmp</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">min</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">    );</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> mixable_data_size </span><span style="color: #FF7B72">&gt;=</span><span style="color: #C9D1D9"> minimum_chunk_size {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> mixed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">with_capacity</span><span style="color: #C9D1D9">(mixable_data_size </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> inbound_buffer_segment </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">mixable_data_size);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> outbound_buffer_segment </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">mixable_data_size);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (inbound, outbound) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> inbound_buffer_segment</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">zip</span><span style="color: #C9D1D9">(outbound_buffer_segment) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            mixed</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(inbound);</span></span>\n<span class="line"><span style="color: #C9D1D9">            mixed</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(outbound);</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(mixed)</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">None</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Twilio sends its audio data as 8000 Hz <code is:raw>mulaw</code> data, independently for inbound and outbound callers. Additionally, sometimes Twilio\r\n(or the phones which use Twilio) will drop packets of audio. The function <code is:raw>process_twilio_media</code>, then, handles inserting silence\r\nshould there be dropped packets or timing issues, and mixes together the inbound and outbound audio into a valid stereo audio stream\r\nwhich we can then send to Deepgram. Several of the finer details are explained in the comments in this file.</p>\n<h2 id="running-the-server-and-testing-with-websocat">Running the Server and Testing with websocat</h2>\n<p>Let\u2019s use websocat to quickly test our server.</p>\n<p>Run the server with the following:</p>\n<p>DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY cargo run</p>\n<p>replacing <code is:raw>INSERT_YOUR_DEEPGRAM_API_KEY</code> with your Deepgram API Key.</p>\n<p>This server will need to be accessible to Twilio, and this is set up in the TwiML Bin you created in the previous <a href="#setting-up-a-twiml-bin">Setting Up a TwiML Bin</a> section. If you are using <code is:raw>ngrok</code>, make sure your TwiML Bin\r\nis updated with the current <code is:raw>ngrok</code> URL.</p>\n<p>Now, call your Twilio number with one phone, and answer the call on the phone your Twilio number forwards to.\r\nThen, latch onto the proxy server via the client endpoint with websocat:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">websocat ws://localhost:5000/client</span></span></code></pre>\n<p>Websocat should immediately send you a message containing a list of the <code is:raw>callsid</code>s of all active calls (which in this case should be one).\r\nReply to the message with the <code is:raw>callsid</code> by copy/pasting and hitting enter:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/connect_to_callsid.png" alt="Subscribe to the call via the `callsid`." style="display: block;margin-left: auto;margin-right: auto;" />\n<p>You should start to see transcription results appear in your websocat session in real time:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/websocat_streaming_asr_results.png" alt="Websocat streaming ASR results." style="display: block;margin-left: auto;margin-right: auto;" />\n<p>Feel free to try setting up multiple Twilio numbers, and multiple client sessions!</p>\n<h2 id="making-a-docker-image-for-the-server">Making a Docker Image for the Server</h2>\n<p>Let\u2019s go through the process of building a Docker image so that this server can be portably deployed. We\u2019ll start by making a <code is:raw>rust-toolchain</code> file with the following contents:</p>\n<p>1.61</p>\n<p>(quite the simple file!). This will ensure that when you run <code is:raw>cargo build</code> (either manually, or as part of building a Docker image), the same version of Rust will be used\r\nevery time.</p>\n<p>Now, let\u2019s create a Dockerfile called <code is:raw>Dockerfile</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">FROM ubuntu:22.04 as builder</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">LABEL maintainer=&quot;YOUR_INFO&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">ENV DEBIAN_FRONTEND=noninteractive</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">RUN apt-get update &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    apt-get install -y --no-install-recommends \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        ca-certificates \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        clang \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        curl \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libpq-dev \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libssl-dev \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        pkg-config</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">COPY rust-toolchain /rust-toolchain</span></span>\n<span class="line"><span style="color: #c9d1d9">RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(cat /rust-toolchain) &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    . $HOME/.cargo/env</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">COPY . /deepgram-twilio-streaming-rust</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">RUN . $HOME/.cargo/env &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    cargo install --path /deepgram-twilio-streaming-rust --root /</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">FROM ubuntu:22.04</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">LABEL maintainer=&quot;YOUR_INFO&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">ENV DEBIAN_FRONTEND=noninteractive</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">RUN apt-get update &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    apt-get install -y --no-install-recommends \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        ca-certificates \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libpq5 \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libssl3 &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    apt-get clean</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">COPY --from=builder /bin/deepgram-twilio-streaming-rust /bin/deepgram-twilio-streaming-rust</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">ENTRYPOINT [&quot;/bin/deepgram-twilio-streaming-rust&quot;]</span></span>\n<span class="line"><span style="color: #c9d1d9">CMD [&quot;&quot;]</span></span></code></pre>\n<p>Replace <code is:raw>YOUR_INFO</code> with your name and email address (for me, for example, this would be <code is:raw>Nikola Whallon &lt;nikola@deepgram.com&gt;</code>).\r\nThe key bits to take away are:</p>\n<ul>\n<li>we start with an Ubuntu 22.04 image</li>\n<li>we install several dependencies via <code is:raw>apt</code></li>\n<li>we use the <code is:raw>rust-toolchain</code> and build+install our executable with <code is:raw>cargo install</code></li>\n<li>we set the <code is:raw>ENTRYPOINT</code> to <code is:raw>/bin/deepgram-twilio-streaming-rust</code>, with no command-line arguments (<code is:raw>CMD</code>)</li>\n</ul>\n<p>Now with the Dockerfile written, build the Docker image with:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker build -t your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0 -f Dockerfile .</span></span></code></pre>\n<p>If you will be pushing this image to Docker Hub so that the image can be pulled from a remote server (like an AWS instance),\r\nreplace <code is:raw>your-docker-hub-account</code> with your Docker Hub account. For local testing, simply using the image name <code is:raw>deepgram-twilio-streaming-rust:0.1.0</code>\r\n(or whatever you would like) will work. You are also free to pull and use <code is:raw>deepgram/deepgram-twilio-treaming-rust:0.1.0</code>!</p>\n<p>Now you can run the Docker image in a container locally via:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker run -e PROXY_URL=0.0.0.0:5000 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    -p 5000:5000 your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0</span></span></code></pre>\n<p>replacing <code is:raw>INSERT_YOUR_DEEPGRAM_API_KEY</code> with your Deepgram API Key, and make sure the Docker image name matches what you built. This will\r\nrun the image in a container in your current terminal, but you can include a <code is:raw>-d</code> to detach the process to run in the background. If you do this,\r\nyou will need to keep track of whether or not it is running with <code is:raw>docker ps</code> and similar commands.</p>\n<p>Refer to the <a href="https://docs.docker.com/engine/reference/commandline/cli/">Docker CLI documentation</a> for more info.</p>\n<p>Now that the Twilio proxy server should be running in a Docker container, feel free to give your Twilio number a call, and subscribe to the call\r\nwith websocat by doing:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9"> websocat ws://localhost:5000/client</span></span></code></pre>\n<p>and replying to the server with the <code is:raw>callsid</code> it sends you.</p>\n<p>You should be all set to push this Docker image to your Docker Hub (or use ours: <code is:raw>deepgram/deepgram-twilio-treaming-rust:0.1.0</code>), and pull\r\nand use it on your cloud server! You will need to provide the additional environment variables <code is:raw>CERT_PEM</code> and <code is:raw>KEY_PEM</code> to do this, making\r\nsure those files are accessible to the Docker continer by using <code is:raw>-v</code>, and you may need to specify\r\nthe port as <code is:raw>443</code> in the <code is:raw>PROXY_URL</code> and use <code is:raw>-p 443:443</code> among other subtle changes.\r\nYou should refer to your cloud server provider\u2019s documentation on setting up an https/wss enabled server with certificates. As an example,\r\nhere\u2019s how I spun up the server app on an AWS Ubuntu 20.04 instance:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker run -v /home/ubuntu:/foo -p 443:443 -d \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    -e PROXY_URL=0.0.0.0:443 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    -e CERT_PEM=/foo/cert.pem -e KEY_PEM=/foo/key.pem \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    deepgram/deepgram-twilio-streaming-rust:0.1.0</span></span></code></pre>\n<h2 id="further-development">Further Development</h2>\n<p>This should get you up and running with an almost-production-ready Twilio-Deepgram proxy server, written in Rust. There are a few pieces\r\nthat have been left out, for the sake of brevity and for the sake of being agnostic to the needs of your desired system. For example, calls to the\r\n<code is:raw>/client</code> endpoint are currently entirely unauthenticated, and indeed calls to <code is:raw>/twilio</code> are also unauthenticated (see\r\n<a href="https://www.twilio.com/docs/usage/security">these Twilio docs</a> for more details). For a fully-production-ready service, you should\r\ntake authentication into consideration. Also, no logging or telemetry is presented in the proxy server.</p>\n<p>Finally, you will very likely need to build a front-end to interact with the server and properly parse the JSON messages being streamed.\r\nwebsocat is great for testing, but is not a reasonable final solution for subscribing to calls!</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/deepgram-twilio-streaming-rust/index.md" };
function rawContent() {
  return '\r\nIn a [previous blog post](https://blog.deepgram.com/deepgram-twilio-streaming/), we showed how to build an integration\r\nbetween Deepgram and Twilio for real-time, live transcription using Python. In this post, we will revisit this integration and implement\r\nit in Rust. The [Rust programming language](https://www.rust-lang.org/) is a favorite among Deepgram engineers, and is known for its\r\ntype safety, performance, and powerful memory management achieved via a strict ownership system which eliminates entire categories of bugs!\r\n\r\nWe will be building our Twilio streaming app using the [Axum web framework](https://docs.rs/axum/latest/axum/)\r\nwhich is built on top of the powerful and popular asynchronous [Tokio crate](https://tokio.rs/). Using Rust with\r\nan efficient asynchronous runtime like Tokio is a good choice for reliable and performant web app backends.\r\n\r\n## Pre-requisites\r\n\r\nYou will need:\r\n\r\n*   a [Twilio account](https://www.twilio.com/try-twilio) with a Twilio number (the free tier will work)\r\n*   a Deepgram API Key - [get an API Key here](https://console.deepgram.com/signup)\r\n*   [Rust installed](https://www.rust-lang.org/tools/install)\r\n*   *(optional)* [ngrok](https://ngrok.com/) to let Twilio access a local server\r\n\r\n## Setting Up a TwiML Bin\r\n\r\nWe will use TwiML Bins to make Twilio fork audio data from phone calls to a server that we will write.\r\nIn the Twilio Console, search for TwiML Bin, and click "Create TwiML Bin."\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025616/blog/2022/06/deepgram-twilio-streaming-rust/assets/find_twiml_bin.png" alt="Navigate to your TwiML Bins." style="max-width: 606px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nGive the TwiML Bin a "Friendly Name" and enter the following as the the contents of the TwiML Bin:\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<Response>\r\n  <Start>\r\n    <Stream url="wss://INSERT_YOUR_SERVER_URL/twilio" track="both_tracks"/>\r\n  </Start>\r\n  <Say voice="woman" language="en">"This call may be monitored or recorded for quality purposes."</Say>\r\n  <Dial>+11231231234</Dial>\r\n</Response>\r\n```\r\n\r\nIn the `Dial` section, enter your phone number. Where it says `INSERT_YOUR_SERVER_URL` insert the URL where you will be hosting the server.\r\nWithout having to spin up and configure a cloud instance, you can use `ngrok` to expose a port on localhost. To do this for, say,\r\nport 5000, run:\r\n\r\n    ngrok http 5000\r\n\r\n`ngrok` will then generate a public URL which forwards requests to your computer at `localhost:5000`. This URL may look something like:\r\n`c52e-71-212-124-133.ngrok.io` - enter this URL in your TwiML Bin.\r\n\r\nNow the last thing to do on the Twilio Console before hopping over to write our server code is to hook up one of your Twilio numbers to this TwiML Bin.\r\nGo to the "Develop" tab on the left side of the Twilio Console, navigate to `Phone Numbers -> Manage -> Active numbers`, and click on your Twilio number in the list.\r\nThen, under the field "A Call Comes In", click the drop-down and select "TwiML Bin"; for the field directly next to this one, click the drop-down and select\r\nthe TwiML Bin you just created.\r\nClick "Save" at the bottom of the Twilio Console.\r\n\r\n## The Twilio Proxy Server\r\n\r\nThe system that we will be building is illustrated here:\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025618/blog/2022/06/deepgram-twilio-streaming-rust/assets/deepgram_twilio_diagram.png" alt="The big picture." style="display: block;margin-left: auto;margin-right: auto;">\r\n\r\nWe want audio from phone calls going through Twilio\'s server to be forked to the proxy server we will be writing. The proxy server then buffers\r\nand processes the audio, sends it to Deepgram, and receives transcripts back from Deepgram. The proxy server also accepts client connections which\r\nsubscribe to ongoing calls, and whenever the server receives transcripts from Deepgram for those calls, it broadcasts those transcripts to all subscribers.\r\nThis will all be done via WebSockets at near-real-time! Typical latencies for this system hover around 500 ms.\r\n\r\nDownload the code from [this repository](https://github.com/deepgram-devs/deepgram-twilio-streaming-rust).\r\n\r\nBelow we will go through creating this project from scratch, but this will also act as a comprehensive code-tour of the repository.\r\nIf you are keen on trying the server out right away and perusing the code\r\nmore at your leisure, feel free to skip to the [Running the Server and Testing with websocat](#running-the-server-and-testing-with-websocat) section!\r\n\r\n## Setup the Rust Project and `main.rs`\r\n\r\nCreate a new Rust project using `cargo new`:\r\n\r\n```\r\ncargo new deepgram-twilio-streaming-rust\r\n```\r\n\r\nGo into the project directory and edit the `Cargo.toml` file, giving it the following contents:\r\n\r\n```toml\r\n[package]\r\nname = "deepgram-twilio-streaming-rust"\r\nversion = "0.1.0"\r\nedition = "2021"\r\n\r\n[dependencies]\r\naxum = { version = "0.5.1", features = ["ws"] }\r\naxum-server = { version = "0.4.0", features = ["tls-rustls"] }\r\nbase64 = "0.13.0"\r\nfutures = "0.3.21"\r\nhttp = "0.2.6"\r\nserde = { version = "1.0.136", features = ["derive"] }\r\nserde_json = "1.0.79"\r\ntokio = { version = "1.17.0", features = ["macros", "rt", "rt-multi-thread"] }\r\ntokio-tungstenite = { version = "0.15.0", features = ["native-tls"] }\r\ntungstenite = "0.14.0"\r\n```\r\nNow let\'s modify `src/main.rs`. Let\'s begin by adding the `use` statements we will need, and defining some modules:\r\n\r\n```rust\r\nuse axum::{routing::get, Extension, Router};\r\nuse axum_server::tls_rustls::RustlsConfig;\r\nuse futures::lock::Mutex;\r\nuse std::{collections::HashMap, sync::Arc};\r\n\r\nmod audio;\r\nmod handlers;\r\nmod message;\r\nmod state;\r\nmod twilio_response;\r\n```\r\n\r\nThe modules we declared are: `audio`, `handlers`, `message`, `state`, and `twilio_response`.\r\nWe will go over each one, but briefly these will be for the following:\r\n\r\n*   `audio`: handle processing of audio data from Twilio\r\n*   `handlers`: handlers for the websocket endpoints `/twilio` and `/client`\r\n*   `message`: a helper module to convert between `axum` and `tungstenite` websocket messages\r\n*   `state`: will contain the definition for the global state of the server\r\n*   `twilio_response`: will contain definitions for Twilio\'s websocket message shape\r\n\r\nNow, let\'s start defining our `main` function and set up the state to be shared among the handlers:\r\n\r\n```rust\r\n#[tokio::main]\r\nasync fn main() {\r\n    let proxy_url = std::env::var("PROXY_URL").unwrap_or_else(|_| "127.0.0.1:5000".to_string());\r\n\r\n    let deepgram_url = std::env::var("DEEPGRAM_URL")\r\n        .unwrap_or_else(|_| "wss://api.deepgram.com/v1/listen?encoding=mulaw&sample_rate=8000&channels=2&multichannel=true".to_string());\r\n\r\n    let api_key =\r\n        std::env::var("DEEPGRAM_API_KEY").expect("Using this server requires a Deepgram API Key.");\r\n\r\n    let cert_pem = std::env::var("CERT_PEM").ok();\r\n    let key_pem = std::env::var("KEY_PEM").ok();\r\n\r\n    let config = match (cert_pem, key_pem) {\r\n        (Some(cert_pem), Some(key_pem)) => Some(\r\n            RustlsConfig::from_pem_file(cert_pem, key_pem)\r\n                .await\r\n                .expect("Failed to make RustlsConfig from cert/key pem files."),\r\n        ),\r\n        (None, None) => None,\r\n        _ => {\r\n            panic!("Failed to start - invalid cert/key.")\r\n        }\r\n    };\r\n\r\n    let state = Arc::new(state::State {\r\n        deepgram_url,\r\n        api_key,\r\n        subscribers: Mutex::new(HashMap::new()),\r\n    });\r\n```\r\n\r\nOur `main` function is set up to be asynchronous via the use of the `#[tokio::main]` macro.\r\n`main` and every async function that `main` then calls will be executed by\r\nthe Tokio runtime. Inside `main` we grab the following environment variables:\r\n\r\n*   `PROXY_URL`: the URL that this server will run on - by default it will use localhost and port 5000\r\n*   `DEEPGRAM_URL`: the URL of Deepgram\'s streaming endpoint, including query parameters (Twilio audio uses the `mulaw` encoding with\r\n    a sample rate of 8000, and we will be streaming stereo (2 channel) audio)\r\n*   `DEEPGRAM_API_KEY`: your Deepgram API Key\r\n*   `CERT_PEM`: an optional environment variable pointing to a `cert.pem` file used for TLS\r\n*   `KEY_PEM`: an optional environment variable pointing to a `key.pem` file used for TLS\r\n\r\nWe use these environment variables to construct an `Arc<State>` object to store the global server state.\r\n\r\nNow, let\'s finish filling in our `main` function by configuring our routes and spinning up the `axum` server to serve these routes:\r\n\r\n```rust\r\n    let app = Router::new()\r\n        .route("/twilio", get(handlers::twilio::twilio_handler))\r\n        .route("/client", get(handlers::subscriber::subscriber_handler))\r\n        .layer(Extension(state));\r\n\r\n    match config {\r\n        Some(config) => {\r\n            axum_server::bind_rustls(proxy_url.parse().unwrap(), config)\r\n                .serve(app.into_make_service())\r\n                .await\r\n                .unwrap();\r\n        }\r\n        None => {\r\n            axum_server::bind(proxy_url.parse().unwrap())\r\n                .serve(app.into_make_service())\r\n                .await\r\n                .unwrap();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe `axum` server is spun up with or without TLS support depending on whether\r\nor not the `CERT_PEM` and `KEY_PEM` environment variables are set.\r\n\r\nThat\'s all there is to `main.rs`! The bulk of the application logic will live in the websocket endpoint handlers, but before diving into them\r\nlet\'s go over some of the objects the server will use.\r\n\r\n## `state.rs`, `twilio_response.rs`, and `message.rs`\r\n\r\nCreate the file `src/state.rs` and give it the following contents:\r\n\r\n```rust\r\nuse axum::extract::ws::WebSocket;\r\nuse futures::lock::Mutex;\r\nuse std::collections::HashMap;\r\n\r\npub struct State {\r\n    pub deepgram_url: String,\r\n    pub api_key: String,\r\n    pub subscribers: Mutex<HashMap<String, Vec<WebSocket>>>,\r\n}\r\n```\r\n\r\nThis will represent the global state of the server. The server will need to know the URL of Deepgram\'s streaming endpoint and a Deepgram API Key to use as authentication when connecting to this endpoint. Additionally, the server will contain\r\na `HashMap` of websocket handlers for subscribers, one for each incoming connection from Twilio. These websocket handlers will be accessed\r\nvia the `callsid` of the Twilio call, and wrapped in a `Mutex` to handle concurrency.\r\n\r\nNext, create the file `src/twilio_response.rs` and give it the following contents:\r\n\r\n```rust\r\n    //! Definitions for the Twilio messages we need to parse\r\n\r\nuse serde::{Deserialize, Serialize};\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub struct Event {\r\n    pub event: String,\r\n    pub sequence_number: String,\r\n    #[serde(flatten)]\r\n    pub event_type: EventType,\r\n    pub stream_sid: String,\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub enum EventType {\r\n    Start(EventStart),\r\n    Media(EventMedia),\r\n}\r\n\r\nimpl Default for EventType {\r\n    fn default() -> Self {\r\n        EventType::Media(Default::default())\r\n    }\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub struct EventStart {\r\n    pub account_sid: String,\r\n    pub stream_sid: String,\r\n    pub call_sid: String,\r\n    pub tracks: Vec<String>,\r\n    pub media_format: MediaFormat,\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\n#[serde(rename_all = "camelCase")]\r\npub struct MediaFormat {\r\n    pub encoding: String,\r\n    pub sample_rate: u32,\r\n    pub channels: u32,\r\n}\r\n\r\n#[derive(Serialize, Deserialize, Default, Debug)]\r\npub struct EventMedia {\r\n    pub track: String,\r\n    pub chunk: String,\r\n    pub timestamp: String,\r\n    pub payload: String,\r\n}\r\n```\r\n\r\nThese are just basic structs defining the shape of the messages Twilio will send our server. Feel free to checkout\r\n[Twilio\'s documentation](https://www.twilio.com/docs/voice/twiml/stream#websocket-messages-from-twilio) for more details.\r\n\r\nFinally, create the file `src/message.rs` and give it the following contents:\r\n\r\n```rust\r\n#[derive(Clone)]\r\npub enum Message {\r\n    Text(String),\r\n    Binary(Vec<u8>),\r\n    Ping(Vec<u8>),\r\n    Pong(Vec<u8>),\r\n    Close(Option<tungstenite::protocol::CloseFrame<\'static>>),\r\n}\r\n\r\nimpl From<axum::extract::ws::Message> for Message {\r\n    fn from(item: axum::extract::ws::Message) -> Self {\r\n        match item {\r\n            axum::extract::ws::Message::Text(text) => Message::Text(text),\r\n            axum::extract::ws::Message::Binary(binary) => Message::Binary(binary),\r\n            axum::extract::ws::Message::Ping(ping) => Message::Ping(ping),\r\n            axum::extract::ws::Message::Pong(pong) => Message::Pong(pong),\r\n            // will deal with this later\r\n            axum::extract::ws::Message::Close(_) => Message::Close(None),\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<tokio_tungstenite::tungstenite::Message> for Message {\r\n    fn from(item: tokio_tungstenite::tungstenite::Message) -> Self {\r\n        match item {\r\n            tokio_tungstenite::tungstenite::Message::Text(text) => Message::Text(text),\r\n            tokio_tungstenite::tungstenite::Message::Binary(binary) => Message::Binary(binary),\r\n            tokio_tungstenite::tungstenite::Message::Ping(ping) => Message::Ping(ping),\r\n            tokio_tungstenite::tungstenite::Message::Pong(pong) => Message::Pong(pong),\r\n            // will deal with this later\r\n            tokio_tungstenite::tungstenite::Message::Close(_) => Message::Close(None),\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<Message> for axum::extract::ws::Message {\r\n    fn from(item: Message) -> axum::extract::ws::Message {\r\n        match item {\r\n            Message::Text(text) => axum::extract::ws::Message::Text(text),\r\n            Message::Binary(binary) => axum::extract::ws::Message::Binary(binary),\r\n            Message::Ping(ping) => axum::extract::ws::Message::Ping(ping),\r\n            Message::Pong(pong) => axum::extract::ws::Message::Pong(pong),\r\n            // will deal with this later\r\n            Message::Close(_) => axum::extract::ws::Message::Close(None),\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<Message> for tokio_tungstenite::tungstenite::Message {\r\n    fn from(item: Message) -> tokio_tungstenite::tungstenite::Message {\r\n        match item {\r\n            Message::Text(text) => tokio_tungstenite::tungstenite::Message::Text(text),\r\n            Message::Binary(binary) => tokio_tungstenite::tungstenite::Message::Binary(binary),\r\n            Message::Ping(ping) => tokio_tungstenite::tungstenite::Message::Ping(ping),\r\n            Message::Pong(pong) => tokio_tungstenite::tungstenite::Message::Pong(pong),\r\n            // will deal with this later\r\n            Message::Close(_) => tokio_tungstenite::tungstenite::Message::Close(None),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis is also a straightforward module which creates our own websocket `Message` type which can\r\nbe used to convert to and from `axum` websocket messages and `tungstenite` websocket messages.\r\n\r\n## The WebSocket Endpoint Handlers\r\n\r\nNow let\'s get into the core logic of the server. We need to define functions to handle client/subscriber\r\nconnections to `/client` and Twilio connections to `/twilio`. Let\'s start with the client handler.\r\n\r\nStart by creating `src/handlers/mod.rs` with the following contents:\r\n\r\n```rust\r\npub mod subscriber;\r\npub mod twilio;\r\n```\r\n\r\nThis simply declares the modules we will use to handle the client/subsriber and Twilio websocket connections.\r\n\r\nThen, create the file `src/handlers/subscriber.rs` with the following contents:\r\n\r\n```rust\r\nuse crate::message::Message;\r\nuse crate::state::State;\r\nuse axum::{\r\n    extract::ws::{WebSocket, WebSocketUpgrade},\r\n    response::IntoResponse,\r\n    Extension,\r\n};\r\nuse std::sync::Arc;\r\n\r\npub async fn subscriber_handler(\r\n    ws: WebSocketUpgrade,\r\n    Extension(state): Extension<Arc<State>>,\r\n) -> impl IntoResponse {\r\n    ws.on_upgrade(|socket| handle_socket(socket, state))\r\n}\r\n\r\nasync fn handle_socket(mut socket: WebSocket, state: Arc<State>) {\r\n    let mut subscribers = state.subscribers.lock().await;\r\n    // send these keys (which will be twilio callsids) to the client\r\n    let keys = subscribers.keys().map(|key| key.to_string()).collect();\r\n    socket\r\n        .send(Message::Text(keys).into())\r\n        .await\r\n        .expect("Failed to send callsids to client.");\r\n\r\n    // wait for the first message from the client\r\n    // and interpret it as the callsid to subscribe to\r\n    if let Some(Ok(msg)) = socket.recv().await {\r\n        let msg = Message::from(msg);\r\n        if let Message::Text(callsid) = msg {\r\n            let callsid = callsid.trim();\r\n            if let Some(subscribers) = subscribers.get_mut(callsid) {\r\n                subscribers.push(socket);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAs we saw in `main.rs`, `subscriber_handler` is the function which will be called when a client tries to connect to the\r\n`/client` endpoint of our server. From there, we perform an upgrade from HTTP to websockets. Then, we try to obtain the\r\nsubscribers `HashMap` from our server\'s global state and send to the client a list of the `callsid`s of all ongoing\r\nTwilio calls that the server is handling. The server then waits for a single message back from the client, and it interprets\r\nthis message as the `callsid` to subscribe to. If the server receives a valid `callsid`, it will push the websocket handle\r\ninto the subscribers `HashMap`. When the Twilio handler receives a transcript for that `callsid`, it will broadcast it to all\r\nsubscribers, including the one we just pushed. That\'s it for `subscriber.rs`!\r\n\r\nNow let\'s look at the bulkier `twilio.rs`. Create `src/handlers/twilio.rs`. Let\'s build this module\r\npiece by piece, starting with some `use` statements:\r\n\r\n```rust\r\nuse crate::audio;\r\nuse crate::message::Message;\r\nuse crate::state::State;\r\nuse crate::twilio_response;\r\nuse axum::{\r\n    extract::ws::{WebSocket, WebSocketUpgrade},\r\n    response::IntoResponse,\r\n    Extension,\r\n};\r\nuse futures::channel::oneshot;\r\nuse futures::{\r\n    sink::SinkExt,\r\n    stream::{SplitSink, SplitStream, StreamExt},\r\n};\r\nuse std::{convert::From, sync::Arc};\r\nuse tokio::net::TcpStream;\r\nuse tokio_tungstenite::{connect_async, MaybeTlsStream, WebSocketStream};\r\n\r\nThen, add the following functions:\r\n\r\npub async fn twilio_handler(\r\n    ws: WebSocketUpgrade,\r\n    Extension(state): Extension<Arc<State>>,\r\n) -> impl IntoResponse {\r\n    ws.on_upgrade(|socket| handle_socket(socket, state))\r\n}\r\n\r\nasync fn handle_socket(socket: WebSocket, state: Arc<State>) {\r\n    let (_this_sender, this_receiver) = socket.split();\r\n\r\n    // prepare the connection request with the api key authentication\r\n    let builder = http::Request::builder()\r\n        .method(http::Method::GET)\r\n        .uri(&state.deepgram_url);\r\n    let builder = builder.header("Authorization", format!("Token {}", state.api_key));\r\n    let request = builder\r\n        .body(())\r\n        .expect("Failed to build a connection request to Deepgram.");\r\n\r\n    // connect to deepgram\r\n    let (deepgram_socket, _) = connect_async(request)\r\n        .await\r\n        .expect("Failed to connect to Deepgram.");\r\n    let (deepgram_sender, deepgram_reader) = deepgram_socket.split();\r\n\r\n    let (callsid_tx, callsid_rx) = oneshot::channel::<String>();\r\n\r\n    tokio::spawn(handle_to_subscribers(\r\n        Arc::clone(&state),\r\n        callsid_rx,\r\n        deepgram_reader,\r\n    ));\r\n    tokio::spawn(handle_from_twilio(\r\n        Arc::clone(&state),\r\n        callsid_tx,\r\n        this_receiver,\r\n        deepgram_sender,\r\n    ));\r\n}\r\n```\r\n\r\nIncoming Twilio connections hitting `/twilio` will be first directed to the function\r\n`twilio_handler` where the websocket upgrade will be performed. Then `handle_socket` will split the websocket connection\r\ninto a receiver and a sender, open up an entirely new websocket connection to Deepgram, split the Deepgram websocket\r\nconnection into a receiver and a sender, and spawn tasks which call the functions `handle_to_subscribers` and\r\n`handle_from_twilio` which take these receivers and senders as arguments. A oneshot channel is also set up so that\r\n`handle_from_twilio` can send the `callsid` of the Twilio call to `handle_to_subscribers` in a thread-safe manner -\r\nthe `callsid` is not yet known when these initial websocket connections are established, it only becomes available\r\nwhen Twilio sends this information in a Twilio `start` event websocket message.\r\n\r\nLet\'s now define the `handle_to_subscribers` function:\r\n\r\n```rust\r\nasync fn handle_to_subscribers(\r\n    state: Arc<State>,\r\n    callsid_rx: oneshot::Receiver<String>,\r\n    mut deepgram_receiver: SplitStream<WebSocketStream<MaybeTlsStream<TcpStream>>>,\r\n) {\r\n    let callsid = callsid_rx\r\n        .await\r\n        .expect("Failed to receive callsid from handle_from_twilio.");\r\n\r\n    while let Some(Ok(msg)) = deepgram_receiver.next().await {\r\n        let mut subscribers = state.subscribers.lock().await;\r\n        if let Some(subscribers) = subscribers.get_mut(&callsid) {\r\n            // send the message to all subscribers concurrently\r\n            let futs = subscribers\r\n                .iter_mut()\r\n                .map(|subscriber| subscriber.send(Message::from(msg.clone()).into()));\r\n            let results = futures::future::join_all(futs).await;\r\n\r\n            // if we successfully sent a message then the subscriber is still connected\r\n            // other subscribers should be removed\r\n            *subscribers = subscribers\r\n                .drain(..)\r\n                .zip(results)\r\n                .filter_map(|(subscriber, result)| result.is_ok().then(|| subscriber))\r\n                .collect();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis function first waits to receive the `callsid`\r\nfrom `handle_from_twilio` and then proceeds to read messages off the Deepgram websocket receiver, broadcasting all\r\nmessages that it obtains to all subscribers to that `callsid`.\r\n\r\nNow let\'s define `handle_from_twilio` as follows:\r\n\r\n```rust\r\nasync fn handle_from_twilio(\r\n    state: Arc<State>,\r\n    callsid_tx: oneshot::Sender<String>,\r\n    mut this_receiver: SplitStream<WebSocket>,\r\n    mut deepgram_sender: SplitSink<\r\n        WebSocketStream<MaybeTlsStream<TcpStream>>,\r\n        tokio_tungstenite::tungstenite::Message,\r\n    >,\r\n) {\r\n    let mut buffer_data = audio::BufferData {\r\n        inbound_buffer: Vec::new(),\r\n        outbound_buffer: Vec::new(),\r\n        inbound_last_timestamp: 0,\r\n        outbound_last_timestamp: 0,\r\n    };\r\n\r\n    // wrap our oneshot in an Option because we will need it in a loop\r\n    let mut callsid_tx = Some(callsid_tx);\r\n    let mut callsid: Option<String> = None;\r\n\r\n    while let Some(Ok(msg)) = this_receiver.next().await {\r\n        let msg = Message::from(msg);\r\n        if let Message::Text(msg) = msg {\r\n            let event: Result<twilio_response::Event, _> = serde_json::from_str(&msg);\r\n            if let Ok(event) = event {\r\n                match event.event_type {\r\n                    twilio_response::EventType::Start(start) => {\r\n                        // the "start" event only happens once, so having our oneshot in here is kosher\r\n                        callsid = Some(start.call_sid.clone());\r\n\r\n                        // sending this callsid on our oneshot will let `handle_to_subscribers` know the callsid\r\n                        if let Some(callsid_tx) = callsid_tx.take() {\r\n                            callsid_tx\r\n                                .send(start.call_sid.clone())\r\n                                .expect("Failed to send callsid to handle_to_subscribers.");\r\n                        }\r\n\r\n                        // make a new set of subscribers for this call, using the callsid as the key\r\n                        state\r\n                            .subscribers\r\n                            .lock()\r\n                            .await\r\n                            .entry(start.call_sid)\r\n                            .or_default();\r\n                    }\r\n                    twilio_response::EventType::Media(media) => {\r\n                        if let Some(mixed) = audio::process_twilio_media(media, &mut buffer_data) {\r\n                            // send the audio on to deepgram\r\n                            if deepgram_sender\r\n                                .send(Message::Binary(mixed).into())\r\n                                .await\r\n                                .is_err()\r\n                            {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // close and remove the subscribers, if we have a callsid\r\n    if let Some(callsid) = callsid {\r\n        let mut subscribers = state.subscribers.lock().await;\r\n        if let Some(subscribers) = subscribers.remove(&callsid) {\r\n            for mut subscriber in subscribers {\r\n                // we don\'t really care if this succeeds or fails as we are closing/dropping these\r\n                let _ = subscriber.send(Message::Close(None).into()).await;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis function begins by setting up an object to help handle the audio buffers\r\nfrom the inbound and outbound callers. We then start reading websocket messages from the Twilio websocket receiver.\r\nWhen we obtain the Twilio `start` event message, we can grab the `callsid`, use it to set up subscribers\r\nto this call, and send it off to the `handle_to_subscribers` task via the oneshot channel we set up earlier. Subsequent\r\nTwilio media events are then processed via `audio::process_twilio_media`, and when a buffer of mixed stereo audio is\r\nready, we send it to Deepgram via the Deepgram websocket sender.\r\n\r\nFinally, when Twilio closes the connection to our server (or some error occurs), we must remember to remove all subscribers\r\nfrom the subscriber `HashMap` and close the connections to those subscribers.\r\n\r\n## Processing the Audio in `audio.rs`\r\n\r\nWhen discussing the Twilio websocket handler, the processing of Twilio media events was delegated to `audio::process_twilio_media`.\r\nWe will define this function in `src/audio.rs`. Make `src/audio.rs` with the following contents:\r\n\r\n```rust\r\nuse crate::twilio_response;\r\n\r\nconst MULAW_SILENCE: u8 = 0xff;\r\nconst MULAW_BYTES_PER_MS: usize = 8;\r\nconst TWILIO_MS_PER_CHUNK: usize = 20;\r\nconst MIN_TWILIO_CHUNKS_TO_MIX: usize = 20;\r\n\r\npub struct BufferData {\r\n    pub inbound_buffer: Vec<u8>,\r\n    pub outbound_buffer: Vec<u8>,\r\n    pub inbound_last_timestamp: u32,\r\n    pub outbound_last_timestamp: u32,\r\n}\r\n\r\nfn pad_with_silence(buffer: &mut Vec<u8>, current_timestamp: u32, previous_timestamp: u32) {\r\n    let time_lost = if current_timestamp < previous_timestamp + TWILIO_MS_PER_CHUNK as u32 {\r\n        // here we have received a timestamp that is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous timestamp\r\n        // this occasionally occurs and is unexpected behavior from Twilio\r\n        0\r\n    } else {\r\n        current_timestamp - (previous_timestamp + TWILIO_MS_PER_CHUNK as u32)\r\n    };\r\n    let silence = std::iter::repeat(MULAW_SILENCE).take(MULAW_BYTES_PER_MS * time_lost as usize);\r\n    buffer.extend(silence);\r\n}\r\n\r\n/// (1) decodes twilio media events\r\n/// (2) pads inbound and outbound buffers with silence if needed\r\n/// (3) if there is more than MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms\r\n///     of audio in both inbound and outbound audio buffers, drains as much audio from\r\n///     both buffers as can be mixed together, mixes and returns this audio\r\npub fn process_twilio_media(\r\n    media: twilio_response::EventMedia,\r\n    mut buffer_data: &mut BufferData,\r\n) -> Option<Vec<u8>> {\r\n    // NOTE: when Twilio sends media data, it should send TWILIO_MS_PER_CHUNK = 20 ms audio chunks\r\n    // at a time, where each ms of audio is MULAW_BYTES_PER_MS = 8 bytes\r\n    let media_chunk = base64::decode(media.payload).unwrap();\r\n    let media_chunk_size = media_chunk.len();\r\n    if media_chunk_size != TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS {\r\n        // here, the Twilio media chunk size is not the expected size of TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS bytes\r\n        // this occasionally occurs and is unexpected behavior from Twilio\r\n    }\r\n    // NOTE: There are rare cases where the timestamp is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous chunk\r\n    let timestamp = media.timestamp.parse::<u32>().unwrap();\r\n\r\n    // pad the inbound or outbound buffer with silence if needed depending on timestamp info\r\n    // and then add the audio data from the twilio media message to the buffer\r\n    if media.track == "inbound" {\r\n        pad_with_silence(\r\n            &mut buffer_data.inbound_buffer,\r\n            timestamp,\r\n            buffer_data.inbound_last_timestamp,\r\n        );\r\n        buffer_data.inbound_buffer.extend(media_chunk);\r\n        buffer_data.inbound_last_timestamp = timestamp;\r\n    } else if media.track == "outbound" {\r\n        pad_with_silence(\r\n            &mut buffer_data.outbound_buffer,\r\n            timestamp,\r\n            buffer_data.outbound_last_timestamp,\r\n        );\r\n        buffer_data.outbound_buffer.extend(media_chunk);\r\n        buffer_data.outbound_last_timestamp = timestamp;\r\n    }\r\n\r\n    // we will return mixed audio of MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms (or more)\r\n    // corresponding to MIN_TWILIO_CHUNKS_TO_MIX = 20 twilio media messages (or more)\r\n    let minimum_chunk_size = MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS;\r\n    let mixable_data_size = std::cmp::min(\r\n        buffer_data.inbound_buffer.len(),\r\n        buffer_data.outbound_buffer.len(),\r\n    );\r\n    if mixable_data_size >= minimum_chunk_size {\r\n        let mut mixed = Vec::with_capacity(mixable_data_size * 2);\r\n        let inbound_buffer_segment = buffer_data.inbound_buffer.drain(0..mixable_data_size);\r\n        let outbound_buffer_segment = buffer_data.outbound_buffer.drain(0..mixable_data_size);\r\n\r\n        for (inbound, outbound) in inbound_buffer_segment.zip(outbound_buffer_segment) {\r\n            mixed.push(inbound);\r\n            mixed.push(outbound);\r\n        }\r\n        Some(mixed)\r\n    } else {\r\n        None\r\n    }\r\n}\r\n```\r\n\r\nTwilio sends its audio data as 8000 Hz `mulaw` data, independently for inbound and outbound callers. Additionally, sometimes Twilio\r\n(or the phones which use Twilio) will drop packets of audio. The function `process_twilio_media`, then, handles inserting silence\r\nshould there be dropped packets or timing issues, and mixes together the inbound and outbound audio into a valid stereo audio stream\r\nwhich we can then send to Deepgram. Several of the finer details are explained in the comments in this file.\r\n\r\n## Running the Server and Testing with websocat\r\n\r\nLet\'s use websocat to quickly test our server.\r\n\r\nRun the server with the following:\r\n\r\n    DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY cargo run\r\n\r\nreplacing `INSERT_YOUR_DEEPGRAM_API_KEY` with your Deepgram API Key.\r\n\r\nThis server will need to be accessible to Twilio, and this is set up in the TwiML Bin you created in the previous [Setting Up a TwiML Bin](#setting-up-a-twiml-bin) section. If you are using `ngrok`, make sure your TwiML Bin\r\nis updated with the current `ngrok` URL.\r\n\r\nNow, call your Twilio number with one phone, and answer the call on the phone your Twilio number forwards to.\r\nThen, latch onto the proxy server via the client endpoint with websocat:\r\n```\r\nwebsocat ws://localhost:5000/client\r\n```\r\nWebsocat should immediately send you a message containing a list of the `callsid`s of all active calls (which in this case should be one).\r\nReply to the message with the `callsid` by copy/pasting and hitting enter:\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/connect_to_callsid.png" alt="Subscribe to the call via the `callsid`." style="display: block;margin-left: auto;margin-right: auto;">\r\n\r\nYou should start to see transcription results appear in your websocat session in real time:\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/websocat_streaming_asr_results.png" alt="Websocat streaming ASR results." style="display: block;margin-left: auto;margin-right: auto;">\r\n\r\nFeel free to try setting up multiple Twilio numbers, and multiple client sessions!\r\n\r\n## Making a Docker Image for the Server\r\n\r\nLet\'s go through the process of building a Docker image so that this server can be portably deployed. We\'ll start by making a `rust-toolchain` file with the following contents:\r\n\r\n    1.61\r\n\r\n(quite the simple file!). This will ensure that when you run `cargo build` (either manually, or as part of building a Docker image), the same version of Rust will be used\r\nevery time.\r\n\r\nNow, let\'s create a Dockerfile called `Dockerfile` and give it the following contents:\r\n```\r\nFROM ubuntu:22.04 as builder\r\n\r\nLABEL maintainer="YOUR_INFO"\r\n\r\nENV DEBIAN_FRONTEND=noninteractive\r\n\r\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n        ca-certificates \\\r\n        clang \\\r\n        curl \\\r\n        libpq-dev \\\r\n        libssl-dev \\\r\n        pkg-config\r\n\r\nCOPY rust-toolchain /rust-toolchain\r\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(cat /rust-toolchain) && \\\r\n    . $HOME/.cargo/env\r\n\r\nCOPY . /deepgram-twilio-streaming-rust\r\n\r\nRUN . $HOME/.cargo/env && \\\r\n    cargo install --path /deepgram-twilio-streaming-rust --root /\r\n\r\nFROM ubuntu:22.04\r\n\r\nLABEL maintainer="YOUR_INFO"\r\n\r\nENV DEBIAN_FRONTEND=noninteractive\r\n\r\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n        ca-certificates \\\r\n        libpq5 \\\r\n        libssl3 && \\\r\n    apt-get clean\r\n\r\nCOPY --from=builder /bin/deepgram-twilio-streaming-rust /bin/deepgram-twilio-streaming-rust\r\n\r\nENTRYPOINT ["/bin/deepgram-twilio-streaming-rust"]\r\nCMD [""]\r\n```\r\n\r\nReplace `YOUR_INFO` with your name and email address (for me, for example, this would be `Nikola Whallon <nikola@deepgram.com>`).\r\nThe key bits to take away are:\r\n\r\n*   we start with an Ubuntu 22.04 image\r\n*   we install several dependencies via `apt`\r\n*   we use the `rust-toolchain` and build+install our executable with `cargo install`\r\n*   we set the `ENTRYPOINT` to `/bin/deepgram-twilio-streaming-rust`, with no command-line arguments (`CMD`)\r\n\r\nNow with the Dockerfile written, build the Docker image with:\r\n\r\n```\r\ndocker build -t your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0 -f Dockerfile .\r\n```\r\nIf you will be pushing this image to Docker Hub so that the image can be pulled from a remote server (like an AWS instance),\r\nreplace `your-docker-hub-account` with your Docker Hub account. For local testing, simply using the image name `deepgram-twilio-streaming-rust:0.1.0`\r\n(or whatever you would like) will work. You are also free to pull and use `deepgram/deepgram-twilio-treaming-rust:0.1.0`!\r\n\r\nNow you can run the Docker image in a container locally via:\r\n```\r\ndocker run -e PROXY_URL=0.0.0.0:5000 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\\r\n    -p 5000:5000 your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0\r\n```\r\nreplacing `INSERT_YOUR_DEEPGRAM_API_KEY` with your Deepgram API Key, and make sure the Docker image name matches what you built. This will\r\nrun the image in a container in your current terminal, but you can include a `-d` to detach the process to run in the background. If you do this,\r\nyou will need to keep track of whether or not it is running with `docker ps` and similar commands.\r\n\r\nRefer to the [Docker CLI documentation](https://docs.docker.com/engine/reference/commandline/cli/) for more info.\r\n\r\nNow that the Twilio proxy server should be running in a Docker container, feel free to give your Twilio number a call, and subscribe to the call\r\nwith websocat by doing:\r\n\r\n```\r\n websocat ws://localhost:5000/client\r\n```\r\nand replying to the server with the `callsid` it sends you.\r\n\r\nYou should be all set to push this Docker image to your Docker Hub (or use ours: `deepgram/deepgram-twilio-treaming-rust:0.1.0`), and pull\r\nand use it on your cloud server! You will need to provide the additional environment variables `CERT_PEM` and `KEY_PEM` to do this, making\r\nsure those files are accessible to the Docker continer by using `-v`, and you may need to specify\r\nthe port as `443` in the `PROXY_URL` and use `-p 443:443` among other subtle changes.\r\nYou should refer to your cloud server provider\'s documentation on setting up an https/wss enabled server with certificates. As an example,\r\nhere\'s how I spun up the server app on an AWS Ubuntu 20.04 instance:\r\n\r\n```\r\ndocker run -v /home/ubuntu:/foo -p 443:443 -d \\\r\n    -e PROXY_URL=0.0.0.0:443 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\\r\n    -e CERT_PEM=/foo/cert.pem -e KEY_PEM=/foo/key.pem \\\r\n    deepgram/deepgram-twilio-streaming-rust:0.1.0\r\n```\r\n## Further Development\r\n\r\nThis should get you up and running with an almost-production-ready Twilio-Deepgram proxy server, written in Rust. There are a few pieces\r\nthat have been left out, for the sake of brevity and for the sake of being agnostic to the needs of your desired system. For example, calls to the\r\n`/client` endpoint are currently entirely unauthenticated, and indeed calls to `/twilio` are also unauthenticated (see\r\n[these Twilio docs](https://www.twilio.com/docs/usage/security) for more details). For a fully-production-ready service, you should\r\ntake authentication into consideration. Also, no logging or telemetry is presented in the proxy server.\r\n\r\nFinally, you will very likely need to build a front-end to interact with the server and properly parse the JSON messages being streamed.\r\nwebsocat is great for testing, but is not a reasonable final solution for subscribing to calls!\r\n\r\nIf you have any questions, please feel free to reach out on Twitter - we\'re [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ';
}
function compiledContent() {
  return '<p>In a <a href="https://blog.deepgram.com/deepgram-twilio-streaming/">previous blog post</a>, we showed how to build an integration\r\nbetween Deepgram and Twilio for real-time, live transcription using Python. In this post, we will revisit this integration and implement\r\nit in Rust. The <a href="https://www.rust-lang.org/">Rust programming language</a> is a favorite among Deepgram engineers, and is known for its\r\ntype safety, performance, and powerful memory management achieved via a strict ownership system which eliminates entire categories of bugs!</p>\n<p>We will be building our Twilio streaming app using the <a href="https://docs.rs/axum/latest/axum/">Axum web framework</a>\r\nwhich is built on top of the powerful and popular asynchronous <a href="https://tokio.rs/">Tokio crate</a>. Using Rust with\r\nan efficient asynchronous runtime like Tokio is a good choice for reliable and performant web app backends.</p>\n<h2 id="pre-requisites">Pre-requisites</h2>\n<p>You will need:</p>\n<ul>\n<li>a <a href="https://www.twilio.com/try-twilio">Twilio account</a> with a Twilio number (the free tier will work)</li>\n<li>a Deepgram API Key - <a href="https://console.deepgram.com/signup">get an API Key here</a></li>\n<li><a href="https://www.rust-lang.org/tools/install">Rust installed</a></li>\n<li><em>(optional)</em> <a href="https://ngrok.com/">ngrok</a> to let Twilio access a local server</li>\n</ul>\n<h2 id="setting-up-a-twiml-bin">Setting Up a TwiML Bin</h2>\n<p>We will use TwiML Bins to make Twilio fork audio data from phone calls to a server that we will write.\r\nIn the Twilio Console, search for TwiML Bin, and click \u201CCreate TwiML Bin.\u201D</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025616/blog/2022/06/deepgram-twilio-streaming-rust/assets/find_twiml_bin.png" alt="Navigate to your TwiML Bins." style="max-width: 606px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Give the TwiML Bin a \u201CFriendly Name\u201D and enter the following as the the contents of the TwiML Bin:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;?</span><span style="color: #7EE787">xml</span><span style="color: #79C0FF"> version</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;1.0&quot;</span><span style="color: #79C0FF"> encoding</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9">?&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">Response</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Start</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">Stream</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;wss://INSERT_YOUR_SERVER_URL/twilio&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">track</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;both_tracks&quot;</span><span style="color: #C9D1D9">/&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">Start</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Say</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">voice</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;woman&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">language</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;&quot;This call may be monitored or recorded for quality purposes.&quot;&lt;/</span><span style="color: #7EE787">Say</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Dial</span><span style="color: #C9D1D9">&gt;+11231231234&lt;/</span><span style="color: #7EE787">Dial</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">Response</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In the <code is:raw>Dial</code> section, enter your phone number. Where it says <code is:raw>INSERT_YOUR_SERVER_URL</code> insert the URL where you will be hosting the server.\r\nWithout having to spin up and configure a cloud instance, you can use <code is:raw>ngrok</code> to expose a port on localhost. To do this for, say,\r\nport 5000, run:</p>\n<p>ngrok http 5000</p>\n<p><code is:raw>ngrok</code> will then generate a public URL which forwards requests to your computer at <code is:raw>localhost:5000</code>. This URL may look something like:\r\n<code is:raw>c52e-71-212-124-133.ngrok.io</code> - enter this URL in your TwiML Bin.</p>\n<p>Now the last thing to do on the Twilio Console before hopping over to write our server code is to hook up one of your Twilio numbers to this TwiML Bin.\r\nGo to the \u201CDevelop\u201D tab on the left side of the Twilio Console, navigate to <code is:raw>Phone Numbers -&gt; Manage -&gt; Active numbers</code>, and click on your Twilio number in the list.\r\nThen, under the field \u201CA Call Comes In\u201D, click the drop-down and select \u201CTwiML Bin\u201D; for the field directly next to this one, click the drop-down and select\r\nthe TwiML Bin you just created.\r\nClick \u201CSave\u201D at the bottom of the Twilio Console.</p>\n<h2 id="the-twilio-proxy-server">The Twilio Proxy Server</h2>\n<p>The system that we will be building is illustrated here:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025618/blog/2022/06/deepgram-twilio-streaming-rust/assets/deepgram_twilio_diagram.png" alt="The big picture." style="display: block;margin-left: auto;margin-right: auto;" />\n<p>We want audio from phone calls going through Twilio\u2019s server to be forked to the proxy server we will be writing. The proxy server then buffers\r\nand processes the audio, sends it to Deepgram, and receives transcripts back from Deepgram. The proxy server also accepts client connections which\r\nsubscribe to ongoing calls, and whenever the server receives transcripts from Deepgram for those calls, it broadcasts those transcripts to all subscribers.\r\nThis will all be done via WebSockets at near-real-time! Typical latencies for this system hover around 500 ms.</p>\n<p>Download the code from <a href="https://github.com/deepgram-devs/deepgram-twilio-streaming-rust">this repository</a>.</p>\n<p>Below we will go through creating this project from scratch, but this will also act as a comprehensive code-tour of the repository.\r\nIf you are keen on trying the server out right away and perusing the code\r\nmore at your leisure, feel free to skip to the <a href="#running-the-server-and-testing-with-websocat">Running the Server and Testing with websocat</a> section!</p>\n<h2 id="setup-the-rust-project-and-mainrs">Setup the Rust Project and <code is:raw>main.rs</code></h2>\n<p>Create a new Rust project using <code is:raw>cargo new</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cargo new deepgram-twilio-streaming-rust</span></span></code></pre>\n<p>Go into the project directory and edit the <code is:raw>Cargo.toml</code> file, giving it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span><span style="color: #FFA657">package</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">name = </span><span style="color: #A5D6FF">&quot;deepgram-twilio-streaming-rust&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">version = </span><span style="color: #A5D6FF">&quot;0.1.0&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">edition = </span><span style="color: #A5D6FF">&quot;2021&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">[</span><span style="color: #FFA657">dependencies</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">axum = { version = </span><span style="color: #A5D6FF">&quot;0.5.1&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;ws&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">axum-server = { version = </span><span style="color: #A5D6FF">&quot;0.4.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;tls-rustls&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">base64 = </span><span style="color: #A5D6FF">&quot;0.13.0&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">futures = </span><span style="color: #A5D6FF">&quot;0.3.21&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">http = </span><span style="color: #A5D6FF">&quot;0.2.6&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">serde = { version = </span><span style="color: #A5D6FF">&quot;1.0.136&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;derive&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">serde_json = </span><span style="color: #A5D6FF">&quot;1.0.79&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">tokio = { version = </span><span style="color: #A5D6FF">&quot;1.17.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;macros&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rt&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rt-multi-thread&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">tokio-tungstenite = { version = </span><span style="color: #A5D6FF">&quot;0.15.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;native-tls&quot;</span><span style="color: #C9D1D9">] }</span></span>\n<span class="line"><span style="color: #C9D1D9">tungstenite = </span><span style="color: #A5D6FF">&quot;0.14.0&quot;</span></span></code></pre>\n<p>Now let\u2019s modify <code is:raw>src/main.rs</code>. Let\u2019s begin by adding the <code is:raw>use</code> statements we will need, and defining some modules:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">routing</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">get, </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Router</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tls_rustls</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">RustlsConfig</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">lock</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">collections</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">handlers</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">state</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio_response</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>The modules we declared are: <code is:raw>audio</code>, <code is:raw>handlers</code>, <code is:raw>message</code>, <code is:raw>state</code>, and <code is:raw>twilio_response</code>.\r\nWe will go over each one, but briefly these will be for the following:</p>\n<ul>\n<li><code is:raw>audio</code>: handle processing of audio data from Twilio</li>\n<li><code is:raw>handlers</code>: handlers for the websocket endpoints <code is:raw>/twilio</code> and <code is:raw>/client</code></li>\n<li><code is:raw>message</code>: a helper module to convert between <code is:raw>axum</code> and <code is:raw>tungstenite</code> websocket messages</li>\n<li><code is:raw>state</code>: will contain the definition for the global state of the server</li>\n<li><code is:raw>twilio_response</code>: will contain definitions for Twilio\u2019s websocket message shape</li>\n</ul>\n<p>Now, let\u2019s start defining our <code is:raw>main</code> function and set up the state to be shared among the handlers:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">#[tokio</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">main]</span></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> proxy_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PROXY_URL&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap_or_else</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">_</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;127.0.0.1:5000&quot;</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> deepgram_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_URL&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap_or_else</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">_</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;wss://api.deepgram.com/v1/listen?encoding=mulaw&amp;sample_rate=8000&amp;channels=2&amp;multichannel=true&quot;</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> api_key </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Using this server requires a Deepgram API Key.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> cert_pem </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;CERT_PEM&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">ok</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> key_pem </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;KEY_PEM&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">ok</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> config </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> (cert_pem, key_pem) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        (</span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(cert_pem), </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(key_pem)) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">RustlsConfig</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from_pem_file</span><span style="color: #C9D1D9">(cert_pem, key_pem)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to make RustlsConfig from cert/key pem files.&quot;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        ),</span></span>\n<span class="line"><span style="color: #C9D1D9">        (</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        _ </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">panic!</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to start - invalid cert/key.&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> state </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgram_url,</span></span>\n<span class="line"><span style="color: #C9D1D9">        api_key,</span></span>\n<span class="line"><span style="color: #C9D1D9">        subscribers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Mutex</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">HashMap</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">()),</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span></code></pre>\n<p>Our <code is:raw>main</code> function is set up to be asynchronous via the use of the <code is:raw>#[tokio::main]</code> macro.\r\n<code is:raw>main</code> and every async function that <code is:raw>main</code> then calls will be executed by\r\nthe Tokio runtime. Inside <code is:raw>main</code> we grab the following environment variables:</p>\n<ul>\n<li><code is:raw>PROXY_URL</code>: the URL that this server will run on - by default it will use localhost and port 5000</li>\n<li><code is:raw>DEEPGRAM_URL</code>: the URL of Deepgram\u2019s streaming endpoint, including query parameters (Twilio audio uses the <code is:raw>mulaw</code> encoding with\r\na sample rate of 8000, and we will be streaming stereo (2 channel) audio)</li>\n<li><code is:raw>DEEPGRAM_API_KEY</code>: your Deepgram API Key</li>\n<li><code is:raw>CERT_PEM</code>: an optional environment variable pointing to a <code is:raw>cert.pem</code> file used for TLS</li>\n<li><code is:raw>KEY_PEM</code>: an optional environment variable pointing to a <code is:raw>key.pem</code> file used for TLS</li>\n</ul>\n<p>We use these environment variables to construct an <code is:raw>Arc&lt;State&gt;</code> object to store the global server state.</p>\n<p>Now, let\u2019s finish filling in our <code is:raw>main</code> function by configuring our routes and spinning up the <code is:raw>axum</code> server to serve these routes:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Router</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/twilio&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">handlers</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">twilio</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">twilio_handler))</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/client&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">handlers</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">subscriber</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">subscriber_handler))</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">layer</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> config {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(config) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">bind_rustls</span><span style="color: #C9D1D9">(proxy_url</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">(), config)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">serve</span><span style="color: #C9D1D9">(app</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into_make_service</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">bind</span><span style="color: #C9D1D9">(proxy_url</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">serve</span><span style="color: #C9D1D9">(app</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into_make_service</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The <code is:raw>axum</code> server is spun up with or without TLS support depending on whether\r\nor not the <code is:raw>CERT_PEM</code> and <code is:raw>KEY_PEM</code> environment variables are set.</p>\n<p>That\u2019s all there is to <code is:raw>main.rs</code>! The bulk of the application logic will live in the websocket endpoint handlers, but before diving into them\r\nlet\u2019s go over some of the objects the server will use.</p>\n<h2 id="staters-twilio_responsers-and-messagers"><code is:raw>state.rs</code>, <code is:raw>twilio_response.rs</code>, and <code is:raw>message.rs</code></h2>\n<p>Create the file <code is:raw>src/state.rs</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">lock</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">collections</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">State</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> deepgram_url</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> api_key</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">&gt;&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This will represent the global state of the server. The server will need to know the URL of Deepgram\u2019s streaming endpoint and a Deepgram API Key to use as authentication when connecting to this endpoint. Additionally, the server will contain\r\na <code is:raw>HashMap</code> of websocket handlers for subscribers, one for each incoming connection from Twilio. These websocket handlers will be accessed\r\nvia the <code is:raw>callsid</code> of the Twilio call, and wrapped in a <code is:raw>Mutex</code> to handle concurrency.</p>\n<p>Next, create the file <code is:raw>src/twilio_response.rs</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">    //! Definitions for the Twilio messages we need to parse</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">serde</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Event</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> sequence_number</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    #[serde(flatten)]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> event_type</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> stream_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">enum</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Start</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">EventStart</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">default</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Default</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">default</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventStart</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> account_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> stream_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> call_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> tracks</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> media_format</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">MediaFormat</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">MediaFormat</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> encoding</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> sample_rate</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> channels</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> track</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> chunk</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> payload</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>These are just basic structs defining the shape of the messages Twilio will send our server. Feel free to checkout\r\n<a href="https://www.twilio.com/docs/voice/twiml/stream#websocket-messages-from-twilio">Twilio\u2019s documentation</a> for more details.</p>\n<p>Finally, create the file <code is:raw>src/message.rs</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Clone</span><span style="color: #C9D1D9">)]</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">enum</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">protocol</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">CloseFrame</span><span style="color: #C9D1D9">&lt;&#39;</span><span style="color: #FFA657">static</span><span style="color: #C9D1D9">&gt;&gt;),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">extract</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>\n<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This is also a straightforward module which creates our own websocket <code is:raw>Message</code> type which can\r\nbe used to convert to and from <code is:raw>axum</code> websocket messages and <code is:raw>tungstenite</code> websocket messages.</p>\n<h2 id="the-websocket-endpoint-handlers">The WebSocket Endpoint Handlers</h2>\n<p>Now let\u2019s get into the core logic of the server. We need to define functions to handle client/subscriber\r\nconnections to <code is:raw>/client</code> and Twilio connections to <code is:raw>/twilio</code>. Let\u2019s start with the client handler.</p>\n<p>Start by creating <code is:raw>src/handlers/mod.rs</code> with the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">subscriber</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio</span><span style="color: #C9D1D9">;</span></span></code></pre>\n<p>This simply declares the modules we will use to handle the client/subsriber and Twilio websocket connections.</p>\n<p>Then, create the file <code is:raw>src/handlers/subscriber.rs</code> with the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">message</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">subscriber_handler</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state)</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">on_upgrade</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">socket</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket, state))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #8B949E">    // send these keys (which will be twilio callsids) to the client</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> keys </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">keys</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">key</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> key</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">collect</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    socket</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(keys)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to send callsids to client.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // wait for the first message from the client</span></span>\n<span class="line"><span style="color: #8B949E">    // and interpret it as the callsid to subscribe to</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">recv</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> msg </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(callsid) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> msg {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">get_mut</span><span style="color: #C9D1D9">(callsid) {</span></span>\n<span class="line"><span style="color: #C9D1D9">                subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(socket);</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>As we saw in <code is:raw>main.rs</code>, <code is:raw>subscriber_handler</code> is the function which will be called when a client tries to connect to the\r\n<code is:raw>/client</code> endpoint of our server. From there, we perform an upgrade from HTTP to websockets. Then, we try to obtain the\r\nsubscribers <code is:raw>HashMap</code> from our server\u2019s global state and send to the client a list of the <code is:raw>callsid</code>s of all ongoing\r\nTwilio calls that the server is handling. The server then waits for a single message back from the client, and it interprets\r\nthis message as the <code is:raw>callsid</code> to subscribe to. If the server receives a valid <code is:raw>callsid</code>, it will push the websocket handle\r\ninto the subscribers <code is:raw>HashMap</code>. When the Twilio handler receives a transcript for that <code is:raw>callsid</code>, it will broadcast it to all\r\nsubscribers, including the one we just pushed. That\u2019s it for <code is:raw>subscriber.rs</code>!</p>\n<p>Now let\u2019s look at the bulkier <code is:raw>twilio.rs</code>. Create <code is:raw>src/handlers/twilio.rs</code>. Let\u2019s build this module\r\npiece by piece, starting with some <code is:raw>use</code> statements:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">audio;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">message</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">twilio_response;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">channel</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">oneshot;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">sink</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">SinkExt</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">stream</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">SplitSink</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">StreamExt</span><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">convert</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">net</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{connect_async, </span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA657">Then</span><span style="color: #C9D1D9">, add the following functions</span><span style="color: #FF7B72">:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">twilio_handler</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state)</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">on_upgrade</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">socket</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket, state))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (_this_sender, this_receiver) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // prepare the connection request with the api key authentication</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> builder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">http</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Request</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">builder</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">method</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">http</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Method</span><span style="color: #FF7B72">::</span><span style="color: #79C0FF">GET</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">uri</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">deepgram_url);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> builder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> builder</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">header</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Authorization&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">format!</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Token {}&quot;</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">api_key));</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> request </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> builder</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">body</span><span style="color: #C9D1D9">(())</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to build a connection request to Deepgram.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // connect to deepgram</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (deepgram_socket, _) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_async</span><span style="color: #C9D1D9">(request)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to connect to Deepgram.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (deepgram_sender, deepgram_reader) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram_socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (callsid_tx, callsid_rx) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">channel</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">spawn</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">handle_to_subscribers</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state),</span></span>\n<span class="line"><span style="color: #C9D1D9">        callsid_rx,</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgram_reader,</span></span>\n<span class="line"><span style="color: #C9D1D9">    ));</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">spawn</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">handle_from_twilio</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state),</span></span>\n<span class="line"><span style="color: #C9D1D9">        callsid_tx,</span></span>\n<span class="line"><span style="color: #C9D1D9">        this_receiver,</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgram_sender,</span></span>\n<span class="line"><span style="color: #C9D1D9">    ));</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Incoming Twilio connections hitting <code is:raw>/twilio</code> will be first directed to the function\r\n<code is:raw>twilio_handler</code> where the websocket upgrade will be performed. Then <code is:raw>handle_socket</code> will split the websocket connection\r\ninto a receiver and a sender, open up an entirely new websocket connection to Deepgram, split the Deepgram websocket\r\nconnection into a receiver and a sender, and spawn tasks which call the functions <code is:raw>handle_to_subscribers</code> and\r\n<code is:raw>handle_from_twilio</code> which take these receivers and senders as arguments. A oneshot channel is also set up so that\r\n<code is:raw>handle_from_twilio</code> can send the <code is:raw>callsid</code> of the Twilio call to <code is:raw>handle_to_subscribers</code> in a thread-safe manner -\r\nthe <code is:raw>callsid</code> is not yet known when these initial websocket connections are established, it only becomes available\r\nwhen Twilio sends this information in a Twilio <code is:raw>start</code> event websocket message.</p>\n<p>Let\u2019s now define the <code is:raw>handle_to_subscribers</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_to_subscribers</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    callsid_rx</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Receiver</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> deepgram_receiver</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">&gt;&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid_rx</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to receive callsid from handle_from_twilio.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram_receiver</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">get_mut</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">callsid) {</span></span>\n<span class="line"><span style="color: #8B949E">            // send the message to all subscribers concurrently</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> futs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">iter_mut</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">subscriber</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> subscriber</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">()));</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">future</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">join_all</span><span style="color: #C9D1D9">(futs)</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">            // if we successfully sent a message then the subscriber is still connected</span></span>\n<span class="line"><span style="color: #8B949E">            // other subscribers should be removed</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9">subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">zip</span><span style="color: #C9D1D9">(results)</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">filter_map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">(subscriber, result)</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> result</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">is_ok</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> subscriber))</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">collect</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function first waits to receive the <code is:raw>callsid</code>\r\nfrom <code is:raw>handle_from_twilio</code> and then proceeds to read messages off the Deepgram websocket receiver, broadcasting all\r\nmessages that it obtains to all subscribers to that <code is:raw>callsid</code>.</p>\n<p>Now let\u2019s define <code is:raw>handle_from_twilio</code> as follows:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_from_twilio</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    callsid_tx</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Sender</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> this_receiver</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> deepgram_sender</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitSink</span><span style="color: #C9D1D9">&lt;</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">        tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    &gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> buffer_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        inbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">        outbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">        inbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        outbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // wrap our oneshot in an Option because we will need it in a loop</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> callsid_tx </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid_tx);</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> callsid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> this_receiver</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> msg </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(msg) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> msg {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Result</span><span style="color: #C9D1D9">&lt;twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Event</span><span style="color: #C9D1D9">, _&gt; </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">serde_json</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from_str</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">msg);</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(event) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event {</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">event_type {</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Start</span><span style="color: #C9D1D9">(start) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #8B949E">                        // the &quot;start&quot; event only happens once, so having our oneshot in here is kosher</span></span>\n<span class="line"><span style="color: #C9D1D9">                        callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">                        // sending this callsid on our oneshot will let `handle_to_subscribers` know the callsid</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid_tx) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid_tx</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">take</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">                            callsid_tx</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to send callsid to handle_to_subscribers.&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">                        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">                        // make a new set of subscribers for this call, using the callsid as the key</span></span>\n<span class="line"><span style="color: #C9D1D9">                        state</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">entry</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid)</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">or_default</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">                    }</span></span>\n<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(media) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(mixed) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">process_twilio_media</span><span style="color: #C9D1D9">(media, </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data) {</span></span>\n<span class="line"><span style="color: #8B949E">                            // send the audio on to deepgram</span></span>\n<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> deepgram_sender</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(mixed)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.await</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">is_err</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">                            {</span></span>\n<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">break</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">                            }</span></span>\n<span class="line"><span style="color: #C9D1D9">                        }</span></span>\n<span class="line"><span style="color: #C9D1D9">                    }</span></span>\n<span class="line"><span style="color: #C9D1D9">                }</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // close and remove the subscribers, if we have a callsid</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">callsid) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscriber </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> subscribers {</span></span>\n<span class="line"><span style="color: #8B949E">                // we don&#39;t really care if this succeeds or fails as we are closing/dropping these</span></span>\n<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> _ </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscriber</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function begins by setting up an object to help handle the audio buffers\r\nfrom the inbound and outbound callers. We then start reading websocket messages from the Twilio websocket receiver.\r\nWhen we obtain the Twilio <code is:raw>start</code> event message, we can grab the <code is:raw>callsid</code>, use it to set up subscribers\r\nto this call, and send it off to the <code is:raw>handle_to_subscribers</code> task via the oneshot channel we set up earlier. Subsequent\r\nTwilio media events are then processed via <code is:raw>audio::process_twilio_media</code>, and when a buffer of mixed stereo audio is\r\nready, we send it to Deepgram via the Deepgram websocket sender.</p>\n<p>Finally, when Twilio closes the connection to our server (or some error occurs), we must remember to remove all subscribers\r\nfrom the subscriber <code is:raw>HashMap</code> and close the connections to those subscribers.</p>\n<h2 id="processing-the-audio-in-audiors">Processing the Audio in <code is:raw>audio.rs</code></h2>\n<p>When discussing the Twilio websocket handler, the processing of Twilio media events was delegated to <code is:raw>audio::process_twilio_media</code>.\r\nWe will define this function in <code is:raw>src/audio.rs</code>. Make <code is:raw>src/audio.rs</code> with the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">twilio_response;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_SILENCE</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0xff</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">8</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MIN_TWILIO_CHUNKS_TO_MIX</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> inbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> outbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> inbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> outbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;, current_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">, previous_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> time_lost </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> current_timestamp </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> previous_timestamp </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #8B949E">        // here we have received a timestamp that is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous timestamp</span></span>\n<span class="line"><span style="color: #8B949E">        // this occasionally occurs and is unexpected behavior from Twilio</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        current_timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> (previous_timestamp </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    };</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> silence </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">iter</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">repeat</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">MULAW_SILENCE</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">take</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> time_lost </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(silence);</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">/// (1) decodes twilio media events</span></span>\n<span class="line"><span style="color: #8B949E">/// (2) pads inbound and outbound buffers with silence if needed</span></span>\n<span class="line"><span style="color: #8B949E">/// (3) if there is more than MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms</span></span>\n<span class="line"><span style="color: #8B949E">///     of audio in both inbound and outbound audio buffers, drains as much audio from</span></span>\n<span class="line"><span style="color: #8B949E">///     both buffers as can be mixed together, mixes and returns this audio</span></span>\n<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">process_twilio_media</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">    media</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;&gt; {</span></span>\n<span class="line"><span style="color: #8B949E">    // NOTE: when Twilio sends media data, it should send TWILIO_MS_PER_CHUNK = 20 ms audio chunks</span></span>\n<span class="line"><span style="color: #8B949E">    // at a time, where each ms of audio is MULAW_BYTES_PER_MS = 8 bytes</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> media_chunk </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">base64</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">decode</span><span style="color: #C9D1D9">(media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">payload)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> media_chunk_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> media_chunk</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media_chunk_size </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #8B949E">        // here, the Twilio media chunk size is not the expected size of TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS bytes</span></span>\n<span class="line"><span style="color: #8B949E">        // this occasionally occurs and is unexpected behavior from Twilio</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #8B949E">    // NOTE: There are rare cases where the timestamp is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous chunk</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">timestamp</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">&gt;()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // pad the inbound or outbound buffer with silence if needed depending on timestamp info</span></span>\n<span class="line"><span style="color: #8B949E">    // and then add the audio data from the twilio media message to the buffer</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">track </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;inbound&quot;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer,</span></span>\n<span class="line"><span style="color: #C9D1D9">            timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">            buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_last_timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">        );</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(media_chunk);</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_last_timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp;</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">track </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;outbound&quot;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer,</span></span>\n<span class="line"><span style="color: #C9D1D9">            timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">            buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_last_timestamp,</span></span>\n<span class="line"><span style="color: #C9D1D9">        );</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(media_chunk);</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_last_timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">    // we will return mixed audio of MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms (or more)</span></span>\n<span class="line"><span style="color: #8B949E">    // corresponding to MIN_TWILIO_CHUNKS_TO_MIX = 20 twilio media messages (or more)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> minimum_chunk_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MIN_TWILIO_CHUNKS_TO_MIX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> mixable_data_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">cmp</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">min</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">(),</span></span>\n<span class="line"><span style="color: #C9D1D9">    );</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> mixable_data_size </span><span style="color: #FF7B72">&gt;=</span><span style="color: #C9D1D9"> minimum_chunk_size {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> mixed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">with_capacity</span><span style="color: #C9D1D9">(mixable_data_size </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> inbound_buffer_segment </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">mixable_data_size);</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> outbound_buffer_segment </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">mixable_data_size);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (inbound, outbound) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> inbound_buffer_segment</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">zip</span><span style="color: #C9D1D9">(outbound_buffer_segment) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            mixed</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(inbound);</span></span>\n<span class="line"><span style="color: #C9D1D9">            mixed</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(outbound);</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(mixed)</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">None</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Twilio sends its audio data as 8000 Hz <code is:raw>mulaw</code> data, independently for inbound and outbound callers. Additionally, sometimes Twilio\r\n(or the phones which use Twilio) will drop packets of audio. The function <code is:raw>process_twilio_media</code>, then, handles inserting silence\r\nshould there be dropped packets or timing issues, and mixes together the inbound and outbound audio into a valid stereo audio stream\r\nwhich we can then send to Deepgram. Several of the finer details are explained in the comments in this file.</p>\n<h2 id="running-the-server-and-testing-with-websocat">Running the Server and Testing with websocat</h2>\n<p>Let\u2019s use websocat to quickly test our server.</p>\n<p>Run the server with the following:</p>\n<p>DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY cargo run</p>\n<p>replacing <code is:raw>INSERT_YOUR_DEEPGRAM_API_KEY</code> with your Deepgram API Key.</p>\n<p>This server will need to be accessible to Twilio, and this is set up in the TwiML Bin you created in the previous <a href="#setting-up-a-twiml-bin">Setting Up a TwiML Bin</a> section. If you are using <code is:raw>ngrok</code>, make sure your TwiML Bin\r\nis updated with the current <code is:raw>ngrok</code> URL.</p>\n<p>Now, call your Twilio number with one phone, and answer the call on the phone your Twilio number forwards to.\r\nThen, latch onto the proxy server via the client endpoint with websocat:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">websocat ws://localhost:5000/client</span></span></code></pre>\n<p>Websocat should immediately send you a message containing a list of the <code is:raw>callsid</code>s of all active calls (which in this case should be one).\r\nReply to the message with the <code is:raw>callsid</code> by copy/pasting and hitting enter:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/connect_to_callsid.png" alt="Subscribe to the call via the `callsid`." style="display: block;margin-left: auto;margin-right: auto;" />\n<p>You should start to see transcription results appear in your websocat session in real time:</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/websocat_streaming_asr_results.png" alt="Websocat streaming ASR results." style="display: block;margin-left: auto;margin-right: auto;" />\n<p>Feel free to try setting up multiple Twilio numbers, and multiple client sessions!</p>\n<h2 id="making-a-docker-image-for-the-server">Making a Docker Image for the Server</h2>\n<p>Let\u2019s go through the process of building a Docker image so that this server can be portably deployed. We\u2019ll start by making a <code is:raw>rust-toolchain</code> file with the following contents:</p>\n<p>1.61</p>\n<p>(quite the simple file!). This will ensure that when you run <code is:raw>cargo build</code> (either manually, or as part of building a Docker image), the same version of Rust will be used\r\nevery time.</p>\n<p>Now, let\u2019s create a Dockerfile called <code is:raw>Dockerfile</code> and give it the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">FROM ubuntu:22.04 as builder</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">LABEL maintainer=&quot;YOUR_INFO&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">ENV DEBIAN_FRONTEND=noninteractive</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">RUN apt-get update &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    apt-get install -y --no-install-recommends \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        ca-certificates \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        clang \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        curl \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libpq-dev \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libssl-dev \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        pkg-config</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">COPY rust-toolchain /rust-toolchain</span></span>\n<span class="line"><span style="color: #c9d1d9">RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(cat /rust-toolchain) &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    . $HOME/.cargo/env</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">COPY . /deepgram-twilio-streaming-rust</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">RUN . $HOME/.cargo/env &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    cargo install --path /deepgram-twilio-streaming-rust --root /</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">FROM ubuntu:22.04</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">LABEL maintainer=&quot;YOUR_INFO&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">ENV DEBIAN_FRONTEND=noninteractive</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">RUN apt-get update &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    apt-get install -y --no-install-recommends \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        ca-certificates \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libpq5 \\</span></span>\n<span class="line"><span style="color: #c9d1d9">        libssl3 &amp;&amp; \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    apt-get clean</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">COPY --from=builder /bin/deepgram-twilio-streaming-rust /bin/deepgram-twilio-streaming-rust</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">ENTRYPOINT [&quot;/bin/deepgram-twilio-streaming-rust&quot;]</span></span>\n<span class="line"><span style="color: #c9d1d9">CMD [&quot;&quot;]</span></span></code></pre>\n<p>Replace <code is:raw>YOUR_INFO</code> with your name and email address (for me, for example, this would be <code is:raw>Nikola Whallon &lt;nikola@deepgram.com&gt;</code>).\r\nThe key bits to take away are:</p>\n<ul>\n<li>we start with an Ubuntu 22.04 image</li>\n<li>we install several dependencies via <code is:raw>apt</code></li>\n<li>we use the <code is:raw>rust-toolchain</code> and build+install our executable with <code is:raw>cargo install</code></li>\n<li>we set the <code is:raw>ENTRYPOINT</code> to <code is:raw>/bin/deepgram-twilio-streaming-rust</code>, with no command-line arguments (<code is:raw>CMD</code>)</li>\n</ul>\n<p>Now with the Dockerfile written, build the Docker image with:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker build -t your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0 -f Dockerfile .</span></span></code></pre>\n<p>If you will be pushing this image to Docker Hub so that the image can be pulled from a remote server (like an AWS instance),\r\nreplace <code is:raw>your-docker-hub-account</code> with your Docker Hub account. For local testing, simply using the image name <code is:raw>deepgram-twilio-streaming-rust:0.1.0</code>\r\n(or whatever you would like) will work. You are also free to pull and use <code is:raw>deepgram/deepgram-twilio-treaming-rust:0.1.0</code>!</p>\n<p>Now you can run the Docker image in a container locally via:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker run -e PROXY_URL=0.0.0.0:5000 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    -p 5000:5000 your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0</span></span></code></pre>\n<p>replacing <code is:raw>INSERT_YOUR_DEEPGRAM_API_KEY</code> with your Deepgram API Key, and make sure the Docker image name matches what you built. This will\r\nrun the image in a container in your current terminal, but you can include a <code is:raw>-d</code> to detach the process to run in the background. If you do this,\r\nyou will need to keep track of whether or not it is running with <code is:raw>docker ps</code> and similar commands.</p>\n<p>Refer to the <a href="https://docs.docker.com/engine/reference/commandline/cli/">Docker CLI documentation</a> for more info.</p>\n<p>Now that the Twilio proxy server should be running in a Docker container, feel free to give your Twilio number a call, and subscribe to the call\r\nwith websocat by doing:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9"> websocat ws://localhost:5000/client</span></span></code></pre>\n<p>and replying to the server with the <code is:raw>callsid</code> it sends you.</p>\n<p>You should be all set to push this Docker image to your Docker Hub (or use ours: <code is:raw>deepgram/deepgram-twilio-treaming-rust:0.1.0</code>), and pull\r\nand use it on your cloud server! You will need to provide the additional environment variables <code is:raw>CERT_PEM</code> and <code is:raw>KEY_PEM</code> to do this, making\r\nsure those files are accessible to the Docker continer by using <code is:raw>-v</code>, and you may need to specify\r\nthe port as <code is:raw>443</code> in the <code is:raw>PROXY_URL</code> and use <code is:raw>-p 443:443</code> among other subtle changes.\r\nYou should refer to your cloud server provider\u2019s documentation on setting up an https/wss enabled server with certificates. As an example,\r\nhere\u2019s how I spun up the server app on an AWS Ubuntu 20.04 instance:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker run -v /home/ubuntu:/foo -p 443:443 -d \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    -e PROXY_URL=0.0.0.0:443 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    -e CERT_PEM=/foo/cert.pem -e KEY_PEM=/foo/key.pem \\</span></span>\n<span class="line"><span style="color: #c9d1d9">    deepgram/deepgram-twilio-streaming-rust:0.1.0</span></span></code></pre>\n<h2 id="further-development">Further Development</h2>\n<p>This should get you up and running with an almost-production-ready Twilio-Deepgram proxy server, written in Rust. There are a few pieces\r\nthat have been left out, for the sake of brevity and for the sake of being agnostic to the needs of your desired system. For example, calls to the\r\n<code is:raw>/client</code> endpoint are currently entirely unauthenticated, and indeed calls to <code is:raw>/twilio</code> are also unauthenticated (see\r\n<a href="https://www.twilio.com/docs/usage/security">these Twilio docs</a> for more details). For a fully-production-ready service, you should\r\ntake authentication into consideration. Also, no logging or telemetry is presented in the proxy server.</p>\n<p>Finally, you will very likely need to build a front-end to interact with the server and properly parse the JSON messages being streamed.\r\nwebsocat is great for testing, but is not a reasonable final solution for subscribing to calls!</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/deepgram-twilio-streaming-rust/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>In a <a href="https://blog.deepgram.com/deepgram-twilio-streaming/">previous blog post</a>, we showed how to build an integration
between Deepgram and Twilio for real-time, live transcription using Python. In this post, we will revisit this integration and implement
it in Rust. The <a href="https://www.rust-lang.org/">Rust programming language</a> is a favorite among Deepgram engineers, and is known for its
type safety, performance, and powerful memory management achieved via a strict ownership system which eliminates entire categories of bugs!</p>
<p>We will be building our Twilio streaming app using the <a href="https://docs.rs/axum/latest/axum/">Axum web framework</a>
which is built on top of the powerful and popular asynchronous <a href="https://tokio.rs/">Tokio crate</a>. Using Rust with
an efficient asynchronous runtime like Tokio is a good choice for reliable and performant web app backends.</p>
<h2 id="pre-requisites">Pre-requisites</h2>
<p>You will need:</p>
<ul>
<li>a <a href="https://www.twilio.com/try-twilio">Twilio account</a> with a Twilio number (the free tier will work)</li>
<li>a Deepgram API Key - <a href="https://console.deepgram.com/signup">get an API Key here</a></li>
<li><a href="https://www.rust-lang.org/tools/install">Rust installed</a></li>
<li><em>(optional)</em> <a href="https://ngrok.com/">ngrok</a> to let Twilio access a local server</li>
</ul>
<h2 id="setting-up-a-twiml-bin">Setting Up a TwiML Bin</h2>
<p>We will use TwiML Bins to make Twilio fork audio data from phone calls to a server that we will write.
In the Twilio Console, search for TwiML Bin, and click “Create TwiML Bin.”</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025616/blog/2022/06/deepgram-twilio-streaming-rust/assets/find_twiml_bin.png" alt="Navigate to your TwiML Bins." style="max-width: 606px;display: block;margin-left: auto;margin-right: auto;">
<p>Give the TwiML Bin a “Friendly Name” and enter the following as the the contents of the TwiML Bin:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;?</span><span style="color: #7EE787">xml</span><span style="color: #79C0FF"> version</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;1.0&quot;</span><span style="color: #79C0FF"> encoding</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9">?&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">Response</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Start</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">Stream</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;wss://INSERT_YOUR_SERVER_URL/twilio&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">track</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;both_tracks&quot;</span><span style="color: #C9D1D9">/&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">Start</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Say</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">voice</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;woman&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">language</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;&quot;This call may be monitored or recorded for quality purposes.&quot;&lt;/</span><span style="color: #7EE787">Say</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Dial</span><span style="color: #C9D1D9">&gt;+11231231234&lt;/</span><span style="color: #7EE787">Dial</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">Response</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>In the <code>Dial</code> section, enter your phone number. Where it says <code>INSERT_YOUR_SERVER_URL</code> insert the URL where you will be hosting the server.
Without having to spin up and configure a cloud instance, you can use <code>ngrok</code> to expose a port on localhost. To do this for, say,
port 5000, run:</p>
<p>ngrok http 5000</p>
<p><code>ngrok</code> will then generate a public URL which forwards requests to your computer at <code>localhost:5000</code>. This URL may look something like:
<code>c52e-71-212-124-133.ngrok.io</code> - enter this URL in your TwiML Bin.</p>
<p>Now the last thing to do on the Twilio Console before hopping over to write our server code is to hook up one of your Twilio numbers to this TwiML Bin.
Go to the “Develop” tab on the left side of the Twilio Console, navigate to <code>Phone Numbers -&gt; Manage -&gt; Active numbers</code>, and click on your Twilio number in the list.
Then, under the field “A Call Comes In”, click the drop-down and select “TwiML Bin”; for the field directly next to this one, click the drop-down and select
the TwiML Bin you just created.
Click “Save” at the bottom of the Twilio Console.</p>
<h2 id="the-twilio-proxy-server">The Twilio Proxy Server</h2>
<p>The system that we will be building is illustrated here:</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1654025618/blog/2022/06/deepgram-twilio-streaming-rust/assets/deepgram_twilio_diagram.png" alt="The big picture." style="display: block;margin-left: auto;margin-right: auto;">
<p>We want audio from phone calls going through Twilio’s server to be forked to the proxy server we will be writing. The proxy server then buffers
and processes the audio, sends it to Deepgram, and receives transcripts back from Deepgram. The proxy server also accepts client connections which
subscribe to ongoing calls, and whenever the server receives transcripts from Deepgram for those calls, it broadcasts those transcripts to all subscribers.
This will all be done via WebSockets at near-real-time! Typical latencies for this system hover around 500 ms.</p>
<p>Download the code from <a href="https://github.com/deepgram-devs/deepgram-twilio-streaming-rust">this repository</a>.</p>
<p>Below we will go through creating this project from scratch, but this will also act as a comprehensive code-tour of the repository.
If you are keen on trying the server out right away and perusing the code
more at your leisure, feel free to skip to the <a href="#running-the-server-and-testing-with-websocat">Running the Server and Testing with websocat</a> section!</p>
<h2 id="setup-the-rust-project-and-mainrs">Setup the Rust Project and <code>main.rs</code></h2>
<p>Create a new Rust project using <code>cargo new</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cargo new deepgram-twilio-streaming-rust</span></span></code></pre>
<p>Go into the project directory and edit the <code>Cargo.toml</code> file, giving it the following contents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span><span style="color: #FFA657">package</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">name = </span><span style="color: #A5D6FF">&quot;deepgram-twilio-streaming-rust&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">version = </span><span style="color: #A5D6FF">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">edition = </span><span style="color: #A5D6FF">&quot;2021&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">[</span><span style="color: #FFA657">dependencies</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">axum = { version = </span><span style="color: #A5D6FF">&quot;0.5.1&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;ws&quot;</span><span style="color: #C9D1D9">] }</span></span>
<span class="line"><span style="color: #C9D1D9">axum-server = { version = </span><span style="color: #A5D6FF">&quot;0.4.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;tls-rustls&quot;</span><span style="color: #C9D1D9">] }</span></span>
<span class="line"><span style="color: #C9D1D9">base64 = </span><span style="color: #A5D6FF">&quot;0.13.0&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">futures = </span><span style="color: #A5D6FF">&quot;0.3.21&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">http = </span><span style="color: #A5D6FF">&quot;0.2.6&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">serde = { version = </span><span style="color: #A5D6FF">&quot;1.0.136&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;derive&quot;</span><span style="color: #C9D1D9">] }</span></span>
<span class="line"><span style="color: #C9D1D9">serde_json = </span><span style="color: #A5D6FF">&quot;1.0.79&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">tokio = { version = </span><span style="color: #A5D6FF">&quot;1.17.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;macros&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rt&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;rt-multi-thread&quot;</span><span style="color: #C9D1D9">] }</span></span>
<span class="line"><span style="color: #C9D1D9">tokio-tungstenite = { version = </span><span style="color: #A5D6FF">&quot;0.15.0&quot;</span><span style="color: #C9D1D9">, features = [</span><span style="color: #A5D6FF">&quot;native-tls&quot;</span><span style="color: #C9D1D9">] }</span></span>
<span class="line"><span style="color: #C9D1D9">tungstenite = </span><span style="color: #A5D6FF">&quot;0.14.0&quot;</span></span></code></pre>
<p>Now let’s modify <code>src/main.rs</code>. Let’s begin by adding the <code>use</code> statements we will need, and defining some modules:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">routing</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">get, </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Router</span><span style="color: #C9D1D9">};</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tls_rustls</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">RustlsConfig</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">lock</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">collections</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">handlers</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">state</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio_response</span><span style="color: #C9D1D9">;</span></span></code></pre>
<p>The modules we declared are: <code>audio</code>, <code>handlers</code>, <code>message</code>, <code>state</code>, and <code>twilio_response</code>.
We will go over each one, but briefly these will be for the following:</p>
<ul>
<li><code>audio</code>: handle processing of audio data from Twilio</li>
<li><code>handlers</code>: handlers for the websocket endpoints <code>/twilio</code> and <code>/client</code></li>
<li><code>message</code>: a helper module to convert between <code>axum</code> and <code>tungstenite</code> websocket messages</li>
<li><code>state</code>: will contain the definition for the global state of the server</li>
<li><code>twilio_response</code>: will contain definitions for Twilio’s websocket message shape</li>
</ul>
<p>Now, let’s start defining our <code>main</code> function and set up the state to be shared among the handlers:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">#[tokio</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">main]</span></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> proxy_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;PROXY_URL&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap_or_else</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">_</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;127.0.0.1:5000&quot;</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">());</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> deepgram_url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_URL&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap_or_else</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">_</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;wss://api.deepgram.com/v1/listen?encoding=mulaw&amp;sample_rate=8000&amp;channels=2&amp;multichannel=true&quot;</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">());</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> api_key </span><span style="color: #FF7B72">=</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Using this server requires a Deepgram API Key.&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> cert_pem </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;CERT_PEM&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">ok</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> key_pem </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">env</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">var</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;KEY_PEM&quot;</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">ok</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> config </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> (cert_pem, key_pem) {</span></span>
<span class="line"><span style="color: #C9D1D9">        (</span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(cert_pem), </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(key_pem)) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">RustlsConfig</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from_pem_file</span><span style="color: #C9D1D9">(cert_pem, key_pem)</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to make RustlsConfig from cert/key pem files.&quot;</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">        ),</span></span>
<span class="line"><span style="color: #C9D1D9">        (</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        _ </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #D2A8FF">panic!</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to start - invalid cert/key.&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> state </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        deepgram_url,</span></span>
<span class="line"><span style="color: #C9D1D9">        api_key,</span></span>
<span class="line"><span style="color: #C9D1D9">        subscribers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Mutex</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">HashMap</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">()),</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span></code></pre>
<p>Our <code>main</code> function is set up to be asynchronous via the use of the <code>#[tokio::main]</code> macro.
<code>main</code> and every async function that <code>main</code> then calls will be executed by
the Tokio runtime. Inside <code>main</code> we grab the following environment variables:</p>
<ul>
<li><code>PROXY_URL</code>: the URL that this server will run on - by default it will use localhost and port 5000</li>
<li><code>DEEPGRAM_URL</code>: the URL of Deepgram’s streaming endpoint, including query parameters (Twilio audio uses the <code>mulaw</code> encoding with
a sample rate of 8000, and we will be streaming stereo (2 channel) audio)</li>
<li><code>DEEPGRAM_API_KEY</code>: your Deepgram API Key</li>
<li><code>CERT_PEM</code>: an optional environment variable pointing to a <code>cert.pem</code> file used for TLS</li>
<li><code>KEY_PEM</code>: an optional environment variable pointing to a <code>key.pem</code> file used for TLS</li>
</ul>
<p>We use these environment variables to construct an <code>Arc&lt;State&gt;</code> object to store the global server state.</p>
<p>Now, let’s finish filling in our <code>main</code> function by configuring our routes and spinning up the <code>axum</code> server to serve these routes:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Router</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/twilio&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">handlers</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">twilio</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">twilio_handler))</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/client&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">handlers</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">subscriber</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">subscriber_handler))</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">layer</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state));</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> config {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(config) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">bind_rustls</span><span style="color: #C9D1D9">(proxy_url</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">(), config)</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">serve</span><span style="color: #C9D1D9">(app</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into_make_service</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum_server</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">bind</span><span style="color: #C9D1D9">(proxy_url</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">serve</span><span style="color: #C9D1D9">(app</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into_make_service</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.await</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code>axum</code> server is spun up with or without TLS support depending on whether
or not the <code>CERT_PEM</code> and <code>KEY_PEM</code> environment variables are set.</p>
<p>That’s all there is to <code>main.rs</code>! The bulk of the application logic will live in the websocket endpoint handlers, but before diving into them
let’s go over some of the objects the server will use.</p>
<h2 id="staters-twilio_responsers-and-messagers"><code>state.rs</code>, <code>twilio_response.rs</code>, and <code>message.rs</code></h2>
<p>Create the file <code>src/state.rs</code> and give it the following contents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">lock</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">collections</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">State</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> deepgram_url</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> api_key</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Mutex</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">HashMap</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">&gt;&gt;&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This will represent the global state of the server. The server will need to know the URL of Deepgram’s streaming endpoint and a Deepgram API Key to use as authentication when connecting to this endpoint. Additionally, the server will contain
a <code>HashMap</code> of websocket handlers for subscribers, one for each incoming connection from Twilio. These websocket handlers will be accessed
via the <code>callsid</code> of the Twilio call, and wrapped in a <code>Mutex</code> to handle concurrency.</p>
<p>Next, create the file <code>src/twilio_response.rs</code> and give it the following contents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">    //! Definitions for the Twilio messages we need to parse</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">serde</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Event</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> sequence_number</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    #[serde(flatten)]</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> event_type</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> stream_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">enum</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Start</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">EventStart</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventType</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">default</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Default</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">default</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventStart</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> account_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> stream_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> call_sid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> tracks</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> media_format</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">MediaFormat</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #C9D1D9">#[serde(rename_all </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;camelCase&quot;</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">MediaFormat</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> encoding</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> sample_rate</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> channels</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Serialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Deserialize</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Default</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">Debug</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> track</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> chunk</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> payload</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>These are just basic structs defining the shape of the messages Twilio will send our server. Feel free to checkout
<a href="https://www.twilio.com/docs/voice/twiml/stream#websocket-messages-from-twilio">Twilio’s documentation</a> for more details.</p>
<p>Finally, create the file <code>src/message.rs</code> and give it the following contents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">#[derive(</span><span style="color: #FFA657">Clone</span><span style="color: #C9D1D9">)]</span></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">enum</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;),</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">protocol</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">CloseFrame</span><span style="color: #C9D1D9">&lt;&#39;</span><span style="color: #FFA657">static</span><span style="color: #C9D1D9">&gt;&gt;),</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">extract</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>
<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Self</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>
<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>
<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(item</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> item {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(text),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(binary),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Ping</span><span style="color: #C9D1D9">(ping),</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Pong</span><span style="color: #C9D1D9">(pong),</span></span>
<span class="line"><span style="color: #8B949E">            // will deal with this later</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(_) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This is also a straightforward module which creates our own websocket <code>Message</code> type which can
be used to convert to and from <code>axum</code> websocket messages and <code>tungstenite</code> websocket messages.</p>
<h2 id="the-websocket-endpoint-handlers">The WebSocket Endpoint Handlers</h2>
<p>Now let’s get into the core logic of the server. We need to define functions to handle client/subscriber
connections to <code>/client</code> and Twilio connections to <code>/twilio</code>. Let’s start with the client handler.</p>
<p>Start by creating <code>src/handlers/mod.rs</code> with the following contents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">subscriber</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mod</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio</span><span style="color: #C9D1D9">;</span></span></code></pre>
<p>This simply declares the modules we will use to handle the client/subsriber and Twilio websocket connections.</p>
<p>Then, create the file <code>src/handlers/subscriber.rs</code> with the following contents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">message</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">},</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">subscriber_handler</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state)</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">on_upgrade</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">socket</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket, state))</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #8B949E">    // send these keys (which will be twilio callsids) to the client</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> keys </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">keys</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">key</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> key</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">to_string</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">collect</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">    socket</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(keys)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to send callsids to client.&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">    // wait for the first message from the client</span></span>
<span class="line"><span style="color: #8B949E">    // and interpret it as the callsid to subscribe to</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">recv</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> msg </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg);</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(callsid) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> msg {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">get_mut</span><span style="color: #C9D1D9">(callsid) {</span></span>
<span class="line"><span style="color: #C9D1D9">                subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(socket);</span></span>
<span class="line"><span style="color: #C9D1D9">            }</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>As we saw in <code>main.rs</code>, <code>subscriber_handler</code> is the function which will be called when a client tries to connect to the
<code>/client</code> endpoint of our server. From there, we perform an upgrade from HTTP to websockets. Then, we try to obtain the
subscribers <code>HashMap</code> from our server’s global state and send to the client a list of the <code>callsid</code>s of all ongoing
Twilio calls that the server is handling. The server then waits for a single message back from the client, and it interprets
this message as the <code>callsid</code> to subscribe to. If the server receives a valid <code>callsid</code>, it will push the websocket handle
into the subscribers <code>HashMap</code>. When the Twilio handler receives a transcript for that <code>callsid</code>, it will broadcast it to all
subscribers, including the one we just pushed. That’s it for <code>subscriber.rs</code>!</p>
<p>Now let’s look at the bulkier <code>twilio.rs</code>. Create <code>src/handlers/twilio.rs</code>. Let’s build this module
piece by piece, starting with some <code>use</code> statements:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">audio;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">message</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #FFA657">state</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">twilio_response;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">axum</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">extract</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">ws</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">},</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">channel</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">oneshot;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">sink</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">SinkExt</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">stream</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">SplitSink</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">StreamExt</span><span style="color: #C9D1D9">},</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{</span><span style="color: #FFA657">convert</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">From</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">sync</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">};</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">net</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">{connect_async, </span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFA657">Then</span><span style="color: #C9D1D9">, add the following functions</span><span style="color: #FF7B72">:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">twilio_handler</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocketUpgrade</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">Extension</span><span style="color: #C9D1D9">(state)</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Extension</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">impl</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">IntoResponse</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    ws</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">on_upgrade</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">socket</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket, state))</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_socket</span><span style="color: #C9D1D9">(socket</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (_this_sender, this_receiver) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">    // prepare the connection request with the api key authentication</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> builder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">http</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Request</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">builder</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">method</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">http</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Method</span><span style="color: #FF7B72">::</span><span style="color: #79C0FF">GET</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">uri</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">deepgram_url);</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> builder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> builder</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">header</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Authorization&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #D2A8FF">format!</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Token {}&quot;</span><span style="color: #C9D1D9">, state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">api_key));</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> request </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> builder</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">body</span><span style="color: #C9D1D9">(())</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to build a connection request to Deepgram.&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">    // connect to deepgram</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (deepgram_socket, _) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">connect_async</span><span style="color: #C9D1D9">(request)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to connect to Deepgram.&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (deepgram_sender, deepgram_reader) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram_socket</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> (callsid_tx, callsid_rx) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">channel</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">spawn</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">handle_to_subscribers</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state),</span></span>
<span class="line"><span style="color: #C9D1D9">        callsid_rx,</span></span>
<span class="line"><span style="color: #C9D1D9">        deepgram_reader,</span></span>
<span class="line"><span style="color: #C9D1D9">    ));</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">tokio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">spawn</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">handle_from_twilio</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Arc</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">state),</span></span>
<span class="line"><span style="color: #C9D1D9">        callsid_tx,</span></span>
<span class="line"><span style="color: #C9D1D9">        this_receiver,</span></span>
<span class="line"><span style="color: #C9D1D9">        deepgram_sender,</span></span>
<span class="line"><span style="color: #C9D1D9">    ));</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Incoming Twilio connections hitting <code>/twilio</code> will be first directed to the function
<code>twilio_handler</code> where the websocket upgrade will be performed. Then <code>handle_socket</code> will split the websocket connection
into a receiver and a sender, open up an entirely new websocket connection to Deepgram, split the Deepgram websocket
connection into a receiver and a sender, and spawn tasks which call the functions <code>handle_to_subscribers</code> and
<code>handle_from_twilio</code> which take these receivers and senders as arguments. A oneshot channel is also set up so that
<code>handle_from_twilio</code> can send the <code>callsid</code> of the Twilio call to <code>handle_to_subscribers</code> in a thread-safe manner -
the <code>callsid</code> is not yet known when these initial websocket connections are established, it only becomes available
when Twilio sends this information in a Twilio <code>start</code> event websocket message.</p>
<p>Let’s now define the <code>handle_to_subscribers</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_to_subscribers</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">    callsid_rx</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Receiver</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> deepgram_receiver</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">&gt;&gt;&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid_rx</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.await</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to receive callsid from handle_from_twilio.&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram_receiver</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">get_mut</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">callsid) {</span></span>
<span class="line"><span style="color: #8B949E">            // send the message to all subscribers concurrently</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> futs </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">iter_mut</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">subscriber</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> subscriber</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">()));</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">futures</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">future</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">join_all</span><span style="color: #C9D1D9">(futs)</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">            // if we successfully sent a message then the subscriber is still connected</span></span>
<span class="line"><span style="color: #8B949E">            // other subscribers should be removed</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9">subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">zip</span><span style="color: #C9D1D9">(results)</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">filter_map</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9">(subscriber, result)</span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> result</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">is_ok</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> subscriber))</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">collect</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This function first waits to receive the <code>callsid</code>
from <code>handle_from_twilio</code> and then proceeds to read messages off the Deepgram websocket receiver, broadcasting all
messages that it obtains to all subscribers to that <code>callsid</code>.</p>
<p>Now let’s define <code>handle_from_twilio</code> as follows:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handle_from_twilio</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    state</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Arc</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">State</span><span style="color: #C9D1D9">&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">    callsid_tx</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">oneshot</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Sender</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> this_receiver</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">WebSocket</span><span style="color: #C9D1D9">&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> deepgram_sender</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">SplitSink</span><span style="color: #C9D1D9">&lt;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">WebSocketStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">MaybeTlsStream</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">TcpStream</span><span style="color: #C9D1D9">&gt;&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">        tokio_tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">tungstenite</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Message</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    &gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> buffer_data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        inbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(),</span></span>
<span class="line"><span style="color: #C9D1D9">        outbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">new</span><span style="color: #C9D1D9">(),</span></span>
<span class="line"><span style="color: #C9D1D9">        inbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        outbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">    // wrap our oneshot in an Option because we will need it in a loop</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> callsid_tx </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid_tx);</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> callsid</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">String</span><span style="color: #C9D1D9">&gt; </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">while</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(msg)) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> this_receiver</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">next</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> msg </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(msg);</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Text</span><span style="color: #C9D1D9">(msg) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> msg {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Result</span><span style="color: #C9D1D9">&lt;twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">Event</span><span style="color: #C9D1D9">, _&gt; </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">serde_json</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">from_str</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">msg);</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Ok</span><span style="color: #C9D1D9">(event) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event {</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">match</span><span style="color: #C9D1D9"> event</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">event_type {</span></span>
<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Start</span><span style="color: #C9D1D9">(start) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #8B949E">                        // the &quot;start&quot; event only happens once, so having our oneshot in here is kosher</span></span>
<span class="line"><span style="color: #C9D1D9">                        callsid </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">());</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">                        // sending this callsid on our oneshot will let \`handle_to_subscribers\` know the callsid</span></span>
<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid_tx) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid_tx</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">take</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">                            callsid_tx</span></span>
<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">clone</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">expect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Failed to send callsid to handle_to_subscribers.&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">                        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">                        // make a new set of subscribers for this call, using the callsid as the key</span></span>
<span class="line"><span style="color: #C9D1D9">                        state</span></span>
<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span></span>
<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.await</span></span>
<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">entry</span><span style="color: #C9D1D9">(start</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">call_sid)</span></span>
<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">or_default</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">                    }</span></span>
<span class="line"><span style="color: #C9D1D9">                    </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventType</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Media</span><span style="color: #C9D1D9">(media) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">                        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(mixed) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">audio</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">process_twilio_media</span><span style="color: #C9D1D9">(media, </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data) {</span></span>
<span class="line"><span style="color: #8B949E">                            // send the audio on to deepgram</span></span>
<span class="line"><span style="color: #C9D1D9">                            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> deepgram_sender</span></span>
<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Binary</span><span style="color: #C9D1D9">(mixed)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.await</span></span>
<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">is_err</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">                            {</span></span>
<span class="line"><span style="color: #C9D1D9">                                </span><span style="color: #FF7B72">break</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">                            }</span></span>
<span class="line"><span style="color: #C9D1D9">                        }</span></span>
<span class="line"><span style="color: #C9D1D9">                    }</span></span>
<span class="line"><span style="color: #C9D1D9">                }</span></span>
<span class="line"><span style="color: #C9D1D9">            }</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">    // close and remove the subscribers, if we have a callsid</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(callsid) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> callsid {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscribers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> state</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">lock</span><span style="color: #C9D1D9">()</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(subscribers) </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscribers</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">&amp;</span><span style="color: #C9D1D9">callsid) {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> subscriber </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> subscribers {</span></span>
<span class="line"><span style="color: #8B949E">                // we don&#39;t really care if this succeeds or fails as we are closing/dropping these</span></span>
<span class="line"><span style="color: #C9D1D9">                </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> _ </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> subscriber</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">Message</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">Close</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">None</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">into</span><span style="color: #C9D1D9">())</span><span style="color: #FF7B72">.await</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">            }</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This function begins by setting up an object to help handle the audio buffers
from the inbound and outbound callers. We then start reading websocket messages from the Twilio websocket receiver.
When we obtain the Twilio <code>start</code> event message, we can grab the <code>callsid</code>, use it to set up subscribers
to this call, and send it off to the <code>handle_to_subscribers</code> task via the oneshot channel we set up earlier. Subsequent
Twilio media events are then processed via <code>audio::process_twilio_media</code>, and when a buffer of mixed stereo audio is
ready, we send it to Deepgram via the Deepgram websocket sender.</p>
<p>Finally, when Twilio closes the connection to our server (or some error occurs), we must remember to remove all subscribers
from the subscriber <code>HashMap</code> and close the connections to those subscribers.</p>
<h2 id="processing-the-audio-in-audiors">Processing the Audio in <code>audio.rs</code></h2>
<p>When discussing the Twilio websocket handler, the processing of Twilio media events was delegated to <code>audio::process_twilio_media</code>.
We will define this function in <code>src/audio.rs</code>. Make <code>src/audio.rs</code> with the following contents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">use</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">crate::</span><span style="color: #C9D1D9">twilio_response;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_SILENCE</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0xff</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">8</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MIN_TWILIO_CHUNKS_TO_MIX</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">struct</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> inbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> outbound_buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> inbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> outbound_last_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(buffer</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;, current_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">, previous_timestamp</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> time_lost </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> current_timestamp </span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9"> previous_timestamp </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #8B949E">        // here we have received a timestamp that is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous timestamp</span></span>
<span class="line"><span style="color: #8B949E">        // this occasionally occurs and is unexpected behavior from Twilio</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        current_timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> (previous_timestamp </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    };</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> silence </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">iter</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">repeat</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">MULAW_SILENCE</span><span style="color: #C9D1D9">)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">take</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> time_lost </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">usize</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">    buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(silence);</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">/// (1) decodes twilio media events</span></span>
<span class="line"><span style="color: #8B949E">/// (2) pads inbound and outbound buffers with silence if needed</span></span>
<span class="line"><span style="color: #8B949E">/// (3) if there is more than MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms</span></span>
<span class="line"><span style="color: #8B949E">///     of audio in both inbound and outbound audio buffers, drains as much audio from</span></span>
<span class="line"><span style="color: #8B949E">///     both buffers as can be mixed together, mixes and returns this audio</span></span>
<span class="line"><span style="color: #FF7B72">pub</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">fn</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">process_twilio_media</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">    media</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">twilio_response</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">EventMedia</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">:</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">BufferData</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">-&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Option</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">Vec</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u8</span><span style="color: #C9D1D9">&gt;&gt; {</span></span>
<span class="line"><span style="color: #8B949E">    // NOTE: when Twilio sends media data, it should send TWILIO_MS_PER_CHUNK = 20 ms audio chunks</span></span>
<span class="line"><span style="color: #8B949E">    // at a time, where each ms of audio is MULAW_BYTES_PER_MS = 8 bytes</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> media_chunk </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">base64</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">decode</span><span style="color: #C9D1D9">(media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">payload)</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> media_chunk_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> media_chunk</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media_chunk_size </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #8B949E">        // here, the Twilio media chunk size is not the expected size of TWILIO_MS_PER_CHUNK * MULAW_BYTES_PER_MS bytes</span></span>
<span class="line"><span style="color: #8B949E">        // this occasionally occurs and is unexpected behavior from Twilio</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #8B949E">    // NOTE: There are rare cases where the timestamp is less than TWILIO_MS_PER_CHUNK = 20 ms ahead of the previous chunk</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">timestamp</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">parse</span><span style="color: #FF7B72">::</span><span style="color: #C9D1D9">&lt;</span><span style="color: #FFA657">u32</span><span style="color: #C9D1D9">&gt;()</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">unwrap</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">    // pad the inbound or outbound buffer with silence if needed depending on timestamp info</span></span>
<span class="line"><span style="color: #8B949E">    // and then add the audio data from the twilio media message to the buffer</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">track </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;inbound&quot;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer,</span></span>
<span class="line"><span style="color: #C9D1D9">            timestamp,</span></span>
<span class="line"><span style="color: #C9D1D9">            buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_last_timestamp,</span></span>
<span class="line"><span style="color: #C9D1D9">        );</span></span>
<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(media_chunk);</span></span>
<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_last_timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp;</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> media</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">track </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;outbound&quot;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">pad_with_silence</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">&amp;mut</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer,</span></span>
<span class="line"><span style="color: #C9D1D9">            timestamp,</span></span>
<span class="line"><span style="color: #C9D1D9">            buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_last_timestamp,</span></span>
<span class="line"><span style="color: #C9D1D9">        );</span></span>
<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">extend</span><span style="color: #C9D1D9">(media_chunk);</span></span>
<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_last_timestamp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timestamp;</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">    // we will return mixed audio of MIN_TWILIO_CHUNKS_TO_MIX * TWILIO_MS_PER_CHUNK = 400 ms (or more)</span></span>
<span class="line"><span style="color: #8B949E">    // corresponding to MIN_TWILIO_CHUNKS_TO_MIX = 20 twilio media messages (or more)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> minimum_chunk_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MIN_TWILIO_CHUNKS_TO_MIX</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">TWILIO_MS_PER_CHUNK</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">MULAW_BYTES_PER_MS</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> mixable_data_size </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">std</span><span style="color: #FF7B72">::</span><span style="color: #FFA657">cmp</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">min</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">(),</span></span>
<span class="line"><span style="color: #C9D1D9">        buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">len</span><span style="color: #C9D1D9">(),</span></span>
<span class="line"><span style="color: #C9D1D9">    );</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> mixable_data_size </span><span style="color: #FF7B72">&gt;=</span><span style="color: #C9D1D9"> minimum_chunk_size {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">mut</span><span style="color: #C9D1D9"> mixed </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">Vec</span><span style="color: #FF7B72">::</span><span style="color: #D2A8FF">with_capacity</span><span style="color: #C9D1D9">(mixable_data_size </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> inbound_buffer_segment </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">inbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">mixable_data_size);</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> outbound_buffer_segment </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> buffer_data</span><span style="color: #FF7B72">.</span><span style="color: #C9D1D9">outbound_buffer</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">drain</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #FF7B72">..</span><span style="color: #C9D1D9">mixable_data_size);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (inbound, outbound) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> inbound_buffer_segment</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">zip</span><span style="color: #C9D1D9">(outbound_buffer_segment) {</span></span>
<span class="line"><span style="color: #C9D1D9">            mixed</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(inbound);</span></span>
<span class="line"><span style="color: #C9D1D9">            mixed</span><span style="color: #FF7B72">.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(outbound);</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">Some</span><span style="color: #C9D1D9">(mixed)</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">None</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Twilio sends its audio data as 8000 Hz <code>mulaw</code> data, independently for inbound and outbound callers. Additionally, sometimes Twilio
(or the phones which use Twilio) will drop packets of audio. The function <code>process_twilio_media</code>, then, handles inserting silence
should there be dropped packets or timing issues, and mixes together the inbound and outbound audio into a valid stereo audio stream
which we can then send to Deepgram. Several of the finer details are explained in the comments in this file.</p>
<h2 id="running-the-server-and-testing-with-websocat">Running the Server and Testing with websocat</h2>
<p>Let’s use websocat to quickly test our server.</p>
<p>Run the server with the following:</p>
<p>DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY cargo run</p>
<p>replacing <code>INSERT_YOUR_DEEPGRAM_API_KEY</code> with your Deepgram API Key.</p>
<p>This server will need to be accessible to Twilio, and this is set up in the TwiML Bin you created in the previous <a href="#setting-up-a-twiml-bin">Setting Up a TwiML Bin</a> section. If you are using <code>ngrok</code>, make sure your TwiML Bin
is updated with the current <code>ngrok</code> URL.</p>
<p>Now, call your Twilio number with one phone, and answer the call on the phone your Twilio number forwards to.
Then, latch onto the proxy server via the client endpoint with websocat:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">websocat ws://localhost:5000/client</span></span></code></pre>
<p>Websocat should immediately send you a message containing a list of the <code>callsid</code>s of all active calls (which in this case should be one).
Reply to the message with the <code>callsid</code> by copy/pasting and hitting enter:</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/connect_to_callsid.png" alt="Subscribe to the call via the \`callsid\`." style="display: block;margin-left: auto;margin-right: auto;">
<p>You should start to see transcription results appear in your websocat session in real time:</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1654132200/blog/2022/06/deepgram-twilio-streaming-rust/assets/websocat_streaming_asr_results.png" alt="Websocat streaming ASR results." style="display: block;margin-left: auto;margin-right: auto;">
<p>Feel free to try setting up multiple Twilio numbers, and multiple client sessions!</p>
<h2 id="making-a-docker-image-for-the-server">Making a Docker Image for the Server</h2>
<p>Let’s go through the process of building a Docker image so that this server can be portably deployed. We’ll start by making a <code>rust-toolchain</code> file with the following contents:</p>
<p>1.61</p>
<p>(quite the simple file!). This will ensure that when you run <code>cargo build</code> (either manually, or as part of building a Docker image), the same version of Rust will be used
every time.</p>
<p>Now, let’s create a Dockerfile called <code>Dockerfile</code> and give it the following contents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">FROM ubuntu:22.04 as builder</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">LABEL maintainer=&quot;YOUR_INFO&quot;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">ENV DEBIAN_FRONTEND=noninteractive</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">RUN apt-get update &amp;&amp; \\</span></span>
<span class="line"><span style="color: #c9d1d9">    apt-get install -y --no-install-recommends \\</span></span>
<span class="line"><span style="color: #c9d1d9">        ca-certificates \\</span></span>
<span class="line"><span style="color: #c9d1d9">        clang \\</span></span>
<span class="line"><span style="color: #c9d1d9">        curl \\</span></span>
<span class="line"><span style="color: #c9d1d9">        libpq-dev \\</span></span>
<span class="line"><span style="color: #c9d1d9">        libssl-dev \\</span></span>
<span class="line"><span style="color: #c9d1d9">        pkg-config</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">COPY rust-toolchain /rust-toolchain</span></span>
<span class="line"><span style="color: #c9d1d9">RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(cat /rust-toolchain) &amp;&amp; \\</span></span>
<span class="line"><span style="color: #c9d1d9">    . $HOME/.cargo/env</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">COPY . /deepgram-twilio-streaming-rust</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">RUN . $HOME/.cargo/env &amp;&amp; \\</span></span>
<span class="line"><span style="color: #c9d1d9">    cargo install --path /deepgram-twilio-streaming-rust --root /</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">FROM ubuntu:22.04</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">LABEL maintainer=&quot;YOUR_INFO&quot;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">ENV DEBIAN_FRONTEND=noninteractive</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">RUN apt-get update &amp;&amp; \\</span></span>
<span class="line"><span style="color: #c9d1d9">    apt-get install -y --no-install-recommends \\</span></span>
<span class="line"><span style="color: #c9d1d9">        ca-certificates \\</span></span>
<span class="line"><span style="color: #c9d1d9">        libpq5 \\</span></span>
<span class="line"><span style="color: #c9d1d9">        libssl3 &amp;&amp; \\</span></span>
<span class="line"><span style="color: #c9d1d9">    apt-get clean</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">COPY --from=builder /bin/deepgram-twilio-streaming-rust /bin/deepgram-twilio-streaming-rust</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">ENTRYPOINT [&quot;/bin/deepgram-twilio-streaming-rust&quot;]</span></span>
<span class="line"><span style="color: #c9d1d9">CMD [&quot;&quot;]</span></span></code></pre>
<p>Replace <code>YOUR_INFO</code> with your name and email address (for me, for example, this would be <code>Nikola Whallon &lt;nikola@deepgram.com&gt;</code>).
The key bits to take away are:</p>
<ul>
<li>we start with an Ubuntu 22.04 image</li>
<li>we install several dependencies via <code>apt</code></li>
<li>we use the <code>rust-toolchain</code> and build+install our executable with <code>cargo install</code></li>
<li>we set the <code>ENTRYPOINT</code> to <code>/bin/deepgram-twilio-streaming-rust</code>, with no command-line arguments (<code>CMD</code>)</li>
</ul>
<p>Now with the Dockerfile written, build the Docker image with:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker build -t your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0 -f Dockerfile .</span></span></code></pre>
<p>If you will be pushing this image to Docker Hub so that the image can be pulled from a remote server (like an AWS instance),
replace <code>your-docker-hub-account</code> with your Docker Hub account. For local testing, simply using the image name <code>deepgram-twilio-streaming-rust:0.1.0</code>
(or whatever you would like) will work. You are also free to pull and use <code>deepgram/deepgram-twilio-treaming-rust:0.1.0</code>!</p>
<p>Now you can run the Docker image in a container locally via:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker run -e PROXY_URL=0.0.0.0:5000 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\</span></span>
<span class="line"><span style="color: #c9d1d9">    -p 5000:5000 your-docker-hub-account/deepgram-twilio-streaming-rust:0.1.0</span></span></code></pre>
<p>replacing <code>INSERT_YOUR_DEEPGRAM_API_KEY</code> with your Deepgram API Key, and make sure the Docker image name matches what you built. This will
run the image in a container in your current terminal, but you can include a <code>-d</code> to detach the process to run in the background. If you do this,
you will need to keep track of whether or not it is running with <code>docker ps</code> and similar commands.</p>
<p>Refer to the <a href="https://docs.docker.com/engine/reference/commandline/cli/">Docker CLI documentation</a> for more info.</p>
<p>Now that the Twilio proxy server should be running in a Docker container, feel free to give your Twilio number a call, and subscribe to the call
with websocat by doing:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9"> websocat ws://localhost:5000/client</span></span></code></pre>
<p>and replying to the server with the <code>callsid</code> it sends you.</p>
<p>You should be all set to push this Docker image to your Docker Hub (or use ours: <code>deepgram/deepgram-twilio-treaming-rust:0.1.0</code>), and pull
and use it on your cloud server! You will need to provide the additional environment variables <code>CERT_PEM</code> and <code>KEY_PEM</code> to do this, making
sure those files are accessible to the Docker continer by using <code>-v</code>, and you may need to specify
the port as <code>443</code> in the <code>PROXY_URL</code> and use <code>-p 443:443</code> among other subtle changes.
You should refer to your cloud server provider’s documentation on setting up an https/wss enabled server with certificates. As an example,
here’s how I spun up the server app on an AWS Ubuntu 20.04 instance:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker run -v /home/ubuntu:/foo -p 443:443 -d \\</span></span>
<span class="line"><span style="color: #c9d1d9">    -e PROXY_URL=0.0.0.0:443 -e DEEPGRAM_API_KEY=INSERT_YOUR_DEEPGRAM_API_KEY \\</span></span>
<span class="line"><span style="color: #c9d1d9">    -e CERT_PEM=/foo/cert.pem -e KEY_PEM=/foo/key.pem \\</span></span>
<span class="line"><span style="color: #c9d1d9">    deepgram/deepgram-twilio-streaming-rust:0.1.0</span></span></code></pre>
<h2 id="further-development">Further Development</h2>
<p>This should get you up and running with an almost-production-ready Twilio-Deepgram proxy server, written in Rust. There are a few pieces
that have been left out, for the sake of brevity and for the sake of being agnostic to the needs of your desired system. For example, calls to the
<code>/client</code> endpoint are currently entirely unauthenticated, and indeed calls to <code>/twilio</code> are also unauthenticated (see
<a href="https://www.twilio.com/docs/usage/security">these Twilio docs</a> for more details). For a fully-production-ready service, you should
take authentication into consideration. Also, no logging or telemetry is presented in the proxy server.</p>
<p>Finally, you will very likely need to build a front-end to interact with the server and properly parse the JSON messages being streamed.
websocat is great for testing, but is not a reasonable final solution for subscribing to calls!</p>
<p>If you have any questions, please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/deepgram-twilio-streaming-rust/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
