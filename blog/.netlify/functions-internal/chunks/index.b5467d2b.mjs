import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "the-gestalt-of-apis", "text": "The Gestalt of API\u2019s" }, { "depth": 2, "slug": "making-it-real", "text": "Making It Real" }, { "depth": 2, "slug": "testing-the-api", "text": "Testing the API" }, { "depth": 1, "slug": "to-the-moon", "text": "To the Moon!" }], "source": "\nSo, you've probably heard about OpenAI's [Whisper](https://openai.com/blog/whisper/) model; if not, it's an open-source automatic speech recognition (ASR) model \u2013 a fancy way of saying \"speech-to-text\" or just \"speech recognition.\" What makes Whisper particularly interesting is that it works with multiple languages (at the time of writing, it supports 99 languages) and also supports translation into English. It also has a surprisingly low word error rate (WER) out-of-the-box.\n\nWhisper makes it pretty easy to invoke at the command line, as a CLI:\n\n```shell\n$ curl -sSfLO https://static.deepgram.com/example/tenant_of_wildfell_hall.mp3\r\n$ whisper tenant_of_wildfell_hall.mp3\r\nDetecting language using up to the first 30 seconds. Use `--language` to specify the language\r\nDetected language: English\r\n[00:00.000 --> 00:07.000]  On entering the parlour, we found that Honoured Lady seated in her armchair at the fireside,\r\n[00:07.000 --> 00:27.000]  working away at her knitting.\n```\n\nAnd here's an example of its language detection at work:\n\n```shell\n$ curl -sSfLO https://static.deepgram.com/example/el_caso_leavenworth.mp3\r\n$ whisper el_caso_leavenworth.mp3\r\nDetecting language using up to the first 30 seconds. Use `--language` to specify the language\r\nDetected language: Spanish\r\n[00:00.000 --> 00:02.760]  Mr. Grice exclam\xE9.\r\n[00:02.760 --> 00:05.240]  El mismo me respondi\xF3.\r\n[00:05.240 --> 00:29.240]  Entre usted, Mr. Raymond.\n```\n\nAnd if you don't read Spanish, you can use the CLI to translate:\n\n```shell\n$ whisper el_caso_leavenworth.mp3 --task translate\r\nDetecting language using up to the first 30 seconds. Use `--language` to specify the language\r\nDetected language: Spanish\r\n[00:00.000 --> 00:02.700]  Mr. Grice exclaimed\r\n[00:02.700 --> 00:05.260]  He replied\r\n[00:05.260 --> 00:29.260]  Among you Mr. Raymond\r\n[00:05.240 --> 00:29.240]  Entre usted, Mr. Raymond.\n```\n\nOkay, so maybe that wasn't a very good translation...\n\nCLI's are incredibly useful for getting things working locally ***fast***. But they don't scale well if you want to hook up other software systems. They aren't good for builders.\n\n## The Gestalt of API's\n\nThe moment you start thinking like a builder, you want things that you can piece together. Things that you can scale. Components that can be combined into more than the sum of their parts. That's where APIs come in: you can build services that provide value to any other piece of your system that you want.\n\nWant to build a notetaking app that joins your Zoom calls, records the audio, and saves the transcript for browsing later? Well, you probably don't want to call `whisper` at the command line. You want a little service running, just waiting for requests. You want an API.\n\nSo, let's build one. Specifically, let's build an HTTP API that we can send HTTP POST requests to with a tool like `curl` or [Postman](https://www.postman.com). And let's do it in the data science language *du jour* \u2013 Python.\n\nThe first thing we need to pick out is a web server framework. There are lots available and range from full-fledged development platforms like [Django](https://www.djangoproject.com/), to simple synchronous frameworks like [Flask](https://palletsprojects.com/p/flask/), to pure-Python asynchronous frameworks like [Tornado](https://www.tornadoweb.org/).\n\nFor this example, let's stick with Flask. It does everything we need without bringing too much extra support to the table, and is one of the simplest and easiest web frameworks to get started with. Let's install it:\n\n```shell\n$ pip install flask\n```\n\n> Pro-tip. You should not install Python packages to your system Python distribution. You should always run in a [virtual environment](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment). To [get started](https://blog.deepgram.com/python-virtual-environments/), first create a virtual environment: `python3 -m venv venv`. Then you can activate the virtual environment: `source venv/bin/activate`. That's it! Now you can install Flask or any other libraries using `pip`. Just remember that if you close and re-open your terminal, you'll need to start by activating the virtual environment again.\n\nLet's look at what a \"Hello, World!\" application looks like in Flask:\n\n```python\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/\")\r\ndef handler():\r\n    return \"Hello, World!\"\n```\n\nWell, that looks simple. Does it run? First, save your file as `app.py`. Now, to run it:\n\n```shell\n$ flask run\n```\n\n> Pro-tip. If you named your file something other than `app.py` -- say `hello.py`, you can run it with: `flask --app hello run` (note that there is no `.py` in the invocation).\n\nBy default, Flask listens on port 5000. So let's try hitting our hello-world API endpoint:\n\n```shell\n$ curl localhost:5000\r\nHello, World!\n```\n\nAwesome! It's working! But how do we get our user's or client's data into Flask? That example `curl` command didn't send any file to our Flask server. In fact, our Flask app above only handled HTTP GET requests, and it turns out that GET requests can't have data (or \"bodies,\" in HTTP parlance) attached to them. But don't worry! We just need to change our Flask app to handle POST requests and the data that comes attached to them. This isn't hard, either: we just need to tell Flask that our handler will accept POST requests:\n\n```python\n@app.route('/', methods=['POST'])\r\ndef handler():\r\n    return \"Hello, World!\"\n```\n\nOkay, yeah, that was easy. Now let's put the actual logic for handling an uploaded file (i.e., the \"body\"). But we need a place to put it. Let's create a temporary file to hold the file.\n\n```python\nfrom flask import Flask, abort, request\r\nfrom tempfile import NamedTemporaryFile\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/', methods=['POST'])\r\ndef handler():\r\n    if not request.files:\r\n        # If the user didn't submit any files, return a 400 (Bad Request) error.\r\n        abort(400)\r\n\r\n    # For each file, let's store the results in a list of dictionaries.\r\n    results = []\r\n\r\n    # Loop over every file that the user submitted.\r\n    for filename, handle in request.files.items():\r\n        # Create a temporary file.\r\n        # The location of the temporary file is available in `temp.name`.\r\n        temp = NamedTemporaryFile()\r\n        # Write the user's uploaded file to the temporary file.\r\n        # The file will get deleted when it drops out of scope.\r\n        handle.save(temp)\r\n        # Now we can store the result object for this file.\r\n        results.append({\r\n            'filename': filename,\r\n            'transcript': 'Coming soon!',\r\n        })\r\n\r\n    # This will be automatically converted to JSON.\r\n    return {'results': results}\n```\n\nLet's try running it (if you named your file `app.py`, this is just `flask run`). Can we send a file to it? Let's try the snippet we downloaded earlier:\n\n```shell\n$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000\r\n{\"results\":[{\"filename\":\"file\",\"transcript\":\"Coming soon!\"}]}\n```\n\nPerfect. Now we need to connect it to Whisper.\n\n## Making It Real\n\nAt this point, it's time to get Whisper installed:\n\n```shell\n$ pip install whisper\n```\n\n> Pro-tip. Remember to activate your virtual environment before installing!\n\nWhisper also requires `ffmpeg` to be installed. Use your system package manager to get it installed (`apt`, `pacman`, `brew`, `choco`, etc.) - the package is usually just called `ffmpeg`.\n\nNow, what does a minimal code snippet look like to get Whisper running using Python? Well, something like this:\n\n```python\nimport whisper\r\n\r\n# We can pick which model to load.\r\n# Models can be listed with `whisper.available_models()`.\r\nmodel = whisper.load_model(\"base\")\r\n\r\n# We can pass in a filename or a tensor (PyTorch or numpy).\r\nresult = model.transcribe(\"audio.mp3\")\r\n\r\n# Print the transcript.\r\nprint(result[\"text\"])\n```\n\nOkay. So we load a model and then give it a file to transcribe. That should be easy to add to our Flask app. We only need to load the model once, so we can do that at the top of our app. And we are already writing uploaded data to a temporary file, so it is extra easy. Let's modify the Flask app:\n\n```python\nfrom flask import Flask, abort, request\r\nimport whisper\r\nfrom tempfile import NamedTemporaryFile\r\n\r\n# Load the Whisper model:\r\nmodel = whisper.load_model('base')\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/', methods=['POST'])\r\ndef handler():\r\n    if not request.files:\r\n        # If the user didn't submit any files, return a 400 (Bad Request) error.\r\n        abort(400)\r\n\r\n    # For each file, let's store the results in a list of dictionaries.\r\n    results = []\r\n\r\n    # Loop over every file that the user submitted.\r\n    for filename, handle in request.files.items():\r\n        # Create a temporary file.\r\n        # The location of the temporary file is available in `temp.name`.\r\n        temp = NamedTemporaryFile()\r\n        # Write the user's uploaded file to the temporary file.\r\n        # The file will get deleted when it drops out of scope.\r\n        handle.save(temp)\r\n        # Let's get the transcript of the temporary file.\r\n        result = model.transcribe(temp.name)\r\n        # Now we can store the result object for this file.\r\n        results.append({\r\n            'filename': filename,\r\n            'transcript': result['text'],\r\n        })\r\n\r\n    # This will be automatically converted to JSON.\r\n    return {'results': results}\n```\n\nOkay, everyone. Drumroll, please!\n\n## Testing the API\n\nRun the Flask app, just like ever: `flask run`. And now let's submit our file:\n\n```shell\n$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000\r\n{\"results\":[{\"filename\":\"file\",\"transcript\":\" Hello, this is Steve Fuller. I'm a professor of social epistemology at the University of Warwick. And the question before us today is what is epistemology and why is it important? Epistemology is the branch philosophy that is concerned with the nature of knowledge. Now why is knowledge?\"}]}\n```\n\n*HOLY CRAP IT WORKED!*\n\nAnd because we wrote the Flask app to loop over all submitted files, we can submit multiple files at once:\n\n```shell\n$ curl -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000\r\n{\"results\":[{\"filename\":\"anne_bronte\",\"transcript\":\" On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.\"},{\"filename\":\"anna_green\",\"transcript\":\" Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.\"}]}\n```\n\nOkay, that's seriously cool. If you have [`jq`](https://stedolan.github.io/jq/) installed, you can pipe the output of `curl` into it for easier reading; otherwise, you use `python -m json.tool` as a poor man's `jq` for pretty printing:\n\n```shell\n$ curl -s -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000 | python -m json.tool\r\n{\r\n    \"results\": [\r\n        {\r\n            \"filename\": \"anne_bronte\",\r\n            \"transcript\": \" On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.\"\r\n        },\r\n        {\r\n            \"filename\": \"anna_green\",\r\n            \"transcript\": \" Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.\"\r\n        }\r\n    ]\r\n}\n```\n\nBeautiful.\n\n# To the Moon!\n\nCongratulations! You now have a full-fledged HTTP API at your fingertips. What will you build now?\n\nHere are some ideas for your speech recognition server:\n\n*   What features can you add to the API output? Take a look at the [Deepgram documentation](https://developers.deepgram.com/) for some inspiration.\n*   [Hook up to an RSS feed](https://blog.deepgram.com/podcast-search-engine/#pulling-podcast-episodes-from-an-rss-feed) to automatically transcribe your favorite podcasts.\n*   Monitor a local directory and automatically transcribe any audio files that land there.\n*   Build a [voice-controlled car](https://deepgram.com/built-with-deepgram/voice-controlled-car).\n\nHappy building!\n\n*Shortcut: If you've skipped to the bottom and decided you *don't* want to build an API yourself, you're in luck. Deepgram hosts Whisper on it's API. [Check it out](https://deepgram.com/openai-whisper/).*\n\n", "html": '<p>So, you\u2019ve probably heard about OpenAI\u2019s <a href="https://openai.com/blog/whisper/">Whisper</a> model; if not, it\u2019s an open-source automatic speech recognition (ASR) model \u2013 a fancy way of saying \u201Cspeech-to-text\u201D or just \u201Cspeech recognition.\u201D What makes Whisper particularly interesting is that it works with multiple languages (at the time of writing, it supports 99 languages) and also supports translation into English. It also has a surprisingly low word error rate (WER) out-of-the-box.</p>\n<p>Whisper makes it pretty easy to invoke at the command line, as a CLI:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -sSfLO https://static.deepgram.com/example/tenant_of_wildfell_hall.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">$ whisper tenant_of_wildfell_hall.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">`--language`</span><span style="color: #C9D1D9"> to specify the language</span></span>\n<span class="line"><span style="color: #C9D1D9">Detected language: English</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:07.000]  On entering the parlour, we found that Honoured Lady seated </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> her armchair at the fireside,</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:07.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:27.000]  working away at her knitting.</span></span></code></pre>\n<p>And here\u2019s an example of its language detection at work:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -sSfLO https://static.deepgram.com/example/el_caso_leavenworth.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">$ whisper el_caso_leavenworth.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">`--language`</span><span style="color: #C9D1D9"> to specify the language</span></span>\n<span class="line"><span style="color: #C9D1D9">Detected language: Spanish</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:02.760]  Mr. Grice exclam\xE9.</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:02.760 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:05.240]  El mismo me respondi\xF3.</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:05.240 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.240]  Entre usted, Mr. Raymond.</span></span></code></pre>\n<p>And if you don\u2019t read Spanish, you can use the CLI to translate:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ whisper el_caso_leavenworth.mp3 --task translate</span></span>\n<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">`--language`</span><span style="color: #C9D1D9"> to specify the language</span></span>\n<span class="line"><span style="color: #C9D1D9">Detected language: Spanish</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:02.700]  Mr. Grice exclaimed</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:02.700 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:05.260]  He replied</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:05.260 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.260]  Among you Mr. Raymond</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:05.240 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.240]  Entre usted, Mr. Raymond.</span></span></code></pre>\n<p>Okay, so maybe that wasn\u2019t a very good translation\u2026</p>\n<p>CLI\u2019s are incredibly useful for getting things working locally <em><strong>fast</strong></em>. But they don\u2019t scale well if you want to hook up other software systems. They aren\u2019t good for builders.</p>\n<h2 id="the-gestalt-of-apis">The Gestalt of API\u2019s</h2>\n<p>The moment you start thinking like a builder, you want things that you can piece together. Things that you can scale. Components that can be combined into more than the sum of their parts. That\u2019s where APIs come in: you can build services that provide value to any other piece of your system that you want.</p>\n<p>Want to build a notetaking app that joins your Zoom calls, records the audio, and saves the transcript for browsing later? Well, you probably don\u2019t want to call <code is:raw>whisper</code> at the command line. You want a little service running, just waiting for requests. You want an API.</p>\n<p>So, let\u2019s build one. Specifically, let\u2019s build an HTTP API that we can send HTTP POST requests to with a tool like <code is:raw>curl</code> or <a href="https://www.postman.com">Postman</a>. And let\u2019s do it in the data science language <em>du jour</em> \u2013 Python.</p>\n<p>The first thing we need to pick out is a web server framework. There are lots available and range from full-fledged development platforms like <a href="https://www.djangoproject.com/">Django</a>, to simple synchronous frameworks like <a href="https://palletsprojects.com/p/flask/">Flask</a>, to pure-Python asynchronous frameworks like <a href="https://www.tornadoweb.org/">Tornado</a>.</p>\n<p>For this example, let\u2019s stick with Flask. It does everything we need without bringing too much extra support to the table, and is one of the simplest and easiest web frameworks to get started with. Let\u2019s install it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ pip install flask</span></span></code></pre>\n<blockquote>\n<p>Pro-tip. You should not install Python packages to your system Python distribution. You should always run in a <a href="https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment">virtual environment</a>. To <a href="https://blog.deepgram.com/python-virtual-environments/">get started</a>, first create a virtual environment: <code is:raw>python3 -m venv venv</code>. Then you can activate the virtual environment: <code is:raw>source venv/bin/activate</code>. That\u2019s it! Now you can install Flask or any other libraries using <code is:raw>pip</code>. Just remember that if you close and re-open your terminal, you\u2019ll need to start by activating the virtual environment again.</p>\n</blockquote>\n<p>Let\u2019s look at what a \u201CHello, World!\u201D application looks like in Flask:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello, World!&quot;</span></span></code></pre>\n<p>Well, that looks simple. Does it run? First, save your file as <code is:raw>app.py</code>. Now, to run it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ flask run</span></span></code></pre>\n<blockquote>\n<p>Pro-tip. If you named your file something other than <code is:raw>app.py</code> \u2014 say <code is:raw>hello.py</code>, you can run it with: <code is:raw>flask --app hello run</code> (note that there is no <code is:raw>.py</code> in the invocation).</p>\n</blockquote>\n<p>By default, Flask listens on port 5000. So let\u2019s try hitting our hello-world API endpoint:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">Hello, World</span><span style="color: #FF7B72">!</span></span></code></pre>\n<p>Awesome! It\u2019s working! But how do we get our user\u2019s or client\u2019s data into Flask? That example <code is:raw>curl</code> command didn\u2019t send any file to our Flask server. In fact, our Flask app above only handled HTTP GET requests, and it turns out that GET requests can\u2019t have data (or \u201Cbodies,\u201D in HTTP parlance) attached to them. But don\u2019t worry! We just need to change our Flask app to handle POST requests and the data that comes attached to them. This isn\u2019t hard, either: we just need to tell Flask that our handler will accept POST requests:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello, World!&quot;</span></span></code></pre>\n<p>Okay, yeah, that was easy. Now let\u2019s put the actual logic for handling an uploaded file (i.e., the \u201Cbody\u201D). But we need a place to put it. Let\u2019s create a temporary file to hold the file.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, abort, request</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tempfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> NamedTemporaryFile</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> request.files:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># If the user didn&#39;t submit any files, return a 400 (Bad Request) error.</span></span>\n<span class="line"><span style="color: #C9D1D9">        abort(</span><span style="color: #79C0FF">400</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># For each file, let&#39;s store the results in a list of dictionaries.</span></span>\n<span class="line"><span style="color: #C9D1D9">    results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Loop over every file that the user submitted.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> filename, handle </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> request.files.items():</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Create a temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The location of the temporary file is available in `temp.name`.</span></span>\n<span class="line"><span style="color: #C9D1D9">        temp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> NamedTemporaryFile()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Write the user&#39;s uploaded file to the temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The file will get deleted when it drops out of scope.</span></span>\n<span class="line"><span style="color: #C9D1D9">        handle.save(temp)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Now we can store the result object for this file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        results.append({</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;filename&#39;</span><span style="color: #C9D1D9">: filename,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Coming soon!&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># This will be automatically converted to JSON.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">: results}</span></span></code></pre>\n<p>Let\u2019s try running it (if you named your file <code is:raw>app.py</code>, this is just <code is:raw>flask run</code>). Can we send a file to it? Let\u2019s try the snippet we downloaded earlier:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;Coming soon!&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>\n<p>Perfect. Now we need to connect it to Whisper.</p>\n<h2 id="making-it-real">Making It Real</h2>\n<p>At this point, it\u2019s time to get Whisper installed:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ pip install whisper</span></span></code></pre>\n<blockquote>\n<p>Pro-tip. Remember to activate your virtual environment before installing!</p>\n</blockquote>\n<p>Whisper also requires <code is:raw>ffmpeg</code> to be installed. Use your system package manager to get it installed (<code is:raw>apt</code>, <code is:raw>pacman</code>, <code is:raw>brew</code>, <code is:raw>choco</code>, etc.) - the package is usually just called <code is:raw>ffmpeg</code>.</p>\n<p>Now, what does a minimal code snippet look like to get Whisper running using Python? Well, something like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> whisper</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># We can pick which model to load.</span></span>\n<span class="line"><span style="color: #8B949E"># Models can be listed with `whisper.available_models()`.</span></span>\n<span class="line"><span style="color: #C9D1D9">model </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> whisper.load_model(</span><span style="color: #A5D6FF">&quot;base&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># We can pass in a filename or a tensor (PyTorch or numpy).</span></span>\n<span class="line"><span style="color: #C9D1D9">result </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> model.transcribe(</span><span style="color: #A5D6FF">&quot;audio.mp3&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># Print the transcript.</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(result[</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9">])</span></span></code></pre>\n<p>Okay. So we load a model and then give it a file to transcribe. That should be easy to add to our Flask app. We only need to load the model once, so we can do that at the top of our app. And we are already writing uploaded data to a temporary file, so it is extra easy. Let\u2019s modify the Flask app:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, abort, request</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> whisper</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tempfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> NamedTemporaryFile</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># Load the Whisper model:</span></span>\n<span class="line"><span style="color: #C9D1D9">model </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> whisper.load_model(</span><span style="color: #A5D6FF">&#39;base&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> request.files:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># If the user didn&#39;t submit any files, return a 400 (Bad Request) error.</span></span>\n<span class="line"><span style="color: #C9D1D9">        abort(</span><span style="color: #79C0FF">400</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># For each file, let&#39;s store the results in a list of dictionaries.</span></span>\n<span class="line"><span style="color: #C9D1D9">    results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Loop over every file that the user submitted.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> filename, handle </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> request.files.items():</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Create a temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The location of the temporary file is available in `temp.name`.</span></span>\n<span class="line"><span style="color: #C9D1D9">        temp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> NamedTemporaryFile()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Write the user&#39;s uploaded file to the temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The file will get deleted when it drops out of scope.</span></span>\n<span class="line"><span style="color: #C9D1D9">        handle.save(temp)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Let&#39;s get the transcript of the temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        result </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> model.transcribe(temp.name)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Now we can store the result object for this file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        results.append({</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;filename&#39;</span><span style="color: #C9D1D9">: filename,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: result[</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># This will be automatically converted to JSON.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">: results}</span></span></code></pre>\n<p>Okay, everyone. Drumroll, please!</p>\n<h2 id="testing-the-api">Testing the API</h2>\n<p>Run the Flask app, just like ever: <code is:raw>flask run</code>. And now let\u2019s submit our file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; Hello, this is Steve Fuller. I&#39;m a professor of social epistemology at the University of Warwick. And the question before us today is what is epistemology and why is it important? Epistemology is the branch philosophy that is concerned with the nature of knowledge. Now why is knowledge?&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>\n<p><em>HOLY CRAP IT WORKED!</em></p>\n<p>And because we wrote the Flask app to loop over all submitted files, we can submit multiple files at once:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;anne_bronte&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.&quot;</span><span style="color: #C9D1D9">},{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;anna_green&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>\n<p>Okay, that\u2019s seriously cool. If you have <a href="https://stedolan.github.io/jq/"><code is:raw>jq</code></a> installed, you can pipe the output of <code is:raw>curl</code> into it for easier reading; otherwise, you use <code is:raw>python -m json.tool</code> as a poor man\u2019s <code is:raw>jq</code> for pretty printing:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -s -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000 </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> python -m json.tool</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">: [</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;anne_bronte&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot; On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;anna_green&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot; Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    ]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Beautiful.</p>\n<h1 id="to-the-moon">To the Moon!</h1>\n<p>Congratulations! You now have a full-fledged HTTP API at your fingertips. What will you build now?</p>\n<p>Here are some ideas for your speech recognition server:</p>\n<ul>\n<li>What features can you add to the API output? Take a look at the <a href="https://developers.deepgram.com/">Deepgram documentation</a> for some inspiration.</li>\n<li><a href="https://blog.deepgram.com/podcast-search-engine/#pulling-podcast-episodes-from-an-rss-feed">Hook up to an RSS feed</a> to automatically transcribe your favorite podcasts.</li>\n<li>Monitor a local directory and automatically transcribe any audio files that land there.</li>\n<li>Build a <a href="https://deepgram.com/built-with-deepgram/voice-controlled-car">voice-controlled car</a>.</li>\n</ul>\n<p>Happy building!</p>\n<p><em>Shortcut: If you\u2019ve skipped to the bottom and decided you <em>don\u2019t</em> want to build an API yourself, you\u2019re in luck. Deepgram hosts Whisper on it\u2019s API. <a href="https://deepgram.com/openai-whisper/">Check it out</a>.</em></p>' };
const frontmatter = { "title": "How to Build an OpenAI Whisper API", "description": "In this blog, learn step-by-step how to build an API for OpenAI Whisper, an open-source automatic speech recognition model.", "date": "2022-09-30T15:12:10.691Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1664552366/blog/how-to-build-an-openai-whisper-api/2209-How-to-Build-an-OpenAI-Whisper-API-featured-1200x630_sddsom.png", "authors": ["adam-sypniewski"], "category": "tutorial", "tags": ["whisper", "machine-learning"], "shorturls": { "share": "https://dpgr.am/e2259be", "twitter": "https://dpgr.am/8d7811f", "linkedin": "https://dpgr.am/3aa5cea", "reddit": "https://dpgr.am/5b075fd", "facebook": "https://dpgr.am/d28c0f6" }, "astro": { "headings": [{ "depth": 2, "slug": "the-gestalt-of-apis", "text": "The Gestalt of API\u2019s" }, { "depth": 2, "slug": "making-it-real", "text": "Making It Real" }, { "depth": 2, "slug": "testing-the-api", "text": "Testing the API" }, { "depth": 1, "slug": "to-the-moon", "text": "To the Moon!" }], "source": "\nSo, you've probably heard about OpenAI's [Whisper](https://openai.com/blog/whisper/) model; if not, it's an open-source automatic speech recognition (ASR) model \u2013 a fancy way of saying \"speech-to-text\" or just \"speech recognition.\" What makes Whisper particularly interesting is that it works with multiple languages (at the time of writing, it supports 99 languages) and also supports translation into English. It also has a surprisingly low word error rate (WER) out-of-the-box.\n\nWhisper makes it pretty easy to invoke at the command line, as a CLI:\n\n```shell\n$ curl -sSfLO https://static.deepgram.com/example/tenant_of_wildfell_hall.mp3\r\n$ whisper tenant_of_wildfell_hall.mp3\r\nDetecting language using up to the first 30 seconds. Use `--language` to specify the language\r\nDetected language: English\r\n[00:00.000 --> 00:07.000]  On entering the parlour, we found that Honoured Lady seated in her armchair at the fireside,\r\n[00:07.000 --> 00:27.000]  working away at her knitting.\n```\n\nAnd here's an example of its language detection at work:\n\n```shell\n$ curl -sSfLO https://static.deepgram.com/example/el_caso_leavenworth.mp3\r\n$ whisper el_caso_leavenworth.mp3\r\nDetecting language using up to the first 30 seconds. Use `--language` to specify the language\r\nDetected language: Spanish\r\n[00:00.000 --> 00:02.760]  Mr. Grice exclam\xE9.\r\n[00:02.760 --> 00:05.240]  El mismo me respondi\xF3.\r\n[00:05.240 --> 00:29.240]  Entre usted, Mr. Raymond.\n```\n\nAnd if you don't read Spanish, you can use the CLI to translate:\n\n```shell\n$ whisper el_caso_leavenworth.mp3 --task translate\r\nDetecting language using up to the first 30 seconds. Use `--language` to specify the language\r\nDetected language: Spanish\r\n[00:00.000 --> 00:02.700]  Mr. Grice exclaimed\r\n[00:02.700 --> 00:05.260]  He replied\r\n[00:05.260 --> 00:29.260]  Among you Mr. Raymond\r\n[00:05.240 --> 00:29.240]  Entre usted, Mr. Raymond.\n```\n\nOkay, so maybe that wasn't a very good translation...\n\nCLI's are incredibly useful for getting things working locally ***fast***. But they don't scale well if you want to hook up other software systems. They aren't good for builders.\n\n## The Gestalt of API's\n\nThe moment you start thinking like a builder, you want things that you can piece together. Things that you can scale. Components that can be combined into more than the sum of their parts. That's where APIs come in: you can build services that provide value to any other piece of your system that you want.\n\nWant to build a notetaking app that joins your Zoom calls, records the audio, and saves the transcript for browsing later? Well, you probably don't want to call `whisper` at the command line. You want a little service running, just waiting for requests. You want an API.\n\nSo, let's build one. Specifically, let's build an HTTP API that we can send HTTP POST requests to with a tool like `curl` or [Postman](https://www.postman.com). And let's do it in the data science language *du jour* \u2013 Python.\n\nThe first thing we need to pick out is a web server framework. There are lots available and range from full-fledged development platforms like [Django](https://www.djangoproject.com/), to simple synchronous frameworks like [Flask](https://palletsprojects.com/p/flask/), to pure-Python asynchronous frameworks like [Tornado](https://www.tornadoweb.org/).\n\nFor this example, let's stick with Flask. It does everything we need without bringing too much extra support to the table, and is one of the simplest and easiest web frameworks to get started with. Let's install it:\n\n```shell\n$ pip install flask\n```\n\n> Pro-tip. You should not install Python packages to your system Python distribution. You should always run in a [virtual environment](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment). To [get started](https://blog.deepgram.com/python-virtual-environments/), first create a virtual environment: `python3 -m venv venv`. Then you can activate the virtual environment: `source venv/bin/activate`. That's it! Now you can install Flask or any other libraries using `pip`. Just remember that if you close and re-open your terminal, you'll need to start by activating the virtual environment again.\n\nLet's look at what a \"Hello, World!\" application looks like in Flask:\n\n```python\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/\")\r\ndef handler():\r\n    return \"Hello, World!\"\n```\n\nWell, that looks simple. Does it run? First, save your file as `app.py`. Now, to run it:\n\n```shell\n$ flask run\n```\n\n> Pro-tip. If you named your file something other than `app.py` -- say `hello.py`, you can run it with: `flask --app hello run` (note that there is no `.py` in the invocation).\n\nBy default, Flask listens on port 5000. So let's try hitting our hello-world API endpoint:\n\n```shell\n$ curl localhost:5000\r\nHello, World!\n```\n\nAwesome! It's working! But how do we get our user's or client's data into Flask? That example `curl` command didn't send any file to our Flask server. In fact, our Flask app above only handled HTTP GET requests, and it turns out that GET requests can't have data (or \"bodies,\" in HTTP parlance) attached to them. But don't worry! We just need to change our Flask app to handle POST requests and the data that comes attached to them. This isn't hard, either: we just need to tell Flask that our handler will accept POST requests:\n\n```python\n@app.route('/', methods=['POST'])\r\ndef handler():\r\n    return \"Hello, World!\"\n```\n\nOkay, yeah, that was easy. Now let's put the actual logic for handling an uploaded file (i.e., the \"body\"). But we need a place to put it. Let's create a temporary file to hold the file.\n\n```python\nfrom flask import Flask, abort, request\r\nfrom tempfile import NamedTemporaryFile\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/', methods=['POST'])\r\ndef handler():\r\n    if not request.files:\r\n        # If the user didn't submit any files, return a 400 (Bad Request) error.\r\n        abort(400)\r\n\r\n    # For each file, let's store the results in a list of dictionaries.\r\n    results = []\r\n\r\n    # Loop over every file that the user submitted.\r\n    for filename, handle in request.files.items():\r\n        # Create a temporary file.\r\n        # The location of the temporary file is available in `temp.name`.\r\n        temp = NamedTemporaryFile()\r\n        # Write the user's uploaded file to the temporary file.\r\n        # The file will get deleted when it drops out of scope.\r\n        handle.save(temp)\r\n        # Now we can store the result object for this file.\r\n        results.append({\r\n            'filename': filename,\r\n            'transcript': 'Coming soon!',\r\n        })\r\n\r\n    # This will be automatically converted to JSON.\r\n    return {'results': results}\n```\n\nLet's try running it (if you named your file `app.py`, this is just `flask run`). Can we send a file to it? Let's try the snippet we downloaded earlier:\n\n```shell\n$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000\r\n{\"results\":[{\"filename\":\"file\",\"transcript\":\"Coming soon!\"}]}\n```\n\nPerfect. Now we need to connect it to Whisper.\n\n## Making It Real\n\nAt this point, it's time to get Whisper installed:\n\n```shell\n$ pip install whisper\n```\n\n> Pro-tip. Remember to activate your virtual environment before installing!\n\nWhisper also requires `ffmpeg` to be installed. Use your system package manager to get it installed (`apt`, `pacman`, `brew`, `choco`, etc.) - the package is usually just called `ffmpeg`.\n\nNow, what does a minimal code snippet look like to get Whisper running using Python? Well, something like this:\n\n```python\nimport whisper\r\n\r\n# We can pick which model to load.\r\n# Models can be listed with `whisper.available_models()`.\r\nmodel = whisper.load_model(\"base\")\r\n\r\n# We can pass in a filename or a tensor (PyTorch or numpy).\r\nresult = model.transcribe(\"audio.mp3\")\r\n\r\n# Print the transcript.\r\nprint(result[\"text\"])\n```\n\nOkay. So we load a model and then give it a file to transcribe. That should be easy to add to our Flask app. We only need to load the model once, so we can do that at the top of our app. And we are already writing uploaded data to a temporary file, so it is extra easy. Let's modify the Flask app:\n\n```python\nfrom flask import Flask, abort, request\r\nimport whisper\r\nfrom tempfile import NamedTemporaryFile\r\n\r\n# Load the Whisper model:\r\nmodel = whisper.load_model('base')\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/', methods=['POST'])\r\ndef handler():\r\n    if not request.files:\r\n        # If the user didn't submit any files, return a 400 (Bad Request) error.\r\n        abort(400)\r\n\r\n    # For each file, let's store the results in a list of dictionaries.\r\n    results = []\r\n\r\n    # Loop over every file that the user submitted.\r\n    for filename, handle in request.files.items():\r\n        # Create a temporary file.\r\n        # The location of the temporary file is available in `temp.name`.\r\n        temp = NamedTemporaryFile()\r\n        # Write the user's uploaded file to the temporary file.\r\n        # The file will get deleted when it drops out of scope.\r\n        handle.save(temp)\r\n        # Let's get the transcript of the temporary file.\r\n        result = model.transcribe(temp.name)\r\n        # Now we can store the result object for this file.\r\n        results.append({\r\n            'filename': filename,\r\n            'transcript': result['text'],\r\n        })\r\n\r\n    # This will be automatically converted to JSON.\r\n    return {'results': results}\n```\n\nOkay, everyone. Drumroll, please!\n\n## Testing the API\n\nRun the Flask app, just like ever: `flask run`. And now let's submit our file:\n\n```shell\n$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000\r\n{\"results\":[{\"filename\":\"file\",\"transcript\":\" Hello, this is Steve Fuller. I'm a professor of social epistemology at the University of Warwick. And the question before us today is what is epistemology and why is it important? Epistemology is the branch philosophy that is concerned with the nature of knowledge. Now why is knowledge?\"}]}\n```\n\n*HOLY CRAP IT WORKED!*\n\nAnd because we wrote the Flask app to loop over all submitted files, we can submit multiple files at once:\n\n```shell\n$ curl -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000\r\n{\"results\":[{\"filename\":\"anne_bronte\",\"transcript\":\" On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.\"},{\"filename\":\"anna_green\",\"transcript\":\" Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.\"}]}\n```\n\nOkay, that's seriously cool. If you have [`jq`](https://stedolan.github.io/jq/) installed, you can pipe the output of `curl` into it for easier reading; otherwise, you use `python -m json.tool` as a poor man's `jq` for pretty printing:\n\n```shell\n$ curl -s -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000 | python -m json.tool\r\n{\r\n    \"results\": [\r\n        {\r\n            \"filename\": \"anne_bronte\",\r\n            \"transcript\": \" On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.\"\r\n        },\r\n        {\r\n            \"filename\": \"anna_green\",\r\n            \"transcript\": \" Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.\"\r\n        }\r\n    ]\r\n}\n```\n\nBeautiful.\n\n# To the Moon!\n\nCongratulations! You now have a full-fledged HTTP API at your fingertips. What will you build now?\n\nHere are some ideas for your speech recognition server:\n\n*   What features can you add to the API output? Take a look at the [Deepgram documentation](https://developers.deepgram.com/) for some inspiration.\n*   [Hook up to an RSS feed](https://blog.deepgram.com/podcast-search-engine/#pulling-podcast-episodes-from-an-rss-feed) to automatically transcribe your favorite podcasts.\n*   Monitor a local directory and automatically transcribe any audio files that land there.\n*   Build a [voice-controlled car](https://deepgram.com/built-with-deepgram/voice-controlled-car).\n\nHappy building!\n\n*Shortcut: If you've skipped to the bottom and decided you *don't* want to build an API yourself, you're in luck. Deepgram hosts Whisper on it's API. [Check it out](https://deepgram.com/openai-whisper/).*\n\n", "html": '<p>So, you\u2019ve probably heard about OpenAI\u2019s <a href="https://openai.com/blog/whisper/">Whisper</a> model; if not, it\u2019s an open-source automatic speech recognition (ASR) model \u2013 a fancy way of saying \u201Cspeech-to-text\u201D or just \u201Cspeech recognition.\u201D What makes Whisper particularly interesting is that it works with multiple languages (at the time of writing, it supports 99 languages) and also supports translation into English. It also has a surprisingly low word error rate (WER) out-of-the-box.</p>\n<p>Whisper makes it pretty easy to invoke at the command line, as a CLI:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -sSfLO https://static.deepgram.com/example/tenant_of_wildfell_hall.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">$ whisper tenant_of_wildfell_hall.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">`--language`</span><span style="color: #C9D1D9"> to specify the language</span></span>\n<span class="line"><span style="color: #C9D1D9">Detected language: English</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:07.000]  On entering the parlour, we found that Honoured Lady seated </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> her armchair at the fireside,</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:07.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:27.000]  working away at her knitting.</span></span></code></pre>\n<p>And here\u2019s an example of its language detection at work:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -sSfLO https://static.deepgram.com/example/el_caso_leavenworth.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">$ whisper el_caso_leavenworth.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">`--language`</span><span style="color: #C9D1D9"> to specify the language</span></span>\n<span class="line"><span style="color: #C9D1D9">Detected language: Spanish</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:02.760]  Mr. Grice exclam\xE9.</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:02.760 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:05.240]  El mismo me respondi\xF3.</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:05.240 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.240]  Entre usted, Mr. Raymond.</span></span></code></pre>\n<p>And if you don\u2019t read Spanish, you can use the CLI to translate:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ whisper el_caso_leavenworth.mp3 --task translate</span></span>\n<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">`--language`</span><span style="color: #C9D1D9"> to specify the language</span></span>\n<span class="line"><span style="color: #C9D1D9">Detected language: Spanish</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:02.700]  Mr. Grice exclaimed</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:02.700 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:05.260]  He replied</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:05.260 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.260]  Among you Mr. Raymond</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:05.240 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.240]  Entre usted, Mr. Raymond.</span></span></code></pre>\n<p>Okay, so maybe that wasn\u2019t a very good translation\u2026</p>\n<p>CLI\u2019s are incredibly useful for getting things working locally <em><strong>fast</strong></em>. But they don\u2019t scale well if you want to hook up other software systems. They aren\u2019t good for builders.</p>\n<h2 id="the-gestalt-of-apis">The Gestalt of API\u2019s</h2>\n<p>The moment you start thinking like a builder, you want things that you can piece together. Things that you can scale. Components that can be combined into more than the sum of their parts. That\u2019s where APIs come in: you can build services that provide value to any other piece of your system that you want.</p>\n<p>Want to build a notetaking app that joins your Zoom calls, records the audio, and saves the transcript for browsing later? Well, you probably don\u2019t want to call <code is:raw>whisper</code> at the command line. You want a little service running, just waiting for requests. You want an API.</p>\n<p>So, let\u2019s build one. Specifically, let\u2019s build an HTTP API that we can send HTTP POST requests to with a tool like <code is:raw>curl</code> or <a href="https://www.postman.com">Postman</a>. And let\u2019s do it in the data science language <em>du jour</em> \u2013 Python.</p>\n<p>The first thing we need to pick out is a web server framework. There are lots available and range from full-fledged development platforms like <a href="https://www.djangoproject.com/">Django</a>, to simple synchronous frameworks like <a href="https://palletsprojects.com/p/flask/">Flask</a>, to pure-Python asynchronous frameworks like <a href="https://www.tornadoweb.org/">Tornado</a>.</p>\n<p>For this example, let\u2019s stick with Flask. It does everything we need without bringing too much extra support to the table, and is one of the simplest and easiest web frameworks to get started with. Let\u2019s install it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ pip install flask</span></span></code></pre>\n<blockquote>\n<p>Pro-tip. You should not install Python packages to your system Python distribution. You should always run in a <a href="https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment">virtual environment</a>. To <a href="https://blog.deepgram.com/python-virtual-environments/">get started</a>, first create a virtual environment: <code is:raw>python3 -m venv venv</code>. Then you can activate the virtual environment: <code is:raw>source venv/bin/activate</code>. That\u2019s it! Now you can install Flask or any other libraries using <code is:raw>pip</code>. Just remember that if you close and re-open your terminal, you\u2019ll need to start by activating the virtual environment again.</p>\n</blockquote>\n<p>Let\u2019s look at what a \u201CHello, World!\u201D application looks like in Flask:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello, World!&quot;</span></span></code></pre>\n<p>Well, that looks simple. Does it run? First, save your file as <code is:raw>app.py</code>. Now, to run it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ flask run</span></span></code></pre>\n<blockquote>\n<p>Pro-tip. If you named your file something other than <code is:raw>app.py</code> \u2014 say <code is:raw>hello.py</code>, you can run it with: <code is:raw>flask --app hello run</code> (note that there is no <code is:raw>.py</code> in the invocation).</p>\n</blockquote>\n<p>By default, Flask listens on port 5000. So let\u2019s try hitting our hello-world API endpoint:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">Hello, World</span><span style="color: #FF7B72">!</span></span></code></pre>\n<p>Awesome! It\u2019s working! But how do we get our user\u2019s or client\u2019s data into Flask? That example <code is:raw>curl</code> command didn\u2019t send any file to our Flask server. In fact, our Flask app above only handled HTTP GET requests, and it turns out that GET requests can\u2019t have data (or \u201Cbodies,\u201D in HTTP parlance) attached to them. But don\u2019t worry! We just need to change our Flask app to handle POST requests and the data that comes attached to them. This isn\u2019t hard, either: we just need to tell Flask that our handler will accept POST requests:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello, World!&quot;</span></span></code></pre>\n<p>Okay, yeah, that was easy. Now let\u2019s put the actual logic for handling an uploaded file (i.e., the \u201Cbody\u201D). But we need a place to put it. Let\u2019s create a temporary file to hold the file.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, abort, request</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tempfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> NamedTemporaryFile</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> request.files:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># If the user didn&#39;t submit any files, return a 400 (Bad Request) error.</span></span>\n<span class="line"><span style="color: #C9D1D9">        abort(</span><span style="color: #79C0FF">400</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># For each file, let&#39;s store the results in a list of dictionaries.</span></span>\n<span class="line"><span style="color: #C9D1D9">    results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Loop over every file that the user submitted.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> filename, handle </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> request.files.items():</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Create a temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The location of the temporary file is available in `temp.name`.</span></span>\n<span class="line"><span style="color: #C9D1D9">        temp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> NamedTemporaryFile()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Write the user&#39;s uploaded file to the temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The file will get deleted when it drops out of scope.</span></span>\n<span class="line"><span style="color: #C9D1D9">        handle.save(temp)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Now we can store the result object for this file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        results.append({</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;filename&#39;</span><span style="color: #C9D1D9">: filename,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Coming soon!&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># This will be automatically converted to JSON.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">: results}</span></span></code></pre>\n<p>Let\u2019s try running it (if you named your file <code is:raw>app.py</code>, this is just <code is:raw>flask run</code>). Can we send a file to it? Let\u2019s try the snippet we downloaded earlier:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;Coming soon!&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>\n<p>Perfect. Now we need to connect it to Whisper.</p>\n<h2 id="making-it-real">Making It Real</h2>\n<p>At this point, it\u2019s time to get Whisper installed:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ pip install whisper</span></span></code></pre>\n<blockquote>\n<p>Pro-tip. Remember to activate your virtual environment before installing!</p>\n</blockquote>\n<p>Whisper also requires <code is:raw>ffmpeg</code> to be installed. Use your system package manager to get it installed (<code is:raw>apt</code>, <code is:raw>pacman</code>, <code is:raw>brew</code>, <code is:raw>choco</code>, etc.) - the package is usually just called <code is:raw>ffmpeg</code>.</p>\n<p>Now, what does a minimal code snippet look like to get Whisper running using Python? Well, something like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> whisper</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># We can pick which model to load.</span></span>\n<span class="line"><span style="color: #8B949E"># Models can be listed with `whisper.available_models()`.</span></span>\n<span class="line"><span style="color: #C9D1D9">model </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> whisper.load_model(</span><span style="color: #A5D6FF">&quot;base&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># We can pass in a filename or a tensor (PyTorch or numpy).</span></span>\n<span class="line"><span style="color: #C9D1D9">result </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> model.transcribe(</span><span style="color: #A5D6FF">&quot;audio.mp3&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># Print the transcript.</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(result[</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9">])</span></span></code></pre>\n<p>Okay. So we load a model and then give it a file to transcribe. That should be easy to add to our Flask app. We only need to load the model once, so we can do that at the top of our app. And we are already writing uploaded data to a temporary file, so it is extra easy. Let\u2019s modify the Flask app:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, abort, request</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> whisper</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tempfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> NamedTemporaryFile</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># Load the Whisper model:</span></span>\n<span class="line"><span style="color: #C9D1D9">model </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> whisper.load_model(</span><span style="color: #A5D6FF">&#39;base&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> request.files:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># If the user didn&#39;t submit any files, return a 400 (Bad Request) error.</span></span>\n<span class="line"><span style="color: #C9D1D9">        abort(</span><span style="color: #79C0FF">400</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># For each file, let&#39;s store the results in a list of dictionaries.</span></span>\n<span class="line"><span style="color: #C9D1D9">    results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Loop over every file that the user submitted.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> filename, handle </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> request.files.items():</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Create a temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The location of the temporary file is available in `temp.name`.</span></span>\n<span class="line"><span style="color: #C9D1D9">        temp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> NamedTemporaryFile()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Write the user&#39;s uploaded file to the temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The file will get deleted when it drops out of scope.</span></span>\n<span class="line"><span style="color: #C9D1D9">        handle.save(temp)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Let&#39;s get the transcript of the temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        result </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> model.transcribe(temp.name)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Now we can store the result object for this file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        results.append({</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;filename&#39;</span><span style="color: #C9D1D9">: filename,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: result[</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># This will be automatically converted to JSON.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">: results}</span></span></code></pre>\n<p>Okay, everyone. Drumroll, please!</p>\n<h2 id="testing-the-api">Testing the API</h2>\n<p>Run the Flask app, just like ever: <code is:raw>flask run</code>. And now let\u2019s submit our file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; Hello, this is Steve Fuller. I&#39;m a professor of social epistemology at the University of Warwick. And the question before us today is what is epistemology and why is it important? Epistemology is the branch philosophy that is concerned with the nature of knowledge. Now why is knowledge?&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>\n<p><em>HOLY CRAP IT WORKED!</em></p>\n<p>And because we wrote the Flask app to loop over all submitted files, we can submit multiple files at once:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;anne_bronte&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.&quot;</span><span style="color: #C9D1D9">},{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;anna_green&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>\n<p>Okay, that\u2019s seriously cool. If you have <a href="https://stedolan.github.io/jq/"><code is:raw>jq</code></a> installed, you can pipe the output of <code is:raw>curl</code> into it for easier reading; otherwise, you use <code is:raw>python -m json.tool</code> as a poor man\u2019s <code is:raw>jq</code> for pretty printing:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -s -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000 </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> python -m json.tool</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">: [</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;anne_bronte&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot; On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;anna_green&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot; Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    ]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Beautiful.</p>\n<h1 id="to-the-moon">To the Moon!</h1>\n<p>Congratulations! You now have a full-fledged HTTP API at your fingertips. What will you build now?</p>\n<p>Here are some ideas for your speech recognition server:</p>\n<ul>\n<li>What features can you add to the API output? Take a look at the <a href="https://developers.deepgram.com/">Deepgram documentation</a> for some inspiration.</li>\n<li><a href="https://blog.deepgram.com/podcast-search-engine/#pulling-podcast-episodes-from-an-rss-feed">Hook up to an RSS feed</a> to automatically transcribe your favorite podcasts.</li>\n<li>Monitor a local directory and automatically transcribe any audio files that land there.</li>\n<li>Build a <a href="https://deepgram.com/built-with-deepgram/voice-controlled-car">voice-controlled car</a>.</li>\n</ul>\n<p>Happy building!</p>\n<p><em>Shortcut: If you\u2019ve skipped to the bottom and decided you <em>don\u2019t</em> want to build an API yourself, you\u2019re in luck. Deepgram hosts Whisper on it\u2019s API. <a href="https://deepgram.com/openai-whisper/">Check it out</a>.</em></p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/how-to-build-an-openai-whisper-api/index.md" };
function rawContent() {
  return "\nSo, you've probably heard about OpenAI's [Whisper](https://openai.com/blog/whisper/) model; if not, it's an open-source automatic speech recognition (ASR) model \u2013 a fancy way of saying \"speech-to-text\" or just \"speech recognition.\" What makes Whisper particularly interesting is that it works with multiple languages (at the time of writing, it supports 99 languages) and also supports translation into English. It also has a surprisingly low word error rate (WER) out-of-the-box.\n\nWhisper makes it pretty easy to invoke at the command line, as a CLI:\n\n```shell\n$ curl -sSfLO https://static.deepgram.com/example/tenant_of_wildfell_hall.mp3\r\n$ whisper tenant_of_wildfell_hall.mp3\r\nDetecting language using up to the first 30 seconds. Use `--language` to specify the language\r\nDetected language: English\r\n[00:00.000 --> 00:07.000]  On entering the parlour, we found that Honoured Lady seated in her armchair at the fireside,\r\n[00:07.000 --> 00:27.000]  working away at her knitting.\n```\n\nAnd here's an example of its language detection at work:\n\n```shell\n$ curl -sSfLO https://static.deepgram.com/example/el_caso_leavenworth.mp3\r\n$ whisper el_caso_leavenworth.mp3\r\nDetecting language using up to the first 30 seconds. Use `--language` to specify the language\r\nDetected language: Spanish\r\n[00:00.000 --> 00:02.760]  Mr. Grice exclam\xE9.\r\n[00:02.760 --> 00:05.240]  El mismo me respondi\xF3.\r\n[00:05.240 --> 00:29.240]  Entre usted, Mr. Raymond.\n```\n\nAnd if you don't read Spanish, you can use the CLI to translate:\n\n```shell\n$ whisper el_caso_leavenworth.mp3 --task translate\r\nDetecting language using up to the first 30 seconds. Use `--language` to specify the language\r\nDetected language: Spanish\r\n[00:00.000 --> 00:02.700]  Mr. Grice exclaimed\r\n[00:02.700 --> 00:05.260]  He replied\r\n[00:05.260 --> 00:29.260]  Among you Mr. Raymond\r\n[00:05.240 --> 00:29.240]  Entre usted, Mr. Raymond.\n```\n\nOkay, so maybe that wasn't a very good translation...\n\nCLI's are incredibly useful for getting things working locally ***fast***. But they don't scale well if you want to hook up other software systems. They aren't good for builders.\n\n## The Gestalt of API's\n\nThe moment you start thinking like a builder, you want things that you can piece together. Things that you can scale. Components that can be combined into more than the sum of their parts. That's where APIs come in: you can build services that provide value to any other piece of your system that you want.\n\nWant to build a notetaking app that joins your Zoom calls, records the audio, and saves the transcript for browsing later? Well, you probably don't want to call `whisper` at the command line. You want a little service running, just waiting for requests. You want an API.\n\nSo, let's build one. Specifically, let's build an HTTP API that we can send HTTP POST requests to with a tool like `curl` or [Postman](https://www.postman.com). And let's do it in the data science language *du jour* \u2013 Python.\n\nThe first thing we need to pick out is a web server framework. There are lots available and range from full-fledged development platforms like [Django](https://www.djangoproject.com/), to simple synchronous frameworks like [Flask](https://palletsprojects.com/p/flask/), to pure-Python asynchronous frameworks like [Tornado](https://www.tornadoweb.org/).\n\nFor this example, let's stick with Flask. It does everything we need without bringing too much extra support to the table, and is one of the simplest and easiest web frameworks to get started with. Let's install it:\n\n```shell\n$ pip install flask\n```\n\n> Pro-tip. You should not install Python packages to your system Python distribution. You should always run in a [virtual environment](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment). To [get started](https://blog.deepgram.com/python-virtual-environments/), first create a virtual environment: `python3 -m venv venv`. Then you can activate the virtual environment: `source venv/bin/activate`. That's it! Now you can install Flask or any other libraries using `pip`. Just remember that if you close and re-open your terminal, you'll need to start by activating the virtual environment again.\n\nLet's look at what a \"Hello, World!\" application looks like in Flask:\n\n```python\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/\")\r\ndef handler():\r\n    return \"Hello, World!\"\n```\n\nWell, that looks simple. Does it run? First, save your file as `app.py`. Now, to run it:\n\n```shell\n$ flask run\n```\n\n> Pro-tip. If you named your file something other than `app.py` -- say `hello.py`, you can run it with: `flask --app hello run` (note that there is no `.py` in the invocation).\n\nBy default, Flask listens on port 5000. So let's try hitting our hello-world API endpoint:\n\n```shell\n$ curl localhost:5000\r\nHello, World!\n```\n\nAwesome! It's working! But how do we get our user's or client's data into Flask? That example `curl` command didn't send any file to our Flask server. In fact, our Flask app above only handled HTTP GET requests, and it turns out that GET requests can't have data (or \"bodies,\" in HTTP parlance) attached to them. But don't worry! We just need to change our Flask app to handle POST requests and the data that comes attached to them. This isn't hard, either: we just need to tell Flask that our handler will accept POST requests:\n\n```python\n@app.route('/', methods=['POST'])\r\ndef handler():\r\n    return \"Hello, World!\"\n```\n\nOkay, yeah, that was easy. Now let's put the actual logic for handling an uploaded file (i.e., the \"body\"). But we need a place to put it. Let's create a temporary file to hold the file.\n\n```python\nfrom flask import Flask, abort, request\r\nfrom tempfile import NamedTemporaryFile\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/', methods=['POST'])\r\ndef handler():\r\n    if not request.files:\r\n        # If the user didn't submit any files, return a 400 (Bad Request) error.\r\n        abort(400)\r\n\r\n    # For each file, let's store the results in a list of dictionaries.\r\n    results = []\r\n\r\n    # Loop over every file that the user submitted.\r\n    for filename, handle in request.files.items():\r\n        # Create a temporary file.\r\n        # The location of the temporary file is available in `temp.name`.\r\n        temp = NamedTemporaryFile()\r\n        # Write the user's uploaded file to the temporary file.\r\n        # The file will get deleted when it drops out of scope.\r\n        handle.save(temp)\r\n        # Now we can store the result object for this file.\r\n        results.append({\r\n            'filename': filename,\r\n            'transcript': 'Coming soon!',\r\n        })\r\n\r\n    # This will be automatically converted to JSON.\r\n    return {'results': results}\n```\n\nLet's try running it (if you named your file `app.py`, this is just `flask run`). Can we send a file to it? Let's try the snippet we downloaded earlier:\n\n```shell\n$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000\r\n{\"results\":[{\"filename\":\"file\",\"transcript\":\"Coming soon!\"}]}\n```\n\nPerfect. Now we need to connect it to Whisper.\n\n## Making It Real\n\nAt this point, it's time to get Whisper installed:\n\n```shell\n$ pip install whisper\n```\n\n> Pro-tip. Remember to activate your virtual environment before installing!\n\nWhisper also requires `ffmpeg` to be installed. Use your system package manager to get it installed (`apt`, `pacman`, `brew`, `choco`, etc.) - the package is usually just called `ffmpeg`.\n\nNow, what does a minimal code snippet look like to get Whisper running using Python? Well, something like this:\n\n```python\nimport whisper\r\n\r\n# We can pick which model to load.\r\n# Models can be listed with `whisper.available_models()`.\r\nmodel = whisper.load_model(\"base\")\r\n\r\n# We can pass in a filename or a tensor (PyTorch or numpy).\r\nresult = model.transcribe(\"audio.mp3\")\r\n\r\n# Print the transcript.\r\nprint(result[\"text\"])\n```\n\nOkay. So we load a model and then give it a file to transcribe. That should be easy to add to our Flask app. We only need to load the model once, so we can do that at the top of our app. And we are already writing uploaded data to a temporary file, so it is extra easy. Let's modify the Flask app:\n\n```python\nfrom flask import Flask, abort, request\r\nimport whisper\r\nfrom tempfile import NamedTemporaryFile\r\n\r\n# Load the Whisper model:\r\nmodel = whisper.load_model('base')\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/', methods=['POST'])\r\ndef handler():\r\n    if not request.files:\r\n        # If the user didn't submit any files, return a 400 (Bad Request) error.\r\n        abort(400)\r\n\r\n    # For each file, let's store the results in a list of dictionaries.\r\n    results = []\r\n\r\n    # Loop over every file that the user submitted.\r\n    for filename, handle in request.files.items():\r\n        # Create a temporary file.\r\n        # The location of the temporary file is available in `temp.name`.\r\n        temp = NamedTemporaryFile()\r\n        # Write the user's uploaded file to the temporary file.\r\n        # The file will get deleted when it drops out of scope.\r\n        handle.save(temp)\r\n        # Let's get the transcript of the temporary file.\r\n        result = model.transcribe(temp.name)\r\n        # Now we can store the result object for this file.\r\n        results.append({\r\n            'filename': filename,\r\n            'transcript': result['text'],\r\n        })\r\n\r\n    # This will be automatically converted to JSON.\r\n    return {'results': results}\n```\n\nOkay, everyone. Drumroll, please!\n\n## Testing the API\n\nRun the Flask app, just like ever: `flask run`. And now let's submit our file:\n\n```shell\n$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000\r\n{\"results\":[{\"filename\":\"file\",\"transcript\":\" Hello, this is Steve Fuller. I'm a professor of social epistemology at the University of Warwick. And the question before us today is what is epistemology and why is it important? Epistemology is the branch philosophy that is concerned with the nature of knowledge. Now why is knowledge?\"}]}\n```\n\n*HOLY CRAP IT WORKED!*\n\nAnd because we wrote the Flask app to loop over all submitted files, we can submit multiple files at once:\n\n```shell\n$ curl -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000\r\n{\"results\":[{\"filename\":\"anne_bronte\",\"transcript\":\" On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.\"},{\"filename\":\"anna_green\",\"transcript\":\" Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.\"}]}\n```\n\nOkay, that's seriously cool. If you have [`jq`](https://stedolan.github.io/jq/) installed, you can pipe the output of `curl` into it for easier reading; otherwise, you use `python -m json.tool` as a poor man's `jq` for pretty printing:\n\n```shell\n$ curl -s -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000 | python -m json.tool\r\n{\r\n    \"results\": [\r\n        {\r\n            \"filename\": \"anne_bronte\",\r\n            \"transcript\": \" On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.\"\r\n        },\r\n        {\r\n            \"filename\": \"anna_green\",\r\n            \"transcript\": \" Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.\"\r\n        }\r\n    ]\r\n}\n```\n\nBeautiful.\n\n# To the Moon!\n\nCongratulations! You now have a full-fledged HTTP API at your fingertips. What will you build now?\n\nHere are some ideas for your speech recognition server:\n\n*   What features can you add to the API output? Take a look at the [Deepgram documentation](https://developers.deepgram.com/) for some inspiration.\n*   [Hook up to an RSS feed](https://blog.deepgram.com/podcast-search-engine/#pulling-podcast-episodes-from-an-rss-feed) to automatically transcribe your favorite podcasts.\n*   Monitor a local directory and automatically transcribe any audio files that land there.\n*   Build a [voice-controlled car](https://deepgram.com/built-with-deepgram/voice-controlled-car).\n\nHappy building!\n\n*Shortcut: If you've skipped to the bottom and decided you *don't* want to build an API yourself, you're in luck. Deepgram hosts Whisper on it's API. [Check it out](https://deepgram.com/openai-whisper/).*\n\n";
}
function compiledContent() {
  return '<p>So, you\u2019ve probably heard about OpenAI\u2019s <a href="https://openai.com/blog/whisper/">Whisper</a> model; if not, it\u2019s an open-source automatic speech recognition (ASR) model \u2013 a fancy way of saying \u201Cspeech-to-text\u201D or just \u201Cspeech recognition.\u201D What makes Whisper particularly interesting is that it works with multiple languages (at the time of writing, it supports 99 languages) and also supports translation into English. It also has a surprisingly low word error rate (WER) out-of-the-box.</p>\n<p>Whisper makes it pretty easy to invoke at the command line, as a CLI:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -sSfLO https://static.deepgram.com/example/tenant_of_wildfell_hall.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">$ whisper tenant_of_wildfell_hall.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">`--language`</span><span style="color: #C9D1D9"> to specify the language</span></span>\n<span class="line"><span style="color: #C9D1D9">Detected language: English</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:07.000]  On entering the parlour, we found that Honoured Lady seated </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> her armchair at the fireside,</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:07.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:27.000]  working away at her knitting.</span></span></code></pre>\n<p>And here\u2019s an example of its language detection at work:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -sSfLO https://static.deepgram.com/example/el_caso_leavenworth.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">$ whisper el_caso_leavenworth.mp3</span></span>\n<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">`--language`</span><span style="color: #C9D1D9"> to specify the language</span></span>\n<span class="line"><span style="color: #C9D1D9">Detected language: Spanish</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:02.760]  Mr. Grice exclam\xE9.</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:02.760 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:05.240]  El mismo me respondi\xF3.</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:05.240 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.240]  Entre usted, Mr. Raymond.</span></span></code></pre>\n<p>And if you don\u2019t read Spanish, you can use the CLI to translate:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ whisper el_caso_leavenworth.mp3 --task translate</span></span>\n<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">`--language`</span><span style="color: #C9D1D9"> to specify the language</span></span>\n<span class="line"><span style="color: #C9D1D9">Detected language: Spanish</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:02.700]  Mr. Grice exclaimed</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:02.700 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:05.260]  He replied</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:05.260 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.260]  Among you Mr. Raymond</span></span>\n<span class="line"><span style="color: #C9D1D9">[00:05.240 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.240]  Entre usted, Mr. Raymond.</span></span></code></pre>\n<p>Okay, so maybe that wasn\u2019t a very good translation\u2026</p>\n<p>CLI\u2019s are incredibly useful for getting things working locally <em><strong>fast</strong></em>. But they don\u2019t scale well if you want to hook up other software systems. They aren\u2019t good for builders.</p>\n<h2 id="the-gestalt-of-apis">The Gestalt of API\u2019s</h2>\n<p>The moment you start thinking like a builder, you want things that you can piece together. Things that you can scale. Components that can be combined into more than the sum of their parts. That\u2019s where APIs come in: you can build services that provide value to any other piece of your system that you want.</p>\n<p>Want to build a notetaking app that joins your Zoom calls, records the audio, and saves the transcript for browsing later? Well, you probably don\u2019t want to call <code is:raw>whisper</code> at the command line. You want a little service running, just waiting for requests. You want an API.</p>\n<p>So, let\u2019s build one. Specifically, let\u2019s build an HTTP API that we can send HTTP POST requests to with a tool like <code is:raw>curl</code> or <a href="https://www.postman.com">Postman</a>. And let\u2019s do it in the data science language <em>du jour</em> \u2013 Python.</p>\n<p>The first thing we need to pick out is a web server framework. There are lots available and range from full-fledged development platforms like <a href="https://www.djangoproject.com/">Django</a>, to simple synchronous frameworks like <a href="https://palletsprojects.com/p/flask/">Flask</a>, to pure-Python asynchronous frameworks like <a href="https://www.tornadoweb.org/">Tornado</a>.</p>\n<p>For this example, let\u2019s stick with Flask. It does everything we need without bringing too much extra support to the table, and is one of the simplest and easiest web frameworks to get started with. Let\u2019s install it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ pip install flask</span></span></code></pre>\n<blockquote>\n<p>Pro-tip. You should not install Python packages to your system Python distribution. You should always run in a <a href="https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment">virtual environment</a>. To <a href="https://blog.deepgram.com/python-virtual-environments/">get started</a>, first create a virtual environment: <code is:raw>python3 -m venv venv</code>. Then you can activate the virtual environment: <code is:raw>source venv/bin/activate</code>. That\u2019s it! Now you can install Flask or any other libraries using <code is:raw>pip</code>. Just remember that if you close and re-open your terminal, you\u2019ll need to start by activating the virtual environment again.</p>\n</blockquote>\n<p>Let\u2019s look at what a \u201CHello, World!\u201D application looks like in Flask:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello, World!&quot;</span></span></code></pre>\n<p>Well, that looks simple. Does it run? First, save your file as <code is:raw>app.py</code>. Now, to run it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ flask run</span></span></code></pre>\n<blockquote>\n<p>Pro-tip. If you named your file something other than <code is:raw>app.py</code> \u2014 say <code is:raw>hello.py</code>, you can run it with: <code is:raw>flask --app hello run</code> (note that there is no <code is:raw>.py</code> in the invocation).</p>\n</blockquote>\n<p>By default, Flask listens on port 5000. So let\u2019s try hitting our hello-world API endpoint:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">Hello, World</span><span style="color: #FF7B72">!</span></span></code></pre>\n<p>Awesome! It\u2019s working! But how do we get our user\u2019s or client\u2019s data into Flask? That example <code is:raw>curl</code> command didn\u2019t send any file to our Flask server. In fact, our Flask app above only handled HTTP GET requests, and it turns out that GET requests can\u2019t have data (or \u201Cbodies,\u201D in HTTP parlance) attached to them. But don\u2019t worry! We just need to change our Flask app to handle POST requests and the data that comes attached to them. This isn\u2019t hard, either: we just need to tell Flask that our handler will accept POST requests:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello, World!&quot;</span></span></code></pre>\n<p>Okay, yeah, that was easy. Now let\u2019s put the actual logic for handling an uploaded file (i.e., the \u201Cbody\u201D). But we need a place to put it. Let\u2019s create a temporary file to hold the file.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, abort, request</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tempfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> NamedTemporaryFile</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> request.files:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># If the user didn&#39;t submit any files, return a 400 (Bad Request) error.</span></span>\n<span class="line"><span style="color: #C9D1D9">        abort(</span><span style="color: #79C0FF">400</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># For each file, let&#39;s store the results in a list of dictionaries.</span></span>\n<span class="line"><span style="color: #C9D1D9">    results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Loop over every file that the user submitted.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> filename, handle </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> request.files.items():</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Create a temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The location of the temporary file is available in `temp.name`.</span></span>\n<span class="line"><span style="color: #C9D1D9">        temp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> NamedTemporaryFile()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Write the user&#39;s uploaded file to the temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The file will get deleted when it drops out of scope.</span></span>\n<span class="line"><span style="color: #C9D1D9">        handle.save(temp)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Now we can store the result object for this file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        results.append({</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;filename&#39;</span><span style="color: #C9D1D9">: filename,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Coming soon!&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># This will be automatically converted to JSON.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">: results}</span></span></code></pre>\n<p>Let\u2019s try running it (if you named your file <code is:raw>app.py</code>, this is just <code is:raw>flask run</code>). Can we send a file to it? Let\u2019s try the snippet we downloaded earlier:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;Coming soon!&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>\n<p>Perfect. Now we need to connect it to Whisper.</p>\n<h2 id="making-it-real">Making It Real</h2>\n<p>At this point, it\u2019s time to get Whisper installed:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ pip install whisper</span></span></code></pre>\n<blockquote>\n<p>Pro-tip. Remember to activate your virtual environment before installing!</p>\n</blockquote>\n<p>Whisper also requires <code is:raw>ffmpeg</code> to be installed. Use your system package manager to get it installed (<code is:raw>apt</code>, <code is:raw>pacman</code>, <code is:raw>brew</code>, <code is:raw>choco</code>, etc.) - the package is usually just called <code is:raw>ffmpeg</code>.</p>\n<p>Now, what does a minimal code snippet look like to get Whisper running using Python? Well, something like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> whisper</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># We can pick which model to load.</span></span>\n<span class="line"><span style="color: #8B949E"># Models can be listed with `whisper.available_models()`.</span></span>\n<span class="line"><span style="color: #C9D1D9">model </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> whisper.load_model(</span><span style="color: #A5D6FF">&quot;base&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># We can pass in a filename or a tensor (PyTorch or numpy).</span></span>\n<span class="line"><span style="color: #C9D1D9">result </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> model.transcribe(</span><span style="color: #A5D6FF">&quot;audio.mp3&quot;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># Print the transcript.</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(result[</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9">])</span></span></code></pre>\n<p>Okay. So we load a model and then give it a file to transcribe. That should be easy to add to our Flask app. We only need to load the model once, so we can do that at the top of our app. And we are already writing uploaded data to a temporary file, so it is extra easy. Let\u2019s modify the Flask app:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, abort, request</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> whisper</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tempfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> NamedTemporaryFile</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E"># Load the Whisper model:</span></span>\n<span class="line"><span style="color: #C9D1D9">model </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> whisper.load_model(</span><span style="color: #A5D6FF">&#39;base&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> request.files:</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># If the user didn&#39;t submit any files, return a 400 (Bad Request) error.</span></span>\n<span class="line"><span style="color: #C9D1D9">        abort(</span><span style="color: #79C0FF">400</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># For each file, let&#39;s store the results in a list of dictionaries.</span></span>\n<span class="line"><span style="color: #C9D1D9">    results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Loop over every file that the user submitted.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> filename, handle </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> request.files.items():</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Create a temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The location of the temporary file is available in `temp.name`.</span></span>\n<span class="line"><span style="color: #C9D1D9">        temp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> NamedTemporaryFile()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Write the user&#39;s uploaded file to the temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The file will get deleted when it drops out of scope.</span></span>\n<span class="line"><span style="color: #C9D1D9">        handle.save(temp)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Let&#39;s get the transcript of the temporary file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        result </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> model.transcribe(temp.name)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Now we can store the result object for this file.</span></span>\n<span class="line"><span style="color: #C9D1D9">        results.append({</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;filename&#39;</span><span style="color: #C9D1D9">: filename,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: result[</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># This will be automatically converted to JSON.</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">: results}</span></span></code></pre>\n<p>Okay, everyone. Drumroll, please!</p>\n<h2 id="testing-the-api">Testing the API</h2>\n<p>Run the Flask app, just like ever: <code is:raw>flask run</code>. And now let\u2019s submit our file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; Hello, this is Steve Fuller. I&#39;m a professor of social epistemology at the University of Warwick. And the question before us today is what is epistemology and why is it important? Epistemology is the branch philosophy that is concerned with the nature of knowledge. Now why is knowledge?&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>\n<p><em>HOLY CRAP IT WORKED!</em></p>\n<p>And because we wrote the Flask app to loop over all submitted files, we can submit multiple files at once:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;anne_bronte&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.&quot;</span><span style="color: #C9D1D9">},{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;anna_green&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>\n<p>Okay, that\u2019s seriously cool. If you have <a href="https://stedolan.github.io/jq/"><code is:raw>jq</code></a> installed, you can pipe the output of <code is:raw>curl</code> into it for easier reading; otherwise, you use <code is:raw>python -m json.tool</code> as a poor man\u2019s <code is:raw>jq</code> for pretty printing:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -s -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000 </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> python -m json.tool</span></span>\n<span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">: [</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;anne_bronte&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot; On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;anna_green&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot; Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    ]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Beautiful.</p>\n<h1 id="to-the-moon">To the Moon!</h1>\n<p>Congratulations! You now have a full-fledged HTTP API at your fingertips. What will you build now?</p>\n<p>Here are some ideas for your speech recognition server:</p>\n<ul>\n<li>What features can you add to the API output? Take a look at the <a href="https://developers.deepgram.com/">Deepgram documentation</a> for some inspiration.</li>\n<li><a href="https://blog.deepgram.com/podcast-search-engine/#pulling-podcast-episodes-from-an-rss-feed">Hook up to an RSS feed</a> to automatically transcribe your favorite podcasts.</li>\n<li>Monitor a local directory and automatically transcribe any audio files that land there.</li>\n<li>Build a <a href="https://deepgram.com/built-with-deepgram/voice-controlled-car">voice-controlled car</a>.</li>\n</ul>\n<p>Happy building!</p>\n<p><em>Shortcut: If you\u2019ve skipped to the bottom and decided you <em>don\u2019t</em> want to build an API yourself, you\u2019re in luck. Deepgram hosts Whisper on it\u2019s API. <a href="https://deepgram.com/openai-whisper/">Check it out</a>.</em></p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/how-to-build-an-openai-whisper-api/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>So, you’ve probably heard about OpenAI’s <a href="https://openai.com/blog/whisper/">Whisper</a> model; if not, it’s an open-source automatic speech recognition (ASR) model – a fancy way of saying “speech-to-text” or just “speech recognition.” What makes Whisper particularly interesting is that it works with multiple languages (at the time of writing, it supports 99 languages) and also supports translation into English. It also has a surprisingly low word error rate (WER) out-of-the-box.</p>
<p>Whisper makes it pretty easy to invoke at the command line, as a CLI:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -sSfLO https://static.deepgram.com/example/tenant_of_wildfell_hall.mp3</span></span>
<span class="line"><span style="color: #C9D1D9">$ whisper tenant_of_wildfell_hall.mp3</span></span>
<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">\`--language\`</span><span style="color: #C9D1D9"> to specify the language</span></span>
<span class="line"><span style="color: #C9D1D9">Detected language: English</span></span>
<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:07.000]  On entering the parlour, we found that Honoured Lady seated </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> her armchair at the fireside,</span></span>
<span class="line"><span style="color: #C9D1D9">[00:07.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:27.000]  working away at her knitting.</span></span></code></pre>
<p>And here’s an example of its language detection at work:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -sSfLO https://static.deepgram.com/example/el_caso_leavenworth.mp3</span></span>
<span class="line"><span style="color: #C9D1D9">$ whisper el_caso_leavenworth.mp3</span></span>
<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">\`--language\`</span><span style="color: #C9D1D9"> to specify the language</span></span>
<span class="line"><span style="color: #C9D1D9">Detected language: Spanish</span></span>
<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:02.760]  Mr. Grice exclamé.</span></span>
<span class="line"><span style="color: #C9D1D9">[00:02.760 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:05.240]  El mismo me respondió.</span></span>
<span class="line"><span style="color: #C9D1D9">[00:05.240 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.240]  Entre usted, Mr. Raymond.</span></span></code></pre>
<p>And if you don’t read Spanish, you can use the CLI to translate:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ whisper el_caso_leavenworth.mp3 --task translate</span></span>
<span class="line"><span style="color: #C9D1D9">Detecting language using up to the first 30 seconds. Use </span><span style="color: #A5D6FF">\`--language\`</span><span style="color: #C9D1D9"> to specify the language</span></span>
<span class="line"><span style="color: #C9D1D9">Detected language: Spanish</span></span>
<span class="line"><span style="color: #C9D1D9">[00:00.000 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:02.700]  Mr. Grice exclaimed</span></span>
<span class="line"><span style="color: #C9D1D9">[00:02.700 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:05.260]  He replied</span></span>
<span class="line"><span style="color: #C9D1D9">[00:05.260 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.260]  Among you Mr. Raymond</span></span>
<span class="line"><span style="color: #C9D1D9">[00:05.240 --</span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> 00:29.240]  Entre usted, Mr. Raymond.</span></span></code></pre>
<p>Okay, so maybe that wasn’t a very good translation…</p>
<p>CLI’s are incredibly useful for getting things working locally <em><strong>fast</strong></em>. But they don’t scale well if you want to hook up other software systems. They aren’t good for builders.</p>
<h2 id="the-gestalt-of-apis">The Gestalt of API’s</h2>
<p>The moment you start thinking like a builder, you want things that you can piece together. Things that you can scale. Components that can be combined into more than the sum of their parts. That’s where APIs come in: you can build services that provide value to any other piece of your system that you want.</p>
<p>Want to build a notetaking app that joins your Zoom calls, records the audio, and saves the transcript for browsing later? Well, you probably don’t want to call <code>whisper</code> at the command line. You want a little service running, just waiting for requests. You want an API.</p>
<p>So, let’s build one. Specifically, let’s build an HTTP API that we can send HTTP POST requests to with a tool like <code>curl</code> or <a href="https://www.postman.com">Postman</a>. And let’s do it in the data science language <em>du jour</em> – Python.</p>
<p>The first thing we need to pick out is a web server framework. There are lots available and range from full-fledged development platforms like <a href="https://www.djangoproject.com/">Django</a>, to simple synchronous frameworks like <a href="https://palletsprojects.com/p/flask/">Flask</a>, to pure-Python asynchronous frameworks like <a href="https://www.tornadoweb.org/">Tornado</a>.</p>
<p>For this example, let’s stick with Flask. It does everything we need without bringing too much extra support to the table, and is one of the simplest and easiest web frameworks to get started with. Let’s install it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ pip install flask</span></span></code></pre>
<blockquote>
<p>Pro-tip. You should not install Python packages to your system Python distribution. You should always run in a <a href="https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment">virtual environment</a>. To <a href="https://blog.deepgram.com/python-virtual-environments/">get started</a>, first create a virtual environment: <code>python3 -m venv venv</code>. Then you can activate the virtual environment: <code>source venv/bin/activate</code>. That’s it! Now you can install Flask or any other libraries using <code>pip</code>. Just remember that if you close and re-open your terminal, you’ll need to start by activating the virtual environment again.</p>
</blockquote>
<p>Let’s look at what a “Hello, World!” application looks like in Flask:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;/&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello, World!&quot;</span></span></code></pre>
<p>Well, that looks simple. Does it run? First, save your file as <code>app.py</code>. Now, to run it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ flask run</span></span></code></pre>
<blockquote>
<p>Pro-tip. If you named your file something other than <code>app.py</code> — say <code>hello.py</code>, you can run it with: <code>flask --app hello run</code> (note that there is no <code>.py</code> in the invocation).</p>
</blockquote>
<p>By default, Flask listens on port 5000. So let’s try hitting our hello-world API endpoint:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl localhost:5000</span></span>
<span class="line"><span style="color: #C9D1D9">Hello, World</span><span style="color: #FF7B72">!</span></span></code></pre>
<p>Awesome! It’s working! But how do we get our user’s or client’s data into Flask? That example <code>curl</code> command didn’t send any file to our Flask server. In fact, our Flask app above only handled HTTP GET requests, and it turns out that GET requests can’t have data (or “bodies,” in HTTP parlance) attached to them. But don’t worry! We just need to change our Flask app to handle POST requests and the data that comes attached to them. This isn’t hard, either: we just need to tell Flask that our handler will accept POST requests:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Hello, World!&quot;</span></span></code></pre>
<p>Okay, yeah, that was easy. Now let’s put the actual logic for handling an uploaded file (i.e., the “body”). But we need a place to put it. Let’s create a temporary file to hold the file.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, abort, request</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tempfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> NamedTemporaryFile</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> request.files:</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># If the user didn&#39;t submit any files, return a 400 (Bad Request) error.</span></span>
<span class="line"><span style="color: #C9D1D9">        abort(</span><span style="color: #79C0FF">400</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># For each file, let&#39;s store the results in a list of dictionaries.</span></span>
<span class="line"><span style="color: #C9D1D9">    results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Loop over every file that the user submitted.</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> filename, handle </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> request.files.items():</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Create a temporary file.</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The location of the temporary file is available in \`temp.name\`.</span></span>
<span class="line"><span style="color: #C9D1D9">        temp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> NamedTemporaryFile()</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Write the user&#39;s uploaded file to the temporary file.</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The file will get deleted when it drops out of scope.</span></span>
<span class="line"><span style="color: #C9D1D9">        handle.save(temp)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Now we can store the result object for this file.</span></span>
<span class="line"><span style="color: #C9D1D9">        results.append({</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;filename&#39;</span><span style="color: #C9D1D9">: filename,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Coming soon!&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># This will be automatically converted to JSON.</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">: results}</span></span></code></pre>
<p>Let’s try running it (if you named your file <code>app.py</code>, this is just <code>flask run</code>). Can we send a file to it? Let’s try the snippet we downloaded earlier:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000</span></span>
<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;Coming soon!&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>
<p>Perfect. Now we need to connect it to Whisper.</p>
<h2 id="making-it-real">Making It Real</h2>
<p>At this point, it’s time to get Whisper installed:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ pip install whisper</span></span></code></pre>
<blockquote>
<p>Pro-tip. Remember to activate your virtual environment before installing!</p>
</blockquote>
<p>Whisper also requires <code>ffmpeg</code> to be installed. Use your system package manager to get it installed (<code>apt</code>, <code>pacman</code>, <code>brew</code>, <code>choco</code>, etc.) - the package is usually just called <code>ffmpeg</code>.</p>
<p>Now, what does a minimal code snippet look like to get Whisper running using Python? Well, something like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> whisper</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># We can pick which model to load.</span></span>
<span class="line"><span style="color: #8B949E"># Models can be listed with \`whisper.available_models()\`.</span></span>
<span class="line"><span style="color: #C9D1D9">model </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> whisper.load_model(</span><span style="color: #A5D6FF">&quot;base&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># We can pass in a filename or a tensor (PyTorch or numpy).</span></span>
<span class="line"><span style="color: #C9D1D9">result </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> model.transcribe(</span><span style="color: #A5D6FF">&quot;audio.mp3&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># Print the transcript.</span></span>
<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(result[</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9">])</span></span></code></pre>
<p>Okay. So we load a model and then give it a file to transcribe. That should be easy to add to our Flask app. We only need to load the model once, so we can do that at the top of our app. And we are already writing uploaded data to a temporary file, so it is extra easy. Let’s modify the Flask app:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> flask </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Flask, abort, request</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> whisper</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> tempfile </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> NamedTemporaryFile</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E"># Load the Whisper model:</span></span>
<span class="line"><span style="color: #C9D1D9">model </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> whisper.load_model(</span><span style="color: #A5D6FF">&#39;base&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Flask(</span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">@app.route</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">methods</span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9">[</span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> request.files:</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># If the user didn&#39;t submit any files, return a 400 (Bad Request) error.</span></span>
<span class="line"><span style="color: #C9D1D9">        abort(</span><span style="color: #79C0FF">400</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># For each file, let&#39;s store the results in a list of dictionaries.</span></span>
<span class="line"><span style="color: #C9D1D9">    results </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Loop over every file that the user submitted.</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> filename, handle </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> request.files.items():</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Create a temporary file.</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The location of the temporary file is available in \`temp.name\`.</span></span>
<span class="line"><span style="color: #C9D1D9">        temp </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> NamedTemporaryFile()</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Write the user&#39;s uploaded file to the temporary file.</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># The file will get deleted when it drops out of scope.</span></span>
<span class="line"><span style="color: #C9D1D9">        handle.save(temp)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Let&#39;s get the transcript of the temporary file.</span></span>
<span class="line"><span style="color: #C9D1D9">        result </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> model.transcribe(temp.name)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E"># Now we can store the result object for this file.</span></span>
<span class="line"><span style="color: #C9D1D9">        results.append({</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;filename&#39;</span><span style="color: #C9D1D9">: filename,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">: result[</span><span style="color: #A5D6FF">&#39;text&#39;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">        })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># This will be automatically converted to JSON.</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">: results}</span></span></code></pre>
<p>Okay, everyone. Drumroll, please!</p>
<h2 id="testing-the-api">Testing the API</h2>
<p>Run the Flask app, just like ever: <code>flask run</code>. And now let’s submit our file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F file=@tenant_of_wildfell_hall.mp3 localhost:5000</span></span>
<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; Hello, this is Steve Fuller. I&#39;m a professor of social epistemology at the University of Warwick. And the question before us today is what is epistemology and why is it important? Epistemology is the branch philosophy that is concerned with the nature of knowledge. Now why is knowledge?&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>
<p><em>HOLY CRAP IT WORKED!</em></p>
<p>And because we wrote the Flask app to loop over all submitted files, we can submit multiple files at once:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000</span></span>
<span class="line"><span style="color: #C9D1D9">{</span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">:[{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;anne_bronte&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.&quot;</span><span style="color: #C9D1D9">},{</span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot;anna_green&quot;</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">:</span><span style="color: #A5D6FF">&quot; Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.&quot;</span><span style="color: #C9D1D9">}]}</span></span></code></pre>
<p>Okay, that’s seriously cool. If you have <a href="https://stedolan.github.io/jq/"><code>jq</code></a> installed, you can pipe the output of <code>curl</code> into it for easier reading; otherwise, you use <code>python -m json.tool</code> as a poor man’s <code>jq</code> for pretty printing:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">$ curl -s -F anne_bronte=@tenant_of_wildfell_hall.mp3 -F anna_green=@el_caso_leavenworth.mp3 localhost:5000 </span><span style="color: #FF7B72">|</span><span style="color: #C9D1D9"> python -m json.tool</span></span>
<span class="line"><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;results&quot;</span><span style="color: #C9D1D9">: [</span></span>
<span class="line"><span style="color: #C9D1D9">        {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;anne_bronte&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot; On entering the parlour we found that honored lady seated in her armchair at the fireside, working the way after this.&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">        {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;filename&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;anna_green&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot; Mr. Grise exclame. El mismo me respondi\\u00f3. Entre usted, Mr. Raymond.&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    ]</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Beautiful.</p>
<h1 id="to-the-moon">To the Moon!</h1>
<p>Congratulations! You now have a full-fledged HTTP API at your fingertips. What will you build now?</p>
<p>Here are some ideas for your speech recognition server:</p>
<ul>
<li>What features can you add to the API output? Take a look at the <a href="https://developers.deepgram.com/">Deepgram documentation</a> for some inspiration.</li>
<li><a href="https://blog.deepgram.com/podcast-search-engine/#pulling-podcast-episodes-from-an-rss-feed">Hook up to an RSS feed</a> to automatically transcribe your favorite podcasts.</li>
<li>Monitor a local directory and automatically transcribe any audio files that land there.</li>
<li>Build a <a href="https://deepgram.com/built-with-deepgram/voice-controlled-car">voice-controlled car</a>.</li>
</ul>
<p>Happy building!</p>
<p><em>Shortcut: If you’ve skipped to the bottom and decided you <em>don’t</em> want to build an API yourself, you’re in luck. Deepgram hosts Whisper on it’s API. <a href="https://deepgram.com/openai-whisper/">Check it out</a>.</em></p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/how-to-build-an-openai-whisper-api/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
