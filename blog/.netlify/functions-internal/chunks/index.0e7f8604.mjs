import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "preparing-dependencies", "text": "Preparing Dependencies" }, { "depth": 2, "slug": "running-ffmpeg-commands", "text": "Running ffmpeg Commands" }, { "depth": 2, "slug": "transcribing-local-video", "text": "Transcribing Local Video" }, { "depth": 2, "slug": "transcribing-remote-video", "text": "Transcribing Remote Video" }], "source": "Whether your video is hosted online or on your machine, for accessibility or analysis, Deepgram can provide accurate transcriptions in just a few lines of code.\n\nI'm glad you're here, but I must confess that I am leading you down a path slightly different to what you would expect. Instead of transcribing video directly, this post will cover converting video files to audio files and then sending them to Deepgram. First, we will transcribe local files, and then we will download files programatically before transcribing them.\n\n## Before We Start\n\nYou will need:\n\n* Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n* A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n* A video file to transcribe - [here's one you can download](https://github.com/deepgram-devs/transcribe-videos/blob/main/deepgram.mp4) and place in your new project directory.\n* A link to a hosted video file - [here is the same video's direct URL](https://github.com/deepgram-devs/transcribe-videos/raw/main/deepgram.mp4).\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n```\nnpm install @deepgram/sdk ffmpeg-static\n```\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these packages:\n\n```js\nconst fs = require('fs')\nconst https = require('https')\nconst { execSync: exec } = require('child_process')\nconst { Deepgram } = require('@deepgram/sdk')\nconst ffmpegStatic = require('ffmpeg-static')\n```\n\n`fs` is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post. `ffmpeg-static` includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.\n\nInitialize the Deepgram client:\n\n```js\nconst deepgram = new Deepgram('YOUR DEEPGRAM KEY')\n```\n\n## Running ffmpeg Commands\n\n[ffmpeg](https://ffmpeg.org) is a toolkit for developers to work with audio and video files - which includes conversion between formats. It's used most commonly in a terminal, so below is a utility function to add to your `index.js` file. It allows us to fire off terminal commands directly from our Node.js application:\n\n```js\nasync function ffmpeg(command) {\n  return new Promise((resolve, reject) => {\n    exec(`${ffmpegStatic} ${command}`, (err, stderr, stdout) => {\n      if (err) reject(err)\n      resolve(stdout)\n    })\n  })\n}\n```\n\n## Transcribing Local Video\n\nThis function will convert and transcribe local video files:\n\n```js\nasync function transcribeLocalVideo(filePath) {\n  ffmpeg(`-hide_banner -y -i ${filePath} ${filePath}.wav`)\n\n  const audioFile = {\n    buffer: fs.readFileSync(`${filePath}.wav`),\n    mimetype: 'audio/wav',\n  }\n  const response = await deepgram.transcription.preRecorded(audioFile, {\n    punctuation: true,\n  })\n  return response.results\n}\n\ntranscribeLocalVideo('deepgram.mp4').then((transcript) =>\n  console.dir(transcript, { depth: null })\n)\n```\n\n``ffmpeg(`-hide_banner -y -i ${filePath} ${filePath}.wav`)`` takes in the provided file, and converts it to a `.wav` audio file. `-hide_banner` reduces the amount of information printed in the terminal and`-y` will overwrite an existing file (useful for development).\n\nSave and run the file in your terminal with `node index.js` and you should see transcripts appear.\n\n## Transcribing Remote Video\n\nAdd this utility to the bottom of your file:\n\n```js\nasync function downloadFile(url) {\n  return new Promise((resolve, reject) => {\n    const request = https.get(url, (response) => {\n      const fileName = url.split('/').slice(-1)[0] // Get the final part of the URL only\n      const fileStream = fs.createWriteStream(fileName)\n      response.pipe(fileStream)\n      response.on('end', () => {\n        fileStream.close()\n        resolve(fileName)\n      })\n    })\n  })\n}\n```\n\nThis allows us to download a file to our machine. The file name will be derived from the last part of the URL - for example https://example.com/directory/directory2/file.mp4 becomes `file.mp4` locally.\n\nWith this in place, we first download the video and then use our existing `transcribeLocalVideo()` function:\n\n```js\nasync function transcribeRemoteVideo(url) {\n  const filePath = await downloadFile(url)\n  const transcript = await transcribeLocalVideo(filePath)\n  console.dir(transcript, { depth: null })\n}\n```\n\nThe complete project is available at https://github.com/deepgram-devs/transcribe-videos and if you have any questions please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).", "html": '<p>Whether your video is hosted online or on your machine, for accessibility or analysis, Deepgram can provide accurate transcriptions in just a few lines of code.</p>\n<p>I\u2019m glad you\u2019re here, but I must confess that I am leading you down a path slightly different to what you would expect. Instead of transcribing video directly, this post will cover converting video files to audio files and then sending them to Deepgram. First, we will transcribe local files, and then we will download files programatically before transcribing them.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A video file to transcribe - <a href="https://github.com/deepgram-devs/transcribe-videos/blob/main/deepgram.mp4">here\u2019s one you can download</a> and place in your new project directory.</li>\n<li>A link to a hosted video file - <a href="https://github.com/deepgram-devs/transcribe-videos/raw/main/deepgram.mp4">here is the same video\u2019s direct URL</a>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk ffmpeg-static</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">https</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">execSync</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">exec</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;child_process&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpegStatic</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p><code is:raw>fs</code> is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post. <code is:raw>ffmpeg-static</code> includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.</p>\n<p>Initialize the Deepgram client:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="running-ffmpeg-commands">Running ffmpeg Commands</h2>\n<p><a href="https://ffmpeg.org">ffmpeg</a> is a toolkit for developers to work with audio and video files - which includes conversion between formats. It\u2019s used most commonly in a terminal, so below is a utility function to add to your <code is:raw>index.js</code> file. It allows us to fire off terminal commands directly from our Node.js application:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ffmpeg</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">exec</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">ffmpegStatic</span><span style="color: #A5D6FF">} ${</span><span style="color: #C9D1D9">command</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">stderr</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">stdout</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (err) </span><span style="color: #D2A8FF">reject</span><span style="color: #C9D1D9">(err)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(stdout)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="transcribing-local-video">Transcribing Local Video</h2>\n<p>This function will convert and transcribe local video files:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">filePath</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">ffmpeg</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`-hide_banner -y -i ${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">} ${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">}.wav`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioFile</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">}.wav`</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">    mimetype: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(audioFile, {</span></span>\n<span class="line"><span style="color: #C9D1D9">    punctuation: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response.results</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;deepgram.mp4&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">dir</span><span style="color: #C9D1D9">(transcript, { depth: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>\n<p><code is:raw>ffmpeg(`-hide_banner -y -i ${filePath} ${filePath}.wav`)</code> takes in the provided file, and converts it to a <code is:raw>.wav</code> audio file. <code is:raw>-hide_banner</code> reduces the amount of information printed in the terminal and<code is:raw>-y</code> will overwrite an existing file (useful for development).</p>\n<p>Save and run the file in your terminal with <code is:raw>node index.js</code> and you should see transcripts appear.</p>\n<h2 id="transcribing-remote-video">Transcribing Remote Video</h2>\n<p>Add this utility to the bottom of your file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">downloadFile</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">request</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> https.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(url, (</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fileName</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #8B949E">// Get the final part of the URL only</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fileStream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(fileName)</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">pipe</span><span style="color: #C9D1D9">(fileStream)</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;end&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        fileStream.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(fileName)</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This allows us to download a file to our machine. The file name will be derived from the last part of the URL - for example <a href="https://example.com/directory/directory2/file.mp4">https://example.com/directory/directory2/file.mp4</a> becomes <code is:raw>file.mp4</code> locally.</p>\n<p>With this in place, we first download the video and then use our existing <code is:raw>transcribeLocalVideo()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeRemoteVideo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">filePath</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">downloadFile</span><span style="color: #C9D1D9">(url)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(filePath)</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">dir</span><span style="color: #C9D1D9">(transcript, { depth: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The complete project is available at <a href="https://github.com/deepgram-devs/transcribe-videos">https://github.com/deepgram-devs/transcribe-videos</a> and if you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Transcribe Videos With Node.js", "description": "Convert and Transcribe Videos with Node.js and Deepgram", "date": "2021-11-11T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1635374324/blog/2021/11/transcribe-videos-nodejs/transcribe-videos-with-nodejs-blog%402x.png", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["nodejs", "sdk", "javascript"], "seo": { "title": "Transcribe Videos With Node.js", "description": "Convert and Transcribe Videos with Node.js and Deepgram" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453821/blog/transcribe-videos-nodejs/ograph.png" }, "shorturls": { "share": "https://dpgr.am/c5961f4", "twitter": "https://dpgr.am/dc34079", "linkedin": "https://dpgr.am/3621965", "reddit": "https://dpgr.am/977352f", "facebook": "https://dpgr.am/9df6807" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "preparing-dependencies", "text": "Preparing Dependencies" }, { "depth": 2, "slug": "running-ffmpeg-commands", "text": "Running ffmpeg Commands" }, { "depth": 2, "slug": "transcribing-local-video", "text": "Transcribing Local Video" }, { "depth": 2, "slug": "transcribing-remote-video", "text": "Transcribing Remote Video" }], "source": "Whether your video is hosted online or on your machine, for accessibility or analysis, Deepgram can provide accurate transcriptions in just a few lines of code.\n\nI'm glad you're here, but I must confess that I am leading you down a path slightly different to what you would expect. Instead of transcribing video directly, this post will cover converting video files to audio files and then sending them to Deepgram. First, we will transcribe local files, and then we will download files programatically before transcribing them.\n\n## Before We Start\n\nYou will need:\n\n* Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n* A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n* A video file to transcribe - [here's one you can download](https://github.com/deepgram-devs/transcribe-videos/blob/main/deepgram.mp4) and place in your new project directory.\n* A link to a hosted video file - [here is the same video's direct URL](https://github.com/deepgram-devs/transcribe-videos/raw/main/deepgram.mp4).\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n```\nnpm install @deepgram/sdk ffmpeg-static\n```\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these packages:\n\n```js\nconst fs = require('fs')\nconst https = require('https')\nconst { execSync: exec } = require('child_process')\nconst { Deepgram } = require('@deepgram/sdk')\nconst ffmpegStatic = require('ffmpeg-static')\n```\n\n`fs` is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post. `ffmpeg-static` includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.\n\nInitialize the Deepgram client:\n\n```js\nconst deepgram = new Deepgram('YOUR DEEPGRAM KEY')\n```\n\n## Running ffmpeg Commands\n\n[ffmpeg](https://ffmpeg.org) is a toolkit for developers to work with audio and video files - which includes conversion between formats. It's used most commonly in a terminal, so below is a utility function to add to your `index.js` file. It allows us to fire off terminal commands directly from our Node.js application:\n\n```js\nasync function ffmpeg(command) {\n  return new Promise((resolve, reject) => {\n    exec(`${ffmpegStatic} ${command}`, (err, stderr, stdout) => {\n      if (err) reject(err)\n      resolve(stdout)\n    })\n  })\n}\n```\n\n## Transcribing Local Video\n\nThis function will convert and transcribe local video files:\n\n```js\nasync function transcribeLocalVideo(filePath) {\n  ffmpeg(`-hide_banner -y -i ${filePath} ${filePath}.wav`)\n\n  const audioFile = {\n    buffer: fs.readFileSync(`${filePath}.wav`),\n    mimetype: 'audio/wav',\n  }\n  const response = await deepgram.transcription.preRecorded(audioFile, {\n    punctuation: true,\n  })\n  return response.results\n}\n\ntranscribeLocalVideo('deepgram.mp4').then((transcript) =>\n  console.dir(transcript, { depth: null })\n)\n```\n\n``ffmpeg(`-hide_banner -y -i ${filePath} ${filePath}.wav`)`` takes in the provided file, and converts it to a `.wav` audio file. `-hide_banner` reduces the amount of information printed in the terminal and`-y` will overwrite an existing file (useful for development).\n\nSave and run the file in your terminal with `node index.js` and you should see transcripts appear.\n\n## Transcribing Remote Video\n\nAdd this utility to the bottom of your file:\n\n```js\nasync function downloadFile(url) {\n  return new Promise((resolve, reject) => {\n    const request = https.get(url, (response) => {\n      const fileName = url.split('/').slice(-1)[0] // Get the final part of the URL only\n      const fileStream = fs.createWriteStream(fileName)\n      response.pipe(fileStream)\n      response.on('end', () => {\n        fileStream.close()\n        resolve(fileName)\n      })\n    })\n  })\n}\n```\n\nThis allows us to download a file to our machine. The file name will be derived from the last part of the URL - for example https://example.com/directory/directory2/file.mp4 becomes `file.mp4` locally.\n\nWith this in place, we first download the video and then use our existing `transcribeLocalVideo()` function:\n\n```js\nasync function transcribeRemoteVideo(url) {\n  const filePath = await downloadFile(url)\n  const transcript = await transcribeLocalVideo(filePath)\n  console.dir(transcript, { depth: null })\n}\n```\n\nThe complete project is available at https://github.com/deepgram-devs/transcribe-videos and if you have any questions please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).", "html": '<p>Whether your video is hosted online or on your machine, for accessibility or analysis, Deepgram can provide accurate transcriptions in just a few lines of code.</p>\n<p>I\u2019m glad you\u2019re here, but I must confess that I am leading you down a path slightly different to what you would expect. Instead of transcribing video directly, this post will cover converting video files to audio files and then sending them to Deepgram. First, we will transcribe local files, and then we will download files programatically before transcribing them.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A video file to transcribe - <a href="https://github.com/deepgram-devs/transcribe-videos/blob/main/deepgram.mp4">here\u2019s one you can download</a> and place in your new project directory.</li>\n<li>A link to a hosted video file - <a href="https://github.com/deepgram-devs/transcribe-videos/raw/main/deepgram.mp4">here is the same video\u2019s direct URL</a>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk ffmpeg-static</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">https</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">execSync</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">exec</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;child_process&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpegStatic</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p><code is:raw>fs</code> is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post. <code is:raw>ffmpeg-static</code> includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.</p>\n<p>Initialize the Deepgram client:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="running-ffmpeg-commands">Running ffmpeg Commands</h2>\n<p><a href="https://ffmpeg.org">ffmpeg</a> is a toolkit for developers to work with audio and video files - which includes conversion between formats. It\u2019s used most commonly in a terminal, so below is a utility function to add to your <code is:raw>index.js</code> file. It allows us to fire off terminal commands directly from our Node.js application:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ffmpeg</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">exec</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">ffmpegStatic</span><span style="color: #A5D6FF">} ${</span><span style="color: #C9D1D9">command</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">stderr</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">stdout</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (err) </span><span style="color: #D2A8FF">reject</span><span style="color: #C9D1D9">(err)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(stdout)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="transcribing-local-video">Transcribing Local Video</h2>\n<p>This function will convert and transcribe local video files:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">filePath</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">ffmpeg</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`-hide_banner -y -i ${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">} ${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">}.wav`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioFile</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">}.wav`</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">    mimetype: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(audioFile, {</span></span>\n<span class="line"><span style="color: #C9D1D9">    punctuation: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response.results</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;deepgram.mp4&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">dir</span><span style="color: #C9D1D9">(transcript, { depth: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>\n<p><code is:raw>ffmpeg(`-hide_banner -y -i ${filePath} ${filePath}.wav`)</code> takes in the provided file, and converts it to a <code is:raw>.wav</code> audio file. <code is:raw>-hide_banner</code> reduces the amount of information printed in the terminal and<code is:raw>-y</code> will overwrite an existing file (useful for development).</p>\n<p>Save and run the file in your terminal with <code is:raw>node index.js</code> and you should see transcripts appear.</p>\n<h2 id="transcribing-remote-video">Transcribing Remote Video</h2>\n<p>Add this utility to the bottom of your file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">downloadFile</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">request</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> https.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(url, (</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fileName</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #8B949E">// Get the final part of the URL only</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fileStream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(fileName)</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">pipe</span><span style="color: #C9D1D9">(fileStream)</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;end&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        fileStream.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(fileName)</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This allows us to download a file to our machine. The file name will be derived from the last part of the URL - for example <a href="https://example.com/directory/directory2/file.mp4">https://example.com/directory/directory2/file.mp4</a> becomes <code is:raw>file.mp4</code> locally.</p>\n<p>With this in place, we first download the video and then use our existing <code is:raw>transcribeLocalVideo()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeRemoteVideo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">filePath</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">downloadFile</span><span style="color: #C9D1D9">(url)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(filePath)</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">dir</span><span style="color: #C9D1D9">(transcript, { depth: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The complete project is available at <a href="https://github.com/deepgram-devs/transcribe-videos">https://github.com/deepgram-devs/transcribe-videos</a> and if you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribe-videos-nodejs/index.md" };
function rawContent() {
  return "Whether your video is hosted online or on your machine, for accessibility or analysis, Deepgram can provide accurate transcriptions in just a few lines of code.\n\nI'm glad you're here, but I must confess that I am leading you down a path slightly different to what you would expect. Instead of transcribing video directly, this post will cover converting video files to audio files and then sending them to Deepgram. First, we will transcribe local files, and then we will download files programatically before transcribing them.\n\n## Before We Start\n\nYou will need:\n\n* Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n* A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n* A video file to transcribe - [here's one you can download](https://github.com/deepgram-devs/transcribe-videos/blob/main/deepgram.mp4) and place in your new project directory.\n* A link to a hosted video file - [here is the same video's direct URL](https://github.com/deepgram-devs/transcribe-videos/raw/main/deepgram.mp4).\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n```\nnpm install @deepgram/sdk ffmpeg-static\n```\n\nCreate an `index.js` file, and open it in your code editor.\n\n## Preparing Dependencies\n\nAt the top of your file require these packages:\n\n```js\nconst fs = require('fs')\nconst https = require('https')\nconst { execSync: exec } = require('child_process')\nconst { Deepgram } = require('@deepgram/sdk')\nconst ffmpegStatic = require('ffmpeg-static')\n```\n\n`fs` is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post. `ffmpeg-static` includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.\n\nInitialize the Deepgram client:\n\n```js\nconst deepgram = new Deepgram('YOUR DEEPGRAM KEY')\n```\n\n## Running ffmpeg Commands\n\n[ffmpeg](https://ffmpeg.org) is a toolkit for developers to work with audio and video files - which includes conversion between formats. It's used most commonly in a terminal, so below is a utility function to add to your `index.js` file. It allows us to fire off terminal commands directly from our Node.js application:\n\n```js\nasync function ffmpeg(command) {\n  return new Promise((resolve, reject) => {\n    exec(`${ffmpegStatic} ${command}`, (err, stderr, stdout) => {\n      if (err) reject(err)\n      resolve(stdout)\n    })\n  })\n}\n```\n\n## Transcribing Local Video\n\nThis function will convert and transcribe local video files:\n\n```js\nasync function transcribeLocalVideo(filePath) {\n  ffmpeg(`-hide_banner -y -i ${filePath} ${filePath}.wav`)\n\n  const audioFile = {\n    buffer: fs.readFileSync(`${filePath}.wav`),\n    mimetype: 'audio/wav',\n  }\n  const response = await deepgram.transcription.preRecorded(audioFile, {\n    punctuation: true,\n  })\n  return response.results\n}\n\ntranscribeLocalVideo('deepgram.mp4').then((transcript) =>\n  console.dir(transcript, { depth: null })\n)\n```\n\n``ffmpeg(`-hide_banner -y -i ${filePath} ${filePath}.wav`)`` takes in the provided file, and converts it to a `.wav` audio file. `-hide_banner` reduces the amount of information printed in the terminal and`-y` will overwrite an existing file (useful for development).\n\nSave and run the file in your terminal with `node index.js` and you should see transcripts appear.\n\n## Transcribing Remote Video\n\nAdd this utility to the bottom of your file:\n\n```js\nasync function downloadFile(url) {\n  return new Promise((resolve, reject) => {\n    const request = https.get(url, (response) => {\n      const fileName = url.split('/').slice(-1)[0] // Get the final part of the URL only\n      const fileStream = fs.createWriteStream(fileName)\n      response.pipe(fileStream)\n      response.on('end', () => {\n        fileStream.close()\n        resolve(fileName)\n      })\n    })\n  })\n}\n```\n\nThis allows us to download a file to our machine. The file name will be derived from the last part of the URL - for example https://example.com/directory/directory2/file.mp4 becomes `file.mp4` locally.\n\nWith this in place, we first download the video and then use our existing `transcribeLocalVideo()` function:\n\n```js\nasync function transcribeRemoteVideo(url) {\n  const filePath = await downloadFile(url)\n  const transcript = await transcribeLocalVideo(filePath)\n  console.dir(transcript, { depth: null })\n}\n```\n\nThe complete project is available at https://github.com/deepgram-devs/transcribe-videos and if you have any questions please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).";
}
function compiledContent() {
  return '<p>Whether your video is hosted online or on your machine, for accessibility or analysis, Deepgram can provide accurate transcriptions in just a few lines of code.</p>\n<p>I\u2019m glad you\u2019re here, but I must confess that I am leading you down a path slightly different to what you would expect. Instead of transcribing video directly, this post will cover converting video files to audio files and then sending them to Deepgram. First, we will transcribe local files, and then we will download files programatically before transcribing them.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A video file to transcribe - <a href="https://github.com/deepgram-devs/transcribe-videos/blob/main/deepgram.mp4">here\u2019s one you can download</a> and place in your new project directory.</li>\n<li>A link to a hosted video file - <a href="https://github.com/deepgram-devs/transcribe-videos/raw/main/deepgram.mp4">here is the same video\u2019s direct URL</a>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk ffmpeg-static</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file, and open it in your code editor.</p>\n<h2 id="preparing-dependencies">Preparing Dependencies</h2>\n<p>At the top of your file require these packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">https</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">execSync</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">exec</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;child_process&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpegStatic</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p><code is:raw>fs</code> is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post. <code is:raw>ffmpeg-static</code> includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.</p>\n<p>Initialize the Deepgram client:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h2 id="running-ffmpeg-commands">Running ffmpeg Commands</h2>\n<p><a href="https://ffmpeg.org">ffmpeg</a> is a toolkit for developers to work with audio and video files - which includes conversion between formats. It\u2019s used most commonly in a terminal, so below is a utility function to add to your <code is:raw>index.js</code> file. It allows us to fire off terminal commands directly from our Node.js application:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ffmpeg</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">exec</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">ffmpegStatic</span><span style="color: #A5D6FF">} ${</span><span style="color: #C9D1D9">command</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">stderr</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">stdout</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (err) </span><span style="color: #D2A8FF">reject</span><span style="color: #C9D1D9">(err)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(stdout)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="transcribing-local-video">Transcribing Local Video</h2>\n<p>This function will convert and transcribe local video files:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">filePath</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">ffmpeg</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`-hide_banner -y -i ${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">} ${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">}.wav`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioFile</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">}.wav`</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">    mimetype: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(audioFile, {</span></span>\n<span class="line"><span style="color: #C9D1D9">    punctuation: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response.results</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;deepgram.mp4&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">dir</span><span style="color: #C9D1D9">(transcript, { depth: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>\n<p><code is:raw>ffmpeg(`-hide_banner -y -i ${filePath} ${filePath}.wav`)</code> takes in the provided file, and converts it to a <code is:raw>.wav</code> audio file. <code is:raw>-hide_banner</code> reduces the amount of information printed in the terminal and<code is:raw>-y</code> will overwrite an existing file (useful for development).</p>\n<p>Save and run the file in your terminal with <code is:raw>node index.js</code> and you should see transcripts appear.</p>\n<h2 id="transcribing-remote-video">Transcribing Remote Video</h2>\n<p>Add this utility to the bottom of your file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">downloadFile</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">request</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> https.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(url, (</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fileName</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #8B949E">// Get the final part of the URL only</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fileStream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(fileName)</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">pipe</span><span style="color: #C9D1D9">(fileStream)</span></span>\n<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;end&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        fileStream.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(fileName)</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This allows us to download a file to our machine. The file name will be derived from the last part of the URL - for example <a href="https://example.com/directory/directory2/file.mp4">https://example.com/directory/directory2/file.mp4</a> becomes <code is:raw>file.mp4</code> locally.</p>\n<p>With this in place, we first download the video and then use our existing <code is:raw>transcribeLocalVideo()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeRemoteVideo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">filePath</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">downloadFile</span><span style="color: #C9D1D9">(url)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(filePath)</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">dir</span><span style="color: #C9D1D9">(transcript, { depth: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The complete project is available at <a href="https://github.com/deepgram-devs/transcribe-videos">https://github.com/deepgram-devs/transcribe-videos</a> and if you have any questions please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribe-videos-nodejs/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Whether your video is hosted online or on your machine, for accessibility or analysis, Deepgram can provide accurate transcriptions in just a few lines of code.</p>
<p>I’m glad you’re here, but I must confess that I am leading you down a path slightly different to what you would expect. Instead of transcribing video directly, this post will cover converting video files to audio files and then sending them to Deepgram. First, we will transcribe local files, and then we will download files programatically before transcribing them.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>
<li>A video file to transcribe - <a href="https://github.com/deepgram-devs/transcribe-videos/blob/main/deepgram.mp4">here’s one you can download</a> and place in your new project directory.</li>
<li>A link to a hosted video file - <a href="https://github.com/deepgram-devs/transcribe-videos/raw/main/deepgram.mp4">here is the same video’s direct URL</a>.</li>
</ul>
<p>Create a new directory and navigate to it with your terminal. Run <code>npm init -y</code> to create a <code>package.json</code> file and then install the following packages:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install @deepgram/sdk ffmpeg-static</span></span></code></pre>
<p>Create an <code>index.js</code> file, and open it in your code editor.</p>
<h2 id="preparing-dependencies">Preparing Dependencies</h2>
<p>At the top of your file require these packages:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fs</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;fs&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">https</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">execSync</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">exec</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;child_process&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ffmpegStatic</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ffmpeg-static&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p><code>fs</code> is the built-in file system module for Node.js. It is used to read and write files which you will be doing a few times throughout this post. <code>ffmpeg-static</code> includes a version of ffmpeg in our node_modules directory, and requiring it returns the file path.</p>
<p>Initialize the Deepgram client:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR DEEPGRAM KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="running-ffmpeg-commands">Running ffmpeg Commands</h2>
<p><a href="https://ffmpeg.org">ffmpeg</a> is a toolkit for developers to work with audio and video files - which includes conversion between formats. It’s used most commonly in a terminal, so below is a utility function to add to your <code>index.js</code> file. It allows us to fire off terminal commands directly from our Node.js application:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ffmpeg</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">exec</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`\${</span><span style="color: #C9D1D9">ffmpegStatic</span><span style="color: #A5D6FF">} \${</span><span style="color: #C9D1D9">command</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">stderr</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">stdout</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (err) </span><span style="color: #D2A8FF">reject</span><span style="color: #C9D1D9">(err)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(stdout)</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h2 id="transcribing-local-video">Transcribing Local Video</h2>
<p>This function will convert and transcribe local video files:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">filePath</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">ffmpeg</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`-hide_banner -y -i \${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">} \${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">}.wav\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioFile</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    buffer: fs.</span><span style="color: #D2A8FF">readFileSync</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`\${</span><span style="color: #C9D1D9">filePath</span><span style="color: #A5D6FF">}.wav\`</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">    mimetype: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">(audioFile, {</span></span>
<span class="line"><span style="color: #C9D1D9">    punctuation: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response.results</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;deepgram.mp4&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">dir</span><span style="color: #C9D1D9">(transcript, { depth: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">)</span></span></code></pre>
<p><code>ffmpeg(\`-hide_banner -y -i \${filePath} \${filePath}.wav\`)</code> takes in the provided file, and converts it to a <code>.wav</code> audio file. <code>-hide_banner</code> reduces the amount of information printed in the terminal and<code>-y</code> will overwrite an existing file (useful for development).</p>
<p>Save and run the file in your terminal with <code>node index.js</code> and you should see transcripts appear.</p>
<h2 id="transcribing-remote-video">Transcribing Remote Video</h2>
<p>Add this utility to the bottom of your file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">downloadFile</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Promise</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">resolve</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reject</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">request</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> https.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(url, (</span><span style="color: #FFA657">response</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fileName</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> url.</span><span style="color: #D2A8FF">split</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #8B949E">// Get the final part of the URL only</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">fileStream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> fs.</span><span style="color: #D2A8FF">createWriteStream</span><span style="color: #C9D1D9">(fileName)</span></span>
<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">pipe</span><span style="color: #C9D1D9">(fileStream)</span></span>
<span class="line"><span style="color: #C9D1D9">      response.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;end&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        fileStream.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">resolve</span><span style="color: #C9D1D9">(fileName)</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This allows us to download a file to our machine. The file name will be derived from the last part of the URL - for example <a href="https://example.com/directory/directory2/file.mp4">https://example.com/directory/directory2/file.mp4</a> becomes <code>file.mp4</code> locally.</p>
<p>With this in place, we first download the video and then use our existing <code>transcribeLocalVideo()</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeRemoteVideo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">url</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">filePath</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">downloadFile</span><span style="color: #C9D1D9">(url)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">transcribeLocalVideo</span><span style="color: #C9D1D9">(filePath)</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">dir</span><span style="color: #C9D1D9">(transcript, { depth: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The complete project is available at <a href="https://github.com/deepgram-devs/transcribe-videos">https://github.com/deepgram-devs/transcribe-videos</a> and if you have any questions please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribe-videos-nodejs/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
