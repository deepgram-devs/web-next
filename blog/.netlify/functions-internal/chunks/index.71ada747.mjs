import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 2, "slug": "setup-and-draw", "text": "setup() and draw()" }, { "depth": 2, "slug": "colors-in-p5", "text": "Colors In P5" }, { "depth": 2, "slug": "drawing-shapes", "text": "Drawing Shapes" }, { "depth": 2, "slug": "setting-fills--strokes", "text": "Setting Fills & Strokes" }, { "depth": 2, "slug": "persistence-between-draws", "text": "Persistence Between Draws" }, { "depth": 2, "slug": "moving-elements", "text": "Moving Elements" }, { "depth": 2, "slug": "user-input", "text": "User Input" }, { "depth": 3, "slug": "mouse-input", "text": "Mouse Input" }, { "depth": 3, "slug": "keyboard-input", "text": "Keyboard Input" }, { "depth": 2, "slug": "drawing-text", "text": "Drawing Text" }, { "depth": 2, "slug": "drawing-images", "text": "Drawing Images" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "\nThe Canvas API allows developers to draw 2D and 3D graphics in the browser using a `<canvas>` element. As it uses JavaScript, you can create interactive and animated graphics which any other logic in your application can also impact. The Canvas API is supported in [nearly 98% of browsers](https://caniuse.com/canvas) but is quite verbose, which is where today's focus lies.\n\n[P5.js](https://p5js.org/) (from here 'P5') is a JavaScript library that makes working with the Canvas API much easier. Once included in a project, you are automatically given access to a set of global functions, variables, and lifecycle hooks. Instead of several long lines of code, most operations can be completed in a single function call.\n\nBelow is an example of a P5 sketch with only 20 lines of code. Try moving your mouse inside of it for some interactivity. [The code for this example can be found here](https://p5js.org/examples/interaction-wavemaker.html).\n\n<iframe src=\"https://hwtc8x.csb.app/\" height=\"320\" width=\"320\"></iframe>\n\nThis is the first in a three-part series on learning P5, where we will cover the basics of drawing and interacting with a P5 'sketch.' Next week, we will cover many approaches used in creating games, and in the final part, we will integrate Deepgram into a sketch.\n\nThe [P5 Reference](https://p5js.org/reference/) is your friend and documents all of the variables and functions provided to your sketches.\n\n## Getting Started\n\nOn your computer, create a new directory and open it in your code editor. Create an `index.html` file and add the following to it:\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head></head>\r\n<body>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js\"><\/script>\r\n    <script>\r\n        function setup() {\r\n        }\r\n\r\n        function draw() {\r\n        }\r\n    <\/script>\r\n</body>\r\n</html>\n```\n\n## `setup()` and `draw()`\n\nP5 relies on two main functions to be written - `setup()` and `draw()`.\n\nCode in the `setup()` is run once when the program begins - initial and fixed settings are often declared here.\n\nThe `draw()` function is continuously run from top to bottom, defaulting to 60 times a second (this frequency is known as the 'frame rate'). Most of your logic will be written here.\n\nThe frame rate is a perfect example of a value you would set during `setup()` as you are likely to only do it once in an application.\n\nTo begin, create a new canvas on your page by adding the following lines to your `setup()` function:\n\n```js\nfunction setup() {\r\n    createCanvas(500, 500)\r\n    background('red')\r\n}\n```\n\nLoad your `index.html` file in a browser, and you should see a large red square. This is your canvas which you can draw on - exciting! The `createCanvas()` function takes two arguments - a width and a height, which you have set to 500.\n\n## Colors In P5\n\nIn the current example, the `background()` function sets the entire canvas' background to `red`. Note that `red` is in quotes, as this is a CSS named color. There are plenty of other ways to define colors in P5 - try changing `background('red')` to any of the following:\n\n```js\n// Red, Green, Blue - range of 0 to 255\r\nbackground(233, 61, 69)\r\n\r\n// Equivalent to 150, 150, 150 - will always be a gray\r\nbackground(150)\r\n\r\n// Hex codes work too\r\nbackground('#38edac')\n```\n\nThere are other ways to define colors - but these represent most of what you are likely to use. There are other contexts where colors are used beyond the background that will be covered later in this tutorial.\n\nReset the background to `0`, which will result in black.\n\n## Drawing Shapes\n\nThis canvas is rather lovely, and now is the time to draw elements on it. Before you draw anything, it's worth noting that the coordinate system sets the origin (0, 0) in the top-left. The first number always represents the x-axis (left to right), and the second number represents the y-axis (top to bottom).\n\nEven though we are currently only drawing shapes once, it is recommended that you draw to the canvas in `draw()`:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n}\n```\n\nRefresh your browser, and you should see a small white circle on the canvas. The three arguments for `circle()` indicate the x position, y position, and diameter. For `circle()`, the x and y values indicate circle's center.\n\n![A back square marked zero zero in the top-left. A white ball is 20 points from the left (x) and 40 from the top (y). It is 10 points wide.](https://res.cloudinary.com/deepgram/image/upload/v1646435886/blog/2022/03/p5js-getting-started/coordinate.png)\n\nAdd a new square to your canvas and refresh your browser:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n    square(100, 100, 25)\r\n}\n```\n\nThe arguments for `square()` are the same as circle - x, y, and size. The only difference is that the (x,y) values are for the top-left corner of the square and not the center of the shape.\n\nAdd a rectangle to your canvas and refresh your browser:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n    square(100, 100, 40)\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nThe `rect()` function's arguments specify the (x,y) of the top-left corner, the size of the shape on the x-axis (length), and the size on the y-axis (height).\n\nThese values cause the square and rectangle to overlap, and for the first time, you'll see that all of the shapes so far have a black stroke (border) around them. Change the `background()` argument in `setup()` to 100 to see this more clearly.\n\n![A gray canvas with three white chapes - a circle near the top-right, a square, and a rectangle half overlapping the square.](https://res.cloudinary.com/deepgram/image/upload/v1646436612/blog/2022/03/p5js-getting-started/overlapping-shapes.png)\n\nThere are a range of other shapes to use, including `triangle()`, `ellipse()`, `line()`, and `quad()`. All work similarly, though the exact number of arguments may be different. Take a look at the [P5 Reference](https://p5js.org/reference/) for more information.\n\n## Setting Fills & Strokes\n\nStatements in P5 run in the order they are written, and elements 'drawn' are done in that order. If elements overlap, ones drawn afterward will appear 'on top,' as the other element has already been placed. If you want to see this in action, temporarily swap the `square()` and `rect()` statements to see the difference.\n\nYou need to understand that the order of statements is important to control the colors of elements. Colors aren't set when drawing an element, but instead, use their own set of functions provided by P5.\n\nUpdate `draw()` to the following and refresh your browser:\n\n```js\nfunction draw() {\r\n    fill('red')\r\n    stroke('blue')\r\n    circle(20, 40, 10)\r\n    square(100, 100, 40)\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nAll of the shapes are now red with a stroke of blue as the `fill()` and `stroke()` values are applied until it is unset or set to something else. Try this:\n\n```js\nfunction draw() {\r\n    fill('red')\r\n    circle(20, 40, 10)\r\n    square(100, 100, 40)\r\n    fill('green')\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nNow the first two shapes are red, but the third is green. Finally, try this:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n    fill('red')\r\n    square(100, 100, 40)\r\n    fill('green')\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nYou may have expected the circle to be its initial white color, but instead, it's green. Why is this?\n\n## Persistence Between Draws\n\nThe `draw()` function executes statements from beginning to end, and once completed, it starts again and repeats endlessly. The steps of 'draw a circle, then a square, then a rectangle' are happening thousands of times a second, but you can't see it because the steps are happening in the same order and in the same positions.\n\nFunctions that apply settings to the canvas are not reset between draws. Because of this, the `fill('green')` run is still the most recent `fill()` every time after the first draw. We'll get to see this more clearly later in this post.\n\n## Moving Elements\n\nBecause of variable scoping in JavaScript, any variables created in `draw()` are recreated with their initial value every frame:\n\n```js\nfunction draw() {\r\n    let frame = 1\r\n    frame += 1\r\n    frame // is always 2, regardless of how many times draw() runs\r\n}\n```\n\nInstead, persistent variables should be defined in global scope. Try this:\n\n```js\nlet frame = 1\r\nfunction draw() {\r\n    frame += 1\r\n    circle(frame, 40, 10)\r\n}\n```\n\nThe first argument in `circle()` is now the value of `frame`. Here's what it looks like:\n\n![An animation of a white circle moving across the canvas. A black trail of where it has been is visible.](https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/500-circles.gif)\n\nThe circle is not being moved every frame, but a new circle is being drawn on the existing canvas. When the circle goes off-screen, there are just over 500 circles visible. It is common to redraw the whole canvas background at the beginning of `draw()` to 'wipe' the canvas:\n\n```js\nlet frame = 1\r\nfunction draw() {\r\n    background(100)\r\n    frame += 1\r\n    circle(frame, 40, 10)\r\n}\n```\n\n![An animation of a white circle moving across the canvas.](https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/1-circle.gif)\n\n## User Input\n\n### Mouse Input\n\nAll of the P5 functionality we've used so far is in the form of global functions, but there are also many global variables provided for use in your sketches. Try this:\n\n```js\nfunction draw() {\r\n    background(100)\r\n    if(mouseIsPressed) {\r\n        fill('red')\r\n    } else {\r\n        fill('white')\r\n    }\r\n    circle(mouseX, mouseY, 10)\r\n}\n```\n\nThis small snippet effectively shows off three variables:\n\n1.  `mouseIsPressed` is `true` if a mouse button is pressed.\n2.  `mouseX` is the position of the mouse on the x-axis.\n3.  `mouseY` is the position of the mouse on the y-axis.\n\nIt's also worth knowing that the `mouseButton` variable will hold the last pressed button - either `LEFT`, `RIGHT`, or `CENTER`.\n\n### Keyboard Input\n\nJust like `mouseIsPressed`, there is a `keyIsPressed` variable. Like `mouseButton`, the `key` variable will hold the last-pressed key. We can combine this to control the position of elements:\n\n```js\nlet circleX = 250\r\nlet circleY = 250\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    if(keyIsPressed) {\r\n        if(key == 'ArrowLeft') circleX -= 1\r\n        if(key == 'ArrowRight') circleX += 1\r\n        if(key == 'ArrowUp') circleY -= 1\r\n        if(key == 'ArrowDown') circleY += 1\r\n    }\r\n\r\n    circle(circleX, circleY, 10)\r\n}\n```\n\n## Drawing Text\n\nThere are a bunch of typography-related functions provided by P5 which you can read more about in the [P5 Reference](https://p5js.org/reference/), but to focus on the two most important, try this:\n\n```js\nfunction draw() {\r\n    background(100)\r\n    fill('white')\r\n    textSize(24)\r\n    text('Current frame is ' + frameCount, 100, 100)\r\n}\n```\n\n`textSize()` changes the font size - the default is 12. `text()` takes three arguments - the text to display, and the (x,y)  `frameCount` is a built-in variable which goes up by 1 every time `draw()` is run.\n\n## Drawing Images\n\nThere are two sets to drawing images - loading them, and displaying them. We also want to make sure it is fully loaded before showing it.\n\nUp until now, we have used `setup()` and `draw()`, but one of the other lifecycle functions with P5 is `preload()`. `preload()` loads in external files fully before `setup()` is run, and this is where we will load images. Try this:\n\n```js\nlet catImage\r\nfunction preload() {\r\n    catImage = loadImage('https://placekitten.com/200/100')\r\n}\r\n\r\nfunction setup() {\r\n    createCanvas(500, 500)\r\n    background(100)\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n    image(catImage, 10, 20)\r\n}\n```\n\n![A gray canvas with a picture of a cat displayed on it near the top-left. It's slightly further down than it is across.](https://res.cloudinary.com/deepgram/image/upload/v1646676857/blog/2022/03/p5js-getting-started/cat.png)\n\nThe image will load in at its full size, so if the image is 300 pixels wide, it would use up 300 pixels on the canvas. You can optionally provide two more to set the width and height explicitly:\n\n```js\nimage(catImage, 10, 20, 100, 100)\n```\n\n## In Summary\n\nThat was a lot, and we're just warming up. We covered lifecycle functions (`preload()`, `setup()`, and `draw()`), setting colors, the P5 coordinate system, drawing shapes and text, basic animation, interacting with elements through a keyboard and mouse, and finally loading and showing images.\n\nIn next week's post, we'll cover how to build several games-related features in your P5 sketch, and in the third and final post, we'll integrate Deepgram into a P5 sketch.\n\nIf you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": `<p>The Canvas API allows developers to draw 2D and 3D graphics in the browser using a <code is:raw>&lt;canvas&gt;</code> element. As it uses JavaScript, you can create interactive and animated graphics which any other logic in your application can also impact. The Canvas API is supported in <a href="https://caniuse.com/canvas">nearly 98% of browsers</a> but is quite verbose, which is where today\u2019s focus lies.</p>
<p><a href="https://p5js.org/">P5.js</a> (from here \u2018P5\u2019) is a JavaScript library that makes working with the Canvas API much easier. Once included in a project, you are automatically given access to a set of global functions, variables, and lifecycle hooks. Instead of several long lines of code, most operations can be completed in a single function call.</p>
<p>Below is an example of a P5 sketch with only 20 lines of code. Try moving your mouse inside of it for some interactivity. <a href="https://p5js.org/examples/interaction-wavemaker.html">The code for this example can be found here</a>.</p>
<iframe src="https://hwtc8x.csb.app/" height="320" width="320" />
<p>This is the first in a three-part series on learning P5, where we will cover the basics of drawing and interacting with a P5 \u2018sketch.\u2019 Next week, we will cover many approaches used in creating games, and in the final part, we will integrate Deepgram into a sketch.</p>
<p>The <a href="https://p5js.org/reference/">P5 Reference</a> is your friend and documents all of the variables and functions provided to your sketches.</p>
<h2 id="getting-started">Getting Started</h2>
<p>On your computer, create a new directory and open it in your code editor. Create an <code is:raw>index.html</code> file and add the following to it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="setup-and-draw"><code is:raw>setup()</code> and <code is:raw>draw()</code></h2>
<p>P5 relies on two main functions to be written - <code is:raw>setup()</code> and <code is:raw>draw()</code>.</p>
<p>Code in the <code is:raw>setup()</code> is run once when the program begins - initial and fixed settings are often declared here.</p>
<p>The <code is:raw>draw()</code> function is continuously run from top to bottom, defaulting to 60 times a second (this frequency is known as the \u2018frame rate\u2019). Most of your logic will be written here.</p>
<p>The frame rate is a perfect example of a value you would set during <code is:raw>setup()</code> as you are likely to only do it once in an application.</p>
<p>To begin, create a new canvas on your page by adding the following lines to your <code is:raw>setup()</code> function:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Load your <code is:raw>index.html</code> file in a browser, and you should see a large red square. This is your canvas which you can draw on - exciting! The <code is:raw>createCanvas()</code> function takes two arguments - a width and a height, which you have set to 500.</p>
<h2 id="colors-in-p5">Colors In P5</h2>
<p>In the current example, the <code is:raw>background()</code> function sets the entire canvas\u2019 background to <code is:raw>red</code>. Note that <code is:raw>red</code> is in quotes, as this is a CSS named color. There are plenty of other ways to define colors in P5 - try changing <code is:raw>background('red')</code> to any of the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Red, Green, Blue - range of 0 to 255</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">233</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">61</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">69</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Equivalent to 150, 150, 150 - will always be a gray</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">150</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Hex codes work too</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#38edac&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>There are other ways to define colors - but these represent most of what you are likely to use. There are other contexts where colors are used beyond the background that will be covered later in this tutorial.</p>
<p>Reset the background to <code is:raw>0</code>, which will result in black.</p>
<h2 id="drawing-shapes">Drawing Shapes</h2>
<p>This canvas is rather lovely, and now is the time to draw elements on it. Before you draw anything, it\u2019s worth noting that the coordinate system sets the origin (0, 0) in the top-left. The first number always represents the x-axis (left to right), and the second number represents the y-axis (top to bottom).</p>
<p>Even though we are currently only drawing shapes once, it is recommended that you draw to the canvas in <code is:raw>draw()</code>:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Refresh your browser, and you should see a small white circle on the canvas. The three arguments for <code is:raw>circle()</code> indicate the x position, y position, and diameter. For <code is:raw>circle()</code>, the x and y values indicate circle\u2019s center.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646435886/blog/2022/03/p5js-getting-started/coordinate.png" alt="A back square marked zero zero in the top-left. A white ball is 20 points from the left (x) and 40 from the top (y). It is 10 points wide."></p>
<p>Add a new square to your canvas and refresh your browser:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">25</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The arguments for <code is:raw>square()</code> are the same as circle - x, y, and size. The only difference is that the (x,y) values are for the top-left corner of the square and not the center of the shape.</p>
<p>Add a rectangle to your canvas and refresh your browser:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code is:raw>rect()</code> function\u2019s arguments specify the (x,y) of the top-left corner, the size of the shape on the x-axis (length), and the size on the y-axis (height).</p>
<p>These values cause the square and rectangle to overlap, and for the first time, you\u2019ll see that all of the shapes so far have a black stroke (border) around them. Change the <code is:raw>background()</code> argument in <code is:raw>setup()</code> to 100 to see this more clearly.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646436612/blog/2022/03/p5js-getting-started/overlapping-shapes.png" alt="A gray canvas with three white chapes - a circle near the top-right, a square, and a rectangle half overlapping the square."></p>
<p>There are a range of other shapes to use, including <code is:raw>triangle()</code>, <code is:raw>ellipse()</code>, <code is:raw>line()</code>, and <code is:raw>quad()</code>. All work similarly, though the exact number of arguments may be different. Take a look at the <a href="https://p5js.org/reference/">P5 Reference</a> for more information.</p>
<h2 id="setting-fills--strokes">Setting Fills & Strokes</h2>
<p>Statements in P5 run in the order they are written, and elements \u2018drawn\u2019 are done in that order. If elements overlap, ones drawn afterward will appear \u2018on top,\u2019 as the other element has already been placed. If you want to see this in action, temporarily swap the <code is:raw>square()</code> and <code is:raw>rect()</code> statements to see the difference.</p>
<p>You need to understand that the order of statements is important to control the colors of elements. Colors aren\u2019t set when drawing an element, but instead, use their own set of functions provided by P5.</p>
<p>Update <code is:raw>draw()</code> to the following and refresh your browser:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">stroke</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;blue&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>All of the shapes are now red with a stroke of blue as the <code is:raw>fill()</code> and <code is:raw>stroke()</code> values are applied until it is unset or set to something else. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Now the first two shapes are red, but the third is green. Finally, try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>You may have expected the circle to be its initial white color, but instead, it\u2019s green. Why is this?</p>
<h2 id="persistence-between-draws">Persistence Between Draws</h2>
<p>The <code is:raw>draw()</code> function executes statements from beginning to end, and once completed, it starts again and repeats endlessly. The steps of \u2018draw a circle, then a square, then a rectangle\u2019 are happening thousands of times a second, but you can\u2019t see it because the steps are happening in the same order and in the same positions.</p>
<p>Functions that apply settings to the canvas are not reset between draws. Because of this, the <code is:raw>fill('green')</code> run is still the most recent <code is:raw>fill()</code> every time after the first draw. We\u2019ll get to see this more clearly later in this post.</p>
<h2 id="moving-elements">Moving Elements</h2>
<p>Because of variable scoping in JavaScript, any variables created in <code is:raw>draw()</code> are recreated with their initial value every frame:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #8B949E">// is always 2, regardless of how many times draw() runs</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Instead, persistent variables should be defined in global scope. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(frame, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The first argument in <code is:raw>circle()</code> is now the value of <code is:raw>frame</code>. Here\u2019s what it looks like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/500-circles.gif" alt="An animation of a white circle moving across the canvas. A black trail of where it has been is visible."></p>
<p>The circle is not being moved every frame, but a new circle is being drawn on the existing canvas. When the circle goes off-screen, there are just over 500 circles visible. It is common to redraw the whole canvas background at the beginning of <code is:raw>draw()</code> to \u2018wipe\u2019 the canvas:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(frame, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/1-circle.gif" alt="An animation of a white circle moving across the canvas."></p>
<h2 id="user-input">User Input</h2>
<h3 id="mouse-input">Mouse Input</h3>
<p>All of the P5 functionality we\u2019ve used so far is in the form of global functions, but there are also many global variables provided for use in your sketches. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(mouseIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(mouseX, mouseY, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This small snippet effectively shows off three variables:</p>
<ol>
<li><code is:raw>mouseIsPressed</code> is <code is:raw>true</code> if a mouse button is pressed.</li>
<li><code is:raw>mouseX</code> is the position of the mouse on the x-axis.</li>
<li><code is:raw>mouseY</code> is the position of the mouse on the y-axis.</li>
</ol>
<p>It\u2019s also worth knowing that the <code is:raw>mouseButton</code> variable will hold the last pressed button - either <code is:raw>LEFT</code>, <code is:raw>RIGHT</code>, or <code is:raw>CENTER</code>.</p>
<h3 id="keyboard-input">Keyboard Input</h3>
<p>Just like <code is:raw>mouseIsPressed</code>, there is a <code is:raw>keyIsPressed</code> variable. Like <code is:raw>mouseButton</code>, the <code is:raw>key</code> variable will hold the last-pressed key. We can combine this to control the position of elements:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> circleX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">250</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> circleY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">250</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(keyIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) circleX </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) circleX </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) circleY </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) circleY </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(circleX, circleY, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h2 id="drawing-text">Drawing Text</h2>
<p>There are a bunch of typography-related functions provided by P5 which you can read more about in the <a href="https://p5js.org/reference/">P5 Reference</a>, but to focus on the two most important, try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Current frame is &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> frameCount, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><code is:raw>textSize()</code> changes the font size - the default is 12. <code is:raw>text()</code> takes three arguments - the text to display, and the (x,y)  <code is:raw>frameCount</code> is a built-in variable which goes up by 1 every time <code is:raw>draw()</code> is run.</p>
<h2 id="drawing-images">Drawing Images</h2>
<p>There are two sets to drawing images - loading them, and displaying them. We also want to make sure it is fully loaded before showing it.</p>
<p>Up until now, we have used <code is:raw>setup()</code> and <code is:raw>draw()</code>, but one of the other lifecycle functions with P5 is <code is:raw>preload()</code>. <code is:raw>preload()</code> loads in external files fully before <code is:raw>setup()</code> is run, and this is where we will load images. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> catImage</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">preload</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    catImage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">loadImage</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https://placekitten.com/200/100&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">image</span><span style="color: #C9D1D9">(catImage, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676857/blog/2022/03/p5js-getting-started/cat.png" alt="A gray canvas with a picture of a cat displayed on it near the top-left. It&#x27;s slightly further down than it is across."></p>
<p>The image will load in at its full size, so if the image is 300 pixels wide, it would use up 300 pixels on the canvas. You can optionally provide two more to set the width and height explicitly:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">image</span><span style="color: #C9D1D9">(catImage, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="in-summary">In Summary</h2>
<p>That was a lot, and we\u2019re just warming up. We covered lifecycle functions (<code is:raw>preload()</code>, <code is:raw>setup()</code>, and <code is:raw>draw()</code>), setting colors, the P5 coordinate system, drawing shapes and text, basic animation, interacting with elements through a keyboard and mouse, and finally loading and showing images.</p>
<p>In next week\u2019s post, we\u2019ll cover how to build several games-related features in your P5 sketch, and in the third and final post, we\u2019ll integrate Deepgram into a P5 sketch.</p>
<p>If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>` };
const frontmatter = { "title": "Playing With P5.js: Getting Started", "description": "P5.js is a JavaScript library for creative coding. In this series, we'll get you up and running with everything you need to build a basic game. Get started now.", "date": "2022-03-08T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1646414380/blog/2022/03/p5js-getting-started/series-cover.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["javascript", "p5js", "beginner"], "seo": { "title": "Playing With P5.js: Getting Started", "description": "P5.js is a JavaScript library for creative coding. In this series, we'll get you up and running with everything you need to build a basic game. Get started now." }, "shorturls": { "share": "https://dpgr.am/1cf2b50", "twitter": "https://dpgr.am/861d800", "linkedin": "https://dpgr.am/38c6234", "reddit": "https://dpgr.am/6877e1a", "facebook": "https://dpgr.am/2e2f7af" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454044/blog/p5js-getting-started/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "getting-started", "text": "Getting Started" }, { "depth": 2, "slug": "setup-and-draw", "text": "setup() and draw()" }, { "depth": 2, "slug": "colors-in-p5", "text": "Colors In P5" }, { "depth": 2, "slug": "drawing-shapes", "text": "Drawing Shapes" }, { "depth": 2, "slug": "setting-fills--strokes", "text": "Setting Fills & Strokes" }, { "depth": 2, "slug": "persistence-between-draws", "text": "Persistence Between Draws" }, { "depth": 2, "slug": "moving-elements", "text": "Moving Elements" }, { "depth": 2, "slug": "user-input", "text": "User Input" }, { "depth": 3, "slug": "mouse-input", "text": "Mouse Input" }, { "depth": 3, "slug": "keyboard-input", "text": "Keyboard Input" }, { "depth": 2, "slug": "drawing-text", "text": "Drawing Text" }, { "depth": 2, "slug": "drawing-images", "text": "Drawing Images" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "\nThe Canvas API allows developers to draw 2D and 3D graphics in the browser using a `<canvas>` element. As it uses JavaScript, you can create interactive and animated graphics which any other logic in your application can also impact. The Canvas API is supported in [nearly 98% of browsers](https://caniuse.com/canvas) but is quite verbose, which is where today's focus lies.\n\n[P5.js](https://p5js.org/) (from here 'P5') is a JavaScript library that makes working with the Canvas API much easier. Once included in a project, you are automatically given access to a set of global functions, variables, and lifecycle hooks. Instead of several long lines of code, most operations can be completed in a single function call.\n\nBelow is an example of a P5 sketch with only 20 lines of code. Try moving your mouse inside of it for some interactivity. [The code for this example can be found here](https://p5js.org/examples/interaction-wavemaker.html).\n\n<iframe src=\"https://hwtc8x.csb.app/\" height=\"320\" width=\"320\"></iframe>\n\nThis is the first in a three-part series on learning P5, where we will cover the basics of drawing and interacting with a P5 'sketch.' Next week, we will cover many approaches used in creating games, and in the final part, we will integrate Deepgram into a sketch.\n\nThe [P5 Reference](https://p5js.org/reference/) is your friend and documents all of the variables and functions provided to your sketches.\n\n## Getting Started\n\nOn your computer, create a new directory and open it in your code editor. Create an `index.html` file and add the following to it:\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head></head>\r\n<body>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js\"><\/script>\r\n    <script>\r\n        function setup() {\r\n        }\r\n\r\n        function draw() {\r\n        }\r\n    <\/script>\r\n</body>\r\n</html>\n```\n\n## `setup()` and `draw()`\n\nP5 relies on two main functions to be written - `setup()` and `draw()`.\n\nCode in the `setup()` is run once when the program begins - initial and fixed settings are often declared here.\n\nThe `draw()` function is continuously run from top to bottom, defaulting to 60 times a second (this frequency is known as the 'frame rate'). Most of your logic will be written here.\n\nThe frame rate is a perfect example of a value you would set during `setup()` as you are likely to only do it once in an application.\n\nTo begin, create a new canvas on your page by adding the following lines to your `setup()` function:\n\n```js\nfunction setup() {\r\n    createCanvas(500, 500)\r\n    background('red')\r\n}\n```\n\nLoad your `index.html` file in a browser, and you should see a large red square. This is your canvas which you can draw on - exciting! The `createCanvas()` function takes two arguments - a width and a height, which you have set to 500.\n\n## Colors In P5\n\nIn the current example, the `background()` function sets the entire canvas' background to `red`. Note that `red` is in quotes, as this is a CSS named color. There are plenty of other ways to define colors in P5 - try changing `background('red')` to any of the following:\n\n```js\n// Red, Green, Blue - range of 0 to 255\r\nbackground(233, 61, 69)\r\n\r\n// Equivalent to 150, 150, 150 - will always be a gray\r\nbackground(150)\r\n\r\n// Hex codes work too\r\nbackground('#38edac')\n```\n\nThere are other ways to define colors - but these represent most of what you are likely to use. There are other contexts where colors are used beyond the background that will be covered later in this tutorial.\n\nReset the background to `0`, which will result in black.\n\n## Drawing Shapes\n\nThis canvas is rather lovely, and now is the time to draw elements on it. Before you draw anything, it's worth noting that the coordinate system sets the origin (0, 0) in the top-left. The first number always represents the x-axis (left to right), and the second number represents the y-axis (top to bottom).\n\nEven though we are currently only drawing shapes once, it is recommended that you draw to the canvas in `draw()`:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n}\n```\n\nRefresh your browser, and you should see a small white circle on the canvas. The three arguments for `circle()` indicate the x position, y position, and diameter. For `circle()`, the x and y values indicate circle's center.\n\n![A back square marked zero zero in the top-left. A white ball is 20 points from the left (x) and 40 from the top (y). It is 10 points wide.](https://res.cloudinary.com/deepgram/image/upload/v1646435886/blog/2022/03/p5js-getting-started/coordinate.png)\n\nAdd a new square to your canvas and refresh your browser:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n    square(100, 100, 25)\r\n}\n```\n\nThe arguments for `square()` are the same as circle - x, y, and size. The only difference is that the (x,y) values are for the top-left corner of the square and not the center of the shape.\n\nAdd a rectangle to your canvas and refresh your browser:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n    square(100, 100, 40)\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nThe `rect()` function's arguments specify the (x,y) of the top-left corner, the size of the shape on the x-axis (length), and the size on the y-axis (height).\n\nThese values cause the square and rectangle to overlap, and for the first time, you'll see that all of the shapes so far have a black stroke (border) around them. Change the `background()` argument in `setup()` to 100 to see this more clearly.\n\n![A gray canvas with three white chapes - a circle near the top-right, a square, and a rectangle half overlapping the square.](https://res.cloudinary.com/deepgram/image/upload/v1646436612/blog/2022/03/p5js-getting-started/overlapping-shapes.png)\n\nThere are a range of other shapes to use, including `triangle()`, `ellipse()`, `line()`, and `quad()`. All work similarly, though the exact number of arguments may be different. Take a look at the [P5 Reference](https://p5js.org/reference/) for more information.\n\n## Setting Fills & Strokes\n\nStatements in P5 run in the order they are written, and elements 'drawn' are done in that order. If elements overlap, ones drawn afterward will appear 'on top,' as the other element has already been placed. If you want to see this in action, temporarily swap the `square()` and `rect()` statements to see the difference.\n\nYou need to understand that the order of statements is important to control the colors of elements. Colors aren't set when drawing an element, but instead, use their own set of functions provided by P5.\n\nUpdate `draw()` to the following and refresh your browser:\n\n```js\nfunction draw() {\r\n    fill('red')\r\n    stroke('blue')\r\n    circle(20, 40, 10)\r\n    square(100, 100, 40)\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nAll of the shapes are now red with a stroke of blue as the `fill()` and `stroke()` values are applied until it is unset or set to something else. Try this:\n\n```js\nfunction draw() {\r\n    fill('red')\r\n    circle(20, 40, 10)\r\n    square(100, 100, 40)\r\n    fill('green')\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nNow the first two shapes are red, but the third is green. Finally, try this:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n    fill('red')\r\n    square(100, 100, 40)\r\n    fill('green')\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nYou may have expected the circle to be its initial white color, but instead, it's green. Why is this?\n\n## Persistence Between Draws\n\nThe `draw()` function executes statements from beginning to end, and once completed, it starts again and repeats endlessly. The steps of 'draw a circle, then a square, then a rectangle' are happening thousands of times a second, but you can't see it because the steps are happening in the same order and in the same positions.\n\nFunctions that apply settings to the canvas are not reset between draws. Because of this, the `fill('green')` run is still the most recent `fill()` every time after the first draw. We'll get to see this more clearly later in this post.\n\n## Moving Elements\n\nBecause of variable scoping in JavaScript, any variables created in `draw()` are recreated with their initial value every frame:\n\n```js\nfunction draw() {\r\n    let frame = 1\r\n    frame += 1\r\n    frame // is always 2, regardless of how many times draw() runs\r\n}\n```\n\nInstead, persistent variables should be defined in global scope. Try this:\n\n```js\nlet frame = 1\r\nfunction draw() {\r\n    frame += 1\r\n    circle(frame, 40, 10)\r\n}\n```\n\nThe first argument in `circle()` is now the value of `frame`. Here's what it looks like:\n\n![An animation of a white circle moving across the canvas. A black trail of where it has been is visible.](https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/500-circles.gif)\n\nThe circle is not being moved every frame, but a new circle is being drawn on the existing canvas. When the circle goes off-screen, there are just over 500 circles visible. It is common to redraw the whole canvas background at the beginning of `draw()` to 'wipe' the canvas:\n\n```js\nlet frame = 1\r\nfunction draw() {\r\n    background(100)\r\n    frame += 1\r\n    circle(frame, 40, 10)\r\n}\n```\n\n![An animation of a white circle moving across the canvas.](https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/1-circle.gif)\n\n## User Input\n\n### Mouse Input\n\nAll of the P5 functionality we've used so far is in the form of global functions, but there are also many global variables provided for use in your sketches. Try this:\n\n```js\nfunction draw() {\r\n    background(100)\r\n    if(mouseIsPressed) {\r\n        fill('red')\r\n    } else {\r\n        fill('white')\r\n    }\r\n    circle(mouseX, mouseY, 10)\r\n}\n```\n\nThis small snippet effectively shows off three variables:\n\n1.  `mouseIsPressed` is `true` if a mouse button is pressed.\n2.  `mouseX` is the position of the mouse on the x-axis.\n3.  `mouseY` is the position of the mouse on the y-axis.\n\nIt's also worth knowing that the `mouseButton` variable will hold the last pressed button - either `LEFT`, `RIGHT`, or `CENTER`.\n\n### Keyboard Input\n\nJust like `mouseIsPressed`, there is a `keyIsPressed` variable. Like `mouseButton`, the `key` variable will hold the last-pressed key. We can combine this to control the position of elements:\n\n```js\nlet circleX = 250\r\nlet circleY = 250\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    if(keyIsPressed) {\r\n        if(key == 'ArrowLeft') circleX -= 1\r\n        if(key == 'ArrowRight') circleX += 1\r\n        if(key == 'ArrowUp') circleY -= 1\r\n        if(key == 'ArrowDown') circleY += 1\r\n    }\r\n\r\n    circle(circleX, circleY, 10)\r\n}\n```\n\n## Drawing Text\n\nThere are a bunch of typography-related functions provided by P5 which you can read more about in the [P5 Reference](https://p5js.org/reference/), but to focus on the two most important, try this:\n\n```js\nfunction draw() {\r\n    background(100)\r\n    fill('white')\r\n    textSize(24)\r\n    text('Current frame is ' + frameCount, 100, 100)\r\n}\n```\n\n`textSize()` changes the font size - the default is 12. `text()` takes three arguments - the text to display, and the (x,y)  `frameCount` is a built-in variable which goes up by 1 every time `draw()` is run.\n\n## Drawing Images\n\nThere are two sets to drawing images - loading them, and displaying them. We also want to make sure it is fully loaded before showing it.\n\nUp until now, we have used `setup()` and `draw()`, but one of the other lifecycle functions with P5 is `preload()`. `preload()` loads in external files fully before `setup()` is run, and this is where we will load images. Try this:\n\n```js\nlet catImage\r\nfunction preload() {\r\n    catImage = loadImage('https://placekitten.com/200/100')\r\n}\r\n\r\nfunction setup() {\r\n    createCanvas(500, 500)\r\n    background(100)\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n    image(catImage, 10, 20)\r\n}\n```\n\n![A gray canvas with a picture of a cat displayed on it near the top-left. It's slightly further down than it is across.](https://res.cloudinary.com/deepgram/image/upload/v1646676857/blog/2022/03/p5js-getting-started/cat.png)\n\nThe image will load in at its full size, so if the image is 300 pixels wide, it would use up 300 pixels on the canvas. You can optionally provide two more to set the width and height explicitly:\n\n```js\nimage(catImage, 10, 20, 100, 100)\n```\n\n## In Summary\n\nThat was a lot, and we're just warming up. We covered lifecycle functions (`preload()`, `setup()`, and `draw()`), setting colors, the P5 coordinate system, drawing shapes and text, basic animation, interacting with elements through a keyboard and mouse, and finally loading and showing images.\n\nIn next week's post, we'll cover how to build several games-related features in your P5 sketch, and in the third and final post, we'll integrate Deepgram into a P5 sketch.\n\nIf you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": `<p>The Canvas API allows developers to draw 2D and 3D graphics in the browser using a <code is:raw>&lt;canvas&gt;</code> element. As it uses JavaScript, you can create interactive and animated graphics which any other logic in your application can also impact. The Canvas API is supported in <a href="https://caniuse.com/canvas">nearly 98% of browsers</a> but is quite verbose, which is where today\u2019s focus lies.</p>
<p><a href="https://p5js.org/">P5.js</a> (from here \u2018P5\u2019) is a JavaScript library that makes working with the Canvas API much easier. Once included in a project, you are automatically given access to a set of global functions, variables, and lifecycle hooks. Instead of several long lines of code, most operations can be completed in a single function call.</p>
<p>Below is an example of a P5 sketch with only 20 lines of code. Try moving your mouse inside of it for some interactivity. <a href="https://p5js.org/examples/interaction-wavemaker.html">The code for this example can be found here</a>.</p>
<iframe src="https://hwtc8x.csb.app/" height="320" width="320" />
<p>This is the first in a three-part series on learning P5, where we will cover the basics of drawing and interacting with a P5 \u2018sketch.\u2019 Next week, we will cover many approaches used in creating games, and in the final part, we will integrate Deepgram into a sketch.</p>
<p>The <a href="https://p5js.org/reference/">P5 Reference</a> is your friend and documents all of the variables and functions provided to your sketches.</p>
<h2 id="getting-started">Getting Started</h2>
<p>On your computer, create a new directory and open it in your code editor. Create an <code is:raw>index.html</code> file and add the following to it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="setup-and-draw"><code is:raw>setup()</code> and <code is:raw>draw()</code></h2>
<p>P5 relies on two main functions to be written - <code is:raw>setup()</code> and <code is:raw>draw()</code>.</p>
<p>Code in the <code is:raw>setup()</code> is run once when the program begins - initial and fixed settings are often declared here.</p>
<p>The <code is:raw>draw()</code> function is continuously run from top to bottom, defaulting to 60 times a second (this frequency is known as the \u2018frame rate\u2019). Most of your logic will be written here.</p>
<p>The frame rate is a perfect example of a value you would set during <code is:raw>setup()</code> as you are likely to only do it once in an application.</p>
<p>To begin, create a new canvas on your page by adding the following lines to your <code is:raw>setup()</code> function:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Load your <code is:raw>index.html</code> file in a browser, and you should see a large red square. This is your canvas which you can draw on - exciting! The <code is:raw>createCanvas()</code> function takes two arguments - a width and a height, which you have set to 500.</p>
<h2 id="colors-in-p5">Colors In P5</h2>
<p>In the current example, the <code is:raw>background()</code> function sets the entire canvas\u2019 background to <code is:raw>red</code>. Note that <code is:raw>red</code> is in quotes, as this is a CSS named color. There are plenty of other ways to define colors in P5 - try changing <code is:raw>background('red')</code> to any of the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Red, Green, Blue - range of 0 to 255</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">233</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">61</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">69</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Equivalent to 150, 150, 150 - will always be a gray</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">150</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Hex codes work too</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#38edac&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>There are other ways to define colors - but these represent most of what you are likely to use. There are other contexts where colors are used beyond the background that will be covered later in this tutorial.</p>
<p>Reset the background to <code is:raw>0</code>, which will result in black.</p>
<h2 id="drawing-shapes">Drawing Shapes</h2>
<p>This canvas is rather lovely, and now is the time to draw elements on it. Before you draw anything, it\u2019s worth noting that the coordinate system sets the origin (0, 0) in the top-left. The first number always represents the x-axis (left to right), and the second number represents the y-axis (top to bottom).</p>
<p>Even though we are currently only drawing shapes once, it is recommended that you draw to the canvas in <code is:raw>draw()</code>:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Refresh your browser, and you should see a small white circle on the canvas. The three arguments for <code is:raw>circle()</code> indicate the x position, y position, and diameter. For <code is:raw>circle()</code>, the x and y values indicate circle\u2019s center.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646435886/blog/2022/03/p5js-getting-started/coordinate.png" alt="A back square marked zero zero in the top-left. A white ball is 20 points from the left (x) and 40 from the top (y). It is 10 points wide."></p>
<p>Add a new square to your canvas and refresh your browser:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">25</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The arguments for <code is:raw>square()</code> are the same as circle - x, y, and size. The only difference is that the (x,y) values are for the top-left corner of the square and not the center of the shape.</p>
<p>Add a rectangle to your canvas and refresh your browser:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code is:raw>rect()</code> function\u2019s arguments specify the (x,y) of the top-left corner, the size of the shape on the x-axis (length), and the size on the y-axis (height).</p>
<p>These values cause the square and rectangle to overlap, and for the first time, you\u2019ll see that all of the shapes so far have a black stroke (border) around them. Change the <code is:raw>background()</code> argument in <code is:raw>setup()</code> to 100 to see this more clearly.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646436612/blog/2022/03/p5js-getting-started/overlapping-shapes.png" alt="A gray canvas with three white chapes - a circle near the top-right, a square, and a rectangle half overlapping the square."></p>
<p>There are a range of other shapes to use, including <code is:raw>triangle()</code>, <code is:raw>ellipse()</code>, <code is:raw>line()</code>, and <code is:raw>quad()</code>. All work similarly, though the exact number of arguments may be different. Take a look at the <a href="https://p5js.org/reference/">P5 Reference</a> for more information.</p>
<h2 id="setting-fills--strokes">Setting Fills & Strokes</h2>
<p>Statements in P5 run in the order they are written, and elements \u2018drawn\u2019 are done in that order. If elements overlap, ones drawn afterward will appear \u2018on top,\u2019 as the other element has already been placed. If you want to see this in action, temporarily swap the <code is:raw>square()</code> and <code is:raw>rect()</code> statements to see the difference.</p>
<p>You need to understand that the order of statements is important to control the colors of elements. Colors aren\u2019t set when drawing an element, but instead, use their own set of functions provided by P5.</p>
<p>Update <code is:raw>draw()</code> to the following and refresh your browser:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">stroke</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;blue&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>All of the shapes are now red with a stroke of blue as the <code is:raw>fill()</code> and <code is:raw>stroke()</code> values are applied until it is unset or set to something else. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Now the first two shapes are red, but the third is green. Finally, try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>You may have expected the circle to be its initial white color, but instead, it\u2019s green. Why is this?</p>
<h2 id="persistence-between-draws">Persistence Between Draws</h2>
<p>The <code is:raw>draw()</code> function executes statements from beginning to end, and once completed, it starts again and repeats endlessly. The steps of \u2018draw a circle, then a square, then a rectangle\u2019 are happening thousands of times a second, but you can\u2019t see it because the steps are happening in the same order and in the same positions.</p>
<p>Functions that apply settings to the canvas are not reset between draws. Because of this, the <code is:raw>fill('green')</code> run is still the most recent <code is:raw>fill()</code> every time after the first draw. We\u2019ll get to see this more clearly later in this post.</p>
<h2 id="moving-elements">Moving Elements</h2>
<p>Because of variable scoping in JavaScript, any variables created in <code is:raw>draw()</code> are recreated with their initial value every frame:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #8B949E">// is always 2, regardless of how many times draw() runs</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Instead, persistent variables should be defined in global scope. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(frame, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The first argument in <code is:raw>circle()</code> is now the value of <code is:raw>frame</code>. Here\u2019s what it looks like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/500-circles.gif" alt="An animation of a white circle moving across the canvas. A black trail of where it has been is visible."></p>
<p>The circle is not being moved every frame, but a new circle is being drawn on the existing canvas. When the circle goes off-screen, there are just over 500 circles visible. It is common to redraw the whole canvas background at the beginning of <code is:raw>draw()</code> to \u2018wipe\u2019 the canvas:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(frame, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/1-circle.gif" alt="An animation of a white circle moving across the canvas."></p>
<h2 id="user-input">User Input</h2>
<h3 id="mouse-input">Mouse Input</h3>
<p>All of the P5 functionality we\u2019ve used so far is in the form of global functions, but there are also many global variables provided for use in your sketches. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(mouseIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(mouseX, mouseY, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This small snippet effectively shows off three variables:</p>
<ol>
<li><code is:raw>mouseIsPressed</code> is <code is:raw>true</code> if a mouse button is pressed.</li>
<li><code is:raw>mouseX</code> is the position of the mouse on the x-axis.</li>
<li><code is:raw>mouseY</code> is the position of the mouse on the y-axis.</li>
</ol>
<p>It\u2019s also worth knowing that the <code is:raw>mouseButton</code> variable will hold the last pressed button - either <code is:raw>LEFT</code>, <code is:raw>RIGHT</code>, or <code is:raw>CENTER</code>.</p>
<h3 id="keyboard-input">Keyboard Input</h3>
<p>Just like <code is:raw>mouseIsPressed</code>, there is a <code is:raw>keyIsPressed</code> variable. Like <code is:raw>mouseButton</code>, the <code is:raw>key</code> variable will hold the last-pressed key. We can combine this to control the position of elements:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> circleX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">250</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> circleY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">250</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(keyIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) circleX </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) circleX </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) circleY </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) circleY </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(circleX, circleY, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h2 id="drawing-text">Drawing Text</h2>
<p>There are a bunch of typography-related functions provided by P5 which you can read more about in the <a href="https://p5js.org/reference/">P5 Reference</a>, but to focus on the two most important, try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Current frame is &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> frameCount, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><code is:raw>textSize()</code> changes the font size - the default is 12. <code is:raw>text()</code> takes three arguments - the text to display, and the (x,y)  <code is:raw>frameCount</code> is a built-in variable which goes up by 1 every time <code is:raw>draw()</code> is run.</p>
<h2 id="drawing-images">Drawing Images</h2>
<p>There are two sets to drawing images - loading them, and displaying them. We also want to make sure it is fully loaded before showing it.</p>
<p>Up until now, we have used <code is:raw>setup()</code> and <code is:raw>draw()</code>, but one of the other lifecycle functions with P5 is <code is:raw>preload()</code>. <code is:raw>preload()</code> loads in external files fully before <code is:raw>setup()</code> is run, and this is where we will load images. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> catImage</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">preload</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    catImage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">loadImage</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https://placekitten.com/200/100&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">image</span><span style="color: #C9D1D9">(catImage, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676857/blog/2022/03/p5js-getting-started/cat.png" alt="A gray canvas with a picture of a cat displayed on it near the top-left. It&#x27;s slightly further down than it is across."></p>
<p>The image will load in at its full size, so if the image is 300 pixels wide, it would use up 300 pixels on the canvas. You can optionally provide two more to set the width and height explicitly:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">image</span><span style="color: #C9D1D9">(catImage, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="in-summary">In Summary</h2>
<p>That was a lot, and we\u2019re just warming up. We covered lifecycle functions (<code is:raw>preload()</code>, <code is:raw>setup()</code>, and <code is:raw>draw()</code>), setting colors, the P5 coordinate system, drawing shapes and text, basic animation, interacting with elements through a keyboard and mouse, and finally loading and showing images.</p>
<p>In next week\u2019s post, we\u2019ll cover how to build several games-related features in your P5 sketch, and in the third and final post, we\u2019ll integrate Deepgram into a P5 sketch.</p>
<p>If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>` }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/p5js-getting-started/index.md" };
function rawContent() {
  return "\nThe Canvas API allows developers to draw 2D and 3D graphics in the browser using a `<canvas>` element. As it uses JavaScript, you can create interactive and animated graphics which any other logic in your application can also impact. The Canvas API is supported in [nearly 98% of browsers](https://caniuse.com/canvas) but is quite verbose, which is where today's focus lies.\n\n[P5.js](https://p5js.org/) (from here 'P5') is a JavaScript library that makes working with the Canvas API much easier. Once included in a project, you are automatically given access to a set of global functions, variables, and lifecycle hooks. Instead of several long lines of code, most operations can be completed in a single function call.\n\nBelow is an example of a P5 sketch with only 20 lines of code. Try moving your mouse inside of it for some interactivity. [The code for this example can be found here](https://p5js.org/examples/interaction-wavemaker.html).\n\n<iframe src=\"https://hwtc8x.csb.app/\" height=\"320\" width=\"320\"></iframe>\n\nThis is the first in a three-part series on learning P5, where we will cover the basics of drawing and interacting with a P5 'sketch.' Next week, we will cover many approaches used in creating games, and in the final part, we will integrate Deepgram into a sketch.\n\nThe [P5 Reference](https://p5js.org/reference/) is your friend and documents all of the variables and functions provided to your sketches.\n\n## Getting Started\n\nOn your computer, create a new directory and open it in your code editor. Create an `index.html` file and add the following to it:\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head></head>\r\n<body>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js\"><\/script>\r\n    <script>\r\n        function setup() {\r\n        }\r\n\r\n        function draw() {\r\n        }\r\n    <\/script>\r\n</body>\r\n</html>\n```\n\n## `setup()` and `draw()`\n\nP5 relies on two main functions to be written - `setup()` and `draw()`.\n\nCode in the `setup()` is run once when the program begins - initial and fixed settings are often declared here.\n\nThe `draw()` function is continuously run from top to bottom, defaulting to 60 times a second (this frequency is known as the 'frame rate'). Most of your logic will be written here.\n\nThe frame rate is a perfect example of a value you would set during `setup()` as you are likely to only do it once in an application.\n\nTo begin, create a new canvas on your page by adding the following lines to your `setup()` function:\n\n```js\nfunction setup() {\r\n    createCanvas(500, 500)\r\n    background('red')\r\n}\n```\n\nLoad your `index.html` file in a browser, and you should see a large red square. This is your canvas which you can draw on - exciting! The `createCanvas()` function takes two arguments - a width and a height, which you have set to 500.\n\n## Colors In P5\n\nIn the current example, the `background()` function sets the entire canvas' background to `red`. Note that `red` is in quotes, as this is a CSS named color. There are plenty of other ways to define colors in P5 - try changing `background('red')` to any of the following:\n\n```js\n// Red, Green, Blue - range of 0 to 255\r\nbackground(233, 61, 69)\r\n\r\n// Equivalent to 150, 150, 150 - will always be a gray\r\nbackground(150)\r\n\r\n// Hex codes work too\r\nbackground('#38edac')\n```\n\nThere are other ways to define colors - but these represent most of what you are likely to use. There are other contexts where colors are used beyond the background that will be covered later in this tutorial.\n\nReset the background to `0`, which will result in black.\n\n## Drawing Shapes\n\nThis canvas is rather lovely, and now is the time to draw elements on it. Before you draw anything, it's worth noting that the coordinate system sets the origin (0, 0) in the top-left. The first number always represents the x-axis (left to right), and the second number represents the y-axis (top to bottom).\n\nEven though we are currently only drawing shapes once, it is recommended that you draw to the canvas in `draw()`:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n}\n```\n\nRefresh your browser, and you should see a small white circle on the canvas. The three arguments for `circle()` indicate the x position, y position, and diameter. For `circle()`, the x and y values indicate circle's center.\n\n![A back square marked zero zero in the top-left. A white ball is 20 points from the left (x) and 40 from the top (y). It is 10 points wide.](https://res.cloudinary.com/deepgram/image/upload/v1646435886/blog/2022/03/p5js-getting-started/coordinate.png)\n\nAdd a new square to your canvas and refresh your browser:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n    square(100, 100, 25)\r\n}\n```\n\nThe arguments for `square()` are the same as circle - x, y, and size. The only difference is that the (x,y) values are for the top-left corner of the square and not the center of the shape.\n\nAdd a rectangle to your canvas and refresh your browser:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n    square(100, 100, 40)\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nThe `rect()` function's arguments specify the (x,y) of the top-left corner, the size of the shape on the x-axis (length), and the size on the y-axis (height).\n\nThese values cause the square and rectangle to overlap, and for the first time, you'll see that all of the shapes so far have a black stroke (border) around them. Change the `background()` argument in `setup()` to 100 to see this more clearly.\n\n![A gray canvas with three white chapes - a circle near the top-right, a square, and a rectangle half overlapping the square.](https://res.cloudinary.com/deepgram/image/upload/v1646436612/blog/2022/03/p5js-getting-started/overlapping-shapes.png)\n\nThere are a range of other shapes to use, including `triangle()`, `ellipse()`, `line()`, and `quad()`. All work similarly, though the exact number of arguments may be different. Take a look at the [P5 Reference](https://p5js.org/reference/) for more information.\n\n## Setting Fills & Strokes\n\nStatements in P5 run in the order they are written, and elements 'drawn' are done in that order. If elements overlap, ones drawn afterward will appear 'on top,' as the other element has already been placed. If you want to see this in action, temporarily swap the `square()` and `rect()` statements to see the difference.\n\nYou need to understand that the order of statements is important to control the colors of elements. Colors aren't set when drawing an element, but instead, use their own set of functions provided by P5.\n\nUpdate `draw()` to the following and refresh your browser:\n\n```js\nfunction draw() {\r\n    fill('red')\r\n    stroke('blue')\r\n    circle(20, 40, 10)\r\n    square(100, 100, 40)\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nAll of the shapes are now red with a stroke of blue as the `fill()` and `stroke()` values are applied until it is unset or set to something else. Try this:\n\n```js\nfunction draw() {\r\n    fill('red')\r\n    circle(20, 40, 10)\r\n    square(100, 100, 40)\r\n    fill('green')\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nNow the first two shapes are red, but the third is green. Finally, try this:\n\n```js\nfunction draw() {\r\n    circle(20, 40, 10)\r\n    fill('red')\r\n    square(100, 100, 40)\r\n    fill('green')\r\n    rect(120, 50, 40, 70)\r\n}\n```\n\nYou may have expected the circle to be its initial white color, but instead, it's green. Why is this?\n\n## Persistence Between Draws\n\nThe `draw()` function executes statements from beginning to end, and once completed, it starts again and repeats endlessly. The steps of 'draw a circle, then a square, then a rectangle' are happening thousands of times a second, but you can't see it because the steps are happening in the same order and in the same positions.\n\nFunctions that apply settings to the canvas are not reset between draws. Because of this, the `fill('green')` run is still the most recent `fill()` every time after the first draw. We'll get to see this more clearly later in this post.\n\n## Moving Elements\n\nBecause of variable scoping in JavaScript, any variables created in `draw()` are recreated with their initial value every frame:\n\n```js\nfunction draw() {\r\n    let frame = 1\r\n    frame += 1\r\n    frame // is always 2, regardless of how many times draw() runs\r\n}\n```\n\nInstead, persistent variables should be defined in global scope. Try this:\n\n```js\nlet frame = 1\r\nfunction draw() {\r\n    frame += 1\r\n    circle(frame, 40, 10)\r\n}\n```\n\nThe first argument in `circle()` is now the value of `frame`. Here's what it looks like:\n\n![An animation of a white circle moving across the canvas. A black trail of where it has been is visible.](https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/500-circles.gif)\n\nThe circle is not being moved every frame, but a new circle is being drawn on the existing canvas. When the circle goes off-screen, there are just over 500 circles visible. It is common to redraw the whole canvas background at the beginning of `draw()` to 'wipe' the canvas:\n\n```js\nlet frame = 1\r\nfunction draw() {\r\n    background(100)\r\n    frame += 1\r\n    circle(frame, 40, 10)\r\n}\n```\n\n![An animation of a white circle moving across the canvas.](https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/1-circle.gif)\n\n## User Input\n\n### Mouse Input\n\nAll of the P5 functionality we've used so far is in the form of global functions, but there are also many global variables provided for use in your sketches. Try this:\n\n```js\nfunction draw() {\r\n    background(100)\r\n    if(mouseIsPressed) {\r\n        fill('red')\r\n    } else {\r\n        fill('white')\r\n    }\r\n    circle(mouseX, mouseY, 10)\r\n}\n```\n\nThis small snippet effectively shows off three variables:\n\n1.  `mouseIsPressed` is `true` if a mouse button is pressed.\n2.  `mouseX` is the position of the mouse on the x-axis.\n3.  `mouseY` is the position of the mouse on the y-axis.\n\nIt's also worth knowing that the `mouseButton` variable will hold the last pressed button - either `LEFT`, `RIGHT`, or `CENTER`.\n\n### Keyboard Input\n\nJust like `mouseIsPressed`, there is a `keyIsPressed` variable. Like `mouseButton`, the `key` variable will hold the last-pressed key. We can combine this to control the position of elements:\n\n```js\nlet circleX = 250\r\nlet circleY = 250\r\n\r\nfunction draw() {\r\n    background(100)\r\n\r\n    if(keyIsPressed) {\r\n        if(key == 'ArrowLeft') circleX -= 1\r\n        if(key == 'ArrowRight') circleX += 1\r\n        if(key == 'ArrowUp') circleY -= 1\r\n        if(key == 'ArrowDown') circleY += 1\r\n    }\r\n\r\n    circle(circleX, circleY, 10)\r\n}\n```\n\n## Drawing Text\n\nThere are a bunch of typography-related functions provided by P5 which you can read more about in the [P5 Reference](https://p5js.org/reference/), but to focus on the two most important, try this:\n\n```js\nfunction draw() {\r\n    background(100)\r\n    fill('white')\r\n    textSize(24)\r\n    text('Current frame is ' + frameCount, 100, 100)\r\n}\n```\n\n`textSize()` changes the font size - the default is 12. `text()` takes three arguments - the text to display, and the (x,y)  `frameCount` is a built-in variable which goes up by 1 every time `draw()` is run.\n\n## Drawing Images\n\nThere are two sets to drawing images - loading them, and displaying them. We also want to make sure it is fully loaded before showing it.\n\nUp until now, we have used `setup()` and `draw()`, but one of the other lifecycle functions with P5 is `preload()`. `preload()` loads in external files fully before `setup()` is run, and this is where we will load images. Try this:\n\n```js\nlet catImage\r\nfunction preload() {\r\n    catImage = loadImage('https://placekitten.com/200/100')\r\n}\r\n\r\nfunction setup() {\r\n    createCanvas(500, 500)\r\n    background(100)\r\n}\r\n\r\nfunction draw() {\r\n    background(100)\r\n    image(catImage, 10, 20)\r\n}\n```\n\n![A gray canvas with a picture of a cat displayed on it near the top-left. It's slightly further down than it is across.](https://res.cloudinary.com/deepgram/image/upload/v1646676857/blog/2022/03/p5js-getting-started/cat.png)\n\nThe image will load in at its full size, so if the image is 300 pixels wide, it would use up 300 pixels on the canvas. You can optionally provide two more to set the width and height explicitly:\n\n```js\nimage(catImage, 10, 20, 100, 100)\n```\n\n## In Summary\n\nThat was a lot, and we're just warming up. We covered lifecycle functions (`preload()`, `setup()`, and `draw()`), setting colors, the P5 coordinate system, drawing shapes and text, basic animation, interacting with elements through a keyboard and mouse, and finally loading and showing images.\n\nIn next week's post, we'll cover how to build several games-related features in your P5 sketch, and in the third and final post, we'll integrate Deepgram into a P5 sketch.\n\nIf you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ";
}
function compiledContent() {
  return `<p>The Canvas API allows developers to draw 2D and 3D graphics in the browser using a <code is:raw>&lt;canvas&gt;</code> element. As it uses JavaScript, you can create interactive and animated graphics which any other logic in your application can also impact. The Canvas API is supported in <a href="https://caniuse.com/canvas">nearly 98% of browsers</a> but is quite verbose, which is where today\u2019s focus lies.</p>
<p><a href="https://p5js.org/">P5.js</a> (from here \u2018P5\u2019) is a JavaScript library that makes working with the Canvas API much easier. Once included in a project, you are automatically given access to a set of global functions, variables, and lifecycle hooks. Instead of several long lines of code, most operations can be completed in a single function call.</p>
<p>Below is an example of a P5 sketch with only 20 lines of code. Try moving your mouse inside of it for some interactivity. <a href="https://p5js.org/examples/interaction-wavemaker.html">The code for this example can be found here</a>.</p>
<iframe src="https://hwtc8x.csb.app/" height="320" width="320" />
<p>This is the first in a three-part series on learning P5, where we will cover the basics of drawing and interacting with a P5 \u2018sketch.\u2019 Next week, we will cover many approaches used in creating games, and in the final part, we will integrate Deepgram into a sketch.</p>
<p>The <a href="https://p5js.org/reference/">P5 Reference</a> is your friend and documents all of the variables and functions provided to your sketches.</p>
<h2 id="getting-started">Getting Started</h2>
<p>On your computer, create a new directory and open it in your code editor. Create an <code is:raw>index.html</code> file and add the following to it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="setup-and-draw"><code is:raw>setup()</code> and <code is:raw>draw()</code></h2>
<p>P5 relies on two main functions to be written - <code is:raw>setup()</code> and <code is:raw>draw()</code>.</p>
<p>Code in the <code is:raw>setup()</code> is run once when the program begins - initial and fixed settings are often declared here.</p>
<p>The <code is:raw>draw()</code> function is continuously run from top to bottom, defaulting to 60 times a second (this frequency is known as the \u2018frame rate\u2019). Most of your logic will be written here.</p>
<p>The frame rate is a perfect example of a value you would set during <code is:raw>setup()</code> as you are likely to only do it once in an application.</p>
<p>To begin, create a new canvas on your page by adding the following lines to your <code is:raw>setup()</code> function:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Load your <code is:raw>index.html</code> file in a browser, and you should see a large red square. This is your canvas which you can draw on - exciting! The <code is:raw>createCanvas()</code> function takes two arguments - a width and a height, which you have set to 500.</p>
<h2 id="colors-in-p5">Colors In P5</h2>
<p>In the current example, the <code is:raw>background()</code> function sets the entire canvas\u2019 background to <code is:raw>red</code>. Note that <code is:raw>red</code> is in quotes, as this is a CSS named color. There are plenty of other ways to define colors in P5 - try changing <code is:raw>background('red')</code> to any of the following:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Red, Green, Blue - range of 0 to 255</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">233</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">61</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">69</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Equivalent to 150, 150, 150 - will always be a gray</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">150</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Hex codes work too</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#38edac&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>There are other ways to define colors - but these represent most of what you are likely to use. There are other contexts where colors are used beyond the background that will be covered later in this tutorial.</p>
<p>Reset the background to <code is:raw>0</code>, which will result in black.</p>
<h2 id="drawing-shapes">Drawing Shapes</h2>
<p>This canvas is rather lovely, and now is the time to draw elements on it. Before you draw anything, it\u2019s worth noting that the coordinate system sets the origin (0, 0) in the top-left. The first number always represents the x-axis (left to right), and the second number represents the y-axis (top to bottom).</p>
<p>Even though we are currently only drawing shapes once, it is recommended that you draw to the canvas in <code is:raw>draw()</code>:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Refresh your browser, and you should see a small white circle on the canvas. The three arguments for <code is:raw>circle()</code> indicate the x position, y position, and diameter. For <code is:raw>circle()</code>, the x and y values indicate circle\u2019s center.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646435886/blog/2022/03/p5js-getting-started/coordinate.png" alt="A back square marked zero zero in the top-left. A white ball is 20 points from the left (x) and 40 from the top (y). It is 10 points wide."></p>
<p>Add a new square to your canvas and refresh your browser:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">25</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The arguments for <code is:raw>square()</code> are the same as circle - x, y, and size. The only difference is that the (x,y) values are for the top-left corner of the square and not the center of the shape.</p>
<p>Add a rectangle to your canvas and refresh your browser:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code is:raw>rect()</code> function\u2019s arguments specify the (x,y) of the top-left corner, the size of the shape on the x-axis (length), and the size on the y-axis (height).</p>
<p>These values cause the square and rectangle to overlap, and for the first time, you\u2019ll see that all of the shapes so far have a black stroke (border) around them. Change the <code is:raw>background()</code> argument in <code is:raw>setup()</code> to 100 to see this more clearly.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646436612/blog/2022/03/p5js-getting-started/overlapping-shapes.png" alt="A gray canvas with three white chapes - a circle near the top-right, a square, and a rectangle half overlapping the square."></p>
<p>There are a range of other shapes to use, including <code is:raw>triangle()</code>, <code is:raw>ellipse()</code>, <code is:raw>line()</code>, and <code is:raw>quad()</code>. All work similarly, though the exact number of arguments may be different. Take a look at the <a href="https://p5js.org/reference/">P5 Reference</a> for more information.</p>
<h2 id="setting-fills--strokes">Setting Fills & Strokes</h2>
<p>Statements in P5 run in the order they are written, and elements \u2018drawn\u2019 are done in that order. If elements overlap, ones drawn afterward will appear \u2018on top,\u2019 as the other element has already been placed. If you want to see this in action, temporarily swap the <code is:raw>square()</code> and <code is:raw>rect()</code> statements to see the difference.</p>
<p>You need to understand that the order of statements is important to control the colors of elements. Colors aren\u2019t set when drawing an element, but instead, use their own set of functions provided by P5.</p>
<p>Update <code is:raw>draw()</code> to the following and refresh your browser:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">stroke</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;blue&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>All of the shapes are now red with a stroke of blue as the <code is:raw>fill()</code> and <code is:raw>stroke()</code> values are applied until it is unset or set to something else. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Now the first two shapes are red, but the third is green. Finally, try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>You may have expected the circle to be its initial white color, but instead, it\u2019s green. Why is this?</p>
<h2 id="persistence-between-draws">Persistence Between Draws</h2>
<p>The <code is:raw>draw()</code> function executes statements from beginning to end, and once completed, it starts again and repeats endlessly. The steps of \u2018draw a circle, then a square, then a rectangle\u2019 are happening thousands of times a second, but you can\u2019t see it because the steps are happening in the same order and in the same positions.</p>
<p>Functions that apply settings to the canvas are not reset between draws. Because of this, the <code is:raw>fill('green')</code> run is still the most recent <code is:raw>fill()</code> every time after the first draw. We\u2019ll get to see this more clearly later in this post.</p>
<h2 id="moving-elements">Moving Elements</h2>
<p>Because of variable scoping in JavaScript, any variables created in <code is:raw>draw()</code> are recreated with their initial value every frame:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #8B949E">// is always 2, regardless of how many times draw() runs</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Instead, persistent variables should be defined in global scope. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(frame, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The first argument in <code is:raw>circle()</code> is now the value of <code is:raw>frame</code>. Here\u2019s what it looks like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/500-circles.gif" alt="An animation of a white circle moving across the canvas. A black trail of where it has been is visible."></p>
<p>The circle is not being moved every frame, but a new circle is being drawn on the existing canvas. When the circle goes off-screen, there are just over 500 circles visible. It is common to redraw the whole canvas background at the beginning of <code is:raw>draw()</code> to \u2018wipe\u2019 the canvas:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(frame, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/1-circle.gif" alt="An animation of a white circle moving across the canvas."></p>
<h2 id="user-input">User Input</h2>
<h3 id="mouse-input">Mouse Input</h3>
<p>All of the P5 functionality we\u2019ve used so far is in the form of global functions, but there are also many global variables provided for use in your sketches. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(mouseIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(mouseX, mouseY, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This small snippet effectively shows off three variables:</p>
<ol>
<li><code is:raw>mouseIsPressed</code> is <code is:raw>true</code> if a mouse button is pressed.</li>
<li><code is:raw>mouseX</code> is the position of the mouse on the x-axis.</li>
<li><code is:raw>mouseY</code> is the position of the mouse on the y-axis.</li>
</ol>
<p>It\u2019s also worth knowing that the <code is:raw>mouseButton</code> variable will hold the last pressed button - either <code is:raw>LEFT</code>, <code is:raw>RIGHT</code>, or <code is:raw>CENTER</code>.</p>
<h3 id="keyboard-input">Keyboard Input</h3>
<p>Just like <code is:raw>mouseIsPressed</code>, there is a <code is:raw>keyIsPressed</code> variable. Like <code is:raw>mouseButton</code>, the <code is:raw>key</code> variable will hold the last-pressed key. We can combine this to control the position of elements:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> circleX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">250</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> circleY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">250</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(keyIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) circleX </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) circleX </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) circleY </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) circleY </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(circleX, circleY, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h2 id="drawing-text">Drawing Text</h2>
<p>There are a bunch of typography-related functions provided by P5 which you can read more about in the <a href="https://p5js.org/reference/">P5 Reference</a>, but to focus on the two most important, try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Current frame is &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> frameCount, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><code is:raw>textSize()</code> changes the font size - the default is 12. <code is:raw>text()</code> takes three arguments - the text to display, and the (x,y)  <code is:raw>frameCount</code> is a built-in variable which goes up by 1 every time <code is:raw>draw()</code> is run.</p>
<h2 id="drawing-images">Drawing Images</h2>
<p>There are two sets to drawing images - loading them, and displaying them. We also want to make sure it is fully loaded before showing it.</p>
<p>Up until now, we have used <code is:raw>setup()</code> and <code is:raw>draw()</code>, but one of the other lifecycle functions with P5 is <code is:raw>preload()</code>. <code is:raw>preload()</code> loads in external files fully before <code is:raw>setup()</code> is run, and this is where we will load images. Try this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> catImage</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">preload</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    catImage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">loadImage</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https://placekitten.com/200/100&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">image</span><span style="color: #C9D1D9">(catImage, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676857/blog/2022/03/p5js-getting-started/cat.png" alt="A gray canvas with a picture of a cat displayed on it near the top-left. It&#x27;s slightly further down than it is across."></p>
<p>The image will load in at its full size, so if the image is 300 pixels wide, it would use up 300 pixels on the canvas. You can optionally provide two more to set the width and height explicitly:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">image</span><span style="color: #C9D1D9">(catImage, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="in-summary">In Summary</h2>
<p>That was a lot, and we\u2019re just warming up. We covered lifecycle functions (<code is:raw>preload()</code>, <code is:raw>setup()</code>, and <code is:raw>draw()</code>), setting colors, the P5 coordinate system, drawing shapes and text, basic animation, interacting with elements through a keyboard and mouse, and finally loading and showing images.</p>
<p>In next week\u2019s post, we\u2019ll cover how to build several games-related features in your P5 sketch, and in the third and final post, we\u2019ll integrate Deepgram into a P5 sketch.</p>
<p>If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/p5js-getting-started/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>The Canvas API allows developers to draw 2D and 3D graphics in the browser using a <code>&lt;canvas&gt;</code> element. As it uses JavaScript, you can create interactive and animated graphics which any other logic in your application can also impact. The Canvas API is supported in <a href="https://caniuse.com/canvas">nearly 98% of browsers</a> but is quite verbose, which is where today’s focus lies.</p>
<p><a href="https://p5js.org/">P5.js</a> (from here ‘P5’) is a JavaScript library that makes working with the Canvas API much easier. Once included in a project, you are automatically given access to a set of global functions, variables, and lifecycle hooks. Instead of several long lines of code, most operations can be completed in a single function call.</p>
<p>Below is an example of a P5 sketch with only 20 lines of code. Try moving your mouse inside of it for some interactivity. <a href="https://p5js.org/examples/interaction-wavemaker.html">The code for this example can be found here</a>.</p>
<iframe src="https://hwtc8x.csb.app/" height="320" width="320"></iframe>
<p>This is the first in a three-part series on learning P5, where we will cover the basics of drawing and interacting with a P5 ‘sketch.’ Next week, we will cover many approaches used in creating games, and in the final part, we will integrate Deepgram into a sketch.</p>
<p>The <a href="https://p5js.org/reference/">P5 Reference</a> is your friend and documents all of the variables and functions provided to your sketches.</p>
<h2 id="getting-started">Getting Started</h2>
<p>On your computer, create a new directory and open it in your code editor. Create an <code>index.html</code> file and add the following to it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="setup-and-draw"><code>setup()</code> and <code>draw()</code></h2>
<p>P5 relies on two main functions to be written - <code>setup()</code> and <code>draw()</code>.</p>
<p>Code in the <code>setup()</code> is run once when the program begins - initial and fixed settings are often declared here.</p>
<p>The <code>draw()</code> function is continuously run from top to bottom, defaulting to 60 times a second (this frequency is known as the ‘frame rate’). Most of your logic will be written here.</p>
<p>The frame rate is a perfect example of a value you would set during <code>setup()</code> as you are likely to only do it once in an application.</p>
<p>To begin, create a new canvas on your page by adding the following lines to your <code>setup()</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Load your <code>index.html</code> file in a browser, and you should see a large red square. This is your canvas which you can draw on - exciting! The <code>createCanvas()</code> function takes two arguments - a width and a height, which you have set to 500.</p>
<h2 id="colors-in-p5">Colors In P5</h2>
<p>In the current example, the <code>background()</code> function sets the entire canvas’ background to <code>red</code>. Note that <code>red</code> is in quotes, as this is a CSS named color. There are plenty of other ways to define colors in P5 - try changing <code>background('red')</code> to any of the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Red, Green, Blue - range of 0 to 255</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">233</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">61</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">69</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Equivalent to 150, 150, 150 - will always be a gray</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">150</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Hex codes work too</span></span>
<span class="line"><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#38edac&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>There are other ways to define colors - but these represent most of what you are likely to use. There are other contexts where colors are used beyond the background that will be covered later in this tutorial.</p>
<p>Reset the background to <code>0</code>, which will result in black.</p>
<h2 id="drawing-shapes">Drawing Shapes</h2>
<p>This canvas is rather lovely, and now is the time to draw elements on it. Before you draw anything, it’s worth noting that the coordinate system sets the origin (0, 0) in the top-left. The first number always represents the x-axis (left to right), and the second number represents the y-axis (top to bottom).</p>
<p>Even though we are currently only drawing shapes once, it is recommended that you draw to the canvas in <code>draw()</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Refresh your browser, and you should see a small white circle on the canvas. The three arguments for <code>circle()</code> indicate the x position, y position, and diameter. For <code>circle()</code>, the x and y values indicate circle’s center.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646435886/blog/2022/03/p5js-getting-started/coordinate.png" alt="A back square marked zero zero in the top-left. A white ball is 20 points from the left (x) and 40 from the top (y). It is 10 points wide."></p>
<p>Add a new square to your canvas and refresh your browser:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">25</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The arguments for <code>square()</code> are the same as circle - x, y, and size. The only difference is that the (x,y) values are for the top-left corner of the square and not the center of the shape.</p>
<p>Add a rectangle to your canvas and refresh your browser:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code>rect()</code> function’s arguments specify the (x,y) of the top-left corner, the size of the shape on the x-axis (length), and the size on the y-axis (height).</p>
<p>These values cause the square and rectangle to overlap, and for the first time, you’ll see that all of the shapes so far have a black stroke (border) around them. Change the <code>background()</code> argument in <code>setup()</code> to 100 to see this more clearly.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646436612/blog/2022/03/p5js-getting-started/overlapping-shapes.png" alt="A gray canvas with three white chapes - a circle near the top-right, a square, and a rectangle half overlapping the square."></p>
<p>There are a range of other shapes to use, including <code>triangle()</code>, <code>ellipse()</code>, <code>line()</code>, and <code>quad()</code>. All work similarly, though the exact number of arguments may be different. Take a look at the <a href="https://p5js.org/reference/">P5 Reference</a> for more information.</p>
<h2 id="setting-fills--strokes">Setting Fills & Strokes</h2>
<p>Statements in P5 run in the order they are written, and elements ‘drawn’ are done in that order. If elements overlap, ones drawn afterward will appear ‘on top,’ as the other element has already been placed. If you want to see this in action, temporarily swap the <code>square()</code> and <code>rect()</code> statements to see the difference.</p>
<p>You need to understand that the order of statements is important to control the colors of elements. Colors aren’t set when drawing an element, but instead, use their own set of functions provided by P5.</p>
<p>Update <code>draw()</code> to the following and refresh your browser:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">stroke</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;blue&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>All of the shapes are now red with a stroke of blue as the <code>fill()</code> and <code>stroke()</code> values are applied until it is unset or set to something else. Try this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Now the first two shapes are red, but the third is green. Finally, try this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">square</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;green&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">rect</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">120</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">50</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">70</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>You may have expected the circle to be its initial white color, but instead, it’s green. Why is this?</p>
<h2 id="persistence-between-draws">Persistence Between Draws</h2>
<p>The <code>draw()</code> function executes statements from beginning to end, and once completed, it starts again and repeats endlessly. The steps of ‘draw a circle, then a square, then a rectangle’ are happening thousands of times a second, but you can’t see it because the steps are happening in the same order and in the same positions.</p>
<p>Functions that apply settings to the canvas are not reset between draws. Because of this, the <code>fill('green')</code> run is still the most recent <code>fill()</code> every time after the first draw. We’ll get to see this more clearly later in this post.</p>
<h2 id="moving-elements">Moving Elements</h2>
<p>Because of variable scoping in JavaScript, any variables created in <code>draw()</code> are recreated with their initial value every frame:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #8B949E">// is always 2, regardless of how many times draw() runs</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Instead, persistent variables should be defined in global scope. Try this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(frame, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The first argument in <code>circle()</code> is now the value of <code>frame</code>. Here’s what it looks like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/500-circles.gif" alt="An animation of a white circle moving across the canvas. A black trail of where it has been is visible."></p>
<p>The circle is not being moved every frame, but a new circle is being drawn on the existing canvas. When the circle goes off-screen, there are just over 500 circles visible. It is common to redraw the whole canvas background at the beginning of <code>draw()</code> to ‘wipe’ the canvas:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> frame </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    frame </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(frame, </span><span style="color: #79C0FF">40</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676858/blog/2022/03/p5js-getting-started/1-circle.gif" alt="An animation of a white circle moving across the canvas."></p>
<h2 id="user-input">User Input</h2>
<h3 id="mouse-input">Mouse Input</h3>
<p>All of the P5 functionality we’ve used so far is in the form of global functions, but there are also many global variables provided for use in your sketches. Try this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(mouseIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;red&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(mouseX, mouseY, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This small snippet effectively shows off three variables:</p>
<ol>
<li><code>mouseIsPressed</code> is <code>true</code> if a mouse button is pressed.</li>
<li><code>mouseX</code> is the position of the mouse on the x-axis.</li>
<li><code>mouseY</code> is the position of the mouse on the y-axis.</li>
</ol>
<p>It’s also worth knowing that the <code>mouseButton</code> variable will hold the last pressed button - either <code>LEFT</code>, <code>RIGHT</code>, or <code>CENTER</code>.</p>
<h3 id="keyboard-input">Keyboard Input</h3>
<p>Just like <code>mouseIsPressed</code>, there is a <code>keyIsPressed</code> variable. Like <code>mouseButton</code>, the <code>key</code> variable will hold the last-pressed key. We can combine this to control the position of elements:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> circleX </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">250</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> circleY </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">250</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(keyIsPressed) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowLeft&#39;</span><span style="color: #C9D1D9">) circleX </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowRight&#39;</span><span style="color: #C9D1D9">) circleX </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowUp&#39;</span><span style="color: #C9D1D9">) circleY </span><span style="color: #FF7B72">-=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;ArrowDown&#39;</span><span style="color: #C9D1D9">) circleY </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">circle</span><span style="color: #C9D1D9">(circleX, circleY, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h2 id="drawing-text">Drawing Text</h2>
<p>There are a bunch of typography-related functions provided by P5 which you can read more about in the <a href="https://p5js.org/reference/">P5 Reference</a>, but to focus on the two most important, try this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">fill</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;white&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">textSize</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">24</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">text</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Current frame is &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> frameCount, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><code>textSize()</code> changes the font size - the default is 12. <code>text()</code> takes three arguments - the text to display, and the (x,y)  <code>frameCount</code> is a built-in variable which goes up by 1 every time <code>draw()</code> is run.</p>
<h2 id="drawing-images">Drawing Images</h2>
<p>There are two sets to drawing images - loading them, and displaying them. We also want to make sure it is fully loaded before showing it.</p>
<p>Up until now, we have used <code>setup()</code> and <code>draw()</code>, but one of the other lifecycle functions with P5 is <code>preload()</code>. <code>preload()</code> loads in external files fully before <code>setup()</code> is run, and this is where we will load images. Try this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> catImage</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">preload</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    catImage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">loadImage</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https://placekitten.com/200/100&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">createCanvas</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">draw</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">background</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">image</span><span style="color: #C9D1D9">(catImage, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1646676857/blog/2022/03/p5js-getting-started/cat.png" alt="A gray canvas with a picture of a cat displayed on it near the top-left. It's slightly further down than it is across."></p>
<p>The image will load in at its full size, so if the image is 300 pixels wide, it would use up 300 pixels on the canvas. You can optionally provide two more to set the width and height explicitly:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">image</span><span style="color: #C9D1D9">(catImage, </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">20</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">100</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h2 id="in-summary">In Summary</h2>
<p>That was a lot, and we’re just warming up. We covered lifecycle functions (<code>preload()</code>, <code>setup()</code>, and <code>draw()</code>), setting colors, the P5 coordinate system, drawing shapes and text, basic animation, interacting with elements through a keyboard and mouse, and finally loading and showing images.</p>
<p>In next week’s post, we’ll cover how to build several games-related features in your P5 sketch, and in the third and final post, we’ll integrate Deepgram into a P5 sketch.</p>
<p>If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/p5js-getting-started/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
