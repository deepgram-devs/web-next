import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                          *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
/* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 1, "slug": "what-well-build-together", "text": "What We\u2019ll Build Together" }, { "depth": 1, "slug": "getting-started", "text": "Getting Started" }, { "depth": 1, "slug": "the-code", "text": "The Code" }], "source": 'Have you ever wondered what you could build using voice-to-text and analytics? This article will discover how we can combine a speech recognition provider that transcribes audio to text with Python using Deepgram and speech-to-text analytics.\n\nAnalytics is all about measuring patterns in data to discover insights that help us make better decisions. These decisions could improve business capacity, raise sales, enhance communication between a customer service agent and customer, and much more.\n\nIf you\u2019d like to jump ahead and grab the code for this project, please do so on our [Deepgram Devs Github](https://github.com/deepgram-devs/python-talk-time-analytics).\n\n# What We\'ll Build Together\n\nThis tutorial will use the Deepgram Python SDK to build a simple script that does voice transcription with Python. One of the many beauties of Deepgram is our [diarize feature](https://developers.deepgram.com/documentation/features/diarize/). We\u2019ll use this feature to help us recognize which speaker is talking and assigns a transcript to that speaker. The `diarize` feature will help us recognize multiple speakers. We\u2019ll see how to get the transcript from the audio and assign it to each speaker.\n\nThen we\u2019ll focus on analytics by measuring the following:\n\n* The amount of time each speaker spoke per phrase\n* The average amount of time they spoke\n* The total time of conversation for each speaker\n\n# Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. To grab one, we can go to our [Deepgram console](https://console.deepgram.com/signup?jump=keys). Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\n\nNext, let\u2019s make a directory anywhere we\u2019d like.\n\n```\nmkdir deepgram_analytics_project\n```\n\nThen change into that directory so we can start adding things to it.\n\n```\ncd deepgram_analytics_project\n```\n\nWe\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n<Panel type="info" title="Important Note">\n\nIt\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.\n\n</Panel>\n\nNow we can open up our favorite editor and create a file called `deepgram_analytics.py`. If you\u2019d like to make it from the command line, do this:\n\n```\ntouch deepgram_analytics.py\n```\n\nFinally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named `venv` then activate it.\n\n```\nsource venv/bin/activate\n```\n\nAfter activation, we install the dependencies, including:\n\n* The Deepgram Python SDK\n* The dotenv library, which helps us work with our environment variables\n\n{/*<!---->*/}\n\n```\npip install deepgram-sdk\npip install python-dotenv\n```\n\n# The Code\n\nLet\u2019s open our `deepgram_analytics.py` file and include the following code at the top:\n\n```python\nimport asyncio\nfrom deepgram import Deepgram\nfrom dotenv import load_dotenv\nfrom typing import Dict\nimport os\n\nload_dotenv()\n\nPATH_TO_FILE = \'premier_broken-phone.mp3\'\n```\n\nThe first part is Python imports. We need to access the modules and libraries for our script to work correctly.\n\nThe `load_dotenv()` will help us load our `api_key` from an `env` file, which holds our environment variables.\n\nThe `PATH_TO_FILE = \'premier_broken-phone.mp3\'` is a path to our audio file we\u2019ll use to do the speech-to-text transcription.\n\nCreate an `env` file at the same level as our `deepgram_analytics.py`. Put the following inside of it:\n\n```\nDEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D\n```\n\nWhere you\u2019d replace `YOUR_API_KEY` with your api_key you got from Deepgram.\n\nNext, let\u2019s add the audio file to our project by [downloading it here](https://developers.deepgram.com/data/audio/premier_broken-phone.mp3), and adding it to our project directory.\n\n<Panel type="info" title="Important Note">\n\nThis audio file is a sample phone call from Premier Phone Services. To follow along, we\u2019ll need to download this .mp3 file.\n\n</Panel>\n\nOur project directory structure should look like this:\n\n![project structure for Deepgram talk time analytics](https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/project_structure.png)\n\nBack in our `deepgram_analytics.py` let\u2019s add this code to our `main` function:\n\n```python\n\u200B\u200Basync def main():\n   deepgram = Deepgram(os.getenv("DEEPGRAM_API_KEY"))\n\n   with open(PATH_TO_FILE, \'rb\') as audio:\n       source = {\'buffer\': audio, \'mimetype\': \'audio/mp3\'}\n       transcription = await deepgram.transcription.prerecorded(source, {\'punctuate\': True, \'diarize\': True})\n\n       speakers = await compute_speaking_time(transcription)\n\n\nasyncio.run(main())\n```\n\nHere we are initializing Deepgram and pulling in our `DEEPGRAM_API_KEY`. We open our audio file set the `source` to recognize it\u2019s an `audio/mp3`. Then we get the transcription and pass in the `source` and a Python dictionary `{\'punctuate\': True, \'diarize\': True}`. The `diarize` option helps us assign the transcript to the speaker. More on [how to use](https://developers.deepgram.com/api-reference/#diarize-pr) `diarize` and the other options.\n\nLastly, let\u2019s add our `compute_speaking_time` function to the `deepgram_analytics.py` file, just above our `main` function.\n\n```python\nasync def compute_speaking_time(transcript_data: Dict) -> None:\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'words\']\n\n       total_speaker_time = {}\n       speaker_words = []\n       current_speaker = -1\n\n       for speaker in transcript:\n           speaker_number = speaker["speaker"]\n\n           if speaker_number is not current_speaker:\n               current_speaker = speaker_number\n               speaker_words.append([speaker_number, [], 0])\n\n               try:\n                   total_speaker_time[speaker_number][1] += 1\n               except KeyError:\n                   total_speaker_time[speaker_number] = [0,1]\n\n\n           get_word = speaker["word"]\n           speaker_words[-1][1].append(get_word)\n\n           total_speaker_time[speaker_number][0] += speaker["end"] - speaker["start"]\n           speaker_words[-1][2] += speaker["end"] - speaker["start"]\n\n       for speaker, words, time_amount in speaker_words:\n           print(f"Speaker {speaker}: {\' \'.join(words)}")\n           print(f"Speaker {speaker}: {time_amount}")\n\n       for speaker, (total_time, amount) in total_speaker_time.items():\n           print(f"Speaker {speaker} avg time per phrase: {total_time/amount} ")\n           print(f"Total time of conversation: {total_time}")\n\n   return transcript\n```\n\nLet\u2019s break the code down.\n\n```python\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'words\']\n```\n\nThese lines get the transcript as a String type from the JSON response and store it in a variable called `transcript`.\n\n```python\n   total_speaker_time = {}\n   speaker_words = []\n   current_speaker = -1\n```\n\nWe define an empty dictionary called `total_speaker_time` and empty list `speaker_words`. We also need to keep track of the current speaker as each person talks. The `current_speaker` variable is set to `-1` because a speaker will never have that value, and we can update it whenever someone new is speaking.\n\n```python\n       for speaker in transcript:\n           speaker_number = speaker["speaker"]\n\n           if speaker_number is not current_speaker:\n               current_speaker = speaker_number\n               speaker_words.append([speaker_number, [], 0])\n               try:\n                   total_speaker_time[speaker_number][1] += 1\n               except KeyError:\n                   total_speaker_time[speaker_number] = [0,1]\n\n\n           get_word = speaker["word"]\n           speaker_words[-1][1].append(get_word)\n\n           total_speaker_time[speaker_number][0] += speaker["end"] - speaker["start"]\n           speaker_words[-1][2] += speaker["end"] - speaker["start"]\n```\n\nNext, we loop through the transcript and find which speaker is talking. We append their `speaker_number`, an empty list `[]` to add their transcript, and `0`, the total time per phrase for each speaker.\n\nWe use a `try/except` block to add to our `total_speaker_time` dictionary. We check if the key `speaker_number` is already in the dictionary. If so, then we just add how many times the speaker speaks `total_speaker_time[speaker_number][1] += 1`. If not in the dictionary, we add the key and its values `total_speaker_time[speaker_number] = [0,1]`, with `0` as the time spoken in seconds and `1` is how many times they speak.\n\nThe below lines of code get the transcript from each speaker `get_word = speaker["word"]`. We then appended those to our `speaker_words` list. Finally, we get the `total_speaker_time` for each speaker by subtracting their `end` and `start` speaking times and adding them together.\n\n```python\nget_word = speaker["word"]\nspeaker_words[-1][1].append(get_word)\n\ntotal_speaker_time[speaker_number][0] += speaker["end"] - speaker["start"]\n```\n\nLastly, we do our analytics:\n\n```python\n       for speaker, words, time_amount in speaker_words:\n           print(f"Speaker {speaker}: {\' \'.join(words)}")\n           print(f"Speaker {speaker}: {time_amount}")\n\n       for speaker, (total_time, amount) in total_speaker_time.items():\n           print(f"Speaker {speaker} avg time per phrase: {total_time/amount} ")\n           print(f"Total time of conversation: {total_time}")\n\n   return transcript\n```\n\nIn the first `for` loop, we print out each speaker with their speaker number and their transcript. After each person talks, we calculate how long they spoke in that sentence.\n\nIn the second `for` loop, we calculate on average how long each person spoke and the total time of the conversation for each speaker.\n\nTo run our script type `python deepgram_analytics.py` or `python3 deepgram_analytics.py` from your terminal.\n\nHere\u2019s an example of what our output would look like:\n\n![terminal output for Deepgram talk time analytics](https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/terminal_output.png)\n\nCongratulations on transcribing audio to text with Python using Deepgram with speech-to-text analytics! You can find the [code here](https://github.com/deepgram-devs/python-talk-time-analytics) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs)', "html": `<p>Have you ever wondered what you could build using voice-to-text and analytics? This article will discover how we can combine a speech recognition provider that transcribes audio to text with Python using Deepgram and speech-to-text analytics.</p>
<p>Analytics is all about measuring patterns in data to discover insights that help us make better decisions. These decisions could improve business capacity, raise sales, enhance communication between a customer service agent and customer, and much more.</p>
<p>If you\u2019d like to jump ahead and grab the code for this project, please do so on our <a href="https://github.com/deepgram-devs/python-talk-time-analytics">Deepgram Devs Github</a>.</p>
<h1 id="what-well-build-together">What We\u2019ll Build Together</h1>
<p>This tutorial will use the Deepgram Python SDK to build a simple script that does voice transcription with Python. One of the many beauties of Deepgram is our <a href="https://developers.deepgram.com/documentation/features/diarize/">diarize feature</a>. We\u2019ll use this feature to help us recognize which speaker is talking and assigns a transcript to that speaker. The <code is:raw>diarize</code> feature will help us recognize multiple speakers. We\u2019ll see how to get the transcript from the audio and assign it to each speaker.</p>
<p>Then we\u2019ll focus on analytics by measuring the following:</p>
<ul>
<li>The amount of time each speaker spoke per phrase</li>
<li>The average amount of time they spoke</li>
<li>The total time of conversation for each speaker</li>
</ul>
<h1 id="getting-started">Getting Started</h1>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. To grab one, we can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Next, let\u2019s make a directory anywhere we\u2019d like.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">mkdir deepgram_analytics_project</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cd deepgram_analytics_project</span></span></code></pre>
<p>We\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<Panel type="info" title="Important Note"><p>It\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.</p></Panel>
<p>Now we can open up our favorite editor and create a file called <code is:raw>deepgram_analytics.py</code>. If you\u2019d like to make it from the command line, do this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch deepgram_analytics.py</span></span></code></pre>
<p>Finally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named <code is:raw>venv</code> then activate it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">source venv/bin/activate</span></span></code></pre>
<p>After activation, we install the dependencies, including:</p>
<ul>
<li>The Deepgram Python SDK</li>
<li>The dotenv library, which helps us work with our environment variables</li>
</ul>
{/*<!---->*/}
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #c9d1d9">pip install python-dotenv</span></span></code></pre>
<h1 id="the-code">The Code</h1>
<p>Let\u2019s open our <code is:raw>deepgram_analytics.py</code> file and include the following code at the top:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;premier_broken-phone.mp3&#39;</span></span></code></pre>
<p>The first part is Python imports. We need to access the modules and libraries for our script to work correctly.</p>
<p>The <code is:raw>load_dotenv()</code> will help us load our <code is:raw>api_key</code> from an <code is:raw>env</code> file, which holds our environment variables.</p>
<p>The <code is:raw>PATH_TO_FILE = 'premier_broken-phone.mp3'</code> is a path to our audio file we\u2019ll use to do the speech-to-text transcription.</p>
<p>Create an <code is:raw>env</code> file at the same level as our <code is:raw>deepgram_analytics.py</code>. Put the following inside of it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D</span></span></code></pre>
<p>Where you\u2019d replace <code is:raw>YOUR_API_KEY</code> with your api_key you got from Deepgram.</p>
<p>Next, let\u2019s add the audio file to our project by <a href="https://developers.deepgram.com/data/audio/premier_broken-phone.mp3">downloading it here</a>, and adding it to our project directory.</p>
<Panel type="info" title="Important Note"><p>This audio file is a sample phone call from Premier Phone Services. To follow along, we\u2019ll need to download this .mp3 file.</p></Panel>
<p>Our project directory structure should look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/project_structure.png" alt="project structure for Deepgram talk time analytics"></p>
<p>Back in our <code is:raw>deepgram_analytics.py</code> let\u2019s add this code to our <code is:raw>main</code> function:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">\u200B\u200B</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       transcription </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       speakers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> compute_speaking_time(transcription)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">asyncio.run(main())</span></span></code></pre>
<p>Here we are initializing Deepgram and pulling in our <code is:raw>DEEPGRAM_API_KEY</code>. We open our audio file set the <code is:raw>source</code> to recognize it\u2019s an <code is:raw>audio/mp3</code>. Then we get the transcription and pass in the <code is:raw>source</code> and a Python dictionary <code is:raw>{'punctuate': True, 'diarize': True}</code>. The <code is:raw>diarize</code> option helps us assign the transcript to the speaker. More on <a href="https://developers.deepgram.com/api-reference/#diarize-pr">how to use</a> <code is:raw>diarize</code> and the other options.</p>
<p>Lastly, let\u2019s add our <code is:raw>compute_speaking_time</code> function to the <code is:raw>deepgram_analytics.py</code> file, just above our <code is:raw>main</code> function.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">compute_speaking_time</span><span style="color: #C9D1D9">(transcript_data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       total_speaker_time </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>
<span class="line"><span style="color: #C9D1D9">       speaker_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">       current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_number </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;speaker&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> speaker_number </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> current_speaker:</span></span>
<span class="line"><span style="color: #C9D1D9">               current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker_number</span></span>
<span class="line"><span style="color: #C9D1D9">               speaker_words.append([speaker_number, [], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">KeyError</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, words, time_amount </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> speaker_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">.join(words)</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">time_amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, (total_time, amount) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> total_speaker_time.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> avg time per phrase: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9">amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Total time of conversation: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> transcript</span></span></code></pre>
<p>Let\u2019s break the code down.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>These lines get the transcript as a String type from the JSON response and store it in a variable called <code is:raw>transcript</code>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   total_speaker_time </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>
<span class="line"><span style="color: #C9D1D9">   speaker_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span></span></code></pre>
<p>We define an empty dictionary called <code is:raw>total_speaker_time</code> and empty list <code is:raw>speaker_words</code>. We also need to keep track of the current speaker as each person talks. The <code is:raw>current_speaker</code> variable is set to <code is:raw>-1</code> because a speaker will never have that value, and we can update it whenever someone new is speaking.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_number </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;speaker&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> speaker_number </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> current_speaker:</span></span>
<span class="line"><span style="color: #C9D1D9">               current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker_number</span></span>
<span class="line"><span style="color: #C9D1D9">               speaker_words.append([speaker_number, [], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">KeyError</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Next, we loop through the transcript and find which speaker is talking. We append their <code is:raw>speaker_number</code>, an empty list <code is:raw>[]</code> to add their transcript, and <code is:raw>0</code>, the total time per phrase for each speaker.</p>
<p>We use a <code is:raw>try/except</code> block to add to our <code is:raw>total_speaker_time</code> dictionary. We check if the key <code is:raw>speaker_number</code> is already in the dictionary. If so, then we just add how many times the speaker speaks <code is:raw>total_speaker_time[speaker_number][1] += 1</code>. If not in the dictionary, we add the key and its values <code is:raw>total_speaker_time[speaker_number] = [0,1]</code>, with <code is:raw>0</code> as the time spoken in seconds and <code is:raw>1</code> is how many times they speak.</p>
<p>The below lines of code get the transcript from each speaker <code is:raw>get_word = speaker["word"]</code>. We then appended those to our <code is:raw>speaker_words</code> list. Finally, we get the <code is:raw>total_speaker_time</code> for each speaker by subtracting their <code is:raw>end</code> and <code is:raw>start</code> speaking times and adding them together.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Lastly, we do our analytics:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, words, time_amount </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> speaker_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">.join(words)</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">time_amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, (total_time, amount) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> total_speaker_time.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> avg time per phrase: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9">amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Total time of conversation: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> transcript</span></span></code></pre>
<p>In the first <code is:raw>for</code> loop, we print out each speaker with their speaker number and their transcript. After each person talks, we calculate how long they spoke in that sentence.</p>
<p>In the second <code is:raw>for</code> loop, we calculate on average how long each person spoke and the total time of the conversation for each speaker.</p>
<p>To run our script type <code is:raw>python deepgram_analytics.py</code> or <code is:raw>python3 deepgram_analytics.py</code> from your terminal.</p>
<p>Here\u2019s an example of what our output would look like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/terminal_output.png" alt="terminal output for Deepgram talk time analytics"></p>
<p>Congratulations on transcribing audio to text with Python using Deepgram with speech-to-text analytics! You can find the <a href="https://github.com/deepgram-devs/python-talk-time-analytics">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a></p>` };
const frontmatter = { "title": "Speech Recognition Analytics for Audio with Python", "description": "Learn how to combine speech recognition on real-time audio with analytics by utilizing Python and Deepgram's Speech-to-Text API.", "date": "2022-03-23T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1647974816/blog/2022/03/python-talk-time-analytics/Speech-Analytics-Real-Time-Audio-w-Python%402x.jpg", "authors": ["tonya-sims"], "category": "tutorial", "tags": ["python"], "seo": { "title": "Speech Recognition Analytics for Audio with Python", "description": "Learn how to combine speech recognition on real-time audio with analytics by utilizing Python and Deepgram's Speech-to-Text API." }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454048/blog/python-talk-time-analytics/ograph.png" }, "shorturls": { "share": "https://dpgr.am/ad5301e", "twitter": "https://dpgr.am/035d8b3", "linkedin": "https://dpgr.am/6994e98", "reddit": "https://dpgr.am/4d26964", "facebook": "https://dpgr.am/3828283" }, "astro": { "headings": [{ "depth": 1, "slug": "what-well-build-together", "text": "What We\u2019ll Build Together" }, { "depth": 1, "slug": "getting-started", "text": "Getting Started" }, { "depth": 1, "slug": "the-code", "text": "The Code" }], "source": 'Have you ever wondered what you could build using voice-to-text and analytics? This article will discover how we can combine a speech recognition provider that transcribes audio to text with Python using Deepgram and speech-to-text analytics.\n\nAnalytics is all about measuring patterns in data to discover insights that help us make better decisions. These decisions could improve business capacity, raise sales, enhance communication between a customer service agent and customer, and much more.\n\nIf you\u2019d like to jump ahead and grab the code for this project, please do so on our [Deepgram Devs Github](https://github.com/deepgram-devs/python-talk-time-analytics).\n\n# What We\'ll Build Together\n\nThis tutorial will use the Deepgram Python SDK to build a simple script that does voice transcription with Python. One of the many beauties of Deepgram is our [diarize feature](https://developers.deepgram.com/documentation/features/diarize/). We\u2019ll use this feature to help us recognize which speaker is talking and assigns a transcript to that speaker. The `diarize` feature will help us recognize multiple speakers. We\u2019ll see how to get the transcript from the audio and assign it to each speaker.\n\nThen we\u2019ll focus on analytics by measuring the following:\n\n* The amount of time each speaker spoke per phrase\n* The average amount of time they spoke\n* The total time of conversation for each speaker\n\n# Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. To grab one, we can go to our [Deepgram console](https://console.deepgram.com/signup?jump=keys). Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\n\nNext, let\u2019s make a directory anywhere we\u2019d like.\n\n```\nmkdir deepgram_analytics_project\n```\n\nThen change into that directory so we can start adding things to it.\n\n```\ncd deepgram_analytics_project\n```\n\nWe\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n<Panel type="info" title="Important Note">\n\nIt\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.\n\n</Panel>\n\nNow we can open up our favorite editor and create a file called `deepgram_analytics.py`. If you\u2019d like to make it from the command line, do this:\n\n```\ntouch deepgram_analytics.py\n```\n\nFinally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named `venv` then activate it.\n\n```\nsource venv/bin/activate\n```\n\nAfter activation, we install the dependencies, including:\n\n* The Deepgram Python SDK\n* The dotenv library, which helps us work with our environment variables\n\n{/*<!---->*/}\n\n```\npip install deepgram-sdk\npip install python-dotenv\n```\n\n# The Code\n\nLet\u2019s open our `deepgram_analytics.py` file and include the following code at the top:\n\n```python\nimport asyncio\nfrom deepgram import Deepgram\nfrom dotenv import load_dotenv\nfrom typing import Dict\nimport os\n\nload_dotenv()\n\nPATH_TO_FILE = \'premier_broken-phone.mp3\'\n```\n\nThe first part is Python imports. We need to access the modules and libraries for our script to work correctly.\n\nThe `load_dotenv()` will help us load our `api_key` from an `env` file, which holds our environment variables.\n\nThe `PATH_TO_FILE = \'premier_broken-phone.mp3\'` is a path to our audio file we\u2019ll use to do the speech-to-text transcription.\n\nCreate an `env` file at the same level as our `deepgram_analytics.py`. Put the following inside of it:\n\n```\nDEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D\n```\n\nWhere you\u2019d replace `YOUR_API_KEY` with your api_key you got from Deepgram.\n\nNext, let\u2019s add the audio file to our project by [downloading it here](https://developers.deepgram.com/data/audio/premier_broken-phone.mp3), and adding it to our project directory.\n\n<Panel type="info" title="Important Note">\n\nThis audio file is a sample phone call from Premier Phone Services. To follow along, we\u2019ll need to download this .mp3 file.\n\n</Panel>\n\nOur project directory structure should look like this:\n\n![project structure for Deepgram talk time analytics](https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/project_structure.png)\n\nBack in our `deepgram_analytics.py` let\u2019s add this code to our `main` function:\n\n```python\n\u200B\u200Basync def main():\n   deepgram = Deepgram(os.getenv("DEEPGRAM_API_KEY"))\n\n   with open(PATH_TO_FILE, \'rb\') as audio:\n       source = {\'buffer\': audio, \'mimetype\': \'audio/mp3\'}\n       transcription = await deepgram.transcription.prerecorded(source, {\'punctuate\': True, \'diarize\': True})\n\n       speakers = await compute_speaking_time(transcription)\n\n\nasyncio.run(main())\n```\n\nHere we are initializing Deepgram and pulling in our `DEEPGRAM_API_KEY`. We open our audio file set the `source` to recognize it\u2019s an `audio/mp3`. Then we get the transcription and pass in the `source` and a Python dictionary `{\'punctuate\': True, \'diarize\': True}`. The `diarize` option helps us assign the transcript to the speaker. More on [how to use](https://developers.deepgram.com/api-reference/#diarize-pr) `diarize` and the other options.\n\nLastly, let\u2019s add our `compute_speaking_time` function to the `deepgram_analytics.py` file, just above our `main` function.\n\n```python\nasync def compute_speaking_time(transcript_data: Dict) -> None:\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'words\']\n\n       total_speaker_time = {}\n       speaker_words = []\n       current_speaker = -1\n\n       for speaker in transcript:\n           speaker_number = speaker["speaker"]\n\n           if speaker_number is not current_speaker:\n               current_speaker = speaker_number\n               speaker_words.append([speaker_number, [], 0])\n\n               try:\n                   total_speaker_time[speaker_number][1] += 1\n               except KeyError:\n                   total_speaker_time[speaker_number] = [0,1]\n\n\n           get_word = speaker["word"]\n           speaker_words[-1][1].append(get_word)\n\n           total_speaker_time[speaker_number][0] += speaker["end"] - speaker["start"]\n           speaker_words[-1][2] += speaker["end"] - speaker["start"]\n\n       for speaker, words, time_amount in speaker_words:\n           print(f"Speaker {speaker}: {\' \'.join(words)}")\n           print(f"Speaker {speaker}: {time_amount}")\n\n       for speaker, (total_time, amount) in total_speaker_time.items():\n           print(f"Speaker {speaker} avg time per phrase: {total_time/amount} ")\n           print(f"Total time of conversation: {total_time}")\n\n   return transcript\n```\n\nLet\u2019s break the code down.\n\n```python\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'words\']\n```\n\nThese lines get the transcript as a String type from the JSON response and store it in a variable called `transcript`.\n\n```python\n   total_speaker_time = {}\n   speaker_words = []\n   current_speaker = -1\n```\n\nWe define an empty dictionary called `total_speaker_time` and empty list `speaker_words`. We also need to keep track of the current speaker as each person talks. The `current_speaker` variable is set to `-1` because a speaker will never have that value, and we can update it whenever someone new is speaking.\n\n```python\n       for speaker in transcript:\n           speaker_number = speaker["speaker"]\n\n           if speaker_number is not current_speaker:\n               current_speaker = speaker_number\n               speaker_words.append([speaker_number, [], 0])\n               try:\n                   total_speaker_time[speaker_number][1] += 1\n               except KeyError:\n                   total_speaker_time[speaker_number] = [0,1]\n\n\n           get_word = speaker["word"]\n           speaker_words[-1][1].append(get_word)\n\n           total_speaker_time[speaker_number][0] += speaker["end"] - speaker["start"]\n           speaker_words[-1][2] += speaker["end"] - speaker["start"]\n```\n\nNext, we loop through the transcript and find which speaker is talking. We append their `speaker_number`, an empty list `[]` to add their transcript, and `0`, the total time per phrase for each speaker.\n\nWe use a `try/except` block to add to our `total_speaker_time` dictionary. We check if the key `speaker_number` is already in the dictionary. If so, then we just add how many times the speaker speaks `total_speaker_time[speaker_number][1] += 1`. If not in the dictionary, we add the key and its values `total_speaker_time[speaker_number] = [0,1]`, with `0` as the time spoken in seconds and `1` is how many times they speak.\n\nThe below lines of code get the transcript from each speaker `get_word = speaker["word"]`. We then appended those to our `speaker_words` list. Finally, we get the `total_speaker_time` for each speaker by subtracting their `end` and `start` speaking times and adding them together.\n\n```python\nget_word = speaker["word"]\nspeaker_words[-1][1].append(get_word)\n\ntotal_speaker_time[speaker_number][0] += speaker["end"] - speaker["start"]\n```\n\nLastly, we do our analytics:\n\n```python\n       for speaker, words, time_amount in speaker_words:\n           print(f"Speaker {speaker}: {\' \'.join(words)}")\n           print(f"Speaker {speaker}: {time_amount}")\n\n       for speaker, (total_time, amount) in total_speaker_time.items():\n           print(f"Speaker {speaker} avg time per phrase: {total_time/amount} ")\n           print(f"Total time of conversation: {total_time}")\n\n   return transcript\n```\n\nIn the first `for` loop, we print out each speaker with their speaker number and their transcript. After each person talks, we calculate how long they spoke in that sentence.\n\nIn the second `for` loop, we calculate on average how long each person spoke and the total time of the conversation for each speaker.\n\nTo run our script type `python deepgram_analytics.py` or `python3 deepgram_analytics.py` from your terminal.\n\nHere\u2019s an example of what our output would look like:\n\n![terminal output for Deepgram talk time analytics](https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/terminal_output.png)\n\nCongratulations on transcribing audio to text with Python using Deepgram with speech-to-text analytics! You can find the [code here](https://github.com/deepgram-devs/python-talk-time-analytics) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs)', "html": `<p>Have you ever wondered what you could build using voice-to-text and analytics? This article will discover how we can combine a speech recognition provider that transcribes audio to text with Python using Deepgram and speech-to-text analytics.</p>
<p>Analytics is all about measuring patterns in data to discover insights that help us make better decisions. These decisions could improve business capacity, raise sales, enhance communication between a customer service agent and customer, and much more.</p>
<p>If you\u2019d like to jump ahead and grab the code for this project, please do so on our <a href="https://github.com/deepgram-devs/python-talk-time-analytics">Deepgram Devs Github</a>.</p>
<h1 id="what-well-build-together">What We\u2019ll Build Together</h1>
<p>This tutorial will use the Deepgram Python SDK to build a simple script that does voice transcription with Python. One of the many beauties of Deepgram is our <a href="https://developers.deepgram.com/documentation/features/diarize/">diarize feature</a>. We\u2019ll use this feature to help us recognize which speaker is talking and assigns a transcript to that speaker. The <code is:raw>diarize</code> feature will help us recognize multiple speakers. We\u2019ll see how to get the transcript from the audio and assign it to each speaker.</p>
<p>Then we\u2019ll focus on analytics by measuring the following:</p>
<ul>
<li>The amount of time each speaker spoke per phrase</li>
<li>The average amount of time they spoke</li>
<li>The total time of conversation for each speaker</li>
</ul>
<h1 id="getting-started">Getting Started</h1>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. To grab one, we can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Next, let\u2019s make a directory anywhere we\u2019d like.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">mkdir deepgram_analytics_project</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cd deepgram_analytics_project</span></span></code></pre>
<p>We\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<Panel type="info" title="Important Note"><p>It\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.</p></Panel>
<p>Now we can open up our favorite editor and create a file called <code is:raw>deepgram_analytics.py</code>. If you\u2019d like to make it from the command line, do this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch deepgram_analytics.py</span></span></code></pre>
<p>Finally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named <code is:raw>venv</code> then activate it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">source venv/bin/activate</span></span></code></pre>
<p>After activation, we install the dependencies, including:</p>
<ul>
<li>The Deepgram Python SDK</li>
<li>The dotenv library, which helps us work with our environment variables</li>
</ul>
{/*<!---->*/}
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #c9d1d9">pip install python-dotenv</span></span></code></pre>
<h1 id="the-code">The Code</h1>
<p>Let\u2019s open our <code is:raw>deepgram_analytics.py</code> file and include the following code at the top:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;premier_broken-phone.mp3&#39;</span></span></code></pre>
<p>The first part is Python imports. We need to access the modules and libraries for our script to work correctly.</p>
<p>The <code is:raw>load_dotenv()</code> will help us load our <code is:raw>api_key</code> from an <code is:raw>env</code> file, which holds our environment variables.</p>
<p>The <code is:raw>PATH_TO_FILE = 'premier_broken-phone.mp3'</code> is a path to our audio file we\u2019ll use to do the speech-to-text transcription.</p>
<p>Create an <code is:raw>env</code> file at the same level as our <code is:raw>deepgram_analytics.py</code>. Put the following inside of it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D</span></span></code></pre>
<p>Where you\u2019d replace <code is:raw>YOUR_API_KEY</code> with your api_key you got from Deepgram.</p>
<p>Next, let\u2019s add the audio file to our project by <a href="https://developers.deepgram.com/data/audio/premier_broken-phone.mp3">downloading it here</a>, and adding it to our project directory.</p>
<Panel type="info" title="Important Note"><p>This audio file is a sample phone call from Premier Phone Services. To follow along, we\u2019ll need to download this .mp3 file.</p></Panel>
<p>Our project directory structure should look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/project_structure.png" alt="project structure for Deepgram talk time analytics"></p>
<p>Back in our <code is:raw>deepgram_analytics.py</code> let\u2019s add this code to our <code is:raw>main</code> function:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">\u200B\u200B</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       transcription </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       speakers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> compute_speaking_time(transcription)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">asyncio.run(main())</span></span></code></pre>
<p>Here we are initializing Deepgram and pulling in our <code is:raw>DEEPGRAM_API_KEY</code>. We open our audio file set the <code is:raw>source</code> to recognize it\u2019s an <code is:raw>audio/mp3</code>. Then we get the transcription and pass in the <code is:raw>source</code> and a Python dictionary <code is:raw>{'punctuate': True, 'diarize': True}</code>. The <code is:raw>diarize</code> option helps us assign the transcript to the speaker. More on <a href="https://developers.deepgram.com/api-reference/#diarize-pr">how to use</a> <code is:raw>diarize</code> and the other options.</p>
<p>Lastly, let\u2019s add our <code is:raw>compute_speaking_time</code> function to the <code is:raw>deepgram_analytics.py</code> file, just above our <code is:raw>main</code> function.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">compute_speaking_time</span><span style="color: #C9D1D9">(transcript_data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       total_speaker_time </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>
<span class="line"><span style="color: #C9D1D9">       speaker_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">       current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_number </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;speaker&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> speaker_number </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> current_speaker:</span></span>
<span class="line"><span style="color: #C9D1D9">               current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker_number</span></span>
<span class="line"><span style="color: #C9D1D9">               speaker_words.append([speaker_number, [], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">KeyError</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, words, time_amount </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> speaker_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">.join(words)</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">time_amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, (total_time, amount) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> total_speaker_time.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> avg time per phrase: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9">amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Total time of conversation: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> transcript</span></span></code></pre>
<p>Let\u2019s break the code down.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>These lines get the transcript as a String type from the JSON response and store it in a variable called <code is:raw>transcript</code>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   total_speaker_time </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>
<span class="line"><span style="color: #C9D1D9">   speaker_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span></span></code></pre>
<p>We define an empty dictionary called <code is:raw>total_speaker_time</code> and empty list <code is:raw>speaker_words</code>. We also need to keep track of the current speaker as each person talks. The <code is:raw>current_speaker</code> variable is set to <code is:raw>-1</code> because a speaker will never have that value, and we can update it whenever someone new is speaking.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_number </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;speaker&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> speaker_number </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> current_speaker:</span></span>
<span class="line"><span style="color: #C9D1D9">               current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker_number</span></span>
<span class="line"><span style="color: #C9D1D9">               speaker_words.append([speaker_number, [], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">KeyError</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Next, we loop through the transcript and find which speaker is talking. We append their <code is:raw>speaker_number</code>, an empty list <code is:raw>[]</code> to add their transcript, and <code is:raw>0</code>, the total time per phrase for each speaker.</p>
<p>We use a <code is:raw>try/except</code> block to add to our <code is:raw>total_speaker_time</code> dictionary. We check if the key <code is:raw>speaker_number</code> is already in the dictionary. If so, then we just add how many times the speaker speaks <code is:raw>total_speaker_time[speaker_number][1] += 1</code>. If not in the dictionary, we add the key and its values <code is:raw>total_speaker_time[speaker_number] = [0,1]</code>, with <code is:raw>0</code> as the time spoken in seconds and <code is:raw>1</code> is how many times they speak.</p>
<p>The below lines of code get the transcript from each speaker <code is:raw>get_word = speaker["word"]</code>. We then appended those to our <code is:raw>speaker_words</code> list. Finally, we get the <code is:raw>total_speaker_time</code> for each speaker by subtracting their <code is:raw>end</code> and <code is:raw>start</code> speaking times and adding them together.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Lastly, we do our analytics:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, words, time_amount </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> speaker_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">.join(words)</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">time_amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, (total_time, amount) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> total_speaker_time.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> avg time per phrase: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9">amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Total time of conversation: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> transcript</span></span></code></pre>
<p>In the first <code is:raw>for</code> loop, we print out each speaker with their speaker number and their transcript. After each person talks, we calculate how long they spoke in that sentence.</p>
<p>In the second <code is:raw>for</code> loop, we calculate on average how long each person spoke and the total time of the conversation for each speaker.</p>
<p>To run our script type <code is:raw>python deepgram_analytics.py</code> or <code is:raw>python3 deepgram_analytics.py</code> from your terminal.</p>
<p>Here\u2019s an example of what our output would look like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/terminal_output.png" alt="terminal output for Deepgram talk time analytics"></p>
<p>Congratulations on transcribing audio to text with Python using Deepgram with speech-to-text analytics! You can find the <a href="https://github.com/deepgram-devs/python-talk-time-analytics">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a></p>` }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/python-talk-time-analytics/index.md" };
function rawContent() {
  return 'Have you ever wondered what you could build using voice-to-text and analytics? This article will discover how we can combine a speech recognition provider that transcribes audio to text with Python using Deepgram and speech-to-text analytics.\n\nAnalytics is all about measuring patterns in data to discover insights that help us make better decisions. These decisions could improve business capacity, raise sales, enhance communication between a customer service agent and customer, and much more.\n\nIf you\u2019d like to jump ahead and grab the code for this project, please do so on our [Deepgram Devs Github](https://github.com/deepgram-devs/python-talk-time-analytics).\n\n# What We\'ll Build Together\n\nThis tutorial will use the Deepgram Python SDK to build a simple script that does voice transcription with Python. One of the many beauties of Deepgram is our [diarize feature](https://developers.deepgram.com/documentation/features/diarize/). We\u2019ll use this feature to help us recognize which speaker is talking and assigns a transcript to that speaker. The `diarize` feature will help us recognize multiple speakers. We\u2019ll see how to get the transcript from the audio and assign it to each speaker.\n\nThen we\u2019ll focus on analytics by measuring the following:\n\n* The amount of time each speaker spoke per phrase\n* The average amount of time they spoke\n* The total time of conversation for each speaker\n\n# Getting Started\n\nBefore we start, it\u2019s essential to generate a Deepgram API key to use in our project. To grab one, we can go to our [Deepgram console](https://console.deepgram.com/signup?jump=keys). Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.\n\nNext, let\u2019s make a directory anywhere we\u2019d like.\n\n```\nmkdir deepgram_analytics_project\n```\n\nThen change into that directory so we can start adding things to it.\n\n```\ncd deepgram_analytics_project\n```\n\nWe\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those [here](https://blog.deepgram.com/python-virtual-environments/) and how to create one.\n\n<Panel type="info" title="Important Note">\n\nIt\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.\n\n</Panel>\n\nNow we can open up our favorite editor and create a file called `deepgram_analytics.py`. If you\u2019d like to make it from the command line, do this:\n\n```\ntouch deepgram_analytics.py\n```\n\nFinally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named `venv` then activate it.\n\n```\nsource venv/bin/activate\n```\n\nAfter activation, we install the dependencies, including:\n\n* The Deepgram Python SDK\n* The dotenv library, which helps us work with our environment variables\n\n{/*<!---->*/}\n\n```\npip install deepgram-sdk\npip install python-dotenv\n```\n\n# The Code\n\nLet\u2019s open our `deepgram_analytics.py` file and include the following code at the top:\n\n```python\nimport asyncio\nfrom deepgram import Deepgram\nfrom dotenv import load_dotenv\nfrom typing import Dict\nimport os\n\nload_dotenv()\n\nPATH_TO_FILE = \'premier_broken-phone.mp3\'\n```\n\nThe first part is Python imports. We need to access the modules and libraries for our script to work correctly.\n\nThe `load_dotenv()` will help us load our `api_key` from an `env` file, which holds our environment variables.\n\nThe `PATH_TO_FILE = \'premier_broken-phone.mp3\'` is a path to our audio file we\u2019ll use to do the speech-to-text transcription.\n\nCreate an `env` file at the same level as our `deepgram_analytics.py`. Put the following inside of it:\n\n```\nDEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D\n```\n\nWhere you\u2019d replace `YOUR_API_KEY` with your api_key you got from Deepgram.\n\nNext, let\u2019s add the audio file to our project by [downloading it here](https://developers.deepgram.com/data/audio/premier_broken-phone.mp3), and adding it to our project directory.\n\n<Panel type="info" title="Important Note">\n\nThis audio file is a sample phone call from Premier Phone Services. To follow along, we\u2019ll need to download this .mp3 file.\n\n</Panel>\n\nOur project directory structure should look like this:\n\n![project structure for Deepgram talk time analytics](https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/project_structure.png)\n\nBack in our `deepgram_analytics.py` let\u2019s add this code to our `main` function:\n\n```python\n\u200B\u200Basync def main():\n   deepgram = Deepgram(os.getenv("DEEPGRAM_API_KEY"))\n\n   with open(PATH_TO_FILE, \'rb\') as audio:\n       source = {\'buffer\': audio, \'mimetype\': \'audio/mp3\'}\n       transcription = await deepgram.transcription.prerecorded(source, {\'punctuate\': True, \'diarize\': True})\n\n       speakers = await compute_speaking_time(transcription)\n\n\nasyncio.run(main())\n```\n\nHere we are initializing Deepgram and pulling in our `DEEPGRAM_API_KEY`. We open our audio file set the `source` to recognize it\u2019s an `audio/mp3`. Then we get the transcription and pass in the `source` and a Python dictionary `{\'punctuate\': True, \'diarize\': True}`. The `diarize` option helps us assign the transcript to the speaker. More on [how to use](https://developers.deepgram.com/api-reference/#diarize-pr) `diarize` and the other options.\n\nLastly, let\u2019s add our `compute_speaking_time` function to the `deepgram_analytics.py` file, just above our `main` function.\n\n```python\nasync def compute_speaking_time(transcript_data: Dict) -> None:\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'words\']\n\n       total_speaker_time = {}\n       speaker_words = []\n       current_speaker = -1\n\n       for speaker in transcript:\n           speaker_number = speaker["speaker"]\n\n           if speaker_number is not current_speaker:\n               current_speaker = speaker_number\n               speaker_words.append([speaker_number, [], 0])\n\n               try:\n                   total_speaker_time[speaker_number][1] += 1\n               except KeyError:\n                   total_speaker_time[speaker_number] = [0,1]\n\n\n           get_word = speaker["word"]\n           speaker_words[-1][1].append(get_word)\n\n           total_speaker_time[speaker_number][0] += speaker["end"] - speaker["start"]\n           speaker_words[-1][2] += speaker["end"] - speaker["start"]\n\n       for speaker, words, time_amount in speaker_words:\n           print(f"Speaker {speaker}: {\' \'.join(words)}")\n           print(f"Speaker {speaker}: {time_amount}")\n\n       for speaker, (total_time, amount) in total_speaker_time.items():\n           print(f"Speaker {speaker} avg time per phrase: {total_time/amount} ")\n           print(f"Total time of conversation: {total_time}")\n\n   return transcript\n```\n\nLet\u2019s break the code down.\n\n```python\n   if \'results\' in transcript_data:\n       transcript = transcript_data[\'results\'][\'channels\'][0][\'alternatives\'][0][\'words\']\n```\n\nThese lines get the transcript as a String type from the JSON response and store it in a variable called `transcript`.\n\n```python\n   total_speaker_time = {}\n   speaker_words = []\n   current_speaker = -1\n```\n\nWe define an empty dictionary called `total_speaker_time` and empty list `speaker_words`. We also need to keep track of the current speaker as each person talks. The `current_speaker` variable is set to `-1` because a speaker will never have that value, and we can update it whenever someone new is speaking.\n\n```python\n       for speaker in transcript:\n           speaker_number = speaker["speaker"]\n\n           if speaker_number is not current_speaker:\n               current_speaker = speaker_number\n               speaker_words.append([speaker_number, [], 0])\n               try:\n                   total_speaker_time[speaker_number][1] += 1\n               except KeyError:\n                   total_speaker_time[speaker_number] = [0,1]\n\n\n           get_word = speaker["word"]\n           speaker_words[-1][1].append(get_word)\n\n           total_speaker_time[speaker_number][0] += speaker["end"] - speaker["start"]\n           speaker_words[-1][2] += speaker["end"] - speaker["start"]\n```\n\nNext, we loop through the transcript and find which speaker is talking. We append their `speaker_number`, an empty list `[]` to add their transcript, and `0`, the total time per phrase for each speaker.\n\nWe use a `try/except` block to add to our `total_speaker_time` dictionary. We check if the key `speaker_number` is already in the dictionary. If so, then we just add how many times the speaker speaks `total_speaker_time[speaker_number][1] += 1`. If not in the dictionary, we add the key and its values `total_speaker_time[speaker_number] = [0,1]`, with `0` as the time spoken in seconds and `1` is how many times they speak.\n\nThe below lines of code get the transcript from each speaker `get_word = speaker["word"]`. We then appended those to our `speaker_words` list. Finally, we get the `total_speaker_time` for each speaker by subtracting their `end` and `start` speaking times and adding them together.\n\n```python\nget_word = speaker["word"]\nspeaker_words[-1][1].append(get_word)\n\ntotal_speaker_time[speaker_number][0] += speaker["end"] - speaker["start"]\n```\n\nLastly, we do our analytics:\n\n```python\n       for speaker, words, time_amount in speaker_words:\n           print(f"Speaker {speaker}: {\' \'.join(words)}")\n           print(f"Speaker {speaker}: {time_amount}")\n\n       for speaker, (total_time, amount) in total_speaker_time.items():\n           print(f"Speaker {speaker} avg time per phrase: {total_time/amount} ")\n           print(f"Total time of conversation: {total_time}")\n\n   return transcript\n```\n\nIn the first `for` loop, we print out each speaker with their speaker number and their transcript. After each person talks, we calculate how long they spoke in that sentence.\n\nIn the second `for` loop, we calculate on average how long each person spoke and the total time of the conversation for each speaker.\n\nTo run our script type `python deepgram_analytics.py` or `python3 deepgram_analytics.py` from your terminal.\n\nHere\u2019s an example of what our output would look like:\n\n![terminal output for Deepgram talk time analytics](https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/terminal_output.png)\n\nCongratulations on transcribing audio to text with Python using Deepgram with speech-to-text analytics! You can find the [code here](https://github.com/deepgram-devs/python-talk-time-analytics) with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs)';
}
function compiledContent() {
  return `<p>Have you ever wondered what you could build using voice-to-text and analytics? This article will discover how we can combine a speech recognition provider that transcribes audio to text with Python using Deepgram and speech-to-text analytics.</p>
<p>Analytics is all about measuring patterns in data to discover insights that help us make better decisions. These decisions could improve business capacity, raise sales, enhance communication between a customer service agent and customer, and much more.</p>
<p>If you\u2019d like to jump ahead and grab the code for this project, please do so on our <a href="https://github.com/deepgram-devs/python-talk-time-analytics">Deepgram Devs Github</a>.</p>
<h1 id="what-well-build-together">What We\u2019ll Build Together</h1>
<p>This tutorial will use the Deepgram Python SDK to build a simple script that does voice transcription with Python. One of the many beauties of Deepgram is our <a href="https://developers.deepgram.com/documentation/features/diarize/">diarize feature</a>. We\u2019ll use this feature to help us recognize which speaker is talking and assigns a transcript to that speaker. The <code is:raw>diarize</code> feature will help us recognize multiple speakers. We\u2019ll see how to get the transcript from the audio and assign it to each speaker.</p>
<p>Then we\u2019ll focus on analytics by measuring the following:</p>
<ul>
<li>The amount of time each speaker spoke per phrase</li>
<li>The average amount of time they spoke</li>
<li>The total time of conversation for each speaker</li>
</ul>
<h1 id="getting-started">Getting Started</h1>
<p>Before we start, it\u2019s essential to generate a Deepgram API key to use in our project. To grab one, we can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won\u2019t be able to retrieve it again and will have to create a new one. In this tutorial, we\u2019ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Next, let\u2019s make a directory anywhere we\u2019d like.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">mkdir deepgram_analytics_project</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cd deepgram_analytics_project</span></span></code></pre>
<p>We\u2019ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
<Panel type="info" title="Important Note"><p>It\u2019s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.</p></Panel>
<p>Now we can open up our favorite editor and create a file called <code is:raw>deepgram_analytics.py</code>. If you\u2019d like to make it from the command line, do this:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch deepgram_analytics.py</span></span></code></pre>
<p>Finally, let\u2019s install our dependencies for our project. Ensure our virtual environment is activated because we\u2019ll install those dependencies inside. If your virtual environment is named <code is:raw>venv</code> then activate it.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">source venv/bin/activate</span></span></code></pre>
<p>After activation, we install the dependencies, including:</p>
<ul>
<li>The Deepgram Python SDK</li>
<li>The dotenv library, which helps us work with our environment variables</li>
</ul>
{/*<!---->*/}
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #c9d1d9">pip install python-dotenv</span></span></code></pre>
<h1 id="the-code">The Code</h1>
<p>Let\u2019s open our <code is:raw>deepgram_analytics.py</code> file and include the following code at the top:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;premier_broken-phone.mp3&#39;</span></span></code></pre>
<p>The first part is Python imports. We need to access the modules and libraries for our script to work correctly.</p>
<p>The <code is:raw>load_dotenv()</code> will help us load our <code is:raw>api_key</code> from an <code is:raw>env</code> file, which holds our environment variables.</p>
<p>The <code is:raw>PATH_TO_FILE = 'premier_broken-phone.mp3'</code> is a path to our audio file we\u2019ll use to do the speech-to-text transcription.</p>
<p>Create an <code is:raw>env</code> file at the same level as our <code is:raw>deepgram_analytics.py</code>. Put the following inside of it:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY = \u201CYOUR_API_KEY\u201D</span></span></code></pre>
<p>Where you\u2019d replace <code is:raw>YOUR_API_KEY</code> with your api_key you got from Deepgram.</p>
<p>Next, let\u2019s add the audio file to our project by <a href="https://developers.deepgram.com/data/audio/premier_broken-phone.mp3">downloading it here</a>, and adding it to our project directory.</p>
<Panel type="info" title="Important Note"><p>This audio file is a sample phone call from Premier Phone Services. To follow along, we\u2019ll need to download this .mp3 file.</p></Panel>
<p>Our project directory structure should look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/project_structure.png" alt="project structure for Deepgram talk time analytics"></p>
<p>Back in our <code is:raw>deepgram_analytics.py</code> let\u2019s add this code to our <code is:raw>main</code> function:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">\u200B\u200B</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       transcription </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       speakers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> compute_speaking_time(transcription)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">asyncio.run(main())</span></span></code></pre>
<p>Here we are initializing Deepgram and pulling in our <code is:raw>DEEPGRAM_API_KEY</code>. We open our audio file set the <code is:raw>source</code> to recognize it\u2019s an <code is:raw>audio/mp3</code>. Then we get the transcription and pass in the <code is:raw>source</code> and a Python dictionary <code is:raw>{'punctuate': True, 'diarize': True}</code>. The <code is:raw>diarize</code> option helps us assign the transcript to the speaker. More on <a href="https://developers.deepgram.com/api-reference/#diarize-pr">how to use</a> <code is:raw>diarize</code> and the other options.</p>
<p>Lastly, let\u2019s add our <code is:raw>compute_speaking_time</code> function to the <code is:raw>deepgram_analytics.py</code> file, just above our <code is:raw>main</code> function.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">compute_speaking_time</span><span style="color: #C9D1D9">(transcript_data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       total_speaker_time </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>
<span class="line"><span style="color: #C9D1D9">       speaker_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">       current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_number </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;speaker&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> speaker_number </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> current_speaker:</span></span>
<span class="line"><span style="color: #C9D1D9">               current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker_number</span></span>
<span class="line"><span style="color: #C9D1D9">               speaker_words.append([speaker_number, [], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">KeyError</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, words, time_amount </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> speaker_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">.join(words)</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">time_amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, (total_time, amount) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> total_speaker_time.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> avg time per phrase: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9">amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Total time of conversation: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> transcript</span></span></code></pre>
<p>Let\u2019s break the code down.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>These lines get the transcript as a String type from the JSON response and store it in a variable called <code is:raw>transcript</code>.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   total_speaker_time </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>
<span class="line"><span style="color: #C9D1D9">   speaker_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span></span></code></pre>
<p>We define an empty dictionary called <code is:raw>total_speaker_time</code> and empty list <code is:raw>speaker_words</code>. We also need to keep track of the current speaker as each person talks. The <code is:raw>current_speaker</code> variable is set to <code is:raw>-1</code> because a speaker will never have that value, and we can update it whenever someone new is speaking.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_number </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;speaker&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> speaker_number </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> current_speaker:</span></span>
<span class="line"><span style="color: #C9D1D9">               current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker_number</span></span>
<span class="line"><span style="color: #C9D1D9">               speaker_words.append([speaker_number, [], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">KeyError</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Next, we loop through the transcript and find which speaker is talking. We append their <code is:raw>speaker_number</code>, an empty list <code is:raw>[]</code> to add their transcript, and <code is:raw>0</code>, the total time per phrase for each speaker.</p>
<p>We use a <code is:raw>try/except</code> block to add to our <code is:raw>total_speaker_time</code> dictionary. We check if the key <code is:raw>speaker_number</code> is already in the dictionary. If so, then we just add how many times the speaker speaks <code is:raw>total_speaker_time[speaker_number][1] += 1</code>. If not in the dictionary, we add the key and its values <code is:raw>total_speaker_time[speaker_number] = [0,1]</code>, with <code is:raw>0</code> as the time spoken in seconds and <code is:raw>1</code> is how many times they speak.</p>
<p>The below lines of code get the transcript from each speaker <code is:raw>get_word = speaker["word"]</code>. We then appended those to our <code is:raw>speaker_words</code> list. Finally, we get the <code is:raw>total_speaker_time</code> for each speaker by subtracting their <code is:raw>end</code> and <code is:raw>start</code> speaking times and adding them together.</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Lastly, we do our analytics:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, words, time_amount </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> speaker_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">.join(words)</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">time_amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, (total_time, amount) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> total_speaker_time.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> avg time per phrase: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9">amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Total time of conversation: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> transcript</span></span></code></pre>
<p>In the first <code is:raw>for</code> loop, we print out each speaker with their speaker number and their transcript. After each person talks, we calculate how long they spoke in that sentence.</p>
<p>In the second <code is:raw>for</code> loop, we calculate on average how long each person spoke and the total time of the conversation for each speaker.</p>
<p>To run our script type <code is:raw>python deepgram_analytics.py</code> or <code is:raw>python3 deepgram_analytics.py</code> from your terminal.</p>
<p>Here\u2019s an example of what our output would look like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/terminal_output.png" alt="terminal output for Deepgram talk time analytics"></p>
<p>Congratulations on transcribing audio to text with Python using Deepgram with speech-to-text analytics! You can find the <a href="https://github.com/deepgram-devs/python-talk-time-analytics">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a></p>`;
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/python-talk-time-analytics/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Have you ever wondered what you could build using voice-to-text and analytics? This article will discover how we can combine a speech recognition provider that transcribes audio to text with Python using Deepgram and speech-to-text analytics.</p>
<p>Analytics is all about measuring patterns in data to discover insights that help us make better decisions. These decisions could improve business capacity, raise sales, enhance communication between a customer service agent and customer, and much more.</p>
<p>If you’d like to jump ahead and grab the code for this project, please do so on our <a href="https://github.com/deepgram-devs/python-talk-time-analytics">Deepgram Devs Github</a>.</p>
<h1 id="what-well-build-together">What We’ll Build Together</h1>
<p>This tutorial will use the Deepgram Python SDK to build a simple script that does voice transcription with Python. One of the many beauties of Deepgram is our <a href="https://developers.deepgram.com/documentation/features/diarize/">diarize feature</a>. We’ll use this feature to help us recognize which speaker is talking and assigns a transcript to that speaker. The <code>diarize</code> feature will help us recognize multiple speakers. We’ll see how to get the transcript from the audio and assign it to each speaker.</p>
<p>Then we’ll focus on analytics by measuring the following:</p>
<ul>
<li>The amount of time each speaker spoke per phrase</li>
<li>The average amount of time they spoke</li>
<li>The total time of conversation for each speaker</li>
</ul>
<h1 id="getting-started">Getting Started</h1>
<p>Before we start, it’s essential to generate a Deepgram API key to use in our project. To grab one, we can go to our <a href="https://console.deepgram.com/signup?jump=keys">Deepgram console</a>. Make sure to copy it and keep it in a safe place, as you won’t be able to retrieve it again and will have to create a new one. In this tutorial, we’ll use Python 3.10, but Deepgram supports some earlier versions of Python.</p>
<p>Next, let’s make a directory anywhere we’d like.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">mkdir deepgram_analytics_project</span></span></code></pre>
<p>Then change into that directory so we can start adding things to it.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">cd deepgram_analytics_project</span></span></code></pre>
<p>We’ll also need to set up a virtual environment to hold our project and its dependencies. We can read more about those <a href="https://blog.deepgram.com/python-virtual-environments/">here</a> and how to create one.</p>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "Important Note" }, { "default": () => renderTemplate`<p>It’s recommended in Python to use a virtual environment so our project can be installed inside a container rather than installing it system-wide.</p>` })}
<p>Now we can open up our favorite editor and create a file called <code>deepgram_analytics.py</code>. If you’d like to make it from the command line, do this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">touch deepgram_analytics.py</span></span></code></pre>
<p>Finally, let’s install our dependencies for our project. Ensure our virtual environment is activated because we’ll install those dependencies inside. If your virtual environment is named <code>venv</code> then activate it.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">source venv/bin/activate</span></span></code></pre>
<p>After activation, we install the dependencies, including:</p>
<ul>
<li>The Deepgram Python SDK</li>
<li>The dotenv library, which helps us work with our environment variables</li>
</ul>

<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install deepgram-sdk</span></span>
<span class="line"><span style="color: #c9d1d9">pip install python-dotenv</span></span></code></pre>
<h1 id="the-code">The Code</h1>
<p>Let’s open our <code>deepgram_analytics.py</code> file and include the following code at the top:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> typing </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Dict</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;premier_broken-phone.mp3&#39;</span></span></code></pre>
<p>The first part is Python imports. We need to access the modules and libraries for our script to work correctly.</p>
<p>The <code>load_dotenv()</code> will help us load our <code>api_key</code> from an <code>env</code> file, which holds our environment variables.</p>
<p>The <code>PATH_TO_FILE = 'premier_broken-phone.mp3'</code> is a path to our audio file we’ll use to do the speech-to-text transcription.</p>
<p>Create an <code>env</code> file at the same level as our <code>deepgram_analytics.py</code>. Put the following inside of it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DEEPGRAM_API_KEY = “YOUR_API_KEY”</span></span></code></pre>
<p>Where you’d replace <code>YOUR_API_KEY</code> with your api_key you got from Deepgram.</p>
<p>Next, let’s add the audio file to our project by <a href="https://developers.deepgram.com/data/audio/premier_broken-phone.mp3">downloading it here</a>, and adding it to our project directory.</p>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "Important Note" }, { "default": () => renderTemplate`<p>This audio file is a sample phone call from Premier Phone Services. To follow along, we’ll need to download this .mp3 file.</p>` })}
<p>Our project directory structure should look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/project_structure.png" alt="project structure for Deepgram talk time analytics"></p>
<p>Back in our <code>deepgram_analytics.py</code> let’s add this code to our <code>main</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">​​</span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">   deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(os.getenv(</span><span style="color: #A5D6FF">&quot;DEEPGRAM_API_KEY&quot;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PATH_TO_FILE</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">       source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #C9D1D9">       transcription </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, {</span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       speakers </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> compute_speaking_time(transcription)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">asyncio.run(main())</span></span></code></pre>
<p>Here we are initializing Deepgram and pulling in our <code>DEEPGRAM_API_KEY</code>. We open our audio file set the <code>source</code> to recognize it’s an <code>audio/mp3</code>. Then we get the transcription and pass in the <code>source</code> and a Python dictionary <code>{'punctuate': True, 'diarize': True}</code>. The <code>diarize</code> option helps us assign the transcript to the speaker. More on <a href="https://developers.deepgram.com/api-reference/#diarize-pr">how to use</a> <code>diarize</code> and the other options.</p>
<p>Lastly, let’s add our <code>compute_speaking_time</code> function to the <code>deepgram_analytics.py</code> file, just above our <code>main</code> function.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">compute_speaking_time</span><span style="color: #C9D1D9">(transcript_data: Dict) -&gt; </span><span style="color: #79C0FF">None</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       total_speaker_time </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>
<span class="line"><span style="color: #C9D1D9">       speaker_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">       current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_number </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;speaker&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> speaker_number </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> current_speaker:</span></span>
<span class="line"><span style="color: #C9D1D9">               current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker_number</span></span>
<span class="line"><span style="color: #C9D1D9">               speaker_words.append([speaker_number, [], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">KeyError</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, words, time_amount </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> speaker_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">.join(words)</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">time_amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, (total_time, amount) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> total_speaker_time.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> avg time per phrase: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9">amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Total time of conversation: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> transcript</span></span></code></pre>
<p>Let’s break the code down.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript_data:</span></span>
<span class="line"><span style="color: #C9D1D9">       transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript_data[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;words&#39;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>These lines get the transcript as a String type from the JSON response and store it in a variable called <code>transcript</code>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">   total_speaker_time </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {}</span></span>
<span class="line"><span style="color: #C9D1D9">   speaker_words </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">   current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span></span></code></pre>
<p>We define an empty dictionary called <code>total_speaker_time</code> and empty list <code>speaker_words</code>. We also need to keep track of the current speaker as each person talks. The <code>current_speaker</code> variable is set to <code>-1</code> because a speaker will never have that value, and we can update it whenever someone new is speaking.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> transcript:</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_number </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;speaker&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> speaker_number </span><span style="color: #FF7B72">is</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">not</span><span style="color: #C9D1D9"> current_speaker:</span></span>
<span class="line"><span style="color: #C9D1D9">               current_speaker </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker_number</span></span>
<span class="line"><span style="color: #C9D1D9">               speaker_words.append([speaker_number, [], </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span></span>
<span class="line"><span style="color: #C9D1D9">               </span><span style="color: #FF7B72">except</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">KeyError</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">                   total_speaker_time[speaker_number] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">,</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">           total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">           speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Next, we loop through the transcript and find which speaker is talking. We append their <code>speaker_number</code>, an empty list <code>[]</code> to add their transcript, and <code>0</code>, the total time per phrase for each speaker.</p>
<p>We use a <code>try/except</code> block to add to our <code>total_speaker_time</code> dictionary. We check if the key <code>speaker_number</code> is already in the dictionary. If so, then we just add how many times the speaker speaks <code>total_speaker_time[speaker_number][1] += 1</code>. If not in the dictionary, we add the key and its values <code>total_speaker_time[speaker_number] = [0,1]</code>, with <code>0</code> as the time spoken in seconds and <code>1</code> is how many times they speak.</p>
<p>The below lines of code get the transcript from each speaker <code>get_word = speaker["word"]</code>. We then appended those to our <code>speaker_words</code> list. Finally, we get the <code>total_speaker_time</code> for each speaker by subtracting their <code>end</code> and <code>start</code> speaking times and adding them together.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">get_word </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;word&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">speaker_words[</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].append(get_word)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">total_speaker_time[speaker_number][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;end&quot;</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> speaker[</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Lastly, we do our analytics:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, words, time_amount </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> speaker_words:</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">.join(words)</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">time_amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">       </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> speaker, (total_time, amount) </span><span style="color: #FF7B72">in</span><span style="color: #C9D1D9"> total_speaker_time.items():</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Speaker </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">speaker</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> avg time per phrase: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #FF7B72">/</span><span style="color: #C9D1D9">amount</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF"> &quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">           </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">f</span><span style="color: #A5D6FF">&quot;Total time of conversation: </span><span style="color: #79C0FF">{</span><span style="color: #C9D1D9">total_time</span><span style="color: #79C0FF">}</span><span style="color: #A5D6FF">&quot;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">   </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> transcript</span></span></code></pre>
<p>In the first <code>for</code> loop, we print out each speaker with their speaker number and their transcript. After each person talks, we calculate how long they spoke in that sentence.</p>
<p>In the second <code>for</code> loop, we calculate on average how long each person spoke and the total time of the conversation for each speaker.</p>
<p>To run our script type <code>python deepgram_analytics.py</code> or <code>python3 deepgram_analytics.py</code> from your terminal.</p>
<p>Here’s an example of what our output would look like:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647974833/blog/2022/03/python-talk-time-analytics/terminal_output.png" alt="terminal output for Deepgram talk time analytics"></p>
<p>Congratulations on transcribing audio to text with Python using Deepgram with speech-to-text analytics! You can find the <a href="https://github.com/deepgram-devs/python-talk-time-analytics">code here</a> with instructions on how to run the project. If you have any questions, please feel free to reach out to us on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a></p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/python-talk-time-analytics/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
