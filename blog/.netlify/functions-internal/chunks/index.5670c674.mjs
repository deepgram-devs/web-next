import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "setting-up-a-vue-project-with-a-script-include", "text": "Setting Up a Vue Project With a Script Include" }, { "depth": 2, "slug": "get-microphone-data", "text": "Get Microphone Data" }, { "depth": 2, "slug": "connect-to-deepgram", "text": "Connect to Deepgram" }, { "depth": 2, "slug": "send-data-to-deepgram", "text": "Send Data to Deepgram" }, { "depth": 2, "slug": "receive-transcript-results", "text": "Receive Transcript Results" }, { "depth": 2, "slug": "show-transcripts-on-page", "text": "Show Transcripts On Page" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\r\nThis post will cover how to set up Deepgram for live transcriptions in your Vue.js application. We'll set up Deepgram in a single HTML file with the Vue.js `<script>` include and no other dependencies.\r\n\r\n## Before We Start\r\n\r\nYou will need a free [Deepgram API Key](https://console.deepgram.com/signup?jump=keys).\r\n\r\n## Setting Up a Vue Project With a Script Include\r\n\r\nCreate an `index.html` file and open it in a code editor. Set up a Vue project:\r\n\r\n```js\r\n<html>\r\n<head></head>\r\n<body>\r\n  <div id=\"app\">\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.0\"><\/script>\r\n  <script>\r\n    const app = new Vue({\r\n      el: '#app'\r\n    })\r\n  <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\n## Get Microphone Data\r\n\r\nThis code will be written in the `created()` lifecycle method - meaning it will happen immediately.\r\n\r\nFirstly, ask the user for access to their mic:\r\n\r\n```js\r\nconst app = new Vue({\r\n  el: '#app',\r\n  async created() {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .catch(error => alert(error))\r\n  }\r\n})\r\n```\r\n\r\nNext, plug the stream into a MediaRecorder so we can later access the raw data from the accessed microphone:\r\n\r\n```js\r\nconst app = new Vue({\r\n  el: '#app',\r\n  async created() {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .catch(error => alert(error))\r\n\r\n    // Create MediaRecorder\r\n    if(!MediaRecorder.isTypeSupported('audio/webm')) return alert('Unsupported browser')\r\n    this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\r\n  },\r\n  // Store MediaRecorder\r\n  data: {\r\n    mediaRecorder: null\r\n  }\r\n})\r\n```\r\n\r\nRemember that if you are creating Vue components, `data` must be a function that returns an object.\r\n\r\n## Connect to Deepgram\r\n\r\nCreate a button which will begin transcription. Trigger a new `begin()` method with it's clicked:\r\n\r\n```js\r\n<html>\r\n<head></head>\r\n<body>\r\n  <div id=\"app\">\r\n    {/*<!-- Add button -->*/}\r\n    <button @click=\"begin\">Begin transcription</button>\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.0\"><\/script>\r\n  <script>\r\n    const app = new Vue({\r\n      el: '#app',\r\n      async created() {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n          .catch(error => alert(error))\r\n\r\n        if(!MediaRecorder.isTypeSupported('audio/webm')) return alert('Unsupported browser')\r\n        this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\r\n      },\r\n      data: {\r\n        mediaRecorder: null\r\n      },\r\n      // Create begin method\r\n      methods: {\r\n        begin() {\r\n\r\n        }\r\n      }\r\n    })\r\n  <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\nTake a moment to get [a free Deepgram API Key](https://console.deepgram.com/signup?jump=keys) before continuing.\r\n\r\nUse the browser native WebSocket interface to connect to Deepgram's live transcription server. Store the WebSocket instance in `data`:\r\n\r\n```js\r\ndata: {\r\n  mediaRecorder: null,\r\n  // Add socket\r\n  socket: null\r\n},\r\nmethods: {\r\n  begin() {\r\n    const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n    const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n    this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n  }\r\n}\r\n```\r\n\r\nThis WebSocket creates a 2-way connection with Deepgram. See the `language=de` in the URL? That's telling it you'll be speaking German. We have loads of [supported languages](https://developers.deepgram.com/documentation/features/language/) to check out!\r\n\r\n## Send Data to Deepgram\r\n\r\nOnce the WebSocket connection is open, start sending mic data:\r\n\r\n```js\r\nmethods: {\r\n  begin() {\r\n    const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n    const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n    this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n    // Run the startStreaming method when socket is opened\r\n    this.socket.onopen = this.startStreaming\r\n  },\r\n  // Create startStreaming method\r\n  startStreaming() {\r\n    this.mediaRecorder.addEventListener('dataavailable', event => {\r\n      if(event.data.size > 0 && this.socket.readyState == 1) {\r\n        this.socket.send(event.data)\r\n      }\r\n      // Send data every 250ms (.25s)\r\n      mediaRecorder.start(250)\r\n    })\r\n  }\r\n}\r\n```\r\n\r\n## Receive Transcript Results\r\n\r\nYou are currently sending data through our persistent connection to Deepgram every 0.25 seconds. You will receive transcripts back nearly as often - it's time to write the handling code.\r\n\r\n```js\r\nmethods: {\r\n  begin() {\r\n    const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n    const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n    this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n    this.socket.onopen = this.startStreaming\r\n    // Run the handleResponse method when data is received\r\n    this.socket.onmessage = this.handleResponse\r\n  },\r\n  startStreaming() {\r\n    this.mediaRecorder.addEventListener('dataavailable', event => {\r\n      if(event.data.size > 0 && this.socket.readyState == 1) {\r\n        this.socket.send(event.data)\r\n      }\r\n      mediaRecorder.start(250)\r\n    })\r\n  },\r\n  // Create handleResponse method\r\n  handleResponse(message) {\r\n    const received = JSON.parse(message.data)\r\n    const transcript = received.channel.alternatives[0].transcript\r\n    if(transcript) {\r\n      console.log(transcript)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nRefresh your browser, and you should see transcripts showing in your console.\r\n\r\n![Browser console showing one line in German](https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/logs.jpg)\r\n\r\n## Show Transcripts On Page\r\n\r\nFirst, create a new `transcripts` property in `data` with an empty array:\r\n\r\n```js\r\ndata: {\r\n  mediaRecorder: null,\r\n  socket: null,\r\n  // Add this\r\n  transcripts: []\r\n},\r\n```\r\n\r\nThen, instead of logging transcripts, add them to this array:\r\n\r\n```js\r\nif(transcript) {\r\n  this.transcripts.push(transcript)\r\n}\r\n```\r\n\r\nFinally, update your HTML to display items from the array:\r\n\r\n```js\r\n<div id=\"app\">\r\n  <button @click=\"begin\">Begin transcription</button>\r\n  {/*<!-- Add looping element -->*/}\r\n  <p v-for=\"transcript in transcripts\">{{ transcript }}</p>\r\n</div>\r\n```\r\n\r\nYour page should look like this once you've spoken a couple of phrases:\r\n\r\n![Page showing two lines - each with one line of transcripted German text](https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/display.png)\r\n\r\n## Wrapping Up\r\n\r\nThe final code looks like this:\r\n\r\n```js\r\n<html>\r\n<head></head>\r\n<body>\r\n  <div id=\"app\">\r\n    <button @click=\"begin\">Begin transcription</button>\r\n    <p v-for=\"transcript in transcripts\">{{ transcript }}</p>\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.0\"><\/script>\r\n  <script>\r\n    const app = new Vue({\r\n      el: '#app',\r\n      async created() {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n          .catch(error => alert(error))\r\n\r\n        if(!MediaRecorder.isTypeSupported('audio/webm')) return alert('Unsupported browser')\r\n        this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\r\n      },\r\n      data: {\r\n        mediaRecorder: null,\r\n        socket: null,\r\n        transcripts: []\r\n      },\r\n      methods: {\r\n        begin() {\r\n          const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n          const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n          this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n          this.socket.onopen = this.startStreaming\r\n          this.socket.onmessage = this.handleResponse\r\n        },\r\n        startStreaming() {\r\n          this.mediaRecorder.addEventListener('dataavailable', event => {\r\n            if(event.data.size > 0 && this.socket.readyState == 1) {\r\n              this.socket.send(event.data)\r\n            }\r\n            mediaRecorder.start(250)\r\n          })\r\n        },\r\n        handleResponse(message) {\r\n          const received = JSON.parse(message.data)\r\n          const transcript = received.channel.alternatives[0].transcript\r\n          if(transcript) {\r\n            this.transcripts.push(transcript)\r\n          }\r\n        }\r\n      }\r\n    })\r\n  <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\nThis is the most simple implementation with Vue and is written for clarity over conciseness. If you want to learn more about Vue 3, including its setup() function and composables, then Sandra wrote [an excellent tutorial series on Vue 3](https://blog.deepgram.com/diving-into-vue-3-getting-started/).\r\n\r\nIf you have questions, please feel free to message us on Twitter, [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ", "html": '<p>This post will cover how to set up Deepgram for live transcriptions in your Vue.js application. We\u2019ll set up Deepgram in a single HTML file with the Vue.js <code is:raw>&lt;script&gt;</code> include and no other dependencies.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need a free <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a>.</p>\n<h2 id="setting-up-a-vue-project-with-a-script-include">Setting Up a Vue Project With a Script Include</h2>\n<p>Create an <code is:raw>index.html</code> file and open it in a code editor. Set up a Vue project:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="get-microphone-data">Get Microphone Data</h2>\n<p>This code will be written in the <code is:raw>created()</code> lifecycle method - meaning it will happen immediately.</p>\n<p>Firstly, ask the user for access to their mic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Next, plug the stream into a MediaRecorder so we can later access the raw data from the accessed microphone:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Create MediaRecorder</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">MediaRecorder.</span><span style="color: #D2A8FF">isTypeSupported</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Store MediaRecorder</span></span>\n<span class="line"><span style="color: #C9D1D9">  data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Remember that if you are creating Vue components, <code is:raw>data</code> must be a function that returns an object.</p>\n<h2 id="connect-to-deepgram">Connect to Deepgram</h2>\n<p>Create a button which will begin transcription. Trigger a new <code is:raw>begin()</code> method with it\u2019s clicked:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Add button --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      async </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        const stream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">          .catch(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9">(!MediaRecorder.isTypeSupported(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) return </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        this.mediaRecorder = new </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">, { </span><span style="color: #FFA657">mimeType</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        mediaRecorder: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Create begin method</span></span>\n<span class="line"><span style="color: #C9D1D9">      methods: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Take a moment to get <a href="https://console.deepgram.com/signup?jump=keys">a free Deepgram API Key</a> before continuing.</p>\n<p>Use the browser native WebSocket interface to connect to Deepgram\u2019s live transcription server. Store the WebSocket instance in <code is:raw>data</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">data</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">mediaRecorder</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add socket</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This WebSocket creates a 2-way connection with Deepgram. See the <code is:raw>language=de</code> in the URL? That\u2019s telling it you\u2019ll be speaking German. We have loads of <a href="https://developers.deepgram.com/documentation/features/language/">supported languages</a> to check out!</p>\n<h2 id="send-data-to-deepgram">Send Data to Deepgram</h2>\n<p>Once the WebSocket connection is open, start sending mic data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Run the startStreaming method when socket is opened</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create startStreaming method</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Send data every 250ms (.25s)</span></span>\n<span class="line"><span style="color: #C9D1D9">      mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="receive-transcript-results">Receive Transcript Results</h2>\n<p>You are currently sending data through our persistent connection to Deepgram every 0.25 seconds. You will receive transcripts back nearly as often - it\u2019s time to write the handling code.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Run the handleResponse method when data is received</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.handleResponse</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">      mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create handleResponse method</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(message) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Refresh your browser, and you should see transcripts showing in your console.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/logs.jpg" alt="Browser console showing one line in German"></p>\n<h2 id="show-transcripts-on-page">Show Transcripts On Page</h2>\n<p>First, create a new <code is:raw>transcripts</code> property in <code is:raw>data</code> with an empty array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">data</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">mediaRecorder</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add this</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">transcripts</span><span style="color: #C9D1D9">: []</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>Then, instead of logging transcripts, add them to this array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.transcripts.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Finally, update your HTML to display items from the array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;!--</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Add</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">looping</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">element</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">--&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;transcript in transcripts&quot;</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9">{ transcript }</span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Your page should look like this once you\u2019ve spoken a couple of phrases:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/display.png" alt="Page showing two lines - each with one line of transcripted German text"></p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>The final code looks like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;transcript in transcripts&quot;</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9">{ transcript }</span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      async </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        const stream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">          .catch(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9">(!MediaRecorder.isTypeSupported(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) return </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        this.mediaRecorder = new </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">, { </span><span style="color: #FFA657">mimeType</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        mediaRecorder: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        socket: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        transcripts: []</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      methods: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.handleResponse</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">              </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">            mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.transcripts.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">          }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This is the most simple implementation with Vue and is written for clarity over conciseness. If you want to learn more about Vue 3, including its setup() function and composables, then Sandra wrote <a href="https://blog.deepgram.com/diving-into-vue-3-getting-started/">an excellent tutorial series on Vue 3</a>.</p>\n<p>If you have questions, please feel free to message us on Twitter, <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Getting Started with Live Transcription and Vue.js", "description": "Learn how to use Deepgram's Speech-to-Text API for fast and accurate live transcripts in your Vue.js applications.", "date": "2022-07-18T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1658067804/blog/2022/07/getting-started-live-transcription-vue/cover.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["websockets", "vuejs"], "seo": { "title": "Getting Started with Live Transcription and Vue.js", "description": "Learn how to use Deepgram's Speech-to-Text API for fast and accurate live transcripts in your Vue.js applications." }, "shorturls": { "share": "https://dpgr.am/e81eaba", "twitter": "https://dpgr.am/eb6c990", "linkedin": "https://dpgr.am/edcdb3d", "reddit": "https://dpgr.am/adf60f5", "facebook": "https://dpgr.am/4db5941" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454106/blog/getting-started-live-transcription-vue/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "setting-up-a-vue-project-with-a-script-include", "text": "Setting Up a Vue Project With a Script Include" }, { "depth": 2, "slug": "get-microphone-data", "text": "Get Microphone Data" }, { "depth": 2, "slug": "connect-to-deepgram", "text": "Connect to Deepgram" }, { "depth": 2, "slug": "send-data-to-deepgram", "text": "Send Data to Deepgram" }, { "depth": 2, "slug": "receive-transcript-results", "text": "Receive Transcript Results" }, { "depth": 2, "slug": "show-transcripts-on-page", "text": "Show Transcripts On Page" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\r\nThis post will cover how to set up Deepgram for live transcriptions in your Vue.js application. We'll set up Deepgram in a single HTML file with the Vue.js `<script>` include and no other dependencies.\r\n\r\n## Before We Start\r\n\r\nYou will need a free [Deepgram API Key](https://console.deepgram.com/signup?jump=keys).\r\n\r\n## Setting Up a Vue Project With a Script Include\r\n\r\nCreate an `index.html` file and open it in a code editor. Set up a Vue project:\r\n\r\n```js\r\n<html>\r\n<head></head>\r\n<body>\r\n  <div id=\"app\">\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.0\"><\/script>\r\n  <script>\r\n    const app = new Vue({\r\n      el: '#app'\r\n    })\r\n  <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\n## Get Microphone Data\r\n\r\nThis code will be written in the `created()` lifecycle method - meaning it will happen immediately.\r\n\r\nFirstly, ask the user for access to their mic:\r\n\r\n```js\r\nconst app = new Vue({\r\n  el: '#app',\r\n  async created() {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .catch(error => alert(error))\r\n  }\r\n})\r\n```\r\n\r\nNext, plug the stream into a MediaRecorder so we can later access the raw data from the accessed microphone:\r\n\r\n```js\r\nconst app = new Vue({\r\n  el: '#app',\r\n  async created() {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .catch(error => alert(error))\r\n\r\n    // Create MediaRecorder\r\n    if(!MediaRecorder.isTypeSupported('audio/webm')) return alert('Unsupported browser')\r\n    this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\r\n  },\r\n  // Store MediaRecorder\r\n  data: {\r\n    mediaRecorder: null\r\n  }\r\n})\r\n```\r\n\r\nRemember that if you are creating Vue components, `data` must be a function that returns an object.\r\n\r\n## Connect to Deepgram\r\n\r\nCreate a button which will begin transcription. Trigger a new `begin()` method with it's clicked:\r\n\r\n```js\r\n<html>\r\n<head></head>\r\n<body>\r\n  <div id=\"app\">\r\n    {/*<!-- Add button -->*/}\r\n    <button @click=\"begin\">Begin transcription</button>\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.0\"><\/script>\r\n  <script>\r\n    const app = new Vue({\r\n      el: '#app',\r\n      async created() {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n          .catch(error => alert(error))\r\n\r\n        if(!MediaRecorder.isTypeSupported('audio/webm')) return alert('Unsupported browser')\r\n        this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\r\n      },\r\n      data: {\r\n        mediaRecorder: null\r\n      },\r\n      // Create begin method\r\n      methods: {\r\n        begin() {\r\n\r\n        }\r\n      }\r\n    })\r\n  <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\nTake a moment to get [a free Deepgram API Key](https://console.deepgram.com/signup?jump=keys) before continuing.\r\n\r\nUse the browser native WebSocket interface to connect to Deepgram's live transcription server. Store the WebSocket instance in `data`:\r\n\r\n```js\r\ndata: {\r\n  mediaRecorder: null,\r\n  // Add socket\r\n  socket: null\r\n},\r\nmethods: {\r\n  begin() {\r\n    const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n    const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n    this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n  }\r\n}\r\n```\r\n\r\nThis WebSocket creates a 2-way connection with Deepgram. See the `language=de` in the URL? That's telling it you'll be speaking German. We have loads of [supported languages](https://developers.deepgram.com/documentation/features/language/) to check out!\r\n\r\n## Send Data to Deepgram\r\n\r\nOnce the WebSocket connection is open, start sending mic data:\r\n\r\n```js\r\nmethods: {\r\n  begin() {\r\n    const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n    const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n    this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n    // Run the startStreaming method when socket is opened\r\n    this.socket.onopen = this.startStreaming\r\n  },\r\n  // Create startStreaming method\r\n  startStreaming() {\r\n    this.mediaRecorder.addEventListener('dataavailable', event => {\r\n      if(event.data.size > 0 && this.socket.readyState == 1) {\r\n        this.socket.send(event.data)\r\n      }\r\n      // Send data every 250ms (.25s)\r\n      mediaRecorder.start(250)\r\n    })\r\n  }\r\n}\r\n```\r\n\r\n## Receive Transcript Results\r\n\r\nYou are currently sending data through our persistent connection to Deepgram every 0.25 seconds. You will receive transcripts back nearly as often - it's time to write the handling code.\r\n\r\n```js\r\nmethods: {\r\n  begin() {\r\n    const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n    const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n    this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n    this.socket.onopen = this.startStreaming\r\n    // Run the handleResponse method when data is received\r\n    this.socket.onmessage = this.handleResponse\r\n  },\r\n  startStreaming() {\r\n    this.mediaRecorder.addEventListener('dataavailable', event => {\r\n      if(event.data.size > 0 && this.socket.readyState == 1) {\r\n        this.socket.send(event.data)\r\n      }\r\n      mediaRecorder.start(250)\r\n    })\r\n  },\r\n  // Create handleResponse method\r\n  handleResponse(message) {\r\n    const received = JSON.parse(message.data)\r\n    const transcript = received.channel.alternatives[0].transcript\r\n    if(transcript) {\r\n      console.log(transcript)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nRefresh your browser, and you should see transcripts showing in your console.\r\n\r\n![Browser console showing one line in German](https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/logs.jpg)\r\n\r\n## Show Transcripts On Page\r\n\r\nFirst, create a new `transcripts` property in `data` with an empty array:\r\n\r\n```js\r\ndata: {\r\n  mediaRecorder: null,\r\n  socket: null,\r\n  // Add this\r\n  transcripts: []\r\n},\r\n```\r\n\r\nThen, instead of logging transcripts, add them to this array:\r\n\r\n```js\r\nif(transcript) {\r\n  this.transcripts.push(transcript)\r\n}\r\n```\r\n\r\nFinally, update your HTML to display items from the array:\r\n\r\n```js\r\n<div id=\"app\">\r\n  <button @click=\"begin\">Begin transcription</button>\r\n  {/*<!-- Add looping element -->*/}\r\n  <p v-for=\"transcript in transcripts\">{{ transcript }}</p>\r\n</div>\r\n```\r\n\r\nYour page should look like this once you've spoken a couple of phrases:\r\n\r\n![Page showing two lines - each with one line of transcripted German text](https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/display.png)\r\n\r\n## Wrapping Up\r\n\r\nThe final code looks like this:\r\n\r\n```js\r\n<html>\r\n<head></head>\r\n<body>\r\n  <div id=\"app\">\r\n    <button @click=\"begin\">Begin transcription</button>\r\n    <p v-for=\"transcript in transcripts\">{{ transcript }}</p>\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.0\"><\/script>\r\n  <script>\r\n    const app = new Vue({\r\n      el: '#app',\r\n      async created() {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n          .catch(error => alert(error))\r\n\r\n        if(!MediaRecorder.isTypeSupported('audio/webm')) return alert('Unsupported browser')\r\n        this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\r\n      },\r\n      data: {\r\n        mediaRecorder: null,\r\n        socket: null,\r\n        transcripts: []\r\n      },\r\n      methods: {\r\n        begin() {\r\n          const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n          const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n          this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n          this.socket.onopen = this.startStreaming\r\n          this.socket.onmessage = this.handleResponse\r\n        },\r\n        startStreaming() {\r\n          this.mediaRecorder.addEventListener('dataavailable', event => {\r\n            if(event.data.size > 0 && this.socket.readyState == 1) {\r\n              this.socket.send(event.data)\r\n            }\r\n            mediaRecorder.start(250)\r\n          })\r\n        },\r\n        handleResponse(message) {\r\n          const received = JSON.parse(message.data)\r\n          const transcript = received.channel.alternatives[0].transcript\r\n          if(transcript) {\r\n            this.transcripts.push(transcript)\r\n          }\r\n        }\r\n      }\r\n    })\r\n  <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\nThis is the most simple implementation with Vue and is written for clarity over conciseness. If you want to learn more about Vue 3, including its setup() function and composables, then Sandra wrote [an excellent tutorial series on Vue 3](https://blog.deepgram.com/diving-into-vue-3-getting-started/).\r\n\r\nIf you have questions, please feel free to message us on Twitter, [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ", "html": '<p>This post will cover how to set up Deepgram for live transcriptions in your Vue.js application. We\u2019ll set up Deepgram in a single HTML file with the Vue.js <code is:raw>&lt;script&gt;</code> include and no other dependencies.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need a free <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a>.</p>\n<h2 id="setting-up-a-vue-project-with-a-script-include">Setting Up a Vue Project With a Script Include</h2>\n<p>Create an <code is:raw>index.html</code> file and open it in a code editor. Set up a Vue project:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="get-microphone-data">Get Microphone Data</h2>\n<p>This code will be written in the <code is:raw>created()</code> lifecycle method - meaning it will happen immediately.</p>\n<p>Firstly, ask the user for access to their mic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Next, plug the stream into a MediaRecorder so we can later access the raw data from the accessed microphone:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Create MediaRecorder</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">MediaRecorder.</span><span style="color: #D2A8FF">isTypeSupported</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Store MediaRecorder</span></span>\n<span class="line"><span style="color: #C9D1D9">  data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Remember that if you are creating Vue components, <code is:raw>data</code> must be a function that returns an object.</p>\n<h2 id="connect-to-deepgram">Connect to Deepgram</h2>\n<p>Create a button which will begin transcription. Trigger a new <code is:raw>begin()</code> method with it\u2019s clicked:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Add button --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      async </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        const stream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">          .catch(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9">(!MediaRecorder.isTypeSupported(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) return </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        this.mediaRecorder = new </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">, { </span><span style="color: #FFA657">mimeType</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        mediaRecorder: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Create begin method</span></span>\n<span class="line"><span style="color: #C9D1D9">      methods: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Take a moment to get <a href="https://console.deepgram.com/signup?jump=keys">a free Deepgram API Key</a> before continuing.</p>\n<p>Use the browser native WebSocket interface to connect to Deepgram\u2019s live transcription server. Store the WebSocket instance in <code is:raw>data</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">data</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">mediaRecorder</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add socket</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This WebSocket creates a 2-way connection with Deepgram. See the <code is:raw>language=de</code> in the URL? That\u2019s telling it you\u2019ll be speaking German. We have loads of <a href="https://developers.deepgram.com/documentation/features/language/">supported languages</a> to check out!</p>\n<h2 id="send-data-to-deepgram">Send Data to Deepgram</h2>\n<p>Once the WebSocket connection is open, start sending mic data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Run the startStreaming method when socket is opened</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create startStreaming method</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Send data every 250ms (.25s)</span></span>\n<span class="line"><span style="color: #C9D1D9">      mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="receive-transcript-results">Receive Transcript Results</h2>\n<p>You are currently sending data through our persistent connection to Deepgram every 0.25 seconds. You will receive transcripts back nearly as often - it\u2019s time to write the handling code.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Run the handleResponse method when data is received</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.handleResponse</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">      mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create handleResponse method</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(message) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Refresh your browser, and you should see transcripts showing in your console.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/logs.jpg" alt="Browser console showing one line in German"></p>\n<h2 id="show-transcripts-on-page">Show Transcripts On Page</h2>\n<p>First, create a new <code is:raw>transcripts</code> property in <code is:raw>data</code> with an empty array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">data</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">mediaRecorder</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add this</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">transcripts</span><span style="color: #C9D1D9">: []</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>Then, instead of logging transcripts, add them to this array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.transcripts.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Finally, update your HTML to display items from the array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;!--</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Add</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">looping</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">element</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">--&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;transcript in transcripts&quot;</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9">{ transcript }</span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Your page should look like this once you\u2019ve spoken a couple of phrases:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/display.png" alt="Page showing two lines - each with one line of transcripted German text"></p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>The final code looks like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;transcript in transcripts&quot;</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9">{ transcript }</span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      async </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        const stream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">          .catch(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9">(!MediaRecorder.isTypeSupported(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) return </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        this.mediaRecorder = new </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">, { </span><span style="color: #FFA657">mimeType</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        mediaRecorder: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        socket: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        transcripts: []</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      methods: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.handleResponse</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">              </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">            mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.transcripts.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">          }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This is the most simple implementation with Vue and is written for clarity over conciseness. If you want to learn more about Vue 3, including its setup() function and composables, then Sandra wrote <a href="https://blog.deepgram.com/diving-into-vue-3-getting-started/">an excellent tutorial series on Vue 3</a>.</p>\n<p>If you have questions, please feel free to message us on Twitter, <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/getting-started-live-transcription-vue/index.md" };
function rawContent() {
  return "\r\nThis post will cover how to set up Deepgram for live transcriptions in your Vue.js application. We'll set up Deepgram in a single HTML file with the Vue.js `<script>` include and no other dependencies.\r\n\r\n## Before We Start\r\n\r\nYou will need a free [Deepgram API Key](https://console.deepgram.com/signup?jump=keys).\r\n\r\n## Setting Up a Vue Project With a Script Include\r\n\r\nCreate an `index.html` file and open it in a code editor. Set up a Vue project:\r\n\r\n```js\r\n<html>\r\n<head></head>\r\n<body>\r\n  <div id=\"app\">\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.0\"><\/script>\r\n  <script>\r\n    const app = new Vue({\r\n      el: '#app'\r\n    })\r\n  <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\n## Get Microphone Data\r\n\r\nThis code will be written in the `created()` lifecycle method - meaning it will happen immediately.\r\n\r\nFirstly, ask the user for access to their mic:\r\n\r\n```js\r\nconst app = new Vue({\r\n  el: '#app',\r\n  async created() {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .catch(error => alert(error))\r\n  }\r\n})\r\n```\r\n\r\nNext, plug the stream into a MediaRecorder so we can later access the raw data from the accessed microphone:\r\n\r\n```js\r\nconst app = new Vue({\r\n  el: '#app',\r\n  async created() {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .catch(error => alert(error))\r\n\r\n    // Create MediaRecorder\r\n    if(!MediaRecorder.isTypeSupported('audio/webm')) return alert('Unsupported browser')\r\n    this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\r\n  },\r\n  // Store MediaRecorder\r\n  data: {\r\n    mediaRecorder: null\r\n  }\r\n})\r\n```\r\n\r\nRemember that if you are creating Vue components, `data` must be a function that returns an object.\r\n\r\n## Connect to Deepgram\r\n\r\nCreate a button which will begin transcription. Trigger a new `begin()` method with it's clicked:\r\n\r\n```js\r\n<html>\r\n<head></head>\r\n<body>\r\n  <div id=\"app\">\r\n    {/*<!-- Add button -->*/}\r\n    <button @click=\"begin\">Begin transcription</button>\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.0\"><\/script>\r\n  <script>\r\n    const app = new Vue({\r\n      el: '#app',\r\n      async created() {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n          .catch(error => alert(error))\r\n\r\n        if(!MediaRecorder.isTypeSupported('audio/webm')) return alert('Unsupported browser')\r\n        this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\r\n      },\r\n      data: {\r\n        mediaRecorder: null\r\n      },\r\n      // Create begin method\r\n      methods: {\r\n        begin() {\r\n\r\n        }\r\n      }\r\n    })\r\n  <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\nTake a moment to get [a free Deepgram API Key](https://console.deepgram.com/signup?jump=keys) before continuing.\r\n\r\nUse the browser native WebSocket interface to connect to Deepgram's live transcription server. Store the WebSocket instance in `data`:\r\n\r\n```js\r\ndata: {\r\n  mediaRecorder: null,\r\n  // Add socket\r\n  socket: null\r\n},\r\nmethods: {\r\n  begin() {\r\n    const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n    const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n    this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n  }\r\n}\r\n```\r\n\r\nThis WebSocket creates a 2-way connection with Deepgram. See the `language=de` in the URL? That's telling it you'll be speaking German. We have loads of [supported languages](https://developers.deepgram.com/documentation/features/language/) to check out!\r\n\r\n## Send Data to Deepgram\r\n\r\nOnce the WebSocket connection is open, start sending mic data:\r\n\r\n```js\r\nmethods: {\r\n  begin() {\r\n    const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n    const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n    this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n    // Run the startStreaming method when socket is opened\r\n    this.socket.onopen = this.startStreaming\r\n  },\r\n  // Create startStreaming method\r\n  startStreaming() {\r\n    this.mediaRecorder.addEventListener('dataavailable', event => {\r\n      if(event.data.size > 0 && this.socket.readyState == 1) {\r\n        this.socket.send(event.data)\r\n      }\r\n      // Send data every 250ms (.25s)\r\n      mediaRecorder.start(250)\r\n    })\r\n  }\r\n}\r\n```\r\n\r\n## Receive Transcript Results\r\n\r\nYou are currently sending data through our persistent connection to Deepgram every 0.25 seconds. You will receive transcripts back nearly as often - it's time to write the handling code.\r\n\r\n```js\r\nmethods: {\r\n  begin() {\r\n    const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n    const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n    this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n    this.socket.onopen = this.startStreaming\r\n    // Run the handleResponse method when data is received\r\n    this.socket.onmessage = this.handleResponse\r\n  },\r\n  startStreaming() {\r\n    this.mediaRecorder.addEventListener('dataavailable', event => {\r\n      if(event.data.size > 0 && this.socket.readyState == 1) {\r\n        this.socket.send(event.data)\r\n      }\r\n      mediaRecorder.start(250)\r\n    })\r\n  },\r\n  // Create handleResponse method\r\n  handleResponse(message) {\r\n    const received = JSON.parse(message.data)\r\n    const transcript = received.channel.alternatives[0].transcript\r\n    if(transcript) {\r\n      console.log(transcript)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nRefresh your browser, and you should see transcripts showing in your console.\r\n\r\n![Browser console showing one line in German](https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/logs.jpg)\r\n\r\n## Show Transcripts On Page\r\n\r\nFirst, create a new `transcripts` property in `data` with an empty array:\r\n\r\n```js\r\ndata: {\r\n  mediaRecorder: null,\r\n  socket: null,\r\n  // Add this\r\n  transcripts: []\r\n},\r\n```\r\n\r\nThen, instead of logging transcripts, add them to this array:\r\n\r\n```js\r\nif(transcript) {\r\n  this.transcripts.push(transcript)\r\n}\r\n```\r\n\r\nFinally, update your HTML to display items from the array:\r\n\r\n```js\r\n<div id=\"app\">\r\n  <button @click=\"begin\">Begin transcription</button>\r\n  {/*<!-- Add looping element -->*/}\r\n  <p v-for=\"transcript in transcripts\">{{ transcript }}</p>\r\n</div>\r\n```\r\n\r\nYour page should look like this once you've spoken a couple of phrases:\r\n\r\n![Page showing two lines - each with one line of transcripted German text](https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/display.png)\r\n\r\n## Wrapping Up\r\n\r\nThe final code looks like this:\r\n\r\n```js\r\n<html>\r\n<head></head>\r\n<body>\r\n  <div id=\"app\">\r\n    <button @click=\"begin\">Begin transcription</button>\r\n    <p v-for=\"transcript in transcripts\">{{ transcript }}</p>\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.0\"><\/script>\r\n  <script>\r\n    const app = new Vue({\r\n      el: '#app',\r\n      async created() {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n          .catch(error => alert(error))\r\n\r\n        if(!MediaRecorder.isTypeSupported('audio/webm')) return alert('Unsupported browser')\r\n        this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\r\n      },\r\n      data: {\r\n        mediaRecorder: null,\r\n        socket: null,\r\n        transcripts: []\r\n      },\r\n      methods: {\r\n        begin() {\r\n          const DG_URL = 'wss://api.deepgram.com/v1/listen?language=de'\r\n          const DG_KEY = 'YOUR_DEEPGRAM_API_KEY'\r\n          this.socket = new WebSocket(DG_URL, ['token', DG_KEY])\r\n          this.socket.onopen = this.startStreaming\r\n          this.socket.onmessage = this.handleResponse\r\n        },\r\n        startStreaming() {\r\n          this.mediaRecorder.addEventListener('dataavailable', event => {\r\n            if(event.data.size > 0 && this.socket.readyState == 1) {\r\n              this.socket.send(event.data)\r\n            }\r\n            mediaRecorder.start(250)\r\n          })\r\n        },\r\n        handleResponse(message) {\r\n          const received = JSON.parse(message.data)\r\n          const transcript = received.channel.alternatives[0].transcript\r\n          if(transcript) {\r\n            this.transcripts.push(transcript)\r\n          }\r\n        }\r\n      }\r\n    })\r\n  <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\nThis is the most simple implementation with Vue and is written for clarity over conciseness. If you want to learn more about Vue 3, including its setup() function and composables, then Sandra wrote [an excellent tutorial series on Vue 3](https://blog.deepgram.com/diving-into-vue-3-getting-started/).\r\n\r\nIf you have questions, please feel free to message us on Twitter, [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ";
}
function compiledContent() {
  return '<p>This post will cover how to set up Deepgram for live transcriptions in your Vue.js application. We\u2019ll set up Deepgram in a single HTML file with the Vue.js <code is:raw>&lt;script&gt;</code> include and no other dependencies.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need a free <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a>.</p>\n<h2 id="setting-up-a-vue-project-with-a-script-include">Setting Up a Vue Project With a Script Include</h2>\n<p>Create an <code is:raw>index.html</code> file and open it in a code editor. Set up a Vue project:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="get-microphone-data">Get Microphone Data</h2>\n<p>This code will be written in the <code is:raw>created()</code> lifecycle method - meaning it will happen immediately.</p>\n<p>Firstly, ask the user for access to their mic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Next, plug the stream into a MediaRecorder so we can later access the raw data from the accessed microphone:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Create MediaRecorder</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">MediaRecorder.</span><span style="color: #D2A8FF">isTypeSupported</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Store MediaRecorder</span></span>\n<span class="line"><span style="color: #C9D1D9">  data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Remember that if you are creating Vue components, <code is:raw>data</code> must be a function that returns an object.</p>\n<h2 id="connect-to-deepgram">Connect to Deepgram</h2>\n<p>Create a button which will begin transcription. Trigger a new <code is:raw>begin()</code> method with it\u2019s clicked:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Add button --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      async </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        const stream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">          .catch(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9">(!MediaRecorder.isTypeSupported(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) return </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        this.mediaRecorder = new </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">, { </span><span style="color: #FFA657">mimeType</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        mediaRecorder: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Create begin method</span></span>\n<span class="line"><span style="color: #C9D1D9">      methods: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Take a moment to get <a href="https://console.deepgram.com/signup?jump=keys">a free Deepgram API Key</a> before continuing.</p>\n<p>Use the browser native WebSocket interface to connect to Deepgram\u2019s live transcription server. Store the WebSocket instance in <code is:raw>data</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">data</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">mediaRecorder</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add socket</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span>\n<span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This WebSocket creates a 2-way connection with Deepgram. See the <code is:raw>language=de</code> in the URL? That\u2019s telling it you\u2019ll be speaking German. We have loads of <a href="https://developers.deepgram.com/documentation/features/language/">supported languages</a> to check out!</p>\n<h2 id="send-data-to-deepgram">Send Data to Deepgram</h2>\n<p>Once the WebSocket connection is open, start sending mic data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Run the startStreaming method when socket is opened</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create startStreaming method</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Send data every 250ms (.25s)</span></span>\n<span class="line"><span style="color: #C9D1D9">      mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="receive-transcript-results">Receive Transcript Results</h2>\n<p>You are currently sending data through our persistent connection to Deepgram every 0.25 seconds. You will receive transcripts back nearly as often - it\u2019s time to write the handling code.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Run the handleResponse method when data is received</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.handleResponse</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">      mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create handleResponse method</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(message) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Refresh your browser, and you should see transcripts showing in your console.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/logs.jpg" alt="Browser console showing one line in German"></p>\n<h2 id="show-transcripts-on-page">Show Transcripts On Page</h2>\n<p>First, create a new <code is:raw>transcripts</code> property in <code is:raw>data</code> with an empty array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">data</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">mediaRecorder</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add this</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">transcripts</span><span style="color: #C9D1D9">: []</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>Then, instead of logging transcripts, add them to this array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.transcripts.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Finally, update your HTML to display items from the array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;!--</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Add</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">looping</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">element</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">--&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;transcript in transcripts&quot;</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9">{ transcript }</span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Your page should look like this once you\u2019ve spoken a couple of phrases:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/display.png" alt="Page showing two lines - each with one line of transcripted German text"></p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>The final code looks like this:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;transcript in transcripts&quot;</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9">{ transcript }</span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      async </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">        const stream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">          .catch(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9">(!MediaRecorder.isTypeSupported(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) return </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        this.mediaRecorder = new </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">, { </span><span style="color: #FFA657">mimeType</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      data: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        mediaRecorder: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        socket: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        transcripts: []</span></span>\n<span class="line"><span style="color: #C9D1D9">      },</span></span>\n<span class="line"><span style="color: #C9D1D9">      methods: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.handleResponse</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">              </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">            }</span></span>\n<span class="line"><span style="color: #C9D1D9">            mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">        },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.transcripts.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">          }</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>This is the most simple implementation with Vue and is written for clarity over conciseness. If you want to learn more about Vue 3, including its setup() function and composables, then Sandra wrote <a href="https://blog.deepgram.com/diving-into-vue-3-getting-started/">an excellent tutorial series on Vue 3</a>.</p>\n<p>If you have questions, please feel free to message us on Twitter, <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/getting-started-live-transcription-vue/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>This post will cover how to set up Deepgram for live transcriptions in your Vue.js application. We’ll set up Deepgram in a single HTML file with the Vue.js <code>&lt;script&gt;</code> include and no other dependencies.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need a free <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a>.</p>
<h2 id="setting-up-a-vue-project-with-a-script-include">Setting Up a Vue Project With a Script Include</h2>
<p>Create an <code>index.html</code> file and open it in a code editor. Set up a Vue project:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="get-microphone-data">Get Microphone Data</h2>
<p>This code will be written in the <code>created()</code> lifecycle method - meaning it will happen immediately.</p>
<p>Firstly, ask the user for access to their mic:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">      .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Next, plug the stream into a MediaRecorder so we can later access the raw data from the accessed microphone:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Vue</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">      .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Create MediaRecorder</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">MediaRecorder.</span><span style="color: #D2A8FF">isTypeSupported</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Store MediaRecorder</span></span>
<span class="line"><span style="color: #C9D1D9">  data: {</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder: </span><span style="color: #79C0FF">null</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Remember that if you are creating Vue components, <code>data</code> must be a function that returns an object.</p>
<h2 id="connect-to-deepgram">Connect to Deepgram</h2>
<p>Create a button which will begin transcription. Trigger a new <code>begin()</code> method with it’s clicked:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;!-- Add button --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      async </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        const stream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">          .catch(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9">(!MediaRecorder.isTypeSupported(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) return </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        this.mediaRecorder = new </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">, { </span><span style="color: #FFA657">mimeType</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">      },</span></span>
<span class="line"><span style="color: #C9D1D9">      data: {</span></span>
<span class="line"><span style="color: #C9D1D9">        mediaRecorder: </span><span style="color: #79C0FF">null</span></span>
<span class="line"><span style="color: #C9D1D9">      },</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Create begin method</span></span>
<span class="line"><span style="color: #C9D1D9">      methods: {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Take a moment to get <a href="https://console.deepgram.com/signup?jump=keys">a free Deepgram API Key</a> before continuing.</p>
<p>Use the browser native WebSocket interface to connect to Deepgram’s live transcription server. Store the WebSocket instance in <code>data</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">data</span><span style="color: #C9D1D9">: {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">mediaRecorder</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add socket</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span></span>
<span class="line"><span style="color: #C9D1D9">},</span></span>
<span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This WebSocket creates a 2-way connection with Deepgram. See the <code>language=de</code> in the URL? That’s telling it you’ll be speaking German. We have loads of <a href="https://developers.deepgram.com/documentation/features/language/">supported languages</a> to check out!</p>
<h2 id="send-data-to-deepgram">Send Data to Deepgram</h2>
<p>Once the WebSocket connection is open, start sending mic data:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Run the startStreaming method when socket is opened</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create startStreaming method</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Send data every 250ms (.25s)</span></span>
<span class="line"><span style="color: #C9D1D9">      mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h2 id="receive-transcript-results">Receive Transcript Results</h2>
<p>You are currently sending data through our persistent connection to Deepgram every 0.25 seconds. You will receive transcripts back nearly as often - it’s time to write the handling code.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">methods</span><span style="color: #C9D1D9">: {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Run the handleResponse method when data is received</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.handleResponse</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">      mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create handleResponse method</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(message) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>
<span class="line"><span style="color: #C9D1D9">      console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Refresh your browser, and you should see transcripts showing in your console.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/logs.jpg" alt="Browser console showing one line in German"></p>
<h2 id="show-transcripts-on-page">Show Transcripts On Page</h2>
<p>First, create a new <code>transcripts</code> property in <code>data</code> with an empty array:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FFA657">data</span><span style="color: #C9D1D9">: {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">mediaRecorder</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add this</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA657">transcripts</span><span style="color: #C9D1D9">: []</span></span>
<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>
<p>Then, instead of logging transcripts, add them to this array:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.transcripts.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Finally, update your HTML to display items from the array:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;!--</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Add</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">looping</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">element</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">--&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;transcript in transcripts&quot;</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9">{ transcript }</span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Your page should look like this once you’ve spoken a couple of phrases:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657299918/blog/2022/07/getting-started-live-transcription-vue/display.png" alt="Page showing two lines - each with one line of transcripted German text"></p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>The final code looks like this:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;app&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;begin&quot;&gt;Begin</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">transcription&lt;/button&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">v-for</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;transcript in transcripts&quot;</span><span style="color: #C9D1D9">&gt;</span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9">{ transcript }</span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.0&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    const app = new Vue(</span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">      el: </span><span style="color: #A5D6FF">&#39;#app&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      async </span><span style="color: #D2A8FF">created</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">        const stream </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">          .catch(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">if</span><span style="color: #C9D1D9">(!MediaRecorder.isTypeSupported(</span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9">)) return </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Unsupported browser&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        this.mediaRecorder = new </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">, { </span><span style="color: #FFA657">mimeType</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">      },</span></span>
<span class="line"><span style="color: #C9D1D9">      data: {</span></span>
<span class="line"><span style="color: #C9D1D9">        mediaRecorder: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        socket: </span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">        transcripts: []</span></span>
<span class="line"><span style="color: #C9D1D9">      },</span></span>
<span class="line"><span style="color: #C9D1D9">      methods: {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">begin</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?language=de&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">DG_URL</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.startStreaming</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.handleResponse</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">startStreaming</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">              </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">            }</span></span>
<span class="line"><span style="color: #C9D1D9">            mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">          })</span></span>
<span class="line"><span style="color: #C9D1D9">        },</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">received</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>
<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #79C0FF">this</span><span style="color: #C9D1D9">.transcripts.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">          }</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>This is the most simple implementation with Vue and is written for clarity over conciseness. If you want to learn more about Vue 3, including its setup() function and composables, then Sandra wrote <a href="https://blog.deepgram.com/diving-into-vue-3-getting-started/">an excellent tutorial series on Vue 3</a>.</p>
<p>If you have questions, please feel free to message us on Twitter, <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/getting-started-live-transcription-vue/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
