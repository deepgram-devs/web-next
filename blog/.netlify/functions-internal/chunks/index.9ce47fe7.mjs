import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "the-manifest", "text": "The Manifest" }, { "depth": 2, "slug": "creating-a-popup", "text": "Creating a Popup" }, { "depth": 2, "slug": "transcribing-tab-audio", "text": "Transcribing Tab Audio" }, { "depth": 2, "slug": "passing-data-from-content-script-to-popup", "text": "Passing Data From Content Script to Popup" }, { "depth": 2, "slug": "stopping-transcription", "text": "Stopping Transcription" }, { "depth": 2, "slug": "creating-an-options-page", "text": "Creating an Options Page" }, { "depth": 2, "slug": "accessing-browser-tab-audio-and-microphone", "text": "Accessing Browser Tab Audio and Microphone" }, { "depth": 2, "slug": "next-steps", "text": "Next Steps" }], "source": "\nChances are you have installed at least one browser extension before. With over 2.5 billion (yes, with a b) global users of Chrome, it's an excellent platform to build and release apps on. In this tutorial, you will create a Chrome extension that captures browser tab audio and transcribes it with Deepgram.\n\n![Transcripts are showing in the popup](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png)\n\n## The Manifest\n\nCreate a `manifest.json` file. This file contains critical information about our extension, which is required by the browser to load it (and publish it to the Chrome Web Store). Add the following to it:\n\n```json\n{\n    \"name\": \"Transcribe Tab Audio\",\n    \"version\": \"1.0\",\n    \"manifest_version\": 3,\n    \"host_permissions\": [\"*://*/\"],\n    \"permissions\": [\"storage\", \"tabs\", \"scripting\"]\n}\n```\n\nThe `host_permissions` specify which webpages this extension will be active on - the `*` matches everything, so this will work on every page. You can alter this if you only want it to work on specific pages or domains.\n\nThe `permissions` specified are also needed for this project - `\"storage\"` allows the extension to store small amounts of data on the machine, `\"tabs\"` provides access to all data fields regarding tabs in the browser, and `\"scripting\"` allows us to execute JavaScript files - more on this later.\n\nAt this point, you actually have a valid Chrome Extension - let's load it in. Head to `chrome://extensions`, toggle Developer Mode on and click *Load Unpacked*. Select the folder with your `manifest.json` file, and you should see the extension appear in your browser.\n\nIt's a bit rubbish right now\u2014time to fix that.\n\n## Creating a Popup\n\nAn extension popup is the small pane that appears when you click on the extension icon in your address bar.\n\nCreate a `popup.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body style=\"padding: 1em;\">\n    <button id=\"start\">Start transcription</button>\n    <p id=\"transcript\"></p>\n    <script src=\"popup.js\"><\/script>\n  </body>\n</html>\n```\n\nIn your `manifest.json` file, specify the popup file by adding this property:\n\n```json\n\"action\": {\n    \"default_popup\": \"popup.html\"\n}\n```\n\n![The extension icon is clicked, and a small white popup shows one button reading 'start transcription'](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/popup-hello-world.png)\n\nYou may have noticed that the linked JavaScript file does not yet exist. Before we create it, it's important to note that as soon as the popup is closed, it's as if that page no longer exists, and the code will cease to run. For this reason, the extension must inject some code to run in the current webpage. This means the code will continue to run even once the popup is closed.\n\nWith this in mind, create a `popup.js` file:\n\n```js\ndocument.getElementById('start').addEventListener('click', async () => {\n    const tab = await getCurrentTab()\n    if(!tab) return alert('Require an active tab')\n    chrome.scripting.executeScript({\n        target: { tabId: tab.id },\n        files: ['main.js']\n    })\n})\n\nasync function getCurrentTab() {\n    const queryOptions = { active: true, lastFocusedWindow: true }\n    const [tab] = await chrome.tabs.query(queryOptions)\n    return tab\n}\n```\n\nWhen the start button is clicked, it will get the active tab and inject a `main.js` file. Go and create one:\n\n```js\nalert('This is an injected script!')\n```\n\nOpen the extension and press the button. You should see the alert! Delete the alert before moving on.\n\n## Transcribing Tab Audio\n\nIn your `main.js` file, ask for access to a user's display, check it has audio attached, and plug it into a MediaRecorder:\n\n```js\nnavigator.mediaDevices.getDisplayMedia({ video: true, audio: true }).then(stream => {\n    if(stream.getAudioTracks().length == 0) return alert('You must share your tab with audio. Refresh the page.')\n    const recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\n\n    // Further code here\n})\n```\n\nTry it out. When you share a tab, ensure you are also sharing the tab audio. If not, we've set up an alert to show the error and stop further code from running.\n\n![A popup shows a screen scaring dialog. A chrome tab is selected, and a big red arrow is pointing to a checked checkbox reading 'share tab audio'.](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/share-audio.png)\n\nConnect to Deepgram using a WebSocket and, as soon as the connection is open, begin sending tab audio data:\n\n```js\nsocket = new WebSocket('wss://api.deepgram.com/v1/listen?tier=enhanced', ['token', 'YOUR_DEEPGRAM_API_KEY'])\n\nrecorder.addEventListener('dataavailable', evt => {\n    if(evt.data.size > 0 && socket.readyState == 1) socket.send(evt.data)\n})\n\nsocket.onopen = () => { recorder.start(250) }\n\n// Further code here\n```\n\nNote that the `socket` is being placed in global scope (shown by the lack of a `var`, `let`, or `const` keyword) so we can later close the connection.\n\nThen, listen for Deepgram's returned transcripts:\n\n```js\nsocket.onmessage = msg => {\n    const { transcript } = JSON.parse(msg.data).channel.alternatives[0]\n    if(transcript) {\n        console.log(transcript)\n    }\n}\n```\n\nGo to a tab with audio, start transcribing and look in your browser developer tools.\n\n![Several logs to the console with transcripts](https://res.cloudinary.com/deepgram/image/upload/v1657316997/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/logging-transcripts.png)\n\nNice! It's certainly coming together.\n\n## Passing Data From Content Script to Popup\n\nYou can't expect users to open up their browser console to see transcripts. You can send 'messages' from the injected script to the popup, but if the popup is closed, it won't be received. So, here's the plan:\n\n1.  When a new transcript is available, put it in chrome storage.\n2.  Send a message from the injected script to the popup to say there's a new transcript available.\n3.  If the popup is open, display the latest transcript from storage.\n4.  When the popup opens, get the latest transcript (even if messages are missed, this will get us up to date).\n\n[Chrome Storage](https://developer.chrome.com/docs/extensions/reference/storage/) is an extension-specific API that acts similarly to localStorage, but is more specialized towards the needs of extensions and may be synced using Chrome Sync (this extension won't be).\n\nAt the very top of `main.js`, above all other code, create a new transcript key in Chrome storage and set the initial value to an empty string:\n\n```js\nchrome.storage.local.set({ transcript: '' })\n```\n\nReplace `console.log(transcript)` with:\n\n```js\nchrome.storage.local.get('transcript', data => {\n    chrome.storage.local.set({\n      transcript: data.transcript += ' ' + transcript\n    })\n\n    // Throws error when popup is closed, so this swallows the errors with catch.\n    chrome.runtime.sendMessage({\n      message: 'transcriptavailable'\n    }).catch(err => ({}))\n})\n```\n\nThis gets the existing transcript and adds the new transcript to the end of it. Then, a message is sent with the value 'transcriptavailable,' which we can now listen for in `popup.js`.\n\nAt the bottom of `popup.js`:\n\n```js\nchrome.runtime.onMessage.addListener(({ message }) => {\n    if(message == 'transcriptavailable') {\n        showLatestTranscript()\n    }\n})\n\nfunction showLatestTranscript() {\n    chrome.storage.local.get('transcript', ({ transcript }) => {\n        document.getElementById('transcript').innerHTML = transcript\n    })\n}\n```\n\nAlso, get the latest transcript at the very top of `popup.js`, above all other code:\n\n```js\nshowLatestTranscript()\n```\n\n![Transcripts are showing in the popup](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png)\n\n## Stopping Transcription\n\nAdd a button, just below the start button, to `popup.html`:\n\n```html\n<button id=\"stop\">Stop transcription</button>\n```\n\nWhen the button is pressed, send a message back to the injected script. In `popup.js`:\n\n```js\ndocument.getElementById('stop').addEventListener('click', async () => {\n    const tab = await getCurrentTab()\n    if(!tab) return alert('Require an active tab')\n    chrome.tabs.sendMessage(tab.id, { message: 'stop' })\n})\n```\n\nAt the very bottom of `main.js`, below all other code, receive the message and close the WebSocket connection to Deepgram:\n\n```js\nchrome.runtime.onMessage.addListener(({ message }) => {\n    if(message == 'stop') {\n        socket.close()\n        alert('Transcription ended')\n    }\n})\n```\n\nExcellent.\n\n## Creating an Options Page\n\nRight now, your Deepgram API Key is coded right into the application. Next, you will build an options page for the user to enter their key, save it to Chrome storage, and use that value when connecting to Deepgram.\n\nIn `manifest.json`, add the following property:\n\n```js\n\"options_page\": \"options.html\"\n```\n\nCreate and open an `options.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Provide your Deepgram API Key</h1>\n\n    <input type=\"text\" id=\"api\">\n    <button>Save</button>\n\n    <script src=\"options.js\"><\/script>\n  </body>\n</html>\n```\n\nCreate and open an `options.js` file:\n\n```js\nconst api = document.getElementById('api')\nconst button = document.querySelector('button')\n\n// If it exists, load it in\nchrome.storage.local.get('key', ({ key }) => {\n  if(key) api.value = key\n})\n\nbutton.addEventListener('click', () => {\n  const key = api.value\n  chrome.storage.local.set({ key }, () => {\n    alert('Deepgram API Key Set')\n  })\n})\n```\n\nTime to use the key. At the top of `main.js`, above all other code:\n\n```js\nlet apiKey\nchrome.storage.local.get('key', ({ key }) => apiKey = key)\n```\n\nAfter this, `apiKey` will either be `undefined` or be a string with the API Key.\n\nReplace the following in `main.js`:\n\n```js\nsocket = new WebSocket('wss://api.deepgram.com/v1/listen?tier=enhanced', ['token', 'YOUR_DEEPGRAM_API_KEY'])\n\n// Replace with \u{1F447}\n\nif(!apiKey) return alert('You must provide a Deepgram API Key in the options page.')\nsocket = new WebSocket('wss://api.deepgram.com/v1/listen?tier=enhanced', ['token', apiKey])\n```\n\nRight-click the extension and click *Options* to open the new page. Save your Deepgram API Key, and the extension should still work.\n\n## Accessing Browser Tab Audio and Microphone\n\nA hypothetical situation - you want to transcribe a browser-based video call with this extension. Everyone's voice is transcribed, except yours - this is because your audio doesn't come through the tab (or you would hear yourself!), so let's alter this extension to allow for both your mic and tab audio to be transcribed together.\n\nIf you only want to transcribe tab audio, skip to the end.\n\nAt the moment, in `main.js`, you are requesting a user display, checking there is audio, and piping the resulting stream into a MediaRecorder. Now, we must:\n\n1.  Get access to a user display and check there if is audio.\n2.  Get access to a user audio device (microphone).\n3.  Create a new, empty `AudioContext`.\n4.  Mix the two audio sources together as sources in the single `AudioContext`.\n5.  Create a MediaRecorder with the `AudioContext`, now containing two sources.\n\nAt the very bottom of main.js, below all other code:\n\n```js\n// https://stackoverflow.com/a/47071576\nfunction mix(audioContext, streams) {\n    const dest = audioContext.createMediaStreamDestination()\n    streams.forEach(stream => {\n        const source = audioContext.createMediaStreamSource(stream)\n        source.connect(dest)\n    })\n    return dest.stream\n}\n```\n\nReplace the following in `main.js`:\n\n```js\nconst recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\n\n// Replace with \u{1F447}\n\nconst micStream = await navigator.mediaDevices.getUserMedia({ audio: true })\nconst audioContext = new AudioContext()\nconst mixed = mix(audioContext, [stream, micStream])\nconst recorder = new MediaRecorder(mixed, { mimeType: 'audio/webm' })\n```\n\nAdd the `async` keyword just before `stream` in the `.then()` function:\n\n```js\nnavigator.mediaDevices.getDisplayMedia({ video: true, audio: true }).then(await stream => {\n```\n\nBoom. Done.\n\n## Next Steps\n\nThere's so much you can do to improve your Chrome extension - make it look nicer with some CSS, change how you display transcripts or alter the extension icon when it is recording. You may also consider using Deepgram features such as [diarization](https://developers.deepgram.com/documentation/features/diarize/) to detect different speakers and display them differently.\n\nYou can find the full finished code for this project on GitHub at [deepgram-devs/transcription-chrome-extension](https://github.com/deepgram-devs/transcription-chrome-extension). As ever, if you have any questions, please feel free to reach out on Twitter (we are [@DeepgramDevs](https://twitter.com/DeepgramDevs)).", "html": '<p>Chances are you have installed at least one browser extension before. With over 2.5 billion (yes, with a b) global users of Chrome, it\u2019s an excellent platform to build and release apps on. In this tutorial, you will create a Chrome extension that captures browser tab audio and transcribes it with Deepgram.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png" alt="Transcripts are showing in the popup"></p>\n<h2 id="the-manifest">The Manifest</h2>\n<p>Create a <code is:raw>manifest.json</code> file. This file contains critical information about our extension, which is required by the browser to load it (and publish it to the Chrome Web Store). Add the following to it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Transcribe Tab Audio&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;1.0&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;manifest_version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;host_permissions&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;*://*/&quot;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;permissions&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;storage&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;tabs&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;scripting&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The <code is:raw>host_permissions</code> specify which webpages this extension will be active on - the <code is:raw>*</code> matches everything, so this will work on every page. You can alter this if you only want it to work on specific pages or domains.</p>\n<p>The <code is:raw>permissions</code> specified are also needed for this project - <code is:raw>"storage"</code> allows the extension to store small amounts of data on the machine, <code is:raw>"tabs"</code> provides access to all data fields regarding tabs in the browser, and <code is:raw>"scripting"</code> allows us to execute JavaScript files - more on this later.</p>\n<p>At this point, you actually have a valid Chrome Extension - let\u2019s load it in. Head to <code is:raw>chrome://extensions</code>, toggle Developer Mode on and click <em>Load Unpacked</em>. Select the folder with your <code is:raw>manifest.json</code> file, and you should see the extension appear in your browser.</p>\n<p>It\u2019s a bit rubbish right now\u2014time to fix that.</p>\n<h2 id="creating-a-popup">Creating a Popup</h2>\n<p>An extension popup is the small pane that appears when you click on the extension icon in your address bar.</p>\n<p>Create a <code is:raw>popup.html</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding: 1em;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">&gt;Start transcription&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;popup.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In your <code is:raw>manifest.json</code> file, specify the popup file by adding this property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;default_popup&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;popup.html&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/popup-hello-world.png" alt="The extension icon is clicked, and a small white popup shows one button reading &#x27;start transcription&#x27;"></p>\n<p>You may have noticed that the linked JavaScript file does not yet exist. Before we create it, it\u2019s important to note that as soon as the popup is closed, it\u2019s as if that page no longer exists, and the code will cease to run. For this reason, the extension must inject some code to run in the current webpage. This means the code will continue to run even once the popup is closed.</p>\n<p>With this in mind, create a <code is:raw>popup.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;start&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">tab) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Require an active tab&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.scripting.</span><span style="color: #D2A8FF">executeScript</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        target: { tabId: tab.id },</span></span>\n<span class="line"><span style="color: #C9D1D9">        files: [</span><span style="color: #A5D6FF">&#39;main.js&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">queryOptions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { active: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, lastFocusedWindow: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> chrome.tabs.</span><span style="color: #D2A8FF">query</span><span style="color: #C9D1D9">(queryOptions)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> tab</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>When the start button is clicked, it will get the active tab and inject a <code is:raw>main.js</code> file. Go and create one:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;This is an injected script!&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Open the extension and press the button. You should see the alert! Delete the alert before moving on.</p>\n<h2 id="transcribing-tab-audio">Transcribing Tab Audio</h2>\n<p>In your <code is:raw>main.js</code> file, ask for access to a user\u2019s display, check it has audio attached, and plug it into a MediaRecorder:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getDisplayMedia</span><span style="color: #C9D1D9">({ video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(stream.</span><span style="color: #D2A8FF">getAudioTracks</span><span style="color: #C9D1D9">().</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must share your tab with audio. Refresh the page.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Try it out. When you share a tab, ensure you are also sharing the tab audio. If not, we\u2019ve set up an alert to show the error and stop further code from running.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/share-audio.png" alt="A popup shows a screen scaring dialog. A chrome tab is selected, and a big red arrow is pointing to a checked checkbox reading &#x27;share tab audio&#x27;."></p>\n<p>Connect to Deepgram using a WebSocket and, as soon as the connection is open, begin sending tab audio data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">recorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">evt</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(evt.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(evt.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> { recorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">) }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>\n<p>Note that the <code is:raw>socket</code> is being placed in global scope (shown by the lack of a <code is:raw>var</code>, <code is:raw>let</code>, or <code is:raw>const</code> keyword) so we can later close the connection.</p>\n<p>Then, listen for Deepgram\u2019s returned transcripts:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">msg</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(msg.data).channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Go to a tab with audio, start transcribing and look in your browser developer tools.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316997/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/logging-transcripts.png" alt="Several logs to the console with transcripts"></p>\n<p>Nice! It\u2019s certainly coming together.</p>\n<h2 id="passing-data-from-content-script-to-popup">Passing Data From Content Script to Popup</h2>\n<p>You can\u2019t expect users to open up their browser console to see transcripts. You can send \u2018messages\u2019 from the injected script to the popup, but if the popup is closed, it won\u2019t be received. So, here\u2019s the plan:</p>\n<ol>\n<li>When a new transcript is available, put it in chrome storage.</li>\n<li>Send a message from the injected script to the popup to say there\u2019s a new transcript available.</li>\n<li>If the popup is open, display the latest transcript from storage.</li>\n<li>When the popup opens, get the latest transcript (even if messages are missed, this will get us up to date).</li>\n</ol>\n<p><a href="https://developer.chrome.com/docs/extensions/reference/storage/">Chrome Storage</a> is an extension-specific API that acts similarly to localStorage, but is more specialized towards the needs of extensions and may be synced using Chrome Sync (this extension won\u2019t be).</p>\n<p>At the very top of <code is:raw>main.js</code>, above all other code, create a new transcript key in Chrome storage and set the initial value to an empty string:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({ transcript: </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>Replace <code is:raw>console.log(transcript)</code> with:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">      transcript: data.transcript </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Throws error when popup is closed, so this swallows the errors with catch.</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.runtime.</span><span style="color: #D2A8FF">sendMessage</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">      message: </span><span style="color: #A5D6FF">&#39;transcriptavailable&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }).</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({}))</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This gets the existing transcript and adds the new transcript to the end of it. Then, a message is sent with the value \u2018transcriptavailable,\u2019 which we can now listen for in <code is:raw>popup.js</code>.</p>\n<p>At the bottom of <code is:raw>popup.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.runtime.onMessage.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(({ </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(message </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;transcriptavailable&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">).innerHTML </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Also, get the latest transcript at the very top of <code is:raw>popup.js</code>, above all other code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png" alt="Transcripts are showing in the popup"></p>\n<h2 id="stopping-transcription">Stopping Transcription</h2>\n<p>Add a button, just below the start button, to <code is:raw>popup.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;stop&quot;</span><span style="color: #C9D1D9">&gt;Stop transcription&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>When the button is pressed, send a message back to the injected script. In <code is:raw>popup.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">tab) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Require an active tab&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.tabs.</span><span style="color: #D2A8FF">sendMessage</span><span style="color: #C9D1D9">(tab.id, { message: </span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>At the very bottom of <code is:raw>main.js</code>, below all other code, receive the message and close the WebSocket connection to Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.runtime.onMessage.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(({ </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(message </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Transcription ended&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Excellent.</p>\n<h2 id="creating-an-options-page">Creating an Options Page</h2>\n<p>Right now, your Deepgram API Key is coded right into the application. Next, you will build an options page for the user to enter their key, save it to Chrome storage, and use that value when connecting to Deepgram.</p>\n<p>In <code is:raw>manifest.json</code>, add the following property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #A5D6FF">&quot;options_page&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;options.html&quot;</span></span></code></pre>\n<p>Create and open an <code is:raw>options.html</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Provide your Deepgram API Key&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;api&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Save&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;options.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Create and open an <code is:raw>options.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">api</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;api&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">button</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// If it exists, load it in</span></span>\n<span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;key&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">key</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key) api.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> key</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">button.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> api.value</span></span>\n<span class="line"><span style="color: #C9D1D9">  chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({ key }, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Deepgram API Key Set&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Time to use the key. At the top of <code is:raw>main.js</code>, above all other code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> apiKey</span></span>\n<span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;key&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">key</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> key)</span></span></code></pre>\n<p>After this, <code is:raw>apiKey</code> will either be <code is:raw>undefined</code> or be a string with the API Key.</p>\n<p>Replace the following in <code is:raw>main.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Replace with \u{1F447}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">apiKey) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide a Deepgram API Key in the options page.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, apiKey])</span></span></code></pre>\n<p>Right-click the extension and click <em>Options</em> to open the new page. Save your Deepgram API Key, and the extension should still work.</p>\n<h2 id="accessing-browser-tab-audio-and-microphone">Accessing Browser Tab Audio and Microphone</h2>\n<p>A hypothetical situation - you want to transcribe a browser-based video call with this extension. Everyone\u2019s voice is transcribed, except yours - this is because your audio doesn\u2019t come through the tab (or you would hear yourself!), so let\u2019s alter this extension to allow for both your mic and tab audio to be transcribed together.</p>\n<p>If you only want to transcribe tab audio, skip to the end.</p>\n<p>At the moment, in <code is:raw>main.js</code>, you are requesting a user display, checking there is audio, and piping the resulting stream into a MediaRecorder. Now, we must:</p>\n<ol>\n<li>Get access to a user display and check there if is audio.</li>\n<li>Get access to a user audio device (microphone).</li>\n<li>Create a new, empty <code is:raw>AudioContext</code>.</li>\n<li>Mix the two audio sources together as sources in the single <code is:raw>AudioContext</code>.</li>\n<li>Create a MediaRecorder with the <code is:raw>AudioContext</code>, now containing two sources.</li>\n</ol>\n<p>At the very bottom of main.js, below all other code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// https://stackoverflow.com/a/47071576</span></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">mix</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">audioContext</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">streams</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dest</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> audioContext.</span><span style="color: #D2A8FF">createMediaStreamDestination</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    streams.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> audioContext.</span><span style="color: #D2A8FF">createMediaStreamSource</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">        source.</span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(dest)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> dest.stream</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Replace the following in <code is:raw>main.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Replace with \u{1F447}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">micStream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioContext</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">AudioContext</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mixed</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">mix</span><span style="color: #C9D1D9">(audioContext, [stream, micStream])</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(mixed, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>Add the <code is:raw>async</code> keyword just before <code is:raw>stream</code> in the <code is:raw>.then()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getDisplayMedia</span><span style="color: #C9D1D9">({ video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span></code></pre>\n<p>Boom. Done.</p>\n<h2 id="next-steps">Next Steps</h2>\n<p>There\u2019s so much you can do to improve your Chrome extension - make it look nicer with some CSS, change how you display transcripts or alter the extension icon when it is recording. You may also consider using Deepgram features such as <a href="https://developers.deepgram.com/documentation/features/diarize/">diarization</a> to detect different speakers and display them differently.</p>\n<p>You can find the full finished code for this project on GitHub at <a href="https://github.com/deepgram-devs/transcription-chrome-extension">deepgram-devs/transcription-chrome-extension</a>. As ever, if you have any questions, please feel free to reach out on Twitter (we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>).</p>' };
const frontmatter = { "title": "Transcribing Browser Tab Audio with Chrome Extensions", "description": "Build your first Google Chrome browser extension and learn how to use Deepgram's speech-to-text API to record tab audio, with and without your microphone.", "date": "2022-07-21T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1658240278/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/cover.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["extension", "javascript"], "seo": { "title": "Transcribing Browser Tab Audio with Chrome Extensions", "description": "Build your first Google Chrome browser extension and learn how to use Deepgram's speech-to-text API to record tab audio, with and without your microphone." }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454112/blog/transcribing-browser-tab-audio-chrome-extensions/ograph.png" }, "shorturls": { "share": "https://dpgr.am/56c127e", "twitter": "https://dpgr.am/02a6d9c", "linkedin": "https://dpgr.am/8fa7312", "reddit": "https://dpgr.am/f2281f2", "facebook": "https://dpgr.am/4561947" }, "astro": { "headings": [{ "depth": 2, "slug": "the-manifest", "text": "The Manifest" }, { "depth": 2, "slug": "creating-a-popup", "text": "Creating a Popup" }, { "depth": 2, "slug": "transcribing-tab-audio", "text": "Transcribing Tab Audio" }, { "depth": 2, "slug": "passing-data-from-content-script-to-popup", "text": "Passing Data From Content Script to Popup" }, { "depth": 2, "slug": "stopping-transcription", "text": "Stopping Transcription" }, { "depth": 2, "slug": "creating-an-options-page", "text": "Creating an Options Page" }, { "depth": 2, "slug": "accessing-browser-tab-audio-and-microphone", "text": "Accessing Browser Tab Audio and Microphone" }, { "depth": 2, "slug": "next-steps", "text": "Next Steps" }], "source": "\nChances are you have installed at least one browser extension before. With over 2.5 billion (yes, with a b) global users of Chrome, it's an excellent platform to build and release apps on. In this tutorial, you will create a Chrome extension that captures browser tab audio and transcribes it with Deepgram.\n\n![Transcripts are showing in the popup](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png)\n\n## The Manifest\n\nCreate a `manifest.json` file. This file contains critical information about our extension, which is required by the browser to load it (and publish it to the Chrome Web Store). Add the following to it:\n\n```json\n{\n    \"name\": \"Transcribe Tab Audio\",\n    \"version\": \"1.0\",\n    \"manifest_version\": 3,\n    \"host_permissions\": [\"*://*/\"],\n    \"permissions\": [\"storage\", \"tabs\", \"scripting\"]\n}\n```\n\nThe `host_permissions` specify which webpages this extension will be active on - the `*` matches everything, so this will work on every page. You can alter this if you only want it to work on specific pages or domains.\n\nThe `permissions` specified are also needed for this project - `\"storage\"` allows the extension to store small amounts of data on the machine, `\"tabs\"` provides access to all data fields regarding tabs in the browser, and `\"scripting\"` allows us to execute JavaScript files - more on this later.\n\nAt this point, you actually have a valid Chrome Extension - let's load it in. Head to `chrome://extensions`, toggle Developer Mode on and click *Load Unpacked*. Select the folder with your `manifest.json` file, and you should see the extension appear in your browser.\n\nIt's a bit rubbish right now\u2014time to fix that.\n\n## Creating a Popup\n\nAn extension popup is the small pane that appears when you click on the extension icon in your address bar.\n\nCreate a `popup.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body style=\"padding: 1em;\">\n    <button id=\"start\">Start transcription</button>\n    <p id=\"transcript\"></p>\n    <script src=\"popup.js\"><\/script>\n  </body>\n</html>\n```\n\nIn your `manifest.json` file, specify the popup file by adding this property:\n\n```json\n\"action\": {\n    \"default_popup\": \"popup.html\"\n}\n```\n\n![The extension icon is clicked, and a small white popup shows one button reading 'start transcription'](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/popup-hello-world.png)\n\nYou may have noticed that the linked JavaScript file does not yet exist. Before we create it, it's important to note that as soon as the popup is closed, it's as if that page no longer exists, and the code will cease to run. For this reason, the extension must inject some code to run in the current webpage. This means the code will continue to run even once the popup is closed.\n\nWith this in mind, create a `popup.js` file:\n\n```js\ndocument.getElementById('start').addEventListener('click', async () => {\n    const tab = await getCurrentTab()\n    if(!tab) return alert('Require an active tab')\n    chrome.scripting.executeScript({\n        target: { tabId: tab.id },\n        files: ['main.js']\n    })\n})\n\nasync function getCurrentTab() {\n    const queryOptions = { active: true, lastFocusedWindow: true }\n    const [tab] = await chrome.tabs.query(queryOptions)\n    return tab\n}\n```\n\nWhen the start button is clicked, it will get the active tab and inject a `main.js` file. Go and create one:\n\n```js\nalert('This is an injected script!')\n```\n\nOpen the extension and press the button. You should see the alert! Delete the alert before moving on.\n\n## Transcribing Tab Audio\n\nIn your `main.js` file, ask for access to a user's display, check it has audio attached, and plug it into a MediaRecorder:\n\n```js\nnavigator.mediaDevices.getDisplayMedia({ video: true, audio: true }).then(stream => {\n    if(stream.getAudioTracks().length == 0) return alert('You must share your tab with audio. Refresh the page.')\n    const recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\n\n    // Further code here\n})\n```\n\nTry it out. When you share a tab, ensure you are also sharing the tab audio. If not, we've set up an alert to show the error and stop further code from running.\n\n![A popup shows a screen scaring dialog. A chrome tab is selected, and a big red arrow is pointing to a checked checkbox reading 'share tab audio'.](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/share-audio.png)\n\nConnect to Deepgram using a WebSocket and, as soon as the connection is open, begin sending tab audio data:\n\n```js\nsocket = new WebSocket('wss://api.deepgram.com/v1/listen?tier=enhanced', ['token', 'YOUR_DEEPGRAM_API_KEY'])\n\nrecorder.addEventListener('dataavailable', evt => {\n    if(evt.data.size > 0 && socket.readyState == 1) socket.send(evt.data)\n})\n\nsocket.onopen = () => { recorder.start(250) }\n\n// Further code here\n```\n\nNote that the `socket` is being placed in global scope (shown by the lack of a `var`, `let`, or `const` keyword) so we can later close the connection.\n\nThen, listen for Deepgram's returned transcripts:\n\n```js\nsocket.onmessage = msg => {\n    const { transcript } = JSON.parse(msg.data).channel.alternatives[0]\n    if(transcript) {\n        console.log(transcript)\n    }\n}\n```\n\nGo to a tab with audio, start transcribing and look in your browser developer tools.\n\n![Several logs to the console with transcripts](https://res.cloudinary.com/deepgram/image/upload/v1657316997/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/logging-transcripts.png)\n\nNice! It's certainly coming together.\n\n## Passing Data From Content Script to Popup\n\nYou can't expect users to open up their browser console to see transcripts. You can send 'messages' from the injected script to the popup, but if the popup is closed, it won't be received. So, here's the plan:\n\n1.  When a new transcript is available, put it in chrome storage.\n2.  Send a message from the injected script to the popup to say there's a new transcript available.\n3.  If the popup is open, display the latest transcript from storage.\n4.  When the popup opens, get the latest transcript (even if messages are missed, this will get us up to date).\n\n[Chrome Storage](https://developer.chrome.com/docs/extensions/reference/storage/) is an extension-specific API that acts similarly to localStorage, but is more specialized towards the needs of extensions and may be synced using Chrome Sync (this extension won't be).\n\nAt the very top of `main.js`, above all other code, create a new transcript key in Chrome storage and set the initial value to an empty string:\n\n```js\nchrome.storage.local.set({ transcript: '' })\n```\n\nReplace `console.log(transcript)` with:\n\n```js\nchrome.storage.local.get('transcript', data => {\n    chrome.storage.local.set({\n      transcript: data.transcript += ' ' + transcript\n    })\n\n    // Throws error when popup is closed, so this swallows the errors with catch.\n    chrome.runtime.sendMessage({\n      message: 'transcriptavailable'\n    }).catch(err => ({}))\n})\n```\n\nThis gets the existing transcript and adds the new transcript to the end of it. Then, a message is sent with the value 'transcriptavailable,' which we can now listen for in `popup.js`.\n\nAt the bottom of `popup.js`:\n\n```js\nchrome.runtime.onMessage.addListener(({ message }) => {\n    if(message == 'transcriptavailable') {\n        showLatestTranscript()\n    }\n})\n\nfunction showLatestTranscript() {\n    chrome.storage.local.get('transcript', ({ transcript }) => {\n        document.getElementById('transcript').innerHTML = transcript\n    })\n}\n```\n\nAlso, get the latest transcript at the very top of `popup.js`, above all other code:\n\n```js\nshowLatestTranscript()\n```\n\n![Transcripts are showing in the popup](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png)\n\n## Stopping Transcription\n\nAdd a button, just below the start button, to `popup.html`:\n\n```html\n<button id=\"stop\">Stop transcription</button>\n```\n\nWhen the button is pressed, send a message back to the injected script. In `popup.js`:\n\n```js\ndocument.getElementById('stop').addEventListener('click', async () => {\n    const tab = await getCurrentTab()\n    if(!tab) return alert('Require an active tab')\n    chrome.tabs.sendMessage(tab.id, { message: 'stop' })\n})\n```\n\nAt the very bottom of `main.js`, below all other code, receive the message and close the WebSocket connection to Deepgram:\n\n```js\nchrome.runtime.onMessage.addListener(({ message }) => {\n    if(message == 'stop') {\n        socket.close()\n        alert('Transcription ended')\n    }\n})\n```\n\nExcellent.\n\n## Creating an Options Page\n\nRight now, your Deepgram API Key is coded right into the application. Next, you will build an options page for the user to enter their key, save it to Chrome storage, and use that value when connecting to Deepgram.\n\nIn `manifest.json`, add the following property:\n\n```js\n\"options_page\": \"options.html\"\n```\n\nCreate and open an `options.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Provide your Deepgram API Key</h1>\n\n    <input type=\"text\" id=\"api\">\n    <button>Save</button>\n\n    <script src=\"options.js\"><\/script>\n  </body>\n</html>\n```\n\nCreate and open an `options.js` file:\n\n```js\nconst api = document.getElementById('api')\nconst button = document.querySelector('button')\n\n// If it exists, load it in\nchrome.storage.local.get('key', ({ key }) => {\n  if(key) api.value = key\n})\n\nbutton.addEventListener('click', () => {\n  const key = api.value\n  chrome.storage.local.set({ key }, () => {\n    alert('Deepgram API Key Set')\n  })\n})\n```\n\nTime to use the key. At the top of `main.js`, above all other code:\n\n```js\nlet apiKey\nchrome.storage.local.get('key', ({ key }) => apiKey = key)\n```\n\nAfter this, `apiKey` will either be `undefined` or be a string with the API Key.\n\nReplace the following in `main.js`:\n\n```js\nsocket = new WebSocket('wss://api.deepgram.com/v1/listen?tier=enhanced', ['token', 'YOUR_DEEPGRAM_API_KEY'])\n\n// Replace with \u{1F447}\n\nif(!apiKey) return alert('You must provide a Deepgram API Key in the options page.')\nsocket = new WebSocket('wss://api.deepgram.com/v1/listen?tier=enhanced', ['token', apiKey])\n```\n\nRight-click the extension and click *Options* to open the new page. Save your Deepgram API Key, and the extension should still work.\n\n## Accessing Browser Tab Audio and Microphone\n\nA hypothetical situation - you want to transcribe a browser-based video call with this extension. Everyone's voice is transcribed, except yours - this is because your audio doesn't come through the tab (or you would hear yourself!), so let's alter this extension to allow for both your mic and tab audio to be transcribed together.\n\nIf you only want to transcribe tab audio, skip to the end.\n\nAt the moment, in `main.js`, you are requesting a user display, checking there is audio, and piping the resulting stream into a MediaRecorder. Now, we must:\n\n1.  Get access to a user display and check there if is audio.\n2.  Get access to a user audio device (microphone).\n3.  Create a new, empty `AudioContext`.\n4.  Mix the two audio sources together as sources in the single `AudioContext`.\n5.  Create a MediaRecorder with the `AudioContext`, now containing two sources.\n\nAt the very bottom of main.js, below all other code:\n\n```js\n// https://stackoverflow.com/a/47071576\nfunction mix(audioContext, streams) {\n    const dest = audioContext.createMediaStreamDestination()\n    streams.forEach(stream => {\n        const source = audioContext.createMediaStreamSource(stream)\n        source.connect(dest)\n    })\n    return dest.stream\n}\n```\n\nReplace the following in `main.js`:\n\n```js\nconst recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\n\n// Replace with \u{1F447}\n\nconst micStream = await navigator.mediaDevices.getUserMedia({ audio: true })\nconst audioContext = new AudioContext()\nconst mixed = mix(audioContext, [stream, micStream])\nconst recorder = new MediaRecorder(mixed, { mimeType: 'audio/webm' })\n```\n\nAdd the `async` keyword just before `stream` in the `.then()` function:\n\n```js\nnavigator.mediaDevices.getDisplayMedia({ video: true, audio: true }).then(await stream => {\n```\n\nBoom. Done.\n\n## Next Steps\n\nThere's so much you can do to improve your Chrome extension - make it look nicer with some CSS, change how you display transcripts or alter the extension icon when it is recording. You may also consider using Deepgram features such as [diarization](https://developers.deepgram.com/documentation/features/diarize/) to detect different speakers and display them differently.\n\nYou can find the full finished code for this project on GitHub at [deepgram-devs/transcription-chrome-extension](https://github.com/deepgram-devs/transcription-chrome-extension). As ever, if you have any questions, please feel free to reach out on Twitter (we are [@DeepgramDevs](https://twitter.com/DeepgramDevs)).", "html": '<p>Chances are you have installed at least one browser extension before. With over 2.5 billion (yes, with a b) global users of Chrome, it\u2019s an excellent platform to build and release apps on. In this tutorial, you will create a Chrome extension that captures browser tab audio and transcribes it with Deepgram.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png" alt="Transcripts are showing in the popup"></p>\n<h2 id="the-manifest">The Manifest</h2>\n<p>Create a <code is:raw>manifest.json</code> file. This file contains critical information about our extension, which is required by the browser to load it (and publish it to the Chrome Web Store). Add the following to it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Transcribe Tab Audio&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;1.0&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;manifest_version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;host_permissions&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;*://*/&quot;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;permissions&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;storage&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;tabs&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;scripting&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The <code is:raw>host_permissions</code> specify which webpages this extension will be active on - the <code is:raw>*</code> matches everything, so this will work on every page. You can alter this if you only want it to work on specific pages or domains.</p>\n<p>The <code is:raw>permissions</code> specified are also needed for this project - <code is:raw>"storage"</code> allows the extension to store small amounts of data on the machine, <code is:raw>"tabs"</code> provides access to all data fields regarding tabs in the browser, and <code is:raw>"scripting"</code> allows us to execute JavaScript files - more on this later.</p>\n<p>At this point, you actually have a valid Chrome Extension - let\u2019s load it in. Head to <code is:raw>chrome://extensions</code>, toggle Developer Mode on and click <em>Load Unpacked</em>. Select the folder with your <code is:raw>manifest.json</code> file, and you should see the extension appear in your browser.</p>\n<p>It\u2019s a bit rubbish right now\u2014time to fix that.</p>\n<h2 id="creating-a-popup">Creating a Popup</h2>\n<p>An extension popup is the small pane that appears when you click on the extension icon in your address bar.</p>\n<p>Create a <code is:raw>popup.html</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding: 1em;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">&gt;Start transcription&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;popup.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In your <code is:raw>manifest.json</code> file, specify the popup file by adding this property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;default_popup&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;popup.html&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/popup-hello-world.png" alt="The extension icon is clicked, and a small white popup shows one button reading &#x27;start transcription&#x27;"></p>\n<p>You may have noticed that the linked JavaScript file does not yet exist. Before we create it, it\u2019s important to note that as soon as the popup is closed, it\u2019s as if that page no longer exists, and the code will cease to run. For this reason, the extension must inject some code to run in the current webpage. This means the code will continue to run even once the popup is closed.</p>\n<p>With this in mind, create a <code is:raw>popup.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;start&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">tab) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Require an active tab&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.scripting.</span><span style="color: #D2A8FF">executeScript</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        target: { tabId: tab.id },</span></span>\n<span class="line"><span style="color: #C9D1D9">        files: [</span><span style="color: #A5D6FF">&#39;main.js&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">queryOptions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { active: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, lastFocusedWindow: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> chrome.tabs.</span><span style="color: #D2A8FF">query</span><span style="color: #C9D1D9">(queryOptions)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> tab</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>When the start button is clicked, it will get the active tab and inject a <code is:raw>main.js</code> file. Go and create one:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;This is an injected script!&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Open the extension and press the button. You should see the alert! Delete the alert before moving on.</p>\n<h2 id="transcribing-tab-audio">Transcribing Tab Audio</h2>\n<p>In your <code is:raw>main.js</code> file, ask for access to a user\u2019s display, check it has audio attached, and plug it into a MediaRecorder:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getDisplayMedia</span><span style="color: #C9D1D9">({ video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(stream.</span><span style="color: #D2A8FF">getAudioTracks</span><span style="color: #C9D1D9">().</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must share your tab with audio. Refresh the page.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Try it out. When you share a tab, ensure you are also sharing the tab audio. If not, we\u2019ve set up an alert to show the error and stop further code from running.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/share-audio.png" alt="A popup shows a screen scaring dialog. A chrome tab is selected, and a big red arrow is pointing to a checked checkbox reading &#x27;share tab audio&#x27;."></p>\n<p>Connect to Deepgram using a WebSocket and, as soon as the connection is open, begin sending tab audio data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">recorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">evt</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(evt.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(evt.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> { recorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">) }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>\n<p>Note that the <code is:raw>socket</code> is being placed in global scope (shown by the lack of a <code is:raw>var</code>, <code is:raw>let</code>, or <code is:raw>const</code> keyword) so we can later close the connection.</p>\n<p>Then, listen for Deepgram\u2019s returned transcripts:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">msg</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(msg.data).channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Go to a tab with audio, start transcribing and look in your browser developer tools.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316997/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/logging-transcripts.png" alt="Several logs to the console with transcripts"></p>\n<p>Nice! It\u2019s certainly coming together.</p>\n<h2 id="passing-data-from-content-script-to-popup">Passing Data From Content Script to Popup</h2>\n<p>You can\u2019t expect users to open up their browser console to see transcripts. You can send \u2018messages\u2019 from the injected script to the popup, but if the popup is closed, it won\u2019t be received. So, here\u2019s the plan:</p>\n<ol>\n<li>When a new transcript is available, put it in chrome storage.</li>\n<li>Send a message from the injected script to the popup to say there\u2019s a new transcript available.</li>\n<li>If the popup is open, display the latest transcript from storage.</li>\n<li>When the popup opens, get the latest transcript (even if messages are missed, this will get us up to date).</li>\n</ol>\n<p><a href="https://developer.chrome.com/docs/extensions/reference/storage/">Chrome Storage</a> is an extension-specific API that acts similarly to localStorage, but is more specialized towards the needs of extensions and may be synced using Chrome Sync (this extension won\u2019t be).</p>\n<p>At the very top of <code is:raw>main.js</code>, above all other code, create a new transcript key in Chrome storage and set the initial value to an empty string:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({ transcript: </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>Replace <code is:raw>console.log(transcript)</code> with:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">      transcript: data.transcript </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Throws error when popup is closed, so this swallows the errors with catch.</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.runtime.</span><span style="color: #D2A8FF">sendMessage</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">      message: </span><span style="color: #A5D6FF">&#39;transcriptavailable&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }).</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({}))</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This gets the existing transcript and adds the new transcript to the end of it. Then, a message is sent with the value \u2018transcriptavailable,\u2019 which we can now listen for in <code is:raw>popup.js</code>.</p>\n<p>At the bottom of <code is:raw>popup.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.runtime.onMessage.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(({ </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(message </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;transcriptavailable&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">).innerHTML </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Also, get the latest transcript at the very top of <code is:raw>popup.js</code>, above all other code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png" alt="Transcripts are showing in the popup"></p>\n<h2 id="stopping-transcription">Stopping Transcription</h2>\n<p>Add a button, just below the start button, to <code is:raw>popup.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;stop&quot;</span><span style="color: #C9D1D9">&gt;Stop transcription&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>When the button is pressed, send a message back to the injected script. In <code is:raw>popup.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">tab) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Require an active tab&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.tabs.</span><span style="color: #D2A8FF">sendMessage</span><span style="color: #C9D1D9">(tab.id, { message: </span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>At the very bottom of <code is:raw>main.js</code>, below all other code, receive the message and close the WebSocket connection to Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.runtime.onMessage.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(({ </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(message </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Transcription ended&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Excellent.</p>\n<h2 id="creating-an-options-page">Creating an Options Page</h2>\n<p>Right now, your Deepgram API Key is coded right into the application. Next, you will build an options page for the user to enter their key, save it to Chrome storage, and use that value when connecting to Deepgram.</p>\n<p>In <code is:raw>manifest.json</code>, add the following property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #A5D6FF">&quot;options_page&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;options.html&quot;</span></span></code></pre>\n<p>Create and open an <code is:raw>options.html</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Provide your Deepgram API Key&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;api&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Save&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;options.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Create and open an <code is:raw>options.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">api</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;api&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">button</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// If it exists, load it in</span></span>\n<span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;key&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">key</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key) api.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> key</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">button.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> api.value</span></span>\n<span class="line"><span style="color: #C9D1D9">  chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({ key }, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Deepgram API Key Set&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Time to use the key. At the top of <code is:raw>main.js</code>, above all other code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> apiKey</span></span>\n<span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;key&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">key</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> key)</span></span></code></pre>\n<p>After this, <code is:raw>apiKey</code> will either be <code is:raw>undefined</code> or be a string with the API Key.</p>\n<p>Replace the following in <code is:raw>main.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Replace with \u{1F447}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">apiKey) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide a Deepgram API Key in the options page.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, apiKey])</span></span></code></pre>\n<p>Right-click the extension and click <em>Options</em> to open the new page. Save your Deepgram API Key, and the extension should still work.</p>\n<h2 id="accessing-browser-tab-audio-and-microphone">Accessing Browser Tab Audio and Microphone</h2>\n<p>A hypothetical situation - you want to transcribe a browser-based video call with this extension. Everyone\u2019s voice is transcribed, except yours - this is because your audio doesn\u2019t come through the tab (or you would hear yourself!), so let\u2019s alter this extension to allow for both your mic and tab audio to be transcribed together.</p>\n<p>If you only want to transcribe tab audio, skip to the end.</p>\n<p>At the moment, in <code is:raw>main.js</code>, you are requesting a user display, checking there is audio, and piping the resulting stream into a MediaRecorder. Now, we must:</p>\n<ol>\n<li>Get access to a user display and check there if is audio.</li>\n<li>Get access to a user audio device (microphone).</li>\n<li>Create a new, empty <code is:raw>AudioContext</code>.</li>\n<li>Mix the two audio sources together as sources in the single <code is:raw>AudioContext</code>.</li>\n<li>Create a MediaRecorder with the <code is:raw>AudioContext</code>, now containing two sources.</li>\n</ol>\n<p>At the very bottom of main.js, below all other code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// https://stackoverflow.com/a/47071576</span></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">mix</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">audioContext</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">streams</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dest</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> audioContext.</span><span style="color: #D2A8FF">createMediaStreamDestination</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    streams.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> audioContext.</span><span style="color: #D2A8FF">createMediaStreamSource</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">        source.</span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(dest)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> dest.stream</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Replace the following in <code is:raw>main.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Replace with \u{1F447}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">micStream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioContext</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">AudioContext</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mixed</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">mix</span><span style="color: #C9D1D9">(audioContext, [stream, micStream])</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(mixed, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>Add the <code is:raw>async</code> keyword just before <code is:raw>stream</code> in the <code is:raw>.then()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getDisplayMedia</span><span style="color: #C9D1D9">({ video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span></code></pre>\n<p>Boom. Done.</p>\n<h2 id="next-steps">Next Steps</h2>\n<p>There\u2019s so much you can do to improve your Chrome extension - make it look nicer with some CSS, change how you display transcripts or alter the extension icon when it is recording. You may also consider using Deepgram features such as <a href="https://developers.deepgram.com/documentation/features/diarize/">diarization</a> to detect different speakers and display them differently.</p>\n<p>You can find the full finished code for this project on GitHub at <a href="https://github.com/deepgram-devs/transcription-chrome-extension">deepgram-devs/transcription-chrome-extension</a>. As ever, if you have any questions, please feel free to reach out on Twitter (we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>).</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribing-browser-tab-audio-chrome-extensions/index.md" };
function rawContent() {
  return "\nChances are you have installed at least one browser extension before. With over 2.5 billion (yes, with a b) global users of Chrome, it's an excellent platform to build and release apps on. In this tutorial, you will create a Chrome extension that captures browser tab audio and transcribes it with Deepgram.\n\n![Transcripts are showing in the popup](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png)\n\n## The Manifest\n\nCreate a `manifest.json` file. This file contains critical information about our extension, which is required by the browser to load it (and publish it to the Chrome Web Store). Add the following to it:\n\n```json\n{\n    \"name\": \"Transcribe Tab Audio\",\n    \"version\": \"1.0\",\n    \"manifest_version\": 3,\n    \"host_permissions\": [\"*://*/\"],\n    \"permissions\": [\"storage\", \"tabs\", \"scripting\"]\n}\n```\n\nThe `host_permissions` specify which webpages this extension will be active on - the `*` matches everything, so this will work on every page. You can alter this if you only want it to work on specific pages or domains.\n\nThe `permissions` specified are also needed for this project - `\"storage\"` allows the extension to store small amounts of data on the machine, `\"tabs\"` provides access to all data fields regarding tabs in the browser, and `\"scripting\"` allows us to execute JavaScript files - more on this later.\n\nAt this point, you actually have a valid Chrome Extension - let's load it in. Head to `chrome://extensions`, toggle Developer Mode on and click *Load Unpacked*. Select the folder with your `manifest.json` file, and you should see the extension appear in your browser.\n\nIt's a bit rubbish right now\u2014time to fix that.\n\n## Creating a Popup\n\nAn extension popup is the small pane that appears when you click on the extension icon in your address bar.\n\nCreate a `popup.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body style=\"padding: 1em;\">\n    <button id=\"start\">Start transcription</button>\n    <p id=\"transcript\"></p>\n    <script src=\"popup.js\"><\/script>\n  </body>\n</html>\n```\n\nIn your `manifest.json` file, specify the popup file by adding this property:\n\n```json\n\"action\": {\n    \"default_popup\": \"popup.html\"\n}\n```\n\n![The extension icon is clicked, and a small white popup shows one button reading 'start transcription'](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/popup-hello-world.png)\n\nYou may have noticed that the linked JavaScript file does not yet exist. Before we create it, it's important to note that as soon as the popup is closed, it's as if that page no longer exists, and the code will cease to run. For this reason, the extension must inject some code to run in the current webpage. This means the code will continue to run even once the popup is closed.\n\nWith this in mind, create a `popup.js` file:\n\n```js\ndocument.getElementById('start').addEventListener('click', async () => {\n    const tab = await getCurrentTab()\n    if(!tab) return alert('Require an active tab')\n    chrome.scripting.executeScript({\n        target: { tabId: tab.id },\n        files: ['main.js']\n    })\n})\n\nasync function getCurrentTab() {\n    const queryOptions = { active: true, lastFocusedWindow: true }\n    const [tab] = await chrome.tabs.query(queryOptions)\n    return tab\n}\n```\n\nWhen the start button is clicked, it will get the active tab and inject a `main.js` file. Go and create one:\n\n```js\nalert('This is an injected script!')\n```\n\nOpen the extension and press the button. You should see the alert! Delete the alert before moving on.\n\n## Transcribing Tab Audio\n\nIn your `main.js` file, ask for access to a user's display, check it has audio attached, and plug it into a MediaRecorder:\n\n```js\nnavigator.mediaDevices.getDisplayMedia({ video: true, audio: true }).then(stream => {\n    if(stream.getAudioTracks().length == 0) return alert('You must share your tab with audio. Refresh the page.')\n    const recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\n\n    // Further code here\n})\n```\n\nTry it out. When you share a tab, ensure you are also sharing the tab audio. If not, we've set up an alert to show the error and stop further code from running.\n\n![A popup shows a screen scaring dialog. A chrome tab is selected, and a big red arrow is pointing to a checked checkbox reading 'share tab audio'.](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/share-audio.png)\n\nConnect to Deepgram using a WebSocket and, as soon as the connection is open, begin sending tab audio data:\n\n```js\nsocket = new WebSocket('wss://api.deepgram.com/v1/listen?tier=enhanced', ['token', 'YOUR_DEEPGRAM_API_KEY'])\n\nrecorder.addEventListener('dataavailable', evt => {\n    if(evt.data.size > 0 && socket.readyState == 1) socket.send(evt.data)\n})\n\nsocket.onopen = () => { recorder.start(250) }\n\n// Further code here\n```\n\nNote that the `socket` is being placed in global scope (shown by the lack of a `var`, `let`, or `const` keyword) so we can later close the connection.\n\nThen, listen for Deepgram's returned transcripts:\n\n```js\nsocket.onmessage = msg => {\n    const { transcript } = JSON.parse(msg.data).channel.alternatives[0]\n    if(transcript) {\n        console.log(transcript)\n    }\n}\n```\n\nGo to a tab with audio, start transcribing and look in your browser developer tools.\n\n![Several logs to the console with transcripts](https://res.cloudinary.com/deepgram/image/upload/v1657316997/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/logging-transcripts.png)\n\nNice! It's certainly coming together.\n\n## Passing Data From Content Script to Popup\n\nYou can't expect users to open up their browser console to see transcripts. You can send 'messages' from the injected script to the popup, but if the popup is closed, it won't be received. So, here's the plan:\n\n1.  When a new transcript is available, put it in chrome storage.\n2.  Send a message from the injected script to the popup to say there's a new transcript available.\n3.  If the popup is open, display the latest transcript from storage.\n4.  When the popup opens, get the latest transcript (even if messages are missed, this will get us up to date).\n\n[Chrome Storage](https://developer.chrome.com/docs/extensions/reference/storage/) is an extension-specific API that acts similarly to localStorage, but is more specialized towards the needs of extensions and may be synced using Chrome Sync (this extension won't be).\n\nAt the very top of `main.js`, above all other code, create a new transcript key in Chrome storage and set the initial value to an empty string:\n\n```js\nchrome.storage.local.set({ transcript: '' })\n```\n\nReplace `console.log(transcript)` with:\n\n```js\nchrome.storage.local.get('transcript', data => {\n    chrome.storage.local.set({\n      transcript: data.transcript += ' ' + transcript\n    })\n\n    // Throws error when popup is closed, so this swallows the errors with catch.\n    chrome.runtime.sendMessage({\n      message: 'transcriptavailable'\n    }).catch(err => ({}))\n})\n```\n\nThis gets the existing transcript and adds the new transcript to the end of it. Then, a message is sent with the value 'transcriptavailable,' which we can now listen for in `popup.js`.\n\nAt the bottom of `popup.js`:\n\n```js\nchrome.runtime.onMessage.addListener(({ message }) => {\n    if(message == 'transcriptavailable') {\n        showLatestTranscript()\n    }\n})\n\nfunction showLatestTranscript() {\n    chrome.storage.local.get('transcript', ({ transcript }) => {\n        document.getElementById('transcript').innerHTML = transcript\n    })\n}\n```\n\nAlso, get the latest transcript at the very top of `popup.js`, above all other code:\n\n```js\nshowLatestTranscript()\n```\n\n![Transcripts are showing in the popup](https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png)\n\n## Stopping Transcription\n\nAdd a button, just below the start button, to `popup.html`:\n\n```html\n<button id=\"stop\">Stop transcription</button>\n```\n\nWhen the button is pressed, send a message back to the injected script. In `popup.js`:\n\n```js\ndocument.getElementById('stop').addEventListener('click', async () => {\n    const tab = await getCurrentTab()\n    if(!tab) return alert('Require an active tab')\n    chrome.tabs.sendMessage(tab.id, { message: 'stop' })\n})\n```\n\nAt the very bottom of `main.js`, below all other code, receive the message and close the WebSocket connection to Deepgram:\n\n```js\nchrome.runtime.onMessage.addListener(({ message }) => {\n    if(message == 'stop') {\n        socket.close()\n        alert('Transcription ended')\n    }\n})\n```\n\nExcellent.\n\n## Creating an Options Page\n\nRight now, your Deepgram API Key is coded right into the application. Next, you will build an options page for the user to enter their key, save it to Chrome storage, and use that value when connecting to Deepgram.\n\nIn `manifest.json`, add the following property:\n\n```js\n\"options_page\": \"options.html\"\n```\n\nCreate and open an `options.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Provide your Deepgram API Key</h1>\n\n    <input type=\"text\" id=\"api\">\n    <button>Save</button>\n\n    <script src=\"options.js\"><\/script>\n  </body>\n</html>\n```\n\nCreate and open an `options.js` file:\n\n```js\nconst api = document.getElementById('api')\nconst button = document.querySelector('button')\n\n// If it exists, load it in\nchrome.storage.local.get('key', ({ key }) => {\n  if(key) api.value = key\n})\n\nbutton.addEventListener('click', () => {\n  const key = api.value\n  chrome.storage.local.set({ key }, () => {\n    alert('Deepgram API Key Set')\n  })\n})\n```\n\nTime to use the key. At the top of `main.js`, above all other code:\n\n```js\nlet apiKey\nchrome.storage.local.get('key', ({ key }) => apiKey = key)\n```\n\nAfter this, `apiKey` will either be `undefined` or be a string with the API Key.\n\nReplace the following in `main.js`:\n\n```js\nsocket = new WebSocket('wss://api.deepgram.com/v1/listen?tier=enhanced', ['token', 'YOUR_DEEPGRAM_API_KEY'])\n\n// Replace with \u{1F447}\n\nif(!apiKey) return alert('You must provide a Deepgram API Key in the options page.')\nsocket = new WebSocket('wss://api.deepgram.com/v1/listen?tier=enhanced', ['token', apiKey])\n```\n\nRight-click the extension and click *Options* to open the new page. Save your Deepgram API Key, and the extension should still work.\n\n## Accessing Browser Tab Audio and Microphone\n\nA hypothetical situation - you want to transcribe a browser-based video call with this extension. Everyone's voice is transcribed, except yours - this is because your audio doesn't come through the tab (or you would hear yourself!), so let's alter this extension to allow for both your mic and tab audio to be transcribed together.\n\nIf you only want to transcribe tab audio, skip to the end.\n\nAt the moment, in `main.js`, you are requesting a user display, checking there is audio, and piping the resulting stream into a MediaRecorder. Now, we must:\n\n1.  Get access to a user display and check there if is audio.\n2.  Get access to a user audio device (microphone).\n3.  Create a new, empty `AudioContext`.\n4.  Mix the two audio sources together as sources in the single `AudioContext`.\n5.  Create a MediaRecorder with the `AudioContext`, now containing two sources.\n\nAt the very bottom of main.js, below all other code:\n\n```js\n// https://stackoverflow.com/a/47071576\nfunction mix(audioContext, streams) {\n    const dest = audioContext.createMediaStreamDestination()\n    streams.forEach(stream => {\n        const source = audioContext.createMediaStreamSource(stream)\n        source.connect(dest)\n    })\n    return dest.stream\n}\n```\n\nReplace the following in `main.js`:\n\n```js\nconst recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' })\n\n// Replace with \u{1F447}\n\nconst micStream = await navigator.mediaDevices.getUserMedia({ audio: true })\nconst audioContext = new AudioContext()\nconst mixed = mix(audioContext, [stream, micStream])\nconst recorder = new MediaRecorder(mixed, { mimeType: 'audio/webm' })\n```\n\nAdd the `async` keyword just before `stream` in the `.then()` function:\n\n```js\nnavigator.mediaDevices.getDisplayMedia({ video: true, audio: true }).then(await stream => {\n```\n\nBoom. Done.\n\n## Next Steps\n\nThere's so much you can do to improve your Chrome extension - make it look nicer with some CSS, change how you display transcripts or alter the extension icon when it is recording. You may also consider using Deepgram features such as [diarization](https://developers.deepgram.com/documentation/features/diarize/) to detect different speakers and display them differently.\n\nYou can find the full finished code for this project on GitHub at [deepgram-devs/transcription-chrome-extension](https://github.com/deepgram-devs/transcription-chrome-extension). As ever, if you have any questions, please feel free to reach out on Twitter (we are [@DeepgramDevs](https://twitter.com/DeepgramDevs)).";
}
function compiledContent() {
  return '<p>Chances are you have installed at least one browser extension before. With over 2.5 billion (yes, with a b) global users of Chrome, it\u2019s an excellent platform to build and release apps on. In this tutorial, you will create a Chrome extension that captures browser tab audio and transcribes it with Deepgram.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png" alt="Transcripts are showing in the popup"></p>\n<h2 id="the-manifest">The Manifest</h2>\n<p>Create a <code is:raw>manifest.json</code> file. This file contains critical information about our extension, which is required by the browser to load it (and publish it to the Chrome Web Store). Add the following to it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Transcribe Tab Audio&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;1.0&quot;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;manifest_version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;host_permissions&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;*://*/&quot;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;permissions&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;storage&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;tabs&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;scripting&quot;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>The <code is:raw>host_permissions</code> specify which webpages this extension will be active on - the <code is:raw>*</code> matches everything, so this will work on every page. You can alter this if you only want it to work on specific pages or domains.</p>\n<p>The <code is:raw>permissions</code> specified are also needed for this project - <code is:raw>"storage"</code> allows the extension to store small amounts of data on the machine, <code is:raw>"tabs"</code> provides access to all data fields regarding tabs in the browser, and <code is:raw>"scripting"</code> allows us to execute JavaScript files - more on this later.</p>\n<p>At this point, you actually have a valid Chrome Extension - let\u2019s load it in. Head to <code is:raw>chrome://extensions</code>, toggle Developer Mode on and click <em>Load Unpacked</em>. Select the folder with your <code is:raw>manifest.json</code> file, and you should see the extension appear in your browser.</p>\n<p>It\u2019s a bit rubbish right now\u2014time to fix that.</p>\n<h2 id="creating-a-popup">Creating a Popup</h2>\n<p>An extension popup is the small pane that appears when you click on the extension icon in your address bar.</p>\n<p>Create a <code is:raw>popup.html</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding: 1em;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">&gt;Start transcription&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;popup.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In your <code is:raw>manifest.json</code> file, specify the popup file by adding this property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;default_popup&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;popup.html&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/popup-hello-world.png" alt="The extension icon is clicked, and a small white popup shows one button reading &#x27;start transcription&#x27;"></p>\n<p>You may have noticed that the linked JavaScript file does not yet exist. Before we create it, it\u2019s important to note that as soon as the popup is closed, it\u2019s as if that page no longer exists, and the code will cease to run. For this reason, the extension must inject some code to run in the current webpage. This means the code will continue to run even once the popup is closed.</p>\n<p>With this in mind, create a <code is:raw>popup.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;start&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">tab) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Require an active tab&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.scripting.</span><span style="color: #D2A8FF">executeScript</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">        target: { tabId: tab.id },</span></span>\n<span class="line"><span style="color: #C9D1D9">        files: [</span><span style="color: #A5D6FF">&#39;main.js&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">queryOptions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { active: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, lastFocusedWindow: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> chrome.tabs.</span><span style="color: #D2A8FF">query</span><span style="color: #C9D1D9">(queryOptions)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> tab</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>When the start button is clicked, it will get the active tab and inject a <code is:raw>main.js</code> file. Go and create one:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;This is an injected script!&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Open the extension and press the button. You should see the alert! Delete the alert before moving on.</p>\n<h2 id="transcribing-tab-audio">Transcribing Tab Audio</h2>\n<p>In your <code is:raw>main.js</code> file, ask for access to a user\u2019s display, check it has audio attached, and plug it into a MediaRecorder:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getDisplayMedia</span><span style="color: #C9D1D9">({ video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(stream.</span><span style="color: #D2A8FF">getAudioTracks</span><span style="color: #C9D1D9">().</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must share your tab with audio. Refresh the page.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Try it out. When you share a tab, ensure you are also sharing the tab audio. If not, we\u2019ve set up an alert to show the error and stop further code from running.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/share-audio.png" alt="A popup shows a screen scaring dialog. A chrome tab is selected, and a big red arrow is pointing to a checked checkbox reading &#x27;share tab audio&#x27;."></p>\n<p>Connect to Deepgram using a WebSocket and, as soon as the connection is open, begin sending tab audio data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">recorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">evt</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(evt.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(evt.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> { recorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">) }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>\n<p>Note that the <code is:raw>socket</code> is being placed in global scope (shown by the lack of a <code is:raw>var</code>, <code is:raw>let</code>, or <code is:raw>const</code> keyword) so we can later close the connection.</p>\n<p>Then, listen for Deepgram\u2019s returned transcripts:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">msg</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(msg.data).channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Go to a tab with audio, start transcribing and look in your browser developer tools.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316997/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/logging-transcripts.png" alt="Several logs to the console with transcripts"></p>\n<p>Nice! It\u2019s certainly coming together.</p>\n<h2 id="passing-data-from-content-script-to-popup">Passing Data From Content Script to Popup</h2>\n<p>You can\u2019t expect users to open up their browser console to see transcripts. You can send \u2018messages\u2019 from the injected script to the popup, but if the popup is closed, it won\u2019t be received. So, here\u2019s the plan:</p>\n<ol>\n<li>When a new transcript is available, put it in chrome storage.</li>\n<li>Send a message from the injected script to the popup to say there\u2019s a new transcript available.</li>\n<li>If the popup is open, display the latest transcript from storage.</li>\n<li>When the popup opens, get the latest transcript (even if messages are missed, this will get us up to date).</li>\n</ol>\n<p><a href="https://developer.chrome.com/docs/extensions/reference/storage/">Chrome Storage</a> is an extension-specific API that acts similarly to localStorage, but is more specialized towards the needs of extensions and may be synced using Chrome Sync (this extension won\u2019t be).</p>\n<p>At the very top of <code is:raw>main.js</code>, above all other code, create a new transcript key in Chrome storage and set the initial value to an empty string:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({ transcript: </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>Replace <code is:raw>console.log(transcript)</code> with:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">      transcript: data.transcript </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Throws error when popup is closed, so this swallows the errors with catch.</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.runtime.</span><span style="color: #D2A8FF">sendMessage</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">      message: </span><span style="color: #A5D6FF">&#39;transcriptavailable&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }).</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({}))</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This gets the existing transcript and adds the new transcript to the end of it. Then, a message is sent with the value \u2018transcriptavailable,\u2019 which we can now listen for in <code is:raw>popup.js</code>.</p>\n<p>At the bottom of <code is:raw>popup.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.runtime.onMessage.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(({ </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(message </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;transcriptavailable&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">).innerHTML </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Also, get the latest transcript at the very top of <code is:raw>popup.js</code>, above all other code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png" alt="Transcripts are showing in the popup"></p>\n<h2 id="stopping-transcription">Stopping Transcription</h2>\n<p>Add a button, just below the start button, to <code is:raw>popup.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;stop&quot;</span><span style="color: #C9D1D9">&gt;Stop transcription&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>When the button is pressed, send a message back to the injected script. In <code is:raw>popup.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">tab) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Require an active tab&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    chrome.tabs.</span><span style="color: #D2A8FF">sendMessage</span><span style="color: #C9D1D9">(tab.id, { message: </span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>At the very bottom of <code is:raw>main.js</code>, below all other code, receive the message and close the WebSocket connection to Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.runtime.onMessage.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(({ </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(message </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Transcription ended&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Excellent.</p>\n<h2 id="creating-an-options-page">Creating an Options Page</h2>\n<p>Right now, your Deepgram API Key is coded right into the application. Next, you will build an options page for the user to enter their key, save it to Chrome storage, and use that value when connecting to Deepgram.</p>\n<p>In <code is:raw>manifest.json</code>, add the following property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #A5D6FF">&quot;options_page&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;options.html&quot;</span></span></code></pre>\n<p>Create and open an <code is:raw>options.html</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Provide your Deepgram API Key&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;api&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Save&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;options.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Create and open an <code is:raw>options.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">api</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;api&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">button</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// If it exists, load it in</span></span>\n<span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;key&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">key</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key) api.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> key</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">button.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> api.value</span></span>\n<span class="line"><span style="color: #C9D1D9">  chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({ key }, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Deepgram API Key Set&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Time to use the key. At the top of <code is:raw>main.js</code>, above all other code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> apiKey</span></span>\n<span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;key&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">key</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> key)</span></span></code></pre>\n<p>After this, <code is:raw>apiKey</code> will either be <code is:raw>undefined</code> or be a string with the API Key.</p>\n<p>Replace the following in <code is:raw>main.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Replace with \u{1F447}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">apiKey) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide a Deepgram API Key in the options page.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, apiKey])</span></span></code></pre>\n<p>Right-click the extension and click <em>Options</em> to open the new page. Save your Deepgram API Key, and the extension should still work.</p>\n<h2 id="accessing-browser-tab-audio-and-microphone">Accessing Browser Tab Audio and Microphone</h2>\n<p>A hypothetical situation - you want to transcribe a browser-based video call with this extension. Everyone\u2019s voice is transcribed, except yours - this is because your audio doesn\u2019t come through the tab (or you would hear yourself!), so let\u2019s alter this extension to allow for both your mic and tab audio to be transcribed together.</p>\n<p>If you only want to transcribe tab audio, skip to the end.</p>\n<p>At the moment, in <code is:raw>main.js</code>, you are requesting a user display, checking there is audio, and piping the resulting stream into a MediaRecorder. Now, we must:</p>\n<ol>\n<li>Get access to a user display and check there if is audio.</li>\n<li>Get access to a user audio device (microphone).</li>\n<li>Create a new, empty <code is:raw>AudioContext</code>.</li>\n<li>Mix the two audio sources together as sources in the single <code is:raw>AudioContext</code>.</li>\n<li>Create a MediaRecorder with the <code is:raw>AudioContext</code>, now containing two sources.</li>\n</ol>\n<p>At the very bottom of main.js, below all other code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// https://stackoverflow.com/a/47071576</span></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">mix</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">audioContext</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">streams</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dest</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> audioContext.</span><span style="color: #D2A8FF">createMediaStreamDestination</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    streams.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> audioContext.</span><span style="color: #D2A8FF">createMediaStreamSource</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">        source.</span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(dest)</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> dest.stream</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Replace the following in <code is:raw>main.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Replace with \u{1F447}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">micStream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioContext</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">AudioContext</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mixed</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">mix</span><span style="color: #C9D1D9">(audioContext, [stream, micStream])</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(mixed, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<p>Add the <code is:raw>async</code> keyword just before <code is:raw>stream</code> in the <code is:raw>.then()</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getDisplayMedia</span><span style="color: #C9D1D9">({ video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span></code></pre>\n<p>Boom. Done.</p>\n<h2 id="next-steps">Next Steps</h2>\n<p>There\u2019s so much you can do to improve your Chrome extension - make it look nicer with some CSS, change how you display transcripts or alter the extension icon when it is recording. You may also consider using Deepgram features such as <a href="https://developers.deepgram.com/documentation/features/diarize/">diarization</a> to detect different speakers and display them differently.</p>\n<p>You can find the full finished code for this project on GitHub at <a href="https://github.com/deepgram-devs/transcription-chrome-extension">deepgram-devs/transcription-chrome-extension</a>. As ever, if you have any questions, please feel free to reach out on Twitter (we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>).</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribing-browser-tab-audio-chrome-extensions/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Chances are you have installed at least one browser extension before. With over 2.5 billion (yes, with a b) global users of Chrome, it’s an excellent platform to build and release apps on. In this tutorial, you will create a Chrome extension that captures browser tab audio and transcribes it with Deepgram.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png" alt="Transcripts are showing in the popup"></p>
<h2 id="the-manifest">The Manifest</h2>
<p>Create a <code>manifest.json</code> file. This file contains critical information about our extension, which is required by the browser to load it (and publish it to the Chrome Web Store). Add the following to it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;name&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;Transcribe Tab Audio&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;1.0&quot;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;manifest_version&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;host_permissions&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;*://*/&quot;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;permissions&quot;</span><span style="color: #C9D1D9">: [</span><span style="color: #A5D6FF">&quot;storage&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;tabs&quot;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&quot;scripting&quot;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>The <code>host_permissions</code> specify which webpages this extension will be active on - the <code>*</code> matches everything, so this will work on every page. You can alter this if you only want it to work on specific pages or domains.</p>
<p>The <code>permissions</code> specified are also needed for this project - <code>"storage"</code> allows the extension to store small amounts of data on the machine, <code>"tabs"</code> provides access to all data fields regarding tabs in the browser, and <code>"scripting"</code> allows us to execute JavaScript files - more on this later.</p>
<p>At this point, you actually have a valid Chrome Extension - let’s load it in. Head to <code>chrome://extensions</code>, toggle Developer Mode on and click <em>Load Unpacked</em>. Select the folder with your <code>manifest.json</code> file, and you should see the extension appear in your browser.</p>
<p>It’s a bit rubbish right now—time to fix that.</p>
<h2 id="creating-a-popup">Creating a Popup</h2>
<p>An extension popup is the small pane that appears when you click on the extension icon in your address bar.</p>
<p>Create a <code>popup.html</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;padding: 1em;&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;start&quot;</span><span style="color: #C9D1D9">&gt;Start transcription&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;transcript&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;popup.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>In your <code>manifest.json</code> file, specify the popup file by adding this property:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #A5D6FF">&quot;action&quot;</span><span style="color: #C9D1D9">: {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #7EE787">&quot;default_popup&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;popup.html&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/popup-hello-world.png" alt="The extension icon is clicked, and a small white popup shows one button reading 'start transcription'"></p>
<p>You may have noticed that the linked JavaScript file does not yet exist. Before we create it, it’s important to note that as soon as the popup is closed, it’s as if that page no longer exists, and the code will cease to run. For this reason, the extension must inject some code to run in the current webpage. This means the code will continue to run even once the popup is closed.</p>
<p>With this in mind, create a <code>popup.js</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;start&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">tab) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Require an active tab&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    chrome.scripting.</span><span style="color: #D2A8FF">executeScript</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">        target: { tabId: tab.id },</span></span>
<span class="line"><span style="color: #C9D1D9">        files: [</span><span style="color: #A5D6FF">&#39;main.js&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">queryOptions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { active: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, lastFocusedWindow: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> [</span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9">] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> chrome.tabs.</span><span style="color: #D2A8FF">query</span><span style="color: #C9D1D9">(queryOptions)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> tab</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>When the start button is clicked, it will get the active tab and inject a <code>main.js</code> file. Go and create one:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;This is an injected script!&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Open the extension and press the button. You should see the alert! Delete the alert before moving on.</p>
<h2 id="transcribing-tab-audio">Transcribing Tab Audio</h2>
<p>In your <code>main.js</code> file, ask for access to a user’s display, check it has audio attached, and plug it into a MediaRecorder:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getDisplayMedia</span><span style="color: #C9D1D9">({ video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(stream.</span><span style="color: #D2A8FF">getAudioTracks</span><span style="color: #C9D1D9">().</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must share your tab with audio. Refresh the page.&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Try it out. When you share a tab, ensure you are also sharing the tab audio. If not, we’ve set up an alert to show the error and stop further code from running.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/share-audio.png" alt="A popup shows a screen scaring dialog. A chrome tab is selected, and a big red arrow is pointing to a checked checkbox reading 'share tab audio'."></p>
<p>Connect to Deepgram using a WebSocket and, as soon as the connection is open, begin sending tab audio data:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">recorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">evt</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(evt.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> socket.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(evt.data)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onopen</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> { recorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">) }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>
<p>Note that the <code>socket</code> is being placed in global scope (shown by the lack of a <code>var</code>, <code>let</code>, or <code>const</code> keyword) so we can later close the connection.</p>
<p>Then, listen for Deepgram’s returned transcripts:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">onmessage</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">msg</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(msg.data).channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(transcript) {</span></span>
<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Go to a tab with audio, start transcribing and look in your browser developer tools.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316997/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/logging-transcripts.png" alt="Several logs to the console with transcripts"></p>
<p>Nice! It’s certainly coming together.</p>
<h2 id="passing-data-from-content-script-to-popup">Passing Data From Content Script to Popup</h2>
<p>You can’t expect users to open up their browser console to see transcripts. You can send ‘messages’ from the injected script to the popup, but if the popup is closed, it won’t be received. So, here’s the plan:</p>
<ol>
<li>When a new transcript is available, put it in chrome storage.</li>
<li>Send a message from the injected script to the popup to say there’s a new transcript available.</li>
<li>If the popup is open, display the latest transcript from storage.</li>
<li>When the popup opens, get the latest transcript (even if messages are missed, this will get us up to date).</li>
</ol>
<p><a href="https://developer.chrome.com/docs/extensions/reference/storage/">Chrome Storage</a> is an extension-specific API that acts similarly to localStorage, but is more specialized towards the needs of extensions and may be synced using Chrome Sync (this extension won’t be).</p>
<p>At the very top of <code>main.js</code>, above all other code, create a new transcript key in Chrome storage and set the initial value to an empty string:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({ transcript: </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>
<p>Replace <code>console.log(transcript)</code> with:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">      transcript: data.transcript </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> transcript</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Throws error when popup is closed, so this swallows the errors with catch.</span></span>
<span class="line"><span style="color: #C9D1D9">    chrome.runtime.</span><span style="color: #D2A8FF">sendMessage</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">      message: </span><span style="color: #A5D6FF">&#39;transcriptavailable&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    }).</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">err</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({}))</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>This gets the existing transcript and adds the new transcript to the end of it. Then, a message is sent with the value ‘transcriptavailable,’ which we can now listen for in <code>popup.js</code>.</p>
<p>At the bottom of <code>popup.js</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.runtime.onMessage.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(({ </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(message </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;transcriptavailable&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">transcript</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">).innerHTML </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Also, get the latest transcript at the very top of <code>popup.js</code>, above all other code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">showLatestTranscript</span><span style="color: #C9D1D9">()</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1657316996/blog/2022/07/transcribing-browser-tab-audio-chrome-extensions/transcripts-in-extension.png" alt="Transcripts are showing in the popup"></p>
<h2 id="stopping-transcription">Stopping Transcription</h2>
<p>Add a button, just below the start button, to <code>popup.html</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;stop&quot;</span><span style="color: #C9D1D9">&gt;Stop transcription&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>When the button is pressed, send a message back to the injected script. In <code>popup.js</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">tab</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getCurrentTab</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">tab) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Require an active tab&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    chrome.tabs.</span><span style="color: #D2A8FF">sendMessage</span><span style="color: #C9D1D9">(tab.id, { message: </span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>At the very bottom of <code>main.js</code>, below all other code, receive the message and close the WebSocket connection to Deepgram:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">chrome.runtime.onMessage.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(({ </span><span style="color: #FFA657">message</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(message </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;stop&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        socket.</span><span style="color: #D2A8FF">close</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Transcription ended&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Excellent.</p>
<h2 id="creating-an-options-page">Creating an Options Page</h2>
<p>Right now, your Deepgram API Key is coded right into the application. Next, you will build an options page for the user to enter their key, save it to Chrome storage, and use that value when connecting to Deepgram.</p>
<p>In <code>manifest.json</code>, add the following property:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #A5D6FF">&quot;options_page&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;options.html&quot;</span></span></code></pre>
<p>Create and open an <code>options.html</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Provide your Deepgram API Key&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;api&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Save&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;options.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Create and open an <code>options.js</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">api</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">getElementById</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;api&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">button</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// If it exists, load it in</span></span>
<span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;key&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">key</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(key) api.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> key</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">button.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> api.value</span></span>
<span class="line"><span style="color: #C9D1D9">  chrome.storage.local.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">({ key }, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Deepgram API Key Set&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Time to use the key. At the top of <code>main.js</code>, above all other code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> apiKey</span></span>
<span class="line"><span style="color: #C9D1D9">chrome.storage.local.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;key&#39;</span><span style="color: #C9D1D9">, ({ </span><span style="color: #FFA657">key</span><span style="color: #C9D1D9"> }) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> apiKey </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> key)</span></span></code></pre>
<p>After this, <code>apiKey</code> will either be <code>undefined</code> or be a string with the API Key.</p>
<p>Replace the following in <code>main.js</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Replace with 👇</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">apiKey) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide a Deepgram API Key in the options page.&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">socket </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen?tier=enhanced&#39;</span><span style="color: #C9D1D9">, [</span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">, apiKey])</span></span></code></pre>
<p>Right-click the extension and click <em>Options</em> to open the new page. Save your Deepgram API Key, and the extension should still work.</p>
<h2 id="accessing-browser-tab-audio-and-microphone">Accessing Browser Tab Audio and Microphone</h2>
<p>A hypothetical situation - you want to transcribe a browser-based video call with this extension. Everyone’s voice is transcribed, except yours - this is because your audio doesn’t come through the tab (or you would hear yourself!), so let’s alter this extension to allow for both your mic and tab audio to be transcribed together.</p>
<p>If you only want to transcribe tab audio, skip to the end.</p>
<p>At the moment, in <code>main.js</code>, you are requesting a user display, checking there is audio, and piping the resulting stream into a MediaRecorder. Now, we must:</p>
<ol>
<li>Get access to a user display and check there if is audio.</li>
<li>Get access to a user audio device (microphone).</li>
<li>Create a new, empty <code>AudioContext</code>.</li>
<li>Mix the two audio sources together as sources in the single <code>AudioContext</code>.</li>
<li>Create a MediaRecorder with the <code>AudioContext</code>, now containing two sources.</li>
</ol>
<p>At the very bottom of main.js, below all other code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// https://stackoverflow.com/a/47071576</span></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">mix</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">audioContext</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">streams</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">dest</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> audioContext.</span><span style="color: #D2A8FF">createMediaStreamDestination</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    streams.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">source</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> audioContext.</span><span style="color: #D2A8FF">createMediaStreamSource</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">        source.</span><span style="color: #D2A8FF">connect</span><span style="color: #C9D1D9">(dest)</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> dest.stream</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Replace the following in <code>main.js</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Replace with 👇</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">micStream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">audioContext</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">AudioContext</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mixed</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">mix</span><span style="color: #C9D1D9">(audioContext, [stream, micStream])</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">recorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(mixed, { mimeType: </span><span style="color: #A5D6FF">&#39;audio/webm&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>
<p>Add the <code>async</code> keyword just before <code>stream</code> in the <code>.then()</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getDisplayMedia</span><span style="color: #C9D1D9">({ video: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span></code></pre>
<p>Boom. Done.</p>
<h2 id="next-steps">Next Steps</h2>
<p>There’s so much you can do to improve your Chrome extension - make it look nicer with some CSS, change how you display transcripts or alter the extension icon when it is recording. You may also consider using Deepgram features such as <a href="https://developers.deepgram.com/documentation/features/diarize/">diarization</a> to detect different speakers and display them differently.</p>
<p>You can find the full finished code for this project on GitHub at <a href="https://github.com/deepgram-devs/transcription-chrome-extension">deepgram-devs/transcription-chrome-extension</a>. As ever, if you have any questions, please feel free to reach out on Twitter (we are <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>).</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribing-browser-tab-audio-chrome-extensions/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
