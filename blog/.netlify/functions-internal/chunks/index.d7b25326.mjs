import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-you-start", "text": "Before You Start" }, { "depth": 2, "slug": "set-up-application", "text": "Set Up Application" }, { "depth": 2, "slug": "create-a-recallai-helper-function", "text": "Create a Recall.ai Helper Function" }, { "depth": 2, "slug": "use-recallai-to-add-a-bot-to-a-zoom-call", "text": "Use Recall.ai To Add a Bot to a Zoom Call" }, { "depth": 2, "slug": "make-a-recallai-bot-leave-a-zoom-call", "text": "Make a Recall.ai Bot Leave a Zoom Call" }, { "depth": 2, "slug": "show-data-from-call", "text": "Show Data From Call" }, { "depth": 3, "slug": "get-all-speaker-usernames", "text": "Get All Speaker Usernames" }, { "depth": 3, "slug": "show-each-speakers-turn-count", "text": "Show Each Speaker\u2019s Turn Count" }, { "depth": 3, "slug": "display-call-transcript-with-usernames", "text": "Display Call Transcript with Usernames" }, { "depth": 3, "slug": "calculate-each-speakers-speaking-time", "text": "Calculate Each Speaker\u2019s Speaking Time" }, { "depth": 2, "slug": "the-world-is-your-oyster", "text": "The World Is Your Oyster" }], "source": "\n[Recall](https://www.recall.ai) provides a developer API to get real-time meeting data from a number of different platforms. It does this by sending Recall bots into meetings to observe what is happening and then provide data on-demand or in real-time.  As well as transcripts, they provide metadata including a participant list and linked calendar invite.\n\nIn this tutorial, you will build a virtual presentation coaching application. The application will allow you to send a Recall bot into a Zoom call, remove them, and get insights once the call is over. One of the great things about Recall is their support of other platforms like Google Meet, Microsoft Teams, and WebEx with no additional code.\n\nFor this project, we'll complete the following steps:\n\n1.  A\uFEFFdd a bot to a Zoom call\n2.  G\uFEFFet data about speakers in the call\n3.  C\uFEFFalculate speaker turn counts (to see if you took up more turns than others)\n4.  C\uFEFFreate a speaker-separated transcript\n5.  C\uFEFFalculate talk-time per speaker\n\n## Before You Start\n\nMake sure you have [Node.js](https://nodejs.org/en/) installed. You will need a [Deepgram API Key](https://console.deepgram.com/signup?jump=keys) and a [Recall API Key](https://www.recall.ai).\n\nCreate a new directory for this project and open it in a code editor. Create a `.env` file and populate it with your keys:\n\n    RECALL_API_KEY=your-key-here\n    DEEPGRAM_API_KEY=your-key-here\n\nCreate a `package.json` file with `npm init -y` and then install our dependencies:\n\n```shell\nnpm install dotenv express hbs axios\n```\n\nCreate an `index.js` file and open it in your code editor.\n\n## Set Up Application\n\nImport your dependencies:\n\n```javascript\nimport 'dotenv/config'\nimport axios from 'axios'\nimport express from 'express'\n```\n\nSet up your express application:\n\n```javascript\nconst app = express()\napp.set('view engine', 'hbs')\napp.use(express.urlencoded({ extended: false }))\n\n// Further code goes here\n\nconst PORT = process.env.PORT || 3000\napp.listen(PORT, () => console.log(`Listening on port ${PORT}`))\n```\n\nCreate a route handler to load the initial page. Firstly, create a `views` directory and an `index.hbs` file inside of it. `.hbs` files use [Handlebars](https://handlebarsjs.com) to add conditional and looping logic to HTML files. In the new view file, add:\n\n```html\n<h1>Call Coacher</h1>\n```\n\nInside of `index.js`, render the view:\n\n```javascript\napp.get('/', (req, res) => res.render('index'))\n```\n\nStart your server with `node index.js`, visit [localhost:3000](http://localhost:3000), and you should see **Call Coacher**.\n\n## Create a Recall.ai Helper Function\n\n[Recall's API Reference](https://recallai.readme.io/) shows all of the available endpoints to manage bots - your application will use four of them. To make your code more readable, create a reusable `recall()` helper method at the very bottom of your `index.js` file:\n\n```javascript\nasync function recall(method, path, data) {\n  try {\n    const payload = {\n      method,\n      url: `https://api.recall.ai/api/v1${path}`,\n      headers: {\n          Authorization: `Token ${process.env.RECALL_API_KEY}`\n      }\n    }\n    if(data) payload.data = data\n    const response = await axios(payload)\n    return response.data\n  } catch(error) {\n    throw error\n  }\n}\n```\n\nNow, for example, endpoints can be accessed like so:\n\n```javascript\nconst bots = await recall('get', '/bot')\nconst newBot = await recall('post', '/bot', { meeting_url: '...' })\n```\n\n## Use Recall.ai To Add a Bot to a Zoom Call\n\nAdd a new form to `views/index.hbs`:\n\n```html\n<h2>Add a bot to a call</h2>\n<form action=\"/join\" method=\"post\">\n    <label for=\"meeting_url\">Meeting URL</label>\n    <input type=\"text\" id=\"meeting_url\" name=\"meeting_url\"><br>\n\n    <label for=\"bot_name\">Bot Name</label>\n    <input type=\"text\" id=\"bot_name\" name=\"bot_name\">\n\n    <input type=\"submit\" value=\"join\">\n</form>\n```\n\nProviding a bot name is optional, but your application will allow users to specify it. When submitted, this form will send a POST request to `/join`. Its payload will contain `meeting_url` and `bot_name`.\n\nAdd the following to `index.js` underneath the existing route handler for the homepage:\n\n```javascript\nlet bots = []\napp.post('/join', async (req, res) => {\n    try {\n        const { meeting_url, bot_name } = req.body\n        // Adds bot to call, returned data does not include meeting_url\n        const bot = await recall('post', '/bot', { meeting_url, bot_name })\n        // Add new bot to bots array\n        bots.push({ ...bot, meeting_url })\n        // Re-render the homepage, making a message available to the template\n        res.render('index', { message: 'The bot has joined your call' })\n    } catch(error) {\n        console.log(error)\n        res.render('index', { message: 'There has been a problem adding the bot' })\n    }\n})\n```\n\nBeing able to send dynamic data into templates is a feature available by including handlebars in our application. At the bottom of `index.hbs` show the message:\n\n```html\n<p>{{ message }}</p>\n```\n\nThe message is empty (leaving an empty paragraph) when initially loading the page and will show the message after submitting the form.\n\n*Try it out! Restart your server, create a new Zoom call, get the meeting invite URL and submit it in the form. You should have a bot immediately join you with the bot name you specified.*\n\n## Make a Recall.ai Bot Leave a Zoom Call\n\nCurrently, the only way to make the bot leave the call is to end it for everyone (or manually remove it in the Zoom interface). Recall also provide an endpoint to remove a bot. Add a new form below the previous one in `index.hbs`:\n\n```html\n<h2>Leave call</h2>\n<form action=\"/leave\" method=\"post\">\n    <label for=\"meeting_url\">Meeting URL</label>\n    <input type=\"text\" id=\"meeting_url\" name=\"meeting_url\">\n    <input type=\"submit\" value=\"leave\">\n</form>\n```\n\nIn `index.js` create a new route handler:\n\n```javascript\napp.post('/leave', async (req, res) => {\n  try {\n    const { meeting_url } = req.body\n    // Get the bot from the bots array with matching meeting_url\n    const { id } = bots.find(bot => bot.meeting_url == meeting_url)\n    // Remove bot form call\n    await recall('post', `/bot/${id}/leave_call`)\n    // Redirect to /:botId\n    res.redirect(`/${id}`)\n  } catch(error) {\n    console.log(error)\n    res.render('index', { message: 'There has been a problem removing the bot' })\n  }\n})\n```\n\n*Restart your server and try to add and remove a bot. The bot should leave the call when the new form is submitted, and you should be redirected to a new page (causing an error because it does not yet exist.)*\n\n## Show Data From Call\n\nCreate a new `data.hbs` file in the `views` directory:\n\n```html\n<h1>Data for {{ id }}</h1>\n{{#if video_url}}\n  <a href=\"{{video_url}}\">Watch video until {{ media_retention_end }}</a>\n{{/if}}\n```\n\nIn `index.js` add a new route handler:\n\n```javascript\napp.get('/:botId', async (req, res) => {\n  try {\n    // Get bot data\n    const bot = await recall('get', `/bot/${req.params.botId}`)\n    // Get transcript (each object is one speaker turn)\n    const turns = await recall('get', `/bot/${req.params.botId}/transcript`)\n\n    // Further code here\n\n    // Return all properties in bot object\n    res.render('data', bot)\n  } catch(error) {\n    res.send('There has been a problem loading this bot data')\n  }\n})\n```\n\n*Restart your server, start a new Zoom call (preferably with someone else), speak for a couple of minutes, remove the bot with the form, and you should be redirected to a page.*\n\n![Webpage showing the bot ID and a single link with the video recording link](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/video_url_y6mxzu.png)\n\n### Get All Speaker Usernames\n\nA full timeline for the call including who spoke and when is made available as part of the `bot` object. Extract just usernames and de-duplicate the list by adding the following:\n\n```javascript\nconst { timeline } = bot.speaker_timeline\nlet usernames = [...new Set(timeline.map(turn => { username: turn.users[0].username }))]\n```\n\nUpdate the `res.render()` method to the following:\n\n```javascript\nres.render('data', { ...bot, usernames })\n```\n\nFinally, add a list of who spoke to the bottom of `data.hbs`:\n\n```html\n<h2>Who spoke:</h2>\n<ul>\n  {{#each usernames}}\n    <li>\n      <span>{{ this.username }}</span>\n    </li>\n  {{/each}}\n</ul>\n```\n\n![At the bottom of the page is a two-item bullet list, each showing one username.](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/who-spoke_ydnkfh.png)\n\n### Show Each Speaker's Turn Count\n\nBelow where `usernames` is defined, add the following:\n\n```javascript\nfor(let i=0; i<usernames.length; i++) {\n  let userTurns = timeline.filter(turn => turn.users[0].username == usernames[i])\n  usernames[i] = {\n    username: usernames[i],\n    turns: userTurns.length\n  }\n}\n```\n\nNow each `username` in the `usernames` array also has a `turns` property, which is equal to the number of times they spoke in the call. Update the loop to show the new data:\n\n```html\n{{#each usernames}}\n  <li>\n    <span>{{ this.username }}</span>\n    <span>{{ this.turns }} turns speaking</span>\n  </li>\n{{/each}}\n```\n\n### Display Call Transcript with Usernames\n\nRecall is a Deepgram customer and provides our accurate AI-powered transcription within their product. The transcript is already available in our application in the `turns` variable. Add the following below the for loop in `index.js`:\n\n```javascript\nlet transcript = []\nfor(let i=0; i<turns.length; i++) {\n  // Get all words for this turn\n  const turnWords = turns[i].words\n  // Form a single stream of words\n  const words = turnWords.map(w => w.text).join(' ')\n  // Add to transcript array along with speaker username\n  transcript.push({ speaker: turns[i].speaker, words })\n}\n```\n\nAdd the transcript to the rendered data:\n\n```javascript\nres.render('data', { ...bot, usernames, transcript })\n```\n\nFinally, in `data.hbs`, add the following to the bottom:\n\n```html\n<h2>Transcript</h2>\n{{#each transcript}}\n  <p><b>{{ this.speaker }}: </b>{{ this.words }}</p>\n{{/each}}\n```\n\n![Webpage now shows everything that was said, split by turns. Each turn starts with the speaker's username, and then what they said.](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/transcript_qnaka4.png)\n\n### Calculate Each Speaker's Speaking Time\n\nEach word in the transcript is accompanied by a word's start and end time. Using this data, each speaker's 'talking time' can be calculated. Firstly, `turns` is added to `usernames[i]`, add a new `speakTime` value:\n\n```javascript\nusernames[i] = {\n  username: usernames[i],\n  turns: userTurns.length,\n  speakTime: 0\n}\n```\n\nCalculate the `speakTime` just after you add transcripts with `transcripts.push()`, and add it to the speaker's entry in the `username` array:\n\n```javascript\nconst speakTime = +(turnWords[turnWords.length-1].end_timestamp - turnWords[0].start_timestamp).toFixed(2)\nconst user = usernames.findIndex(u => u.username == turns[i].speaker)\nusernames[user].speakTime += speakTime\n```\n\nFinally, update `data.hbs` to contain this new data just below where each speaker's turns are shown:\n\n```html\n<span>{{ this.speakTime }}s total talking time</span>\n```\n\n![Each username now displays the number of seconds they spoke for](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/talk_time_wqtcod.png)\n\n## The World Is Your Oyster\n\nThis application only scratches the surface of the analysis you can perform with data returned by Recall and Deepgram. You may choose to [detect non-inclusive language](https://developers.deepgram.com/blog/2022/09/uninclusive-language-retext/), summarize what has been said, and more. Recall provides a developer-friendly way to avoid writing 'glue' into various conferencing platforms, so if you want to use Google Meet, Microsoft Teams, WebEx, or others, there is no more code to write. Fab!\n\nIf you have any questions, please don't hesitate to get in touch. We love to help!\n\n", "html": '<p><a href="https://www.recall.ai">Recall</a> provides a developer API to get real-time meeting data from a number of different platforms. It does this by sending Recall bots into meetings to observe what is happening and then provide data on-demand or in real-time.  As well as transcripts, they provide metadata including a participant list and linked calendar invite.</p>\n<p>In this tutorial, you will build a virtual presentation coaching application. The application will allow you to send a Recall bot into a Zoom call, remove them, and get insights once the call is over. One of the great things about Recall is their support of other platforms like Google Meet, Microsoft Teams, and WebEx with no additional code.</p>\n<p>For this project, we\u2019ll complete the following steps:</p>\n<ol>\n<li>A\uFEFFdd a bot to a Zoom call</li>\n<li>G\uFEFFet data about speakers in the call</li>\n<li>C\uFEFFalculate speaker turn counts (to see if you took up more turns than others)</li>\n<li>C\uFEFFreate a speaker-separated transcript</li>\n<li>C\uFEFFalculate talk-time per speaker</li>\n</ol>\n<h2 id="before-you-start">Before You Start</h2>\n<p>Make sure you have <a href="https://nodejs.org/en/">Node.js</a> installed. You will need a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a> and a <a href="https://www.recall.ai">Recall API Key</a>.</p>\n<p>Create a new directory for this project and open it in a code editor. Create a <code is:raw>.env</code> file and populate it with your keys:</p>\n<p>RECALL_API_KEY=your-key-here\nDEEPGRAM_API_KEY=your-key-here</p>\n<p>Create a <code is:raw>package.json</code> file with <code is:raw>npm init -y</code> and then install our dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm install dotenv express hbs axios</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file and open it in your code editor.</p>\n<h2 id="set-up-application">Set Up Application</h2>\n<p>Import your dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dotenv/config&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> axios </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;axios&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> express </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;express&#39;</span></span></code></pre>\n<p>Set up your express application:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;view engine&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;hbs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">urlencoded</span><span style="color: #C9D1D9">({ extended: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> }))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3000</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Listening on port ${</span><span style="color: #79C0FF">PORT</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>Create a route handler to load the initial page. Firstly, create a <code is:raw>views</code> directory and an <code is:raw>index.hbs</code> file inside of it. <code is:raw>.hbs</code> files use <a href="https://handlebarsjs.com">Handlebars</a> to add conditional and looping logic to HTML files. In the new view file, add:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Call Coacher&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Inside of <code is:raw>index.js</code>, render the view:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>Start your server with <code is:raw>node index.js</code>, visit <a href="http://localhost:3000">localhost:3000</a>, and you should see <strong>Call Coacher</strong>.</p>\n<h2 id="create-a-recallai-helper-function">Create a Recall.ai Helper Function</h2>\n<p><a href="https://recallai.readme.io/">Recall\u2019s API Reference</a> shows all of the available endpoints to manage bots - your application will use four of them. To make your code more readable, create a reusable <code is:raw>recall()</code> helper method at the very bottom of your <code is:raw>index.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">method</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">path</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">payload</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      method,</span></span>\n<span class="line"><span style="color: #C9D1D9">      url: </span><span style="color: #A5D6FF">`https://api.recall.ai/api/v1${</span><span style="color: #C9D1D9">path</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">          Authorization: </span><span style="color: #A5D6FF">`Token ${</span><span style="color: #C9D1D9">process</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">env</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">RECALL_API_KEY</span><span style="color: #A5D6FF">}`</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(data) payload.data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">(payload)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response.data</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">throw</span><span style="color: #C9D1D9"> error</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now, for example, endpoints can be accessed like so:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bots</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">newBot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">, { meeting_url: </span><span style="color: #A5D6FF">&#39;...&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<h2 id="use-recallai-to-add-a-bot-to-a-zoom-call">Use Recall.ai To Add a Bot to a Zoom Call</h2>\n<p>Add a new form to <code is:raw>views/index.hbs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Add a bot to a call&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/join&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;Meeting URL&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9">&gt;Bot Name&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;join&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Providing a bot name is optional, but your application will allow users to specify it. When submitted, this form will send a POST request to <code is:raw>/join</code>. Its payload will contain <code is:raw>meeting_url</code> and <code is:raw>bot_name</code>.</p>\n<p>Add the following to <code is:raw>index.js</code> underneath the existing route handler for the homepage:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bots </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/join&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">meeting_url</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">bot_name</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Adds bot to call, returned data does not include meeting_url</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">, { meeting_url, bot_name })</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Add new bot to bots array</span></span>\n<span class="line"><span style="color: #C9D1D9">        bots.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, meeting_url })</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Re-render the homepage, making a message available to the template</span></span>\n<span class="line"><span style="color: #C9D1D9">        res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;The bot has joined your call&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error)</span></span>\n<span class="line"><span style="color: #C9D1D9">        res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;There has been a problem adding the bot&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Being able to send dynamic data into templates is a feature available by including handlebars in our application. At the bottom of <code is:raw>index.hbs</code> show the message:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;{{ message }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The message is empty (leaving an empty paragraph) when initially loading the page and will show the message after submitting the form.</p>\n<p><em>Try it out! Restart your server, create a new Zoom call, get the meeting invite URL and submit it in the form. You should have a bot immediately join you with the bot name you specified.</em></p>\n<h2 id="make-a-recallai-bot-leave-a-zoom-call">Make a Recall.ai Bot Leave a Zoom Call</h2>\n<p>Currently, the only way to make the bot leave the call is to end it for everyone (or manually remove it in the Zoom interface). Recall also provide an endpoint to remove a bot. Add a new form below the previous one in <code is:raw>index.hbs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Leave call&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/leave&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;Meeting URL&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;leave&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In <code is:raw>index.js</code> create a new route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/leave&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">meeting_url</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get the bot from the bots array with matching meeting_url</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> bots.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> bot.meeting_url </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> meeting_url)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Remove bot form call</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">`/bot/${</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">}/leave_call`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Redirect to /:botId</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">redirect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`/${</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error)</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;There has been a problem removing the bot&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p><em>Restart your server and try to add and remove a bot. The bot should leave the call when the new form is submitted, and you should be redirected to a new page (causing an error because it does not yet exist.)</em></p>\n<h2 id="show-data-from-call">Show Data From Call</h2>\n<p>Create a new <code is:raw>data.hbs</code> file in the <code is:raw>views</code> directory:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Data for {{ id }}&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{#if video_url}}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;{{video_url}}&quot;</span><span style="color: #C9D1D9">&gt;Watch video until {{ media_retention_end }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{/if}}</span></span></code></pre>\n<p>In <code is:raw>index.js</code> add a new route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/:botId&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get bot data</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">`/bot/${</span><span style="color: #C9D1D9">req</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">params</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">botId</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get transcript (each object is one speaker turn)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">turns</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">`/bot/${</span><span style="color: #C9D1D9">req</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">params</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">botId</span><span style="color: #A5D6FF">}/transcript`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Return all properties in bot object</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, bot)</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;There has been a problem loading this bot data&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p><em>Restart your server, start a new Zoom call (preferably with someone else), speak for a couple of minutes, remove the bot with the form, and you should be redirected to a page.</em></p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/video_url_y6mxzu.png" alt="Webpage showing the bot ID and a single link with the video recording link"></p>\n<h3 id="get-all-speaker-usernames">Get All Speaker Usernames</h3>\n<p>A full timeline for the call including who spoke and when is made available as part of the <code is:raw>bot</code> object. Extract just usernames and de-duplicate the list by adding the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">timeline</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> bot.speaker_timeline</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> usernames </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Set</span><span style="color: #C9D1D9">(timeline.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">turn</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">username</span><span style="color: #C9D1D9">: turn.users[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].username }))]</span></span></code></pre>\n<p>Update the <code is:raw>res.render()</code> method to the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, { </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, usernames })</span></span></code></pre>\n<p>Finally, add a list of who spoke to the bottom of <code is:raw>data.hbs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Who spoke:&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  {{#each usernames}}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.username }}&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  {{/each}}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/who-spoke_ydnkfh.png" alt="At the bottom of the page is a two-item bullet list, each showing one username."></p>\n<h3 id="show-each-speakers-turn-count">Show Each Speaker\u2019s Turn Count</h3>\n<p>Below where <code is:raw>usernames</code> is defined, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">usernames.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> userTurns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timeline.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">turn</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> turn.users[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].username </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> usernames[i])</span></span>\n<span class="line"><span style="color: #C9D1D9">  usernames[i] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    username: usernames[i],</span></span>\n<span class="line"><span style="color: #C9D1D9">    turns: userTurns.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now each <code is:raw>username</code> in the <code is:raw>usernames</code> array also has a <code is:raw>turns</code> property, which is equal to the number of times they spoke in the call. Update the loop to show the new data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{{#each usernames}}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.username }}&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.turns }} turns speaking&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{/each}}</span></span></code></pre>\n<h3 id="display-call-transcript-with-usernames">Display Call Transcript with Usernames</h3>\n<p>Recall is a Deepgram customer and provides our accurate AI-powered transcription within their product. The transcript is already available in our application in the <code is:raw>turns</code> variable. Add the following below the for loop in <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">turns.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get all words for this turn</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">turnWords</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> turns[i].words</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Form a single stream of words</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">words</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> turnWords.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">w</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> w.text).</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add to transcript array along with speaker username</span></span>\n<span class="line"><span style="color: #C9D1D9">  transcript.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ speaker: turns[i].speaker, words })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Add the transcript to the rendered data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, { </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, usernames, transcript })</span></span></code></pre>\n<p>Finally, in <code is:raw>data.hbs</code>, add the following to the bottom:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Transcript&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{#each transcript}}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ this.speaker }}: &lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ this.words }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{/each}}</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/transcript_qnaka4.png" alt="Webpage now shows everything that was said, split by turns. Each turn starts with the speaker&#x27;s username, and then what they said."></p>\n<h3 id="calculate-each-speakers-speaking-time">Calculate Each Speaker\u2019s Speaking Time</h3>\n<p>Each word in the transcript is accompanied by a word\u2019s start and end time. Using this data, each speaker\u2019s \u2018talking time\u2019 can be calculated. Firstly, <code is:raw>turns</code> is added to <code is:raw>usernames[i]</code>, add a new <code is:raw>speakTime</code> value:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">usernames[i] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  username: usernames[i],</span></span>\n<span class="line"><span style="color: #C9D1D9">  turns: userTurns.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  speakTime: </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Calculate the <code is:raw>speakTime</code> just after you add transcripts with <code is:raw>transcripts.push()</code>, and add it to the speaker\u2019s entry in the <code is:raw>username</code> array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">speakTime</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">(turnWords[turnWords.</span><span style="color: #79C0FF">length</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].end_timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> turnWords[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start_timestamp).</span><span style="color: #D2A8FF">toFixed</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">user</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> usernames.</span><span style="color: #D2A8FF">findIndex</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">u</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> u.username </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> turns[i].speaker)</span></span>\n<span class="line"><span style="color: #C9D1D9">usernames[user].speakTime </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speakTime</span></span></code></pre>\n<p>Finally, update <code is:raw>data.hbs</code> to contain this new data just below where each speaker\u2019s turns are shown:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.speakTime }}s total talking time&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/talk_time_wqtcod.png" alt="Each username now displays the number of seconds they spoke for"></p>\n<h2 id="the-world-is-your-oyster">The World Is Your Oyster</h2>\n<p>This application only scratches the surface of the analysis you can perform with data returned by Recall and Deepgram. You may choose to <a href="https://developers.deepgram.com/blog/2022/09/uninclusive-language-retext/">detect non-inclusive language</a>, summarize what has been said, and more. Recall provides a developer-friendly way to avoid writing \u2018glue\u2019 into various conferencing platforms, so if you want to use Google Meet, Microsoft Teams, WebEx, or others, there is no more code to write. Fab!</p>\n<p>If you have any questions, please don\u2019t hesitate to get in touch. We love to help!</p>' };
const frontmatter = { "title": "Build a Presentation Coaching Application with Recall", "description": "Learn how to use Deepgram customer Recall.ai to get data from live video calls in just a few lines of code.", "date": "2022-10-19T19:50:23.850Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1664560621/blog/build-a-presentation-coaching-application-with-recall/2209-Build-a-Presentation-Coaching-App-with-Recall-blog_2x_cnyagk.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["partner", "javascript"], "shorturls": { "share": "https://dpgr.am/45503ab", "twitter": "https://dpgr.am/c900012", "linkedin": "https://dpgr.am/f9bf8ce", "reddit": "https://dpgr.am/d96ca5d", "facebook": "https://dpgr.am/b528b52" }, "astro": { "headings": [{ "depth": 2, "slug": "before-you-start", "text": "Before You Start" }, { "depth": 2, "slug": "set-up-application", "text": "Set Up Application" }, { "depth": 2, "slug": "create-a-recallai-helper-function", "text": "Create a Recall.ai Helper Function" }, { "depth": 2, "slug": "use-recallai-to-add-a-bot-to-a-zoom-call", "text": "Use Recall.ai To Add a Bot to a Zoom Call" }, { "depth": 2, "slug": "make-a-recallai-bot-leave-a-zoom-call", "text": "Make a Recall.ai Bot Leave a Zoom Call" }, { "depth": 2, "slug": "show-data-from-call", "text": "Show Data From Call" }, { "depth": 3, "slug": "get-all-speaker-usernames", "text": "Get All Speaker Usernames" }, { "depth": 3, "slug": "show-each-speakers-turn-count", "text": "Show Each Speaker\u2019s Turn Count" }, { "depth": 3, "slug": "display-call-transcript-with-usernames", "text": "Display Call Transcript with Usernames" }, { "depth": 3, "slug": "calculate-each-speakers-speaking-time", "text": "Calculate Each Speaker\u2019s Speaking Time" }, { "depth": 2, "slug": "the-world-is-your-oyster", "text": "The World Is Your Oyster" }], "source": "\n[Recall](https://www.recall.ai) provides a developer API to get real-time meeting data from a number of different platforms. It does this by sending Recall bots into meetings to observe what is happening and then provide data on-demand or in real-time.  As well as transcripts, they provide metadata including a participant list and linked calendar invite.\n\nIn this tutorial, you will build a virtual presentation coaching application. The application will allow you to send a Recall bot into a Zoom call, remove them, and get insights once the call is over. One of the great things about Recall is their support of other platforms like Google Meet, Microsoft Teams, and WebEx with no additional code.\n\nFor this project, we'll complete the following steps:\n\n1.  A\uFEFFdd a bot to a Zoom call\n2.  G\uFEFFet data about speakers in the call\n3.  C\uFEFFalculate speaker turn counts (to see if you took up more turns than others)\n4.  C\uFEFFreate a speaker-separated transcript\n5.  C\uFEFFalculate talk-time per speaker\n\n## Before You Start\n\nMake sure you have [Node.js](https://nodejs.org/en/) installed. You will need a [Deepgram API Key](https://console.deepgram.com/signup?jump=keys) and a [Recall API Key](https://www.recall.ai).\n\nCreate a new directory for this project and open it in a code editor. Create a `.env` file and populate it with your keys:\n\n    RECALL_API_KEY=your-key-here\n    DEEPGRAM_API_KEY=your-key-here\n\nCreate a `package.json` file with `npm init -y` and then install our dependencies:\n\n```shell\nnpm install dotenv express hbs axios\n```\n\nCreate an `index.js` file and open it in your code editor.\n\n## Set Up Application\n\nImport your dependencies:\n\n```javascript\nimport 'dotenv/config'\nimport axios from 'axios'\nimport express from 'express'\n```\n\nSet up your express application:\n\n```javascript\nconst app = express()\napp.set('view engine', 'hbs')\napp.use(express.urlencoded({ extended: false }))\n\n// Further code goes here\n\nconst PORT = process.env.PORT || 3000\napp.listen(PORT, () => console.log(`Listening on port ${PORT}`))\n```\n\nCreate a route handler to load the initial page. Firstly, create a `views` directory and an `index.hbs` file inside of it. `.hbs` files use [Handlebars](https://handlebarsjs.com) to add conditional and looping logic to HTML files. In the new view file, add:\n\n```html\n<h1>Call Coacher</h1>\n```\n\nInside of `index.js`, render the view:\n\n```javascript\napp.get('/', (req, res) => res.render('index'))\n```\n\nStart your server with `node index.js`, visit [localhost:3000](http://localhost:3000), and you should see **Call Coacher**.\n\n## Create a Recall.ai Helper Function\n\n[Recall's API Reference](https://recallai.readme.io/) shows all of the available endpoints to manage bots - your application will use four of them. To make your code more readable, create a reusable `recall()` helper method at the very bottom of your `index.js` file:\n\n```javascript\nasync function recall(method, path, data) {\n  try {\n    const payload = {\n      method,\n      url: `https://api.recall.ai/api/v1${path}`,\n      headers: {\n          Authorization: `Token ${process.env.RECALL_API_KEY}`\n      }\n    }\n    if(data) payload.data = data\n    const response = await axios(payload)\n    return response.data\n  } catch(error) {\n    throw error\n  }\n}\n```\n\nNow, for example, endpoints can be accessed like so:\n\n```javascript\nconst bots = await recall('get', '/bot')\nconst newBot = await recall('post', '/bot', { meeting_url: '...' })\n```\n\n## Use Recall.ai To Add a Bot to a Zoom Call\n\nAdd a new form to `views/index.hbs`:\n\n```html\n<h2>Add a bot to a call</h2>\n<form action=\"/join\" method=\"post\">\n    <label for=\"meeting_url\">Meeting URL</label>\n    <input type=\"text\" id=\"meeting_url\" name=\"meeting_url\"><br>\n\n    <label for=\"bot_name\">Bot Name</label>\n    <input type=\"text\" id=\"bot_name\" name=\"bot_name\">\n\n    <input type=\"submit\" value=\"join\">\n</form>\n```\n\nProviding a bot name is optional, but your application will allow users to specify it. When submitted, this form will send a POST request to `/join`. Its payload will contain `meeting_url` and `bot_name`.\n\nAdd the following to `index.js` underneath the existing route handler for the homepage:\n\n```javascript\nlet bots = []\napp.post('/join', async (req, res) => {\n    try {\n        const { meeting_url, bot_name } = req.body\n        // Adds bot to call, returned data does not include meeting_url\n        const bot = await recall('post', '/bot', { meeting_url, bot_name })\n        // Add new bot to bots array\n        bots.push({ ...bot, meeting_url })\n        // Re-render the homepage, making a message available to the template\n        res.render('index', { message: 'The bot has joined your call' })\n    } catch(error) {\n        console.log(error)\n        res.render('index', { message: 'There has been a problem adding the bot' })\n    }\n})\n```\n\nBeing able to send dynamic data into templates is a feature available by including handlebars in our application. At the bottom of `index.hbs` show the message:\n\n```html\n<p>{{ message }}</p>\n```\n\nThe message is empty (leaving an empty paragraph) when initially loading the page and will show the message after submitting the form.\n\n*Try it out! Restart your server, create a new Zoom call, get the meeting invite URL and submit it in the form. You should have a bot immediately join you with the bot name you specified.*\n\n## Make a Recall.ai Bot Leave a Zoom Call\n\nCurrently, the only way to make the bot leave the call is to end it for everyone (or manually remove it in the Zoom interface). Recall also provide an endpoint to remove a bot. Add a new form below the previous one in `index.hbs`:\n\n```html\n<h2>Leave call</h2>\n<form action=\"/leave\" method=\"post\">\n    <label for=\"meeting_url\">Meeting URL</label>\n    <input type=\"text\" id=\"meeting_url\" name=\"meeting_url\">\n    <input type=\"submit\" value=\"leave\">\n</form>\n```\n\nIn `index.js` create a new route handler:\n\n```javascript\napp.post('/leave', async (req, res) => {\n  try {\n    const { meeting_url } = req.body\n    // Get the bot from the bots array with matching meeting_url\n    const { id } = bots.find(bot => bot.meeting_url == meeting_url)\n    // Remove bot form call\n    await recall('post', `/bot/${id}/leave_call`)\n    // Redirect to /:botId\n    res.redirect(`/${id}`)\n  } catch(error) {\n    console.log(error)\n    res.render('index', { message: 'There has been a problem removing the bot' })\n  }\n})\n```\n\n*Restart your server and try to add and remove a bot. The bot should leave the call when the new form is submitted, and you should be redirected to a new page (causing an error because it does not yet exist.)*\n\n## Show Data From Call\n\nCreate a new `data.hbs` file in the `views` directory:\n\n```html\n<h1>Data for {{ id }}</h1>\n{{#if video_url}}\n  <a href=\"{{video_url}}\">Watch video until {{ media_retention_end }}</a>\n{{/if}}\n```\n\nIn `index.js` add a new route handler:\n\n```javascript\napp.get('/:botId', async (req, res) => {\n  try {\n    // Get bot data\n    const bot = await recall('get', `/bot/${req.params.botId}`)\n    // Get transcript (each object is one speaker turn)\n    const turns = await recall('get', `/bot/${req.params.botId}/transcript`)\n\n    // Further code here\n\n    // Return all properties in bot object\n    res.render('data', bot)\n  } catch(error) {\n    res.send('There has been a problem loading this bot data')\n  }\n})\n```\n\n*Restart your server, start a new Zoom call (preferably with someone else), speak for a couple of minutes, remove the bot with the form, and you should be redirected to a page.*\n\n![Webpage showing the bot ID and a single link with the video recording link](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/video_url_y6mxzu.png)\n\n### Get All Speaker Usernames\n\nA full timeline for the call including who spoke and when is made available as part of the `bot` object. Extract just usernames and de-duplicate the list by adding the following:\n\n```javascript\nconst { timeline } = bot.speaker_timeline\nlet usernames = [...new Set(timeline.map(turn => { username: turn.users[0].username }))]\n```\n\nUpdate the `res.render()` method to the following:\n\n```javascript\nres.render('data', { ...bot, usernames })\n```\n\nFinally, add a list of who spoke to the bottom of `data.hbs`:\n\n```html\n<h2>Who spoke:</h2>\n<ul>\n  {{#each usernames}}\n    <li>\n      <span>{{ this.username }}</span>\n    </li>\n  {{/each}}\n</ul>\n```\n\n![At the bottom of the page is a two-item bullet list, each showing one username.](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/who-spoke_ydnkfh.png)\n\n### Show Each Speaker's Turn Count\n\nBelow where `usernames` is defined, add the following:\n\n```javascript\nfor(let i=0; i<usernames.length; i++) {\n  let userTurns = timeline.filter(turn => turn.users[0].username == usernames[i])\n  usernames[i] = {\n    username: usernames[i],\n    turns: userTurns.length\n  }\n}\n```\n\nNow each `username` in the `usernames` array also has a `turns` property, which is equal to the number of times they spoke in the call. Update the loop to show the new data:\n\n```html\n{{#each usernames}}\n  <li>\n    <span>{{ this.username }}</span>\n    <span>{{ this.turns }} turns speaking</span>\n  </li>\n{{/each}}\n```\n\n### Display Call Transcript with Usernames\n\nRecall is a Deepgram customer and provides our accurate AI-powered transcription within their product. The transcript is already available in our application in the `turns` variable. Add the following below the for loop in `index.js`:\n\n```javascript\nlet transcript = []\nfor(let i=0; i<turns.length; i++) {\n  // Get all words for this turn\n  const turnWords = turns[i].words\n  // Form a single stream of words\n  const words = turnWords.map(w => w.text).join(' ')\n  // Add to transcript array along with speaker username\n  transcript.push({ speaker: turns[i].speaker, words })\n}\n```\n\nAdd the transcript to the rendered data:\n\n```javascript\nres.render('data', { ...bot, usernames, transcript })\n```\n\nFinally, in `data.hbs`, add the following to the bottom:\n\n```html\n<h2>Transcript</h2>\n{{#each transcript}}\n  <p><b>{{ this.speaker }}: </b>{{ this.words }}</p>\n{{/each}}\n```\n\n![Webpage now shows everything that was said, split by turns. Each turn starts with the speaker's username, and then what they said.](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/transcript_qnaka4.png)\n\n### Calculate Each Speaker's Speaking Time\n\nEach word in the transcript is accompanied by a word's start and end time. Using this data, each speaker's 'talking time' can be calculated. Firstly, `turns` is added to `usernames[i]`, add a new `speakTime` value:\n\n```javascript\nusernames[i] = {\n  username: usernames[i],\n  turns: userTurns.length,\n  speakTime: 0\n}\n```\n\nCalculate the `speakTime` just after you add transcripts with `transcripts.push()`, and add it to the speaker's entry in the `username` array:\n\n```javascript\nconst speakTime = +(turnWords[turnWords.length-1].end_timestamp - turnWords[0].start_timestamp).toFixed(2)\nconst user = usernames.findIndex(u => u.username == turns[i].speaker)\nusernames[user].speakTime += speakTime\n```\n\nFinally, update `data.hbs` to contain this new data just below where each speaker's turns are shown:\n\n```html\n<span>{{ this.speakTime }}s total talking time</span>\n```\n\n![Each username now displays the number of seconds they spoke for](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/talk_time_wqtcod.png)\n\n## The World Is Your Oyster\n\nThis application only scratches the surface of the analysis you can perform with data returned by Recall and Deepgram. You may choose to [detect non-inclusive language](https://developers.deepgram.com/blog/2022/09/uninclusive-language-retext/), summarize what has been said, and more. Recall provides a developer-friendly way to avoid writing 'glue' into various conferencing platforms, so if you want to use Google Meet, Microsoft Teams, WebEx, or others, there is no more code to write. Fab!\n\nIf you have any questions, please don't hesitate to get in touch. We love to help!\n\n", "html": '<p><a href="https://www.recall.ai">Recall</a> provides a developer API to get real-time meeting data from a number of different platforms. It does this by sending Recall bots into meetings to observe what is happening and then provide data on-demand or in real-time.  As well as transcripts, they provide metadata including a participant list and linked calendar invite.</p>\n<p>In this tutorial, you will build a virtual presentation coaching application. The application will allow you to send a Recall bot into a Zoom call, remove them, and get insights once the call is over. One of the great things about Recall is their support of other platforms like Google Meet, Microsoft Teams, and WebEx with no additional code.</p>\n<p>For this project, we\u2019ll complete the following steps:</p>\n<ol>\n<li>A\uFEFFdd a bot to a Zoom call</li>\n<li>G\uFEFFet data about speakers in the call</li>\n<li>C\uFEFFalculate speaker turn counts (to see if you took up more turns than others)</li>\n<li>C\uFEFFreate a speaker-separated transcript</li>\n<li>C\uFEFFalculate talk-time per speaker</li>\n</ol>\n<h2 id="before-you-start">Before You Start</h2>\n<p>Make sure you have <a href="https://nodejs.org/en/">Node.js</a> installed. You will need a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a> and a <a href="https://www.recall.ai">Recall API Key</a>.</p>\n<p>Create a new directory for this project and open it in a code editor. Create a <code is:raw>.env</code> file and populate it with your keys:</p>\n<p>RECALL_API_KEY=your-key-here\nDEEPGRAM_API_KEY=your-key-here</p>\n<p>Create a <code is:raw>package.json</code> file with <code is:raw>npm init -y</code> and then install our dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm install dotenv express hbs axios</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file and open it in your code editor.</p>\n<h2 id="set-up-application">Set Up Application</h2>\n<p>Import your dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dotenv/config&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> axios </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;axios&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> express </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;express&#39;</span></span></code></pre>\n<p>Set up your express application:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;view engine&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;hbs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">urlencoded</span><span style="color: #C9D1D9">({ extended: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> }))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3000</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Listening on port ${</span><span style="color: #79C0FF">PORT</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>Create a route handler to load the initial page. Firstly, create a <code is:raw>views</code> directory and an <code is:raw>index.hbs</code> file inside of it. <code is:raw>.hbs</code> files use <a href="https://handlebarsjs.com">Handlebars</a> to add conditional and looping logic to HTML files. In the new view file, add:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Call Coacher&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Inside of <code is:raw>index.js</code>, render the view:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>Start your server with <code is:raw>node index.js</code>, visit <a href="http://localhost:3000">localhost:3000</a>, and you should see <strong>Call Coacher</strong>.</p>\n<h2 id="create-a-recallai-helper-function">Create a Recall.ai Helper Function</h2>\n<p><a href="https://recallai.readme.io/">Recall\u2019s API Reference</a> shows all of the available endpoints to manage bots - your application will use four of them. To make your code more readable, create a reusable <code is:raw>recall()</code> helper method at the very bottom of your <code is:raw>index.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">method</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">path</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">payload</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      method,</span></span>\n<span class="line"><span style="color: #C9D1D9">      url: </span><span style="color: #A5D6FF">`https://api.recall.ai/api/v1${</span><span style="color: #C9D1D9">path</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">          Authorization: </span><span style="color: #A5D6FF">`Token ${</span><span style="color: #C9D1D9">process</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">env</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">RECALL_API_KEY</span><span style="color: #A5D6FF">}`</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(data) payload.data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">(payload)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response.data</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">throw</span><span style="color: #C9D1D9"> error</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now, for example, endpoints can be accessed like so:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bots</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">newBot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">, { meeting_url: </span><span style="color: #A5D6FF">&#39;...&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<h2 id="use-recallai-to-add-a-bot-to-a-zoom-call">Use Recall.ai To Add a Bot to a Zoom Call</h2>\n<p>Add a new form to <code is:raw>views/index.hbs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Add a bot to a call&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/join&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;Meeting URL&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9">&gt;Bot Name&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;join&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Providing a bot name is optional, but your application will allow users to specify it. When submitted, this form will send a POST request to <code is:raw>/join</code>. Its payload will contain <code is:raw>meeting_url</code> and <code is:raw>bot_name</code>.</p>\n<p>Add the following to <code is:raw>index.js</code> underneath the existing route handler for the homepage:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bots </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/join&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">meeting_url</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">bot_name</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Adds bot to call, returned data does not include meeting_url</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">, { meeting_url, bot_name })</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Add new bot to bots array</span></span>\n<span class="line"><span style="color: #C9D1D9">        bots.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, meeting_url })</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Re-render the homepage, making a message available to the template</span></span>\n<span class="line"><span style="color: #C9D1D9">        res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;The bot has joined your call&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error)</span></span>\n<span class="line"><span style="color: #C9D1D9">        res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;There has been a problem adding the bot&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Being able to send dynamic data into templates is a feature available by including handlebars in our application. At the bottom of <code is:raw>index.hbs</code> show the message:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;{{ message }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The message is empty (leaving an empty paragraph) when initially loading the page and will show the message after submitting the form.</p>\n<p><em>Try it out! Restart your server, create a new Zoom call, get the meeting invite URL and submit it in the form. You should have a bot immediately join you with the bot name you specified.</em></p>\n<h2 id="make-a-recallai-bot-leave-a-zoom-call">Make a Recall.ai Bot Leave a Zoom Call</h2>\n<p>Currently, the only way to make the bot leave the call is to end it for everyone (or manually remove it in the Zoom interface). Recall also provide an endpoint to remove a bot. Add a new form below the previous one in <code is:raw>index.hbs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Leave call&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/leave&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;Meeting URL&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;leave&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In <code is:raw>index.js</code> create a new route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/leave&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">meeting_url</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get the bot from the bots array with matching meeting_url</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> bots.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> bot.meeting_url </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> meeting_url)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Remove bot form call</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">`/bot/${</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">}/leave_call`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Redirect to /:botId</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">redirect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`/${</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error)</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;There has been a problem removing the bot&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p><em>Restart your server and try to add and remove a bot. The bot should leave the call when the new form is submitted, and you should be redirected to a new page (causing an error because it does not yet exist.)</em></p>\n<h2 id="show-data-from-call">Show Data From Call</h2>\n<p>Create a new <code is:raw>data.hbs</code> file in the <code is:raw>views</code> directory:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Data for {{ id }}&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{#if video_url}}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;{{video_url}}&quot;</span><span style="color: #C9D1D9">&gt;Watch video until {{ media_retention_end }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{/if}}</span></span></code></pre>\n<p>In <code is:raw>index.js</code> add a new route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/:botId&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get bot data</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">`/bot/${</span><span style="color: #C9D1D9">req</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">params</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">botId</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get transcript (each object is one speaker turn)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">turns</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">`/bot/${</span><span style="color: #C9D1D9">req</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">params</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">botId</span><span style="color: #A5D6FF">}/transcript`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Return all properties in bot object</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, bot)</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;There has been a problem loading this bot data&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p><em>Restart your server, start a new Zoom call (preferably with someone else), speak for a couple of minutes, remove the bot with the form, and you should be redirected to a page.</em></p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/video_url_y6mxzu.png" alt="Webpage showing the bot ID and a single link with the video recording link"></p>\n<h3 id="get-all-speaker-usernames">Get All Speaker Usernames</h3>\n<p>A full timeline for the call including who spoke and when is made available as part of the <code is:raw>bot</code> object. Extract just usernames and de-duplicate the list by adding the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">timeline</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> bot.speaker_timeline</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> usernames </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Set</span><span style="color: #C9D1D9">(timeline.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">turn</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">username</span><span style="color: #C9D1D9">: turn.users[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].username }))]</span></span></code></pre>\n<p>Update the <code is:raw>res.render()</code> method to the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, { </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, usernames })</span></span></code></pre>\n<p>Finally, add a list of who spoke to the bottom of <code is:raw>data.hbs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Who spoke:&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  {{#each usernames}}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.username }}&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  {{/each}}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/who-spoke_ydnkfh.png" alt="At the bottom of the page is a two-item bullet list, each showing one username."></p>\n<h3 id="show-each-speakers-turn-count">Show Each Speaker\u2019s Turn Count</h3>\n<p>Below where <code is:raw>usernames</code> is defined, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">usernames.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> userTurns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timeline.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">turn</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> turn.users[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].username </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> usernames[i])</span></span>\n<span class="line"><span style="color: #C9D1D9">  usernames[i] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    username: usernames[i],</span></span>\n<span class="line"><span style="color: #C9D1D9">    turns: userTurns.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now each <code is:raw>username</code> in the <code is:raw>usernames</code> array also has a <code is:raw>turns</code> property, which is equal to the number of times they spoke in the call. Update the loop to show the new data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{{#each usernames}}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.username }}&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.turns }} turns speaking&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{/each}}</span></span></code></pre>\n<h3 id="display-call-transcript-with-usernames">Display Call Transcript with Usernames</h3>\n<p>Recall is a Deepgram customer and provides our accurate AI-powered transcription within their product. The transcript is already available in our application in the <code is:raw>turns</code> variable. Add the following below the for loop in <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">turns.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get all words for this turn</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">turnWords</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> turns[i].words</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Form a single stream of words</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">words</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> turnWords.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">w</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> w.text).</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add to transcript array along with speaker username</span></span>\n<span class="line"><span style="color: #C9D1D9">  transcript.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ speaker: turns[i].speaker, words })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Add the transcript to the rendered data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, { </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, usernames, transcript })</span></span></code></pre>\n<p>Finally, in <code is:raw>data.hbs</code>, add the following to the bottom:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Transcript&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{#each transcript}}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ this.speaker }}: &lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ this.words }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{/each}}</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/transcript_qnaka4.png" alt="Webpage now shows everything that was said, split by turns. Each turn starts with the speaker&#x27;s username, and then what they said."></p>\n<h3 id="calculate-each-speakers-speaking-time">Calculate Each Speaker\u2019s Speaking Time</h3>\n<p>Each word in the transcript is accompanied by a word\u2019s start and end time. Using this data, each speaker\u2019s \u2018talking time\u2019 can be calculated. Firstly, <code is:raw>turns</code> is added to <code is:raw>usernames[i]</code>, add a new <code is:raw>speakTime</code> value:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">usernames[i] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  username: usernames[i],</span></span>\n<span class="line"><span style="color: #C9D1D9">  turns: userTurns.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  speakTime: </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Calculate the <code is:raw>speakTime</code> just after you add transcripts with <code is:raw>transcripts.push()</code>, and add it to the speaker\u2019s entry in the <code is:raw>username</code> array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">speakTime</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">(turnWords[turnWords.</span><span style="color: #79C0FF">length</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].end_timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> turnWords[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start_timestamp).</span><span style="color: #D2A8FF">toFixed</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">user</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> usernames.</span><span style="color: #D2A8FF">findIndex</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">u</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> u.username </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> turns[i].speaker)</span></span>\n<span class="line"><span style="color: #C9D1D9">usernames[user].speakTime </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speakTime</span></span></code></pre>\n<p>Finally, update <code is:raw>data.hbs</code> to contain this new data just below where each speaker\u2019s turns are shown:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.speakTime }}s total talking time&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/talk_time_wqtcod.png" alt="Each username now displays the number of seconds they spoke for"></p>\n<h2 id="the-world-is-your-oyster">The World Is Your Oyster</h2>\n<p>This application only scratches the surface of the analysis you can perform with data returned by Recall and Deepgram. You may choose to <a href="https://developers.deepgram.com/blog/2022/09/uninclusive-language-retext/">detect non-inclusive language</a>, summarize what has been said, and more. Recall provides a developer-friendly way to avoid writing \u2018glue\u2019 into various conferencing platforms, so if you want to use Google Meet, Microsoft Teams, WebEx, or others, there is no more code to write. Fab!</p>\n<p>If you have any questions, please don\u2019t hesitate to get in touch. We love to help!</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-a-presentation-coaching-application-with-recall/index.md" };
function rawContent() {
  return "\n[Recall](https://www.recall.ai) provides a developer API to get real-time meeting data from a number of different platforms. It does this by sending Recall bots into meetings to observe what is happening and then provide data on-demand or in real-time.  As well as transcripts, they provide metadata including a participant list and linked calendar invite.\n\nIn this tutorial, you will build a virtual presentation coaching application. The application will allow you to send a Recall bot into a Zoom call, remove them, and get insights once the call is over. One of the great things about Recall is their support of other platforms like Google Meet, Microsoft Teams, and WebEx with no additional code.\n\nFor this project, we'll complete the following steps:\n\n1.  A\uFEFFdd a bot to a Zoom call\n2.  G\uFEFFet data about speakers in the call\n3.  C\uFEFFalculate speaker turn counts (to see if you took up more turns than others)\n4.  C\uFEFFreate a speaker-separated transcript\n5.  C\uFEFFalculate talk-time per speaker\n\n## Before You Start\n\nMake sure you have [Node.js](https://nodejs.org/en/) installed. You will need a [Deepgram API Key](https://console.deepgram.com/signup?jump=keys) and a [Recall API Key](https://www.recall.ai).\n\nCreate a new directory for this project and open it in a code editor. Create a `.env` file and populate it with your keys:\n\n    RECALL_API_KEY=your-key-here\n    DEEPGRAM_API_KEY=your-key-here\n\nCreate a `package.json` file with `npm init -y` and then install our dependencies:\n\n```shell\nnpm install dotenv express hbs axios\n```\n\nCreate an `index.js` file and open it in your code editor.\n\n## Set Up Application\n\nImport your dependencies:\n\n```javascript\nimport 'dotenv/config'\nimport axios from 'axios'\nimport express from 'express'\n```\n\nSet up your express application:\n\n```javascript\nconst app = express()\napp.set('view engine', 'hbs')\napp.use(express.urlencoded({ extended: false }))\n\n// Further code goes here\n\nconst PORT = process.env.PORT || 3000\napp.listen(PORT, () => console.log(`Listening on port ${PORT}`))\n```\n\nCreate a route handler to load the initial page. Firstly, create a `views` directory and an `index.hbs` file inside of it. `.hbs` files use [Handlebars](https://handlebarsjs.com) to add conditional and looping logic to HTML files. In the new view file, add:\n\n```html\n<h1>Call Coacher</h1>\n```\n\nInside of `index.js`, render the view:\n\n```javascript\napp.get('/', (req, res) => res.render('index'))\n```\n\nStart your server with `node index.js`, visit [localhost:3000](http://localhost:3000), and you should see **Call Coacher**.\n\n## Create a Recall.ai Helper Function\n\n[Recall's API Reference](https://recallai.readme.io/) shows all of the available endpoints to manage bots - your application will use four of them. To make your code more readable, create a reusable `recall()` helper method at the very bottom of your `index.js` file:\n\n```javascript\nasync function recall(method, path, data) {\n  try {\n    const payload = {\n      method,\n      url: `https://api.recall.ai/api/v1${path}`,\n      headers: {\n          Authorization: `Token ${process.env.RECALL_API_KEY}`\n      }\n    }\n    if(data) payload.data = data\n    const response = await axios(payload)\n    return response.data\n  } catch(error) {\n    throw error\n  }\n}\n```\n\nNow, for example, endpoints can be accessed like so:\n\n```javascript\nconst bots = await recall('get', '/bot')\nconst newBot = await recall('post', '/bot', { meeting_url: '...' })\n```\n\n## Use Recall.ai To Add a Bot to a Zoom Call\n\nAdd a new form to `views/index.hbs`:\n\n```html\n<h2>Add a bot to a call</h2>\n<form action=\"/join\" method=\"post\">\n    <label for=\"meeting_url\">Meeting URL</label>\n    <input type=\"text\" id=\"meeting_url\" name=\"meeting_url\"><br>\n\n    <label for=\"bot_name\">Bot Name</label>\n    <input type=\"text\" id=\"bot_name\" name=\"bot_name\">\n\n    <input type=\"submit\" value=\"join\">\n</form>\n```\n\nProviding a bot name is optional, but your application will allow users to specify it. When submitted, this form will send a POST request to `/join`. Its payload will contain `meeting_url` and `bot_name`.\n\nAdd the following to `index.js` underneath the existing route handler for the homepage:\n\n```javascript\nlet bots = []\napp.post('/join', async (req, res) => {\n    try {\n        const { meeting_url, bot_name } = req.body\n        // Adds bot to call, returned data does not include meeting_url\n        const bot = await recall('post', '/bot', { meeting_url, bot_name })\n        // Add new bot to bots array\n        bots.push({ ...bot, meeting_url })\n        // Re-render the homepage, making a message available to the template\n        res.render('index', { message: 'The bot has joined your call' })\n    } catch(error) {\n        console.log(error)\n        res.render('index', { message: 'There has been a problem adding the bot' })\n    }\n})\n```\n\nBeing able to send dynamic data into templates is a feature available by including handlebars in our application. At the bottom of `index.hbs` show the message:\n\n```html\n<p>{{ message }}</p>\n```\n\nThe message is empty (leaving an empty paragraph) when initially loading the page and will show the message after submitting the form.\n\n*Try it out! Restart your server, create a new Zoom call, get the meeting invite URL and submit it in the form. You should have a bot immediately join you with the bot name you specified.*\n\n## Make a Recall.ai Bot Leave a Zoom Call\n\nCurrently, the only way to make the bot leave the call is to end it for everyone (or manually remove it in the Zoom interface). Recall also provide an endpoint to remove a bot. Add a new form below the previous one in `index.hbs`:\n\n```html\n<h2>Leave call</h2>\n<form action=\"/leave\" method=\"post\">\n    <label for=\"meeting_url\">Meeting URL</label>\n    <input type=\"text\" id=\"meeting_url\" name=\"meeting_url\">\n    <input type=\"submit\" value=\"leave\">\n</form>\n```\n\nIn `index.js` create a new route handler:\n\n```javascript\napp.post('/leave', async (req, res) => {\n  try {\n    const { meeting_url } = req.body\n    // Get the bot from the bots array with matching meeting_url\n    const { id } = bots.find(bot => bot.meeting_url == meeting_url)\n    // Remove bot form call\n    await recall('post', `/bot/${id}/leave_call`)\n    // Redirect to /:botId\n    res.redirect(`/${id}`)\n  } catch(error) {\n    console.log(error)\n    res.render('index', { message: 'There has been a problem removing the bot' })\n  }\n})\n```\n\n*Restart your server and try to add and remove a bot. The bot should leave the call when the new form is submitted, and you should be redirected to a new page (causing an error because it does not yet exist.)*\n\n## Show Data From Call\n\nCreate a new `data.hbs` file in the `views` directory:\n\n```html\n<h1>Data for {{ id }}</h1>\n{{#if video_url}}\n  <a href=\"{{video_url}}\">Watch video until {{ media_retention_end }}</a>\n{{/if}}\n```\n\nIn `index.js` add a new route handler:\n\n```javascript\napp.get('/:botId', async (req, res) => {\n  try {\n    // Get bot data\n    const bot = await recall('get', `/bot/${req.params.botId}`)\n    // Get transcript (each object is one speaker turn)\n    const turns = await recall('get', `/bot/${req.params.botId}/transcript`)\n\n    // Further code here\n\n    // Return all properties in bot object\n    res.render('data', bot)\n  } catch(error) {\n    res.send('There has been a problem loading this bot data')\n  }\n})\n```\n\n*Restart your server, start a new Zoom call (preferably with someone else), speak for a couple of minutes, remove the bot with the form, and you should be redirected to a page.*\n\n![Webpage showing the bot ID and a single link with the video recording link](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/video_url_y6mxzu.png)\n\n### Get All Speaker Usernames\n\nA full timeline for the call including who spoke and when is made available as part of the `bot` object. Extract just usernames and de-duplicate the list by adding the following:\n\n```javascript\nconst { timeline } = bot.speaker_timeline\nlet usernames = [...new Set(timeline.map(turn => { username: turn.users[0].username }))]\n```\n\nUpdate the `res.render()` method to the following:\n\n```javascript\nres.render('data', { ...bot, usernames })\n```\n\nFinally, add a list of who spoke to the bottom of `data.hbs`:\n\n```html\n<h2>Who spoke:</h2>\n<ul>\n  {{#each usernames}}\n    <li>\n      <span>{{ this.username }}</span>\n    </li>\n  {{/each}}\n</ul>\n```\n\n![At the bottom of the page is a two-item bullet list, each showing one username.](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/who-spoke_ydnkfh.png)\n\n### Show Each Speaker's Turn Count\n\nBelow where `usernames` is defined, add the following:\n\n```javascript\nfor(let i=0; i<usernames.length; i++) {\n  let userTurns = timeline.filter(turn => turn.users[0].username == usernames[i])\n  usernames[i] = {\n    username: usernames[i],\n    turns: userTurns.length\n  }\n}\n```\n\nNow each `username` in the `usernames` array also has a `turns` property, which is equal to the number of times they spoke in the call. Update the loop to show the new data:\n\n```html\n{{#each usernames}}\n  <li>\n    <span>{{ this.username }}</span>\n    <span>{{ this.turns }} turns speaking</span>\n  </li>\n{{/each}}\n```\n\n### Display Call Transcript with Usernames\n\nRecall is a Deepgram customer and provides our accurate AI-powered transcription within their product. The transcript is already available in our application in the `turns` variable. Add the following below the for loop in `index.js`:\n\n```javascript\nlet transcript = []\nfor(let i=0; i<turns.length; i++) {\n  // Get all words for this turn\n  const turnWords = turns[i].words\n  // Form a single stream of words\n  const words = turnWords.map(w => w.text).join(' ')\n  // Add to transcript array along with speaker username\n  transcript.push({ speaker: turns[i].speaker, words })\n}\n```\n\nAdd the transcript to the rendered data:\n\n```javascript\nres.render('data', { ...bot, usernames, transcript })\n```\n\nFinally, in `data.hbs`, add the following to the bottom:\n\n```html\n<h2>Transcript</h2>\n{{#each transcript}}\n  <p><b>{{ this.speaker }}: </b>{{ this.words }}</p>\n{{/each}}\n```\n\n![Webpage now shows everything that was said, split by turns. Each turn starts with the speaker's username, and then what they said.](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/transcript_qnaka4.png)\n\n### Calculate Each Speaker's Speaking Time\n\nEach word in the transcript is accompanied by a word's start and end time. Using this data, each speaker's 'talking time' can be calculated. Firstly, `turns` is added to `usernames[i]`, add a new `speakTime` value:\n\n```javascript\nusernames[i] = {\n  username: usernames[i],\n  turns: userTurns.length,\n  speakTime: 0\n}\n```\n\nCalculate the `speakTime` just after you add transcripts with `transcripts.push()`, and add it to the speaker's entry in the `username` array:\n\n```javascript\nconst speakTime = +(turnWords[turnWords.length-1].end_timestamp - turnWords[0].start_timestamp).toFixed(2)\nconst user = usernames.findIndex(u => u.username == turns[i].speaker)\nusernames[user].speakTime += speakTime\n```\n\nFinally, update `data.hbs` to contain this new data just below where each speaker's turns are shown:\n\n```html\n<span>{{ this.speakTime }}s total talking time</span>\n```\n\n![Each username now displays the number of seconds they spoke for](https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/talk_time_wqtcod.png)\n\n## The World Is Your Oyster\n\nThis application only scratches the surface of the analysis you can perform with data returned by Recall and Deepgram. You may choose to [detect non-inclusive language](https://developers.deepgram.com/blog/2022/09/uninclusive-language-retext/), summarize what has been said, and more. Recall provides a developer-friendly way to avoid writing 'glue' into various conferencing platforms, so if you want to use Google Meet, Microsoft Teams, WebEx, or others, there is no more code to write. Fab!\n\nIf you have any questions, please don't hesitate to get in touch. We love to help!\n\n";
}
function compiledContent() {
  return '<p><a href="https://www.recall.ai">Recall</a> provides a developer API to get real-time meeting data from a number of different platforms. It does this by sending Recall bots into meetings to observe what is happening and then provide data on-demand or in real-time.  As well as transcripts, they provide metadata including a participant list and linked calendar invite.</p>\n<p>In this tutorial, you will build a virtual presentation coaching application. The application will allow you to send a Recall bot into a Zoom call, remove them, and get insights once the call is over. One of the great things about Recall is their support of other platforms like Google Meet, Microsoft Teams, and WebEx with no additional code.</p>\n<p>For this project, we\u2019ll complete the following steps:</p>\n<ol>\n<li>A\uFEFFdd a bot to a Zoom call</li>\n<li>G\uFEFFet data about speakers in the call</li>\n<li>C\uFEFFalculate speaker turn counts (to see if you took up more turns than others)</li>\n<li>C\uFEFFreate a speaker-separated transcript</li>\n<li>C\uFEFFalculate talk-time per speaker</li>\n</ol>\n<h2 id="before-you-start">Before You Start</h2>\n<p>Make sure you have <a href="https://nodejs.org/en/">Node.js</a> installed. You will need a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a> and a <a href="https://www.recall.ai">Recall API Key</a>.</p>\n<p>Create a new directory for this project and open it in a code editor. Create a <code is:raw>.env</code> file and populate it with your keys:</p>\n<p>RECALL_API_KEY=your-key-here\nDEEPGRAM_API_KEY=your-key-here</p>\n<p>Create a <code is:raw>package.json</code> file with <code is:raw>npm init -y</code> and then install our dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm install dotenv express hbs axios</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file and open it in your code editor.</p>\n<h2 id="set-up-application">Set Up Application</h2>\n<p>Import your dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dotenv/config&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> axios </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;axios&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> express </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;express&#39;</span></span></code></pre>\n<p>Set up your express application:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;view engine&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;hbs&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">urlencoded</span><span style="color: #C9D1D9">({ extended: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> }))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3000</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Listening on port ${</span><span style="color: #79C0FF">PORT</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>Create a route handler to load the initial page. Firstly, create a <code is:raw>views</code> directory and an <code is:raw>index.hbs</code> file inside of it. <code is:raw>.hbs</code> files use <a href="https://handlebarsjs.com">Handlebars</a> to add conditional and looping logic to HTML files. In the new view file, add:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Call Coacher&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Inside of <code is:raw>index.js</code>, render the view:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>Start your server with <code is:raw>node index.js</code>, visit <a href="http://localhost:3000">localhost:3000</a>, and you should see <strong>Call Coacher</strong>.</p>\n<h2 id="create-a-recallai-helper-function">Create a Recall.ai Helper Function</h2>\n<p><a href="https://recallai.readme.io/">Recall\u2019s API Reference</a> shows all of the available endpoints to manage bots - your application will use four of them. To make your code more readable, create a reusable <code is:raw>recall()</code> helper method at the very bottom of your <code is:raw>index.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">method</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">path</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">payload</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      method,</span></span>\n<span class="line"><span style="color: #C9D1D9">      url: </span><span style="color: #A5D6FF">`https://api.recall.ai/api/v1${</span><span style="color: #C9D1D9">path</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">          Authorization: </span><span style="color: #A5D6FF">`Token ${</span><span style="color: #C9D1D9">process</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">env</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">RECALL_API_KEY</span><span style="color: #A5D6FF">}`</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(data) payload.data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">(payload)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response.data</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">throw</span><span style="color: #C9D1D9"> error</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now, for example, endpoints can be accessed like so:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bots</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">newBot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">, { meeting_url: </span><span style="color: #A5D6FF">&#39;...&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<h2 id="use-recallai-to-add-a-bot-to-a-zoom-call">Use Recall.ai To Add a Bot to a Zoom Call</h2>\n<p>Add a new form to <code is:raw>views/index.hbs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Add a bot to a call&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/join&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;Meeting URL&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9">&gt;Bot Name&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;join&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Providing a bot name is optional, but your application will allow users to specify it. When submitted, this form will send a POST request to <code is:raw>/join</code>. Its payload will contain <code is:raw>meeting_url</code> and <code is:raw>bot_name</code>.</p>\n<p>Add the following to <code is:raw>index.js</code> underneath the existing route handler for the homepage:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bots </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/join&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">meeting_url</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">bot_name</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Adds bot to call, returned data does not include meeting_url</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">, { meeting_url, bot_name })</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Add new bot to bots array</span></span>\n<span class="line"><span style="color: #C9D1D9">        bots.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, meeting_url })</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Re-render the homepage, making a message available to the template</span></span>\n<span class="line"><span style="color: #C9D1D9">        res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;The bot has joined your call&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error)</span></span>\n<span class="line"><span style="color: #C9D1D9">        res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;There has been a problem adding the bot&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Being able to send dynamic data into templates is a feature available by including handlebars in our application. At the bottom of <code is:raw>index.hbs</code> show the message:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;{{ message }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The message is empty (leaving an empty paragraph) when initially loading the page and will show the message after submitting the form.</p>\n<p><em>Try it out! Restart your server, create a new Zoom call, get the meeting invite URL and submit it in the form. You should have a bot immediately join you with the bot name you specified.</em></p>\n<h2 id="make-a-recallai-bot-leave-a-zoom-call">Make a Recall.ai Bot Leave a Zoom Call</h2>\n<p>Currently, the only way to make the bot leave the call is to end it for everyone (or manually remove it in the Zoom interface). Recall also provide an endpoint to remove a bot. Add a new form below the previous one in <code is:raw>index.hbs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Leave call&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/leave&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;Meeting URL&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;leave&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In <code is:raw>index.js</code> create a new route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/leave&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">meeting_url</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get the bot from the bots array with matching meeting_url</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> bots.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> bot.meeting_url </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> meeting_url)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Remove bot form call</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">`/bot/${</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">}/leave_call`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Redirect to /:botId</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">redirect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`/${</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error)</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;There has been a problem removing the bot&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p><em>Restart your server and try to add and remove a bot. The bot should leave the call when the new form is submitted, and you should be redirected to a new page (causing an error because it does not yet exist.)</em></p>\n<h2 id="show-data-from-call">Show Data From Call</h2>\n<p>Create a new <code is:raw>data.hbs</code> file in the <code is:raw>views</code> directory:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Data for {{ id }}&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{#if video_url}}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;{{video_url}}&quot;</span><span style="color: #C9D1D9">&gt;Watch video until {{ media_retention_end }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{/if}}</span></span></code></pre>\n<p>In <code is:raw>index.js</code> add a new route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/:botId&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get bot data</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">`/bot/${</span><span style="color: #C9D1D9">req</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">params</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">botId</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get transcript (each object is one speaker turn)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">turns</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">`/bot/${</span><span style="color: #C9D1D9">req</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">params</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">botId</span><span style="color: #A5D6FF">}/transcript`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Return all properties in bot object</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, bot)</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;There has been a problem loading this bot data&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p><em>Restart your server, start a new Zoom call (preferably with someone else), speak for a couple of minutes, remove the bot with the form, and you should be redirected to a page.</em></p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/video_url_y6mxzu.png" alt="Webpage showing the bot ID and a single link with the video recording link"></p>\n<h3 id="get-all-speaker-usernames">Get All Speaker Usernames</h3>\n<p>A full timeline for the call including who spoke and when is made available as part of the <code is:raw>bot</code> object. Extract just usernames and de-duplicate the list by adding the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">timeline</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> bot.speaker_timeline</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> usernames </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Set</span><span style="color: #C9D1D9">(timeline.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">turn</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">username</span><span style="color: #C9D1D9">: turn.users[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].username }))]</span></span></code></pre>\n<p>Update the <code is:raw>res.render()</code> method to the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, { </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, usernames })</span></span></code></pre>\n<p>Finally, add a list of who spoke to the bottom of <code is:raw>data.hbs</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Who spoke:&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  {{#each usernames}}</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.username }}&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  {{/each}}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/who-spoke_ydnkfh.png" alt="At the bottom of the page is a two-item bullet list, each showing one username."></p>\n<h3 id="show-each-speakers-turn-count">Show Each Speaker\u2019s Turn Count</h3>\n<p>Below where <code is:raw>usernames</code> is defined, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">usernames.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> userTurns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timeline.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">turn</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> turn.users[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].username </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> usernames[i])</span></span>\n<span class="line"><span style="color: #C9D1D9">  usernames[i] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    username: usernames[i],</span></span>\n<span class="line"><span style="color: #C9D1D9">    turns: userTurns.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now each <code is:raw>username</code> in the <code is:raw>usernames</code> array also has a <code is:raw>turns</code> property, which is equal to the number of times they spoke in the call. Update the loop to show the new data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{{#each usernames}}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.username }}&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.turns }} turns speaking&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{/each}}</span></span></code></pre>\n<h3 id="display-call-transcript-with-usernames">Display Call Transcript with Usernames</h3>\n<p>Recall is a Deepgram customer and provides our accurate AI-powered transcription within their product. The transcript is already available in our application in the <code is:raw>turns</code> variable. Add the following below the for loop in <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">turns.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get all words for this turn</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">turnWords</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> turns[i].words</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Form a single stream of words</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">words</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> turnWords.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">w</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> w.text).</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add to transcript array along with speaker username</span></span>\n<span class="line"><span style="color: #C9D1D9">  transcript.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ speaker: turns[i].speaker, words })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Add the transcript to the rendered data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, { </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, usernames, transcript })</span></span></code></pre>\n<p>Finally, in <code is:raw>data.hbs</code>, add the following to the bottom:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Transcript&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{#each transcript}}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ this.speaker }}: &lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ this.words }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">{{/each}}</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/transcript_qnaka4.png" alt="Webpage now shows everything that was said, split by turns. Each turn starts with the speaker&#x27;s username, and then what they said."></p>\n<h3 id="calculate-each-speakers-speaking-time">Calculate Each Speaker\u2019s Speaking Time</h3>\n<p>Each word in the transcript is accompanied by a word\u2019s start and end time. Using this data, each speaker\u2019s \u2018talking time\u2019 can be calculated. Firstly, <code is:raw>turns</code> is added to <code is:raw>usernames[i]</code>, add a new <code is:raw>speakTime</code> value:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">usernames[i] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  username: usernames[i],</span></span>\n<span class="line"><span style="color: #C9D1D9">  turns: userTurns.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  speakTime: </span><span style="color: #79C0FF">0</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Calculate the <code is:raw>speakTime</code> just after you add transcripts with <code is:raw>transcripts.push()</code>, and add it to the speaker\u2019s entry in the <code is:raw>username</code> array:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">speakTime</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">(turnWords[turnWords.</span><span style="color: #79C0FF">length</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].end_timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> turnWords[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start_timestamp).</span><span style="color: #D2A8FF">toFixed</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">user</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> usernames.</span><span style="color: #D2A8FF">findIndex</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">u</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> u.username </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> turns[i].speaker)</span></span>\n<span class="line"><span style="color: #C9D1D9">usernames[user].speakTime </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speakTime</span></span></code></pre>\n<p>Finally, update <code is:raw>data.hbs</code> to contain this new data just below where each speaker\u2019s turns are shown:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.speakTime }}s total talking time&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/talk_time_wqtcod.png" alt="Each username now displays the number of seconds they spoke for"></p>\n<h2 id="the-world-is-your-oyster">The World Is Your Oyster</h2>\n<p>This application only scratches the surface of the analysis you can perform with data returned by Recall and Deepgram. You may choose to <a href="https://developers.deepgram.com/blog/2022/09/uninclusive-language-retext/">detect non-inclusive language</a>, summarize what has been said, and more. Recall provides a developer-friendly way to avoid writing \u2018glue\u2019 into various conferencing platforms, so if you want to use Google Meet, Microsoft Teams, WebEx, or others, there is no more code to write. Fab!</p>\n<p>If you have any questions, please don\u2019t hesitate to get in touch. We love to help!</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-a-presentation-coaching-application-with-recall/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p><a href="https://www.recall.ai">Recall</a> provides a developer API to get real-time meeting data from a number of different platforms. It does this by sending Recall bots into meetings to observe what is happening and then provide data on-demand or in real-time.  As well as transcripts, they provide metadata including a participant list and linked calendar invite.</p>
<p>In this tutorial, you will build a virtual presentation coaching application. The application will allow you to send a Recall bot into a Zoom call, remove them, and get insights once the call is over. One of the great things about Recall is their support of other platforms like Google Meet, Microsoft Teams, and WebEx with no additional code.</p>
<p>For this project, we’ll complete the following steps:</p>
<ol>
<li>A﻿dd a bot to a Zoom call</li>
<li>G﻿et data about speakers in the call</li>
<li>C﻿alculate speaker turn counts (to see if you took up more turns than others)</li>
<li>C﻿reate a speaker-separated transcript</li>
<li>C﻿alculate talk-time per speaker</li>
</ol>
<h2 id="before-you-start">Before You Start</h2>
<p>Make sure you have <a href="https://nodejs.org/en/">Node.js</a> installed. You will need a <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a> and a <a href="https://www.recall.ai">Recall API Key</a>.</p>
<p>Create a new directory for this project and open it in a code editor. Create a <code>.env</code> file and populate it with your keys:</p>
<p>RECALL_API_KEY=your-key-here
DEEPGRAM_API_KEY=your-key-here</p>
<p>Create a <code>package.json</code> file with <code>npm init -y</code> and then install our dependencies:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">npm install dotenv express hbs axios</span></span></code></pre>
<p>Create an <code>index.js</code> file and open it in your code editor.</p>
<h2 id="set-up-application">Set Up Application</h2>
<p>Import your dependencies:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;dotenv/config&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> axios </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;axios&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> express </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;express&#39;</span></span></code></pre>
<p>Set up your express application:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">set</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;view engine&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;hbs&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">urlencoded</span><span style="color: #C9D1D9">({ extended: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9"> }))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3000</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`Listening on port \${</span><span style="color: #79C0FF">PORT</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>Create a route handler to load the initial page. Firstly, create a <code>views</code> directory and an <code>index.hbs</code> file inside of it. <code>.hbs</code> files use <a href="https://handlebarsjs.com">Handlebars</a> to add conditional and looping logic to HTML files. In the new view file, add:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Call Coacher&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Inside of <code>index.js</code>, render the view:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>Start your server with <code>node index.js</code>, visit <a href="http://localhost:3000">localhost:3000</a>, and you should see <strong>Call Coacher</strong>.</p>
<h2 id="create-a-recallai-helper-function">Create a Recall.ai Helper Function</h2>
<p><a href="https://recallai.readme.io/">Recall’s API Reference</a> shows all of the available endpoints to manage bots - your application will use four of them. To make your code more readable, create a reusable <code>recall()</code> helper method at the very bottom of your <code>index.js</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">method</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">path</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">payload</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      method,</span></span>
<span class="line"><span style="color: #C9D1D9">      url: </span><span style="color: #A5D6FF">\`https://api.recall.ai/api/v1\${</span><span style="color: #C9D1D9">path</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      headers: {</span></span>
<span class="line"><span style="color: #C9D1D9">          Authorization: </span><span style="color: #A5D6FF">\`Token \${</span><span style="color: #C9D1D9">process</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">env</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">RECALL_API_KEY</span><span style="color: #A5D6FF">}\`</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9">(data) payload.data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">response</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">(payload)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> response.data</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">throw</span><span style="color: #C9D1D9"> error</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Now, for example, endpoints can be accessed like so:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bots</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">newBot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">, { meeting_url: </span><span style="color: #A5D6FF">&#39;...&#39;</span><span style="color: #C9D1D9"> })</span></span></code></pre>
<h2 id="use-recallai-to-add-a-bot-to-a-zoom-call">Use Recall.ai To Add a Bot to a Zoom Call</h2>
<p>Add a new form to <code>views/index.hbs</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Add a bot to a call&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/join&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;Meeting URL&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">br</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9">&gt;Bot Name&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;bot_name&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;join&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Providing a bot name is optional, but your application will allow users to specify it. When submitted, this form will send a POST request to <code>/join</code>. Its payload will contain <code>meeting_url</code> and <code>bot_name</code>.</p>
<p>Add the following to <code>index.js</code> underneath the existing route handler for the homepage:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> bots </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/join&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">meeting_url</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">bot_name</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Adds bot to call, returned data does not include meeting_url</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;/bot&#39;</span><span style="color: #C9D1D9">, { meeting_url, bot_name })</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Add new bot to bots array</span></span>
<span class="line"><span style="color: #C9D1D9">        bots.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, meeting_url })</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Re-render the homepage, making a message available to the template</span></span>
<span class="line"><span style="color: #C9D1D9">        res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;The bot has joined your call&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">    } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>
<span class="line"><span style="color: #C9D1D9">        console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error)</span></span>
<span class="line"><span style="color: #C9D1D9">        res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;There has been a problem adding the bot&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Being able to send dynamic data into templates is a feature available by including handlebars in our application. At the bottom of <code>index.hbs</code> show the message:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;{{ message }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>The message is empty (leaving an empty paragraph) when initially loading the page and will show the message after submitting the form.</p>
<p><em>Try it out! Restart your server, create a new Zoom call, get the meeting invite URL and submit it in the form. You should have a bot immediately join you with the bot name you specified.</em></p>
<h2 id="make-a-recallai-bot-leave-a-zoom-call">Make a Recall.ai Bot Leave a Zoom Call</h2>
<p>Currently, the only way to make the bot leave the call is to end it for everyone (or manually remove it in the Zoom interface). Recall also provide an endpoint to remove a bot. Add a new form below the previous one in <code>index.hbs</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Leave call&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/leave&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;Meeting URL&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;meeting_url&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;leave&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>In <code>index.js</code> create a new route handler:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/leave&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">meeting_url</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get the bot from the bots array with matching meeting_url</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> bots.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> bot.meeting_url </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> meeting_url)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Remove bot form call</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">\`/bot/\${</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">}/leave_call\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Redirect to /:botId</span></span>
<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">redirect</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`/\${</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(error)</span></span>
<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;index&#39;</span><span style="color: #C9D1D9">, { message: </span><span style="color: #A5D6FF">&#39;There has been a problem removing the bot&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p><em>Restart your server and try to add and remove a bot. The bot should leave the call when the new form is submitted, and you should be redirected to a new page (causing an error because it does not yet exist.)</em></p>
<h2 id="show-data-from-call">Show Data From Call</h2>
<p>Create a new <code>data.hbs</code> file in the <code>views</code> directory:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Data for {{ id }}&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">{{#if video_url}}</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;{{video_url}}&quot;</span><span style="color: #C9D1D9">&gt;Watch video until {{ media_retention_end }}&lt;/</span><span style="color: #7EE787">a</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">{{/if}}</span></span></code></pre>
<p>In <code>index.js</code> add a new route handler:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/:botId&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get bot data</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">bot</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">\`/bot/\${</span><span style="color: #C9D1D9">req</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">params</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">botId</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get transcript (each object is one speaker turn)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">turns</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">recall</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;get&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">\`/bot/\${</span><span style="color: #C9D1D9">req</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">params</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">botId</span><span style="color: #A5D6FF">}/transcript\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Return all properties in bot object</span></span>
<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, bot)</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9">(error) {</span></span>
<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;There has been a problem loading this bot data&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p><em>Restart your server, start a new Zoom call (preferably with someone else), speak for a couple of minutes, remove the bot with the form, and you should be redirected to a page.</em></p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/video_url_y6mxzu.png" alt="Webpage showing the bot ID and a single link with the video recording link"></p>
<h3 id="get-all-speaker-usernames">Get All Speaker Usernames</h3>
<p>A full timeline for the call including who spoke and when is made available as part of the <code>bot</code> object. Extract just usernames and de-duplicate the list by adding the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">timeline</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> bot.speaker_timeline</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> usernames </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Set</span><span style="color: #C9D1D9">(timeline.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">turn</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">username</span><span style="color: #C9D1D9">: turn.users[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].username }))]</span></span></code></pre>
<p>Update the <code>res.render()</code> method to the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, { </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, usernames })</span></span></code></pre>
<p>Finally, add a list of who spoke to the bottom of <code>data.hbs</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Who spoke:&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  {{#each usernames}}</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.username }}&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  {{/each}}</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/who-spoke_ydnkfh.png" alt="At the bottom of the page is a two-item bullet list, each showing one username."></p>
<h3 id="show-each-speakers-turn-count">Show Each Speaker’s Turn Count</h3>
<p>Below where <code>usernames</code> is defined, add the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">usernames.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> userTurns </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> timeline.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">turn</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> turn.users[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].username </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> usernames[i])</span></span>
<span class="line"><span style="color: #C9D1D9">  usernames[i] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    username: usernames[i],</span></span>
<span class="line"><span style="color: #C9D1D9">    turns: userTurns.</span><span style="color: #79C0FF">length</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Now each <code>username</code> in the <code>usernames</code> array also has a <code>turns</code> property, which is equal to the number of times they spoke in the call. Update the loop to show the new data:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{{#each usernames}}</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.username }}&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.turns }} turns speaking&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">li</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">{{/each}}</span></span></code></pre>
<h3 id="display-call-transcript-with-usernames">Display Call Transcript with Usernames</h3>
<p>Recall is a Deepgram customer and provides our accurate AI-powered transcription within their product. The transcript is already available in our application in the <code>turns</code> variable. Add the following below the for loop in <code>index.js</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> i</span><span style="color: #FF7B72">=</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">&lt;</span><span style="color: #C9D1D9">turns.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">; i</span><span style="color: #FF7B72">++</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Get all words for this turn</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">turnWords</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> turns[i].words</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Form a single stream of words</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">words</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> turnWords.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">w</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> w.text).</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Add to transcript array along with speaker username</span></span>
<span class="line"><span style="color: #C9D1D9">  transcript.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">({ speaker: turns[i].speaker, words })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Add the transcript to the rendered data:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">res.</span><span style="color: #D2A8FF">render</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;data&#39;</span><span style="color: #C9D1D9">, { </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">bot, usernames, transcript })</span></span></code></pre>
<p>Finally, in <code>data.hbs</code>, add the following to the bottom:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Transcript&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">{{#each transcript}}</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ this.speaker }}: &lt;/</span><span style="color: #7EE787">b</span><span style="color: #C9D1D9">&gt;{{ this.words }}&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">{{/each}}</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/transcript_qnaka4.png" alt="Webpage now shows everything that was said, split by turns. Each turn starts with the speaker's username, and then what they said."></p>
<h3 id="calculate-each-speakers-speaking-time">Calculate Each Speaker’s Speaking Time</h3>
<p>Each word in the transcript is accompanied by a word’s start and end time. Using this data, each speaker’s ‘talking time’ can be calculated. Firstly, <code>turns</code> is added to <code>usernames[i]</code>, add a new <code>speakTime</code> value:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">usernames[i] </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  username: usernames[i],</span></span>
<span class="line"><span style="color: #C9D1D9">  turns: userTurns.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  speakTime: </span><span style="color: #79C0FF">0</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Calculate the <code>speakTime</code> just after you add transcripts with <code>transcripts.push()</code>, and add it to the speaker’s entry in the <code>username</code> array:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">speakTime</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9">(turnWords[turnWords.</span><span style="color: #79C0FF">length</span><span style="color: #FF7B72">-</span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">].end_timestamp </span><span style="color: #FF7B72">-</span><span style="color: #C9D1D9"> turnWords[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].start_timestamp).</span><span style="color: #D2A8FF">toFixed</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">user</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> usernames.</span><span style="color: #D2A8FF">findIndex</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">u</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> u.username </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> turns[i].speaker)</span></span>
<span class="line"><span style="color: #C9D1D9">usernames[user].speakTime </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> speakTime</span></span></code></pre>
<p>Finally, update <code>data.hbs</code> to contain this new data just below where each speaker’s turns are shown:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;{{ this.speakTime }}s total talking time&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1663790129/blog/2022/10/build-a-presentation-coaching-application-with-recall/talk_time_wqtcod.png" alt="Each username now displays the number of seconds they spoke for"></p>
<h2 id="the-world-is-your-oyster">The World Is Your Oyster</h2>
<p>This application only scratches the surface of the analysis you can perform with data returned by Recall and Deepgram. You may choose to <a href="https://developers.deepgram.com/blog/2022/09/uninclusive-language-retext/">detect non-inclusive language</a>, summarize what has been said, and more. Recall provides a developer-friendly way to avoid writing ‘glue’ into various conferencing platforms, so if you want to use Google Meet, Microsoft Teams, WebEx, or others, there is no more code to write. Fab!</p>
<p>If you have any questions, please don’t hesitate to get in touch. We love to help!</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-a-presentation-coaching-application-with-recall/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
