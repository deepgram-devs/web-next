import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                          *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
/* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-you-start", "text": "Before You Start" }, { "depth": 2, "slug": "set-up-twilio-functions-space", "text": "Set Up Twilio Functions Space" }, { "depth": 2, "slug": "record-inbound-call", "text": "Record Inbound Call" }, { "depth": 2, "slug": "transcribe-call", "text": "Transcribe Call" }, { "depth": 2, "slug": "send-transcription-via-sms", "text": "Send Transcription via SMS" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "\nTwilio is a cloud communication platform that lets developers integrate a whole set of communication technologies into applications. On top of providing APIs, they also have Twilio Runtime - which allows the development and deployment of serverless applications directly in the Twilio Console. Super cool.\n\nToday you will be using Twilio Functions to build a phone number that gives callers a prompt, then records a message similar to a voicemail. Once completed, a transcript will be generated with Deepgram and sent to the caller.\n\n![A diagram showing a person talking into a phone call with a Twilio number, then ending the call, and then a text message thread with the spoken text sent from Twilio.](https://res.cloudinary.com/deepgram/image/upload/v1658239971/blog/2022/08/transcribe-twilio-calls-functions/twilio-diagram.png)\n\n## Before You Start\n\nYou will need a free [Deepgram API Key](https://console.deepgram.com/signup?jump=keys). You will also need a [Twilio account](https://console.twilio.com) and a phone number in your account with SMS and Voice capabilities.\n\n## Set Up Twilio Functions Space\n\nInside the Twilio Console, head to **Developer Tools -> Functions & Assets** and create a new service. A service can contain multiple Twilio Functions and assets related to a single project. It's important that you create a new service here and not a standalone function.\n\nHead to the *Dependencies* section and add `@deepgram/sdk` (you can omit the version for the latest). Then head to the *Environment Variables* section and add a key called `DEEPGRAM_KEY` with the value of your API Key generated in your Deepgram console.\n\nFunctions can have one of three visibility levels - public, protected, and private. The default of 'protected' is totally fine for this project and means that only Twilio webhooks can trigger them.\n\n## Record Inbound Call\n\nRename the default `/welcome` function to `/inbound`. Replace the whole file with the following:\n\n```js\nexports.handler = function(context, event, callback) {\n  let twiml = new Twilio.twiml.VoiceResponse()\n\n  twiml.say({ voice: 'woman', language: 'en' }, 'Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.')\n\n  twiml.record({\n    maxLength: 30, // seconds, 30 is default\n    playBeep: true,\n    recordingStatusCallback: '/transcribe'\n  })\n\n  return callback(null, twiml)\n};\n```\n\nTo respond to incoming calls and texts, Twilio lets you form and respond to requests with TwiML (Twilio Markup Language). It looks a lot like XML and can be generated with the Node Helper Library, which is included in Twilio Functions by default.\n\nThis snippet creates a new TwiML response, speaks the phrase, beeps, and begins the recording. Once the call is ended (hang up or ended after 30 seconds of recording), a payload is sent to `/transcribe` (which will be created in the next section).\n\nSave the function, and click *Deploy All*. Once deployed, this function is ready to be used. Go to your Twilio number settings, and when a call comes in, select *Function*. Select your service and the `/inbound` function path.\n\n![When a call comes in, use a Function. Default service with the /inbound function path.](https://res.cloudinary.com/deepgram/image/upload/v1661255979/blog/2022/08/transcribe-twilio-calls-functions/set-inbound-endpoint.png)\n\nCall your number, and you should hear it speaking, then beep. If you speak now, a recording will take place, and data will be sent to `/transcribe`, but that endpoint does not exist yet - let's fix that.\n\n## Transcribe Call\n\nCreate a new function - `/transcribe`. Delete the boilerplate and set up the function with the following code:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\n\nexports.handler = async function(context, event, callback) {\n  const { RecordingUrl, CallSid } = event\n  // Further code here\n  return callback(null, true)\n};\n```\n\nThe recording data will be available in the `event` object, which destructures to the `RecordingUrl` and `CallSid` values. Unfortunately, this payload doesn't include the caller's phone number, but it can be looked up from the `CallSid`. Where the `Further code here` comment is situation, add the following:\n\n```javascript\nconst twilioClient = context.getTwilioClient()\nconst { from: caller, to: twilioNumber } = await twilioClient.calls(CallSid).fetch()\n```\n\nThe caller's phone number is now available in a variable called `caller`, and the number they called as `twilioNumber`. Now generate a transcription with Deepgram's Node.js SDK:\n\n```js\nconst transcriptionFeatures = { punctuate: true, tier: 'enhanced' }\nconst { results } = await deepgram.transcription.preRecorded({ url: RecordingUrl }, transcriptionFeatures)\nconst { transcript } = results.channels[0].alternatives[0]\n```\n\nThis request uses Deepgram's [punctuation](https://developers.deepgram.com/documentation/features/punctuate/) feature, along with a request to use the [enhanced tier](https://developers.deepgram.com/documentation/features/tier/) for higher-accuracy transcripts.\n\n## Send Transcription via SMS\n\nNow that a transcript has been generated, it's time to send it to the caller. Just after the transcript is generated, add the following to send an SMS message:\n\n```js\nconst message = await twilioClient.messages.create({\n  body: `Here is what you said:\\n\\n${transcript}`,\n  to: caller,\n  from: twilioNumber\n})\n```\n\nFinally, change the callback value from `true` to `{ results, message }`. This is purely for logging to your Twilio Console.\n\nSave both files again and deploy all functions in your service. Call your Twilio number, speak after the beep, then hang up. You should receive a message a few seconds later.\n\n## In Summary\n\nThe final code is as follows:\n\n```js\n// /record\nexports.handler = function(context, event, callback) {\n	let twiml = new Twilio.twiml.VoiceResponse()\n  twiml.say({ voice: 'woman', language: 'en' }, 'Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.');\n  twiml.record({\n    maxLength: 30,\n    playBeep: true,\n    recordingStatusCallback: '/transcribe'\n  })\n  return callback(null, twiml)\n}\n\n// /transcribe\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\nexports.handler = async function(context, event, callback) {\n  const { RecordingUrl, CallSid } = event\n  const twilioClient = context.getTwilioClient()\n  const { from: caller, to: twilioNumber } = await twilioClient.calls(CallSid).fetch()\n  const transcriptionFeatures = { punctuate: true , tier: 'enhanced' }\n  const { results } = await deepgram.transcription.preRecorded({ url: RecordingUrl }, transcriptionFeatures)\n  const { transcript } = results.channels[0].alternatives[0]\n  const message = await twilioClient.messages.create({\n    body: `Here is what you said:\\n\\n${transcript}`,\n    to: caller,\n    from: twilioNumber\n  })\n  return callback(null, { results, message })\n}\n```\n\nDon't forget to install dependencies and set your environment variables. If you have any questions about this project, feel free to get in touch.\n\n", "html": '<p>Twilio is a cloud communication platform that lets developers integrate a whole set of communication technologies into applications. On top of providing APIs, they also have Twilio Runtime - which allows the development and deployment of serverless applications directly in the Twilio Console. Super cool.</p>\n<p>Today you will be using Twilio Functions to build a phone number that gives callers a prompt, then records a message similar to a voicemail. Once completed, a transcript will be generated with Deepgram and sent to the caller.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1658239971/blog/2022/08/transcribe-twilio-calls-functions/twilio-diagram.png" alt="A diagram showing a person talking into a phone call with a Twilio number, then ending the call, and then a text message thread with the spoken text sent from Twilio."></p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>You will need a free <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a>. You will also need a <a href="https://console.twilio.com">Twilio account</a> and a phone number in your account with SMS and Voice capabilities.</p>\n<h2 id="set-up-twilio-functions-space">Set Up Twilio Functions Space</h2>\n<p>Inside the Twilio Console, head to <strong>Developer Tools -> Functions & Assets</strong> and create a new service. A service can contain multiple Twilio Functions and assets related to a single project. It\u2019s important that you create a new service here and not a standalone function.</p>\n<p>Head to the <em>Dependencies</em> section and add <code is:raw>@deepgram/sdk</code> (you can omit the version for the latest). Then head to the <em>Environment Variables</em> section and add a key called <code is:raw>DEEPGRAM_KEY</code> with the value of your API Key generated in your Deepgram console.</p>\n<p>Functions can have one of three visibility levels - public, protected, and private. The default of \u2018protected\u2019 is totally fine for this project and means that only Twilio webhooks can trigger them.</p>\n<h2 id="record-inbound-call">Record Inbound Call</h2>\n<p>Rename the default <code is:raw>/welcome</code> function to <code is:raw>/inbound</code>. Replace the whole file with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> twiml </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">say</span><span style="color: #C9D1D9">({ voice: </span><span style="color: #A5D6FF">&#39;woman&#39;</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9"> }, </span><span style="color: #A5D6FF">&#39;Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">record</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    maxLength: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">, </span><span style="color: #8B949E">// seconds, 30 is default</span></span>\n<span class="line"><span style="color: #C9D1D9">    playBeep: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, twiml)</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>\n<p>To respond to incoming calls and texts, Twilio lets you form and respond to requests with TwiML (Twilio Markup Language). It looks a lot like XML and can be generated with the Node Helper Library, which is included in Twilio Functions by default.</p>\n<p>This snippet creates a new TwiML response, speaks the phrase, beeps, and begins the recording. Once the call is ended (hang up or ended after 30 seconds of recording), a payload is sent to <code is:raw>/transcribe</code> (which will be created in the next section).</p>\n<p>Save the function, and click <em>Deploy All</em>. Once deployed, this function is ready to be used. Go to your Twilio number settings, and when a call comes in, select <em>Function</em>. Select your service and the <code is:raw>/inbound</code> function path.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661255979/blog/2022/08/transcribe-twilio-calls-functions/set-inbound-endpoint.png" alt="When a call comes in, use a Function. Default service with the /inbound function path."></p>\n<p>Call your number, and you should hear it speaking, then beep. If you speak now, a recording will take place, and data will be sent to <code is:raw>/transcribe</code>, but that endpoint does not exist yet - let\u2019s fix that.</p>\n<h2 id="transcribe-call">Transcribe Call</h2>\n<p>Create a new function - <code is:raw>/transcribe</code>. Delete the boilerplate and set up the function with the following code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>\n<p>The recording data will be available in the <code is:raw>event</code> object, which destructures to the <code is:raw>RecordingUrl</code> and <code is:raw>CallSid</code> values. Unfortunately, this payload doesn\u2019t include the caller\u2019s phone number, but it can be looked up from the <code is:raw>CallSid</code>. Where the <code is:raw>Further code here</code> comment is situation, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilioClient</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> context.</span><span style="color: #D2A8FF">getTwilioClient</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">from</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">caller</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">to</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">twilioNumber</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.</span><span style="color: #D2A8FF">calls</span><span style="color: #C9D1D9">(CallSid).</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>The caller\u2019s phone number is now available in a variable called <code is:raw>caller</code>, and the number they called as <code is:raw>twilioNumber</code>. Now generate a transcription with Deepgram\u2019s Node.js SDK:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: RecordingUrl }, transcriptionFeatures)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>This request uses Deepgram\u2019s <a href="https://developers.deepgram.com/documentation/features/punctuate/">punctuation</a> feature, along with a request to use the <a href="https://developers.deepgram.com/documentation/features/tier/">enhanced tier</a> for higher-accuracy transcripts.</p>\n<h2 id="send-transcription-via-sms">Send Transcription via SMS</h2>\n<p>Now that a transcript has been generated, it\u2019s time to send it to the caller. Just after the transcript is generated, add the following to send an SMS message:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">message</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.messages.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  body: </span><span style="color: #A5D6FF">`Here is what you said:</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  to: caller,</span></span>\n<span class="line"><span style="color: #C9D1D9">  from: twilioNumber</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Finally, change the callback value from <code is:raw>true</code> to <code is:raw>{ results, message }</code>. This is purely for logging to your Twilio Console.</p>\n<p>Save both files again and deploy all functions in your service. Call your Twilio number, speak after the beep, then hang up. You should receive a message a few seconds later.</p>\n<h2 id="in-summary">In Summary</h2>\n<p>The final code is as follows:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// /record</span></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">	</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> twiml </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">say</span><span style="color: #C9D1D9">({ voice: </span><span style="color: #A5D6FF">&#39;woman&#39;</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9"> }, </span><span style="color: #A5D6FF">&#39;Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">record</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    maxLength: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    playBeep: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, twiml)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// /transcribe</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilioClient</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> context.</span><span style="color: #D2A8FF">getTwilioClient</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">from</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">caller</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">to</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">twilioNumber</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.</span><span style="color: #D2A8FF">calls</span><span style="color: #C9D1D9">(CallSid).</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> , tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: RecordingUrl }, transcriptionFeatures)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">message</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.messages.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #A5D6FF">`Here is what you said:</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    to: caller,</span></span>\n<span class="line"><span style="color: #C9D1D9">    from: twilioNumber</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, { results, message })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Don\u2019t forget to install dependencies and set your environment variables. If you have any questions about this project, feel free to get in touch.</p>' };
const frontmatter = { "title": "Transcribe Phone Calls with Twilio Functions and Deepgram", "description": "Learn how to use Deepgram's Speech Recognition API to transcribe Twilio phone calls with Twilio Functions and Node.js", "date": "2022-08-29T23:48:20.204Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1661256278/blog/2022/08/transcribe-twilio-calls-functions/cover.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["twilio", "serverless"], "shorturls": { "share": "https://dpgr.am/a20fc02", "twitter": "https://dpgr.am/2f19bb2", "linkedin": "https://dpgr.am/3c905b6", "reddit": "https://dpgr.am/49ab62b", "facebook": "https://dpgr.am/081054f" }, "astro": { "headings": [{ "depth": 2, "slug": "before-you-start", "text": "Before You Start" }, { "depth": 2, "slug": "set-up-twilio-functions-space", "text": "Set Up Twilio Functions Space" }, { "depth": 2, "slug": "record-inbound-call", "text": "Record Inbound Call" }, { "depth": 2, "slug": "transcribe-call", "text": "Transcribe Call" }, { "depth": 2, "slug": "send-transcription-via-sms", "text": "Send Transcription via SMS" }, { "depth": 2, "slug": "in-summary", "text": "In Summary" }], "source": "\nTwilio is a cloud communication platform that lets developers integrate a whole set of communication technologies into applications. On top of providing APIs, they also have Twilio Runtime - which allows the development and deployment of serverless applications directly in the Twilio Console. Super cool.\n\nToday you will be using Twilio Functions to build a phone number that gives callers a prompt, then records a message similar to a voicemail. Once completed, a transcript will be generated with Deepgram and sent to the caller.\n\n![A diagram showing a person talking into a phone call with a Twilio number, then ending the call, and then a text message thread with the spoken text sent from Twilio.](https://res.cloudinary.com/deepgram/image/upload/v1658239971/blog/2022/08/transcribe-twilio-calls-functions/twilio-diagram.png)\n\n## Before You Start\n\nYou will need a free [Deepgram API Key](https://console.deepgram.com/signup?jump=keys). You will also need a [Twilio account](https://console.twilio.com) and a phone number in your account with SMS and Voice capabilities.\n\n## Set Up Twilio Functions Space\n\nInside the Twilio Console, head to **Developer Tools -> Functions & Assets** and create a new service. A service can contain multiple Twilio Functions and assets related to a single project. It's important that you create a new service here and not a standalone function.\n\nHead to the *Dependencies* section and add `@deepgram/sdk` (you can omit the version for the latest). Then head to the *Environment Variables* section and add a key called `DEEPGRAM_KEY` with the value of your API Key generated in your Deepgram console.\n\nFunctions can have one of three visibility levels - public, protected, and private. The default of 'protected' is totally fine for this project and means that only Twilio webhooks can trigger them.\n\n## Record Inbound Call\n\nRename the default `/welcome` function to `/inbound`. Replace the whole file with the following:\n\n```js\nexports.handler = function(context, event, callback) {\n  let twiml = new Twilio.twiml.VoiceResponse()\n\n  twiml.say({ voice: 'woman', language: 'en' }, 'Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.')\n\n  twiml.record({\n    maxLength: 30, // seconds, 30 is default\n    playBeep: true,\n    recordingStatusCallback: '/transcribe'\n  })\n\n  return callback(null, twiml)\n};\n```\n\nTo respond to incoming calls and texts, Twilio lets you form and respond to requests with TwiML (Twilio Markup Language). It looks a lot like XML and can be generated with the Node Helper Library, which is included in Twilio Functions by default.\n\nThis snippet creates a new TwiML response, speaks the phrase, beeps, and begins the recording. Once the call is ended (hang up or ended after 30 seconds of recording), a payload is sent to `/transcribe` (which will be created in the next section).\n\nSave the function, and click *Deploy All*. Once deployed, this function is ready to be used. Go to your Twilio number settings, and when a call comes in, select *Function*. Select your service and the `/inbound` function path.\n\n![When a call comes in, use a Function. Default service with the /inbound function path.](https://res.cloudinary.com/deepgram/image/upload/v1661255979/blog/2022/08/transcribe-twilio-calls-functions/set-inbound-endpoint.png)\n\nCall your number, and you should hear it speaking, then beep. If you speak now, a recording will take place, and data will be sent to `/transcribe`, but that endpoint does not exist yet - let's fix that.\n\n## Transcribe Call\n\nCreate a new function - `/transcribe`. Delete the boilerplate and set up the function with the following code:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\n\nexports.handler = async function(context, event, callback) {\n  const { RecordingUrl, CallSid } = event\n  // Further code here\n  return callback(null, true)\n};\n```\n\nThe recording data will be available in the `event` object, which destructures to the `RecordingUrl` and `CallSid` values. Unfortunately, this payload doesn't include the caller's phone number, but it can be looked up from the `CallSid`. Where the `Further code here` comment is situation, add the following:\n\n```javascript\nconst twilioClient = context.getTwilioClient()\nconst { from: caller, to: twilioNumber } = await twilioClient.calls(CallSid).fetch()\n```\n\nThe caller's phone number is now available in a variable called `caller`, and the number they called as `twilioNumber`. Now generate a transcription with Deepgram's Node.js SDK:\n\n```js\nconst transcriptionFeatures = { punctuate: true, tier: 'enhanced' }\nconst { results } = await deepgram.transcription.preRecorded({ url: RecordingUrl }, transcriptionFeatures)\nconst { transcript } = results.channels[0].alternatives[0]\n```\n\nThis request uses Deepgram's [punctuation](https://developers.deepgram.com/documentation/features/punctuate/) feature, along with a request to use the [enhanced tier](https://developers.deepgram.com/documentation/features/tier/) for higher-accuracy transcripts.\n\n## Send Transcription via SMS\n\nNow that a transcript has been generated, it's time to send it to the caller. Just after the transcript is generated, add the following to send an SMS message:\n\n```js\nconst message = await twilioClient.messages.create({\n  body: `Here is what you said:\\n\\n${transcript}`,\n  to: caller,\n  from: twilioNumber\n})\n```\n\nFinally, change the callback value from `true` to `{ results, message }`. This is purely for logging to your Twilio Console.\n\nSave both files again and deploy all functions in your service. Call your Twilio number, speak after the beep, then hang up. You should receive a message a few seconds later.\n\n## In Summary\n\nThe final code is as follows:\n\n```js\n// /record\nexports.handler = function(context, event, callback) {\n	let twiml = new Twilio.twiml.VoiceResponse()\n  twiml.say({ voice: 'woman', language: 'en' }, 'Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.');\n  twiml.record({\n    maxLength: 30,\n    playBeep: true,\n    recordingStatusCallback: '/transcribe'\n  })\n  return callback(null, twiml)\n}\n\n// /transcribe\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\nexports.handler = async function(context, event, callback) {\n  const { RecordingUrl, CallSid } = event\n  const twilioClient = context.getTwilioClient()\n  const { from: caller, to: twilioNumber } = await twilioClient.calls(CallSid).fetch()\n  const transcriptionFeatures = { punctuate: true , tier: 'enhanced' }\n  const { results } = await deepgram.transcription.preRecorded({ url: RecordingUrl }, transcriptionFeatures)\n  const { transcript } = results.channels[0].alternatives[0]\n  const message = await twilioClient.messages.create({\n    body: `Here is what you said:\\n\\n${transcript}`,\n    to: caller,\n    from: twilioNumber\n  })\n  return callback(null, { results, message })\n}\n```\n\nDon't forget to install dependencies and set your environment variables. If you have any questions about this project, feel free to get in touch.\n\n", "html": '<p>Twilio is a cloud communication platform that lets developers integrate a whole set of communication technologies into applications. On top of providing APIs, they also have Twilio Runtime - which allows the development and deployment of serverless applications directly in the Twilio Console. Super cool.</p>\n<p>Today you will be using Twilio Functions to build a phone number that gives callers a prompt, then records a message similar to a voicemail. Once completed, a transcript will be generated with Deepgram and sent to the caller.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1658239971/blog/2022/08/transcribe-twilio-calls-functions/twilio-diagram.png" alt="A diagram showing a person talking into a phone call with a Twilio number, then ending the call, and then a text message thread with the spoken text sent from Twilio."></p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>You will need a free <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a>. You will also need a <a href="https://console.twilio.com">Twilio account</a> and a phone number in your account with SMS and Voice capabilities.</p>\n<h2 id="set-up-twilio-functions-space">Set Up Twilio Functions Space</h2>\n<p>Inside the Twilio Console, head to <strong>Developer Tools -> Functions & Assets</strong> and create a new service. A service can contain multiple Twilio Functions and assets related to a single project. It\u2019s important that you create a new service here and not a standalone function.</p>\n<p>Head to the <em>Dependencies</em> section and add <code is:raw>@deepgram/sdk</code> (you can omit the version for the latest). Then head to the <em>Environment Variables</em> section and add a key called <code is:raw>DEEPGRAM_KEY</code> with the value of your API Key generated in your Deepgram console.</p>\n<p>Functions can have one of three visibility levels - public, protected, and private. The default of \u2018protected\u2019 is totally fine for this project and means that only Twilio webhooks can trigger them.</p>\n<h2 id="record-inbound-call">Record Inbound Call</h2>\n<p>Rename the default <code is:raw>/welcome</code> function to <code is:raw>/inbound</code>. Replace the whole file with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> twiml </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">say</span><span style="color: #C9D1D9">({ voice: </span><span style="color: #A5D6FF">&#39;woman&#39;</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9"> }, </span><span style="color: #A5D6FF">&#39;Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">record</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    maxLength: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">, </span><span style="color: #8B949E">// seconds, 30 is default</span></span>\n<span class="line"><span style="color: #C9D1D9">    playBeep: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, twiml)</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>\n<p>To respond to incoming calls and texts, Twilio lets you form and respond to requests with TwiML (Twilio Markup Language). It looks a lot like XML and can be generated with the Node Helper Library, which is included in Twilio Functions by default.</p>\n<p>This snippet creates a new TwiML response, speaks the phrase, beeps, and begins the recording. Once the call is ended (hang up or ended after 30 seconds of recording), a payload is sent to <code is:raw>/transcribe</code> (which will be created in the next section).</p>\n<p>Save the function, and click <em>Deploy All</em>. Once deployed, this function is ready to be used. Go to your Twilio number settings, and when a call comes in, select <em>Function</em>. Select your service and the <code is:raw>/inbound</code> function path.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661255979/blog/2022/08/transcribe-twilio-calls-functions/set-inbound-endpoint.png" alt="When a call comes in, use a Function. Default service with the /inbound function path."></p>\n<p>Call your number, and you should hear it speaking, then beep. If you speak now, a recording will take place, and data will be sent to <code is:raw>/transcribe</code>, but that endpoint does not exist yet - let\u2019s fix that.</p>\n<h2 id="transcribe-call">Transcribe Call</h2>\n<p>Create a new function - <code is:raw>/transcribe</code>. Delete the boilerplate and set up the function with the following code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>\n<p>The recording data will be available in the <code is:raw>event</code> object, which destructures to the <code is:raw>RecordingUrl</code> and <code is:raw>CallSid</code> values. Unfortunately, this payload doesn\u2019t include the caller\u2019s phone number, but it can be looked up from the <code is:raw>CallSid</code>. Where the <code is:raw>Further code here</code> comment is situation, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilioClient</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> context.</span><span style="color: #D2A8FF">getTwilioClient</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">from</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">caller</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">to</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">twilioNumber</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.</span><span style="color: #D2A8FF">calls</span><span style="color: #C9D1D9">(CallSid).</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>The caller\u2019s phone number is now available in a variable called <code is:raw>caller</code>, and the number they called as <code is:raw>twilioNumber</code>. Now generate a transcription with Deepgram\u2019s Node.js SDK:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: RecordingUrl }, transcriptionFeatures)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>This request uses Deepgram\u2019s <a href="https://developers.deepgram.com/documentation/features/punctuate/">punctuation</a> feature, along with a request to use the <a href="https://developers.deepgram.com/documentation/features/tier/">enhanced tier</a> for higher-accuracy transcripts.</p>\n<h2 id="send-transcription-via-sms">Send Transcription via SMS</h2>\n<p>Now that a transcript has been generated, it\u2019s time to send it to the caller. Just after the transcript is generated, add the following to send an SMS message:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">message</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.messages.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  body: </span><span style="color: #A5D6FF">`Here is what you said:</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  to: caller,</span></span>\n<span class="line"><span style="color: #C9D1D9">  from: twilioNumber</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Finally, change the callback value from <code is:raw>true</code> to <code is:raw>{ results, message }</code>. This is purely for logging to your Twilio Console.</p>\n<p>Save both files again and deploy all functions in your service. Call your Twilio number, speak after the beep, then hang up. You should receive a message a few seconds later.</p>\n<h2 id="in-summary">In Summary</h2>\n<p>The final code is as follows:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// /record</span></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">	</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> twiml </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">say</span><span style="color: #C9D1D9">({ voice: </span><span style="color: #A5D6FF">&#39;woman&#39;</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9"> }, </span><span style="color: #A5D6FF">&#39;Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">record</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    maxLength: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    playBeep: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, twiml)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// /transcribe</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilioClient</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> context.</span><span style="color: #D2A8FF">getTwilioClient</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">from</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">caller</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">to</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">twilioNumber</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.</span><span style="color: #D2A8FF">calls</span><span style="color: #C9D1D9">(CallSid).</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> , tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: RecordingUrl }, transcriptionFeatures)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">message</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.messages.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #A5D6FF">`Here is what you said:</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    to: caller,</span></span>\n<span class="line"><span style="color: #C9D1D9">    from: twilioNumber</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, { results, message })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Don\u2019t forget to install dependencies and set your environment variables. If you have any questions about this project, feel free to get in touch.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribe-phone-calls-with-twilio-functions-and-deepgram/index.md" };
function rawContent() {
  return "\nTwilio is a cloud communication platform that lets developers integrate a whole set of communication technologies into applications. On top of providing APIs, they also have Twilio Runtime - which allows the development and deployment of serverless applications directly in the Twilio Console. Super cool.\n\nToday you will be using Twilio Functions to build a phone number that gives callers a prompt, then records a message similar to a voicemail. Once completed, a transcript will be generated with Deepgram and sent to the caller.\n\n![A diagram showing a person talking into a phone call with a Twilio number, then ending the call, and then a text message thread with the spoken text sent from Twilio.](https://res.cloudinary.com/deepgram/image/upload/v1658239971/blog/2022/08/transcribe-twilio-calls-functions/twilio-diagram.png)\n\n## Before You Start\n\nYou will need a free [Deepgram API Key](https://console.deepgram.com/signup?jump=keys). You will also need a [Twilio account](https://console.twilio.com) and a phone number in your account with SMS and Voice capabilities.\n\n## Set Up Twilio Functions Space\n\nInside the Twilio Console, head to **Developer Tools -> Functions & Assets** and create a new service. A service can contain multiple Twilio Functions and assets related to a single project. It's important that you create a new service here and not a standalone function.\n\nHead to the *Dependencies* section and add `@deepgram/sdk` (you can omit the version for the latest). Then head to the *Environment Variables* section and add a key called `DEEPGRAM_KEY` with the value of your API Key generated in your Deepgram console.\n\nFunctions can have one of three visibility levels - public, protected, and private. The default of 'protected' is totally fine for this project and means that only Twilio webhooks can trigger them.\n\n## Record Inbound Call\n\nRename the default `/welcome` function to `/inbound`. Replace the whole file with the following:\n\n```js\nexports.handler = function(context, event, callback) {\n  let twiml = new Twilio.twiml.VoiceResponse()\n\n  twiml.say({ voice: 'woman', language: 'en' }, 'Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.')\n\n  twiml.record({\n    maxLength: 30, // seconds, 30 is default\n    playBeep: true,\n    recordingStatusCallback: '/transcribe'\n  })\n\n  return callback(null, twiml)\n};\n```\n\nTo respond to incoming calls and texts, Twilio lets you form and respond to requests with TwiML (Twilio Markup Language). It looks a lot like XML and can be generated with the Node Helper Library, which is included in Twilio Functions by default.\n\nThis snippet creates a new TwiML response, speaks the phrase, beeps, and begins the recording. Once the call is ended (hang up or ended after 30 seconds of recording), a payload is sent to `/transcribe` (which will be created in the next section).\n\nSave the function, and click *Deploy All*. Once deployed, this function is ready to be used. Go to your Twilio number settings, and when a call comes in, select *Function*. Select your service and the `/inbound` function path.\n\n![When a call comes in, use a Function. Default service with the /inbound function path.](https://res.cloudinary.com/deepgram/image/upload/v1661255979/blog/2022/08/transcribe-twilio-calls-functions/set-inbound-endpoint.png)\n\nCall your number, and you should hear it speaking, then beep. If you speak now, a recording will take place, and data will be sent to `/transcribe`, but that endpoint does not exist yet - let's fix that.\n\n## Transcribe Call\n\nCreate a new function - `/transcribe`. Delete the boilerplate and set up the function with the following code:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\n\nexports.handler = async function(context, event, callback) {\n  const { RecordingUrl, CallSid } = event\n  // Further code here\n  return callback(null, true)\n};\n```\n\nThe recording data will be available in the `event` object, which destructures to the `RecordingUrl` and `CallSid` values. Unfortunately, this payload doesn't include the caller's phone number, but it can be looked up from the `CallSid`. Where the `Further code here` comment is situation, add the following:\n\n```javascript\nconst twilioClient = context.getTwilioClient()\nconst { from: caller, to: twilioNumber } = await twilioClient.calls(CallSid).fetch()\n```\n\nThe caller's phone number is now available in a variable called `caller`, and the number they called as `twilioNumber`. Now generate a transcription with Deepgram's Node.js SDK:\n\n```js\nconst transcriptionFeatures = { punctuate: true, tier: 'enhanced' }\nconst { results } = await deepgram.transcription.preRecorded({ url: RecordingUrl }, transcriptionFeatures)\nconst { transcript } = results.channels[0].alternatives[0]\n```\n\nThis request uses Deepgram's [punctuation](https://developers.deepgram.com/documentation/features/punctuate/) feature, along with a request to use the [enhanced tier](https://developers.deepgram.com/documentation/features/tier/) for higher-accuracy transcripts.\n\n## Send Transcription via SMS\n\nNow that a transcript has been generated, it's time to send it to the caller. Just after the transcript is generated, add the following to send an SMS message:\n\n```js\nconst message = await twilioClient.messages.create({\n  body: `Here is what you said:\\n\\n${transcript}`,\n  to: caller,\n  from: twilioNumber\n})\n```\n\nFinally, change the callback value from `true` to `{ results, message }`. This is purely for logging to your Twilio Console.\n\nSave both files again and deploy all functions in your service. Call your Twilio number, speak after the beep, then hang up. You should receive a message a few seconds later.\n\n## In Summary\n\nThe final code is as follows:\n\n```js\n// /record\nexports.handler = function(context, event, callback) {\n	let twiml = new Twilio.twiml.VoiceResponse()\n  twiml.say({ voice: 'woman', language: 'en' }, 'Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.');\n  twiml.record({\n    maxLength: 30,\n    playBeep: true,\n    recordingStatusCallback: '/transcribe'\n  })\n  return callback(null, twiml)\n}\n\n// /transcribe\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\nexports.handler = async function(context, event, callback) {\n  const { RecordingUrl, CallSid } = event\n  const twilioClient = context.getTwilioClient()\n  const { from: caller, to: twilioNumber } = await twilioClient.calls(CallSid).fetch()\n  const transcriptionFeatures = { punctuate: true , tier: 'enhanced' }\n  const { results } = await deepgram.transcription.preRecorded({ url: RecordingUrl }, transcriptionFeatures)\n  const { transcript } = results.channels[0].alternatives[0]\n  const message = await twilioClient.messages.create({\n    body: `Here is what you said:\\n\\n${transcript}`,\n    to: caller,\n    from: twilioNumber\n  })\n  return callback(null, { results, message })\n}\n```\n\nDon't forget to install dependencies and set your environment variables. If you have any questions about this project, feel free to get in touch.\n\n";
}
function compiledContent() {
  return '<p>Twilio is a cloud communication platform that lets developers integrate a whole set of communication technologies into applications. On top of providing APIs, they also have Twilio Runtime - which allows the development and deployment of serverless applications directly in the Twilio Console. Super cool.</p>\n<p>Today you will be using Twilio Functions to build a phone number that gives callers a prompt, then records a message similar to a voicemail. Once completed, a transcript will be generated with Deepgram and sent to the caller.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1658239971/blog/2022/08/transcribe-twilio-calls-functions/twilio-diagram.png" alt="A diagram showing a person talking into a phone call with a Twilio number, then ending the call, and then a text message thread with the spoken text sent from Twilio."></p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>You will need a free <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a>. You will also need a <a href="https://console.twilio.com">Twilio account</a> and a phone number in your account with SMS and Voice capabilities.</p>\n<h2 id="set-up-twilio-functions-space">Set Up Twilio Functions Space</h2>\n<p>Inside the Twilio Console, head to <strong>Developer Tools -> Functions & Assets</strong> and create a new service. A service can contain multiple Twilio Functions and assets related to a single project. It\u2019s important that you create a new service here and not a standalone function.</p>\n<p>Head to the <em>Dependencies</em> section and add <code is:raw>@deepgram/sdk</code> (you can omit the version for the latest). Then head to the <em>Environment Variables</em> section and add a key called <code is:raw>DEEPGRAM_KEY</code> with the value of your API Key generated in your Deepgram console.</p>\n<p>Functions can have one of three visibility levels - public, protected, and private. The default of \u2018protected\u2019 is totally fine for this project and means that only Twilio webhooks can trigger them.</p>\n<h2 id="record-inbound-call">Record Inbound Call</h2>\n<p>Rename the default <code is:raw>/welcome</code> function to <code is:raw>/inbound</code>. Replace the whole file with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> twiml </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">say</span><span style="color: #C9D1D9">({ voice: </span><span style="color: #A5D6FF">&#39;woman&#39;</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9"> }, </span><span style="color: #A5D6FF">&#39;Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">record</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    maxLength: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">, </span><span style="color: #8B949E">// seconds, 30 is default</span></span>\n<span class="line"><span style="color: #C9D1D9">    playBeep: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, twiml)</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>\n<p>To respond to incoming calls and texts, Twilio lets you form and respond to requests with TwiML (Twilio Markup Language). It looks a lot like XML and can be generated with the Node Helper Library, which is included in Twilio Functions by default.</p>\n<p>This snippet creates a new TwiML response, speaks the phrase, beeps, and begins the recording. Once the call is ended (hang up or ended after 30 seconds of recording), a payload is sent to <code is:raw>/transcribe</code> (which will be created in the next section).</p>\n<p>Save the function, and click <em>Deploy All</em>. Once deployed, this function is ready to be used. Go to your Twilio number settings, and when a call comes in, select <em>Function</em>. Select your service and the <code is:raw>/inbound</code> function path.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661255979/blog/2022/08/transcribe-twilio-calls-functions/set-inbound-endpoint.png" alt="When a call comes in, use a Function. Default service with the /inbound function path."></p>\n<p>Call your number, and you should hear it speaking, then beep. If you speak now, a recording will take place, and data will be sent to <code is:raw>/transcribe</code>, but that endpoint does not exist yet - let\u2019s fix that.</p>\n<h2 id="transcribe-call">Transcribe Call</h2>\n<p>Create a new function - <code is:raw>/transcribe</code>. Delete the boilerplate and set up the function with the following code:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>\n<p>The recording data will be available in the <code is:raw>event</code> object, which destructures to the <code is:raw>RecordingUrl</code> and <code is:raw>CallSid</code> values. Unfortunately, this payload doesn\u2019t include the caller\u2019s phone number, but it can be looked up from the <code is:raw>CallSid</code>. Where the <code is:raw>Further code here</code> comment is situation, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilioClient</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> context.</span><span style="color: #D2A8FF">getTwilioClient</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">from</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">caller</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">to</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">twilioNumber</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.</span><span style="color: #D2A8FF">calls</span><span style="color: #C9D1D9">(CallSid).</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>The caller\u2019s phone number is now available in a variable called <code is:raw>caller</code>, and the number they called as <code is:raw>twilioNumber</code>. Now generate a transcription with Deepgram\u2019s Node.js SDK:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: RecordingUrl }, transcriptionFeatures)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>This request uses Deepgram\u2019s <a href="https://developers.deepgram.com/documentation/features/punctuate/">punctuation</a> feature, along with a request to use the <a href="https://developers.deepgram.com/documentation/features/tier/">enhanced tier</a> for higher-accuracy transcripts.</p>\n<h2 id="send-transcription-via-sms">Send Transcription via SMS</h2>\n<p>Now that a transcript has been generated, it\u2019s time to send it to the caller. Just after the transcript is generated, add the following to send an SMS message:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">message</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.messages.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  body: </span><span style="color: #A5D6FF">`Here is what you said:</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  to: caller,</span></span>\n<span class="line"><span style="color: #C9D1D9">  from: twilioNumber</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Finally, change the callback value from <code is:raw>true</code> to <code is:raw>{ results, message }</code>. This is purely for logging to your Twilio Console.</p>\n<p>Save both files again and deploy all functions in your service. Call your Twilio number, speak after the beep, then hang up. You should receive a message a few seconds later.</p>\n<h2 id="in-summary">In Summary</h2>\n<p>The final code is as follows:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// /record</span></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">	</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> twiml </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">say</span><span style="color: #C9D1D9">({ voice: </span><span style="color: #A5D6FF">&#39;woman&#39;</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9"> }, </span><span style="color: #A5D6FF">&#39;Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">record</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    maxLength: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    playBeep: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, twiml)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// /transcribe</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilioClient</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> context.</span><span style="color: #D2A8FF">getTwilioClient</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">from</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">caller</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">to</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">twilioNumber</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.</span><span style="color: #D2A8FF">calls</span><span style="color: #C9D1D9">(CallSid).</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> , tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: RecordingUrl }, transcriptionFeatures)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">message</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.messages.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #A5D6FF">`Here is what you said:</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    to: caller,</span></span>\n<span class="line"><span style="color: #C9D1D9">    from: twilioNumber</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, { results, message })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Don\u2019t forget to install dependencies and set your environment variables. If you have any questions about this project, feel free to get in touch.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribe-phone-calls-with-twilio-functions-and-deepgram/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Twilio is a cloud communication platform that lets developers integrate a whole set of communication technologies into applications. On top of providing APIs, they also have Twilio Runtime - which allows the development and deployment of serverless applications directly in the Twilio Console. Super cool.</p>
<p>Today you will be using Twilio Functions to build a phone number that gives callers a prompt, then records a message similar to a voicemail. Once completed, a transcript will be generated with Deepgram and sent to the caller.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1658239971/blog/2022/08/transcribe-twilio-calls-functions/twilio-diagram.png" alt="A diagram showing a person talking into a phone call with a Twilio number, then ending the call, and then a text message thread with the spoken text sent from Twilio."></p>
<h2 id="before-you-start">Before You Start</h2>
<p>You will need a free <a href="https://console.deepgram.com/signup?jump=keys">Deepgram API Key</a>. You will also need a <a href="https://console.twilio.com">Twilio account</a> and a phone number in your account with SMS and Voice capabilities.</p>
<h2 id="set-up-twilio-functions-space">Set Up Twilio Functions Space</h2>
<p>Inside the Twilio Console, head to <strong>Developer Tools -> Functions & Assets</strong> and create a new service. A service can contain multiple Twilio Functions and assets related to a single project. It’s important that you create a new service here and not a standalone function.</p>
<p>Head to the <em>Dependencies</em> section and add <code>@deepgram/sdk</code> (you can omit the version for the latest). Then head to the <em>Environment Variables</em> section and add a key called <code>DEEPGRAM_KEY</code> with the value of your API Key generated in your Deepgram console.</p>
<p>Functions can have one of three visibility levels - public, protected, and private. The default of ‘protected’ is totally fine for this project and means that only Twilio webhooks can trigger them.</p>
<h2 id="record-inbound-call">Record Inbound Call</h2>
<p>Rename the default <code>/welcome</code> function to <code>/inbound</code>. Replace the whole file with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> twiml </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">say</span><span style="color: #C9D1D9">({ voice: </span><span style="color: #A5D6FF">&#39;woman&#39;</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9"> }, </span><span style="color: #A5D6FF">&#39;Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">record</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    maxLength: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">, </span><span style="color: #8B949E">// seconds, 30 is default</span></span>
<span class="line"><span style="color: #C9D1D9">    playBeep: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, twiml)</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>
<p>To respond to incoming calls and texts, Twilio lets you form and respond to requests with TwiML (Twilio Markup Language). It looks a lot like XML and can be generated with the Node Helper Library, which is included in Twilio Functions by default.</p>
<p>This snippet creates a new TwiML response, speaks the phrase, beeps, and begins the recording. Once the call is ended (hang up or ended after 30 seconds of recording), a payload is sent to <code>/transcribe</code> (which will be created in the next section).</p>
<p>Save the function, and click <em>Deploy All</em>. Once deployed, this function is ready to be used. Go to your Twilio number settings, and when a call comes in, select <em>Function</em>. Select your service and the <code>/inbound</code> function path.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661255979/blog/2022/08/transcribe-twilio-calls-functions/set-inbound-endpoint.png" alt="When a call comes in, use a Function. Default service with the /inbound function path."></p>
<p>Call your number, and you should hear it speaking, then beep. If you speak now, a recording will take place, and data will be sent to <code>/transcribe</code>, but that endpoint does not exist yet - let’s fix that.</p>
<h2 id="transcribe-call">Transcribe Call</h2>
<p>Create a new function - <code>/transcribe</code>. Delete the boilerplate and set up the function with the following code:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span></code></pre>
<p>The recording data will be available in the <code>event</code> object, which destructures to the <code>RecordingUrl</code> and <code>CallSid</code> values. Unfortunately, this payload doesn’t include the caller’s phone number, but it can be looked up from the <code>CallSid</code>. Where the <code>Further code here</code> comment is situation, add the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilioClient</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> context.</span><span style="color: #D2A8FF">getTwilioClient</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">from</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">caller</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">to</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">twilioNumber</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.</span><span style="color: #D2A8FF">calls</span><span style="color: #C9D1D9">(CallSid).</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span></code></pre>
<p>The caller’s phone number is now available in a variable called <code>caller</code>, and the number they called as <code>twilioNumber</code>. Now generate a transcription with Deepgram’s Node.js SDK:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">, tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: RecordingUrl }, transcriptionFeatures)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span></code></pre>
<p>This request uses Deepgram’s <a href="https://developers.deepgram.com/documentation/features/punctuate/">punctuation</a> feature, along with a request to use the <a href="https://developers.deepgram.com/documentation/features/tier/">enhanced tier</a> for higher-accuracy transcripts.</p>
<h2 id="send-transcription-via-sms">Send Transcription via SMS</h2>
<p>Now that a transcript has been generated, it’s time to send it to the caller. Just after the transcript is generated, add the following to send an SMS message:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">message</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.messages.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  body: </span><span style="color: #A5D6FF">\`Here is what you said:</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">\${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  to: caller,</span></span>
<span class="line"><span style="color: #C9D1D9">  from: twilioNumber</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Finally, change the callback value from <code>true</code> to <code>{ results, message }</code>. This is purely for logging to your Twilio Console.</p>
<p>Save both files again and deploy all functions in your service. Call your Twilio number, speak after the beep, then hang up. You should receive a message a few seconds later.</p>
<h2 id="in-summary">In Summary</h2>
<p>The final code is as follows:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// /record</span></span>
<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">	</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> twiml </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> Twilio.twiml.</span><span style="color: #D2A8FF">VoiceResponse</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">say</span><span style="color: #C9D1D9">({ voice: </span><span style="color: #A5D6FF">&#39;woman&#39;</span><span style="color: #C9D1D9">, language: </span><span style="color: #A5D6FF">&#39;en&#39;</span><span style="color: #C9D1D9"> }, </span><span style="color: #A5D6FF">&#39;Try Deepgram transcription by speaking after the beep. Talk about what you see around you right now.&#39;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">  twiml.</span><span style="color: #D2A8FF">record</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    maxLength: </span><span style="color: #79C0FF">30</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    playBeep: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    recordingStatusCallback: </span><span style="color: #A5D6FF">&#39;/transcribe&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, twiml)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// /transcribe</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">callback</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">RecordingUrl</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">CallSid</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> event</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">twilioClient</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> context.</span><span style="color: #D2A8FF">getTwilioClient</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #FFA657">from</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">caller</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">to</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">twilioNumber</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.</span><span style="color: #D2A8FF">calls</span><span style="color: #C9D1D9">(CallSid).</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcriptionFeatures</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { punctuate: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> , tier: </span><span style="color: #A5D6FF">&#39;enhanced&#39;</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url: RecordingUrl }, transcriptionFeatures)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> results.channels[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">message</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> twilioClient.messages.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #A5D6FF">\`Here is what you said:</span><span style="color: #79C0FF">\\n\\n</span><span style="color: #A5D6FF">\${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    to: caller,</span></span>
<span class="line"><span style="color: #C9D1D9">    from: twilioNumber</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">callback</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">null</span><span style="color: #C9D1D9">, { results, message })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Don’t forget to install dependencies and set your environment variables. If you have any questions about this project, feel free to get in touch.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcribe-phone-calls-with-twilio-functions-and-deepgram/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
