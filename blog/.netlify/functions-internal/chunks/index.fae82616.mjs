import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "why-would-you-do-this", "text": "Why would you do this?" }, { "depth": 2, "slug": "the-idea-containers-as-modules", "text": "The idea: containers as modules" }, { "depth": 3, "slug": "how-to-use-sidomo", "text": "How to use sidomo" }, { "depth": 4, "slug": "setting-up-sidomo-a-one-liner", "text": "Setting up Sidomo: a one-liner" }, { "depth": 4, "slug": "example-a-simple-hello-world", "text": "Example: a simple Hello World" }, { "depth": 6, "slug": "shell", "text": "shell" }, { "depth": 6, "slug": "python", "text": "Python" }, { "depth": 4, "slug": "example-wrangling-ffmpeg-with-sidomo", "text": "Example: wrangling FFMPEG with sidomo" }, { "depth": 6, "slug": "shell-1", "text": "shell" }, { "depth": 6, "slug": "python-1", "text": "Python" }, { "depth": 2, "slug": "fun-in-the-future", "text": "Fun in the future" }, { "depth": 2, "slug": "whyd-we-make-this", "text": "Why\u2019d we make this?" }], "source": "![](https://res.cloudinary.com/deepgram/image/upload/v1661721061/blog/import-a-docker-container-in-python/Screen-Shot-2016-02-23-at-11-29-48-AM.png)\n\n## Why would you do this?\n\nDocker containers are awesome for isolating applications from each other, but what if you *want* them to talk to each other? For instance, if you're developing an app in python that needs to interact with software written in another language. There are a few techniques for achieving low-level interoperability between Python and other popular languages. But if you have a [weird case](http://stackoverflow.com/questions/546160/what-is-erlang-written-in?answertab=votes#tab-top), or some complex legacy software, this becomes difficult or impossible.\n\n## The idea: containers as modules\n\nWe created [sidomo - Simple Docker Module](https://github.com/deepgram/sidomo) *so that if you can get your weirdo app to run in any linux environment, then you can instantly call it from Python with zero added effort. Right now most people use the Docker Daemon API to manage containers carrying their apps. ([Kubernetes](http://kubernetes.io/) / [Mesos](http://mesos.apache.org/) are great examples of this). Sidomo opens up a whole new use case for containers-turning weirdo software into nice, plain vanilla python modules that work seamlessly in python code.* not an [AWS service](https://www.expeditedssl.com/aws-in-plain-english)\n\n### How to use sidomo\n\nMake sure you have docker installed and a docker daemon running. If you're not sure if this is the case, run `docker ps` and see if you get \"CONTAINER ID ...\" as output. If you aren't sure how to get docker set up properly, you can check out [this link](https://docs.docker.com/engine/installation/) or [search here](https://www.google.com/search?q=install+docker) to find your way.\n\n#### Setting up Sidomo: a one-liner\n\nYou can install sidomo directly from the git repository using pip. Just run the following command in your shell:\n\n```\npip install -e 'git+https://github.com/deepgram/sidomo.git#egg=sidomo'  \n```\n\n#### Example: a simple Hello World\n\nThis will start a container from the ubuntu base image, run `echo hello from` and then `echo the other side`, and print the lines of output from the process. To prepare for this example, you need to pull the ubuntu image to your machine with one shell command.\n\n###### shell\n\n```\n# Get the latest Ubuntu image\ndocker pull ubuntu  \n```\n\n###### Python\n\n```\nfrom sidomo import Container\n\nwith Container('ubuntu') as c:  \n    for line in c.run('bash -c \"echo hello from; echo the other side;\"'):\n        print(line)\n```\n\n#### Example: wrangling FFMPEG with sidomo\n\nNow let's actually do something useful with sidomo. [FFMPEG](https://www.ffmpeg.org/) is a somewhat complex piece of software that manipulates media files efficiently for almost any purpose, but it's not easy to install consistently on different platforms, and there are no up-to-date python bindings for it. With Sidomo, you can pull FFMPEG with docker and easily run it from Python.\n\n###### shell\n\n```\ndocker pull cellofellow/ffmpeg  \n```\n\n###### Python\n\nThe example below will grab audio from a URL, transcode it, and print debug messages to prove that it worked. The process's stdout (the raw audio output) is disabled since we only want to see the debug messages.\n\n```\nfrom sidomo import Container  \nurl = 'http://www2.warwick.ac.uk/fac/soc/sociology/staff/sfuller/media/audio/9_minutes_on_epistemology.mp3'  \nwith Container(  \n    'cellofellow/ffmpeg',\n    stdout=False\n) as c:\n    for line in c.run(\n        'bash -c \\\"\\\n            wget -nv -O tmp.unconverted %s;\\\n            ffmpeg -i tmp.unconverted -f wav -acodec pcm_s16le -ac 1 -ar 16000 tmp.wav;\\\n            cat tmp.wav\\\n        \\\"\\\n        ' % url\n    ):\n        print line\n```\n\nIf you wanted to actually save the transcoded audio from this process, you would replace the line `stdout=False` with `stderr=False` and make sure to write each line of output from the container process (raw audio data) to a file.\n\n<WhitepaperPromo whitepaper=\"latest\"></WhitepaperPromo>\n\n## Fun in the future\n\nIf you have to write python bindings for some complex software, consider containerizing that software instead. With sidomo, turning a containerized application into a python module is painless and clean. If you find yourself using subprocess frequently to interact with code for which proper bindings do not exist, then containerizing these processes may make some things simpler. ![](https://www.adweek.com/socialtimes/files/2014/01/twitter-nesting-dolls.jpg) If you use sidomo in a python app that ends up developing complex dependencies, you may need to wrap the app in its own container and call it from an app with fewer dependencies on the outside. Sidomo supports this as well, since [docker supports nested containers](https://blog.docker.com/2013/09/docker-can-now-run-within-docker/). You can make your own software matryoshka doll by using sidomo to import sidomo to import sidomo.... Good luck! Just remember, you can't containerize away complexity indefinitely. Or can you? [Sidomo on github](https://github.com/deepgram/sidomo)\n\n## Why'd we make this?\n\nWe created the Deepgram API, a search engine for audio and video that makes speech searchable. Deepgram uses a complex stack of signal processing, statistics, and machine learning software working in concert to give a seamless \"upload and search\" experience. Sidomo lets us rapidly containerize finicky software and integrate it with python, our glue. To learn more about what we're up to and the functionality of our API, check out our [full documentation](https://developers.deepgram.com/documentation/), or sign up below to get our newsletter and stay in touch.\n\n", "html": '<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661721061/blog/import-a-docker-container-in-python/Screen-Shot-2016-02-23-at-11-29-48-AM.png" alt=""></p>\n<h2 id="why-would-you-do-this">Why would you do this?</h2>\n<p>Docker containers are awesome for isolating applications from each other, but what if you <em>want</em> them to talk to each other? For instance, if you\u2019re developing an app in python that needs to interact with software written in another language. There are a few techniques for achieving low-level interoperability between Python and other popular languages. But if you have a <a href="http://stackoverflow.com/questions/546160/what-is-erlang-written-in?answertab=votes#tab-top">weird case</a>, or some complex legacy software, this becomes difficult or impossible.</p>\n<h2 id="the-idea-containers-as-modules">The idea: containers as modules</h2>\n<p>We created <a href="https://github.com/deepgram/sidomo">sidomo - Simple Docker Module</a> <em>so that if you can get your weirdo app to run in any linux environment, then you can instantly call it from Python with zero added effort. Right now most people use the Docker Daemon API to manage containers carrying their apps. (<a href="http://kubernetes.io/">Kubernetes</a> / <a href="http://mesos.apache.org/">Mesos</a> are great examples of this). Sidomo opens up a whole new use case for containers-turning weirdo software into nice, plain vanilla python modules that work seamlessly in python code.</em> not an <a href="https://www.expeditedssl.com/aws-in-plain-english">AWS service</a></p>\n<h3 id="how-to-use-sidomo">How to use sidomo</h3>\n<p>Make sure you have docker installed and a docker daemon running. If you\u2019re not sure if this is the case, run <code is:raw>docker ps</code> and see if you get \u201CCONTAINER ID \u2026\u201D as output. If you aren\u2019t sure how to get docker set up properly, you can check out <a href="https://docs.docker.com/engine/installation/">this link</a> or <a href="https://www.google.com/search?q=install+docker">search here</a> to find your way.</p>\n<h4 id="setting-up-sidomo-a-one-liner">Setting up Sidomo: a one-liner</h4>\n<p>You can install sidomo directly from the git repository using pip. Just run the following command in your shell:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install -e &#39;git+https://github.com/deepgram/sidomo.git#egg=sidomo&#39;  </span></span></code></pre>\n<h4 id="example-a-simple-hello-world">Example: a simple Hello World</h4>\n<p>This will start a container from the ubuntu base image, run <code is:raw>echo hello from</code> and then <code is:raw>echo the other side</code>, and print the lines of output from the process. To prepare for this example, you need to pull the ubuntu image to your machine with one shell command.</p>\n<h6 id="shell">shell</h6>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9"># Get the latest Ubuntu image</span></span>\n<span class="line"><span style="color: #c9d1d9">docker pull ubuntu  </span></span></code></pre>\n<h6 id="python">Python</h6>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">from sidomo import Container</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">with Container(&#39;ubuntu&#39;) as c:  </span></span>\n<span class="line"><span style="color: #c9d1d9">    for line in c.run(&#39;bash -c &quot;echo hello from; echo the other side;&quot;&#39;):</span></span>\n<span class="line"><span style="color: #c9d1d9">        print(line)</span></span></code></pre>\n<h4 id="example-wrangling-ffmpeg-with-sidomo">Example: wrangling FFMPEG with sidomo</h4>\n<p>Now let\u2019s actually do something useful with sidomo. <a href="https://www.ffmpeg.org/">FFMPEG</a> is a somewhat complex piece of software that manipulates media files efficiently for almost any purpose, but it\u2019s not easy to install consistently on different platforms, and there are no up-to-date python bindings for it. With Sidomo, you can pull FFMPEG with docker and easily run it from Python.</p>\n<h6 id="shell-1">shell</h6>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker pull cellofellow/ffmpeg  </span></span></code></pre>\n<h6 id="python-1">Python</h6>\n<p>The example below will grab audio from a URL, transcode it, and print debug messages to prove that it worked. The process\u2019s stdout (the raw audio output) is disabled since we only want to see the debug messages.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">from sidomo import Container  </span></span>\n<span class="line"><span style="color: #c9d1d9">url = &#39;http://www2.warwick.ac.uk/fac/soc/sociology/staff/sfuller/media/audio/9_minutes_on_epistemology.mp3&#39;  </span></span>\n<span class="line"><span style="color: #c9d1d9">with Container(  </span></span>\n<span class="line"><span style="color: #c9d1d9">    &#39;cellofellow/ffmpeg&#39;,</span></span>\n<span class="line"><span style="color: #c9d1d9">    stdout=False</span></span>\n<span class="line"><span style="color: #c9d1d9">) as c:</span></span>\n<span class="line"><span style="color: #c9d1d9">    for line in c.run(</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39;bash -c \\&quot;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">            wget -nv -O tmp.unconverted %s;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">            ffmpeg -i tmp.unconverted -f wav -acodec pcm_s16le -ac 1 -ar 16000 tmp.wav;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">            cat tmp.wav\\</span></span>\n<span class="line"><span style="color: #c9d1d9">        \\&quot;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39; % url</span></span>\n<span class="line"><span style="color: #c9d1d9">    ):</span></span>\n<span class="line"><span style="color: #c9d1d9">        print line</span></span></code></pre>\n<p>If you wanted to actually save the transcoded audio from this process, you would replace the line <code is:raw>stdout=False</code> with <code is:raw>stderr=False</code> and make sure to write each line of output from the container process (raw audio data) to a file.</p>\n<WhitepaperPromo whitepaper="latest" />\n<h2 id="fun-in-the-future">Fun in the future</h2>\n<p>If you have to write python bindings for some complex software, consider containerizing that software instead. With sidomo, turning a containerized application into a python module is painless and clean. If you find yourself using subprocess frequently to interact with code for which proper bindings do not exist, then containerizing these processes may make some things simpler. <img src="https://www.adweek.com/socialtimes/files/2014/01/twitter-nesting-dolls.jpg" alt=""> If you use sidomo in a python app that ends up developing complex dependencies, you may need to wrap the app in its own container and call it from an app with fewer dependencies on the outside. Sidomo supports this as well, since <a href="https://blog.docker.com/2013/09/docker-can-now-run-within-docker/">docker supports nested containers</a>. You can make your own software matryoshka doll by using sidomo to import sidomo to import sidomo\u2026 Good luck! Just remember, you can\u2019t containerize away complexity indefinitely. Or can you? <a href="https://github.com/deepgram/sidomo">Sidomo on github</a></p>\n<h2 id="whyd-we-make-this">Why\u2019d we make this?</h2>\n<p>We created the Deepgram API, a search engine for audio and video that makes speech searchable. Deepgram uses a complex stack of signal processing, statistics, and machine learning software working in concert to give a seamless \u201Cupload and search\u201D experience. Sidomo lets us rapidly containerize finicky software and integrate it with python, our glue. To learn more about what we\u2019re up to and the functionality of our API, check out our <a href="https://developers.deepgram.com/documentation/">full documentation</a>, or sign up below to get our newsletter and stay in touch.</p>' };
const frontmatter = { "title": "Import a Docker Container in Python", "description": "Learn how to import a Docker container using Python.", "date": "2016-02-24T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1661981208/blog/import-a-docker-container-in-python/import-docker-container%402x.jpg", "authors": ["scott-stephenson"], "category": "ai-and-engineering", "tags": ["python"], "seo": { "title": "Import a Docker Container in Python", "description": "Learn how to import a Docker container using Python." }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661981208/blog/import-a-docker-container-in-python/import-docker-container%402x.jpg" }, "shorturls": { "share": "https://dpgr.am/64a12b2", "twitter": "https://dpgr.am/e24d798", "linkedin": "https://dpgr.am/c05bac8", "reddit": "https://dpgr.am/a832ff1", "facebook": "https://dpgr.am/8d9edfc" }, "astro": { "headings": [{ "depth": 2, "slug": "why-would-you-do-this", "text": "Why would you do this?" }, { "depth": 2, "slug": "the-idea-containers-as-modules", "text": "The idea: containers as modules" }, { "depth": 3, "slug": "how-to-use-sidomo", "text": "How to use sidomo" }, { "depth": 4, "slug": "setting-up-sidomo-a-one-liner", "text": "Setting up Sidomo: a one-liner" }, { "depth": 4, "slug": "example-a-simple-hello-world", "text": "Example: a simple Hello World" }, { "depth": 6, "slug": "shell", "text": "shell" }, { "depth": 6, "slug": "python", "text": "Python" }, { "depth": 4, "slug": "example-wrangling-ffmpeg-with-sidomo", "text": "Example: wrangling FFMPEG with sidomo" }, { "depth": 6, "slug": "shell-1", "text": "shell" }, { "depth": 6, "slug": "python-1", "text": "Python" }, { "depth": 2, "slug": "fun-in-the-future", "text": "Fun in the future" }, { "depth": 2, "slug": "whyd-we-make-this", "text": "Why\u2019d we make this?" }], "source": "![](https://res.cloudinary.com/deepgram/image/upload/v1661721061/blog/import-a-docker-container-in-python/Screen-Shot-2016-02-23-at-11-29-48-AM.png)\n\n## Why would you do this?\n\nDocker containers are awesome for isolating applications from each other, but what if you *want* them to talk to each other? For instance, if you're developing an app in python that needs to interact with software written in another language. There are a few techniques for achieving low-level interoperability between Python and other popular languages. But if you have a [weird case](http://stackoverflow.com/questions/546160/what-is-erlang-written-in?answertab=votes#tab-top), or some complex legacy software, this becomes difficult or impossible.\n\n## The idea: containers as modules\n\nWe created [sidomo - Simple Docker Module](https://github.com/deepgram/sidomo) *so that if you can get your weirdo app to run in any linux environment, then you can instantly call it from Python with zero added effort. Right now most people use the Docker Daemon API to manage containers carrying their apps. ([Kubernetes](http://kubernetes.io/) / [Mesos](http://mesos.apache.org/) are great examples of this). Sidomo opens up a whole new use case for containers-turning weirdo software into nice, plain vanilla python modules that work seamlessly in python code.* not an [AWS service](https://www.expeditedssl.com/aws-in-plain-english)\n\n### How to use sidomo\n\nMake sure you have docker installed and a docker daemon running. If you're not sure if this is the case, run `docker ps` and see if you get \"CONTAINER ID ...\" as output. If you aren't sure how to get docker set up properly, you can check out [this link](https://docs.docker.com/engine/installation/) or [search here](https://www.google.com/search?q=install+docker) to find your way.\n\n#### Setting up Sidomo: a one-liner\n\nYou can install sidomo directly from the git repository using pip. Just run the following command in your shell:\n\n```\npip install -e 'git+https://github.com/deepgram/sidomo.git#egg=sidomo'  \n```\n\n#### Example: a simple Hello World\n\nThis will start a container from the ubuntu base image, run `echo hello from` and then `echo the other side`, and print the lines of output from the process. To prepare for this example, you need to pull the ubuntu image to your machine with one shell command.\n\n###### shell\n\n```\n# Get the latest Ubuntu image\ndocker pull ubuntu  \n```\n\n###### Python\n\n```\nfrom sidomo import Container\n\nwith Container('ubuntu') as c:  \n    for line in c.run('bash -c \"echo hello from; echo the other side;\"'):\n        print(line)\n```\n\n#### Example: wrangling FFMPEG with sidomo\n\nNow let's actually do something useful with sidomo. [FFMPEG](https://www.ffmpeg.org/) is a somewhat complex piece of software that manipulates media files efficiently for almost any purpose, but it's not easy to install consistently on different platforms, and there are no up-to-date python bindings for it. With Sidomo, you can pull FFMPEG with docker and easily run it from Python.\n\n###### shell\n\n```\ndocker pull cellofellow/ffmpeg  \n```\n\n###### Python\n\nThe example below will grab audio from a URL, transcode it, and print debug messages to prove that it worked. The process's stdout (the raw audio output) is disabled since we only want to see the debug messages.\n\n```\nfrom sidomo import Container  \nurl = 'http://www2.warwick.ac.uk/fac/soc/sociology/staff/sfuller/media/audio/9_minutes_on_epistemology.mp3'  \nwith Container(  \n    'cellofellow/ffmpeg',\n    stdout=False\n) as c:\n    for line in c.run(\n        'bash -c \\\"\\\n            wget -nv -O tmp.unconverted %s;\\\n            ffmpeg -i tmp.unconverted -f wav -acodec pcm_s16le -ac 1 -ar 16000 tmp.wav;\\\n            cat tmp.wav\\\n        \\\"\\\n        ' % url\n    ):\n        print line\n```\n\nIf you wanted to actually save the transcoded audio from this process, you would replace the line `stdout=False` with `stderr=False` and make sure to write each line of output from the container process (raw audio data) to a file.\n\n<WhitepaperPromo whitepaper=\"latest\"></WhitepaperPromo>\n\n## Fun in the future\n\nIf you have to write python bindings for some complex software, consider containerizing that software instead. With sidomo, turning a containerized application into a python module is painless and clean. If you find yourself using subprocess frequently to interact with code for which proper bindings do not exist, then containerizing these processes may make some things simpler. ![](https://www.adweek.com/socialtimes/files/2014/01/twitter-nesting-dolls.jpg) If you use sidomo in a python app that ends up developing complex dependencies, you may need to wrap the app in its own container and call it from an app with fewer dependencies on the outside. Sidomo supports this as well, since [docker supports nested containers](https://blog.docker.com/2013/09/docker-can-now-run-within-docker/). You can make your own software matryoshka doll by using sidomo to import sidomo to import sidomo.... Good luck! Just remember, you can't containerize away complexity indefinitely. Or can you? [Sidomo on github](https://github.com/deepgram/sidomo)\n\n## Why'd we make this?\n\nWe created the Deepgram API, a search engine for audio and video that makes speech searchable. Deepgram uses a complex stack of signal processing, statistics, and machine learning software working in concert to give a seamless \"upload and search\" experience. Sidomo lets us rapidly containerize finicky software and integrate it with python, our glue. To learn more about what we're up to and the functionality of our API, check out our [full documentation](https://developers.deepgram.com/documentation/), or sign up below to get our newsletter and stay in touch.\n\n", "html": '<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661721061/blog/import-a-docker-container-in-python/Screen-Shot-2016-02-23-at-11-29-48-AM.png" alt=""></p>\n<h2 id="why-would-you-do-this">Why would you do this?</h2>\n<p>Docker containers are awesome for isolating applications from each other, but what if you <em>want</em> them to talk to each other? For instance, if you\u2019re developing an app in python that needs to interact with software written in another language. There are a few techniques for achieving low-level interoperability between Python and other popular languages. But if you have a <a href="http://stackoverflow.com/questions/546160/what-is-erlang-written-in?answertab=votes#tab-top">weird case</a>, or some complex legacy software, this becomes difficult or impossible.</p>\n<h2 id="the-idea-containers-as-modules">The idea: containers as modules</h2>\n<p>We created <a href="https://github.com/deepgram/sidomo">sidomo - Simple Docker Module</a> <em>so that if you can get your weirdo app to run in any linux environment, then you can instantly call it from Python with zero added effort. Right now most people use the Docker Daemon API to manage containers carrying their apps. (<a href="http://kubernetes.io/">Kubernetes</a> / <a href="http://mesos.apache.org/">Mesos</a> are great examples of this). Sidomo opens up a whole new use case for containers-turning weirdo software into nice, plain vanilla python modules that work seamlessly in python code.</em> not an <a href="https://www.expeditedssl.com/aws-in-plain-english">AWS service</a></p>\n<h3 id="how-to-use-sidomo">How to use sidomo</h3>\n<p>Make sure you have docker installed and a docker daemon running. If you\u2019re not sure if this is the case, run <code is:raw>docker ps</code> and see if you get \u201CCONTAINER ID \u2026\u201D as output. If you aren\u2019t sure how to get docker set up properly, you can check out <a href="https://docs.docker.com/engine/installation/">this link</a> or <a href="https://www.google.com/search?q=install+docker">search here</a> to find your way.</p>\n<h4 id="setting-up-sidomo-a-one-liner">Setting up Sidomo: a one-liner</h4>\n<p>You can install sidomo directly from the git repository using pip. Just run the following command in your shell:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install -e &#39;git+https://github.com/deepgram/sidomo.git#egg=sidomo&#39;  </span></span></code></pre>\n<h4 id="example-a-simple-hello-world">Example: a simple Hello World</h4>\n<p>This will start a container from the ubuntu base image, run <code is:raw>echo hello from</code> and then <code is:raw>echo the other side</code>, and print the lines of output from the process. To prepare for this example, you need to pull the ubuntu image to your machine with one shell command.</p>\n<h6 id="shell">shell</h6>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9"># Get the latest Ubuntu image</span></span>\n<span class="line"><span style="color: #c9d1d9">docker pull ubuntu  </span></span></code></pre>\n<h6 id="python">Python</h6>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">from sidomo import Container</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">with Container(&#39;ubuntu&#39;) as c:  </span></span>\n<span class="line"><span style="color: #c9d1d9">    for line in c.run(&#39;bash -c &quot;echo hello from; echo the other side;&quot;&#39;):</span></span>\n<span class="line"><span style="color: #c9d1d9">        print(line)</span></span></code></pre>\n<h4 id="example-wrangling-ffmpeg-with-sidomo">Example: wrangling FFMPEG with sidomo</h4>\n<p>Now let\u2019s actually do something useful with sidomo. <a href="https://www.ffmpeg.org/">FFMPEG</a> is a somewhat complex piece of software that manipulates media files efficiently for almost any purpose, but it\u2019s not easy to install consistently on different platforms, and there are no up-to-date python bindings for it. With Sidomo, you can pull FFMPEG with docker and easily run it from Python.</p>\n<h6 id="shell-1">shell</h6>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker pull cellofellow/ffmpeg  </span></span></code></pre>\n<h6 id="python-1">Python</h6>\n<p>The example below will grab audio from a URL, transcode it, and print debug messages to prove that it worked. The process\u2019s stdout (the raw audio output) is disabled since we only want to see the debug messages.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">from sidomo import Container  </span></span>\n<span class="line"><span style="color: #c9d1d9">url = &#39;http://www2.warwick.ac.uk/fac/soc/sociology/staff/sfuller/media/audio/9_minutes_on_epistemology.mp3&#39;  </span></span>\n<span class="line"><span style="color: #c9d1d9">with Container(  </span></span>\n<span class="line"><span style="color: #c9d1d9">    &#39;cellofellow/ffmpeg&#39;,</span></span>\n<span class="line"><span style="color: #c9d1d9">    stdout=False</span></span>\n<span class="line"><span style="color: #c9d1d9">) as c:</span></span>\n<span class="line"><span style="color: #c9d1d9">    for line in c.run(</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39;bash -c \\&quot;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">            wget -nv -O tmp.unconverted %s;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">            ffmpeg -i tmp.unconverted -f wav -acodec pcm_s16le -ac 1 -ar 16000 tmp.wav;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">            cat tmp.wav\\</span></span>\n<span class="line"><span style="color: #c9d1d9">        \\&quot;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39; % url</span></span>\n<span class="line"><span style="color: #c9d1d9">    ):</span></span>\n<span class="line"><span style="color: #c9d1d9">        print line</span></span></code></pre>\n<p>If you wanted to actually save the transcoded audio from this process, you would replace the line <code is:raw>stdout=False</code> with <code is:raw>stderr=False</code> and make sure to write each line of output from the container process (raw audio data) to a file.</p>\n<WhitepaperPromo whitepaper="latest" />\n<h2 id="fun-in-the-future">Fun in the future</h2>\n<p>If you have to write python bindings for some complex software, consider containerizing that software instead. With sidomo, turning a containerized application into a python module is painless and clean. If you find yourself using subprocess frequently to interact with code for which proper bindings do not exist, then containerizing these processes may make some things simpler. <img src="https://www.adweek.com/socialtimes/files/2014/01/twitter-nesting-dolls.jpg" alt=""> If you use sidomo in a python app that ends up developing complex dependencies, you may need to wrap the app in its own container and call it from an app with fewer dependencies on the outside. Sidomo supports this as well, since <a href="https://blog.docker.com/2013/09/docker-can-now-run-within-docker/">docker supports nested containers</a>. You can make your own software matryoshka doll by using sidomo to import sidomo to import sidomo\u2026 Good luck! Just remember, you can\u2019t containerize away complexity indefinitely. Or can you? <a href="https://github.com/deepgram/sidomo">Sidomo on github</a></p>\n<h2 id="whyd-we-make-this">Why\u2019d we make this?</h2>\n<p>We created the Deepgram API, a search engine for audio and video that makes speech searchable. Deepgram uses a complex stack of signal processing, statistics, and machine learning software working in concert to give a seamless \u201Cupload and search\u201D experience. Sidomo lets us rapidly containerize finicky software and integrate it with python, our glue. To learn more about what we\u2019re up to and the functionality of our API, check out our <a href="https://developers.deepgram.com/documentation/">full documentation</a>, or sign up below to get our newsletter and stay in touch.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/import-a-docker-container-in-python/index.md" };
function rawContent() {
  return "![](https://res.cloudinary.com/deepgram/image/upload/v1661721061/blog/import-a-docker-container-in-python/Screen-Shot-2016-02-23-at-11-29-48-AM.png)\n\n## Why would you do this?\n\nDocker containers are awesome for isolating applications from each other, but what if you *want* them to talk to each other? For instance, if you're developing an app in python that needs to interact with software written in another language. There are a few techniques for achieving low-level interoperability between Python and other popular languages. But if you have a [weird case](http://stackoverflow.com/questions/546160/what-is-erlang-written-in?answertab=votes#tab-top), or some complex legacy software, this becomes difficult or impossible.\n\n## The idea: containers as modules\n\nWe created [sidomo - Simple Docker Module](https://github.com/deepgram/sidomo) *so that if you can get your weirdo app to run in any linux environment, then you can instantly call it from Python with zero added effort. Right now most people use the Docker Daemon API to manage containers carrying their apps. ([Kubernetes](http://kubernetes.io/) / [Mesos](http://mesos.apache.org/) are great examples of this). Sidomo opens up a whole new use case for containers-turning weirdo software into nice, plain vanilla python modules that work seamlessly in python code.* not an [AWS service](https://www.expeditedssl.com/aws-in-plain-english)\n\n### How to use sidomo\n\nMake sure you have docker installed and a docker daemon running. If you're not sure if this is the case, run `docker ps` and see if you get \"CONTAINER ID ...\" as output. If you aren't sure how to get docker set up properly, you can check out [this link](https://docs.docker.com/engine/installation/) or [search here](https://www.google.com/search?q=install+docker) to find your way.\n\n#### Setting up Sidomo: a one-liner\n\nYou can install sidomo directly from the git repository using pip. Just run the following command in your shell:\n\n```\npip install -e 'git+https://github.com/deepgram/sidomo.git#egg=sidomo'  \n```\n\n#### Example: a simple Hello World\n\nThis will start a container from the ubuntu base image, run `echo hello from` and then `echo the other side`, and print the lines of output from the process. To prepare for this example, you need to pull the ubuntu image to your machine with one shell command.\n\n###### shell\n\n```\n# Get the latest Ubuntu image\ndocker pull ubuntu  \n```\n\n###### Python\n\n```\nfrom sidomo import Container\n\nwith Container('ubuntu') as c:  \n    for line in c.run('bash -c \"echo hello from; echo the other side;\"'):\n        print(line)\n```\n\n#### Example: wrangling FFMPEG with sidomo\n\nNow let's actually do something useful with sidomo. [FFMPEG](https://www.ffmpeg.org/) is a somewhat complex piece of software that manipulates media files efficiently for almost any purpose, but it's not easy to install consistently on different platforms, and there are no up-to-date python bindings for it. With Sidomo, you can pull FFMPEG with docker and easily run it from Python.\n\n###### shell\n\n```\ndocker pull cellofellow/ffmpeg  \n```\n\n###### Python\n\nThe example below will grab audio from a URL, transcode it, and print debug messages to prove that it worked. The process's stdout (the raw audio output) is disabled since we only want to see the debug messages.\n\n```\nfrom sidomo import Container  \nurl = 'http://www2.warwick.ac.uk/fac/soc/sociology/staff/sfuller/media/audio/9_minutes_on_epistemology.mp3'  \nwith Container(  \n    'cellofellow/ffmpeg',\n    stdout=False\n) as c:\n    for line in c.run(\n        'bash -c \\\"\\\n            wget -nv -O tmp.unconverted %s;\\\n            ffmpeg -i tmp.unconverted -f wav -acodec pcm_s16le -ac 1 -ar 16000 tmp.wav;\\\n            cat tmp.wav\\\n        \\\"\\\n        ' % url\n    ):\n        print line\n```\n\nIf you wanted to actually save the transcoded audio from this process, you would replace the line `stdout=False` with `stderr=False` and make sure to write each line of output from the container process (raw audio data) to a file.\n\n<WhitepaperPromo whitepaper=\"latest\"></WhitepaperPromo>\n\n## Fun in the future\n\nIf you have to write python bindings for some complex software, consider containerizing that software instead. With sidomo, turning a containerized application into a python module is painless and clean. If you find yourself using subprocess frequently to interact with code for which proper bindings do not exist, then containerizing these processes may make some things simpler. ![](https://www.adweek.com/socialtimes/files/2014/01/twitter-nesting-dolls.jpg) If you use sidomo in a python app that ends up developing complex dependencies, you may need to wrap the app in its own container and call it from an app with fewer dependencies on the outside. Sidomo supports this as well, since [docker supports nested containers](https://blog.docker.com/2013/09/docker-can-now-run-within-docker/). You can make your own software matryoshka doll by using sidomo to import sidomo to import sidomo.... Good luck! Just remember, you can't containerize away complexity indefinitely. Or can you? [Sidomo on github](https://github.com/deepgram/sidomo)\n\n## Why'd we make this?\n\nWe created the Deepgram API, a search engine for audio and video that makes speech searchable. Deepgram uses a complex stack of signal processing, statistics, and machine learning software working in concert to give a seamless \"upload and search\" experience. Sidomo lets us rapidly containerize finicky software and integrate it with python, our glue. To learn more about what we're up to and the functionality of our API, check out our [full documentation](https://developers.deepgram.com/documentation/), or sign up below to get our newsletter and stay in touch.\n\n";
}
function compiledContent() {
  return '<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661721061/blog/import-a-docker-container-in-python/Screen-Shot-2016-02-23-at-11-29-48-AM.png" alt=""></p>\n<h2 id="why-would-you-do-this">Why would you do this?</h2>\n<p>Docker containers are awesome for isolating applications from each other, but what if you <em>want</em> them to talk to each other? For instance, if you\u2019re developing an app in python that needs to interact with software written in another language. There are a few techniques for achieving low-level interoperability between Python and other popular languages. But if you have a <a href="http://stackoverflow.com/questions/546160/what-is-erlang-written-in?answertab=votes#tab-top">weird case</a>, or some complex legacy software, this becomes difficult or impossible.</p>\n<h2 id="the-idea-containers-as-modules">The idea: containers as modules</h2>\n<p>We created <a href="https://github.com/deepgram/sidomo">sidomo - Simple Docker Module</a> <em>so that if you can get your weirdo app to run in any linux environment, then you can instantly call it from Python with zero added effort. Right now most people use the Docker Daemon API to manage containers carrying their apps. (<a href="http://kubernetes.io/">Kubernetes</a> / <a href="http://mesos.apache.org/">Mesos</a> are great examples of this). Sidomo opens up a whole new use case for containers-turning weirdo software into nice, plain vanilla python modules that work seamlessly in python code.</em> not an <a href="https://www.expeditedssl.com/aws-in-plain-english">AWS service</a></p>\n<h3 id="how-to-use-sidomo">How to use sidomo</h3>\n<p>Make sure you have docker installed and a docker daemon running. If you\u2019re not sure if this is the case, run <code is:raw>docker ps</code> and see if you get \u201CCONTAINER ID \u2026\u201D as output. If you aren\u2019t sure how to get docker set up properly, you can check out <a href="https://docs.docker.com/engine/installation/">this link</a> or <a href="https://www.google.com/search?q=install+docker">search here</a> to find your way.</p>\n<h4 id="setting-up-sidomo-a-one-liner">Setting up Sidomo: a one-liner</h4>\n<p>You can install sidomo directly from the git repository using pip. Just run the following command in your shell:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install -e &#39;git+https://github.com/deepgram/sidomo.git#egg=sidomo&#39;  </span></span></code></pre>\n<h4 id="example-a-simple-hello-world">Example: a simple Hello World</h4>\n<p>This will start a container from the ubuntu base image, run <code is:raw>echo hello from</code> and then <code is:raw>echo the other side</code>, and print the lines of output from the process. To prepare for this example, you need to pull the ubuntu image to your machine with one shell command.</p>\n<h6 id="shell">shell</h6>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9"># Get the latest Ubuntu image</span></span>\n<span class="line"><span style="color: #c9d1d9">docker pull ubuntu  </span></span></code></pre>\n<h6 id="python">Python</h6>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">from sidomo import Container</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">with Container(&#39;ubuntu&#39;) as c:  </span></span>\n<span class="line"><span style="color: #c9d1d9">    for line in c.run(&#39;bash -c &quot;echo hello from; echo the other side;&quot;&#39;):</span></span>\n<span class="line"><span style="color: #c9d1d9">        print(line)</span></span></code></pre>\n<h4 id="example-wrangling-ffmpeg-with-sidomo">Example: wrangling FFMPEG with sidomo</h4>\n<p>Now let\u2019s actually do something useful with sidomo. <a href="https://www.ffmpeg.org/">FFMPEG</a> is a somewhat complex piece of software that manipulates media files efficiently for almost any purpose, but it\u2019s not easy to install consistently on different platforms, and there are no up-to-date python bindings for it. With Sidomo, you can pull FFMPEG with docker and easily run it from Python.</p>\n<h6 id="shell-1">shell</h6>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker pull cellofellow/ffmpeg  </span></span></code></pre>\n<h6 id="python-1">Python</h6>\n<p>The example below will grab audio from a URL, transcode it, and print debug messages to prove that it worked. The process\u2019s stdout (the raw audio output) is disabled since we only want to see the debug messages.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">from sidomo import Container  </span></span>\n<span class="line"><span style="color: #c9d1d9">url = &#39;http://www2.warwick.ac.uk/fac/soc/sociology/staff/sfuller/media/audio/9_minutes_on_epistemology.mp3&#39;  </span></span>\n<span class="line"><span style="color: #c9d1d9">with Container(  </span></span>\n<span class="line"><span style="color: #c9d1d9">    &#39;cellofellow/ffmpeg&#39;,</span></span>\n<span class="line"><span style="color: #c9d1d9">    stdout=False</span></span>\n<span class="line"><span style="color: #c9d1d9">) as c:</span></span>\n<span class="line"><span style="color: #c9d1d9">    for line in c.run(</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39;bash -c \\&quot;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">            wget -nv -O tmp.unconverted %s;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">            ffmpeg -i tmp.unconverted -f wav -acodec pcm_s16le -ac 1 -ar 16000 tmp.wav;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">            cat tmp.wav\\</span></span>\n<span class="line"><span style="color: #c9d1d9">        \\&quot;\\</span></span>\n<span class="line"><span style="color: #c9d1d9">        &#39; % url</span></span>\n<span class="line"><span style="color: #c9d1d9">    ):</span></span>\n<span class="line"><span style="color: #c9d1d9">        print line</span></span></code></pre>\n<p>If you wanted to actually save the transcoded audio from this process, you would replace the line <code is:raw>stdout=False</code> with <code is:raw>stderr=False</code> and make sure to write each line of output from the container process (raw audio data) to a file.</p>\n<WhitepaperPromo whitepaper="latest" />\n<h2 id="fun-in-the-future">Fun in the future</h2>\n<p>If you have to write python bindings for some complex software, consider containerizing that software instead. With sidomo, turning a containerized application into a python module is painless and clean. If you find yourself using subprocess frequently to interact with code for which proper bindings do not exist, then containerizing these processes may make some things simpler. <img src="https://www.adweek.com/socialtimes/files/2014/01/twitter-nesting-dolls.jpg" alt=""> If you use sidomo in a python app that ends up developing complex dependencies, you may need to wrap the app in its own container and call it from an app with fewer dependencies on the outside. Sidomo supports this as well, since <a href="https://blog.docker.com/2013/09/docker-can-now-run-within-docker/">docker supports nested containers</a>. You can make your own software matryoshka doll by using sidomo to import sidomo to import sidomo\u2026 Good luck! Just remember, you can\u2019t containerize away complexity indefinitely. Or can you? <a href="https://github.com/deepgram/sidomo">Sidomo on github</a></p>\n<h2 id="whyd-we-make-this">Why\u2019d we make this?</h2>\n<p>We created the Deepgram API, a search engine for audio and video that makes speech searchable. Deepgram uses a complex stack of signal processing, statistics, and machine learning software working in concert to give a seamless \u201Cupload and search\u201D experience. Sidomo lets us rapidly containerize finicky software and integrate it with python, our glue. To learn more about what we\u2019re up to and the functionality of our API, check out our <a href="https://developers.deepgram.com/documentation/">full documentation</a>, or sign up below to get our newsletter and stay in touch.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/import-a-docker-container-in-python/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p><img src="https://res.cloudinary.com/deepgram/image/upload/v1661721061/blog/import-a-docker-container-in-python/Screen-Shot-2016-02-23-at-11-29-48-AM.png" alt=""></p>
<h2 id="why-would-you-do-this">Why would you do this?</h2>
<p>Docker containers are awesome for isolating applications from each other, but what if you <em>want</em> them to talk to each other? For instance, if you’re developing an app in python that needs to interact with software written in another language. There are a few techniques for achieving low-level interoperability between Python and other popular languages. But if you have a <a href="http://stackoverflow.com/questions/546160/what-is-erlang-written-in?answertab=votes#tab-top">weird case</a>, or some complex legacy software, this becomes difficult or impossible.</p>
<h2 id="the-idea-containers-as-modules">The idea: containers as modules</h2>
<p>We created <a href="https://github.com/deepgram/sidomo">sidomo - Simple Docker Module</a> <em>so that if you can get your weirdo app to run in any linux environment, then you can instantly call it from Python with zero added effort. Right now most people use the Docker Daemon API to manage containers carrying their apps. (<a href="http://kubernetes.io/">Kubernetes</a> / <a href="http://mesos.apache.org/">Mesos</a> are great examples of this). Sidomo opens up a whole new use case for containers-turning weirdo software into nice, plain vanilla python modules that work seamlessly in python code.</em> not an <a href="https://www.expeditedssl.com/aws-in-plain-english">AWS service</a></p>
<h3 id="how-to-use-sidomo">How to use sidomo</h3>
<p>Make sure you have docker installed and a docker daemon running. If you’re not sure if this is the case, run <code>docker ps</code> and see if you get “CONTAINER ID …” as output. If you aren’t sure how to get docker set up properly, you can check out <a href="https://docs.docker.com/engine/installation/">this link</a> or <a href="https://www.google.com/search?q=install+docker">search here</a> to find your way.</p>
<h4 id="setting-up-sidomo-a-one-liner">Setting up Sidomo: a one-liner</h4>
<p>You can install sidomo directly from the git repository using pip. Just run the following command in your shell:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">pip install -e &#39;git+https://github.com/deepgram/sidomo.git#egg=sidomo&#39;  </span></span></code></pre>
<h4 id="example-a-simple-hello-world">Example: a simple Hello World</h4>
<p>This will start a container from the ubuntu base image, run <code>echo hello from</code> and then <code>echo the other side</code>, and print the lines of output from the process. To prepare for this example, you need to pull the ubuntu image to your machine with one shell command.</p>
<h6 id="shell">shell</h6>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9"># Get the latest Ubuntu image</span></span>
<span class="line"><span style="color: #c9d1d9">docker pull ubuntu  </span></span></code></pre>
<h6 id="python">Python</h6>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">from sidomo import Container</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">with Container(&#39;ubuntu&#39;) as c:  </span></span>
<span class="line"><span style="color: #c9d1d9">    for line in c.run(&#39;bash -c &quot;echo hello from; echo the other side;&quot;&#39;):</span></span>
<span class="line"><span style="color: #c9d1d9">        print(line)</span></span></code></pre>
<h4 id="example-wrangling-ffmpeg-with-sidomo">Example: wrangling FFMPEG with sidomo</h4>
<p>Now let’s actually do something useful with sidomo. <a href="https://www.ffmpeg.org/">FFMPEG</a> is a somewhat complex piece of software that manipulates media files efficiently for almost any purpose, but it’s not easy to install consistently on different platforms, and there are no up-to-date python bindings for it. With Sidomo, you can pull FFMPEG with docker and easily run it from Python.</p>
<h6 id="shell-1">shell</h6>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">docker pull cellofellow/ffmpeg  </span></span></code></pre>
<h6 id="python-1">Python</h6>
<p>The example below will grab audio from a URL, transcode it, and print debug messages to prove that it worked. The process’s stdout (the raw audio output) is disabled since we only want to see the debug messages.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">from sidomo import Container  </span></span>
<span class="line"><span style="color: #c9d1d9">url = &#39;http://www2.warwick.ac.uk/fac/soc/sociology/staff/sfuller/media/audio/9_minutes_on_epistemology.mp3&#39;  </span></span>
<span class="line"><span style="color: #c9d1d9">with Container(  </span></span>
<span class="line"><span style="color: #c9d1d9">    &#39;cellofellow/ffmpeg&#39;,</span></span>
<span class="line"><span style="color: #c9d1d9">    stdout=False</span></span>
<span class="line"><span style="color: #c9d1d9">) as c:</span></span>
<span class="line"><span style="color: #c9d1d9">    for line in c.run(</span></span>
<span class="line"><span style="color: #c9d1d9">        &#39;bash -c \\&quot;\\</span></span>
<span class="line"><span style="color: #c9d1d9">            wget -nv -O tmp.unconverted %s;\\</span></span>
<span class="line"><span style="color: #c9d1d9">            ffmpeg -i tmp.unconverted -f wav -acodec pcm_s16le -ac 1 -ar 16000 tmp.wav;\\</span></span>
<span class="line"><span style="color: #c9d1d9">            cat tmp.wav\\</span></span>
<span class="line"><span style="color: #c9d1d9">        \\&quot;\\</span></span>
<span class="line"><span style="color: #c9d1d9">        &#39; % url</span></span>
<span class="line"><span style="color: #c9d1d9">    ):</span></span>
<span class="line"><span style="color: #c9d1d9">        print line</span></span></code></pre>
<p>If you wanted to actually save the transcoded audio from this process, you would replace the line <code>stdout=False</code> with <code>stderr=False</code> and make sure to write each line of output from the container process (raw audio data) to a file.</p>
${renderComponent($$result, "WhitepaperPromo", WhitepaperPromo, { "whitepaper": "latest" })}
<h2 id="fun-in-the-future">Fun in the future</h2>
<p>If you have to write python bindings for some complex software, consider containerizing that software instead. With sidomo, turning a containerized application into a python module is painless and clean. If you find yourself using subprocess frequently to interact with code for which proper bindings do not exist, then containerizing these processes may make some things simpler. <img src="https://www.adweek.com/socialtimes/files/2014/01/twitter-nesting-dolls.jpg" alt=""> If you use sidomo in a python app that ends up developing complex dependencies, you may need to wrap the app in its own container and call it from an app with fewer dependencies on the outside. Sidomo supports this as well, since <a href="https://blog.docker.com/2013/09/docker-can-now-run-within-docker/">docker supports nested containers</a>. You can make your own software matryoshka doll by using sidomo to import sidomo to import sidomo… Good luck! Just remember, you can’t containerize away complexity indefinitely. Or can you? <a href="https://github.com/deepgram/sidomo">Sidomo on github</a></p>
<h2 id="whyd-we-make-this">Why’d we make this?</h2>
<p>We created the Deepgram API, a search engine for audio and video that makes speech searchable. Deepgram uses a complex stack of signal processing, statistics, and machine learning software working in concert to give a seamless “upload and search” experience. Sidomo lets us rapidly containerize finicky software and integrate it with python, our glue. To learn more about what we’re up to and the functionality of our API, check out our <a href="https://developers.deepgram.com/documentation/">full documentation</a>, or sign up below to get our newsletter and stay in touch.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/import-a-docker-container-in-python/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
