import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "to-those-about-to-hack-we-salute-you", "text": "To Those About to Hack, We Salute You" }, { "depth": 2, "slug": "making-it-helpful", "text": "Making it Helpful" }, { "depth": 3, "slug": "can-we-find-what-youre-looking-for", "text": "Can We Find What You\u2019re Looking For?" }, { "depth": 3, "slug": "quick-access-to-search", "text": "Quick Access to Search" }, { "depth": 2, "slug": "making-it-enjoyable", "text": "Making it Enjoyable" }, { "depth": 3, "slug": "protecting-api-keys", "text": "Protecting API Keys" }, { "depth": 3, "slug": "no-peeking-at-the-answers", "text": "No Peeking at the Answers" }, { "depth": 2, "slug": "better-experiences-are-a-core-value", "text": "Better Experiences are a Core Value" }], "source": "\r\nYou clicked on that link with high expectations. You knew you were about to find\r\nthe answers you'd been searching for. Then it happened. You saw the dreaded 404\r\nerror letting you know that the content you were looking for wasn't there. Maybe\r\nthe content lives at a new location or perhaps it's been permanently removed.\r\nRegardless of the reason, your high hopes have been dashed and you're left to\r\nbegin your search again.\r\n\r\nIt's a terrible experience and one we wanted to make better. But before we get\r\ninto the details of what we've done, let's talk about where the idea started.\r\n\r\n## To Those About to Hack, We Salute You\r\n\r\nAt Deepgram, we have a goal that every interaction with us should be pleasant\r\nand (hopefully) enjoyable. We spend a lot of time thinking of how to make that\r\nhappen. One of the methods we use for brainstorming ideas and gathering feedback\r\nis hosting internal hack-a-thons (known internally as GRAMJAMs.) Last year, 8\r\nteams competed to be the GRAMJAM champion and one of the entries was a super\r\nfun game called MadGab.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1645937086/blog/2022/03/building-404-pages-that-bring-joy/gj2021.png\" alt=\"GRAMJAM 2021 logo\" style=\"width: 50%;margin:auto;\"/>\r\n\r\nThe premise was simple: present the user with a nonsensical phrase that is\r\nphonetically similar to a real-life phrase. Players would read the nonsensical\r\nphrase aloud and attempt to then say the associated real-life phrase. An example\r\nwould be \"mass turk hard\" in the place of \"Mastercard.\" It was a great\r\nexperience. The game's format was simple to understand and perform and it was\r\nhighly addictive. We knew immediately that we had to make this available for\r\nothers. This brings us back to the 404 page.\r\n\r\n## Making it Helpful\r\n\r\nWe knew we couldn't just have a game on our 404 page. While it's a fun\r\ndistraction, we realized that the visitor came with a purpose. That purpose\r\nneeded to be our number one priority. How could we help them reach their\r\nobjective?\r\n\r\n### Can We Find What You're Looking For?\r\n\r\nWouldn't it be great if we could \"guess\" what you were looking for and provide\r\nyou with a link to it? Fortunately, as we've built our site, we've tried to do\r\na good job of creating routes that consist of keywords associated with the\r\ncontent of the page. This means we can assume that parsing a route (even one\r\nthat resulted in a 404) should provide keywords that are relevant to what the\r\nuser was trying to reach.\r\n\r\nWe then send those parsed words to Algolia to search our site and display the\r\nthree most relevant results to the user. With a little luck, the results shown\r\nwill provide the information the visitor was looking for and they're only a\r\nclick away from continuing their journey.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1646884394/blog/2022/03/building-404-pages-that-bring-joy/results.png\" alt=\"Search results on the 404 page\"\r\nstyle=\"width:75%;margin:auto;\"/>\r\n\r\n### Quick Access to Search\r\n\r\nWhat if there were no results or the results didn't meet the user's need. Without\r\nadditional information, we can't move the user forward. So we added a search\r\ninput to the page to give quick access to finding what they're looking for. Yes,\r\nwe have a search bar on the top of every page in the navigation, but we don't\r\nwant users to expend unnecessary brain power trying to find it. Putting the\r\nsearch input front-and-center allows them to be on their way as efficiently as\r\npossible.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1646883861/blog/2022/03/building-404-pages-that-bring-joy/search-bar.png\" alt=\"Search bar on the 404 page\"\r\nstyle=\"width:75%;margin:auto;\"/>\r\n\r\nNow that we've done all we can to provide relevant information and paths\r\nforward, let's try to brighten their day by providing a chance to have fun\r\nbefore they move on.\r\n\r\n## Making it Enjoyable\r\n\r\nAfter some brainstorming, we had a list of requirements to recreate MadGab on\r\nour platform:\r\n\r\n*   Any API keys should remain on the server, or be short-lived (i.e. less than 5 minutes)\r\n*   Store the collection of gibberish phrases/answers on the server to protect them from cheaters \u{1F601}\r\n\r\nWe hope to open-source MadGab in the future, but, for now, I'll share how we\r\nachieved the goals above.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1646945899/blog/2022/03/building-404-pages-that-bring-joy/madgram.png\" alt=\"Screenshot of the MadGram game on our 404 page\"\r\nstyle=\"width:75%;margin:auto;\"/>\r\n\r\n### Protecting API Keys\r\n\r\nMadGab connects to the Deepgram API via a WebSocket and sends audio from the\r\nusers' microphone to be transcribed. This requires us to send an API key in the\r\nheader of that connection. That means an API key will be exposed to the client.\r\nTo minimize any risk, we wanted to use short-lived API keys. Because the\r\ndeveloper platform is hosted on Netlify, functions seemed like a good option for\r\nproviding a way to create a temporary API key to use for the game.\r\n\r\nLuckily for us, the Deepgram API allows creating API keys with a specified\r\ntime-to-live. So we imported the Deepgram Node SDK and use it to create a key\r\nthat lives for 5 seconds. That's just long enough for our front-end to connect\r\nto the Deepgram API before it expires. Below is the code for the Netlify\r\nfunction that generates and returns the API key.\r\n\r\n```js\r\nconst { Deepgram } = require('@deepgram/sdk')\r\nrequire('dotenv').config()\r\n\r\nconst deepgram = new Deepgram(process.env.DEEPGRAM_API_KEY)\r\nconst deepgramProjectId = process.env.DEEPGRAM_PROJECT_ID\r\n\r\nexports.handler = async function (event, context) {\r\n  try {\r\n    const key = await deepgram.keys.create(\r\n      deepgramProjectId,\r\n      'Temp 404 key',\r\n      ['member'],\r\n      {\r\n        timeToLive: 5\r\n      })\r\n\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(key),\r\n    }\r\n  }\r\n  catch (err) {\r\n    console.log(err)\r\n\r\n    return {\r\n      statusCode: 500,\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### No Peeking at the Answers\r\n\r\nOur teams at Deepgram had already collected a list of phonetic phrases matched\r\nwith the actual word phrases, so we were able to use that list in the game.\r\nWhile we could have created an array of those phrases in our component, we\r\ndidn't want users to be able to find them in the code and cheat. To solve this,\r\nwe created another Netlify function that could be called to return phrases\r\non-demand.\r\n\r\nEach phrase is defined as an object with three properties:\r\n\r\n*   `id`: a unique identifying number for the phrase\r\n*   `suggestion`: the phonetic phrase\r\n*   `result`: the phrase to be spoken\r\n\r\nTo prevent the need to call the function after every round of the game, the\r\nfunction returns up to three phrase objects at a time. However, we don't want to\r\nsend the same phrase to the same user until they've played every phrase\r\navailable. This requires us to track which phrases the user has played on the\r\nclient side. Then, each time we request new phrases, we'll send an array of the\r\nID's of each phrase the user has played in the body of the request. So the first\r\nthing the function should do is ensure the request is sent via HTTP `POST`.\r\n\r\n```js\r\n// Only allow POST\r\nif (event.httpMethod !== 'POST') {\r\n  return {\r\n    statusCode: 405,\r\n    body: 'Method Not Allowed',\r\n    headers: {\r\n      Allow: 'Get',\r\n    },\r\n  }\r\n}\r\n```\r\n\r\nNext, it will parse the request body to get the id's of the phrases the user has\r\nalready attempted.\r\n\r\n```js\r\nconst userChoices = []\r\nif (event.body !== undefined) {\r\n  const req = JSON.parse(event.body)\r\n  userChoices.push(...req.choices)\r\n}\r\n```\r\n\r\nCurrently, our phrases are stored in an array inside the function and called\r\n`choices`. So the next step is to filter the `choices` array to remove any\r\npreviously used phrases. If we've reached the end of choices, then we restart the\r\ngame and begin sending previously used phrases again. We'll also set the\r\n`restart` variable to true and return that as well. This notifies the\r\nclient-side that we've restarted and it should clear its cache of previously\r\nused phrases.\r\n\r\n```js\r\nlet restart = false\r\nconst availableChoices = choices.filter(f => !userChoices.includes(f.id))\r\nif (availableChoices.length === 0) {\r\n  availableChoices.push(...choices)\r\n  restart = true\r\n}\r\n```\r\n\r\nNow we want to select three random choices from `availableChoices`. To do that,\r\nwe created a `getRandomChoice` function that can return a random phrase from\r\n`availableChoices`.\r\n\r\n```js\r\nfunction getRandomChoice(availableChoices) {\r\n  const randomNumber = Math.floor(Math.random() * (availableChoices.length))\r\n  return availableChoices.splice(randomNumber, 1)[0]\r\n}\r\n```\r\n\r\nThen we can call that function three times to gather the three phrases to return\r\nto the client-side. If less than three phrases remain, we just return the\r\nremaining phrases.\r\n\r\n```js\r\nif (availableChoices.length > 3) {\r\n  selectedChoices.push(getRandomChoice(availableChoices))\r\n  selectedChoices.push(getRandomChoice(availableChoices))\r\n  selectedChoices.push(getRandomChoice(availableChoices))\r\n}\r\nelse {\r\n  selectedChoices.push(...availableChoices)\r\n}\r\n```\r\n\r\nFinally, we return the `selectedChoices` array and the `restart` boolean to the\r\nclient-side.\r\n\r\n```js\r\nreturn {\r\n  statusCode: 200,\r\n  body: JSON.stringify({\r\n    restart,\r\n    choices: selectedChoices\r\n  }),\r\n}\r\n```\r\n\r\n## Better Experiences are a Core Value\r\n\r\nAt the heart of this project is a desire to provide a better experience for\r\ndevelopers. Our team at Deepgram spends a LOT of time focused on how to make\r\nthat happen. From the experience of signing up, working in our console, using\r\nour SDKs, and yes, even our 404 page. We want every encounter with Deepgram to\r\nbe informative, helpful, and pleasant. So while 404 pages interrupt your flow of\r\nwork, hopefully, these changes empower you to find what you need faster, while\r\nalso providing an enjoyable experience.\r\n\r\nWould you be interested in a MadGab component to use on your projects? Follow us\r\non Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs) and let us know.\r\n\r\n        ", "html": '<p>You clicked on that link with high expectations. You knew you were about to find\r\nthe answers you\u2019d been searching for. Then it happened. You saw the dreaded 404\r\nerror letting you know that the content you were looking for wasn\u2019t there. Maybe\r\nthe content lives at a new location or perhaps it\u2019s been permanently removed.\r\nRegardless of the reason, your high hopes have been dashed and you\u2019re left to\r\nbegin your search again.</p>\n<p>It\u2019s a terrible experience and one we wanted to make better. But before we get\r\ninto the details of what we\u2019ve done, let\u2019s talk about where the idea started.</p>\n<h2 id="to-those-about-to-hack-we-salute-you">To Those About to Hack, We Salute You</h2>\n<p>At Deepgram, we have a goal that every interaction with us should be pleasant\r\nand (hopefully) enjoyable. We spend a lot of time thinking of how to make that\r\nhappen. One of the methods we use for brainstorming ideas and gathering feedback\r\nis hosting internal hack-a-thons (known internally as GRAMJAMs.) Last year, 8\r\nteams competed to be the GRAMJAM champion and one of the entries was a super\r\nfun game called MadGab.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1645937086/blog/2022/03/building-404-pages-that-bring-joy/gj2021.png" alt="GRAMJAM 2021 logo" style="width: 50%;margin:auto;" />\n<p>The premise was simple: present the user with a nonsensical phrase that is\r\nphonetically similar to a real-life phrase. Players would read the nonsensical\r\nphrase aloud and attempt to then say the associated real-life phrase. An example\r\nwould be \u201Cmass turk hard\u201D in the place of \u201CMastercard.\u201D It was a great\r\nexperience. The game\u2019s format was simple to understand and perform and it was\r\nhighly addictive. We knew immediately that we had to make this available for\r\nothers. This brings us back to the 404 page.</p>\n<h2 id="making-it-helpful">Making it Helpful</h2>\n<p>We knew we couldn\u2019t just have a game on our 404 page. While it\u2019s a fun\r\ndistraction, we realized that the visitor came with a purpose. That purpose\r\nneeded to be our number one priority. How could we help them reach their\r\nobjective?</p>\n<h3 id="can-we-find-what-youre-looking-for">Can We Find What You\u2019re Looking For?</h3>\n<p>Wouldn\u2019t it be great if we could \u201Cguess\u201D what you were looking for and provide\r\nyou with a link to it? Fortunately, as we\u2019ve built our site, we\u2019ve tried to do\r\na good job of creating routes that consist of keywords associated with the\r\ncontent of the page. This means we can assume that parsing a route (even one\r\nthat resulted in a 404) should provide keywords that are relevant to what the\r\nuser was trying to reach.</p>\n<p>We then send those parsed words to Algolia to search our site and display the\r\nthree most relevant results to the user. With a little luck, the results shown\r\nwill provide the information the visitor was looking for and they\u2019re only a\r\nclick away from continuing their journey.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1646884394/blog/2022/03/building-404-pages-that-bring-joy/results.png" alt="Search results on the 404 page" style="width:75%;margin:auto;" />\n<h3 id="quick-access-to-search">Quick Access to Search</h3>\n<p>What if there were no results or the results didn\u2019t meet the user\u2019s need. Without\r\nadditional information, we can\u2019t move the user forward. So we added a search\r\ninput to the page to give quick access to finding what they\u2019re looking for. Yes,\r\nwe have a search bar on the top of every page in the navigation, but we don\u2019t\r\nwant users to expend unnecessary brain power trying to find it. Putting the\r\nsearch input front-and-center allows them to be on their way as efficiently as\r\npossible.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1646883861/blog/2022/03/building-404-pages-that-bring-joy/search-bar.png" alt="Search bar on the 404 page" style="width:75%;margin:auto;" />\n<p>Now that we\u2019ve done all we can to provide relevant information and paths\r\nforward, let\u2019s try to brighten their day by providing a chance to have fun\r\nbefore they move on.</p>\n<h2 id="making-it-enjoyable">Making it Enjoyable</h2>\n<p>After some brainstorming, we had a list of requirements to recreate MadGab on\r\nour platform:</p>\n<ul>\n<li>Any API keys should remain on the server, or be short-lived (i.e. less than 5 minutes)</li>\n<li>Store the collection of gibberish phrases/answers on the server to protect them from cheaters \u{1F601}</li>\n</ul>\n<p>We hope to open-source MadGab in the future, but, for now, I\u2019ll share how we\r\nachieved the goals above.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1646945899/blog/2022/03/building-404-pages-that-bring-joy/madgram.png" alt="Screenshot of the MadGram game on our 404 page" style="width:75%;margin:auto;" />\n<h3 id="protecting-api-keys">Protecting API Keys</h3>\n<p>MadGab connects to the Deepgram API via a WebSocket and sends audio from the\r\nusers\u2019 microphone to be transcribed. This requires us to send an API key in the\r\nheader of that connection. That means an API key will be exposed to the client.\r\nTo minimize any risk, we wanted to use short-lived API keys. Because the\r\ndeveloper platform is hosted on Netlify, functions seemed like a good option for\r\nproviding a way to create a temporary API key to use for the game.</p>\n<p>Luckily for us, the Deepgram API allows creating API keys with a specified\r\ntime-to-live. So we imported the Deepgram Node SDK and use it to create a key\r\nthat lives for 5 seconds. That\u2019s just long enough for our front-end to connect\r\nto the Deepgram API before it expires. Below is the code for the Netlify\r\nfunction that generates and returns the API key.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramProjectId</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">DEEPGRAM_PROJECT_ID</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.keys.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">      deepgramProjectId,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Temp 404 key&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      [</span><span style="color: #A5D6FF">&#39;member&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">      {</span></span>\n<span class="line"><span style="color: #C9D1D9">        timeToLive: </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(key),</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(err)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="no-peeking-at-the-answers">No Peeking at the Answers</h3>\n<p>Our teams at Deepgram had already collected a list of phonetic phrases matched\r\nwith the actual word phrases, so we were able to use that list in the game.\r\nWhile we could have created an array of those phrases in our component, we\r\ndidn\u2019t want users to be able to find them in the code and cheat. To solve this,\r\nwe created another Netlify function that could be called to return phrases\r\non-demand.</p>\n<p>Each phrase is defined as an object with three properties:</p>\n<ul>\n<li><code is:raw>id</code>: a unique identifying number for the phrase</li>\n<li><code is:raw>suggestion</code>: the phonetic phrase</li>\n<li><code is:raw>result</code>: the phrase to be spoken</li>\n</ul>\n<p>To prevent the need to call the function after every round of the game, the\r\nfunction returns up to three phrase objects at a time. However, we don\u2019t want to\r\nsend the same phrase to the same user until they\u2019ve played every phrase\r\navailable. This requires us to track which phrases the user has played on the\r\nclient side. Then, each time we request new phrases, we\u2019ll send an array of the\r\nID\u2019s of each phrase the user has played in the body of the request. So the first\r\nthing the function should do is ensure the request is sent via HTTP <code is:raw>POST</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Only allow POST</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.httpMethod </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    statusCode: </span><span style="color: #79C0FF">405</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #A5D6FF">&#39;Method Not Allowed&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      Allow: </span><span style="color: #A5D6FF">&#39;Get&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Next, it will parse the request body to get the id\u2019s of the phrases the user has\r\nalready attempted.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">userChoices</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.body </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">undefined</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">req</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(event.body)</span></span>\n<span class="line"><span style="color: #C9D1D9">  userChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">req.choices)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Currently, our phrases are stored in an array inside the function and called\r\n<code is:raw>choices</code>. So the next step is to filter the <code is:raw>choices</code> array to remove any\r\npreviously used phrases. If we\u2019ve reached the end of choices, then we restart the\r\ngame and begin sending previously used phrases again. We\u2019ll also set the\r\n<code is:raw>restart</code> variable to true and return that as well. This notifies the\r\nclient-side that we\u2019ve restarted and it should clear its cache of previously\r\nused phrases.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> restart </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">availableChoices</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> choices.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">f</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">userChoices.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(f.id))</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  availableChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">choices)</span></span>\n<span class="line"><span style="color: #C9D1D9">  restart </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now we want to select three random choices from <code is:raw>availableChoices</code>. To do that,\r\nwe created a <code is:raw>getRandomChoice</code> function that can return a random phrase from\r\n<code is:raw>availableChoices</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">availableChoices</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">randomNumber</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> availableChoices.</span><span style="color: #D2A8FF">splice</span><span style="color: #C9D1D9">(randomNumber, </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then we can call that function three times to gather the three phrases to return\r\nto the client-side. If less than three phrases remain, we just return the\r\nremaining phrases.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">availableChoices)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Finally, we return the <code is:raw>selectedChoices</code> array and the <code is:raw>restart</code> boolean to the\r\nclient-side.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    restart,</span></span>\n<span class="line"><span style="color: #C9D1D9">    choices: selectedChoices</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="better-experiences-are-a-core-value">Better Experiences are a Core Value</h2>\n<p>At the heart of this project is a desire to provide a better experience for\r\ndevelopers. Our team at Deepgram spends a LOT of time focused on how to make\r\nthat happen. From the experience of signing up, working in our console, using\r\nour SDKs, and yes, even our 404 page. We want every encounter with Deepgram to\r\nbe informative, helpful, and pleasant. So while 404 pages interrupt your flow of\r\nwork, hopefully, these changes empower you to find what you need faster, while\r\nalso providing an enjoyable experience.</p>\n<p>Would you be interested in a MadGab component to use on your projects? Follow us\r\non Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> and let us know.</p>' };
const frontmatter = { "title": "Building 404 Pages That Bring Joy", "description": "How we transformed the bad experience of landing on a 404 page into an enjoyable experience with a game.", "date": "2022-03-10T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1646855876/blog/2022/03/building-404-pages-that-bring-joy/Turning-Our-404-Page-Into-a-Game%402x.jpg", "authors": ["michael-jolley"], "category": "tutorial", "tags": ["game-dev", "nuxtjs"], "seo": { "title": "Building 404 Pages That Bring Joy", "description": "How we transformed the bad experience of landing on a 404 page into an enjoyable experience with a game." }, "shorturls": { "share": "https://dpgr.am/6d0c342", "twitter": "https://dpgr.am/462bfa3", "linkedin": "https://dpgr.am/fb46e5a", "reddit": "https://dpgr.am/4bfe39e", "facebook": "https://dpgr.am/24df052" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454014/blog/building-404-pages-that-bring-joy/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "to-those-about-to-hack-we-salute-you", "text": "To Those About to Hack, We Salute You" }, { "depth": 2, "slug": "making-it-helpful", "text": "Making it Helpful" }, { "depth": 3, "slug": "can-we-find-what-youre-looking-for", "text": "Can We Find What You\u2019re Looking For?" }, { "depth": 3, "slug": "quick-access-to-search", "text": "Quick Access to Search" }, { "depth": 2, "slug": "making-it-enjoyable", "text": "Making it Enjoyable" }, { "depth": 3, "slug": "protecting-api-keys", "text": "Protecting API Keys" }, { "depth": 3, "slug": "no-peeking-at-the-answers", "text": "No Peeking at the Answers" }, { "depth": 2, "slug": "better-experiences-are-a-core-value", "text": "Better Experiences are a Core Value" }], "source": "\r\nYou clicked on that link with high expectations. You knew you were about to find\r\nthe answers you'd been searching for. Then it happened. You saw the dreaded 404\r\nerror letting you know that the content you were looking for wasn't there. Maybe\r\nthe content lives at a new location or perhaps it's been permanently removed.\r\nRegardless of the reason, your high hopes have been dashed and you're left to\r\nbegin your search again.\r\n\r\nIt's a terrible experience and one we wanted to make better. But before we get\r\ninto the details of what we've done, let's talk about where the idea started.\r\n\r\n## To Those About to Hack, We Salute You\r\n\r\nAt Deepgram, we have a goal that every interaction with us should be pleasant\r\nand (hopefully) enjoyable. We spend a lot of time thinking of how to make that\r\nhappen. One of the methods we use for brainstorming ideas and gathering feedback\r\nis hosting internal hack-a-thons (known internally as GRAMJAMs.) Last year, 8\r\nteams competed to be the GRAMJAM champion and one of the entries was a super\r\nfun game called MadGab.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1645937086/blog/2022/03/building-404-pages-that-bring-joy/gj2021.png\" alt=\"GRAMJAM 2021 logo\" style=\"width: 50%;margin:auto;\"/>\r\n\r\nThe premise was simple: present the user with a nonsensical phrase that is\r\nphonetically similar to a real-life phrase. Players would read the nonsensical\r\nphrase aloud and attempt to then say the associated real-life phrase. An example\r\nwould be \"mass turk hard\" in the place of \"Mastercard.\" It was a great\r\nexperience. The game's format was simple to understand and perform and it was\r\nhighly addictive. We knew immediately that we had to make this available for\r\nothers. This brings us back to the 404 page.\r\n\r\n## Making it Helpful\r\n\r\nWe knew we couldn't just have a game on our 404 page. While it's a fun\r\ndistraction, we realized that the visitor came with a purpose. That purpose\r\nneeded to be our number one priority. How could we help them reach their\r\nobjective?\r\n\r\n### Can We Find What You're Looking For?\r\n\r\nWouldn't it be great if we could \"guess\" what you were looking for and provide\r\nyou with a link to it? Fortunately, as we've built our site, we've tried to do\r\na good job of creating routes that consist of keywords associated with the\r\ncontent of the page. This means we can assume that parsing a route (even one\r\nthat resulted in a 404) should provide keywords that are relevant to what the\r\nuser was trying to reach.\r\n\r\nWe then send those parsed words to Algolia to search our site and display the\r\nthree most relevant results to the user. With a little luck, the results shown\r\nwill provide the information the visitor was looking for and they're only a\r\nclick away from continuing their journey.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1646884394/blog/2022/03/building-404-pages-that-bring-joy/results.png\" alt=\"Search results on the 404 page\"\r\nstyle=\"width:75%;margin:auto;\"/>\r\n\r\n### Quick Access to Search\r\n\r\nWhat if there were no results or the results didn't meet the user's need. Without\r\nadditional information, we can't move the user forward. So we added a search\r\ninput to the page to give quick access to finding what they're looking for. Yes,\r\nwe have a search bar on the top of every page in the navigation, but we don't\r\nwant users to expend unnecessary brain power trying to find it. Putting the\r\nsearch input front-and-center allows them to be on their way as efficiently as\r\npossible.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1646883861/blog/2022/03/building-404-pages-that-bring-joy/search-bar.png\" alt=\"Search bar on the 404 page\"\r\nstyle=\"width:75%;margin:auto;\"/>\r\n\r\nNow that we've done all we can to provide relevant information and paths\r\nforward, let's try to brighten their day by providing a chance to have fun\r\nbefore they move on.\r\n\r\n## Making it Enjoyable\r\n\r\nAfter some brainstorming, we had a list of requirements to recreate MadGab on\r\nour platform:\r\n\r\n*   Any API keys should remain on the server, or be short-lived (i.e. less than 5 minutes)\r\n*   Store the collection of gibberish phrases/answers on the server to protect them from cheaters \u{1F601}\r\n\r\nWe hope to open-source MadGab in the future, but, for now, I'll share how we\r\nachieved the goals above.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1646945899/blog/2022/03/building-404-pages-that-bring-joy/madgram.png\" alt=\"Screenshot of the MadGram game on our 404 page\"\r\nstyle=\"width:75%;margin:auto;\"/>\r\n\r\n### Protecting API Keys\r\n\r\nMadGab connects to the Deepgram API via a WebSocket and sends audio from the\r\nusers' microphone to be transcribed. This requires us to send an API key in the\r\nheader of that connection. That means an API key will be exposed to the client.\r\nTo minimize any risk, we wanted to use short-lived API keys. Because the\r\ndeveloper platform is hosted on Netlify, functions seemed like a good option for\r\nproviding a way to create a temporary API key to use for the game.\r\n\r\nLuckily for us, the Deepgram API allows creating API keys with a specified\r\ntime-to-live. So we imported the Deepgram Node SDK and use it to create a key\r\nthat lives for 5 seconds. That's just long enough for our front-end to connect\r\nto the Deepgram API before it expires. Below is the code for the Netlify\r\nfunction that generates and returns the API key.\r\n\r\n```js\r\nconst { Deepgram } = require('@deepgram/sdk')\r\nrequire('dotenv').config()\r\n\r\nconst deepgram = new Deepgram(process.env.DEEPGRAM_API_KEY)\r\nconst deepgramProjectId = process.env.DEEPGRAM_PROJECT_ID\r\n\r\nexports.handler = async function (event, context) {\r\n  try {\r\n    const key = await deepgram.keys.create(\r\n      deepgramProjectId,\r\n      'Temp 404 key',\r\n      ['member'],\r\n      {\r\n        timeToLive: 5\r\n      })\r\n\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(key),\r\n    }\r\n  }\r\n  catch (err) {\r\n    console.log(err)\r\n\r\n    return {\r\n      statusCode: 500,\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### No Peeking at the Answers\r\n\r\nOur teams at Deepgram had already collected a list of phonetic phrases matched\r\nwith the actual word phrases, so we were able to use that list in the game.\r\nWhile we could have created an array of those phrases in our component, we\r\ndidn't want users to be able to find them in the code and cheat. To solve this,\r\nwe created another Netlify function that could be called to return phrases\r\non-demand.\r\n\r\nEach phrase is defined as an object with three properties:\r\n\r\n*   `id`: a unique identifying number for the phrase\r\n*   `suggestion`: the phonetic phrase\r\n*   `result`: the phrase to be spoken\r\n\r\nTo prevent the need to call the function after every round of the game, the\r\nfunction returns up to three phrase objects at a time. However, we don't want to\r\nsend the same phrase to the same user until they've played every phrase\r\navailable. This requires us to track which phrases the user has played on the\r\nclient side. Then, each time we request new phrases, we'll send an array of the\r\nID's of each phrase the user has played in the body of the request. So the first\r\nthing the function should do is ensure the request is sent via HTTP `POST`.\r\n\r\n```js\r\n// Only allow POST\r\nif (event.httpMethod !== 'POST') {\r\n  return {\r\n    statusCode: 405,\r\n    body: 'Method Not Allowed',\r\n    headers: {\r\n      Allow: 'Get',\r\n    },\r\n  }\r\n}\r\n```\r\n\r\nNext, it will parse the request body to get the id's of the phrases the user has\r\nalready attempted.\r\n\r\n```js\r\nconst userChoices = []\r\nif (event.body !== undefined) {\r\n  const req = JSON.parse(event.body)\r\n  userChoices.push(...req.choices)\r\n}\r\n```\r\n\r\nCurrently, our phrases are stored in an array inside the function and called\r\n`choices`. So the next step is to filter the `choices` array to remove any\r\npreviously used phrases. If we've reached the end of choices, then we restart the\r\ngame and begin sending previously used phrases again. We'll also set the\r\n`restart` variable to true and return that as well. This notifies the\r\nclient-side that we've restarted and it should clear its cache of previously\r\nused phrases.\r\n\r\n```js\r\nlet restart = false\r\nconst availableChoices = choices.filter(f => !userChoices.includes(f.id))\r\nif (availableChoices.length === 0) {\r\n  availableChoices.push(...choices)\r\n  restart = true\r\n}\r\n```\r\n\r\nNow we want to select three random choices from `availableChoices`. To do that,\r\nwe created a `getRandomChoice` function that can return a random phrase from\r\n`availableChoices`.\r\n\r\n```js\r\nfunction getRandomChoice(availableChoices) {\r\n  const randomNumber = Math.floor(Math.random() * (availableChoices.length))\r\n  return availableChoices.splice(randomNumber, 1)[0]\r\n}\r\n```\r\n\r\nThen we can call that function three times to gather the three phrases to return\r\nto the client-side. If less than three phrases remain, we just return the\r\nremaining phrases.\r\n\r\n```js\r\nif (availableChoices.length > 3) {\r\n  selectedChoices.push(getRandomChoice(availableChoices))\r\n  selectedChoices.push(getRandomChoice(availableChoices))\r\n  selectedChoices.push(getRandomChoice(availableChoices))\r\n}\r\nelse {\r\n  selectedChoices.push(...availableChoices)\r\n}\r\n```\r\n\r\nFinally, we return the `selectedChoices` array and the `restart` boolean to the\r\nclient-side.\r\n\r\n```js\r\nreturn {\r\n  statusCode: 200,\r\n  body: JSON.stringify({\r\n    restart,\r\n    choices: selectedChoices\r\n  }),\r\n}\r\n```\r\n\r\n## Better Experiences are a Core Value\r\n\r\nAt the heart of this project is a desire to provide a better experience for\r\ndevelopers. Our team at Deepgram spends a LOT of time focused on how to make\r\nthat happen. From the experience of signing up, working in our console, using\r\nour SDKs, and yes, even our 404 page. We want every encounter with Deepgram to\r\nbe informative, helpful, and pleasant. So while 404 pages interrupt your flow of\r\nwork, hopefully, these changes empower you to find what you need faster, while\r\nalso providing an enjoyable experience.\r\n\r\nWould you be interested in a MadGab component to use on your projects? Follow us\r\non Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs) and let us know.\r\n\r\n        ", "html": '<p>You clicked on that link with high expectations. You knew you were about to find\r\nthe answers you\u2019d been searching for. Then it happened. You saw the dreaded 404\r\nerror letting you know that the content you were looking for wasn\u2019t there. Maybe\r\nthe content lives at a new location or perhaps it\u2019s been permanently removed.\r\nRegardless of the reason, your high hopes have been dashed and you\u2019re left to\r\nbegin your search again.</p>\n<p>It\u2019s a terrible experience and one we wanted to make better. But before we get\r\ninto the details of what we\u2019ve done, let\u2019s talk about where the idea started.</p>\n<h2 id="to-those-about-to-hack-we-salute-you">To Those About to Hack, We Salute You</h2>\n<p>At Deepgram, we have a goal that every interaction with us should be pleasant\r\nand (hopefully) enjoyable. We spend a lot of time thinking of how to make that\r\nhappen. One of the methods we use for brainstorming ideas and gathering feedback\r\nis hosting internal hack-a-thons (known internally as GRAMJAMs.) Last year, 8\r\nteams competed to be the GRAMJAM champion and one of the entries was a super\r\nfun game called MadGab.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1645937086/blog/2022/03/building-404-pages-that-bring-joy/gj2021.png" alt="GRAMJAM 2021 logo" style="width: 50%;margin:auto;" />\n<p>The premise was simple: present the user with a nonsensical phrase that is\r\nphonetically similar to a real-life phrase. Players would read the nonsensical\r\nphrase aloud and attempt to then say the associated real-life phrase. An example\r\nwould be \u201Cmass turk hard\u201D in the place of \u201CMastercard.\u201D It was a great\r\nexperience. The game\u2019s format was simple to understand and perform and it was\r\nhighly addictive. We knew immediately that we had to make this available for\r\nothers. This brings us back to the 404 page.</p>\n<h2 id="making-it-helpful">Making it Helpful</h2>\n<p>We knew we couldn\u2019t just have a game on our 404 page. While it\u2019s a fun\r\ndistraction, we realized that the visitor came with a purpose. That purpose\r\nneeded to be our number one priority. How could we help them reach their\r\nobjective?</p>\n<h3 id="can-we-find-what-youre-looking-for">Can We Find What You\u2019re Looking For?</h3>\n<p>Wouldn\u2019t it be great if we could \u201Cguess\u201D what you were looking for and provide\r\nyou with a link to it? Fortunately, as we\u2019ve built our site, we\u2019ve tried to do\r\na good job of creating routes that consist of keywords associated with the\r\ncontent of the page. This means we can assume that parsing a route (even one\r\nthat resulted in a 404) should provide keywords that are relevant to what the\r\nuser was trying to reach.</p>\n<p>We then send those parsed words to Algolia to search our site and display the\r\nthree most relevant results to the user. With a little luck, the results shown\r\nwill provide the information the visitor was looking for and they\u2019re only a\r\nclick away from continuing their journey.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1646884394/blog/2022/03/building-404-pages-that-bring-joy/results.png" alt="Search results on the 404 page" style="width:75%;margin:auto;" />\n<h3 id="quick-access-to-search">Quick Access to Search</h3>\n<p>What if there were no results or the results didn\u2019t meet the user\u2019s need. Without\r\nadditional information, we can\u2019t move the user forward. So we added a search\r\ninput to the page to give quick access to finding what they\u2019re looking for. Yes,\r\nwe have a search bar on the top of every page in the navigation, but we don\u2019t\r\nwant users to expend unnecessary brain power trying to find it. Putting the\r\nsearch input front-and-center allows them to be on their way as efficiently as\r\npossible.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1646883861/blog/2022/03/building-404-pages-that-bring-joy/search-bar.png" alt="Search bar on the 404 page" style="width:75%;margin:auto;" />\n<p>Now that we\u2019ve done all we can to provide relevant information and paths\r\nforward, let\u2019s try to brighten their day by providing a chance to have fun\r\nbefore they move on.</p>\n<h2 id="making-it-enjoyable">Making it Enjoyable</h2>\n<p>After some brainstorming, we had a list of requirements to recreate MadGab on\r\nour platform:</p>\n<ul>\n<li>Any API keys should remain on the server, or be short-lived (i.e. less than 5 minutes)</li>\n<li>Store the collection of gibberish phrases/answers on the server to protect them from cheaters \u{1F601}</li>\n</ul>\n<p>We hope to open-source MadGab in the future, but, for now, I\u2019ll share how we\r\nachieved the goals above.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1646945899/blog/2022/03/building-404-pages-that-bring-joy/madgram.png" alt="Screenshot of the MadGram game on our 404 page" style="width:75%;margin:auto;" />\n<h3 id="protecting-api-keys">Protecting API Keys</h3>\n<p>MadGab connects to the Deepgram API via a WebSocket and sends audio from the\r\nusers\u2019 microphone to be transcribed. This requires us to send an API key in the\r\nheader of that connection. That means an API key will be exposed to the client.\r\nTo minimize any risk, we wanted to use short-lived API keys. Because the\r\ndeveloper platform is hosted on Netlify, functions seemed like a good option for\r\nproviding a way to create a temporary API key to use for the game.</p>\n<p>Luckily for us, the Deepgram API allows creating API keys with a specified\r\ntime-to-live. So we imported the Deepgram Node SDK and use it to create a key\r\nthat lives for 5 seconds. That\u2019s just long enough for our front-end to connect\r\nto the Deepgram API before it expires. Below is the code for the Netlify\r\nfunction that generates and returns the API key.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramProjectId</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">DEEPGRAM_PROJECT_ID</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.keys.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">      deepgramProjectId,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Temp 404 key&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      [</span><span style="color: #A5D6FF">&#39;member&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">      {</span></span>\n<span class="line"><span style="color: #C9D1D9">        timeToLive: </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(key),</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(err)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="no-peeking-at-the-answers">No Peeking at the Answers</h3>\n<p>Our teams at Deepgram had already collected a list of phonetic phrases matched\r\nwith the actual word phrases, so we were able to use that list in the game.\r\nWhile we could have created an array of those phrases in our component, we\r\ndidn\u2019t want users to be able to find them in the code and cheat. To solve this,\r\nwe created another Netlify function that could be called to return phrases\r\non-demand.</p>\n<p>Each phrase is defined as an object with three properties:</p>\n<ul>\n<li><code is:raw>id</code>: a unique identifying number for the phrase</li>\n<li><code is:raw>suggestion</code>: the phonetic phrase</li>\n<li><code is:raw>result</code>: the phrase to be spoken</li>\n</ul>\n<p>To prevent the need to call the function after every round of the game, the\r\nfunction returns up to three phrase objects at a time. However, we don\u2019t want to\r\nsend the same phrase to the same user until they\u2019ve played every phrase\r\navailable. This requires us to track which phrases the user has played on the\r\nclient side. Then, each time we request new phrases, we\u2019ll send an array of the\r\nID\u2019s of each phrase the user has played in the body of the request. So the first\r\nthing the function should do is ensure the request is sent via HTTP <code is:raw>POST</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Only allow POST</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.httpMethod </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    statusCode: </span><span style="color: #79C0FF">405</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #A5D6FF">&#39;Method Not Allowed&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      Allow: </span><span style="color: #A5D6FF">&#39;Get&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Next, it will parse the request body to get the id\u2019s of the phrases the user has\r\nalready attempted.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">userChoices</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.body </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">undefined</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">req</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(event.body)</span></span>\n<span class="line"><span style="color: #C9D1D9">  userChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">req.choices)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Currently, our phrases are stored in an array inside the function and called\r\n<code is:raw>choices</code>. So the next step is to filter the <code is:raw>choices</code> array to remove any\r\npreviously used phrases. If we\u2019ve reached the end of choices, then we restart the\r\ngame and begin sending previously used phrases again. We\u2019ll also set the\r\n<code is:raw>restart</code> variable to true and return that as well. This notifies the\r\nclient-side that we\u2019ve restarted and it should clear its cache of previously\r\nused phrases.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> restart </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">availableChoices</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> choices.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">f</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">userChoices.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(f.id))</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  availableChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">choices)</span></span>\n<span class="line"><span style="color: #C9D1D9">  restart </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now we want to select three random choices from <code is:raw>availableChoices</code>. To do that,\r\nwe created a <code is:raw>getRandomChoice</code> function that can return a random phrase from\r\n<code is:raw>availableChoices</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">availableChoices</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">randomNumber</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> availableChoices.</span><span style="color: #D2A8FF">splice</span><span style="color: #C9D1D9">(randomNumber, </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then we can call that function three times to gather the three phrases to return\r\nto the client-side. If less than three phrases remain, we just return the\r\nremaining phrases.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">availableChoices)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Finally, we return the <code is:raw>selectedChoices</code> array and the <code is:raw>restart</code> boolean to the\r\nclient-side.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    restart,</span></span>\n<span class="line"><span style="color: #C9D1D9">    choices: selectedChoices</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="better-experiences-are-a-core-value">Better Experiences are a Core Value</h2>\n<p>At the heart of this project is a desire to provide a better experience for\r\ndevelopers. Our team at Deepgram spends a LOT of time focused on how to make\r\nthat happen. From the experience of signing up, working in our console, using\r\nour SDKs, and yes, even our 404 page. We want every encounter with Deepgram to\r\nbe informative, helpful, and pleasant. So while 404 pages interrupt your flow of\r\nwork, hopefully, these changes empower you to find what you need faster, while\r\nalso providing an enjoyable experience.</p>\n<p>Would you be interested in a MadGab component to use on your projects? Follow us\r\non Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> and let us know.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/building-404-pages-that-bring-joy/index.md" };
function rawContent() {
  return "\r\nYou clicked on that link with high expectations. You knew you were about to find\r\nthe answers you'd been searching for. Then it happened. You saw the dreaded 404\r\nerror letting you know that the content you were looking for wasn't there. Maybe\r\nthe content lives at a new location or perhaps it's been permanently removed.\r\nRegardless of the reason, your high hopes have been dashed and you're left to\r\nbegin your search again.\r\n\r\nIt's a terrible experience and one we wanted to make better. But before we get\r\ninto the details of what we've done, let's talk about where the idea started.\r\n\r\n## To Those About to Hack, We Salute You\r\n\r\nAt Deepgram, we have a goal that every interaction with us should be pleasant\r\nand (hopefully) enjoyable. We spend a lot of time thinking of how to make that\r\nhappen. One of the methods we use for brainstorming ideas and gathering feedback\r\nis hosting internal hack-a-thons (known internally as GRAMJAMs.) Last year, 8\r\nteams competed to be the GRAMJAM champion and one of the entries was a super\r\nfun game called MadGab.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1645937086/blog/2022/03/building-404-pages-that-bring-joy/gj2021.png\" alt=\"GRAMJAM 2021 logo\" style=\"width: 50%;margin:auto;\"/>\r\n\r\nThe premise was simple: present the user with a nonsensical phrase that is\r\nphonetically similar to a real-life phrase. Players would read the nonsensical\r\nphrase aloud and attempt to then say the associated real-life phrase. An example\r\nwould be \"mass turk hard\" in the place of \"Mastercard.\" It was a great\r\nexperience. The game's format was simple to understand and perform and it was\r\nhighly addictive. We knew immediately that we had to make this available for\r\nothers. This brings us back to the 404 page.\r\n\r\n## Making it Helpful\r\n\r\nWe knew we couldn't just have a game on our 404 page. While it's a fun\r\ndistraction, we realized that the visitor came with a purpose. That purpose\r\nneeded to be our number one priority. How could we help them reach their\r\nobjective?\r\n\r\n### Can We Find What You're Looking For?\r\n\r\nWouldn't it be great if we could \"guess\" what you were looking for and provide\r\nyou with a link to it? Fortunately, as we've built our site, we've tried to do\r\na good job of creating routes that consist of keywords associated with the\r\ncontent of the page. This means we can assume that parsing a route (even one\r\nthat resulted in a 404) should provide keywords that are relevant to what the\r\nuser was trying to reach.\r\n\r\nWe then send those parsed words to Algolia to search our site and display the\r\nthree most relevant results to the user. With a little luck, the results shown\r\nwill provide the information the visitor was looking for and they're only a\r\nclick away from continuing their journey.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1646884394/blog/2022/03/building-404-pages-that-bring-joy/results.png\" alt=\"Search results on the 404 page\"\r\nstyle=\"width:75%;margin:auto;\"/>\r\n\r\n### Quick Access to Search\r\n\r\nWhat if there were no results or the results didn't meet the user's need. Without\r\nadditional information, we can't move the user forward. So we added a search\r\ninput to the page to give quick access to finding what they're looking for. Yes,\r\nwe have a search bar on the top of every page in the navigation, but we don't\r\nwant users to expend unnecessary brain power trying to find it. Putting the\r\nsearch input front-and-center allows them to be on their way as efficiently as\r\npossible.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1646883861/blog/2022/03/building-404-pages-that-bring-joy/search-bar.png\" alt=\"Search bar on the 404 page\"\r\nstyle=\"width:75%;margin:auto;\"/>\r\n\r\nNow that we've done all we can to provide relevant information and paths\r\nforward, let's try to brighten their day by providing a chance to have fun\r\nbefore they move on.\r\n\r\n## Making it Enjoyable\r\n\r\nAfter some brainstorming, we had a list of requirements to recreate MadGab on\r\nour platform:\r\n\r\n*   Any API keys should remain on the server, or be short-lived (i.e. less than 5 minutes)\r\n*   Store the collection of gibberish phrases/answers on the server to protect them from cheaters \u{1F601}\r\n\r\nWe hope to open-source MadGab in the future, but, for now, I'll share how we\r\nachieved the goals above.\r\n\r\n<img src=\"https://res.cloudinary.com/deepgram/image/upload/v1646945899/blog/2022/03/building-404-pages-that-bring-joy/madgram.png\" alt=\"Screenshot of the MadGram game on our 404 page\"\r\nstyle=\"width:75%;margin:auto;\"/>\r\n\r\n### Protecting API Keys\r\n\r\nMadGab connects to the Deepgram API via a WebSocket and sends audio from the\r\nusers' microphone to be transcribed. This requires us to send an API key in the\r\nheader of that connection. That means an API key will be exposed to the client.\r\nTo minimize any risk, we wanted to use short-lived API keys. Because the\r\ndeveloper platform is hosted on Netlify, functions seemed like a good option for\r\nproviding a way to create a temporary API key to use for the game.\r\n\r\nLuckily for us, the Deepgram API allows creating API keys with a specified\r\ntime-to-live. So we imported the Deepgram Node SDK and use it to create a key\r\nthat lives for 5 seconds. That's just long enough for our front-end to connect\r\nto the Deepgram API before it expires. Below is the code for the Netlify\r\nfunction that generates and returns the API key.\r\n\r\n```js\r\nconst { Deepgram } = require('@deepgram/sdk')\r\nrequire('dotenv').config()\r\n\r\nconst deepgram = new Deepgram(process.env.DEEPGRAM_API_KEY)\r\nconst deepgramProjectId = process.env.DEEPGRAM_PROJECT_ID\r\n\r\nexports.handler = async function (event, context) {\r\n  try {\r\n    const key = await deepgram.keys.create(\r\n      deepgramProjectId,\r\n      'Temp 404 key',\r\n      ['member'],\r\n      {\r\n        timeToLive: 5\r\n      })\r\n\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(key),\r\n    }\r\n  }\r\n  catch (err) {\r\n    console.log(err)\r\n\r\n    return {\r\n      statusCode: 500,\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### No Peeking at the Answers\r\n\r\nOur teams at Deepgram had already collected a list of phonetic phrases matched\r\nwith the actual word phrases, so we were able to use that list in the game.\r\nWhile we could have created an array of those phrases in our component, we\r\ndidn't want users to be able to find them in the code and cheat. To solve this,\r\nwe created another Netlify function that could be called to return phrases\r\non-demand.\r\n\r\nEach phrase is defined as an object with three properties:\r\n\r\n*   `id`: a unique identifying number for the phrase\r\n*   `suggestion`: the phonetic phrase\r\n*   `result`: the phrase to be spoken\r\n\r\nTo prevent the need to call the function after every round of the game, the\r\nfunction returns up to three phrase objects at a time. However, we don't want to\r\nsend the same phrase to the same user until they've played every phrase\r\navailable. This requires us to track which phrases the user has played on the\r\nclient side. Then, each time we request new phrases, we'll send an array of the\r\nID's of each phrase the user has played in the body of the request. So the first\r\nthing the function should do is ensure the request is sent via HTTP `POST`.\r\n\r\n```js\r\n// Only allow POST\r\nif (event.httpMethod !== 'POST') {\r\n  return {\r\n    statusCode: 405,\r\n    body: 'Method Not Allowed',\r\n    headers: {\r\n      Allow: 'Get',\r\n    },\r\n  }\r\n}\r\n```\r\n\r\nNext, it will parse the request body to get the id's of the phrases the user has\r\nalready attempted.\r\n\r\n```js\r\nconst userChoices = []\r\nif (event.body !== undefined) {\r\n  const req = JSON.parse(event.body)\r\n  userChoices.push(...req.choices)\r\n}\r\n```\r\n\r\nCurrently, our phrases are stored in an array inside the function and called\r\n`choices`. So the next step is to filter the `choices` array to remove any\r\npreviously used phrases. If we've reached the end of choices, then we restart the\r\ngame and begin sending previously used phrases again. We'll also set the\r\n`restart` variable to true and return that as well. This notifies the\r\nclient-side that we've restarted and it should clear its cache of previously\r\nused phrases.\r\n\r\n```js\r\nlet restart = false\r\nconst availableChoices = choices.filter(f => !userChoices.includes(f.id))\r\nif (availableChoices.length === 0) {\r\n  availableChoices.push(...choices)\r\n  restart = true\r\n}\r\n```\r\n\r\nNow we want to select three random choices from `availableChoices`. To do that,\r\nwe created a `getRandomChoice` function that can return a random phrase from\r\n`availableChoices`.\r\n\r\n```js\r\nfunction getRandomChoice(availableChoices) {\r\n  const randomNumber = Math.floor(Math.random() * (availableChoices.length))\r\n  return availableChoices.splice(randomNumber, 1)[0]\r\n}\r\n```\r\n\r\nThen we can call that function three times to gather the three phrases to return\r\nto the client-side. If less than three phrases remain, we just return the\r\nremaining phrases.\r\n\r\n```js\r\nif (availableChoices.length > 3) {\r\n  selectedChoices.push(getRandomChoice(availableChoices))\r\n  selectedChoices.push(getRandomChoice(availableChoices))\r\n  selectedChoices.push(getRandomChoice(availableChoices))\r\n}\r\nelse {\r\n  selectedChoices.push(...availableChoices)\r\n}\r\n```\r\n\r\nFinally, we return the `selectedChoices` array and the `restart` boolean to the\r\nclient-side.\r\n\r\n```js\r\nreturn {\r\n  statusCode: 200,\r\n  body: JSON.stringify({\r\n    restart,\r\n    choices: selectedChoices\r\n  }),\r\n}\r\n```\r\n\r\n## Better Experiences are a Core Value\r\n\r\nAt the heart of this project is a desire to provide a better experience for\r\ndevelopers. Our team at Deepgram spends a LOT of time focused on how to make\r\nthat happen. From the experience of signing up, working in our console, using\r\nour SDKs, and yes, even our 404 page. We want every encounter with Deepgram to\r\nbe informative, helpful, and pleasant. So while 404 pages interrupt your flow of\r\nwork, hopefully, these changes empower you to find what you need faster, while\r\nalso providing an enjoyable experience.\r\n\r\nWould you be interested in a MadGab component to use on your projects? Follow us\r\non Twitter at [@DeepgramDevs](https://twitter.com/DeepgramDevs) and let us know.\r\n\r\n        ";
}
function compiledContent() {
  return '<p>You clicked on that link with high expectations. You knew you were about to find\r\nthe answers you\u2019d been searching for. Then it happened. You saw the dreaded 404\r\nerror letting you know that the content you were looking for wasn\u2019t there. Maybe\r\nthe content lives at a new location or perhaps it\u2019s been permanently removed.\r\nRegardless of the reason, your high hopes have been dashed and you\u2019re left to\r\nbegin your search again.</p>\n<p>It\u2019s a terrible experience and one we wanted to make better. But before we get\r\ninto the details of what we\u2019ve done, let\u2019s talk about where the idea started.</p>\n<h2 id="to-those-about-to-hack-we-salute-you">To Those About to Hack, We Salute You</h2>\n<p>At Deepgram, we have a goal that every interaction with us should be pleasant\r\nand (hopefully) enjoyable. We spend a lot of time thinking of how to make that\r\nhappen. One of the methods we use for brainstorming ideas and gathering feedback\r\nis hosting internal hack-a-thons (known internally as GRAMJAMs.) Last year, 8\r\nteams competed to be the GRAMJAM champion and one of the entries was a super\r\nfun game called MadGab.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1645937086/blog/2022/03/building-404-pages-that-bring-joy/gj2021.png" alt="GRAMJAM 2021 logo" style="width: 50%;margin:auto;" />\n<p>The premise was simple: present the user with a nonsensical phrase that is\r\nphonetically similar to a real-life phrase. Players would read the nonsensical\r\nphrase aloud and attempt to then say the associated real-life phrase. An example\r\nwould be \u201Cmass turk hard\u201D in the place of \u201CMastercard.\u201D It was a great\r\nexperience. The game\u2019s format was simple to understand and perform and it was\r\nhighly addictive. We knew immediately that we had to make this available for\r\nothers. This brings us back to the 404 page.</p>\n<h2 id="making-it-helpful">Making it Helpful</h2>\n<p>We knew we couldn\u2019t just have a game on our 404 page. While it\u2019s a fun\r\ndistraction, we realized that the visitor came with a purpose. That purpose\r\nneeded to be our number one priority. How could we help them reach their\r\nobjective?</p>\n<h3 id="can-we-find-what-youre-looking-for">Can We Find What You\u2019re Looking For?</h3>\n<p>Wouldn\u2019t it be great if we could \u201Cguess\u201D what you were looking for and provide\r\nyou with a link to it? Fortunately, as we\u2019ve built our site, we\u2019ve tried to do\r\na good job of creating routes that consist of keywords associated with the\r\ncontent of the page. This means we can assume that parsing a route (even one\r\nthat resulted in a 404) should provide keywords that are relevant to what the\r\nuser was trying to reach.</p>\n<p>We then send those parsed words to Algolia to search our site and display the\r\nthree most relevant results to the user. With a little luck, the results shown\r\nwill provide the information the visitor was looking for and they\u2019re only a\r\nclick away from continuing their journey.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1646884394/blog/2022/03/building-404-pages-that-bring-joy/results.png" alt="Search results on the 404 page" style="width:75%;margin:auto;" />\n<h3 id="quick-access-to-search">Quick Access to Search</h3>\n<p>What if there were no results or the results didn\u2019t meet the user\u2019s need. Without\r\nadditional information, we can\u2019t move the user forward. So we added a search\r\ninput to the page to give quick access to finding what they\u2019re looking for. Yes,\r\nwe have a search bar on the top of every page in the navigation, but we don\u2019t\r\nwant users to expend unnecessary brain power trying to find it. Putting the\r\nsearch input front-and-center allows them to be on their way as efficiently as\r\npossible.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1646883861/blog/2022/03/building-404-pages-that-bring-joy/search-bar.png" alt="Search bar on the 404 page" style="width:75%;margin:auto;" />\n<p>Now that we\u2019ve done all we can to provide relevant information and paths\r\nforward, let\u2019s try to brighten their day by providing a chance to have fun\r\nbefore they move on.</p>\n<h2 id="making-it-enjoyable">Making it Enjoyable</h2>\n<p>After some brainstorming, we had a list of requirements to recreate MadGab on\r\nour platform:</p>\n<ul>\n<li>Any API keys should remain on the server, or be short-lived (i.e. less than 5 minutes)</li>\n<li>Store the collection of gibberish phrases/answers on the server to protect them from cheaters \u{1F601}</li>\n</ul>\n<p>We hope to open-source MadGab in the future, but, for now, I\u2019ll share how we\r\nachieved the goals above.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1646945899/blog/2022/03/building-404-pages-that-bring-joy/madgram.png" alt="Screenshot of the MadGram game on our 404 page" style="width:75%;margin:auto;" />\n<h3 id="protecting-api-keys">Protecting API Keys</h3>\n<p>MadGab connects to the Deepgram API via a WebSocket and sends audio from the\r\nusers\u2019 microphone to be transcribed. This requires us to send an API key in the\r\nheader of that connection. That means an API key will be exposed to the client.\r\nTo minimize any risk, we wanted to use short-lived API keys. Because the\r\ndeveloper platform is hosted on Netlify, functions seemed like a good option for\r\nproviding a way to create a temporary API key to use for the game.</p>\n<p>Luckily for us, the Deepgram API allows creating API keys with a specified\r\ntime-to-live. So we imported the Deepgram Node SDK and use it to create a key\r\nthat lives for 5 seconds. That\u2019s just long enough for our front-end to connect\r\nto the Deepgram API before it expires. Below is the code for the Netlify\r\nfunction that generates and returns the API key.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramProjectId</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">DEEPGRAM_PROJECT_ID</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.keys.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">      deepgramProjectId,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Temp 404 key&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      [</span><span style="color: #A5D6FF">&#39;member&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">      {</span></span>\n<span class="line"><span style="color: #C9D1D9">        timeToLive: </span><span style="color: #79C0FF">5</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(key),</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(err)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="no-peeking-at-the-answers">No Peeking at the Answers</h3>\n<p>Our teams at Deepgram had already collected a list of phonetic phrases matched\r\nwith the actual word phrases, so we were able to use that list in the game.\r\nWhile we could have created an array of those phrases in our component, we\r\ndidn\u2019t want users to be able to find them in the code and cheat. To solve this,\r\nwe created another Netlify function that could be called to return phrases\r\non-demand.</p>\n<p>Each phrase is defined as an object with three properties:</p>\n<ul>\n<li><code is:raw>id</code>: a unique identifying number for the phrase</li>\n<li><code is:raw>suggestion</code>: the phonetic phrase</li>\n<li><code is:raw>result</code>: the phrase to be spoken</li>\n</ul>\n<p>To prevent the need to call the function after every round of the game, the\r\nfunction returns up to three phrase objects at a time. However, we don\u2019t want to\r\nsend the same phrase to the same user until they\u2019ve played every phrase\r\navailable. This requires us to track which phrases the user has played on the\r\nclient side. Then, each time we request new phrases, we\u2019ll send an array of the\r\nID\u2019s of each phrase the user has played in the body of the request. So the first\r\nthing the function should do is ensure the request is sent via HTTP <code is:raw>POST</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Only allow POST</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.httpMethod </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    statusCode: </span><span style="color: #79C0FF">405</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #A5D6FF">&#39;Method Not Allowed&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      Allow: </span><span style="color: #A5D6FF">&#39;Get&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Next, it will parse the request body to get the id\u2019s of the phrases the user has\r\nalready attempted.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">userChoices</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.body </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">undefined</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">req</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(event.body)</span></span>\n<span class="line"><span style="color: #C9D1D9">  userChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">req.choices)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Currently, our phrases are stored in an array inside the function and called\r\n<code is:raw>choices</code>. So the next step is to filter the <code is:raw>choices</code> array to remove any\r\npreviously used phrases. If we\u2019ve reached the end of choices, then we restart the\r\ngame and begin sending previously used phrases again. We\u2019ll also set the\r\n<code is:raw>restart</code> variable to true and return that as well. This notifies the\r\nclient-side that we\u2019ve restarted and it should clear its cache of previously\r\nused phrases.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> restart </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">availableChoices</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> choices.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">f</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">userChoices.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(f.id))</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  availableChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">choices)</span></span>\n<span class="line"><span style="color: #C9D1D9">  restart </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now we want to select three random choices from <code is:raw>availableChoices</code>. To do that,\r\nwe created a <code is:raw>getRandomChoice</code> function that can return a random phrase from\r\n<code is:raw>availableChoices</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">availableChoices</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">randomNumber</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> availableChoices.</span><span style="color: #D2A8FF">splice</span><span style="color: #C9D1D9">(randomNumber, </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then we can call that function three times to gather the three phrases to return\r\nto the client-side. If less than three phrases remain, we just return the\r\nremaining phrases.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">availableChoices)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Finally, we return the <code is:raw>selectedChoices</code> array and the <code is:raw>restart</code> boolean to the\r\nclient-side.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    restart,</span></span>\n<span class="line"><span style="color: #C9D1D9">    choices: selectedChoices</span></span>\n<span class="line"><span style="color: #C9D1D9">  }),</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h2 id="better-experiences-are-a-core-value">Better Experiences are a Core Value</h2>\n<p>At the heart of this project is a desire to provide a better experience for\r\ndevelopers. Our team at Deepgram spends a LOT of time focused on how to make\r\nthat happen. From the experience of signing up, working in our console, using\r\nour SDKs, and yes, even our 404 page. We want every encounter with Deepgram to\r\nbe informative, helpful, and pleasant. So while 404 pages interrupt your flow of\r\nwork, hopefully, these changes empower you to find what you need faster, while\r\nalso providing an enjoyable experience.</p>\n<p>Would you be interested in a MadGab component to use on your projects? Follow us\r\non Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> and let us know.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/building-404-pages-that-bring-joy/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>You clicked on that link with high expectations. You knew you were about to find
the answers you’d been searching for. Then it happened. You saw the dreaded 404
error letting you know that the content you were looking for wasn’t there. Maybe
the content lives at a new location or perhaps it’s been permanently removed.
Regardless of the reason, your high hopes have been dashed and you’re left to
begin your search again.</p>
<p>It’s a terrible experience and one we wanted to make better. But before we get
into the details of what we’ve done, let’s talk about where the idea started.</p>
<h2 id="to-those-about-to-hack-we-salute-you">To Those About to Hack, We Salute You</h2>
<p>At Deepgram, we have a goal that every interaction with us should be pleasant
and (hopefully) enjoyable. We spend a lot of time thinking of how to make that
happen. One of the methods we use for brainstorming ideas and gathering feedback
is hosting internal hack-a-thons (known internally as GRAMJAMs.) Last year, 8
teams competed to be the GRAMJAM champion and one of the entries was a super
fun game called MadGab.</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1645937086/blog/2022/03/building-404-pages-that-bring-joy/gj2021.png" alt="GRAMJAM 2021 logo" style="width: 50%;margin:auto;">
<p>The premise was simple: present the user with a nonsensical phrase that is
phonetically similar to a real-life phrase. Players would read the nonsensical
phrase aloud and attempt to then say the associated real-life phrase. An example
would be “mass turk hard” in the place of “Mastercard.” It was a great
experience. The game’s format was simple to understand and perform and it was
highly addictive. We knew immediately that we had to make this available for
others. This brings us back to the 404 page.</p>
<h2 id="making-it-helpful">Making it Helpful</h2>
<p>We knew we couldn’t just have a game on our 404 page. While it’s a fun
distraction, we realized that the visitor came with a purpose. That purpose
needed to be our number one priority. How could we help them reach their
objective?</p>
<h3 id="can-we-find-what-youre-looking-for">Can We Find What You’re Looking For?</h3>
<p>Wouldn’t it be great if we could “guess” what you were looking for and provide
you with a link to it? Fortunately, as we’ve built our site, we’ve tried to do
a good job of creating routes that consist of keywords associated with the
content of the page. This means we can assume that parsing a route (even one
that resulted in a 404) should provide keywords that are relevant to what the
user was trying to reach.</p>
<p>We then send those parsed words to Algolia to search our site and display the
three most relevant results to the user. With a little luck, the results shown
will provide the information the visitor was looking for and they’re only a
click away from continuing their journey.</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1646884394/blog/2022/03/building-404-pages-that-bring-joy/results.png" alt="Search results on the 404 page" style="width:75%;margin:auto;">
<h3 id="quick-access-to-search">Quick Access to Search</h3>
<p>What if there were no results or the results didn’t meet the user’s need. Without
additional information, we can’t move the user forward. So we added a search
input to the page to give quick access to finding what they’re looking for. Yes,
we have a search bar on the top of every page in the navigation, but we don’t
want users to expend unnecessary brain power trying to find it. Putting the
search input front-and-center allows them to be on their way as efficiently as
possible.</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1646883861/blog/2022/03/building-404-pages-that-bring-joy/search-bar.png" alt="Search bar on the 404 page" style="width:75%;margin:auto;">
<p>Now that we’ve done all we can to provide relevant information and paths
forward, let’s try to brighten their day by providing a chance to have fun
before they move on.</p>
<h2 id="making-it-enjoyable">Making it Enjoyable</h2>
<p>After some brainstorming, we had a list of requirements to recreate MadGab on
our platform:</p>
<ul>
<li>Any API keys should remain on the server, or be short-lived (i.e. less than 5 minutes)</li>
<li>Store the collection of gibberish phrases/answers on the server to protect them from cheaters 😁</li>
</ul>
<p>We hope to open-source MadGab in the future, but, for now, I’ll share how we
achieved the goals above.</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1646945899/blog/2022/03/building-404-pages-that-bring-joy/madgram.png" alt="Screenshot of the MadGram game on our 404 page" style="width:75%;margin:auto;">
<h3 id="protecting-api-keys">Protecting API Keys</h3>
<p>MadGab connects to the Deepgram API via a WebSocket and sends audio from the
users’ microphone to be transcribed. This requires us to send an API key in the
header of that connection. That means an API key will be exposed to the client.
To minimize any risk, we wanted to use short-lived API keys. Because the
developer platform is hosted on Netlify, functions seemed like a good option for
providing a way to create a temporary API key to use for the game.</p>
<p>Luckily for us, the Deepgram API allows creating API keys with a specified
time-to-live. So we imported the Deepgram Node SDK and use it to create a key
that lives for 5 seconds. That’s just long enough for our front-end to connect
to the Deepgram API before it expires. Below is the code for the Netlify
function that generates and returns the API key.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramProjectId</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">DEEPGRAM_PROJECT_ID</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">context</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.keys.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">      deepgramProjectId,</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Temp 404 key&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      [</span><span style="color: #A5D6FF">&#39;member&#39;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">      {</span></span>
<span class="line"><span style="color: #C9D1D9">        timeToLive: </span><span style="color: #79C0FF">5</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(key),</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(err)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h3 id="no-peeking-at-the-answers">No Peeking at the Answers</h3>
<p>Our teams at Deepgram had already collected a list of phonetic phrases matched
with the actual word phrases, so we were able to use that list in the game.
While we could have created an array of those phrases in our component, we
didn’t want users to be able to find them in the code and cheat. To solve this,
we created another Netlify function that could be called to return phrases
on-demand.</p>
<p>Each phrase is defined as an object with three properties:</p>
<ul>
<li><code>id</code>: a unique identifying number for the phrase</li>
<li><code>suggestion</code>: the phonetic phrase</li>
<li><code>result</code>: the phrase to be spoken</li>
</ul>
<p>To prevent the need to call the function after every round of the game, the
function returns up to three phrase objects at a time. However, we don’t want to
send the same phrase to the same user until they’ve played every phrase
available. This requires us to track which phrases the user has played on the
client side. Then, each time we request new phrases, we’ll send an array of the
ID’s of each phrase the user has played in the body of the request. So the first
thing the function should do is ensure the request is sent via HTTP <code>POST</code>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Only allow POST</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.httpMethod </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    statusCode: </span><span style="color: #79C0FF">405</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #A5D6FF">&#39;Method Not Allowed&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    headers: {</span></span>
<span class="line"><span style="color: #C9D1D9">      Allow: </span><span style="color: #A5D6FF">&#39;Get&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Next, it will parse the request body to get the id’s of the phrases the user has
already attempted.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">userChoices</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.body </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">undefined</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">req</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(event.body)</span></span>
<span class="line"><span style="color: #C9D1D9">  userChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">req.choices)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Currently, our phrases are stored in an array inside the function and called
<code>choices</code>. So the next step is to filter the <code>choices</code> array to remove any
previously used phrases. If we’ve reached the end of choices, then we restart the
game and begin sending previously used phrases again. We’ll also set the
<code>restart</code> variable to true and return that as well. This notifies the
client-side that we’ve restarted and it should clear its cache of previously
used phrases.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> restart </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">availableChoices</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> choices.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">f</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">userChoices.</span><span style="color: #D2A8FF">includes</span><span style="color: #C9D1D9">(f.id))</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  availableChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">choices)</span></span>
<span class="line"><span style="color: #C9D1D9">  restart </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Now we want to select three random choices from <code>availableChoices</code>. To do that,
we created a <code>getRandomChoice</code> function that can return a random phrase from
<code>availableChoices</code>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">availableChoices</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">randomNumber</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Math.</span><span style="color: #D2A8FF">floor</span><span style="color: #C9D1D9">(Math.</span><span style="color: #D2A8FF">random</span><span style="color: #C9D1D9">() </span><span style="color: #FF7B72">*</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> availableChoices.</span><span style="color: #D2A8FF">splice</span><span style="color: #C9D1D9">(randomNumber, </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">)[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Then we can call that function three times to gather the three phrases to return
to the client-side. If less than three phrases remain, we just return the
remaining phrases.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (availableChoices.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>
<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>
<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">getRandomChoice</span><span style="color: #C9D1D9">(availableChoices))</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  selectedChoices.</span><span style="color: #D2A8FF">push</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">availableChoices)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Finally, we return the <code>selectedChoices</code> array and the <code>restart</code> boolean to the
client-side.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    restart,</span></span>
<span class="line"><span style="color: #C9D1D9">    choices: selectedChoices</span></span>
<span class="line"><span style="color: #C9D1D9">  }),</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h2 id="better-experiences-are-a-core-value">Better Experiences are a Core Value</h2>
<p>At the heart of this project is a desire to provide a better experience for
developers. Our team at Deepgram spends a LOT of time focused on how to make
that happen. From the experience of signing up, working in our console, using
our SDKs, and yes, even our 404 page. We want every encounter with Deepgram to
be informative, helpful, and pleasant. So while 404 pages interrupt your flow of
work, hopefully, these changes empower you to find what you need faster, while
also providing an enjoyable experience.</p>
<p>Would you be interested in a MadGab component to use on your projects? Follow us
on Twitter at <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a> and let us know.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/building-404-pages-that-bring-joy/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
