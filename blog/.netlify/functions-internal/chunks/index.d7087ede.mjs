import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [], "source": "\r\nEarlier this month [I built a wearable transcription device](https://twitter.com/_phzn/status/1478504862170161152) using Deepgram and a Raspberry Pi. The project is a web application running in a fullscreen browser on the Pi. However, when the device first starts, it requires a fiddly set of touchscreen interactions to get it in a ready state - opening the browser, navigating to the correct URL, and then fullscreening the browser. In this quick guide, I will show you the steps I took to automate this on device launch.\r\n\r\n<Alert type=\"info\">This tutorial works for Raspberry Pi OS 10 - Buster</Alert>\r\n\r\nOpen your terminal and type the following:\r\n\r\n```bash\r\nsudo nano /etc/xdg/lxsession/LXDE-pi/autostart\r\n```\r\n\r\nThis will open a new text file which will be executed when the desktop environment (LXDE) launches. In the file type the following:\r\n\r\n```bash\r\n@lxpanel --profile LXDE-pi\r\n@pcmanfm --desktop --profile LXDE-pi\r\n\r\n@xset s off\r\n@xset -dpms\r\n@xset s noblank\r\n\r\n@chromium-browser --kiosk https://deepgram.com\r\n```\r\n\r\nClick **Control + X** to quit the app, and then **Y** to say 'yes' and save your file.\r\n\r\nThe first section sets up the environment and profile for the Pi, and the second section stops the Pi sleeping or starting the screensaver.\r\n\r\nThe final line is the most crucial - it starts Chromium (the built-in browser on which Google Chrome is based) in fullscreen mode at the specified URL. Kiosk mode also stops other user input outside of the browser - effectively locking the user into the browser.\r\n\r\nI hope this helps you build web-based Raspberry Pi projects. If you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ", "html": '<p>Earlier this month <a href="https://twitter.com/_phzn/status/1478504862170161152">I built a wearable transcription device</a> using Deepgram and a Raspberry Pi. The project is a web application running in a fullscreen browser on the Pi. However, when the device first starts, it requires a fiddly set of touchscreen interactions to get it in a ready state - opening the browser, navigating to the correct URL, and then fullscreening the browser. In this quick guide, I will show you the steps I took to automate this on device launch.</p>\n<Alert type="info">This tutorial works for Raspberry Pi OS 10 - Buster</Alert>\n<p>Open your terminal and type the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">sudo nano /etc/xdg/lxsession/LXDE-pi/autostart</span></span></code></pre>\n<p>This will open a new text file which will be executed when the desktop environment (LXDE) launches. In the file type the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">@lxpanel --profile LXDE-pi</span></span>\n<span class="line"><span style="color: #C9D1D9">@pcmanfm --desktop --profile LXDE-pi</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">@xset s off</span></span>\n<span class="line"><span style="color: #C9D1D9">@xset -dpms</span></span>\n<span class="line"><span style="color: #C9D1D9">@xset s noblank</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">@chromium-browser --kiosk https://deepgram.com</span></span></code></pre>\n<p>Click <strong>Control + X</strong> to quit the app, and then <strong>Y</strong> to say \u2018yes\u2019 and save your file.</p>\n<p>The first section sets up the environment and profile for the Pi, and the second section stops the Pi sleeping or starting the screensaver.</p>\n<p>The final line is the most crucial - it starts Chromium (the built-in browser on which Google Chrome is based) in fullscreen mode at the specified URL. Kiosk mode also stops other user input outside of the browser - effectively locking the user into the browser.</p>\n<p>I hope this helps you build web-based Raspberry Pi projects. If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Start Chromium in Kiosk Mode on Raspberry Pi OS", "description": "Launch directly into a fullscreen browser on your Raspberry Pi", "date": "2022-01-19T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1642519931/blog/2022/01/chromium-kiosk-pi/Pi.png", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["raspberrypi", "iot"], "seo": { "title": "Start Chromium in Kiosk Mode on Raspberry Pi OS", "description": "Launch directly into a fullscreen browser on your Raspberry Pi" }, "shorturls": { "share": "https://dpgr.am/f0d301c", "twitter": "https://dpgr.am/3033ea8", "linkedin": "https://dpgr.am/9cc98cb", "reddit": "https://dpgr.am/47f10bd", "facebook": "https://dpgr.am/70b90f5" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453839/blog/chromium-kiosk-pi/ograph.png" }, "astro": { "headings": [], "source": "\r\nEarlier this month [I built a wearable transcription device](https://twitter.com/_phzn/status/1478504862170161152) using Deepgram and a Raspberry Pi. The project is a web application running in a fullscreen browser on the Pi. However, when the device first starts, it requires a fiddly set of touchscreen interactions to get it in a ready state - opening the browser, navigating to the correct URL, and then fullscreening the browser. In this quick guide, I will show you the steps I took to automate this on device launch.\r\n\r\n<Alert type=\"info\">This tutorial works for Raspberry Pi OS 10 - Buster</Alert>\r\n\r\nOpen your terminal and type the following:\r\n\r\n```bash\r\nsudo nano /etc/xdg/lxsession/LXDE-pi/autostart\r\n```\r\n\r\nThis will open a new text file which will be executed when the desktop environment (LXDE) launches. In the file type the following:\r\n\r\n```bash\r\n@lxpanel --profile LXDE-pi\r\n@pcmanfm --desktop --profile LXDE-pi\r\n\r\n@xset s off\r\n@xset -dpms\r\n@xset s noblank\r\n\r\n@chromium-browser --kiosk https://deepgram.com\r\n```\r\n\r\nClick **Control + X** to quit the app, and then **Y** to say 'yes' and save your file.\r\n\r\nThe first section sets up the environment and profile for the Pi, and the second section stops the Pi sleeping or starting the screensaver.\r\n\r\nThe final line is the most crucial - it starts Chromium (the built-in browser on which Google Chrome is based) in fullscreen mode at the specified URL. Kiosk mode also stops other user input outside of the browser - effectively locking the user into the browser.\r\n\r\nI hope this helps you build web-based Raspberry Pi projects. If you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ", "html": '<p>Earlier this month <a href="https://twitter.com/_phzn/status/1478504862170161152">I built a wearable transcription device</a> using Deepgram and a Raspberry Pi. The project is a web application running in a fullscreen browser on the Pi. However, when the device first starts, it requires a fiddly set of touchscreen interactions to get it in a ready state - opening the browser, navigating to the correct URL, and then fullscreening the browser. In this quick guide, I will show you the steps I took to automate this on device launch.</p>\n<Alert type="info">This tutorial works for Raspberry Pi OS 10 - Buster</Alert>\n<p>Open your terminal and type the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">sudo nano /etc/xdg/lxsession/LXDE-pi/autostart</span></span></code></pre>\n<p>This will open a new text file which will be executed when the desktop environment (LXDE) launches. In the file type the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">@lxpanel --profile LXDE-pi</span></span>\n<span class="line"><span style="color: #C9D1D9">@pcmanfm --desktop --profile LXDE-pi</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">@xset s off</span></span>\n<span class="line"><span style="color: #C9D1D9">@xset -dpms</span></span>\n<span class="line"><span style="color: #C9D1D9">@xset s noblank</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">@chromium-browser --kiosk https://deepgram.com</span></span></code></pre>\n<p>Click <strong>Control + X</strong> to quit the app, and then <strong>Y</strong> to say \u2018yes\u2019 and save your file.</p>\n<p>The first section sets up the environment and profile for the Pi, and the second section stops the Pi sleeping or starting the screensaver.</p>\n<p>The final line is the most crucial - it starts Chromium (the built-in browser on which Google Chrome is based) in fullscreen mode at the specified URL. Kiosk mode also stops other user input outside of the browser - effectively locking the user into the browser.</p>\n<p>I hope this helps you build web-based Raspberry Pi projects. If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/chromium-kiosk-pi/index.md" };
function rawContent() {
  return "\r\nEarlier this month [I built a wearable transcription device](https://twitter.com/_phzn/status/1478504862170161152) using Deepgram and a Raspberry Pi. The project is a web application running in a fullscreen browser on the Pi. However, when the device first starts, it requires a fiddly set of touchscreen interactions to get it in a ready state - opening the browser, navigating to the correct URL, and then fullscreening the browser. In this quick guide, I will show you the steps I took to automate this on device launch.\r\n\r\n<Alert type=\"info\">This tutorial works for Raspberry Pi OS 10 - Buster</Alert>\r\n\r\nOpen your terminal and type the following:\r\n\r\n```bash\r\nsudo nano /etc/xdg/lxsession/LXDE-pi/autostart\r\n```\r\n\r\nThis will open a new text file which will be executed when the desktop environment (LXDE) launches. In the file type the following:\r\n\r\n```bash\r\n@lxpanel --profile LXDE-pi\r\n@pcmanfm --desktop --profile LXDE-pi\r\n\r\n@xset s off\r\n@xset -dpms\r\n@xset s noblank\r\n\r\n@chromium-browser --kiosk https://deepgram.com\r\n```\r\n\r\nClick **Control + X** to quit the app, and then **Y** to say 'yes' and save your file.\r\n\r\nThe first section sets up the environment and profile for the Pi, and the second section stops the Pi sleeping or starting the screensaver.\r\n\r\nThe final line is the most crucial - it starts Chromium (the built-in browser on which Google Chrome is based) in fullscreen mode at the specified URL. Kiosk mode also stops other user input outside of the browser - effectively locking the user into the browser.\r\n\r\nI hope this helps you build web-based Raspberry Pi projects. If you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\r\n\r\n        ";
}
function compiledContent() {
  return '<p>Earlier this month <a href="https://twitter.com/_phzn/status/1478504862170161152">I built a wearable transcription device</a> using Deepgram and a Raspberry Pi. The project is a web application running in a fullscreen browser on the Pi. However, when the device first starts, it requires a fiddly set of touchscreen interactions to get it in a ready state - opening the browser, navigating to the correct URL, and then fullscreening the browser. In this quick guide, I will show you the steps I took to automate this on device launch.</p>\n<Alert type="info">This tutorial works for Raspberry Pi OS 10 - Buster</Alert>\n<p>Open your terminal and type the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">sudo nano /etc/xdg/lxsession/LXDE-pi/autostart</span></span></code></pre>\n<p>This will open a new text file which will be executed when the desktop environment (LXDE) launches. In the file type the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">@lxpanel --profile LXDE-pi</span></span>\n<span class="line"><span style="color: #C9D1D9">@pcmanfm --desktop --profile LXDE-pi</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">@xset s off</span></span>\n<span class="line"><span style="color: #C9D1D9">@xset -dpms</span></span>\n<span class="line"><span style="color: #C9D1D9">@xset s noblank</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">@chromium-browser --kiosk https://deepgram.com</span></span></code></pre>\n<p>Click <strong>Control + X</strong> to quit the app, and then <strong>Y</strong> to say \u2018yes\u2019 and save your file.</p>\n<p>The first section sets up the environment and profile for the Pi, and the second section stops the Pi sleeping or starting the screensaver.</p>\n<p>The final line is the most crucial - it starts Chromium (the built-in browser on which Google Chrome is based) in fullscreen mode at the specified URL. Kiosk mode also stops other user input outside of the browser - effectively locking the user into the browser.</p>\n<p>I hope this helps you build web-based Raspberry Pi projects. If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/chromium-kiosk-pi/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Earlier this month <a href="https://twitter.com/_phzn/status/1478504862170161152">I built a wearable transcription device</a> using Deepgram and a Raspberry Pi. The project is a web application running in a fullscreen browser on the Pi. However, when the device first starts, it requires a fiddly set of touchscreen interactions to get it in a ready state - opening the browser, navigating to the correct URL, and then fullscreening the browser. In this quick guide, I will show you the steps I took to automate this on device launch.</p>
${renderComponent($$result, "Alert", Alert, { "type": "info" }, { "default": () => renderTemplate`This tutorial works for Raspberry Pi OS 10 - Buster` })}
<p>Open your terminal and type the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">sudo nano /etc/xdg/lxsession/LXDE-pi/autostart</span></span></code></pre>
<p>This will open a new text file which will be executed when the desktop environment (LXDE) launches. In the file type the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">@lxpanel --profile LXDE-pi</span></span>
<span class="line"><span style="color: #C9D1D9">@pcmanfm --desktop --profile LXDE-pi</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">@xset s off</span></span>
<span class="line"><span style="color: #C9D1D9">@xset -dpms</span></span>
<span class="line"><span style="color: #C9D1D9">@xset s noblank</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">@chromium-browser --kiosk https://deepgram.com</span></span></code></pre>
<p>Click <strong>Control + X</strong> to quit the app, and then <strong>Y</strong> to say ‘yes’ and save your file.</p>
<p>The first section sets up the environment and profile for the Pi, and the second section stops the Pi sleeping or starting the screensaver.</p>
<p>The final line is the most crucial - it starts Chromium (the built-in browser on which Google Chrome is based) in fullscreen mode at the specified URL. Kiosk mode also stops other user input outside of the browser - effectively locking the user into the browser.</p>
<p>I hope this helps you build web-based Raspberry Pi projects. If you have any questions, please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/chromium-kiosk-pi/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
