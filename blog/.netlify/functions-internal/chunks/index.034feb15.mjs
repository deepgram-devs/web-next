import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "project-overview", "text": "Project Overview" }, { "depth": 3, "slug": "deepgram-live-streaming-logic", "text": "Deepgram Live Streaming Logic" }, { "depth": 3, "slug": "focus-voice-control-feature", "text": "Focus: Voice-Control Feature" }, { "depth": 2, "slug": "create-the-component-and-connect-deepgram", "text": "Create the Component and Connect Deepgram" }, { "depth": 2, "slug": "analyze-deepgram-response-for-voice-commands", "text": "Analyze Deepgram Response for Voice Commands" }, { "depth": 3, "slug": "deepgram-audio-stream-to-text", "text": "Deepgram Audio Stream to Text" }, { "depth": 2, "slug": "add-to-do-item-with-voice-control", "text": "Add To-Do Item With Voice-Control" }, { "depth": 3, "slug": "create-a-set-of-regular-expressions", "text": "Create a Set of Regular Expressions" }, { "depth": 3, "slug": "use-the-array-method-find", "text": "Use the Array Method .find()" }, { "depth": 3, "slug": "write-a-method-to-standardize-the-command-string", "text": "Write a Method to Standardize the Command String" }, { "depth": 3, "slug": "test-that-the-item-matches-the-regular-expression", "text": "Test that the Item Matches the Regular Expression" }, { "depth": 3, "slug": "remove-the-command-phrase-from-the-string", "text": "Remove the Command Phrase from the String" }, { "depth": 3, "slug": "add-the-to-do-item-to-the-to-do-list-array", "text": "Add the To-Do Item to the To-Do List Array" }, { "depth": 3, "slug": "watch-for-a-command-add-it-to-the-list", "text": "Watch For a Command, Add it To The List" }, { "depth": 2, "slug": "dealing-with-misunderstood-commands", "text": "Dealing with Misunderstood Commands" }, { "depth": 2, "slug": "delete-to-do-item-with-voice-control", "text": "Delete To-Do Item With Voice-Control" }, { "depth": 3, "slug": "pseudo-code", "text": "Pseudo-Code:" }, { "depth": 2, "slug": "check-off-to-do-item-with-voice-control", "text": "Check-Off To-Do Item With Voice-Control" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": '\nRecently I wrote about a project I did to help me learn Pinia, Vue 3\'s new official state management system. I built a basic to-do list app:\n\n![Example to-do list app](https://res.cloudinary.com/deepgram/image/upload/v1651517752/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/todo-list-example1.jpg)\n\nIt dawned on me that a fun way to jazz up this project would be to use Deepgram to make the app **voice-powered** so that a user can **speak** commands to add, delete, or check-off items on the list.\n\nI\'m inspired by my colleague Bekah\'s series about [updating portfolio projects](https://blog.deepgram.com/freecodecamp-quote-generator-upgrade/). A voice-based to-do list app would be a lot more interesting than a regular to-do list app!\n\n## Project Overview\n\n<Panel type="info" title="Build a To-Do List App With Vue 3, Pinia, and Deepgram (SERIES)">\n<ol>\n<li><a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/" target="_blank">Build a To-do List App with Pinia and Vue 3</a></li>\n<li><a href="https://blog.deepgram.com/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/" target="_blank"> Build a Voice Controlled To-Do List App with Deepgram and Vue 3</a></li>\n</ol>\n</Panel>\n\nThe project I originally did can be found in this [repo](https://github.com/deepgram-devs/todo-pinia), and the accompanying blog post is [here](https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/). Check it out to build the standard to-do list project with Vue 3 and Pinia.\n\nIn this iteration of the project, I\'ll continue to use [Pinia](https://pinia.vuejs.org/) to manage global state, but I\'ll add Deepgram so I can use Deepgram\'s speech-to-text API to help me power the voice-control feature. If you want to build this voice-control feature along with me, I\'ve created a starting branch [here](https://github.com/deepgram-devs/todo-pinia-deepgram/tree/starter-branch).\n\n### Deepgram Live Streaming Logic\n\nThere are several articles on Deepgram Docs about how to use Deepgram in Javascript to convert an audio stream of speech into text, including one I wrote about how to use it with Vue 3. I won\'t go over in detail here how I built Vue composables to integrate Deepgram\'s speech-to-text API. Use these resources or take a look at my repo (in the [composables folder](https://github.com/deepgram-devs/todo-pinia-deepgram/tree/main/src/composables)) to learn how I did this using Vue 3 and the Deepgram Node SDK:\n\n<Panel type="info" title="Additional Resources">\n<ul>\n<li><a href="https://blog.deepgram.com/asynchronous-logic-to-write-a-vue-3-and-deepgram-captions-component/">Asynchronous Logic to Write a Vue 3 and Deepgram Captions Component</a> by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li>\n<li><a href="https://blog.deepgram.com/live-transcription-mic-browser/">Get Live Speech Transcriptions In Your Browser</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n<li><a href="https://blog.deepgram.com/protecting-api-key/">Browser Live Transcription - Protecting Your API Key</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n</ul>\n\n</Panel>\n\n### Focus: Voice-Control Feature\n\nFor today\'s project, I will focus on dealing with the transcript of text that I get back from Deepgram, analyzing it for speech commands to add, delete, and check off items in the to-do list. This logic will all be part of a voice-control feature.\n\n## Create the Component and Connect Deepgram\n\nThe voice-control feature that I build today will be one component with two main elements:\n\n1.  a `button` that, when clicked, **turns on or off voice-control mode** (i.e., toggles the connection to Deepgram)\n2.  a `div` that contains text which identifies the status of whether Deepgram is **connected and listening**, if it **misheard what was said**, or if it is **not connected**.\n\nHere\'s a minimally styled version of this project that highlights the component I\'ll be building today:\n\n![To-do list app highlighting component](https://res.cloudinary.com/deepgram/image/upload/v1651517754/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/TodoSpeech.png)\n\nIn the components folder with the other Todo components, I\'ll create a component called `TodoSpeech.vue`. It will be a child component of `TodoApp.vue`.\n\nIn `TodoSpeech.vue`, I\'ll start by adding the button element and status div to the template. I\'ll use a speech bubble emoji on the button, and I\'ll create an event listener that I plan to program to toggle the Deepgram connection when the button is clicked.\n\n```html\n{/*<!-- in template: -->*/}\n<button @click="toggleListen()">\u{1F4AC}</button>\n<div>{{ deepgramStatus }}</div>\n```\n\nI\'ll also create a `deepgramStatus` ref, which I\'ll program to update when Deepgram is connected and ready to receive audio data. The initial value will report that Deepgram is not connected:\n\n```js\n// in script:\nlet deepgramStatus = ref(\'Deepgram Not Connected\')\n```\n\nI\'ll connect to Deepgram using the composable `useDeepgramSocket` (already built in a previous post), which I import in the script. I also run the composable in the setup function so that it runs at the beginning of the component lifecycle. I destructure four properties off of the composable: `DG_socket`, `DG_transcript`, `openStream`, `closeStream`.\n\n```js\n<script>\nimport { ref } from "vue";\nimport useDeepgramSocket from "@/composables/useDeepgramSocket";\n\nexport default {\n  setup() {\n    const { DG_socket, DG_transcript, openStream, closeStream } = useDeepgramSocket();\n    let deepgramStatus = ref("Deepgram Not Connected");\n\n    return { deepgramStatus };\n  },\n};\n<\/script>\n```\n\nThe `openStream` and `closeStream` methods that I destructured off of the `useDeepgramSocket` composable will toggle on and off when the button is clicked and `toggleListen` runs. Notice that I created the `isListening` ref to update the toggle status:\n\n```js\nlet isListening = ref(false)\n\nfunction toggleListen() {\n  if (!isListening.value) {\n    openStream()\n    isListening.value = true\n  } else {\n    closeStream()\n    isListening.value = false\n  }\n}\n```\n\nI\'ll use a watcher to watch the Deepgram socket\'s status in the composable. That way, the `div` in the template will update when I click the button and Deepgram is connecting, connected, or not connected:\n\n```js\nwatch(DG_socket, () => {\n  if (DG_socket.value === \'Connecting\') {\n    deepgramStatus.value = \'Connecting\'\n  } else if (DG_socket.value === \'Not Connected\') {\n    deepgramStatus.value = \'Voice Controls Off\'\n  } else if (DG_socket.value === \'Closing connection...\') {\n    deepgramStatus.value = \'Closing connection...\'\n  } else {\n    deepgramStatus.value = \'Listening\'\n  }\n})\n```\n\nHere is the entire component now. I should be able to click the button and see the status change to show the status of the Deepgram connection:\n\n```js\n<template>\n  <div>\n    <button @click="toggleListen()">\u{1F4AC}</button>\n    <div>{{ deepgramStatus }}</div>\n  </div>\n</template>\n\n<script>\nimport { ref, watch } from "vue";\nimport useDeepgramSocket from "@/composables/useDeepgramSocket";\n\nexport default {\n  setup() {\n    const { DG_socket, DG_transcript, openStream, closeStream } =\n      useDeepgramSocket();\n\n    let deepgramStatus = ref("Deepgram Not Connected");\n    let isListening = ref(false);\n\n    function toggleListen() {\n      if (!isListening.value) {\n        openStream();\n        isListening.value = true;\n      } else {\n        closeStream();\n        isListening.value = false;\n      }\n    }\n\n    watch(DG_socket, () => {\n      if (DG_socket.value === "Connecting") {\n        deepgramStatus.value = "Connecting";\n      } else if (DG_socket.value === "Not Connected") {\n        deepgramStatus.value = "Voice Controls Off";\n      } else if (DG_socket.value === "Closing connection...") {\n        deepgramStatus.value = "Closing connection...";\n      } else {\n        deepgramStatus.value = "Listening";\n      }\n    });\n\n    return { deepgramStatus, toggleListen };\n  },\n};\n<\/script>\n```\n\n## Analyze Deepgram Response for Voice Commands\n\nThe logic to add, delete, or check-off an item from the list will be based on what the speaker says. I need to program this application to listen for commands such as "add!" or "delete!".\n\nTo do that, I will need to understand the form of the text transcript I\'ll be getting back from Deepgram.\n\n### Deepgram Audio Stream to Text\n\nWhen I started using Deepgram to transcribe audio streams, I was surprised that Deepgram was able to send back the text almost immediately, after each phrase or sentence rather than waiting until the socket closes and sending back the entire transcription.\n\nHow is it able to send a response back continuously, as the audio is streaming, and how is it able to send meaningful chunks, such as at the end of a sentence or a pause in speech? This is thanks to two of its features: **Endpointing** and **Interim Results**.\n\nTo put it very simply, **Endpointing** is how Deepgram uses pauses in speech to process that speech into meaningful text chunks. It can hear longer silences in speech and use them to identify finished thoughts, i.e., phrases or sentences.\n\n**Interim results** is Deepgram analyzing speech as accurately and as quickly as possible with the little bits of info it gets on the fly; then, after it gets more data to work with, it corrects the transcription. That is why as one or two words come back, one might be wrong, but then when the sentence comes back, the whole thing is more accurate.\n\nIn my case, I\'m using the **Interim Results** property `is_final` to identify a complete voice command. When `is_final` is `true`, it means I\'m dealing with a full statement or a complete command such as "Add walk the dog to the list!" The `is_final` property breaks the transcript up at the end of a fully-processed statement:\n\n```js\n// in useDeepgramSocket.js:\nconst transcript = received.channel.alternatives[0].transcript\nif (transcript && received.is_final) {\n  DG_transcript.value = transcript + \'\'\n}\n```\n\nThis is a pretty cool feature because it means that a user can speak a command, such as "Add walk the dog to the list", and Deepgram can identify that it is the end of the command based on the flow of the speech. It will send me that sentence back to deal with in text form, and then I can use logic to dig in and find the specific command word, such as *add* or *delete*. Nice!\n\n<Panel type="info" title="Additional Resources">\n<ul>\n<li><a href="https://developers.deepgram.com/documentation/guides/understand-endpointing-interim-results/">Understanding Endpointing and Interim Results When Transcribing Live Streaming Audio</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/interim-results/">Interim Results</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/endpointing/"> Endpointing</a></li>\n</ul>\n</Panel>\n\n## Add To-Do Item With Voice-Control\n\nNow I\'ll write logic to analyze a voice command for the words "add to do", and if the command has those words (such as in the command "ADD TO DO walk the dog!"), the item will be added to the `todoList` array in the Pinia store.\n\nI also want to keep track of the number of commands given, so if Deepgram doesn\'t transcribe the command correctly due to problems interpreting the speech, I can check that count value against the number of items in the store `todoList` array, and report back to the user that the command was misunderstood and didn\'t make it in.\n\nHere is pseudo-code for what I need to write:\n\n```js\nfunction addTodo(command) {\n  // Create array of Regular Expression words to identify in the text string, such as [/^add to do/, /^ad to do/]\n  // Loop through regex values using .find()\n  // Turn the command into a standardized string - lower case, no final punctuation, trim whitespace\n  // Check if the command string contains the regex value using .test\n  // If so, remove the command phrase ADD TO DO to create new string that is just the todo item\n  // add todo to the Pinia store todo-list\n  // reset the count of uttered commands to match the length of the todo list array in the store\n}\nwatch(utterance, () => {\n  // watch for a command and if there is one, add it to the list\n})\n```\n\nPHEW! That is a lot of logic to get through. Best to take it one step at a time.\n\n### Create a Set of Regular Expressions\n\nI want to analyze the command string such as "Add to do walk the dog" for the three words "add to do". I will:\n\n*   Create a regular expression by enclosing it within slashes `/-/`\n*   Use the character `^` before the command phrase to identify that the phrase should be at the beginning of the string\n\nSo the regular expression for "add to do" that I will use is `/^add to do/`.\n\nHowever, since there is the possibility that Deepgram could transcribe this with \'ad\' instead of \'add\' (seems unlikely, but I want to be prepared), I\'ll also use `/^ad to do/`. In fact, I\'ll match to anything that could be a homophone.\n\nI need an array to create a set of all the options. (The reason I don\'t include something like `/^add two do/` is because it\'s not grammatically correct, and Deepgram is smart enough to know not to transcribe things as ungrammatical.)\n\n```js\nconst addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n```\n\n### Use the Array Method .find()\n\nI\'ll use the array method `.find` to loop through the array of regular expressions. It will search for the first item in the array that matches. If it finds one, there\'s no need to continue looping through since all we need is one match:\n\n```js\nfunction addTodo(command) {\n  const addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n  // loop through array to find first match:\n  addRegEx.find((reg) => {})\n}\n```\n\n### Write a Method to Standardize the Command String\n\nI want the command to be lowercase, to not include periods, commas, question marks, or quotation marks, and to not have extra whitespace at the end. (I could entirely turn off punctuation in Deepgram, but I like the transcript to include apostrophes in words such as "she\'s.")\n\nI\'ll create a function to take the command string and standardize it:\n\n```js\nfunction standardizeUtterance(command) {\n  const punctuation = /[.,?"]+/g\n  const change = command.toLowerCase().replace(punctuation, \'\').trim()\n  return change\n}\n```\n\nNotice that I used another regular expression, `/[.,?"]+/g`. This paired with the `replace` method will search for any of those punctuation marks throughout the entire string and replace them with`""` (which is nothing).\n\nThen I use this `standardizeUtterance` function inside the `addTodo` function. I\'ll add it before the loop so that it doesn\'t run for every loop:\n\n```js\nfunction addTodo(command) {\n  const addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n  // clean up utterance\n  const item = standardizeUtterance(command)\n  addRegEx.find((reg) => {\n    // use item for more logic\n  })\n}\n```\n\n### Test that the Item Matches the Regular Expression\n\nI\'ll write an `if` statement to say that if the string starts with the regular expression command such as `/^add to do/`, then do something else (the something else will involve adding it to the to-do list).\n\nI use the method `.test`, which is a javascript method used to match a regular expression with a string, returning `true` or `false` depending on if there is a match or not.\n\n```js\n// inside addTodo method:\naddRegEx.find((reg) => {\n  if (reg.test(item)) {\n  }\n})\n```\n\n### Remove the Command Phrase from the String\n\nIf there is a match, I will want to add the string to the to-do list. But right now the whole string also contains the command phrase "add to do" as in the sentence "Add to do walk the dog." I do not want "add to do" to be part of the string that goes into the to-do list array in the store.\n\nI\'ll write a function that takes the string and removes the phrase. I\'ll need to give it both the full command, and the regular expression (which is the command phrase). The method `replace` will search for the phrase and replace it with `""`, i.e., nothing.\n\n```js\nfunction removeCommandPhrase(command, reg) {\n  const change = command.replace(reg, \'\').trim(\'\')\n  return change\n}\n```\n\nThen I add it to `addTodo`:\n\n```js\n// inside addTodo method:\n\naddRegEx.find((reg) => {\n  if (reg.test(item)) {\n    // remove command phrase ADD TO DO\n    const todo = removeCommandPhrase(item, reg);\n    }\n  });\n}\n```\n\n### Add the To-Do Item to the To-Do List Array\n\nI\'m almost done! This is the most important step. I can add the to-do item to the list in the store.\n\nI have to go back up to the start of the `script` and import the store. I also need to run the store function and set it to a variable that I can use (I\'ll set it to `store`)\n\n```js\n<script>\nimport { ref, watch } from "vue";\nimport useDeepgramSocket from "@/composables/useDeepgramSocket";\n// import store:\nimport { useTodoListStore } from "../store/useTodoListStore";\n\nexport default {\n  setup() {\n    const { DG_socket, DG_transcript, openStream, closeStream } =\n      useDeepgramSocket();\n     // run function and set to variable:\n    const store = useTodoListStore();\n    ...\n    function addTodo(command) {\n    ...\n    });\n}\n```\n\nThen inside `addTodo` I will use the `store.addTodo` function that is already in the store as an action (I created it in the first post in this series.)\n\n```js\n// inside addTodo method:\n\naddRegEx.find((reg) => {\n  if (reg.test(item)) {\n    // remove command phrase ADD TO DO\n    const todo = removeCommandPhrase(item, reg)\n\n    // add to store\n    store.addTodo(todo)\n  }\n})\n```\n\nNow the logic is there to add the item to the to-do list. I just need to do one more thing to make it show up on the screen.\n\n### Watch For a Command, Add it To The List\n\nRight now, the `addTodo` function with all the logic to add an item to the list never runs. I need to make it run somehow.\n\nOriginally, I set up Deepgram to turn on when the button is clicked. When the logic runs to create the WebSocket connection to Deepgram, I also get a value from it that I defined as `DG_transcript`. This value holds the transcript string that comes back after a user says something such as "Add to do walk the dog".\n\nI want to trigger `addTodo` to run **every time a new command is said**. And I know I\'ll be using that transcript for logic to keep track of how many times a command has been said (I\'ll go over that in the next section). So I\'m going to create a ref in this `TodoSpeech.vue` component called `utterance`, which will stay in sync with the `DG_transcript` from the `useDeepgramSocket.js` composable.\n\n```js\n// inside setup() function in TodoSpeech.vue\nconst { DG_socket, DG_transcript, openStream, closeStream } =\n  useDeepgramSocket()\n// create ref\nlet utterance = ref(DG_transcript)\n```\n\nNow the `utterance` ref is in sync with the transcript that comes from Deepgram. I can watch that `utterance` ref for changes, and if there is a change, the `addTodo` function will run.\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    addTodo(utterance.value)\n  }\n})\n```\n\nNow when I use the voice-control feature to add an item to the list, I see it show up on the screen. Woo-hoo!\n\n## Dealing with Misunderstood Commands\n\nAutomatic Speech Recognition technology has gotten really good, but there can still be mistakes. People might mumble or slur some of the words, or the garbage truck could be making a lot of noise in the background. Deepgram\'s ASR technology can handle a lot, but I have to expect that sometimes it will mishear something.\n\nWhat if I say "Add to do walk the dog", but Deepgram mishears it as "And to do walk the dog"? I want to be ready for that and for any other situation. What if the user forgets to add the command and just says "Walk the dog!"\n\nI\'m going to program my app to show a message to the user when this happens. It will display "I didn\'t catch that" when it doesn\'t hear a match to the command phrase.\n\nThe logic for this will depend on **counting how many times a command has been spoken**. If the speaker says one thing, and it gets added to the list, then the count should be one. But if the speaker says another thing after that, and it doesn\'t get added to the list, then the count is at two, but the list is at one. So there was a misunderstanding.\n\nHere is the logic that will run:\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\nIf a command is given, the count is increased by one. Then the`addTodo` function runs.\n\nInside `addTodo`, I check for a match. If there is a match, it means that an item is added to the list. After it is added to the list, I will reset the count to match the number of items in the list:\n\n```js\nfunction addTodo(command) {\n  const addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n  // clean up utterance\n  const item = standardizeUtterance(command)\n  addRegEx.find((reg) => {\n    if (reg.test(item)) {\n      // remove command phrase ADD TO DO\n      const todo = removeCommandPhrase(item, reg)\n      // add to store\n      store.addTodo(todo)\n      // reset count\n      count.value = store.todoList.length\n    }\n  })\n}\n```\n\nHowever, in the `if` statement above, I test for a match. If it does NOT find a match, none of that logic inside of it runs. So that would result in the count having increased, but the number of items in the to-do list not having increased.\n\nIn that case, I need to write logic to notice that discrepancy and alert the user:\n\n```js\nfunction alertMisunderstood() {\n  // if count doesn\'t equal todo list length, the command was misunderstood\n  if (count.value !== store.todoList.length) {\n    deepgramStatus.value = "I didn\'t catch that"\n  }\n}\n```\n\nI don\'t want the phrase "I didn\'t catch that" to remain on the screen forever. I\'ll have it disappear after a second and return to "Listening":\n\n```js\nfunction alertMisunderstood() {\n  // if count doesn\'t equal todo list length, the command was misunderstood\n  if (count.value !== store.todoList.length) {\n    deepgramStatus.value = "I didn\'t catch that"\n    setTimeout(() => {\n      deepgramStatus.value = \'Listening\'\n    }, 1000)\n  }\n}\n```\n\nNow, everything in the watcher is set up to make sure that when a user gives a command, it is either added to the to-do list, or reported back with a message to the user that the command was misunderstood.\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\n## Delete To-Do Item With Voice-Control\n\nThe hard part of this is done. I walked through the step-by-step logic to analyze voice-control command strings. Now that I want to delete an item, I can use the same logic.\n\nI\'ll write out the pseudo-code and supply my logic. I won\'t go through it step-by-step again since the only thing that will be different is writing the step **to remove an item from the store to-do list** instead of add an item.\n\nAnyone following along with this post and building the voice-control feature could now take some time to write a `deleteTodo` function. I recommend copying the pseudo-code below (the commented-out steps) and then writing each step of the logic.\n\n### Pseudo-Code:\n\n```js\nfunction deleteTodo(command) {\n  // Create an array of Regular Expression words to identify in the text, such as [/^delete/];\n  // Loop through regex values using .find\n  // Turn the command into a standardized string - lower case, no final punctuation, trim whitespace\n  // Check if the command string contains the regex value using .test()\n  // If so, remove the command phrase DELETE to create new string that is just the todo item\n  // Loop through store to-do list and for each item, check if that item matches the new string that is just the todo item\n  // if item in store todo list matches, delete from store to-do list\n  // reset the count of uttered commands to match the length of the todo list array in the store\n}\n\nwatch(utterance, () => {\n  // watch for a command to run delete logic\n})\n```\n\nHere is the code I wrote for this voice-controlled delete logic:\n\n```js\nfunction deleteTodo(command) {\n  const deleteRegEx = [/^delete/]\n  // clean up utterance\n  const item = standardizeUtterance(command)\n  deleteRegEx.find((reg) => {\n    if (reg.test(item)) {\n      // remove command phrase DELETE\n      const todo = removeCommandPhrase(item, reg)\n      store.todoList.forEach((storeTodo) => {\n        // if item in store todo list matches this utterance,\n        if (storeTodo.item === todo) {\n          // delete from store\n          store.deleteTodo(storeTodo.id)\n          // reset count\n          count.value = store.todoList.length\n        }\n      })\n    }\n  })\n}\n```\n\nAnd in the watcher:\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    deleteTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\n## Check-Off To-Do Item With Voice-Control\n\nThe logic to check off an item on the list is exactly the same as the logic to delete an item, except instead of calling `store.deleteTodo(storeTodo.id)`, I will call `store.toggleCompleted(storeTodo.id)`.\n\nHere is the logic to check-off an item with voice-control:\n\n```js\nfunction checkOffTodo(command) {\n  const checkOffRegEx = [/^check off/]\n  const item = standardizeUtterance(command)\n  checkOffRegEx.find((reg) => {\n    if (reg.test(item)) {\n      const todo = removeCommandPhrase(item, reg)\n      store.todoList.forEach((storeTodo) => {\n        if (storeTodo.item === todo) {\n          // toggle completed in store:\n          store.toggleCompleted(storeTodo.id)\n          count.value = store.todoList.length\n        }\n      })\n    }\n  })\n}\n```\n\nAnd the watcher:\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    deleteTodo(utterance.value)\n    checkOffTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\n## Conclusion\n\nThat concludes this post on how to add voice-control to a Vue 3 to-do list app. It was well worth the trouble to turn a classic to-do list project into a more exciting voice-based app that uses Deepgram\'s speech-to-text API.\n\nFeel free to reach out with questions on [Twitter](https://twitter.com/sandra_rodgers_). Happy coding!\n\n        ', "html": '<p>Recently I wrote about a project I did to help me learn Pinia, Vue 3\u2019s new official state management system. I built a basic to-do list app:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651517752/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/todo-list-example1.jpg" alt="Example to-do list app"></p>\n<p>It dawned on me that a fun way to jazz up this project would be to use Deepgram to make the app <strong>voice-powered</strong> so that a user can <strong>speak</strong> commands to add, delete, or check-off items on the list.</p>\n<p>I\u2019m inspired by my colleague Bekah\u2019s series about <a href="https://blog.deepgram.com/freecodecamp-quote-generator-upgrade/">updating portfolio projects</a>. A voice-based to-do list app would be a lot more interesting than a regular to-do list app!</p>\n<h2 id="project-overview">Project Overview</h2>\n<Panel type="info" title="Build a To-Do List App With Vue 3, Pinia, and Deepgram (SERIES)"><ol><li><a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/" target="_blank">Build a To-do List App with Pinia and Vue 3</a></li>\n<li><a href="https://blog.deepgram.com/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/" target="_blank"> Build a Voice Controlled To-Do List App with Deepgram and Vue 3</a></li></ol></Panel>\n<p>The project I originally did can be found in this <a href="https://github.com/deepgram-devs/todo-pinia">repo</a>, and the accompanying blog post is <a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/">here</a>. Check it out to build the standard to-do list project with Vue 3 and Pinia.</p>\n<p>In this iteration of the project, I\u2019ll continue to use <a href="https://pinia.vuejs.org/">Pinia</a> to manage global state, but I\u2019ll add Deepgram so I can use Deepgram\u2019s speech-to-text API to help me power the voice-control feature. If you want to build this voice-control feature along with me, I\u2019ve created a starting branch <a href="https://github.com/deepgram-devs/todo-pinia-deepgram/tree/starter-branch">here</a>.</p>\n<h3 id="deepgram-live-streaming-logic">Deepgram Live Streaming Logic</h3>\n<p>There are several articles on Deepgram Docs about how to use Deepgram in Javascript to convert an audio stream of speech into text, including one I wrote about how to use it with Vue 3. I won\u2019t go over in detail here how I built Vue composables to integrate Deepgram\u2019s speech-to-text API. Use these resources or take a look at my repo (in the <a href="https://github.com/deepgram-devs/todo-pinia-deepgram/tree/main/src/composables">composables folder</a>) to learn how I did this using Vue 3 and the Deepgram Node SDK:</p>\n<Panel type="info" title="Additional Resources"><ul><li><a href="https://blog.deepgram.com/asynchronous-logic-to-write-a-vue-3-and-deepgram-captions-component/">Asynchronous Logic to Write a Vue 3 and Deepgram Captions Component</a> by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li>\n<li><a href="https://blog.deepgram.com/live-transcription-mic-browser/">Get Live Speech Transcriptions In Your Browser</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n<li><a href="https://blog.deepgram.com/protecting-api-key/">Browser Live Transcription - Protecting Your API Key</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li></ul></Panel>\n<h3 id="focus-voice-control-feature">Focus: Voice-Control Feature</h3>\n<p>For today\u2019s project, I will focus on dealing with the transcript of text that I get back from Deepgram, analyzing it for speech commands to add, delete, and check off items in the to-do list. This logic will all be part of a voice-control feature.</p>\n<h2 id="create-the-component-and-connect-deepgram">Create the Component and Connect Deepgram</h2>\n<p>The voice-control feature that I build today will be one component with two main elements:</p>\n<ol>\n<li>a <code is:raw>button</code> that, when clicked, <strong>turns on or off voice-control mode</strong> (i.e., toggles the connection to Deepgram)</li>\n<li>a <code is:raw>div</code> that contains text which identifies the status of whether Deepgram is <strong>connected and listening</strong>, if it <strong>misheard what was said</strong>, or if it is <strong>not connected</strong>.</li>\n</ol>\n<p>Here\u2019s a minimally styled version of this project that highlights the component I\u2019ll be building today:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651517754/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/TodoSpeech.png" alt="To-do list app highlighting component"></p>\n<p>In the components folder with the other Todo components, I\u2019ll create a component called <code is:raw>TodoSpeech.vue</code>. It will be a child component of <code is:raw>TodoApp.vue</code>.</p>\n<p>In <code is:raw>TodoSpeech.vue</code>, I\u2019ll start by adding the button element and status div to the template. I\u2019ll use a speech bubble emoji on the button, and I\u2019ll create an event listener that I plan to program to toggle the Deepgram connection when the button is clicked.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- in template: --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;toggleListen()&quot;</span><span style="color: #C9D1D9">&gt;\u{1F4AC}&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;{{ deepgramStatus }}&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>I\u2019ll also create a <code is:raw>deepgramStatus</code> ref, which I\u2019ll program to update when Deepgram is connected and ready to receive audio data. The initial value will report that Deepgram is not connected:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in script:</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Deepgram Not Connected&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>I\u2019ll connect to Deepgram using the composable <code is:raw>useDeepgramSocket</code> (already built in a previous post), which I import in the script. I also run the composable in the setup function so that it runs at the beginning of the component lifecycle. I destructure four properties off of the composable: <code is:raw>DG_socket</code>, <code is:raw>DG_transcript</code>, <code is:raw>openStream</code>, <code is:raw>closeStream</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import useDeepgramSocket from &quot;@/composables/useDeepgramSocket&quot;;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    let deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Deepgram Not Connected&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { deepgramStatus };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The <code is:raw>openStream</code> and <code is:raw>closeStream</code> methods that I destructured off of the <code is:raw>useDeepgramSocket</code> composable will toggle on and off when the button is clicked and <code is:raw>toggleListen</code> runs. Notice that I created the <code is:raw>isListening</code> ref to update the toggle status:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> isListening </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">toggleListen</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">isListening.value) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">openStream</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">closeStream</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>I\u2019ll use a watcher to watch the Deepgram socket\u2019s status in the composable. That way, the <code is:raw>div</code> in the template will update when I click the button and Deepgram is connecting, connected, or not connected:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(DG_socket, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connecting&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connecting&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Not Connected&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Voice Controls Off&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Closing connection...&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Closing connection...&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Listening&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Here is the entire component now. I should be able to click the button and see the status change to show the status of the Deepgram connection:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;toggleListen()&quot;&gt;\u{1F4AC}&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramStatus</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/template&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA198">&lt;script&gt;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref, watch </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;vue&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useDeepgramSocket</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;@/composables/useDeepgramSocket&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">export</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    let deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Deepgram Not Connected&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    let isListening </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">toggleListen</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">isListening.value) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">openStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">closeStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(DG_socket, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Connecting&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Connecting&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Not Connected&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Voice Controls Off&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Closing connection...&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Closing connection...&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Listening&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { deepgramStatus, toggleListen };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #FFA198">,</span></span>\n<span class="line"><span style="color: #FFA198">};</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/script&gt;</span></span></code></pre>\n<h2 id="analyze-deepgram-response-for-voice-commands">Analyze Deepgram Response for Voice Commands</h2>\n<p>The logic to add, delete, or check-off an item from the list will be based on what the speaker says. I need to program this application to listen for commands such as \u201Cadd!\u201D or \u201Cdelete!\u201C.</p>\n<p>To do that, I will need to understand the form of the text transcript I\u2019ll be getting back from Deepgram.</p>\n<h3 id="deepgram-audio-stream-to-text">Deepgram Audio Stream to Text</h3>\n<p>When I started using Deepgram to transcribe audio streams, I was surprised that Deepgram was able to send back the text almost immediately, after each phrase or sentence rather than waiting until the socket closes and sending back the entire transcription.</p>\n<p>How is it able to send a response back continuously, as the audio is streaming, and how is it able to send meaningful chunks, such as at the end of a sentence or a pause in speech? This is thanks to two of its features: <strong>Endpointing</strong> and <strong>Interim Results</strong>.</p>\n<p>To put it very simply, <strong>Endpointing</strong> is how Deepgram uses pauses in speech to process that speech into meaningful text chunks. It can hear longer silences in speech and use them to identify finished thoughts, i.e., phrases or sentences.</p>\n<p><strong>Interim results</strong> is Deepgram analyzing speech as accurately and as quickly as possible with the little bits of info it gets on the fly; then, after it gets more data to work with, it corrects the transcription. That is why as one or two words come back, one might be wrong, but then when the sentence comes back, the whole thing is more accurate.</p>\n<p>In my case, I\u2019m using the <strong>Interim Results</strong> property <code is:raw>is_final</code> to identify a complete voice command. When <code is:raw>is_final</code> is <code is:raw>true</code>, it means I\u2019m dealing with a full statement or a complete command such as \u201CAdd walk the dog to the list!\u201D The <code is:raw>is_final</code> property breaks the transcript up at the end of a fully-processed statement:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in useDeepgramSocket.js:</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  DG_transcript.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This is a pretty cool feature because it means that a user can speak a command, such as \u201CAdd walk the dog to the list\u201D, and Deepgram can identify that it is the end of the command based on the flow of the speech. It will send me that sentence back to deal with in text form, and then I can use logic to dig in and find the specific command word, such as <em>add</em> or <em>delete</em>. Nice!</p>\n<Panel type="info" title="Additional Resources"><ul><li><a href="https://developers.deepgram.com/documentation/guides/understand-endpointing-interim-results/">Understanding Endpointing and Interim Results When Transcribing Live Streaming Audio</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/interim-results/">Interim Results</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/endpointing/"> Endpointing</a></li></ul></Panel>\n<h2 id="add-to-do-item-with-voice-control">Add To-Do Item With Voice-Control</h2>\n<p>Now I\u2019ll write logic to analyze a voice command for the words \u201Cadd to do\u201D, and if the command has those words (such as in the command \u201CADD TO DO walk the dog!\u201D), the item will be added to the <code is:raw>todoList</code> array in the Pinia store.</p>\n<p>I also want to keep track of the number of commands given, so if Deepgram doesn\u2019t transcribe the command correctly due to problems interpreting the speech, I can check that count value against the number of items in the store <code is:raw>todoList</code> array, and report back to the user that the command was misunderstood and didn\u2019t make it in.</p>\n<p>Here is pseudo-code for what I need to write:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create array of Regular Expression words to identify in the text string, such as [/^add to do/, /^ad to do/]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through regex values using .find()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Turn the command into a standardized string - lower case, no final punctuation, trim whitespace</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Check if the command string contains the regex value using .test</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// If so, remove the command phrase ADD TO DO to create new string that is just the todo item</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// add todo to the Pinia store todo-list</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// reset the count of uttered commands to match the length of the todo list array in the store</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// watch for a command and if there is one, add it to the list</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>PHEW! That is a lot of logic to get through. Best to take it one step at a time.</p>\n<h3 id="create-a-set-of-regular-expressions">Create a Set of Regular Expressions</h3>\n<p>I want to analyze the command string such as \u201CAdd to do walk the dog\u201D for the three words \u201Cadd to do\u201D. I will:</p>\n<ul>\n<li>Create a regular expression by enclosing it within slashes <code is:raw>/-/</code></li>\n<li>Use the character <code is:raw>^</code> before the command phrase to identify that the phrase should be at the beginning of the string</li>\n</ul>\n<p>So the regular expression for \u201Cadd to do\u201D that I will use is <code is:raw>/^add to do/</code>.</p>\n<p>However, since there is the possibility that Deepgram could transcribe this with \u2018ad\u2019 instead of \u2018add\u2019 (seems unlikely, but I want to be prepared), I\u2019ll also use <code is:raw>/^ad to do/</code>. In fact, I\u2019ll match to anything that could be a homophone.</p>\n<p>I need an array to create a set of all the options. (The reason I don\u2019t include something like <code is:raw>/^add two do/</code> is because it\u2019s not grammatically correct, and Deepgram is smart enough to know not to transcribe things as ungrammatical.)</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span></code></pre>\n<h3 id="use-the-array-method-find">Use the Array Method .find()</h3>\n<p>I\u2019ll use the array method <code is:raw>.find</code> to loop through the array of regular expressions. It will search for the first item in the array that matches. If it finds one, there\u2019s no need to continue looping through since all we need is one match:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// loop through array to find first match:</span></span>\n<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {})</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="write-a-method-to-standardize-the-command-string">Write a Method to Standardize the Command String</h3>\n<p>I want the command to be lowercase, to not include periods, commas, question marks, or quotation marks, and to not have extra whitespace at the end. (I could entirely turn off punctuation in Deepgram, but I like the transcript to include apostrophes in words such as \u201Cshe\u2019s.\u201C)</p>\n<p>I\u2019ll create a function to take the command string and standardize it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">punctuation</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF"> /</span><span style="color: #79C0FF">[.,?&quot;]</span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">g</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">change</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> command.</span><span style="color: #D2A8FF">toLowerCase</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(punctuation, </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> change</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Notice that I used another regular expression, <code is:raw>/[.,?"]+/g</code>. This paired with the <code is:raw>replace</code> method will search for any of those punctuation marks throughout the entire string and replace them with<code is:raw>""</code> (which is nothing).</p>\n<p>Then I use this <code is:raw>standardizeUtterance</code> function inside the <code is:raw>addTodo</code> function. I\u2019ll add it before the loop so that it doesn\u2019t run for every loop:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// use item for more logic</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="test-that-the-item-matches-the-regular-expression">Test that the Item Matches the Regular Expression</h3>\n<p>I\u2019ll write an <code is:raw>if</code> statement to say that if the string starts with the regular expression command such as <code is:raw>/^add to do/</code>, then do something else (the something else will involve adding it to the to-do list).</p>\n<p>I use the method <code is:raw>.test</code>, which is a javascript method used to match a regular expression with a string, returning <code is:raw>true</code> or <code is:raw>false</code> depending on if there is a match or not.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>\n<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h3 id="remove-the-command-phrase-from-the-string">Remove the Command Phrase from the String</h3>\n<p>If there is a match, I will want to add the string to the to-do list. But right now the whole string also contains the command phrase \u201Cadd to do\u201D as in the sentence \u201CAdd to do walk the dog.\u201D I do not want \u201Cadd to do\u201D to be part of the string that goes into the to-do list array in the store.</p>\n<p>I\u2019ll write a function that takes the string and removes the phrase. I\u2019ll need to give it both the full command, and the regular expression (which is the command phrase). The method <code is:raw>replace</code> will search for the phrase and replace it with <code is:raw>""</code>, i.e., nothing.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">change</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> command.</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(reg, </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> change</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then I add it to <code is:raw>addTodo</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg);</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="add-the-to-do-item-to-the-to-do-list-array">Add the To-Do Item to the To-Do List Array</h3>\n<p>I\u2019m almost done! This is the most important step. I can add the to-do item to the list in the store.</p>\n<p>I have to go back up to the start of the <code is:raw>script</code> and import the store. I also need to run the store function and set it to a variable that I can use (I\u2019ll set it to <code is:raw>store</code>)</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref, watch </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import useDeepgramSocket from &quot;@/composables/useDeepgramSocket&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">// import store:</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #8B949E">// run function and set to variable:</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"><span style="color: #FF7B72">}</span></span></code></pre>\n<p>Then inside <code is:raw>addTodo</code> I will use the <code is:raw>store.addTodo</code> function that is already in the store as an action (I created it in the first post in this series.)</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// add to store</span></span>\n<span class="line"><span style="color: #C9D1D9">    store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(todo)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Now the logic is there to add the item to the to-do list. I just need to do one more thing to make it show up on the screen.</p>\n<h3 id="watch-for-a-command-add-it-to-the-list">Watch For a Command, Add it To The List</h3>\n<p>Right now, the <code is:raw>addTodo</code> function with all the logic to add an item to the list never runs. I need to make it run somehow.</p>\n<p>Originally, I set up Deepgram to turn on when the button is clicked. When the logic runs to create the WebSocket connection to Deepgram, I also get a value from it that I defined as <code is:raw>DG_transcript</code>. This value holds the transcript string that comes back after a user says something such as \u201CAdd to do walk the dog\u201D.</p>\n<p>I want to trigger <code is:raw>addTodo</code> to run <strong>every time a new command is said</strong>. And I know I\u2019ll be using that transcript for logic to keep track of how many times a command has been said (I\u2019ll go over that in the next section). So I\u2019m going to create a ref in this <code is:raw>TodoSpeech.vue</code> component called <code is:raw>utterance</code>, which will stay in sync with the <code is:raw>DG_transcript</code> from the <code is:raw>useDeepgramSocket.js</code> composable.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside setup() function in TodoSpeech.vue</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">DG_socket</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">openStream</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">closeStream</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #8B949E">// create ref</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(DG_transcript)</span></span></code></pre>\n<p>Now the <code is:raw>utterance</code> ref is in sync with the transcript that comes from Deepgram. I can watch that <code is:raw>utterance</code> ref for changes, and if there is a change, the <code is:raw>addTodo</code> function will run.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Now when I use the voice-control feature to add an item to the list, I see it show up on the screen. Woo-hoo!</p>\n<h2 id="dealing-with-misunderstood-commands">Dealing with Misunderstood Commands</h2>\n<p>Automatic Speech Recognition technology has gotten really good, but there can still be mistakes. People might mumble or slur some of the words, or the garbage truck could be making a lot of noise in the background. Deepgram\u2019s ASR technology can handle a lot, but I have to expect that sometimes it will mishear something.</p>\n<p>What if I say \u201CAdd to do walk the dog\u201D, but Deepgram mishears it as \u201CAnd to do walk the dog\u201D? I want to be ready for that and for any other situation. What if the user forgets to add the command and just says \u201CWalk the dog!\u201D</p>\n<p>I\u2019m going to program my app to show a message to the user when this happens. It will display \u201CI didn\u2019t catch that\u201D when it doesn\u2019t hear a match to the command phrase.</p>\n<p>The logic for this will depend on <strong>counting how many times a command has been spoken</strong>. If the speaker says one thing, and it gets added to the list, then the count should be one. But if the speaker says another thing after that, and it doesn\u2019t get added to the list, then the count is at two, but the list is at one. So there was a misunderstanding.</p>\n<p>Here is the logic that will run:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>If a command is given, the count is increased by one. Then the<code is:raw>addTodo</code> function runs.</p>\n<p>Inside <code is:raw>addTodo</code>, I check for a match. If there is a match, it means that an item is added to the list. After it is added to the list, I will reset the count to match the number of items in the list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// add to store</span></span>\n<span class="line"><span style="color: #C9D1D9">      store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(todo)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// reset count</span></span>\n<span class="line"><span style="color: #C9D1D9">      count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>However, in the <code is:raw>if</code> statement above, I test for a match. If it does NOT find a match, none of that logic inside of it runs. So that would result in the count having increased, but the number of items in the to-do list not having increased.</p>\n<p>In that case, I need to write logic to notice that discrepancy and alert the user:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if count doesn&#39;t equal todo list length, the command was misunderstood</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (count.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;I didn&#39;t catch that&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>I don\u2019t want the phrase \u201CI didn\u2019t catch that\u201D to remain on the screen forever. I\u2019ll have it disappear after a second and return to \u201CListening\u201D:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if count doesn&#39;t equal todo list length, the command was misunderstood</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (count.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;I didn&#39;t catch that&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Listening&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now, everything in the watcher is set up to make sure that when a user gives a command, it is either added to the to-do list, or reported back with a message to the user that the command was misunderstood.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="delete-to-do-item-with-voice-control">Delete To-Do Item With Voice-Control</h2>\n<p>The hard part of this is done. I walked through the step-by-step logic to analyze voice-control command strings. Now that I want to delete an item, I can use the same logic.</p>\n<p>I\u2019ll write out the pseudo-code and supply my logic. I won\u2019t go through it step-by-step again since the only thing that will be different is writing the step <strong>to remove an item from the store to-do list</strong> instead of add an item.</p>\n<p>Anyone following along with this post and building the voice-control feature could now take some time to write a <code is:raw>deleteTodo</code> function. I recommend copying the pseudo-code below (the commented-out steps) and then writing each step of the logic.</p>\n<h3 id="pseudo-code">Pseudo-Code:</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create an array of Regular Expression words to identify in the text, such as [/^delete/];</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through regex values using .find</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Turn the command into a standardized string - lower case, no final punctuation, trim whitespace</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Check if the command string contains the regex value using .test()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// If so, remove the command phrase DELETE to create new string that is just the todo item</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through store to-do list and for each item, check if that item matches the new string that is just the todo item</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if item in store todo list matches, delete from store to-do list</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// reset the count of uttered commands to match the length of the todo list array in the store</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// watch for a command to run delete logic</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Here is the code I wrote for this voice-controlled delete logic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deleteRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">delete/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  deleteRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// remove command phrase DELETE</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"><span style="color: #C9D1D9">      store.todoList.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">storeTodo</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// if item in store todo list matches this utterance,</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (storeTodo.item </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// delete from store</span></span>\n<span class="line"><span style="color: #C9D1D9">          store.</span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(storeTodo.id)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// reset count</span></span>\n<span class="line"><span style="color: #C9D1D9">          count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>And in the watcher:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="check-off-to-do-item-with-voice-control">Check-Off To-Do Item With Voice-Control</h2>\n<p>The logic to check off an item on the list is exactly the same as the logic to delete an item, except instead of calling <code is:raw>store.deleteTodo(storeTodo.id)</code>, I will call <code is:raw>store.toggleCompleted(storeTodo.id)</code>.</p>\n<p>Here is the logic to check-off an item with voice-control:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkOffTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">checkOffRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">check off/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  checkOffRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"><span style="color: #C9D1D9">      store.todoList.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">storeTodo</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (storeTodo.item </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// toggle completed in store:</span></span>\n<span class="line"><span style="color: #C9D1D9">          store.</span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(storeTodo.id)</span></span>\n<span class="line"><span style="color: #C9D1D9">          count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>And the watcher:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">checkOffTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="conclusion">Conclusion</h2>\n<p>That concludes this post on how to add voice-control to a Vue 3 to-do list app. It was well worth the trouble to turn a classic to-do list project into a more exciting voice-based app that uses Deepgram\u2019s speech-to-text API.</p>\n<p>Feel free to reach out with questions on <a href="https://twitter.com/sandra_rodgers_">Twitter</a>. Happy coding!</p>' };
const frontmatter = { "title": "Project Upgrade: Voice Controlled To-Do List App with Deepgram and Vue 3", "description": "Using Vue 3 & Deepgram's Speech-to-Text API, update the classic to-do list project by adding voice controls!", "date": "2022-05-02T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1651517750/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/Build-Todo-list-w-Vue3-Pinia%402x.jpg", "authors": ["sandra-rodgers"], "category": "tutorial", "tags": ["vuejs", "pinia"], "seo": { "title": "Project Upgrade: Voice Controlled To-Do List App with Deepgram and Vue 3", "description": "Using Vue 3 & Deepgram's Speech-to-Text API, update the classic to-do list project by adding voice controls!" }, "shorturls": { "share": "https://dpgr.am/0b45872", "twitter": "https://dpgr.am/0456c9d", "linkedin": "https://dpgr.am/e8b79dc", "reddit": "https://dpgr.am/8689f6d", "facebook": "https://dpgr.am/a85e2b8" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454078/blog/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "project-overview", "text": "Project Overview" }, { "depth": 3, "slug": "deepgram-live-streaming-logic", "text": "Deepgram Live Streaming Logic" }, { "depth": 3, "slug": "focus-voice-control-feature", "text": "Focus: Voice-Control Feature" }, { "depth": 2, "slug": "create-the-component-and-connect-deepgram", "text": "Create the Component and Connect Deepgram" }, { "depth": 2, "slug": "analyze-deepgram-response-for-voice-commands", "text": "Analyze Deepgram Response for Voice Commands" }, { "depth": 3, "slug": "deepgram-audio-stream-to-text", "text": "Deepgram Audio Stream to Text" }, { "depth": 2, "slug": "add-to-do-item-with-voice-control", "text": "Add To-Do Item With Voice-Control" }, { "depth": 3, "slug": "create-a-set-of-regular-expressions", "text": "Create a Set of Regular Expressions" }, { "depth": 3, "slug": "use-the-array-method-find", "text": "Use the Array Method .find()" }, { "depth": 3, "slug": "write-a-method-to-standardize-the-command-string", "text": "Write a Method to Standardize the Command String" }, { "depth": 3, "slug": "test-that-the-item-matches-the-regular-expression", "text": "Test that the Item Matches the Regular Expression" }, { "depth": 3, "slug": "remove-the-command-phrase-from-the-string", "text": "Remove the Command Phrase from the String" }, { "depth": 3, "slug": "add-the-to-do-item-to-the-to-do-list-array", "text": "Add the To-Do Item to the To-Do List Array" }, { "depth": 3, "slug": "watch-for-a-command-add-it-to-the-list", "text": "Watch For a Command, Add it To The List" }, { "depth": 2, "slug": "dealing-with-misunderstood-commands", "text": "Dealing with Misunderstood Commands" }, { "depth": 2, "slug": "delete-to-do-item-with-voice-control", "text": "Delete To-Do Item With Voice-Control" }, { "depth": 3, "slug": "pseudo-code", "text": "Pseudo-Code:" }, { "depth": 2, "slug": "check-off-to-do-item-with-voice-control", "text": "Check-Off To-Do Item With Voice-Control" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": '\nRecently I wrote about a project I did to help me learn Pinia, Vue 3\'s new official state management system. I built a basic to-do list app:\n\n![Example to-do list app](https://res.cloudinary.com/deepgram/image/upload/v1651517752/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/todo-list-example1.jpg)\n\nIt dawned on me that a fun way to jazz up this project would be to use Deepgram to make the app **voice-powered** so that a user can **speak** commands to add, delete, or check-off items on the list.\n\nI\'m inspired by my colleague Bekah\'s series about [updating portfolio projects](https://blog.deepgram.com/freecodecamp-quote-generator-upgrade/). A voice-based to-do list app would be a lot more interesting than a regular to-do list app!\n\n## Project Overview\n\n<Panel type="info" title="Build a To-Do List App With Vue 3, Pinia, and Deepgram (SERIES)">\n<ol>\n<li><a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/" target="_blank">Build a To-do List App with Pinia and Vue 3</a></li>\n<li><a href="https://blog.deepgram.com/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/" target="_blank"> Build a Voice Controlled To-Do List App with Deepgram and Vue 3</a></li>\n</ol>\n</Panel>\n\nThe project I originally did can be found in this [repo](https://github.com/deepgram-devs/todo-pinia), and the accompanying blog post is [here](https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/). Check it out to build the standard to-do list project with Vue 3 and Pinia.\n\nIn this iteration of the project, I\'ll continue to use [Pinia](https://pinia.vuejs.org/) to manage global state, but I\'ll add Deepgram so I can use Deepgram\'s speech-to-text API to help me power the voice-control feature. If you want to build this voice-control feature along with me, I\'ve created a starting branch [here](https://github.com/deepgram-devs/todo-pinia-deepgram/tree/starter-branch).\n\n### Deepgram Live Streaming Logic\n\nThere are several articles on Deepgram Docs about how to use Deepgram in Javascript to convert an audio stream of speech into text, including one I wrote about how to use it with Vue 3. I won\'t go over in detail here how I built Vue composables to integrate Deepgram\'s speech-to-text API. Use these resources or take a look at my repo (in the [composables folder](https://github.com/deepgram-devs/todo-pinia-deepgram/tree/main/src/composables)) to learn how I did this using Vue 3 and the Deepgram Node SDK:\n\n<Panel type="info" title="Additional Resources">\n<ul>\n<li><a href="https://blog.deepgram.com/asynchronous-logic-to-write-a-vue-3-and-deepgram-captions-component/">Asynchronous Logic to Write a Vue 3 and Deepgram Captions Component</a> by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li>\n<li><a href="https://blog.deepgram.com/live-transcription-mic-browser/">Get Live Speech Transcriptions In Your Browser</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n<li><a href="https://blog.deepgram.com/protecting-api-key/">Browser Live Transcription - Protecting Your API Key</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n</ul>\n\n</Panel>\n\n### Focus: Voice-Control Feature\n\nFor today\'s project, I will focus on dealing with the transcript of text that I get back from Deepgram, analyzing it for speech commands to add, delete, and check off items in the to-do list. This logic will all be part of a voice-control feature.\n\n## Create the Component and Connect Deepgram\n\nThe voice-control feature that I build today will be one component with two main elements:\n\n1.  a `button` that, when clicked, **turns on or off voice-control mode** (i.e., toggles the connection to Deepgram)\n2.  a `div` that contains text which identifies the status of whether Deepgram is **connected and listening**, if it **misheard what was said**, or if it is **not connected**.\n\nHere\'s a minimally styled version of this project that highlights the component I\'ll be building today:\n\n![To-do list app highlighting component](https://res.cloudinary.com/deepgram/image/upload/v1651517754/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/TodoSpeech.png)\n\nIn the components folder with the other Todo components, I\'ll create a component called `TodoSpeech.vue`. It will be a child component of `TodoApp.vue`.\n\nIn `TodoSpeech.vue`, I\'ll start by adding the button element and status div to the template. I\'ll use a speech bubble emoji on the button, and I\'ll create an event listener that I plan to program to toggle the Deepgram connection when the button is clicked.\n\n```html\n{/*<!-- in template: -->*/}\n<button @click="toggleListen()">\u{1F4AC}</button>\n<div>{{ deepgramStatus }}</div>\n```\n\nI\'ll also create a `deepgramStatus` ref, which I\'ll program to update when Deepgram is connected and ready to receive audio data. The initial value will report that Deepgram is not connected:\n\n```js\n// in script:\nlet deepgramStatus = ref(\'Deepgram Not Connected\')\n```\n\nI\'ll connect to Deepgram using the composable `useDeepgramSocket` (already built in a previous post), which I import in the script. I also run the composable in the setup function so that it runs at the beginning of the component lifecycle. I destructure four properties off of the composable: `DG_socket`, `DG_transcript`, `openStream`, `closeStream`.\n\n```js\n<script>\nimport { ref } from "vue";\nimport useDeepgramSocket from "@/composables/useDeepgramSocket";\n\nexport default {\n  setup() {\n    const { DG_socket, DG_transcript, openStream, closeStream } = useDeepgramSocket();\n    let deepgramStatus = ref("Deepgram Not Connected");\n\n    return { deepgramStatus };\n  },\n};\n<\/script>\n```\n\nThe `openStream` and `closeStream` methods that I destructured off of the `useDeepgramSocket` composable will toggle on and off when the button is clicked and `toggleListen` runs. Notice that I created the `isListening` ref to update the toggle status:\n\n```js\nlet isListening = ref(false)\n\nfunction toggleListen() {\n  if (!isListening.value) {\n    openStream()\n    isListening.value = true\n  } else {\n    closeStream()\n    isListening.value = false\n  }\n}\n```\n\nI\'ll use a watcher to watch the Deepgram socket\'s status in the composable. That way, the `div` in the template will update when I click the button and Deepgram is connecting, connected, or not connected:\n\n```js\nwatch(DG_socket, () => {\n  if (DG_socket.value === \'Connecting\') {\n    deepgramStatus.value = \'Connecting\'\n  } else if (DG_socket.value === \'Not Connected\') {\n    deepgramStatus.value = \'Voice Controls Off\'\n  } else if (DG_socket.value === \'Closing connection...\') {\n    deepgramStatus.value = \'Closing connection...\'\n  } else {\n    deepgramStatus.value = \'Listening\'\n  }\n})\n```\n\nHere is the entire component now. I should be able to click the button and see the status change to show the status of the Deepgram connection:\n\n```js\n<template>\n  <div>\n    <button @click="toggleListen()">\u{1F4AC}</button>\n    <div>{{ deepgramStatus }}</div>\n  </div>\n</template>\n\n<script>\nimport { ref, watch } from "vue";\nimport useDeepgramSocket from "@/composables/useDeepgramSocket";\n\nexport default {\n  setup() {\n    const { DG_socket, DG_transcript, openStream, closeStream } =\n      useDeepgramSocket();\n\n    let deepgramStatus = ref("Deepgram Not Connected");\n    let isListening = ref(false);\n\n    function toggleListen() {\n      if (!isListening.value) {\n        openStream();\n        isListening.value = true;\n      } else {\n        closeStream();\n        isListening.value = false;\n      }\n    }\n\n    watch(DG_socket, () => {\n      if (DG_socket.value === "Connecting") {\n        deepgramStatus.value = "Connecting";\n      } else if (DG_socket.value === "Not Connected") {\n        deepgramStatus.value = "Voice Controls Off";\n      } else if (DG_socket.value === "Closing connection...") {\n        deepgramStatus.value = "Closing connection...";\n      } else {\n        deepgramStatus.value = "Listening";\n      }\n    });\n\n    return { deepgramStatus, toggleListen };\n  },\n};\n<\/script>\n```\n\n## Analyze Deepgram Response for Voice Commands\n\nThe logic to add, delete, or check-off an item from the list will be based on what the speaker says. I need to program this application to listen for commands such as "add!" or "delete!".\n\nTo do that, I will need to understand the form of the text transcript I\'ll be getting back from Deepgram.\n\n### Deepgram Audio Stream to Text\n\nWhen I started using Deepgram to transcribe audio streams, I was surprised that Deepgram was able to send back the text almost immediately, after each phrase or sentence rather than waiting until the socket closes and sending back the entire transcription.\n\nHow is it able to send a response back continuously, as the audio is streaming, and how is it able to send meaningful chunks, such as at the end of a sentence or a pause in speech? This is thanks to two of its features: **Endpointing** and **Interim Results**.\n\nTo put it very simply, **Endpointing** is how Deepgram uses pauses in speech to process that speech into meaningful text chunks. It can hear longer silences in speech and use them to identify finished thoughts, i.e., phrases or sentences.\n\n**Interim results** is Deepgram analyzing speech as accurately and as quickly as possible with the little bits of info it gets on the fly; then, after it gets more data to work with, it corrects the transcription. That is why as one or two words come back, one might be wrong, but then when the sentence comes back, the whole thing is more accurate.\n\nIn my case, I\'m using the **Interim Results** property `is_final` to identify a complete voice command. When `is_final` is `true`, it means I\'m dealing with a full statement or a complete command such as "Add walk the dog to the list!" The `is_final` property breaks the transcript up at the end of a fully-processed statement:\n\n```js\n// in useDeepgramSocket.js:\nconst transcript = received.channel.alternatives[0].transcript\nif (transcript && received.is_final) {\n  DG_transcript.value = transcript + \'\'\n}\n```\n\nThis is a pretty cool feature because it means that a user can speak a command, such as "Add walk the dog to the list", and Deepgram can identify that it is the end of the command based on the flow of the speech. It will send me that sentence back to deal with in text form, and then I can use logic to dig in and find the specific command word, such as *add* or *delete*. Nice!\n\n<Panel type="info" title="Additional Resources">\n<ul>\n<li><a href="https://developers.deepgram.com/documentation/guides/understand-endpointing-interim-results/">Understanding Endpointing and Interim Results When Transcribing Live Streaming Audio</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/interim-results/">Interim Results</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/endpointing/"> Endpointing</a></li>\n</ul>\n</Panel>\n\n## Add To-Do Item With Voice-Control\n\nNow I\'ll write logic to analyze a voice command for the words "add to do", and if the command has those words (such as in the command "ADD TO DO walk the dog!"), the item will be added to the `todoList` array in the Pinia store.\n\nI also want to keep track of the number of commands given, so if Deepgram doesn\'t transcribe the command correctly due to problems interpreting the speech, I can check that count value against the number of items in the store `todoList` array, and report back to the user that the command was misunderstood and didn\'t make it in.\n\nHere is pseudo-code for what I need to write:\n\n```js\nfunction addTodo(command) {\n  // Create array of Regular Expression words to identify in the text string, such as [/^add to do/, /^ad to do/]\n  // Loop through regex values using .find()\n  // Turn the command into a standardized string - lower case, no final punctuation, trim whitespace\n  // Check if the command string contains the regex value using .test\n  // If so, remove the command phrase ADD TO DO to create new string that is just the todo item\n  // add todo to the Pinia store todo-list\n  // reset the count of uttered commands to match the length of the todo list array in the store\n}\nwatch(utterance, () => {\n  // watch for a command and if there is one, add it to the list\n})\n```\n\nPHEW! That is a lot of logic to get through. Best to take it one step at a time.\n\n### Create a Set of Regular Expressions\n\nI want to analyze the command string such as "Add to do walk the dog" for the three words "add to do". I will:\n\n*   Create a regular expression by enclosing it within slashes `/-/`\n*   Use the character `^` before the command phrase to identify that the phrase should be at the beginning of the string\n\nSo the regular expression for "add to do" that I will use is `/^add to do/`.\n\nHowever, since there is the possibility that Deepgram could transcribe this with \'ad\' instead of \'add\' (seems unlikely, but I want to be prepared), I\'ll also use `/^ad to do/`. In fact, I\'ll match to anything that could be a homophone.\n\nI need an array to create a set of all the options. (The reason I don\'t include something like `/^add two do/` is because it\'s not grammatically correct, and Deepgram is smart enough to know not to transcribe things as ungrammatical.)\n\n```js\nconst addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n```\n\n### Use the Array Method .find()\n\nI\'ll use the array method `.find` to loop through the array of regular expressions. It will search for the first item in the array that matches. If it finds one, there\'s no need to continue looping through since all we need is one match:\n\n```js\nfunction addTodo(command) {\n  const addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n  // loop through array to find first match:\n  addRegEx.find((reg) => {})\n}\n```\n\n### Write a Method to Standardize the Command String\n\nI want the command to be lowercase, to not include periods, commas, question marks, or quotation marks, and to not have extra whitespace at the end. (I could entirely turn off punctuation in Deepgram, but I like the transcript to include apostrophes in words such as "she\'s.")\n\nI\'ll create a function to take the command string and standardize it:\n\n```js\nfunction standardizeUtterance(command) {\n  const punctuation = /[.,?"]+/g\n  const change = command.toLowerCase().replace(punctuation, \'\').trim()\n  return change\n}\n```\n\nNotice that I used another regular expression, `/[.,?"]+/g`. This paired with the `replace` method will search for any of those punctuation marks throughout the entire string and replace them with`""` (which is nothing).\n\nThen I use this `standardizeUtterance` function inside the `addTodo` function. I\'ll add it before the loop so that it doesn\'t run for every loop:\n\n```js\nfunction addTodo(command) {\n  const addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n  // clean up utterance\n  const item = standardizeUtterance(command)\n  addRegEx.find((reg) => {\n    // use item for more logic\n  })\n}\n```\n\n### Test that the Item Matches the Regular Expression\n\nI\'ll write an `if` statement to say that if the string starts with the regular expression command such as `/^add to do/`, then do something else (the something else will involve adding it to the to-do list).\n\nI use the method `.test`, which is a javascript method used to match a regular expression with a string, returning `true` or `false` depending on if there is a match or not.\n\n```js\n// inside addTodo method:\naddRegEx.find((reg) => {\n  if (reg.test(item)) {\n  }\n})\n```\n\n### Remove the Command Phrase from the String\n\nIf there is a match, I will want to add the string to the to-do list. But right now the whole string also contains the command phrase "add to do" as in the sentence "Add to do walk the dog." I do not want "add to do" to be part of the string that goes into the to-do list array in the store.\n\nI\'ll write a function that takes the string and removes the phrase. I\'ll need to give it both the full command, and the regular expression (which is the command phrase). The method `replace` will search for the phrase and replace it with `""`, i.e., nothing.\n\n```js\nfunction removeCommandPhrase(command, reg) {\n  const change = command.replace(reg, \'\').trim(\'\')\n  return change\n}\n```\n\nThen I add it to `addTodo`:\n\n```js\n// inside addTodo method:\n\naddRegEx.find((reg) => {\n  if (reg.test(item)) {\n    // remove command phrase ADD TO DO\n    const todo = removeCommandPhrase(item, reg);\n    }\n  });\n}\n```\n\n### Add the To-Do Item to the To-Do List Array\n\nI\'m almost done! This is the most important step. I can add the to-do item to the list in the store.\n\nI have to go back up to the start of the `script` and import the store. I also need to run the store function and set it to a variable that I can use (I\'ll set it to `store`)\n\n```js\n<script>\nimport { ref, watch } from "vue";\nimport useDeepgramSocket from "@/composables/useDeepgramSocket";\n// import store:\nimport { useTodoListStore } from "../store/useTodoListStore";\n\nexport default {\n  setup() {\n    const { DG_socket, DG_transcript, openStream, closeStream } =\n      useDeepgramSocket();\n     // run function and set to variable:\n    const store = useTodoListStore();\n    ...\n    function addTodo(command) {\n    ...\n    });\n}\n```\n\nThen inside `addTodo` I will use the `store.addTodo` function that is already in the store as an action (I created it in the first post in this series.)\n\n```js\n// inside addTodo method:\n\naddRegEx.find((reg) => {\n  if (reg.test(item)) {\n    // remove command phrase ADD TO DO\n    const todo = removeCommandPhrase(item, reg)\n\n    // add to store\n    store.addTodo(todo)\n  }\n})\n```\n\nNow the logic is there to add the item to the to-do list. I just need to do one more thing to make it show up on the screen.\n\n### Watch For a Command, Add it To The List\n\nRight now, the `addTodo` function with all the logic to add an item to the list never runs. I need to make it run somehow.\n\nOriginally, I set up Deepgram to turn on when the button is clicked. When the logic runs to create the WebSocket connection to Deepgram, I also get a value from it that I defined as `DG_transcript`. This value holds the transcript string that comes back after a user says something such as "Add to do walk the dog".\n\nI want to trigger `addTodo` to run **every time a new command is said**. And I know I\'ll be using that transcript for logic to keep track of how many times a command has been said (I\'ll go over that in the next section). So I\'m going to create a ref in this `TodoSpeech.vue` component called `utterance`, which will stay in sync with the `DG_transcript` from the `useDeepgramSocket.js` composable.\n\n```js\n// inside setup() function in TodoSpeech.vue\nconst { DG_socket, DG_transcript, openStream, closeStream } =\n  useDeepgramSocket()\n// create ref\nlet utterance = ref(DG_transcript)\n```\n\nNow the `utterance` ref is in sync with the transcript that comes from Deepgram. I can watch that `utterance` ref for changes, and if there is a change, the `addTodo` function will run.\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    addTodo(utterance.value)\n  }\n})\n```\n\nNow when I use the voice-control feature to add an item to the list, I see it show up on the screen. Woo-hoo!\n\n## Dealing with Misunderstood Commands\n\nAutomatic Speech Recognition technology has gotten really good, but there can still be mistakes. People might mumble or slur some of the words, or the garbage truck could be making a lot of noise in the background. Deepgram\'s ASR technology can handle a lot, but I have to expect that sometimes it will mishear something.\n\nWhat if I say "Add to do walk the dog", but Deepgram mishears it as "And to do walk the dog"? I want to be ready for that and for any other situation. What if the user forgets to add the command and just says "Walk the dog!"\n\nI\'m going to program my app to show a message to the user when this happens. It will display "I didn\'t catch that" when it doesn\'t hear a match to the command phrase.\n\nThe logic for this will depend on **counting how many times a command has been spoken**. If the speaker says one thing, and it gets added to the list, then the count should be one. But if the speaker says another thing after that, and it doesn\'t get added to the list, then the count is at two, but the list is at one. So there was a misunderstanding.\n\nHere is the logic that will run:\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\nIf a command is given, the count is increased by one. Then the`addTodo` function runs.\n\nInside `addTodo`, I check for a match. If there is a match, it means that an item is added to the list. After it is added to the list, I will reset the count to match the number of items in the list:\n\n```js\nfunction addTodo(command) {\n  const addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n  // clean up utterance\n  const item = standardizeUtterance(command)\n  addRegEx.find((reg) => {\n    if (reg.test(item)) {\n      // remove command phrase ADD TO DO\n      const todo = removeCommandPhrase(item, reg)\n      // add to store\n      store.addTodo(todo)\n      // reset count\n      count.value = store.todoList.length\n    }\n  })\n}\n```\n\nHowever, in the `if` statement above, I test for a match. If it does NOT find a match, none of that logic inside of it runs. So that would result in the count having increased, but the number of items in the to-do list not having increased.\n\nIn that case, I need to write logic to notice that discrepancy and alert the user:\n\n```js\nfunction alertMisunderstood() {\n  // if count doesn\'t equal todo list length, the command was misunderstood\n  if (count.value !== store.todoList.length) {\n    deepgramStatus.value = "I didn\'t catch that"\n  }\n}\n```\n\nI don\'t want the phrase "I didn\'t catch that" to remain on the screen forever. I\'ll have it disappear after a second and return to "Listening":\n\n```js\nfunction alertMisunderstood() {\n  // if count doesn\'t equal todo list length, the command was misunderstood\n  if (count.value !== store.todoList.length) {\n    deepgramStatus.value = "I didn\'t catch that"\n    setTimeout(() => {\n      deepgramStatus.value = \'Listening\'\n    }, 1000)\n  }\n}\n```\n\nNow, everything in the watcher is set up to make sure that when a user gives a command, it is either added to the to-do list, or reported back with a message to the user that the command was misunderstood.\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\n## Delete To-Do Item With Voice-Control\n\nThe hard part of this is done. I walked through the step-by-step logic to analyze voice-control command strings. Now that I want to delete an item, I can use the same logic.\n\nI\'ll write out the pseudo-code and supply my logic. I won\'t go through it step-by-step again since the only thing that will be different is writing the step **to remove an item from the store to-do list** instead of add an item.\n\nAnyone following along with this post and building the voice-control feature could now take some time to write a `deleteTodo` function. I recommend copying the pseudo-code below (the commented-out steps) and then writing each step of the logic.\n\n### Pseudo-Code:\n\n```js\nfunction deleteTodo(command) {\n  // Create an array of Regular Expression words to identify in the text, such as [/^delete/];\n  // Loop through regex values using .find\n  // Turn the command into a standardized string - lower case, no final punctuation, trim whitespace\n  // Check if the command string contains the regex value using .test()\n  // If so, remove the command phrase DELETE to create new string that is just the todo item\n  // Loop through store to-do list and for each item, check if that item matches the new string that is just the todo item\n  // if item in store todo list matches, delete from store to-do list\n  // reset the count of uttered commands to match the length of the todo list array in the store\n}\n\nwatch(utterance, () => {\n  // watch for a command to run delete logic\n})\n```\n\nHere is the code I wrote for this voice-controlled delete logic:\n\n```js\nfunction deleteTodo(command) {\n  const deleteRegEx = [/^delete/]\n  // clean up utterance\n  const item = standardizeUtterance(command)\n  deleteRegEx.find((reg) => {\n    if (reg.test(item)) {\n      // remove command phrase DELETE\n      const todo = removeCommandPhrase(item, reg)\n      store.todoList.forEach((storeTodo) => {\n        // if item in store todo list matches this utterance,\n        if (storeTodo.item === todo) {\n          // delete from store\n          store.deleteTodo(storeTodo.id)\n          // reset count\n          count.value = store.todoList.length\n        }\n      })\n    }\n  })\n}\n```\n\nAnd in the watcher:\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    deleteTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\n## Check-Off To-Do Item With Voice-Control\n\nThe logic to check off an item on the list is exactly the same as the logic to delete an item, except instead of calling `store.deleteTodo(storeTodo.id)`, I will call `store.toggleCompleted(storeTodo.id)`.\n\nHere is the logic to check-off an item with voice-control:\n\n```js\nfunction checkOffTodo(command) {\n  const checkOffRegEx = [/^check off/]\n  const item = standardizeUtterance(command)\n  checkOffRegEx.find((reg) => {\n    if (reg.test(item)) {\n      const todo = removeCommandPhrase(item, reg)\n      store.todoList.forEach((storeTodo) => {\n        if (storeTodo.item === todo) {\n          // toggle completed in store:\n          store.toggleCompleted(storeTodo.id)\n          count.value = store.todoList.length\n        }\n      })\n    }\n  })\n}\n```\n\nAnd the watcher:\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    deleteTodo(utterance.value)\n    checkOffTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\n## Conclusion\n\nThat concludes this post on how to add voice-control to a Vue 3 to-do list app. It was well worth the trouble to turn a classic to-do list project into a more exciting voice-based app that uses Deepgram\'s speech-to-text API.\n\nFeel free to reach out with questions on [Twitter](https://twitter.com/sandra_rodgers_). Happy coding!\n\n        ', "html": '<p>Recently I wrote about a project I did to help me learn Pinia, Vue 3\u2019s new official state management system. I built a basic to-do list app:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651517752/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/todo-list-example1.jpg" alt="Example to-do list app"></p>\n<p>It dawned on me that a fun way to jazz up this project would be to use Deepgram to make the app <strong>voice-powered</strong> so that a user can <strong>speak</strong> commands to add, delete, or check-off items on the list.</p>\n<p>I\u2019m inspired by my colleague Bekah\u2019s series about <a href="https://blog.deepgram.com/freecodecamp-quote-generator-upgrade/">updating portfolio projects</a>. A voice-based to-do list app would be a lot more interesting than a regular to-do list app!</p>\n<h2 id="project-overview">Project Overview</h2>\n<Panel type="info" title="Build a To-Do List App With Vue 3, Pinia, and Deepgram (SERIES)"><ol><li><a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/" target="_blank">Build a To-do List App with Pinia and Vue 3</a></li>\n<li><a href="https://blog.deepgram.com/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/" target="_blank"> Build a Voice Controlled To-Do List App with Deepgram and Vue 3</a></li></ol></Panel>\n<p>The project I originally did can be found in this <a href="https://github.com/deepgram-devs/todo-pinia">repo</a>, and the accompanying blog post is <a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/">here</a>. Check it out to build the standard to-do list project with Vue 3 and Pinia.</p>\n<p>In this iteration of the project, I\u2019ll continue to use <a href="https://pinia.vuejs.org/">Pinia</a> to manage global state, but I\u2019ll add Deepgram so I can use Deepgram\u2019s speech-to-text API to help me power the voice-control feature. If you want to build this voice-control feature along with me, I\u2019ve created a starting branch <a href="https://github.com/deepgram-devs/todo-pinia-deepgram/tree/starter-branch">here</a>.</p>\n<h3 id="deepgram-live-streaming-logic">Deepgram Live Streaming Logic</h3>\n<p>There are several articles on Deepgram Docs about how to use Deepgram in Javascript to convert an audio stream of speech into text, including one I wrote about how to use it with Vue 3. I won\u2019t go over in detail here how I built Vue composables to integrate Deepgram\u2019s speech-to-text API. Use these resources or take a look at my repo (in the <a href="https://github.com/deepgram-devs/todo-pinia-deepgram/tree/main/src/composables">composables folder</a>) to learn how I did this using Vue 3 and the Deepgram Node SDK:</p>\n<Panel type="info" title="Additional Resources"><ul><li><a href="https://blog.deepgram.com/asynchronous-logic-to-write-a-vue-3-and-deepgram-captions-component/">Asynchronous Logic to Write a Vue 3 and Deepgram Captions Component</a> by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li>\n<li><a href="https://blog.deepgram.com/live-transcription-mic-browser/">Get Live Speech Transcriptions In Your Browser</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n<li><a href="https://blog.deepgram.com/protecting-api-key/">Browser Live Transcription - Protecting Your API Key</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li></ul></Panel>\n<h3 id="focus-voice-control-feature">Focus: Voice-Control Feature</h3>\n<p>For today\u2019s project, I will focus on dealing with the transcript of text that I get back from Deepgram, analyzing it for speech commands to add, delete, and check off items in the to-do list. This logic will all be part of a voice-control feature.</p>\n<h2 id="create-the-component-and-connect-deepgram">Create the Component and Connect Deepgram</h2>\n<p>The voice-control feature that I build today will be one component with two main elements:</p>\n<ol>\n<li>a <code is:raw>button</code> that, when clicked, <strong>turns on or off voice-control mode</strong> (i.e., toggles the connection to Deepgram)</li>\n<li>a <code is:raw>div</code> that contains text which identifies the status of whether Deepgram is <strong>connected and listening</strong>, if it <strong>misheard what was said</strong>, or if it is <strong>not connected</strong>.</li>\n</ol>\n<p>Here\u2019s a minimally styled version of this project that highlights the component I\u2019ll be building today:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651517754/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/TodoSpeech.png" alt="To-do list app highlighting component"></p>\n<p>In the components folder with the other Todo components, I\u2019ll create a component called <code is:raw>TodoSpeech.vue</code>. It will be a child component of <code is:raw>TodoApp.vue</code>.</p>\n<p>In <code is:raw>TodoSpeech.vue</code>, I\u2019ll start by adding the button element and status div to the template. I\u2019ll use a speech bubble emoji on the button, and I\u2019ll create an event listener that I plan to program to toggle the Deepgram connection when the button is clicked.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- in template: --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;toggleListen()&quot;</span><span style="color: #C9D1D9">&gt;\u{1F4AC}&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;{{ deepgramStatus }}&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>I\u2019ll also create a <code is:raw>deepgramStatus</code> ref, which I\u2019ll program to update when Deepgram is connected and ready to receive audio data. The initial value will report that Deepgram is not connected:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in script:</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Deepgram Not Connected&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>I\u2019ll connect to Deepgram using the composable <code is:raw>useDeepgramSocket</code> (already built in a previous post), which I import in the script. I also run the composable in the setup function so that it runs at the beginning of the component lifecycle. I destructure four properties off of the composable: <code is:raw>DG_socket</code>, <code is:raw>DG_transcript</code>, <code is:raw>openStream</code>, <code is:raw>closeStream</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import useDeepgramSocket from &quot;@/composables/useDeepgramSocket&quot;;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    let deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Deepgram Not Connected&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { deepgramStatus };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The <code is:raw>openStream</code> and <code is:raw>closeStream</code> methods that I destructured off of the <code is:raw>useDeepgramSocket</code> composable will toggle on and off when the button is clicked and <code is:raw>toggleListen</code> runs. Notice that I created the <code is:raw>isListening</code> ref to update the toggle status:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> isListening </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">toggleListen</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">isListening.value) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">openStream</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">closeStream</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>I\u2019ll use a watcher to watch the Deepgram socket\u2019s status in the composable. That way, the <code is:raw>div</code> in the template will update when I click the button and Deepgram is connecting, connected, or not connected:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(DG_socket, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connecting&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connecting&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Not Connected&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Voice Controls Off&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Closing connection...&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Closing connection...&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Listening&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Here is the entire component now. I should be able to click the button and see the status change to show the status of the Deepgram connection:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;toggleListen()&quot;&gt;\u{1F4AC}&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramStatus</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/template&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA198">&lt;script&gt;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref, watch </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;vue&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useDeepgramSocket</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;@/composables/useDeepgramSocket&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">export</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    let deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Deepgram Not Connected&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    let isListening </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">toggleListen</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">isListening.value) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">openStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">closeStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(DG_socket, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Connecting&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Connecting&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Not Connected&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Voice Controls Off&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Closing connection...&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Closing connection...&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Listening&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { deepgramStatus, toggleListen };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #FFA198">,</span></span>\n<span class="line"><span style="color: #FFA198">};</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/script&gt;</span></span></code></pre>\n<h2 id="analyze-deepgram-response-for-voice-commands">Analyze Deepgram Response for Voice Commands</h2>\n<p>The logic to add, delete, or check-off an item from the list will be based on what the speaker says. I need to program this application to listen for commands such as \u201Cadd!\u201D or \u201Cdelete!\u201C.</p>\n<p>To do that, I will need to understand the form of the text transcript I\u2019ll be getting back from Deepgram.</p>\n<h3 id="deepgram-audio-stream-to-text">Deepgram Audio Stream to Text</h3>\n<p>When I started using Deepgram to transcribe audio streams, I was surprised that Deepgram was able to send back the text almost immediately, after each phrase or sentence rather than waiting until the socket closes and sending back the entire transcription.</p>\n<p>How is it able to send a response back continuously, as the audio is streaming, and how is it able to send meaningful chunks, such as at the end of a sentence or a pause in speech? This is thanks to two of its features: <strong>Endpointing</strong> and <strong>Interim Results</strong>.</p>\n<p>To put it very simply, <strong>Endpointing</strong> is how Deepgram uses pauses in speech to process that speech into meaningful text chunks. It can hear longer silences in speech and use them to identify finished thoughts, i.e., phrases or sentences.</p>\n<p><strong>Interim results</strong> is Deepgram analyzing speech as accurately and as quickly as possible with the little bits of info it gets on the fly; then, after it gets more data to work with, it corrects the transcription. That is why as one or two words come back, one might be wrong, but then when the sentence comes back, the whole thing is more accurate.</p>\n<p>In my case, I\u2019m using the <strong>Interim Results</strong> property <code is:raw>is_final</code> to identify a complete voice command. When <code is:raw>is_final</code> is <code is:raw>true</code>, it means I\u2019m dealing with a full statement or a complete command such as \u201CAdd walk the dog to the list!\u201D The <code is:raw>is_final</code> property breaks the transcript up at the end of a fully-processed statement:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in useDeepgramSocket.js:</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  DG_transcript.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This is a pretty cool feature because it means that a user can speak a command, such as \u201CAdd walk the dog to the list\u201D, and Deepgram can identify that it is the end of the command based on the flow of the speech. It will send me that sentence back to deal with in text form, and then I can use logic to dig in and find the specific command word, such as <em>add</em> or <em>delete</em>. Nice!</p>\n<Panel type="info" title="Additional Resources"><ul><li><a href="https://developers.deepgram.com/documentation/guides/understand-endpointing-interim-results/">Understanding Endpointing and Interim Results When Transcribing Live Streaming Audio</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/interim-results/">Interim Results</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/endpointing/"> Endpointing</a></li></ul></Panel>\n<h2 id="add-to-do-item-with-voice-control">Add To-Do Item With Voice-Control</h2>\n<p>Now I\u2019ll write logic to analyze a voice command for the words \u201Cadd to do\u201D, and if the command has those words (such as in the command \u201CADD TO DO walk the dog!\u201D), the item will be added to the <code is:raw>todoList</code> array in the Pinia store.</p>\n<p>I also want to keep track of the number of commands given, so if Deepgram doesn\u2019t transcribe the command correctly due to problems interpreting the speech, I can check that count value against the number of items in the store <code is:raw>todoList</code> array, and report back to the user that the command was misunderstood and didn\u2019t make it in.</p>\n<p>Here is pseudo-code for what I need to write:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create array of Regular Expression words to identify in the text string, such as [/^add to do/, /^ad to do/]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through regex values using .find()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Turn the command into a standardized string - lower case, no final punctuation, trim whitespace</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Check if the command string contains the regex value using .test</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// If so, remove the command phrase ADD TO DO to create new string that is just the todo item</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// add todo to the Pinia store todo-list</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// reset the count of uttered commands to match the length of the todo list array in the store</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// watch for a command and if there is one, add it to the list</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>PHEW! That is a lot of logic to get through. Best to take it one step at a time.</p>\n<h3 id="create-a-set-of-regular-expressions">Create a Set of Regular Expressions</h3>\n<p>I want to analyze the command string such as \u201CAdd to do walk the dog\u201D for the three words \u201Cadd to do\u201D. I will:</p>\n<ul>\n<li>Create a regular expression by enclosing it within slashes <code is:raw>/-/</code></li>\n<li>Use the character <code is:raw>^</code> before the command phrase to identify that the phrase should be at the beginning of the string</li>\n</ul>\n<p>So the regular expression for \u201Cadd to do\u201D that I will use is <code is:raw>/^add to do/</code>.</p>\n<p>However, since there is the possibility that Deepgram could transcribe this with \u2018ad\u2019 instead of \u2018add\u2019 (seems unlikely, but I want to be prepared), I\u2019ll also use <code is:raw>/^ad to do/</code>. In fact, I\u2019ll match to anything that could be a homophone.</p>\n<p>I need an array to create a set of all the options. (The reason I don\u2019t include something like <code is:raw>/^add two do/</code> is because it\u2019s not grammatically correct, and Deepgram is smart enough to know not to transcribe things as ungrammatical.)</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span></code></pre>\n<h3 id="use-the-array-method-find">Use the Array Method .find()</h3>\n<p>I\u2019ll use the array method <code is:raw>.find</code> to loop through the array of regular expressions. It will search for the first item in the array that matches. If it finds one, there\u2019s no need to continue looping through since all we need is one match:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// loop through array to find first match:</span></span>\n<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {})</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="write-a-method-to-standardize-the-command-string">Write a Method to Standardize the Command String</h3>\n<p>I want the command to be lowercase, to not include periods, commas, question marks, or quotation marks, and to not have extra whitespace at the end. (I could entirely turn off punctuation in Deepgram, but I like the transcript to include apostrophes in words such as \u201Cshe\u2019s.\u201C)</p>\n<p>I\u2019ll create a function to take the command string and standardize it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">punctuation</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF"> /</span><span style="color: #79C0FF">[.,?&quot;]</span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">g</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">change</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> command.</span><span style="color: #D2A8FF">toLowerCase</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(punctuation, </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> change</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Notice that I used another regular expression, <code is:raw>/[.,?"]+/g</code>. This paired with the <code is:raw>replace</code> method will search for any of those punctuation marks throughout the entire string and replace them with<code is:raw>""</code> (which is nothing).</p>\n<p>Then I use this <code is:raw>standardizeUtterance</code> function inside the <code is:raw>addTodo</code> function. I\u2019ll add it before the loop so that it doesn\u2019t run for every loop:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// use item for more logic</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="test-that-the-item-matches-the-regular-expression">Test that the Item Matches the Regular Expression</h3>\n<p>I\u2019ll write an <code is:raw>if</code> statement to say that if the string starts with the regular expression command such as <code is:raw>/^add to do/</code>, then do something else (the something else will involve adding it to the to-do list).</p>\n<p>I use the method <code is:raw>.test</code>, which is a javascript method used to match a regular expression with a string, returning <code is:raw>true</code> or <code is:raw>false</code> depending on if there is a match or not.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>\n<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h3 id="remove-the-command-phrase-from-the-string">Remove the Command Phrase from the String</h3>\n<p>If there is a match, I will want to add the string to the to-do list. But right now the whole string also contains the command phrase \u201Cadd to do\u201D as in the sentence \u201CAdd to do walk the dog.\u201D I do not want \u201Cadd to do\u201D to be part of the string that goes into the to-do list array in the store.</p>\n<p>I\u2019ll write a function that takes the string and removes the phrase. I\u2019ll need to give it both the full command, and the regular expression (which is the command phrase). The method <code is:raw>replace</code> will search for the phrase and replace it with <code is:raw>""</code>, i.e., nothing.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">change</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> command.</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(reg, </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> change</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then I add it to <code is:raw>addTodo</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg);</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="add-the-to-do-item-to-the-to-do-list-array">Add the To-Do Item to the To-Do List Array</h3>\n<p>I\u2019m almost done! This is the most important step. I can add the to-do item to the list in the store.</p>\n<p>I have to go back up to the start of the <code is:raw>script</code> and import the store. I also need to run the store function and set it to a variable that I can use (I\u2019ll set it to <code is:raw>store</code>)</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref, watch </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import useDeepgramSocket from &quot;@/composables/useDeepgramSocket&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">// import store:</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #8B949E">// run function and set to variable:</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"><span style="color: #FF7B72">}</span></span></code></pre>\n<p>Then inside <code is:raw>addTodo</code> I will use the <code is:raw>store.addTodo</code> function that is already in the store as an action (I created it in the first post in this series.)</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// add to store</span></span>\n<span class="line"><span style="color: #C9D1D9">    store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(todo)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Now the logic is there to add the item to the to-do list. I just need to do one more thing to make it show up on the screen.</p>\n<h3 id="watch-for-a-command-add-it-to-the-list">Watch For a Command, Add it To The List</h3>\n<p>Right now, the <code is:raw>addTodo</code> function with all the logic to add an item to the list never runs. I need to make it run somehow.</p>\n<p>Originally, I set up Deepgram to turn on when the button is clicked. When the logic runs to create the WebSocket connection to Deepgram, I also get a value from it that I defined as <code is:raw>DG_transcript</code>. This value holds the transcript string that comes back after a user says something such as \u201CAdd to do walk the dog\u201D.</p>\n<p>I want to trigger <code is:raw>addTodo</code> to run <strong>every time a new command is said</strong>. And I know I\u2019ll be using that transcript for logic to keep track of how many times a command has been said (I\u2019ll go over that in the next section). So I\u2019m going to create a ref in this <code is:raw>TodoSpeech.vue</code> component called <code is:raw>utterance</code>, which will stay in sync with the <code is:raw>DG_transcript</code> from the <code is:raw>useDeepgramSocket.js</code> composable.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside setup() function in TodoSpeech.vue</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">DG_socket</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">openStream</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">closeStream</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #8B949E">// create ref</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(DG_transcript)</span></span></code></pre>\n<p>Now the <code is:raw>utterance</code> ref is in sync with the transcript that comes from Deepgram. I can watch that <code is:raw>utterance</code> ref for changes, and if there is a change, the <code is:raw>addTodo</code> function will run.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Now when I use the voice-control feature to add an item to the list, I see it show up on the screen. Woo-hoo!</p>\n<h2 id="dealing-with-misunderstood-commands">Dealing with Misunderstood Commands</h2>\n<p>Automatic Speech Recognition technology has gotten really good, but there can still be mistakes. People might mumble or slur some of the words, or the garbage truck could be making a lot of noise in the background. Deepgram\u2019s ASR technology can handle a lot, but I have to expect that sometimes it will mishear something.</p>\n<p>What if I say \u201CAdd to do walk the dog\u201D, but Deepgram mishears it as \u201CAnd to do walk the dog\u201D? I want to be ready for that and for any other situation. What if the user forgets to add the command and just says \u201CWalk the dog!\u201D</p>\n<p>I\u2019m going to program my app to show a message to the user when this happens. It will display \u201CI didn\u2019t catch that\u201D when it doesn\u2019t hear a match to the command phrase.</p>\n<p>The logic for this will depend on <strong>counting how many times a command has been spoken</strong>. If the speaker says one thing, and it gets added to the list, then the count should be one. But if the speaker says another thing after that, and it doesn\u2019t get added to the list, then the count is at two, but the list is at one. So there was a misunderstanding.</p>\n<p>Here is the logic that will run:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>If a command is given, the count is increased by one. Then the<code is:raw>addTodo</code> function runs.</p>\n<p>Inside <code is:raw>addTodo</code>, I check for a match. If there is a match, it means that an item is added to the list. After it is added to the list, I will reset the count to match the number of items in the list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// add to store</span></span>\n<span class="line"><span style="color: #C9D1D9">      store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(todo)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// reset count</span></span>\n<span class="line"><span style="color: #C9D1D9">      count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>However, in the <code is:raw>if</code> statement above, I test for a match. If it does NOT find a match, none of that logic inside of it runs. So that would result in the count having increased, but the number of items in the to-do list not having increased.</p>\n<p>In that case, I need to write logic to notice that discrepancy and alert the user:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if count doesn&#39;t equal todo list length, the command was misunderstood</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (count.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;I didn&#39;t catch that&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>I don\u2019t want the phrase \u201CI didn\u2019t catch that\u201D to remain on the screen forever. I\u2019ll have it disappear after a second and return to \u201CListening\u201D:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if count doesn&#39;t equal todo list length, the command was misunderstood</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (count.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;I didn&#39;t catch that&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Listening&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now, everything in the watcher is set up to make sure that when a user gives a command, it is either added to the to-do list, or reported back with a message to the user that the command was misunderstood.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="delete-to-do-item-with-voice-control">Delete To-Do Item With Voice-Control</h2>\n<p>The hard part of this is done. I walked through the step-by-step logic to analyze voice-control command strings. Now that I want to delete an item, I can use the same logic.</p>\n<p>I\u2019ll write out the pseudo-code and supply my logic. I won\u2019t go through it step-by-step again since the only thing that will be different is writing the step <strong>to remove an item from the store to-do list</strong> instead of add an item.</p>\n<p>Anyone following along with this post and building the voice-control feature could now take some time to write a <code is:raw>deleteTodo</code> function. I recommend copying the pseudo-code below (the commented-out steps) and then writing each step of the logic.</p>\n<h3 id="pseudo-code">Pseudo-Code:</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create an array of Regular Expression words to identify in the text, such as [/^delete/];</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through regex values using .find</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Turn the command into a standardized string - lower case, no final punctuation, trim whitespace</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Check if the command string contains the regex value using .test()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// If so, remove the command phrase DELETE to create new string that is just the todo item</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through store to-do list and for each item, check if that item matches the new string that is just the todo item</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if item in store todo list matches, delete from store to-do list</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// reset the count of uttered commands to match the length of the todo list array in the store</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// watch for a command to run delete logic</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Here is the code I wrote for this voice-controlled delete logic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deleteRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">delete/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  deleteRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// remove command phrase DELETE</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"><span style="color: #C9D1D9">      store.todoList.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">storeTodo</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// if item in store todo list matches this utterance,</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (storeTodo.item </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// delete from store</span></span>\n<span class="line"><span style="color: #C9D1D9">          store.</span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(storeTodo.id)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// reset count</span></span>\n<span class="line"><span style="color: #C9D1D9">          count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>And in the watcher:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="check-off-to-do-item-with-voice-control">Check-Off To-Do Item With Voice-Control</h2>\n<p>The logic to check off an item on the list is exactly the same as the logic to delete an item, except instead of calling <code is:raw>store.deleteTodo(storeTodo.id)</code>, I will call <code is:raw>store.toggleCompleted(storeTodo.id)</code>.</p>\n<p>Here is the logic to check-off an item with voice-control:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkOffTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">checkOffRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">check off/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  checkOffRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"><span style="color: #C9D1D9">      store.todoList.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">storeTodo</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (storeTodo.item </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// toggle completed in store:</span></span>\n<span class="line"><span style="color: #C9D1D9">          store.</span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(storeTodo.id)</span></span>\n<span class="line"><span style="color: #C9D1D9">          count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>And the watcher:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">checkOffTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="conclusion">Conclusion</h2>\n<p>That concludes this post on how to add voice-control to a Vue 3 to-do list app. It was well worth the trouble to turn a classic to-do list project into a more exciting voice-based app that uses Deepgram\u2019s speech-to-text API.</p>\n<p>Feel free to reach out with questions on <a href="https://twitter.com/sandra_rodgers_">Twitter</a>. Happy coding!</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/index.md" };
function rawContent() {
  return '\nRecently I wrote about a project I did to help me learn Pinia, Vue 3\'s new official state management system. I built a basic to-do list app:\n\n![Example to-do list app](https://res.cloudinary.com/deepgram/image/upload/v1651517752/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/todo-list-example1.jpg)\n\nIt dawned on me that a fun way to jazz up this project would be to use Deepgram to make the app **voice-powered** so that a user can **speak** commands to add, delete, or check-off items on the list.\n\nI\'m inspired by my colleague Bekah\'s series about [updating portfolio projects](https://blog.deepgram.com/freecodecamp-quote-generator-upgrade/). A voice-based to-do list app would be a lot more interesting than a regular to-do list app!\n\n## Project Overview\n\n<Panel type="info" title="Build a To-Do List App With Vue 3, Pinia, and Deepgram (SERIES)">\n<ol>\n<li><a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/" target="_blank">Build a To-do List App with Pinia and Vue 3</a></li>\n<li><a href="https://blog.deepgram.com/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/" target="_blank"> Build a Voice Controlled To-Do List App with Deepgram and Vue 3</a></li>\n</ol>\n</Panel>\n\nThe project I originally did can be found in this [repo](https://github.com/deepgram-devs/todo-pinia), and the accompanying blog post is [here](https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/). Check it out to build the standard to-do list project with Vue 3 and Pinia.\n\nIn this iteration of the project, I\'ll continue to use [Pinia](https://pinia.vuejs.org/) to manage global state, but I\'ll add Deepgram so I can use Deepgram\'s speech-to-text API to help me power the voice-control feature. If you want to build this voice-control feature along with me, I\'ve created a starting branch [here](https://github.com/deepgram-devs/todo-pinia-deepgram/tree/starter-branch).\n\n### Deepgram Live Streaming Logic\n\nThere are several articles on Deepgram Docs about how to use Deepgram in Javascript to convert an audio stream of speech into text, including one I wrote about how to use it with Vue 3. I won\'t go over in detail here how I built Vue composables to integrate Deepgram\'s speech-to-text API. Use these resources or take a look at my repo (in the [composables folder](https://github.com/deepgram-devs/todo-pinia-deepgram/tree/main/src/composables)) to learn how I did this using Vue 3 and the Deepgram Node SDK:\n\n<Panel type="info" title="Additional Resources">\n<ul>\n<li><a href="https://blog.deepgram.com/asynchronous-logic-to-write-a-vue-3-and-deepgram-captions-component/">Asynchronous Logic to Write a Vue 3 and Deepgram Captions Component</a> by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li>\n<li><a href="https://blog.deepgram.com/live-transcription-mic-browser/">Get Live Speech Transcriptions In Your Browser</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n<li><a href="https://blog.deepgram.com/protecting-api-key/">Browser Live Transcription - Protecting Your API Key</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n</ul>\n\n</Panel>\n\n### Focus: Voice-Control Feature\n\nFor today\'s project, I will focus on dealing with the transcript of text that I get back from Deepgram, analyzing it for speech commands to add, delete, and check off items in the to-do list. This logic will all be part of a voice-control feature.\n\n## Create the Component and Connect Deepgram\n\nThe voice-control feature that I build today will be one component with two main elements:\n\n1.  a `button` that, when clicked, **turns on or off voice-control mode** (i.e., toggles the connection to Deepgram)\n2.  a `div` that contains text which identifies the status of whether Deepgram is **connected and listening**, if it **misheard what was said**, or if it is **not connected**.\n\nHere\'s a minimally styled version of this project that highlights the component I\'ll be building today:\n\n![To-do list app highlighting component](https://res.cloudinary.com/deepgram/image/upload/v1651517754/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/TodoSpeech.png)\n\nIn the components folder with the other Todo components, I\'ll create a component called `TodoSpeech.vue`. It will be a child component of `TodoApp.vue`.\n\nIn `TodoSpeech.vue`, I\'ll start by adding the button element and status div to the template. I\'ll use a speech bubble emoji on the button, and I\'ll create an event listener that I plan to program to toggle the Deepgram connection when the button is clicked.\n\n```html\n{/*<!-- in template: -->*/}\n<button @click="toggleListen()">\u{1F4AC}</button>\n<div>{{ deepgramStatus }}</div>\n```\n\nI\'ll also create a `deepgramStatus` ref, which I\'ll program to update when Deepgram is connected and ready to receive audio data. The initial value will report that Deepgram is not connected:\n\n```js\n// in script:\nlet deepgramStatus = ref(\'Deepgram Not Connected\')\n```\n\nI\'ll connect to Deepgram using the composable `useDeepgramSocket` (already built in a previous post), which I import in the script. I also run the composable in the setup function so that it runs at the beginning of the component lifecycle. I destructure four properties off of the composable: `DG_socket`, `DG_transcript`, `openStream`, `closeStream`.\n\n```js\n<script>\nimport { ref } from "vue";\nimport useDeepgramSocket from "@/composables/useDeepgramSocket";\n\nexport default {\n  setup() {\n    const { DG_socket, DG_transcript, openStream, closeStream } = useDeepgramSocket();\n    let deepgramStatus = ref("Deepgram Not Connected");\n\n    return { deepgramStatus };\n  },\n};\n<\/script>\n```\n\nThe `openStream` and `closeStream` methods that I destructured off of the `useDeepgramSocket` composable will toggle on and off when the button is clicked and `toggleListen` runs. Notice that I created the `isListening` ref to update the toggle status:\n\n```js\nlet isListening = ref(false)\n\nfunction toggleListen() {\n  if (!isListening.value) {\n    openStream()\n    isListening.value = true\n  } else {\n    closeStream()\n    isListening.value = false\n  }\n}\n```\n\nI\'ll use a watcher to watch the Deepgram socket\'s status in the composable. That way, the `div` in the template will update when I click the button and Deepgram is connecting, connected, or not connected:\n\n```js\nwatch(DG_socket, () => {\n  if (DG_socket.value === \'Connecting\') {\n    deepgramStatus.value = \'Connecting\'\n  } else if (DG_socket.value === \'Not Connected\') {\n    deepgramStatus.value = \'Voice Controls Off\'\n  } else if (DG_socket.value === \'Closing connection...\') {\n    deepgramStatus.value = \'Closing connection...\'\n  } else {\n    deepgramStatus.value = \'Listening\'\n  }\n})\n```\n\nHere is the entire component now. I should be able to click the button and see the status change to show the status of the Deepgram connection:\n\n```js\n<template>\n  <div>\n    <button @click="toggleListen()">\u{1F4AC}</button>\n    <div>{{ deepgramStatus }}</div>\n  </div>\n</template>\n\n<script>\nimport { ref, watch } from "vue";\nimport useDeepgramSocket from "@/composables/useDeepgramSocket";\n\nexport default {\n  setup() {\n    const { DG_socket, DG_transcript, openStream, closeStream } =\n      useDeepgramSocket();\n\n    let deepgramStatus = ref("Deepgram Not Connected");\n    let isListening = ref(false);\n\n    function toggleListen() {\n      if (!isListening.value) {\n        openStream();\n        isListening.value = true;\n      } else {\n        closeStream();\n        isListening.value = false;\n      }\n    }\n\n    watch(DG_socket, () => {\n      if (DG_socket.value === "Connecting") {\n        deepgramStatus.value = "Connecting";\n      } else if (DG_socket.value === "Not Connected") {\n        deepgramStatus.value = "Voice Controls Off";\n      } else if (DG_socket.value === "Closing connection...") {\n        deepgramStatus.value = "Closing connection...";\n      } else {\n        deepgramStatus.value = "Listening";\n      }\n    });\n\n    return { deepgramStatus, toggleListen };\n  },\n};\n<\/script>\n```\n\n## Analyze Deepgram Response for Voice Commands\n\nThe logic to add, delete, or check-off an item from the list will be based on what the speaker says. I need to program this application to listen for commands such as "add!" or "delete!".\n\nTo do that, I will need to understand the form of the text transcript I\'ll be getting back from Deepgram.\n\n### Deepgram Audio Stream to Text\n\nWhen I started using Deepgram to transcribe audio streams, I was surprised that Deepgram was able to send back the text almost immediately, after each phrase or sentence rather than waiting until the socket closes and sending back the entire transcription.\n\nHow is it able to send a response back continuously, as the audio is streaming, and how is it able to send meaningful chunks, such as at the end of a sentence or a pause in speech? This is thanks to two of its features: **Endpointing** and **Interim Results**.\n\nTo put it very simply, **Endpointing** is how Deepgram uses pauses in speech to process that speech into meaningful text chunks. It can hear longer silences in speech and use them to identify finished thoughts, i.e., phrases or sentences.\n\n**Interim results** is Deepgram analyzing speech as accurately and as quickly as possible with the little bits of info it gets on the fly; then, after it gets more data to work with, it corrects the transcription. That is why as one or two words come back, one might be wrong, but then when the sentence comes back, the whole thing is more accurate.\n\nIn my case, I\'m using the **Interim Results** property `is_final` to identify a complete voice command. When `is_final` is `true`, it means I\'m dealing with a full statement or a complete command such as "Add walk the dog to the list!" The `is_final` property breaks the transcript up at the end of a fully-processed statement:\n\n```js\n// in useDeepgramSocket.js:\nconst transcript = received.channel.alternatives[0].transcript\nif (transcript && received.is_final) {\n  DG_transcript.value = transcript + \'\'\n}\n```\n\nThis is a pretty cool feature because it means that a user can speak a command, such as "Add walk the dog to the list", and Deepgram can identify that it is the end of the command based on the flow of the speech. It will send me that sentence back to deal with in text form, and then I can use logic to dig in and find the specific command word, such as *add* or *delete*. Nice!\n\n<Panel type="info" title="Additional Resources">\n<ul>\n<li><a href="https://developers.deepgram.com/documentation/guides/understand-endpointing-interim-results/">Understanding Endpointing and Interim Results When Transcribing Live Streaming Audio</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/interim-results/">Interim Results</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/endpointing/"> Endpointing</a></li>\n</ul>\n</Panel>\n\n## Add To-Do Item With Voice-Control\n\nNow I\'ll write logic to analyze a voice command for the words "add to do", and if the command has those words (such as in the command "ADD TO DO walk the dog!"), the item will be added to the `todoList` array in the Pinia store.\n\nI also want to keep track of the number of commands given, so if Deepgram doesn\'t transcribe the command correctly due to problems interpreting the speech, I can check that count value against the number of items in the store `todoList` array, and report back to the user that the command was misunderstood and didn\'t make it in.\n\nHere is pseudo-code for what I need to write:\n\n```js\nfunction addTodo(command) {\n  // Create array of Regular Expression words to identify in the text string, such as [/^add to do/, /^ad to do/]\n  // Loop through regex values using .find()\n  // Turn the command into a standardized string - lower case, no final punctuation, trim whitespace\n  // Check if the command string contains the regex value using .test\n  // If so, remove the command phrase ADD TO DO to create new string that is just the todo item\n  // add todo to the Pinia store todo-list\n  // reset the count of uttered commands to match the length of the todo list array in the store\n}\nwatch(utterance, () => {\n  // watch for a command and if there is one, add it to the list\n})\n```\n\nPHEW! That is a lot of logic to get through. Best to take it one step at a time.\n\n### Create a Set of Regular Expressions\n\nI want to analyze the command string such as "Add to do walk the dog" for the three words "add to do". I will:\n\n*   Create a regular expression by enclosing it within slashes `/-/`\n*   Use the character `^` before the command phrase to identify that the phrase should be at the beginning of the string\n\nSo the regular expression for "add to do" that I will use is `/^add to do/`.\n\nHowever, since there is the possibility that Deepgram could transcribe this with \'ad\' instead of \'add\' (seems unlikely, but I want to be prepared), I\'ll also use `/^ad to do/`. In fact, I\'ll match to anything that could be a homophone.\n\nI need an array to create a set of all the options. (The reason I don\'t include something like `/^add two do/` is because it\'s not grammatically correct, and Deepgram is smart enough to know not to transcribe things as ungrammatical.)\n\n```js\nconst addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n```\n\n### Use the Array Method .find()\n\nI\'ll use the array method `.find` to loop through the array of regular expressions. It will search for the first item in the array that matches. If it finds one, there\'s no need to continue looping through since all we need is one match:\n\n```js\nfunction addTodo(command) {\n  const addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n  // loop through array to find first match:\n  addRegEx.find((reg) => {})\n}\n```\n\n### Write a Method to Standardize the Command String\n\nI want the command to be lowercase, to not include periods, commas, question marks, or quotation marks, and to not have extra whitespace at the end. (I could entirely turn off punctuation in Deepgram, but I like the transcript to include apostrophes in words such as "she\'s.")\n\nI\'ll create a function to take the command string and standardize it:\n\n```js\nfunction standardizeUtterance(command) {\n  const punctuation = /[.,?"]+/g\n  const change = command.toLowerCase().replace(punctuation, \'\').trim()\n  return change\n}\n```\n\nNotice that I used another regular expression, `/[.,?"]+/g`. This paired with the `replace` method will search for any of those punctuation marks throughout the entire string and replace them with`""` (which is nothing).\n\nThen I use this `standardizeUtterance` function inside the `addTodo` function. I\'ll add it before the loop so that it doesn\'t run for every loop:\n\n```js\nfunction addTodo(command) {\n  const addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n  // clean up utterance\n  const item = standardizeUtterance(command)\n  addRegEx.find((reg) => {\n    // use item for more logic\n  })\n}\n```\n\n### Test that the Item Matches the Regular Expression\n\nI\'ll write an `if` statement to say that if the string starts with the regular expression command such as `/^add to do/`, then do something else (the something else will involve adding it to the to-do list).\n\nI use the method `.test`, which is a javascript method used to match a regular expression with a string, returning `true` or `false` depending on if there is a match or not.\n\n```js\n// inside addTodo method:\naddRegEx.find((reg) => {\n  if (reg.test(item)) {\n  }\n})\n```\n\n### Remove the Command Phrase from the String\n\nIf there is a match, I will want to add the string to the to-do list. But right now the whole string also contains the command phrase "add to do" as in the sentence "Add to do walk the dog." I do not want "add to do" to be part of the string that goes into the to-do list array in the store.\n\nI\'ll write a function that takes the string and removes the phrase. I\'ll need to give it both the full command, and the regular expression (which is the command phrase). The method `replace` will search for the phrase and replace it with `""`, i.e., nothing.\n\n```js\nfunction removeCommandPhrase(command, reg) {\n  const change = command.replace(reg, \'\').trim(\'\')\n  return change\n}\n```\n\nThen I add it to `addTodo`:\n\n```js\n// inside addTodo method:\n\naddRegEx.find((reg) => {\n  if (reg.test(item)) {\n    // remove command phrase ADD TO DO\n    const todo = removeCommandPhrase(item, reg);\n    }\n  });\n}\n```\n\n### Add the To-Do Item to the To-Do List Array\n\nI\'m almost done! This is the most important step. I can add the to-do item to the list in the store.\n\nI have to go back up to the start of the `script` and import the store. I also need to run the store function and set it to a variable that I can use (I\'ll set it to `store`)\n\n```js\n<script>\nimport { ref, watch } from "vue";\nimport useDeepgramSocket from "@/composables/useDeepgramSocket";\n// import store:\nimport { useTodoListStore } from "../store/useTodoListStore";\n\nexport default {\n  setup() {\n    const { DG_socket, DG_transcript, openStream, closeStream } =\n      useDeepgramSocket();\n     // run function and set to variable:\n    const store = useTodoListStore();\n    ...\n    function addTodo(command) {\n    ...\n    });\n}\n```\n\nThen inside `addTodo` I will use the `store.addTodo` function that is already in the store as an action (I created it in the first post in this series.)\n\n```js\n// inside addTodo method:\n\naddRegEx.find((reg) => {\n  if (reg.test(item)) {\n    // remove command phrase ADD TO DO\n    const todo = removeCommandPhrase(item, reg)\n\n    // add to store\n    store.addTodo(todo)\n  }\n})\n```\n\nNow the logic is there to add the item to the to-do list. I just need to do one more thing to make it show up on the screen.\n\n### Watch For a Command, Add it To The List\n\nRight now, the `addTodo` function with all the logic to add an item to the list never runs. I need to make it run somehow.\n\nOriginally, I set up Deepgram to turn on when the button is clicked. When the logic runs to create the WebSocket connection to Deepgram, I also get a value from it that I defined as `DG_transcript`. This value holds the transcript string that comes back after a user says something such as "Add to do walk the dog".\n\nI want to trigger `addTodo` to run **every time a new command is said**. And I know I\'ll be using that transcript for logic to keep track of how many times a command has been said (I\'ll go over that in the next section). So I\'m going to create a ref in this `TodoSpeech.vue` component called `utterance`, which will stay in sync with the `DG_transcript` from the `useDeepgramSocket.js` composable.\n\n```js\n// inside setup() function in TodoSpeech.vue\nconst { DG_socket, DG_transcript, openStream, closeStream } =\n  useDeepgramSocket()\n// create ref\nlet utterance = ref(DG_transcript)\n```\n\nNow the `utterance` ref is in sync with the transcript that comes from Deepgram. I can watch that `utterance` ref for changes, and if there is a change, the `addTodo` function will run.\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    addTodo(utterance.value)\n  }\n})\n```\n\nNow when I use the voice-control feature to add an item to the list, I see it show up on the screen. Woo-hoo!\n\n## Dealing with Misunderstood Commands\n\nAutomatic Speech Recognition technology has gotten really good, but there can still be mistakes. People might mumble or slur some of the words, or the garbage truck could be making a lot of noise in the background. Deepgram\'s ASR technology can handle a lot, but I have to expect that sometimes it will mishear something.\n\nWhat if I say "Add to do walk the dog", but Deepgram mishears it as "And to do walk the dog"? I want to be ready for that and for any other situation. What if the user forgets to add the command and just says "Walk the dog!"\n\nI\'m going to program my app to show a message to the user when this happens. It will display "I didn\'t catch that" when it doesn\'t hear a match to the command phrase.\n\nThe logic for this will depend on **counting how many times a command has been spoken**. If the speaker says one thing, and it gets added to the list, then the count should be one. But if the speaker says another thing after that, and it doesn\'t get added to the list, then the count is at two, but the list is at one. So there was a misunderstanding.\n\nHere is the logic that will run:\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\nIf a command is given, the count is increased by one. Then the`addTodo` function runs.\n\nInside `addTodo`, I check for a match. If there is a match, it means that an item is added to the list. After it is added to the list, I will reset the count to match the number of items in the list:\n\n```js\nfunction addTodo(command) {\n  const addRegEx = [/^add to do/, /^ad to do/, /^add to dew/]\n  // clean up utterance\n  const item = standardizeUtterance(command)\n  addRegEx.find((reg) => {\n    if (reg.test(item)) {\n      // remove command phrase ADD TO DO\n      const todo = removeCommandPhrase(item, reg)\n      // add to store\n      store.addTodo(todo)\n      // reset count\n      count.value = store.todoList.length\n    }\n  })\n}\n```\n\nHowever, in the `if` statement above, I test for a match. If it does NOT find a match, none of that logic inside of it runs. So that would result in the count having increased, but the number of items in the to-do list not having increased.\n\nIn that case, I need to write logic to notice that discrepancy and alert the user:\n\n```js\nfunction alertMisunderstood() {\n  // if count doesn\'t equal todo list length, the command was misunderstood\n  if (count.value !== store.todoList.length) {\n    deepgramStatus.value = "I didn\'t catch that"\n  }\n}\n```\n\nI don\'t want the phrase "I didn\'t catch that" to remain on the screen forever. I\'ll have it disappear after a second and return to "Listening":\n\n```js\nfunction alertMisunderstood() {\n  // if count doesn\'t equal todo list length, the command was misunderstood\n  if (count.value !== store.todoList.length) {\n    deepgramStatus.value = "I didn\'t catch that"\n    setTimeout(() => {\n      deepgramStatus.value = \'Listening\'\n    }, 1000)\n  }\n}\n```\n\nNow, everything in the watcher is set up to make sure that when a user gives a command, it is either added to the to-do list, or reported back with a message to the user that the command was misunderstood.\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\n## Delete To-Do Item With Voice-Control\n\nThe hard part of this is done. I walked through the step-by-step logic to analyze voice-control command strings. Now that I want to delete an item, I can use the same logic.\n\nI\'ll write out the pseudo-code and supply my logic. I won\'t go through it step-by-step again since the only thing that will be different is writing the step **to remove an item from the store to-do list** instead of add an item.\n\nAnyone following along with this post and building the voice-control feature could now take some time to write a `deleteTodo` function. I recommend copying the pseudo-code below (the commented-out steps) and then writing each step of the logic.\n\n### Pseudo-Code:\n\n```js\nfunction deleteTodo(command) {\n  // Create an array of Regular Expression words to identify in the text, such as [/^delete/];\n  // Loop through regex values using .find\n  // Turn the command into a standardized string - lower case, no final punctuation, trim whitespace\n  // Check if the command string contains the regex value using .test()\n  // If so, remove the command phrase DELETE to create new string that is just the todo item\n  // Loop through store to-do list and for each item, check if that item matches the new string that is just the todo item\n  // if item in store todo list matches, delete from store to-do list\n  // reset the count of uttered commands to match the length of the todo list array in the store\n}\n\nwatch(utterance, () => {\n  // watch for a command to run delete logic\n})\n```\n\nHere is the code I wrote for this voice-controlled delete logic:\n\n```js\nfunction deleteTodo(command) {\n  const deleteRegEx = [/^delete/]\n  // clean up utterance\n  const item = standardizeUtterance(command)\n  deleteRegEx.find((reg) => {\n    if (reg.test(item)) {\n      // remove command phrase DELETE\n      const todo = removeCommandPhrase(item, reg)\n      store.todoList.forEach((storeTodo) => {\n        // if item in store todo list matches this utterance,\n        if (storeTodo.item === todo) {\n          // delete from store\n          store.deleteTodo(storeTodo.id)\n          // reset count\n          count.value = store.todoList.length\n        }\n      })\n    }\n  })\n}\n```\n\nAnd in the watcher:\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    deleteTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\n## Check-Off To-Do Item With Voice-Control\n\nThe logic to check off an item on the list is exactly the same as the logic to delete an item, except instead of calling `store.deleteTodo(storeTodo.id)`, I will call `store.toggleCompleted(storeTodo.id)`.\n\nHere is the logic to check-off an item with voice-control:\n\n```js\nfunction checkOffTodo(command) {\n  const checkOffRegEx = [/^check off/]\n  const item = standardizeUtterance(command)\n  checkOffRegEx.find((reg) => {\n    if (reg.test(item)) {\n      const todo = removeCommandPhrase(item, reg)\n      store.todoList.forEach((storeTodo) => {\n        if (storeTodo.item === todo) {\n          // toggle completed in store:\n          store.toggleCompleted(storeTodo.id)\n          count.value = store.todoList.length\n        }\n      })\n    }\n  })\n}\n```\n\nAnd the watcher:\n\n```js\nwatch(utterance, () => {\n  if (utterance.value !== \'\') {\n    count.value++\n    addTodo(utterance.value)\n    deleteTodo(utterance.value)\n    checkOffTodo(utterance.value)\n    alertMisunderstood()\n  }\n})\n```\n\n## Conclusion\n\nThat concludes this post on how to add voice-control to a Vue 3 to-do list app. It was well worth the trouble to turn a classic to-do list project into a more exciting voice-based app that uses Deepgram\'s speech-to-text API.\n\nFeel free to reach out with questions on [Twitter](https://twitter.com/sandra_rodgers_). Happy coding!\n\n        ';
}
function compiledContent() {
  return '<p>Recently I wrote about a project I did to help me learn Pinia, Vue 3\u2019s new official state management system. I built a basic to-do list app:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651517752/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/todo-list-example1.jpg" alt="Example to-do list app"></p>\n<p>It dawned on me that a fun way to jazz up this project would be to use Deepgram to make the app <strong>voice-powered</strong> so that a user can <strong>speak</strong> commands to add, delete, or check-off items on the list.</p>\n<p>I\u2019m inspired by my colleague Bekah\u2019s series about <a href="https://blog.deepgram.com/freecodecamp-quote-generator-upgrade/">updating portfolio projects</a>. A voice-based to-do list app would be a lot more interesting than a regular to-do list app!</p>\n<h2 id="project-overview">Project Overview</h2>\n<Panel type="info" title="Build a To-Do List App With Vue 3, Pinia, and Deepgram (SERIES)"><ol><li><a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/" target="_blank">Build a To-do List App with Pinia and Vue 3</a></li>\n<li><a href="https://blog.deepgram.com/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/" target="_blank"> Build a Voice Controlled To-Do List App with Deepgram and Vue 3</a></li></ol></Panel>\n<p>The project I originally did can be found in this <a href="https://github.com/deepgram-devs/todo-pinia">repo</a>, and the accompanying blog post is <a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/">here</a>. Check it out to build the standard to-do list project with Vue 3 and Pinia.</p>\n<p>In this iteration of the project, I\u2019ll continue to use <a href="https://pinia.vuejs.org/">Pinia</a> to manage global state, but I\u2019ll add Deepgram so I can use Deepgram\u2019s speech-to-text API to help me power the voice-control feature. If you want to build this voice-control feature along with me, I\u2019ve created a starting branch <a href="https://github.com/deepgram-devs/todo-pinia-deepgram/tree/starter-branch">here</a>.</p>\n<h3 id="deepgram-live-streaming-logic">Deepgram Live Streaming Logic</h3>\n<p>There are several articles on Deepgram Docs about how to use Deepgram in Javascript to convert an audio stream of speech into text, including one I wrote about how to use it with Vue 3. I won\u2019t go over in detail here how I built Vue composables to integrate Deepgram\u2019s speech-to-text API. Use these resources or take a look at my repo (in the <a href="https://github.com/deepgram-devs/todo-pinia-deepgram/tree/main/src/composables">composables folder</a>) to learn how I did this using Vue 3 and the Deepgram Node SDK:</p>\n<Panel type="info" title="Additional Resources"><ul><li><a href="https://blog.deepgram.com/asynchronous-logic-to-write-a-vue-3-and-deepgram-captions-component/">Asynchronous Logic to Write a Vue 3 and Deepgram Captions Component</a> by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li>\n<li><a href="https://blog.deepgram.com/live-transcription-mic-browser/">Get Live Speech Transcriptions In Your Browser</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>\n<li><a href="https://blog.deepgram.com/protecting-api-key/">Browser Live Transcription - Protecting Your API Key</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li></ul></Panel>\n<h3 id="focus-voice-control-feature">Focus: Voice-Control Feature</h3>\n<p>For today\u2019s project, I will focus on dealing with the transcript of text that I get back from Deepgram, analyzing it for speech commands to add, delete, and check off items in the to-do list. This logic will all be part of a voice-control feature.</p>\n<h2 id="create-the-component-and-connect-deepgram">Create the Component and Connect Deepgram</h2>\n<p>The voice-control feature that I build today will be one component with two main elements:</p>\n<ol>\n<li>a <code is:raw>button</code> that, when clicked, <strong>turns on or off voice-control mode</strong> (i.e., toggles the connection to Deepgram)</li>\n<li>a <code is:raw>div</code> that contains text which identifies the status of whether Deepgram is <strong>connected and listening</strong>, if it <strong>misheard what was said</strong>, or if it is <strong>not connected</strong>.</li>\n</ol>\n<p>Here\u2019s a minimally styled version of this project that highlights the component I\u2019ll be building today:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651517754/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/TodoSpeech.png" alt="To-do list app highlighting component"></p>\n<p>In the components folder with the other Todo components, I\u2019ll create a component called <code is:raw>TodoSpeech.vue</code>. It will be a child component of <code is:raw>TodoApp.vue</code>.</p>\n<p>In <code is:raw>TodoSpeech.vue</code>, I\u2019ll start by adding the button element and status div to the template. I\u2019ll use a speech bubble emoji on the button, and I\u2019ll create an event listener that I plan to program to toggle the Deepgram connection when the button is clicked.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- in template: --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;toggleListen()&quot;</span><span style="color: #C9D1D9">&gt;\u{1F4AC}&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;{{ deepgramStatus }}&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>I\u2019ll also create a <code is:raw>deepgramStatus</code> ref, which I\u2019ll program to update when Deepgram is connected and ready to receive audio data. The initial value will report that Deepgram is not connected:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in script:</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Deepgram Not Connected&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>I\u2019ll connect to Deepgram using the composable <code is:raw>useDeepgramSocket</code> (already built in a previous post), which I import in the script. I also run the composable in the setup function so that it runs at the beginning of the component lifecycle. I destructure four properties off of the composable: <code is:raw>DG_socket</code>, <code is:raw>DG_transcript</code>, <code is:raw>openStream</code>, <code is:raw>closeStream</code>.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import useDeepgramSocket from &quot;@/composables/useDeepgramSocket&quot;;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    let deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Deepgram Not Connected&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { deepgramStatus };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">};</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>The <code is:raw>openStream</code> and <code is:raw>closeStream</code> methods that I destructured off of the <code is:raw>useDeepgramSocket</code> composable will toggle on and off when the button is clicked and <code is:raw>toggleListen</code> runs. Notice that I created the <code is:raw>isListening</code> ref to update the toggle status:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> isListening </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">toggleListen</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">isListening.value) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">openStream</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">closeStream</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">    isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>I\u2019ll use a watcher to watch the Deepgram socket\u2019s status in the composable. That way, the <code is:raw>div</code> in the template will update when I click the button and Deepgram is connecting, connected, or not connected:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(DG_socket, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connecting&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connecting&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Not Connected&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Voice Controls Off&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Closing connection...&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Closing connection...&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Listening&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Here is the entire component now. I should be able to click the button and see the status change to show the status of the Deepgram connection:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;toggleListen()&quot;&gt;\u{1F4AC}&lt;/button&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramStatus</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/template&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FFA198">&lt;script&gt;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref, watch </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;vue&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useDeepgramSocket</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;@/composables/useDeepgramSocket&quot;</span><span style="color: #FFA198">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">export</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    let deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Deepgram Not Connected&quot;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    let isListening </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">toggleListen</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">isListening.value) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">openStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">closeStream</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">        isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(DG_socket, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Connecting&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Connecting&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Not Connected&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Voice Controls Off&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Closing connection...&quot;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Closing connection...&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Listening&quot;</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    return { deepgramStatus, toggleListen };</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #FFA198">,</span></span>\n<span class="line"><span style="color: #FFA198">};</span></span>\n<span class="line"><span style="color: #FFA198">&lt;/script&gt;</span></span></code></pre>\n<h2 id="analyze-deepgram-response-for-voice-commands">Analyze Deepgram Response for Voice Commands</h2>\n<p>The logic to add, delete, or check-off an item from the list will be based on what the speaker says. I need to program this application to listen for commands such as \u201Cadd!\u201D or \u201Cdelete!\u201C.</p>\n<p>To do that, I will need to understand the form of the text transcript I\u2019ll be getting back from Deepgram.</p>\n<h3 id="deepgram-audio-stream-to-text">Deepgram Audio Stream to Text</h3>\n<p>When I started using Deepgram to transcribe audio streams, I was surprised that Deepgram was able to send back the text almost immediately, after each phrase or sentence rather than waiting until the socket closes and sending back the entire transcription.</p>\n<p>How is it able to send a response back continuously, as the audio is streaming, and how is it able to send meaningful chunks, such as at the end of a sentence or a pause in speech? This is thanks to two of its features: <strong>Endpointing</strong> and <strong>Interim Results</strong>.</p>\n<p>To put it very simply, <strong>Endpointing</strong> is how Deepgram uses pauses in speech to process that speech into meaningful text chunks. It can hear longer silences in speech and use them to identify finished thoughts, i.e., phrases or sentences.</p>\n<p><strong>Interim results</strong> is Deepgram analyzing speech as accurately and as quickly as possible with the little bits of info it gets on the fly; then, after it gets more data to work with, it corrects the transcription. That is why as one or two words come back, one might be wrong, but then when the sentence comes back, the whole thing is more accurate.</p>\n<p>In my case, I\u2019m using the <strong>Interim Results</strong> property <code is:raw>is_final</code> to identify a complete voice command. When <code is:raw>is_final</code> is <code is:raw>true</code>, it means I\u2019m dealing with a full statement or a complete command such as \u201CAdd walk the dog to the list!\u201D The <code is:raw>is_final</code> property breaks the transcript up at the end of a fully-processed statement:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in useDeepgramSocket.js:</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  DG_transcript.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This is a pretty cool feature because it means that a user can speak a command, such as \u201CAdd walk the dog to the list\u201D, and Deepgram can identify that it is the end of the command based on the flow of the speech. It will send me that sentence back to deal with in text form, and then I can use logic to dig in and find the specific command word, such as <em>add</em> or <em>delete</em>. Nice!</p>\n<Panel type="info" title="Additional Resources"><ul><li><a href="https://developers.deepgram.com/documentation/guides/understand-endpointing-interim-results/">Understanding Endpointing and Interim Results When Transcribing Live Streaming Audio</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/interim-results/">Interim Results</a></li>\n<li><a href="https://developers.deepgram.com/documentation/features/endpointing/"> Endpointing</a></li></ul></Panel>\n<h2 id="add-to-do-item-with-voice-control">Add To-Do Item With Voice-Control</h2>\n<p>Now I\u2019ll write logic to analyze a voice command for the words \u201Cadd to do\u201D, and if the command has those words (such as in the command \u201CADD TO DO walk the dog!\u201D), the item will be added to the <code is:raw>todoList</code> array in the Pinia store.</p>\n<p>I also want to keep track of the number of commands given, so if Deepgram doesn\u2019t transcribe the command correctly due to problems interpreting the speech, I can check that count value against the number of items in the store <code is:raw>todoList</code> array, and report back to the user that the command was misunderstood and didn\u2019t make it in.</p>\n<p>Here is pseudo-code for what I need to write:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create array of Regular Expression words to identify in the text string, such as [/^add to do/, /^ad to do/]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through regex values using .find()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Turn the command into a standardized string - lower case, no final punctuation, trim whitespace</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Check if the command string contains the regex value using .test</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// If so, remove the command phrase ADD TO DO to create new string that is just the todo item</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// add todo to the Pinia store todo-list</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// reset the count of uttered commands to match the length of the todo list array in the store</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// watch for a command and if there is one, add it to the list</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>PHEW! That is a lot of logic to get through. Best to take it one step at a time.</p>\n<h3 id="create-a-set-of-regular-expressions">Create a Set of Regular Expressions</h3>\n<p>I want to analyze the command string such as \u201CAdd to do walk the dog\u201D for the three words \u201Cadd to do\u201D. I will:</p>\n<ul>\n<li>Create a regular expression by enclosing it within slashes <code is:raw>/-/</code></li>\n<li>Use the character <code is:raw>^</code> before the command phrase to identify that the phrase should be at the beginning of the string</li>\n</ul>\n<p>So the regular expression for \u201Cadd to do\u201D that I will use is <code is:raw>/^add to do/</code>.</p>\n<p>However, since there is the possibility that Deepgram could transcribe this with \u2018ad\u2019 instead of \u2018add\u2019 (seems unlikely, but I want to be prepared), I\u2019ll also use <code is:raw>/^ad to do/</code>. In fact, I\u2019ll match to anything that could be a homophone.</p>\n<p>I need an array to create a set of all the options. (The reason I don\u2019t include something like <code is:raw>/^add two do/</code> is because it\u2019s not grammatically correct, and Deepgram is smart enough to know not to transcribe things as ungrammatical.)</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span></code></pre>\n<h3 id="use-the-array-method-find">Use the Array Method .find()</h3>\n<p>I\u2019ll use the array method <code is:raw>.find</code> to loop through the array of regular expressions. It will search for the first item in the array that matches. If it finds one, there\u2019s no need to continue looping through since all we need is one match:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// loop through array to find first match:</span></span>\n<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {})</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="write-a-method-to-standardize-the-command-string">Write a Method to Standardize the Command String</h3>\n<p>I want the command to be lowercase, to not include periods, commas, question marks, or quotation marks, and to not have extra whitespace at the end. (I could entirely turn off punctuation in Deepgram, but I like the transcript to include apostrophes in words such as \u201Cshe\u2019s.\u201C)</p>\n<p>I\u2019ll create a function to take the command string and standardize it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">punctuation</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF"> /</span><span style="color: #79C0FF">[.,?&quot;]</span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">g</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">change</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> command.</span><span style="color: #D2A8FF">toLowerCase</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(punctuation, </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> change</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Notice that I used another regular expression, <code is:raw>/[.,?"]+/g</code>. This paired with the <code is:raw>replace</code> method will search for any of those punctuation marks throughout the entire string and replace them with<code is:raw>""</code> (which is nothing).</p>\n<p>Then I use this <code is:raw>standardizeUtterance</code> function inside the <code is:raw>addTodo</code> function. I\u2019ll add it before the loop so that it doesn\u2019t run for every loop:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// use item for more logic</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="test-that-the-item-matches-the-regular-expression">Test that the Item Matches the Regular Expression</h3>\n<p>I\u2019ll write an <code is:raw>if</code> statement to say that if the string starts with the regular expression command such as <code is:raw>/^add to do/</code>, then do something else (the something else will involve adding it to the to-do list).</p>\n<p>I use the method <code is:raw>.test</code>, which is a javascript method used to match a regular expression with a string, returning <code is:raw>true</code> or <code is:raw>false</code> depending on if there is a match or not.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>\n<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h3 id="remove-the-command-phrase-from-the-string">Remove the Command Phrase from the String</h3>\n<p>If there is a match, I will want to add the string to the to-do list. But right now the whole string also contains the command phrase \u201Cadd to do\u201D as in the sentence \u201CAdd to do walk the dog.\u201D I do not want \u201Cadd to do\u201D to be part of the string that goes into the to-do list array in the store.</p>\n<p>I\u2019ll write a function that takes the string and removes the phrase. I\u2019ll need to give it both the full command, and the regular expression (which is the command phrase). The method <code is:raw>replace</code> will search for the phrase and replace it with <code is:raw>""</code>, i.e., nothing.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">change</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> command.</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(reg, </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> change</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then I add it to <code is:raw>addTodo</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg);</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  });</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="add-the-to-do-item-to-the-to-do-list-array">Add the To-Do Item to the To-Do List Array</h3>\n<p>I\u2019m almost done! This is the most important step. I can add the to-do item to the list in the store.</p>\n<p>I have to go back up to the start of the <code is:raw>script</code> and import the store. I also need to run the store function and set it to a variable that I can use (I\u2019ll set it to <code is:raw>store</code>)</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref, watch </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">import useDeepgramSocket from &quot;@/composables/useDeepgramSocket&quot;;</span></span>\n<span class="line"><span style="color: #C9D1D9">// import store:</span></span>\n<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #8B949E">// run function and set to variable:</span></span>\n<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>\n<span class="line"><span style="color: #C9D1D9">    });</span></span>\n<span class="line"><span style="color: #FF7B72">}</span></span></code></pre>\n<p>Then inside <code is:raw>addTodo</code> I will use the <code is:raw>store.addTodo</code> function that is already in the store as an action (I created it in the first post in this series.)</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// add to store</span></span>\n<span class="line"><span style="color: #C9D1D9">    store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(todo)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Now the logic is there to add the item to the to-do list. I just need to do one more thing to make it show up on the screen.</p>\n<h3 id="watch-for-a-command-add-it-to-the-list">Watch For a Command, Add it To The List</h3>\n<p>Right now, the <code is:raw>addTodo</code> function with all the logic to add an item to the list never runs. I need to make it run somehow.</p>\n<p>Originally, I set up Deepgram to turn on when the button is clicked. When the logic runs to create the WebSocket connection to Deepgram, I also get a value from it that I defined as <code is:raw>DG_transcript</code>. This value holds the transcript string that comes back after a user says something such as \u201CAdd to do walk the dog\u201D.</p>\n<p>I want to trigger <code is:raw>addTodo</code> to run <strong>every time a new command is said</strong>. And I know I\u2019ll be using that transcript for logic to keep track of how many times a command has been said (I\u2019ll go over that in the next section). So I\u2019m going to create a ref in this <code is:raw>TodoSpeech.vue</code> component called <code is:raw>utterance</code>, which will stay in sync with the <code is:raw>DG_transcript</code> from the <code is:raw>useDeepgramSocket.js</code> composable.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside setup() function in TodoSpeech.vue</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">DG_socket</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">openStream</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">closeStream</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #8B949E">// create ref</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(DG_transcript)</span></span></code></pre>\n<p>Now the <code is:raw>utterance</code> ref is in sync with the transcript that comes from Deepgram. I can watch that <code is:raw>utterance</code> ref for changes, and if there is a change, the <code is:raw>addTodo</code> function will run.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Now when I use the voice-control feature to add an item to the list, I see it show up on the screen. Woo-hoo!</p>\n<h2 id="dealing-with-misunderstood-commands">Dealing with Misunderstood Commands</h2>\n<p>Automatic Speech Recognition technology has gotten really good, but there can still be mistakes. People might mumble or slur some of the words, or the garbage truck could be making a lot of noise in the background. Deepgram\u2019s ASR technology can handle a lot, but I have to expect that sometimes it will mishear something.</p>\n<p>What if I say \u201CAdd to do walk the dog\u201D, but Deepgram mishears it as \u201CAnd to do walk the dog\u201D? I want to be ready for that and for any other situation. What if the user forgets to add the command and just says \u201CWalk the dog!\u201D</p>\n<p>I\u2019m going to program my app to show a message to the user when this happens. It will display \u201CI didn\u2019t catch that\u201D when it doesn\u2019t hear a match to the command phrase.</p>\n<p>The logic for this will depend on <strong>counting how many times a command has been spoken</strong>. If the speaker says one thing, and it gets added to the list, then the count should be one. But if the speaker says another thing after that, and it doesn\u2019t get added to the list, then the count is at two, but the list is at one. So there was a misunderstanding.</p>\n<p>Here is the logic that will run:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>If a command is given, the count is increased by one. Then the<code is:raw>addTodo</code> function runs.</p>\n<p>Inside <code is:raw>addTodo</code>, I check for a match. If there is a match, it means that an item is added to the list. After it is added to the list, I will reset the count to match the number of items in the list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// add to store</span></span>\n<span class="line"><span style="color: #C9D1D9">      store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(todo)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// reset count</span></span>\n<span class="line"><span style="color: #C9D1D9">      count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>However, in the <code is:raw>if</code> statement above, I test for a match. If it does NOT find a match, none of that logic inside of it runs. So that would result in the count having increased, but the number of items in the to-do list not having increased.</p>\n<p>In that case, I need to write logic to notice that discrepancy and alert the user:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if count doesn&#39;t equal todo list length, the command was misunderstood</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (count.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;I didn&#39;t catch that&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>I don\u2019t want the phrase \u201CI didn\u2019t catch that\u201D to remain on the screen forever. I\u2019ll have it disappear after a second and return to \u201CListening\u201D:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if count doesn&#39;t equal todo list length, the command was misunderstood</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (count.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;I didn&#39;t catch that&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">      deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Listening&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    }, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Now, everything in the watcher is set up to make sure that when a user gives a command, it is either added to the to-do list, or reported back with a message to the user that the command was misunderstood.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="delete-to-do-item-with-voice-control">Delete To-Do Item With Voice-Control</h2>\n<p>The hard part of this is done. I walked through the step-by-step logic to analyze voice-control command strings. Now that I want to delete an item, I can use the same logic.</p>\n<p>I\u2019ll write out the pseudo-code and supply my logic. I won\u2019t go through it step-by-step again since the only thing that will be different is writing the step <strong>to remove an item from the store to-do list</strong> instead of add an item.</p>\n<p>Anyone following along with this post and building the voice-control feature could now take some time to write a <code is:raw>deleteTodo</code> function. I recommend copying the pseudo-code below (the commented-out steps) and then writing each step of the logic.</p>\n<h3 id="pseudo-code">Pseudo-Code:</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create an array of Regular Expression words to identify in the text, such as [/^delete/];</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through regex values using .find</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Turn the command into a standardized string - lower case, no final punctuation, trim whitespace</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Check if the command string contains the regex value using .test()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// If so, remove the command phrase DELETE to create new string that is just the todo item</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through store to-do list and for each item, check if that item matches the new string that is just the todo item</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if item in store todo list matches, delete from store to-do list</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// reset the count of uttered commands to match the length of the todo list array in the store</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// watch for a command to run delete logic</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Here is the code I wrote for this voice-controlled delete logic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deleteRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">delete/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  deleteRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// remove command phrase DELETE</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"><span style="color: #C9D1D9">      store.todoList.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">storeTodo</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// if item in store todo list matches this utterance,</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (storeTodo.item </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// delete from store</span></span>\n<span class="line"><span style="color: #C9D1D9">          store.</span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(storeTodo.id)</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// reset count</span></span>\n<span class="line"><span style="color: #C9D1D9">          count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>And in the watcher:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="check-off-to-do-item-with-voice-control">Check-Off To-Do Item With Voice-Control</h2>\n<p>The logic to check off an item on the list is exactly the same as the logic to delete an item, except instead of calling <code is:raw>store.deleteTodo(storeTodo.id)</code>, I will call <code is:raw>store.toggleCompleted(storeTodo.id)</code>.</p>\n<p>Here is the logic to check-off an item with voice-control:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkOffTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">checkOffRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">check off/</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>\n<span class="line"><span style="color: #C9D1D9">  checkOffRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>\n<span class="line"><span style="color: #C9D1D9">      store.todoList.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">storeTodo</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (storeTodo.item </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> todo) {</span></span>\n<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// toggle completed in store:</span></span>\n<span class="line"><span style="color: #C9D1D9">          store.</span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(storeTodo.id)</span></span>\n<span class="line"><span style="color: #C9D1D9">          count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>And the watcher:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">checkOffTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<h2 id="conclusion">Conclusion</h2>\n<p>That concludes this post on how to add voice-control to a Vue 3 to-do list app. It was well worth the trouble to turn a classic to-do list project into a more exciting voice-based app that uses Deepgram\u2019s speech-to-text API.</p>\n<p>Feel free to reach out with questions on <a href="https://twitter.com/sandra_rodgers_">Twitter</a>. Happy coding!</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Recently I wrote about a project I did to help me learn Pinia, Vue 3’s new official state management system. I built a basic to-do list app:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651517752/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/todo-list-example1.jpg" alt="Example to-do list app"></p>
<p>It dawned on me that a fun way to jazz up this project would be to use Deepgram to make the app <strong>voice-powered</strong> so that a user can <strong>speak</strong> commands to add, delete, or check-off items on the list.</p>
<p>I’m inspired by my colleague Bekah’s series about <a href="https://blog.deepgram.com/freecodecamp-quote-generator-upgrade/">updating portfolio projects</a>. A voice-based to-do list app would be a lot more interesting than a regular to-do list app!</p>
<h2 id="project-overview">Project Overview</h2>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "Build a To-Do List App With Vue 3, Pinia, and Deepgram (SERIES)" }, { "default": () => renderTemplate`<ol><li><a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/" target="_blank">Build a To-do List App with Pinia and Vue 3</a></li>
<li><a href="https://blog.deepgram.com/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/" target="_blank"> Build a Voice Controlled To-Do List App with Deepgram and Vue 3</a></li></ol>` })}
<p>The project I originally did can be found in this <a href="https://github.com/deepgram-devs/todo-pinia">repo</a>, and the accompanying blog post is <a href="https://blog.deepgram.com/build-a-todo-list-with-pinia-and-vue-3/">here</a>. Check it out to build the standard to-do list project with Vue 3 and Pinia.</p>
<p>In this iteration of the project, I’ll continue to use <a href="https://pinia.vuejs.org/">Pinia</a> to manage global state, but I’ll add Deepgram so I can use Deepgram’s speech-to-text API to help me power the voice-control feature. If you want to build this voice-control feature along with me, I’ve created a starting branch <a href="https://github.com/deepgram-devs/todo-pinia-deepgram/tree/starter-branch">here</a>.</p>
<h3 id="deepgram-live-streaming-logic">Deepgram Live Streaming Logic</h3>
<p>There are several articles on Deepgram Docs about how to use Deepgram in Javascript to convert an audio stream of speech into text, including one I wrote about how to use it with Vue 3. I won’t go over in detail here how I built Vue composables to integrate Deepgram’s speech-to-text API. Use these resources or take a look at my repo (in the <a href="https://github.com/deepgram-devs/todo-pinia-deepgram/tree/main/src/composables">composables folder</a>) to learn how I did this using Vue 3 and the Deepgram Node SDK:</p>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "Additional Resources" }, { "default": () => renderTemplate`<ul><li><a href="https://blog.deepgram.com/asynchronous-logic-to-write-a-vue-3-and-deepgram-captions-component/">Asynchronous Logic to Write a Vue 3 and Deepgram Captions Component</a> by <a href="https://blog.deepgram.com/authors/sandra-rodgers/">Sandra Rodgers</a></li>
<li><a href="https://blog.deepgram.com/live-transcription-mic-browser/">Get Live Speech Transcriptions In Your Browser</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li>
<li><a href="https://blog.deepgram.com/protecting-api-key/">Browser Live Transcription - Protecting Your API Key</a> by <a href="https://blog.deepgram.com/authors/kevin-lewis/">Kevin Lewis</a></li></ul>` })}
<h3 id="focus-voice-control-feature">Focus: Voice-Control Feature</h3>
<p>For today’s project, I will focus on dealing with the transcript of text that I get back from Deepgram, analyzing it for speech commands to add, delete, and check off items in the to-do list. This logic will all be part of a voice-control feature.</p>
<h2 id="create-the-component-and-connect-deepgram">Create the Component and Connect Deepgram</h2>
<p>The voice-control feature that I build today will be one component with two main elements:</p>
<ol>
<li>a <code>button</code> that, when clicked, <strong>turns on or off voice-control mode</strong> (i.e., toggles the connection to Deepgram)</li>
<li>a <code>div</code> that contains text which identifies the status of whether Deepgram is <strong>connected and listening</strong>, if it <strong>misheard what was said</strong>, or if it is <strong>not connected</strong>.</li>
</ol>
<p>Here’s a minimally styled version of this project that highlights the component I’ll be building today:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1651517754/blog/2022/05/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/TodoSpeech.png" alt="To-do list app highlighting component"></p>
<p>In the components folder with the other Todo components, I’ll create a component called <code>TodoSpeech.vue</code>. It will be a child component of <code>TodoApp.vue</code>.</p>
<p>In <code>TodoSpeech.vue</code>, I’ll start by adding the button element and status div to the template. I’ll use a speech bubble emoji on the button, and I’ll create an event listener that I plan to program to toggle the Deepgram connection when the button is clicked.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">&lt;!-- in template: --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;toggleListen()&quot;</span><span style="color: #C9D1D9">&gt;💬&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;{{ deepgramStatus }}&lt;/</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>I’ll also create a <code>deepgramStatus</code> ref, which I’ll program to update when Deepgram is connected and ready to receive audio data. The initial value will report that Deepgram is not connected:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in script:</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Deepgram Not Connected&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>I’ll connect to Deepgram using the composable <code>useDeepgramSocket</code> (already built in a previous post), which I import in the script. I also run the composable in the setup function so that it runs at the beginning of the component lifecycle. I destructure four properties off of the composable: <code>DG_socket</code>, <code>DG_transcript</code>, <code>openStream</code>, <code>closeStream</code>.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>
<span class="line"><span style="color: #C9D1D9">import useDeepgramSocket from &quot;@/composables/useDeepgramSocket&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">    let deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Deepgram Not Connected&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    return { deepgramStatus };</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">};</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>The <code>openStream</code> and <code>closeStream</code> methods that I destructured off of the <code>useDeepgramSocket</code> composable will toggle on and off when the button is clicked and <code>toggleListen</code> runs. Notice that I created the <code>isListening</code> ref to update the toggle status:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> isListening </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">toggleListen</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">isListening.value) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">openStream</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">closeStream</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">    isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>I’ll use a watcher to watch the Deepgram socket’s status in the composable. That way, the <code>div</code> in the template will update when I click the button and Deepgram is connecting, connected, or not connected:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(DG_socket, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connecting&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Connecting&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Not Connected&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Voice Controls Off&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Closing connection...&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Closing connection...&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Listening&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Here is the entire component now. I should be able to click the button and see the status change to show the status of the Deepgram connection:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">div</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">@click=&quot;toggleListen()&quot;&gt;💬&lt;/button&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA198">&lt;div&gt;{{</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramStatus</span><span style="color: #C9D1D9"> </span><span style="color: #FFA198">}}&lt;/div&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FFA198">&lt;/div&gt;</span></span>
<span class="line"><span style="color: #FFA198">&lt;/template&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFA198">&lt;script&gt;</span></span>
<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref, watch </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;vue&quot;</span><span style="color: #FFA198">;</span></span>
<span class="line"><span style="color: #79C0FF">import</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">useDeepgramSocket</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;@/composables/useDeepgramSocket&quot;</span><span style="color: #FFA198">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">export</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">default</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    let deepgramStatus </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&quot;Deepgram Not Connected&quot;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">    let isListening </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">toggleListen</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">isListening.value) {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">openStream</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">        isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">closeStream</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">        isListening.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(DG_socket, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Connecting&quot;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Connecting&quot;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Not Connected&quot;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Voice Controls Off&quot;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (DG_socket.value </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Closing connection...&quot;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Closing connection...&quot;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">      } </span><span style="color: #FF7B72">else</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;Listening&quot;</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">      }</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    return { deepgramStatus, toggleListen };</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">}</span><span style="color: #FFA198">,</span></span>
<span class="line"><span style="color: #FFA198">};</span></span>
<span class="line"><span style="color: #FFA198">&lt;/script&gt;</span></span></code></pre>
<h2 id="analyze-deepgram-response-for-voice-commands">Analyze Deepgram Response for Voice Commands</h2>
<p>The logic to add, delete, or check-off an item from the list will be based on what the speaker says. I need to program this application to listen for commands such as “add!” or “delete!“.</p>
<p>To do that, I will need to understand the form of the text transcript I’ll be getting back from Deepgram.</p>
<h3 id="deepgram-audio-stream-to-text">Deepgram Audio Stream to Text</h3>
<p>When I started using Deepgram to transcribe audio streams, I was surprised that Deepgram was able to send back the text almost immediately, after each phrase or sentence rather than waiting until the socket closes and sending back the entire transcription.</p>
<p>How is it able to send a response back continuously, as the audio is streaming, and how is it able to send meaningful chunks, such as at the end of a sentence or a pause in speech? This is thanks to two of its features: <strong>Endpointing</strong> and <strong>Interim Results</strong>.</p>
<p>To put it very simply, <strong>Endpointing</strong> is how Deepgram uses pauses in speech to process that speech into meaningful text chunks. It can hear longer silences in speech and use them to identify finished thoughts, i.e., phrases or sentences.</p>
<p><strong>Interim results</strong> is Deepgram analyzing speech as accurately and as quickly as possible with the little bits of info it gets on the fly; then, after it gets more data to work with, it corrects the transcription. That is why as one or two words come back, one might be wrong, but then when the sentence comes back, the whole thing is more accurate.</p>
<p>In my case, I’m using the <strong>Interim Results</strong> property <code>is_final</code> to identify a complete voice command. When <code>is_final</code> is <code>true</code>, it means I’m dealing with a full statement or a complete command such as “Add walk the dog to the list!” The <code>is_final</code> property breaks the transcript up at the end of a fully-processed statement:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// in useDeepgramSocket.js:</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> received.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> received.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">  DG_transcript.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This is a pretty cool feature because it means that a user can speak a command, such as “Add walk the dog to the list”, and Deepgram can identify that it is the end of the command based on the flow of the speech. It will send me that sentence back to deal with in text form, and then I can use logic to dig in and find the specific command word, such as <em>add</em> or <em>delete</em>. Nice!</p>
${renderComponent($$result, "Panel", Panel, { "type": "info", "title": "Additional Resources" }, { "default": () => renderTemplate`<ul><li><a href="https://developers.deepgram.com/documentation/guides/understand-endpointing-interim-results/">Understanding Endpointing and Interim Results When Transcribing Live Streaming Audio</a></li>
<li><a href="https://developers.deepgram.com/documentation/features/interim-results/">Interim Results</a></li>
<li><a href="https://developers.deepgram.com/documentation/features/endpointing/"> Endpointing</a></li></ul>` })}
<h2 id="add-to-do-item-with-voice-control">Add To-Do Item With Voice-Control</h2>
<p>Now I’ll write logic to analyze a voice command for the words “add to do”, and if the command has those words (such as in the command “ADD TO DO walk the dog!”), the item will be added to the <code>todoList</code> array in the Pinia store.</p>
<p>I also want to keep track of the number of commands given, so if Deepgram doesn’t transcribe the command correctly due to problems interpreting the speech, I can check that count value against the number of items in the store <code>todoList</code> array, and report back to the user that the command was misunderstood and didn’t make it in.</p>
<p>Here is pseudo-code for what I need to write:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create array of Regular Expression words to identify in the text string, such as [/^add to do/, /^ad to do/]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through regex values using .find()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Turn the command into a standardized string - lower case, no final punctuation, trim whitespace</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Check if the command string contains the regex value using .test</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// If so, remove the command phrase ADD TO DO to create new string that is just the todo item</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// add todo to the Pinia store todo-list</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// reset the count of uttered commands to match the length of the todo list array in the store</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// watch for a command and if there is one, add it to the list</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>PHEW! That is a lot of logic to get through. Best to take it one step at a time.</p>
<h3 id="create-a-set-of-regular-expressions">Create a Set of Regular Expressions</h3>
<p>I want to analyze the command string such as “Add to do walk the dog” for the three words “add to do”. I will:</p>
<ul>
<li>Create a regular expression by enclosing it within slashes <code>/-/</code></li>
<li>Use the character <code>^</code> before the command phrase to identify that the phrase should be at the beginning of the string</li>
</ul>
<p>So the regular expression for “add to do” that I will use is <code>/^add to do/</code>.</p>
<p>However, since there is the possibility that Deepgram could transcribe this with ‘ad’ instead of ‘add’ (seems unlikely, but I want to be prepared), I’ll also use <code>/^ad to do/</code>. In fact, I’ll match to anything that could be a homophone.</p>
<p>I need an array to create a set of all the options. (The reason I don’t include something like <code>/^add two do/</code> is because it’s not grammatically correct, and Deepgram is smart enough to know not to transcribe things as ungrammatical.)</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span></code></pre>
<h3 id="use-the-array-method-find">Use the Array Method .find()</h3>
<p>I’ll use the array method <code>.find</code> to loop through the array of regular expressions. It will search for the first item in the array that matches. If it finds one, there’s no need to continue looping through since all we need is one match:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// loop through array to find first match:</span></span>
<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {})</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h3 id="write-a-method-to-standardize-the-command-string">Write a Method to Standardize the Command String</h3>
<p>I want the command to be lowercase, to not include periods, commas, question marks, or quotation marks, and to not have extra whitespace at the end. (I could entirely turn off punctuation in Deepgram, but I like the transcript to include apostrophes in words such as “she’s.“)</p>
<p>I’ll create a function to take the command string and standardize it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">punctuation</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF"> /</span><span style="color: #79C0FF">[.,?&quot;]</span><span style="color: #FF7B72">+</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">g</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">change</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> command.</span><span style="color: #D2A8FF">toLowerCase</span><span style="color: #C9D1D9">().</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(punctuation, </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> change</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Notice that I used another regular expression, <code>/[.,?"]+/g</code>. This paired with the <code>replace</code> method will search for any of those punctuation marks throughout the entire string and replace them with<code>""</code> (which is nothing).</p>
<p>Then I use this <code>standardizeUtterance</code> function inside the <code>addTodo</code> function. I’ll add it before the loop so that it doesn’t run for every loop:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>
<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// use item for more logic</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h3 id="test-that-the-item-matches-the-regular-expression">Test that the Item Matches the Regular Expression</h3>
<p>I’ll write an <code>if</code> statement to say that if the string starts with the regular expression command such as <code>/^add to do/</code>, then do something else (the something else will involve adding it to the to-do list).</p>
<p>I use the method <code>.test</code>, which is a javascript method used to match a regular expression with a string, returning <code>true</code> or <code>false</code> depending on if there is a match or not.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>
<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<h3 id="remove-the-command-phrase-from-the-string">Remove the Command Phrase from the String</h3>
<p>If there is a match, I will want to add the string to the to-do list. But right now the whole string also contains the command phrase “add to do” as in the sentence “Add to do walk the dog.” I do not want “add to do” to be part of the string that goes into the to-do list array in the store.</p>
<p>I’ll write a function that takes the string and removes the phrase. I’ll need to give it both the full command, and the regular expression (which is the command phrase). The method <code>replace</code> will search for the phrase and replace it with <code>""</code>, i.e., nothing.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">change</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> command.</span><span style="color: #D2A8FF">replace</span><span style="color: #C9D1D9">(reg, </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">trim</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> change</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Then I add it to <code>addTodo</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg);</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  });</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h3 id="add-the-to-do-item-to-the-to-do-list-array">Add the To-Do Item to the To-Do List Array</h3>
<p>I’m almost done! This is the most important step. I can add the to-do item to the list in the store.</p>
<p>I have to go back up to the start of the <code>script</code> and import the store. I also need to run the store function and set it to a variable that I can use (I’ll set it to <code>store</code>)</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> ref, watch </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;vue&quot;;</span></span>
<span class="line"><span style="color: #C9D1D9">import useDeepgramSocket from &quot;@/composables/useDeepgramSocket&quot;;</span></span>
<span class="line"><span style="color: #C9D1D9">// import store:</span></span>
<span class="line"><span style="color: #C9D1D9">import </span><span style="color: #FF7B72">{</span><span style="color: #C9D1D9"> useTodoListStore </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9"> from &quot;../store/useTodoListStore&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">export default </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">setup</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">    const { DG_socket, DG_transcript, openStream, closeStream } </span><span style="color: #FF7B72">=</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">     </span><span style="color: #8B949E">// run function and set to variable:</span></span>
<span class="line"><span style="color: #C9D1D9">    const store </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">useTodoListStore</span><span style="color: #C9D1D9">();</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">...</span></span>
<span class="line"><span style="color: #C9D1D9">    });</span></span>
<span class="line"><span style="color: #FF7B72">}</span></span></code></pre>
<p>Then inside <code>addTodo</code> I will use the <code>store.addTodo</code> function that is already in the store as an action (I created it in the first post in this series.)</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside addTodo method:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// add to store</span></span>
<span class="line"><span style="color: #C9D1D9">    store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(todo)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Now the logic is there to add the item to the to-do list. I just need to do one more thing to make it show up on the screen.</p>
<h3 id="watch-for-a-command-add-it-to-the-list">Watch For a Command, Add it To The List</h3>
<p>Right now, the <code>addTodo</code> function with all the logic to add an item to the list never runs. I need to make it run somehow.</p>
<p>Originally, I set up Deepgram to turn on when the button is clicked. When the logic runs to create the WebSocket connection to Deepgram, I also get a value from it that I defined as <code>DG_transcript</code>. This value holds the transcript string that comes back after a user says something such as “Add to do walk the dog”.</p>
<p>I want to trigger <code>addTodo</code> to run <strong>every time a new command is said</strong>. And I know I’ll be using that transcript for logic to keep track of how many times a command has been said (I’ll go over that in the next section). So I’m going to create a ref in this <code>TodoSpeech.vue</code> component called <code>utterance</code>, which will stay in sync with the <code>DG_transcript</code> from the <code>useDeepgramSocket.js</code> composable.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// inside setup() function in TodoSpeech.vue</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">DG_socket</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">DG_transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">openStream</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">closeStream</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #D2A8FF">useDeepgramSocket</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #8B949E">// create ref</span></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">ref</span><span style="color: #C9D1D9">(DG_transcript)</span></span></code></pre>
<p>Now the <code>utterance</code> ref is in sync with the transcript that comes from Deepgram. I can watch that <code>utterance</code> ref for changes, and if there is a change, the <code>addTodo</code> function will run.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Now when I use the voice-control feature to add an item to the list, I see it show up on the screen. Woo-hoo!</p>
<h2 id="dealing-with-misunderstood-commands">Dealing with Misunderstood Commands</h2>
<p>Automatic Speech Recognition technology has gotten really good, but there can still be mistakes. People might mumble or slur some of the words, or the garbage truck could be making a lot of noise in the background. Deepgram’s ASR technology can handle a lot, but I have to expect that sometimes it will mishear something.</p>
<p>What if I say “Add to do walk the dog”, but Deepgram mishears it as “And to do walk the dog”? I want to be ready for that and for any other situation. What if the user forgets to add the command and just says “Walk the dog!”</p>
<p>I’m going to program my app to show a message to the user when this happens. It will display “I didn’t catch that” when it doesn’t hear a match to the command phrase.</p>
<p>The logic for this will depend on <strong>counting how many times a command has been spoken</strong>. If the speaker says one thing, and it gets added to the list, then the count should be one. But if the speaker says another thing after that, and it doesn’t get added to the list, then the count is at two, but the list is at one. So there was a misunderstanding.</p>
<p>Here is the logic that will run:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>If a command is given, the count is increased by one. Then the<code>addTodo</code> function runs.</p>
<p>Inside <code>addTodo</code>, I check for a match. If there is a match, it means that an item is added to the list. After it is added to the list, I will reset the count to match the number of items in the list:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">addRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">ad to do/</span><span style="color: #C9D1D9">,</span><span style="color: #A5D6FF"> /</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">add to dew/</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>
<span class="line"><span style="color: #C9D1D9">  addRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// remove command phrase ADD TO DO</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// add to store</span></span>
<span class="line"><span style="color: #C9D1D9">      store.</span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(todo)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// reset count</span></span>
<span class="line"><span style="color: #C9D1D9">      count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>However, in the <code>if</code> statement above, I test for a match. If it does NOT find a match, none of that logic inside of it runs. So that would result in the count having increased, but the number of items in the to-do list not having increased.</p>
<p>In that case, I need to write logic to notice that discrepancy and alert the user:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if count doesn&#39;t equal todo list length, the command was misunderstood</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (count.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;I didn&#39;t catch that&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>I don’t want the phrase “I didn’t catch that” to remain on the screen forever. I’ll have it disappear after a second and return to “Listening”:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if count doesn&#39;t equal todo list length, the command was misunderstood</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (count.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&quot;I didn&#39;t catch that&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">setTimeout</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">      deepgramStatus.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;Listening&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    }, </span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Now, everything in the watcher is set up to make sure that when a user gives a command, it is either added to the to-do list, or reported back with a message to the user that the command was misunderstood.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<h2 id="delete-to-do-item-with-voice-control">Delete To-Do Item With Voice-Control</h2>
<p>The hard part of this is done. I walked through the step-by-step logic to analyze voice-control command strings. Now that I want to delete an item, I can use the same logic.</p>
<p>I’ll write out the pseudo-code and supply my logic. I won’t go through it step-by-step again since the only thing that will be different is writing the step <strong>to remove an item from the store to-do list</strong> instead of add an item.</p>
<p>Anyone following along with this post and building the voice-control feature could now take some time to write a <code>deleteTodo</code> function. I recommend copying the pseudo-code below (the commented-out steps) and then writing each step of the logic.</p>
<h3 id="pseudo-code">Pseudo-Code:</h3>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Create an array of Regular Expression words to identify in the text, such as [/^delete/];</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through regex values using .find</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Turn the command into a standardized string - lower case, no final punctuation, trim whitespace</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Check if the command string contains the regex value using .test()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// If so, remove the command phrase DELETE to create new string that is just the todo item</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Loop through store to-do list and for each item, check if that item matches the new string that is just the todo item</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// if item in store todo list matches, delete from store to-do list</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// reset the count of uttered commands to match the length of the todo list array in the store</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// watch for a command to run delete logic</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Here is the code I wrote for this voice-controlled delete logic:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deleteRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">delete/</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// clean up utterance</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>
<span class="line"><span style="color: #C9D1D9">  deleteRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// remove command phrase DELETE</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>
<span class="line"><span style="color: #C9D1D9">      store.todoList.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">storeTodo</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// if item in store todo list matches this utterance,</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (storeTodo.item </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> todo) {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// delete from store</span></span>
<span class="line"><span style="color: #C9D1D9">          store.</span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(storeTodo.id)</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// reset count</span></span>
<span class="line"><span style="color: #C9D1D9">          count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>And in the watcher:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<h2 id="check-off-to-do-item-with-voice-control">Check-Off To-Do Item With Voice-Control</h2>
<p>The logic to check off an item on the list is exactly the same as the logic to delete an item, except instead of calling <code>store.deleteTodo(storeTodo.id)</code>, I will call <code>store.toggleCompleted(storeTodo.id)</code>.</p>
<p>Here is the logic to check-off an item with voice-control:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkOffTodo</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">command</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">checkOffRegEx</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #A5D6FF">/</span><span style="color: #FF7B72">^</span><span style="color: #A5D6FF">check off/</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">item</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">standardizeUtterance</span><span style="color: #C9D1D9">(command)</span></span>
<span class="line"><span style="color: #C9D1D9">  checkOffRegEx.</span><span style="color: #D2A8FF">find</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">reg</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (reg.</span><span style="color: #D2A8FF">test</span><span style="color: #C9D1D9">(item)) {</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">todo</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">removeCommandPhrase</span><span style="color: #C9D1D9">(item, reg)</span></span>
<span class="line"><span style="color: #C9D1D9">      store.todoList.</span><span style="color: #D2A8FF">forEach</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">storeTodo</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (storeTodo.item </span><span style="color: #FF7B72">===</span><span style="color: #C9D1D9"> todo) {</span></span>
<span class="line"><span style="color: #C9D1D9">          </span><span style="color: #8B949E">// toggle completed in store:</span></span>
<span class="line"><span style="color: #C9D1D9">          store.</span><span style="color: #D2A8FF">toggleCompleted</span><span style="color: #C9D1D9">(storeTodo.id)</span></span>
<span class="line"><span style="color: #C9D1D9">          count.value </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> store.todoList.</span><span style="color: #79C0FF">length</span></span>
<span class="line"><span style="color: #C9D1D9">        }</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>And the watcher:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">watch</span><span style="color: #C9D1D9">(utterance, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (utterance.value </span><span style="color: #FF7B72">!==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    count.value</span><span style="color: #FF7B72">++</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">addTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">deleteTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">checkOffTodo</span><span style="color: #C9D1D9">(utterance.value)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">alertMisunderstood</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>That concludes this post on how to add voice-control to a Vue 3 to-do list app. It was well worth the trouble to turn a classic to-do list project into a more exciting voice-based app that uses Deepgram’s speech-to-text API.</p>
<p>Feel free to reach out with questions on <a href="https://twitter.com/sandra_rodgers_">Twitter</a>. Happy coding!</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/build-a-voice-controlled-to-do-list-app-with-deepgram-and-vue-3/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
