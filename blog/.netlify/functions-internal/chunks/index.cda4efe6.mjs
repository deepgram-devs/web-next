import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
/* empty css                           */import 'axios';
/* empty css                          *//* empty css                           *//* empty css                          *//* empty css                              *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           *//* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "establish-a-socket-connection", "text": "Establish a Socket Connection" }, { "depth": 2, "slug": "access-and-send-audio", "text": "Access and Send Audio" }, { "depth": 2, "slug": "listening-for-events", "text": "Listening for Events" }, { "depth": 2, "slug": "setting-up-deepgram", "text": "Setting Up Deepgram" }, { "depth": 2, "slug": "getting-live-deepgram-transcripts", "text": "Getting Live Deepgram Transcripts" }, { "depth": 2, "slug": "triggering-song-search", "text": "Triggering Song Search" }, { "depth": 2, "slug": "searching-for-songs", "text": "Searching for Songs" }, { "depth": 2, "slug": "displaying-results", "text": "Displaying Results" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "Love it or hate it, Christmas is a period for music, and that comes the frustrating scenario of knowing lyrics but not quite knowing the song. Of course, you could just search the lyrics, but where's the fun in that? In this project, we will warm up our vocal cords and use Deepgram and the Genius Song Lyrics API to build a website that should correctly guess spoken or sung lyrics.\n\nWhile doing this, we'll learn how to stream microphone data to Deepgram via a server, so you don't need to worry about exposing your API Key.\n\nThis is what we'll be building:\n\n![A diagram showing 9 steps. 1 - emit mic data from browser to server using socket.io. 2 - send mic data from server to Deepgram via Deepgram SDK. 3 - Deepgram returns utterances to server. 4 - the server stores utterances. 5 - a user presses a button and emits search event to server. 6 - server searches song on Genius. 7 - Genius sends response to server. 8 - Server emits response to browser. 9 - browser shows result. Steps 1-3 have a green background and steps 4-9 have a blue background.](https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/diagram.png)\n\nThe green area is one set of steps that gets us to the point of transcripts. The blue area covers searching for and displaying songs. Don't worry if that looks like a lot - we'll take it step by step. If you want to look at the final project code, you can find it at https://github.com/deepgram-devs/song-search.\n\n## Before We Start\n\nYou will need:\n\n* Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n* A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n* A Genius API Access Token - [get one here](https://genius.com/api-clients).\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n```\nnpm install dotenv @deepgram/sdk express socket.io axios\n```\n\nCreate a `.env` file and add the following:\n\n```\nDG_KEY=replace_with_deepgram_api_key\nGENIUS_TOKEN=replace_with_genius_access_token\n```\n\nCreate an `index.js` file, a folder called `public`, and inside of the public folder create an `index.html` file. In `index.html` create a boilerplate HTML file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    {/*<!-- Further code goes here -->*/}\n  </body>\n</html>\n```\n\n## Establish a Socket Connection\n\nThe socket.io library can establish a two-way connection between our server (`index.js`) and client (`index.html`). Once connected, we can push data between the two in real-time. We will use this to send data from the user's microphone to our server to be processed by Deepgram and show results from the server logic.\n\nIn the `index.html` `<body>` tag:\n\n```html\n<script src=\"/socket.io/socket.io.js\"><\/script>\n<script>\n  const socket = io()\n  // Further code goes here\n<\/script>\n```\n\nIn `index.js` create a combined express and socket.io server and listen for connections:\n\n```js\n// Require\nconst express = require('express')\nconst app = express()\nconst http = require('http').createServer(app)\nconst io = require('socket.io')(http)\n\n// Configure\napp.use(express.static('public'))\n\n// Logic\nio.on('connection', (socket) => {\n  console.log(`Connected at ${new Date().toISOString()}`)\n})\n\n// Run\nhttp.listen(3000, console.log(`Started at ${new Date().toISOString()}`))\n```\n\nFor this tutorial, I would leave the comments in as I refer to sections later by their names. Start the server in your terminal by navigating to the directory and running `node index.js`. Open your browser to `http://localhost:3000`, and you should see 'Connected at `date`' in your terminal. Once this connection is established, we can send and listen for events on both the server and the client.\n\n## Access and Send Audio\n\nIn [a blog post last month](/blog/2021/11/live-transcription-mic-browser/) we covered how to access and retreive data from user's mic in a web browser. Each of the steps are covered there, so we'll be lifting the examples from it without a deep explanation. In `index.html`:\n\n```js\nnavigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n  const mediaRecorder = new MediaRecorder(stream)\n\n  mediaRecorder.addEventListener('dataavailable', (event) => {\n    if (event.data.size > 0) {\n      socket.emit('microphone-stream', event.data)\n    }\n  })\n  mediaRecorder.start(1000)\n})\n```\n\nThis will immediately ask for access to the microphone and begin accessing data once permitted. When emitting events with socket.io, we can specify a specific event name which we can then listen for on the server. Here, we have called it `microphone-stream` and send it with the raw mic data.\n\n## Listening for Events\n\nIn `index.js` inside of the connection and below the `console.log()` statement:\n\n```js\nsocket.on('microphone-stream', (data) => {\n  console.log('microphone-stream event')\n})\n```\n\nRestart your server and then refresh your web page. Once you grant access to your microphone, you should see a steady stream of logs indicating that data is sent from your browser to the server. You may stop your server while we continue with the next step.\n\n![A terminal showing the server starting, a client connecting, and then 4 microphone stream event logs.](https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/microphone-stream-event.png)\n\n## Setting Up Deepgram\n\nAt the top of the Require section in `index.js` add `dotenv` which will allow access to the `.env` file values.\n\n```js\nrequire('dotenv').config()\n```\n\nAt the bottom of the Require section require the Deepgram Node.js SDK which we installed earlier:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nFinally, in configure, initialize the SDK and create a new live transcription service:\n\n```js\nconst deepgram = new Deepgram(process.env.DG_KEY)\nconst deepgramLive = deepgram.transcription.live({ utterances: true })\n```\n\n## Getting Live Deepgram Transcripts\n\nInside of the `microphone-stream` event handler comment out the `console.log()`. In it's place, take the provided data and send it directly to Deepgram:\n\n```js\nsocket.on('microphone-stream', (data) => {\n  // console.log('microphone-stream event')\n  deepgramLive.send(data)\n})\n\n// Further code goes here\n```\n\n`deepgramLive` provides an event when Deepgram has a transcript ready, and like the [browser live transcription blog post](/blog/2021/11/live-transcription-mic-browser/) we will wait for the final transcript for each of our utterances (phrases).\n\n```js\nlet transcript = ''\ndeepgramLive.addListener('transcriptReceived', (data) => {\n  const result = JSON.parse(data)\n  const utterance = result.channel.alternatives[0].transcript\n  if (result.is_final && utterance) {\n    transcript += ' ' + utterance\n    console.log(transcript)\n  }\n})\n```\n\nRestart your server, refresh your browser, and speak into your microphone. You should see a transcript appear in your terminal.\n\n![A terminal showing give phrases with words spoken, with each adding words on to the last and getting longer.](https://res.cloudinary.com/deepgram/image/upload/v1637178714/blog/2021/12/song-search-js/transcript-terminal-log.png)\n\n## Triggering Song Search\n\nBecause a set of lyrics can take up multiple utterances, we need to have a way to indicate that we are finished and the search should take place. We will attach an event listener to a button that, when pressed, will emit an event.\n\nIn `index.html` add a `<button>` at the top of your `<body>` tag:\n\n```\n<button>Search Song</button>\n```\n\nJust below `mediaRecorder.start(1000)` add the following logic:\n\n```js\nconst button = document.querySelector('button')\nbutton.addEventListener('click', () => {\n  button.remove()\n  mediaRecorder.stop()\n  socket.emit('search')\n})\n```\n\nWhen the button is pressed, it will be removed from the DOM, so we only can click it once; we stop the mediaRecorder (and, in doing so, stop emitting the `microphone-stream` events), and emit a new event called `search`.\n\nIn `index.js` add a new socket event listener just after the block for `microphone-stream` is closed:\n\n```js\nsocket.on('search', async () => {\n  console.log('search event', transcript)\n  // Further code here\n})\n```\n\nRestart your server and refresh the browser. Speak a few phrases and click the button. You should see the search event take place with the final transcript logged.\n\n## Searching for Songs\n\nWe will use the [Genius API](https://docs.genius.com) to search for songs based on lyrics. To make this API call, we'll utilize Node package `axios`. In the Require section of our `index.js` file, add the package:\n\n```js\nconst axios = require('axios')\n```\n\nAnd make the API call when the `search` event is received:\n\n```js\nconst { data } = await axios({\n  method: 'GET',\n  url: `https://api.genius.com/search?q=${transcript}`,\n  headers: {\n    Authorization: `Bearer ${process.env.GENIUS_TOKEN}`,\n  },\n})\nconst topThree = data.response.hits.slice(0, 3)\nconsole.log(topThree)\n\n// Further code here\n```\n\nRestart your server and refresh your browser.\n\n![A terminal showing an array with several items. Each item contains metadata for one song.](https://res.cloudinary.com/deepgram/image/upload/v1637178713/blog/2021/12/song-search-js/songs-returned.png)\n\n**Yay!**\n\n## Displaying Results\n\nThe final step is to show the output to the user by emitting an event from the server back to the client. Doing this is nearly identical to the other direction. In `index.js`:\n\n```js\nsocket.emit('result', topThree)\n```\n\nIn `index.html` add an empty `<ul>` under the `<button>`:\n\n```\n<ul></ul>\n```\n\nAt the bottom of the `<script>` tag, below all other code, listen for the `results` event and add items to the new list:\n\n```js\nsocket.on('results', (data) => {\n  const ul = document.querySelector('ul')\n  for (let song of data) {\n    const li = `\n    <li>\n      <img src=\"${song.result.song_art_image_url}\">\n      <p>${song.result.full_title}</p>\n    </li>\n  `\n    ul.innerHTML += li\n  }\n})\n```\n\nBefore we try this add this minimal styling inside of your `<head>` tag:\n\n```html\n<style>\n  ul {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-gap: 4em;\n    list-style: none;\n  }\n  img {\n    width: 100%;\n  }\n</style>\n```\n\nRestart your server, refresh your browser, and try it out! You can display any of the information provided by Genius.\n\n<YouTube id=\"IFuJiNNoYYw\"></YouTube>\n\nNo one ever said I was a good singer.\n\n## Wrapping Up\n\nThere are quite a lot of improvements you could make here:\n\n* Show utterances to users in the browser\n* Do searches as soon as utterances are available, and update them as more words are said\n* Allow multiple songs without needing to 'reset' by refreshing\n* Give it a festive theme\n\nThis post has also introduced you to the code required to stream your microphone from the browser to Deepgram via a server, thus protecting your API Key from being exposed.\n\nWe'll have some more posts coming out before Christmas, but from me, this is it until January, so please have a wonderful festive period and a wonderful new year. The complete project is available at https://github.com/deepgram-devs/song-search, and if you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).", "html": '<p>Love it or hate it, Christmas is a period for music, and that comes the frustrating scenario of knowing lyrics but not quite knowing the song. Of course, you could just search the lyrics, but where\u2019s the fun in that? In this project, we will warm up our vocal cords and use Deepgram and the Genius Song Lyrics API to build a website that should correctly guess spoken or sung lyrics.</p>\n<p>While doing this, we\u2019ll learn how to stream microphone data to Deepgram via a server, so you don\u2019t need to worry about exposing your API Key.</p>\n<p>This is what we\u2019ll be building:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/diagram.png" alt="A diagram showing 9 steps. 1 - emit mic data from browser to server using socket.io. 2 - send mic data from server to Deepgram via Deepgram SDK. 3 - Deepgram returns utterances to server. 4 - the server stores utterances. 5 - a user presses a button and emits search event to server. 6 - server searches song on Genius. 7 - Genius sends response to server. 8 - Server emits response to browser. 9 - browser shows result. Steps 1-3 have a green background and steps 4-9 have a blue background."></p>\n<p>The green area is one set of steps that gets us to the point of transcripts. The blue area covers searching for and displaying songs. Don\u2019t worry if that looks like a lot - we\u2019ll take it step by step. If you want to look at the final project code, you can find it at <a href="https://github.com/deepgram-devs/song-search">https://github.com/deepgram-devs/song-search</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A Genius API Access Token - <a href="https://genius.com/api-clients">get one here</a>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install dotenv @deepgram/sdk express socket.io axios</span></span></code></pre>\n<p>Create a <code is:raw>.env</code> file and add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DG_KEY=replace_with_deepgram_api_key</span></span>\n<span class="line"><span style="color: #c9d1d9">GENIUS_TOKEN=replace_with_genius_access_token</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file, a folder called <code is:raw>public</code>, and inside of the public folder create an <code is:raw>index.html</code> file. In <code is:raw>index.html</code> create a boilerplate HTML file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">&lt;!-- Further code goes here --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="establish-a-socket-connection">Establish a Socket Connection</h2>\n<p>The socket.io library can establish a two-way connection between our server (<code is:raw>index.js</code>) and client (<code is:raw>index.html</code>). Once connected, we can push data between the two in real-time. We will use this to send data from the user\u2019s microphone to our server to be processed by Deepgram and show results from the server logic.</p>\n<p>In the <code is:raw>index.html</code> <code is:raw>&lt;body&gt;</code> tag:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In <code is:raw>index.js</code> create a combined express and socket.io server and listen for connections:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;http&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">(app)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">io</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;socket.io&#39;</span><span style="color: #C9D1D9">)(http)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Configure</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Logic</span></span>\n<span class="line"><span style="color: #C9D1D9">io.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;connection&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Connected at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Run</span></span>\n<span class="line"><span style="color: #C9D1D9">http.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Started at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>For this tutorial, I would leave the comments in as I refer to sections later by their names. Start the server in your terminal by navigating to the directory and running <code is:raw>node index.js</code>. Open your browser to <code is:raw>http://localhost:3000</code>, and you should see \u2018Connected at <code is:raw>date</code>\u2019 in your terminal. Once this connection is established, we can send and listen for events on both the server and the client.</p>\n<h2 id="access-and-send-audio">Access and Send Audio</h2>\n<p>In <a href="/blog/2021/11/live-transcription-mic-browser/">a blog post last month</a> we covered how to access and retreive data from user\u2019s mic in a web browser. Each of the steps are covered there, so we\u2019ll be lifting the examples from it without a deep explanation. In <code is:raw>index.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This will immediately ask for access to the microphone and begin accessing data once permitted. When emitting events with socket.io, we can specify a specific event name which we can then listen for on the server. Here, we have called it <code is:raw>microphone-stream</code> and send it with the raw mic data.</p>\n<h2 id="listening-for-events">Listening for Events</h2>\n<p>In <code is:raw>index.js</code> inside of the connection and below the <code is:raw>console.log()</code> statement:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream event&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server and then refresh your web page. Once you grant access to your microphone, you should see a steady stream of logs indicating that data is sent from your browser to the server. You may stop your server while we continue with the next step.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/microphone-stream-event.png" alt="A terminal showing the server starting, a client connecting, and then 4 microphone stream event logs."></p>\n<h2 id="setting-up-deepgram">Setting Up Deepgram</h2>\n<p>At the top of the Require section in <code is:raw>index.js</code> add <code is:raw>dotenv</code> which will allow access to the <code is:raw>.env</code> file values.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>At the bottom of the Require section require the Deepgram Node.js SDK which we installed earlier:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Finally, in configure, initialize the SDK and create a new live transcription service:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({ utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<h2 id="getting-live-deepgram-transcripts">Getting Live Deepgram Transcripts</h2>\n<p>Inside of the <code is:raw>microphone-stream</code> event handler comment out the <code is:raw>console.log()</code>. In it\u2019s place, take the provided data and send it directly to Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// console.log(&#39;microphone-stream event&#39;)</span></span>\n<span class="line"><span style="color: #C9D1D9">  deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span></code></pre>\n<p><code is:raw>deepgramLive</code> provides an event when Deepgram has a transcript ready, and like the <a href="/blog/2021/11/live-transcription-mic-browser/">browser live transcription blog post</a> we will wait for the final transcript for each of our utterances (phrases).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> result.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (result.is_final </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> utterance) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcript </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server, refresh your browser, and speak into your microphone. You should see a transcript appear in your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178714/blog/2021/12/song-search-js/transcript-terminal-log.png" alt="A terminal showing give phrases with words spoken, with each adding words on to the last and getting longer."></p>\n<h2 id="triggering-song-search">Triggering Song Search</h2>\n<p>Because a set of lyrics can take up multiple utterances, we need to have a way to indicate that we are finished and the search should take place. We will attach an event listener to a button that, when pressed, will emit an event.</p>\n<p>In <code is:raw>index.html</code> add a <code is:raw>&lt;button&gt;</code> at the top of your <code is:raw>&lt;body&gt;</code> tag:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">&lt;button&gt;Search Song&lt;/button&gt;</span></span></code></pre>\n<p>Just below <code is:raw>mediaRecorder.start(1000)</code> add the following logic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">button</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">button.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  button.</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">stop</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>When the button is pressed, it will be removed from the DOM, so we only can click it once; we stop the mediaRecorder (and, in doing so, stop emitting the <code is:raw>microphone-stream</code> events), and emit a new event called <code is:raw>search</code>.</p>\n<p>In <code is:raw>index.js</code> add a new socket event listener just after the block for <code is:raw>microphone-stream</code> is closed:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search event&#39;</span><span style="color: #C9D1D9">, transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server and refresh the browser. Speak a few phrases and click the button. You should see the search event take place with the final transcript logged.</p>\n<h2 id="searching-for-songs">Searching for Songs</h2>\n<p>We will use the <a href="https://docs.genius.com">Genius API</a> to search for songs based on lyrics. To make this API call, we\u2019ll utilize Node package <code is:raw>axios</code>. In the Require section of our <code is:raw>index.js</code> file, add the package:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>And make the API call when the <code is:raw>search</code> event is received:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  url: </span><span style="color: #A5D6FF">`https://api.genius.com/search?q=${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    Authorization: </span><span style="color: #A5D6FF">`Bearer ${</span><span style="color: #C9D1D9">process</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">env</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">GENIUS_TOKEN</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">topThree</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.response.hits.</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(topThree)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>\n<p>Restart your server and refresh your browser.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178713/blog/2021/12/song-search-js/songs-returned.png" alt="A terminal showing an array with several items. Each item contains metadata for one song."></p>\n<p><strong>Yay!</strong></p>\n<h2 id="displaying-results">Displaying Results</h2>\n<p>The final step is to show the output to the user by emitting an event from the server back to the client. Doing this is nearly identical to the other direction. In <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;result&#39;</span><span style="color: #C9D1D9">, topThree)</span></span></code></pre>\n<p>In <code is:raw>index.html</code> add an empty <code is:raw>&lt;ul&gt;</code> under the <code is:raw>&lt;button&gt;</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">&lt;ul&gt;&lt;/ul&gt;</span></span></code></pre>\n<p>At the bottom of the <code is:raw>&lt;script&gt;</code> tag, below all other code, listen for the <code is:raw>results</code> event and add items to the new list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ul</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ul&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> song </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> data) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">li</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`</span></span>\n<span class="line"><span style="color: #A5D6FF">    &lt;li&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">      &lt;img src=&quot;${</span><span style="color: #C9D1D9">song</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">result</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">song_art_image_url</span><span style="color: #A5D6FF">}&quot;&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">      &lt;p&gt;${</span><span style="color: #C9D1D9">song</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">result</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">full_title</span><span style="color: #A5D6FF">}&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">    &lt;/li&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">  `</span></span>\n<span class="line"><span style="color: #C9D1D9">    ul.innerHTML </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> li</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Before we try this add this minimal styling inside of your <code is:raw>&lt;head&gt;</code> tag:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">grid</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">grid-template-columns</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">grid-gap</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">4</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">list-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">100</span><span style="color: #FF7B72">%</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Restart your server, refresh your browser, and try it out! You can display any of the information provided by Genius.</p>\n<YouTube id="IFuJiNNoYYw" />\n<p>No one ever said I was a good singer.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>There are quite a lot of improvements you could make here:</p>\n<ul>\n<li>Show utterances to users in the browser</li>\n<li>Do searches as soon as utterances are available, and update them as more words are said</li>\n<li>Allow multiple songs without needing to \u2018reset\u2019 by refreshing</li>\n<li>Give it a festive theme</li>\n</ul>\n<p>This post has also introduced you to the code required to stream your microphone from the browser to Deepgram via a server, thus protecting your API Key from being exposed.</p>\n<p>We\u2019ll have some more posts coming out before Christmas, but from me, this is it until January, so please have a wonderful festive period and a wonderful new year. The complete project is available at <a href="https://github.com/deepgram-devs/song-search">https://github.com/deepgram-devs/song-search</a>, and if you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Building a Voice-Powered Song Search", "description": "\u{1F385}  Let Deepgram detect the Christmas song", "date": "2021-12-16T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1639662018/blog/2021/12/song-search-js/Building-Voice-Powered-Song-Search%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["javascript", "microphone"], "seo": { "title": "Building a Voice-Powered Song Search", "description": "\u{1F385}  Let Deepgram detect the Christmas song" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453835/blog/song-search-js/ograph.png" }, "shorturls": { "share": "https://dpgr.am/15b5006", "twitter": "https://dpgr.am/73a2300", "linkedin": "https://dpgr.am/3e7d48b", "reddit": "https://dpgr.am/e2319b5", "facebook": "https://dpgr.am/cd65bc2" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "establish-a-socket-connection", "text": "Establish a Socket Connection" }, { "depth": 2, "slug": "access-and-send-audio", "text": "Access and Send Audio" }, { "depth": 2, "slug": "listening-for-events", "text": "Listening for Events" }, { "depth": 2, "slug": "setting-up-deepgram", "text": "Setting Up Deepgram" }, { "depth": 2, "slug": "getting-live-deepgram-transcripts", "text": "Getting Live Deepgram Transcripts" }, { "depth": 2, "slug": "triggering-song-search", "text": "Triggering Song Search" }, { "depth": 2, "slug": "searching-for-songs", "text": "Searching for Songs" }, { "depth": 2, "slug": "displaying-results", "text": "Displaying Results" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "Love it or hate it, Christmas is a period for music, and that comes the frustrating scenario of knowing lyrics but not quite knowing the song. Of course, you could just search the lyrics, but where's the fun in that? In this project, we will warm up our vocal cords and use Deepgram and the Genius Song Lyrics API to build a website that should correctly guess spoken or sung lyrics.\n\nWhile doing this, we'll learn how to stream microphone data to Deepgram via a server, so you don't need to worry about exposing your API Key.\n\nThis is what we'll be building:\n\n![A diagram showing 9 steps. 1 - emit mic data from browser to server using socket.io. 2 - send mic data from server to Deepgram via Deepgram SDK. 3 - Deepgram returns utterances to server. 4 - the server stores utterances. 5 - a user presses a button and emits search event to server. 6 - server searches song on Genius. 7 - Genius sends response to server. 8 - Server emits response to browser. 9 - browser shows result. Steps 1-3 have a green background and steps 4-9 have a blue background.](https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/diagram.png)\n\nThe green area is one set of steps that gets us to the point of transcripts. The blue area covers searching for and displaying songs. Don't worry if that looks like a lot - we'll take it step by step. If you want to look at the final project code, you can find it at https://github.com/deepgram-devs/song-search.\n\n## Before We Start\n\nYou will need:\n\n* Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n* A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n* A Genius API Access Token - [get one here](https://genius.com/api-clients).\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n```\nnpm install dotenv @deepgram/sdk express socket.io axios\n```\n\nCreate a `.env` file and add the following:\n\n```\nDG_KEY=replace_with_deepgram_api_key\nGENIUS_TOKEN=replace_with_genius_access_token\n```\n\nCreate an `index.js` file, a folder called `public`, and inside of the public folder create an `index.html` file. In `index.html` create a boilerplate HTML file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    {/*<!-- Further code goes here -->*/}\n  </body>\n</html>\n```\n\n## Establish a Socket Connection\n\nThe socket.io library can establish a two-way connection between our server (`index.js`) and client (`index.html`). Once connected, we can push data between the two in real-time. We will use this to send data from the user's microphone to our server to be processed by Deepgram and show results from the server logic.\n\nIn the `index.html` `<body>` tag:\n\n```html\n<script src=\"/socket.io/socket.io.js\"><\/script>\n<script>\n  const socket = io()\n  // Further code goes here\n<\/script>\n```\n\nIn `index.js` create a combined express and socket.io server and listen for connections:\n\n```js\n// Require\nconst express = require('express')\nconst app = express()\nconst http = require('http').createServer(app)\nconst io = require('socket.io')(http)\n\n// Configure\napp.use(express.static('public'))\n\n// Logic\nio.on('connection', (socket) => {\n  console.log(`Connected at ${new Date().toISOString()}`)\n})\n\n// Run\nhttp.listen(3000, console.log(`Started at ${new Date().toISOString()}`))\n```\n\nFor this tutorial, I would leave the comments in as I refer to sections later by their names. Start the server in your terminal by navigating to the directory and running `node index.js`. Open your browser to `http://localhost:3000`, and you should see 'Connected at `date`' in your terminal. Once this connection is established, we can send and listen for events on both the server and the client.\n\n## Access and Send Audio\n\nIn [a blog post last month](/blog/2021/11/live-transcription-mic-browser/) we covered how to access and retreive data from user's mic in a web browser. Each of the steps are covered there, so we'll be lifting the examples from it without a deep explanation. In `index.html`:\n\n```js\nnavigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n  const mediaRecorder = new MediaRecorder(stream)\n\n  mediaRecorder.addEventListener('dataavailable', (event) => {\n    if (event.data.size > 0) {\n      socket.emit('microphone-stream', event.data)\n    }\n  })\n  mediaRecorder.start(1000)\n})\n```\n\nThis will immediately ask for access to the microphone and begin accessing data once permitted. When emitting events with socket.io, we can specify a specific event name which we can then listen for on the server. Here, we have called it `microphone-stream` and send it with the raw mic data.\n\n## Listening for Events\n\nIn `index.js` inside of the connection and below the `console.log()` statement:\n\n```js\nsocket.on('microphone-stream', (data) => {\n  console.log('microphone-stream event')\n})\n```\n\nRestart your server and then refresh your web page. Once you grant access to your microphone, you should see a steady stream of logs indicating that data is sent from your browser to the server. You may stop your server while we continue with the next step.\n\n![A terminal showing the server starting, a client connecting, and then 4 microphone stream event logs.](https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/microphone-stream-event.png)\n\n## Setting Up Deepgram\n\nAt the top of the Require section in `index.js` add `dotenv` which will allow access to the `.env` file values.\n\n```js\nrequire('dotenv').config()\n```\n\nAt the bottom of the Require section require the Deepgram Node.js SDK which we installed earlier:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nFinally, in configure, initialize the SDK and create a new live transcription service:\n\n```js\nconst deepgram = new Deepgram(process.env.DG_KEY)\nconst deepgramLive = deepgram.transcription.live({ utterances: true })\n```\n\n## Getting Live Deepgram Transcripts\n\nInside of the `microphone-stream` event handler comment out the `console.log()`. In it's place, take the provided data and send it directly to Deepgram:\n\n```js\nsocket.on('microphone-stream', (data) => {\n  // console.log('microphone-stream event')\n  deepgramLive.send(data)\n})\n\n// Further code goes here\n```\n\n`deepgramLive` provides an event when Deepgram has a transcript ready, and like the [browser live transcription blog post](/blog/2021/11/live-transcription-mic-browser/) we will wait for the final transcript for each of our utterances (phrases).\n\n```js\nlet transcript = ''\ndeepgramLive.addListener('transcriptReceived', (data) => {\n  const result = JSON.parse(data)\n  const utterance = result.channel.alternatives[0].transcript\n  if (result.is_final && utterance) {\n    transcript += ' ' + utterance\n    console.log(transcript)\n  }\n})\n```\n\nRestart your server, refresh your browser, and speak into your microphone. You should see a transcript appear in your terminal.\n\n![A terminal showing give phrases with words spoken, with each adding words on to the last and getting longer.](https://res.cloudinary.com/deepgram/image/upload/v1637178714/blog/2021/12/song-search-js/transcript-terminal-log.png)\n\n## Triggering Song Search\n\nBecause a set of lyrics can take up multiple utterances, we need to have a way to indicate that we are finished and the search should take place. We will attach an event listener to a button that, when pressed, will emit an event.\n\nIn `index.html` add a `<button>` at the top of your `<body>` tag:\n\n```\n<button>Search Song</button>\n```\n\nJust below `mediaRecorder.start(1000)` add the following logic:\n\n```js\nconst button = document.querySelector('button')\nbutton.addEventListener('click', () => {\n  button.remove()\n  mediaRecorder.stop()\n  socket.emit('search')\n})\n```\n\nWhen the button is pressed, it will be removed from the DOM, so we only can click it once; we stop the mediaRecorder (and, in doing so, stop emitting the `microphone-stream` events), and emit a new event called `search`.\n\nIn `index.js` add a new socket event listener just after the block for `microphone-stream` is closed:\n\n```js\nsocket.on('search', async () => {\n  console.log('search event', transcript)\n  // Further code here\n})\n```\n\nRestart your server and refresh the browser. Speak a few phrases and click the button. You should see the search event take place with the final transcript logged.\n\n## Searching for Songs\n\nWe will use the [Genius API](https://docs.genius.com) to search for songs based on lyrics. To make this API call, we'll utilize Node package `axios`. In the Require section of our `index.js` file, add the package:\n\n```js\nconst axios = require('axios')\n```\n\nAnd make the API call when the `search` event is received:\n\n```js\nconst { data } = await axios({\n  method: 'GET',\n  url: `https://api.genius.com/search?q=${transcript}`,\n  headers: {\n    Authorization: `Bearer ${process.env.GENIUS_TOKEN}`,\n  },\n})\nconst topThree = data.response.hits.slice(0, 3)\nconsole.log(topThree)\n\n// Further code here\n```\n\nRestart your server and refresh your browser.\n\n![A terminal showing an array with several items. Each item contains metadata for one song.](https://res.cloudinary.com/deepgram/image/upload/v1637178713/blog/2021/12/song-search-js/songs-returned.png)\n\n**Yay!**\n\n## Displaying Results\n\nThe final step is to show the output to the user by emitting an event from the server back to the client. Doing this is nearly identical to the other direction. In `index.js`:\n\n```js\nsocket.emit('result', topThree)\n```\n\nIn `index.html` add an empty `<ul>` under the `<button>`:\n\n```\n<ul></ul>\n```\n\nAt the bottom of the `<script>` tag, below all other code, listen for the `results` event and add items to the new list:\n\n```js\nsocket.on('results', (data) => {\n  const ul = document.querySelector('ul')\n  for (let song of data) {\n    const li = `\n    <li>\n      <img src=\"${song.result.song_art_image_url}\">\n      <p>${song.result.full_title}</p>\n    </li>\n  `\n    ul.innerHTML += li\n  }\n})\n```\n\nBefore we try this add this minimal styling inside of your `<head>` tag:\n\n```html\n<style>\n  ul {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-gap: 4em;\n    list-style: none;\n  }\n  img {\n    width: 100%;\n  }\n</style>\n```\n\nRestart your server, refresh your browser, and try it out! You can display any of the information provided by Genius.\n\n<YouTube id=\"IFuJiNNoYYw\"></YouTube>\n\nNo one ever said I was a good singer.\n\n## Wrapping Up\n\nThere are quite a lot of improvements you could make here:\n\n* Show utterances to users in the browser\n* Do searches as soon as utterances are available, and update them as more words are said\n* Allow multiple songs without needing to 'reset' by refreshing\n* Give it a festive theme\n\nThis post has also introduced you to the code required to stream your microphone from the browser to Deepgram via a server, thus protecting your API Key from being exposed.\n\nWe'll have some more posts coming out before Christmas, but from me, this is it until January, so please have a wonderful festive period and a wonderful new year. The complete project is available at https://github.com/deepgram-devs/song-search, and if you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).", "html": '<p>Love it or hate it, Christmas is a period for music, and that comes the frustrating scenario of knowing lyrics but not quite knowing the song. Of course, you could just search the lyrics, but where\u2019s the fun in that? In this project, we will warm up our vocal cords and use Deepgram and the Genius Song Lyrics API to build a website that should correctly guess spoken or sung lyrics.</p>\n<p>While doing this, we\u2019ll learn how to stream microphone data to Deepgram via a server, so you don\u2019t need to worry about exposing your API Key.</p>\n<p>This is what we\u2019ll be building:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/diagram.png" alt="A diagram showing 9 steps. 1 - emit mic data from browser to server using socket.io. 2 - send mic data from server to Deepgram via Deepgram SDK. 3 - Deepgram returns utterances to server. 4 - the server stores utterances. 5 - a user presses a button and emits search event to server. 6 - server searches song on Genius. 7 - Genius sends response to server. 8 - Server emits response to browser. 9 - browser shows result. Steps 1-3 have a green background and steps 4-9 have a blue background."></p>\n<p>The green area is one set of steps that gets us to the point of transcripts. The blue area covers searching for and displaying songs. Don\u2019t worry if that looks like a lot - we\u2019ll take it step by step. If you want to look at the final project code, you can find it at <a href="https://github.com/deepgram-devs/song-search">https://github.com/deepgram-devs/song-search</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A Genius API Access Token - <a href="https://genius.com/api-clients">get one here</a>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install dotenv @deepgram/sdk express socket.io axios</span></span></code></pre>\n<p>Create a <code is:raw>.env</code> file and add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DG_KEY=replace_with_deepgram_api_key</span></span>\n<span class="line"><span style="color: #c9d1d9">GENIUS_TOKEN=replace_with_genius_access_token</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file, a folder called <code is:raw>public</code>, and inside of the public folder create an <code is:raw>index.html</code> file. In <code is:raw>index.html</code> create a boilerplate HTML file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">&lt;!-- Further code goes here --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="establish-a-socket-connection">Establish a Socket Connection</h2>\n<p>The socket.io library can establish a two-way connection between our server (<code is:raw>index.js</code>) and client (<code is:raw>index.html</code>). Once connected, we can push data between the two in real-time. We will use this to send data from the user\u2019s microphone to our server to be processed by Deepgram and show results from the server logic.</p>\n<p>In the <code is:raw>index.html</code> <code is:raw>&lt;body&gt;</code> tag:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In <code is:raw>index.js</code> create a combined express and socket.io server and listen for connections:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;http&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">(app)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">io</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;socket.io&#39;</span><span style="color: #C9D1D9">)(http)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Configure</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Logic</span></span>\n<span class="line"><span style="color: #C9D1D9">io.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;connection&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Connected at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Run</span></span>\n<span class="line"><span style="color: #C9D1D9">http.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Started at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>For this tutorial, I would leave the comments in as I refer to sections later by their names. Start the server in your terminal by navigating to the directory and running <code is:raw>node index.js</code>. Open your browser to <code is:raw>http://localhost:3000</code>, and you should see \u2018Connected at <code is:raw>date</code>\u2019 in your terminal. Once this connection is established, we can send and listen for events on both the server and the client.</p>\n<h2 id="access-and-send-audio">Access and Send Audio</h2>\n<p>In <a href="/blog/2021/11/live-transcription-mic-browser/">a blog post last month</a> we covered how to access and retreive data from user\u2019s mic in a web browser. Each of the steps are covered there, so we\u2019ll be lifting the examples from it without a deep explanation. In <code is:raw>index.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This will immediately ask for access to the microphone and begin accessing data once permitted. When emitting events with socket.io, we can specify a specific event name which we can then listen for on the server. Here, we have called it <code is:raw>microphone-stream</code> and send it with the raw mic data.</p>\n<h2 id="listening-for-events">Listening for Events</h2>\n<p>In <code is:raw>index.js</code> inside of the connection and below the <code is:raw>console.log()</code> statement:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream event&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server and then refresh your web page. Once you grant access to your microphone, you should see a steady stream of logs indicating that data is sent from your browser to the server. You may stop your server while we continue with the next step.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/microphone-stream-event.png" alt="A terminal showing the server starting, a client connecting, and then 4 microphone stream event logs."></p>\n<h2 id="setting-up-deepgram">Setting Up Deepgram</h2>\n<p>At the top of the Require section in <code is:raw>index.js</code> add <code is:raw>dotenv</code> which will allow access to the <code is:raw>.env</code> file values.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>At the bottom of the Require section require the Deepgram Node.js SDK which we installed earlier:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Finally, in configure, initialize the SDK and create a new live transcription service:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({ utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<h2 id="getting-live-deepgram-transcripts">Getting Live Deepgram Transcripts</h2>\n<p>Inside of the <code is:raw>microphone-stream</code> event handler comment out the <code is:raw>console.log()</code>. In it\u2019s place, take the provided data and send it directly to Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// console.log(&#39;microphone-stream event&#39;)</span></span>\n<span class="line"><span style="color: #C9D1D9">  deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span></code></pre>\n<p><code is:raw>deepgramLive</code> provides an event when Deepgram has a transcript ready, and like the <a href="/blog/2021/11/live-transcription-mic-browser/">browser live transcription blog post</a> we will wait for the final transcript for each of our utterances (phrases).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> result.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (result.is_final </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> utterance) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcript </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server, refresh your browser, and speak into your microphone. You should see a transcript appear in your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178714/blog/2021/12/song-search-js/transcript-terminal-log.png" alt="A terminal showing give phrases with words spoken, with each adding words on to the last and getting longer."></p>\n<h2 id="triggering-song-search">Triggering Song Search</h2>\n<p>Because a set of lyrics can take up multiple utterances, we need to have a way to indicate that we are finished and the search should take place. We will attach an event listener to a button that, when pressed, will emit an event.</p>\n<p>In <code is:raw>index.html</code> add a <code is:raw>&lt;button&gt;</code> at the top of your <code is:raw>&lt;body&gt;</code> tag:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">&lt;button&gt;Search Song&lt;/button&gt;</span></span></code></pre>\n<p>Just below <code is:raw>mediaRecorder.start(1000)</code> add the following logic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">button</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">button.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  button.</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">stop</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>When the button is pressed, it will be removed from the DOM, so we only can click it once; we stop the mediaRecorder (and, in doing so, stop emitting the <code is:raw>microphone-stream</code> events), and emit a new event called <code is:raw>search</code>.</p>\n<p>In <code is:raw>index.js</code> add a new socket event listener just after the block for <code is:raw>microphone-stream</code> is closed:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search event&#39;</span><span style="color: #C9D1D9">, transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server and refresh the browser. Speak a few phrases and click the button. You should see the search event take place with the final transcript logged.</p>\n<h2 id="searching-for-songs">Searching for Songs</h2>\n<p>We will use the <a href="https://docs.genius.com">Genius API</a> to search for songs based on lyrics. To make this API call, we\u2019ll utilize Node package <code is:raw>axios</code>. In the Require section of our <code is:raw>index.js</code> file, add the package:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>And make the API call when the <code is:raw>search</code> event is received:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  url: </span><span style="color: #A5D6FF">`https://api.genius.com/search?q=${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    Authorization: </span><span style="color: #A5D6FF">`Bearer ${</span><span style="color: #C9D1D9">process</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">env</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">GENIUS_TOKEN</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">topThree</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.response.hits.</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(topThree)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>\n<p>Restart your server and refresh your browser.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178713/blog/2021/12/song-search-js/songs-returned.png" alt="A terminal showing an array with several items. Each item contains metadata for one song."></p>\n<p><strong>Yay!</strong></p>\n<h2 id="displaying-results">Displaying Results</h2>\n<p>The final step is to show the output to the user by emitting an event from the server back to the client. Doing this is nearly identical to the other direction. In <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;result&#39;</span><span style="color: #C9D1D9">, topThree)</span></span></code></pre>\n<p>In <code is:raw>index.html</code> add an empty <code is:raw>&lt;ul&gt;</code> under the <code is:raw>&lt;button&gt;</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">&lt;ul&gt;&lt;/ul&gt;</span></span></code></pre>\n<p>At the bottom of the <code is:raw>&lt;script&gt;</code> tag, below all other code, listen for the <code is:raw>results</code> event and add items to the new list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ul</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ul&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> song </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> data) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">li</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`</span></span>\n<span class="line"><span style="color: #A5D6FF">    &lt;li&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">      &lt;img src=&quot;${</span><span style="color: #C9D1D9">song</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">result</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">song_art_image_url</span><span style="color: #A5D6FF">}&quot;&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">      &lt;p&gt;${</span><span style="color: #C9D1D9">song</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">result</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">full_title</span><span style="color: #A5D6FF">}&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">    &lt;/li&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">  `</span></span>\n<span class="line"><span style="color: #C9D1D9">    ul.innerHTML </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> li</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Before we try this add this minimal styling inside of your <code is:raw>&lt;head&gt;</code> tag:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">grid</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">grid-template-columns</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">grid-gap</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">4</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">list-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">100</span><span style="color: #FF7B72">%</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Restart your server, refresh your browser, and try it out! You can display any of the information provided by Genius.</p>\n<YouTube id="IFuJiNNoYYw" />\n<p>No one ever said I was a good singer.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>There are quite a lot of improvements you could make here:</p>\n<ul>\n<li>Show utterances to users in the browser</li>\n<li>Do searches as soon as utterances are available, and update them as more words are said</li>\n<li>Allow multiple songs without needing to \u2018reset\u2019 by refreshing</li>\n<li>Give it a festive theme</li>\n</ul>\n<p>This post has also introduced you to the code required to stream your microphone from the browser to Deepgram via a server, thus protecting your API Key from being exposed.</p>\n<p>We\u2019ll have some more posts coming out before Christmas, but from me, this is it until January, so please have a wonderful festive period and a wonderful new year. The complete project is available at <a href="https://github.com/deepgram-devs/song-search">https://github.com/deepgram-devs/song-search</a>, and if you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/song-search-js/index.md" };
function rawContent() {
  return "Love it or hate it, Christmas is a period for music, and that comes the frustrating scenario of knowing lyrics but not quite knowing the song. Of course, you could just search the lyrics, but where's the fun in that? In this project, we will warm up our vocal cords and use Deepgram and the Genius Song Lyrics API to build a website that should correctly guess spoken or sung lyrics.\n\nWhile doing this, we'll learn how to stream microphone data to Deepgram via a server, so you don't need to worry about exposing your API Key.\n\nThis is what we'll be building:\n\n![A diagram showing 9 steps. 1 - emit mic data from browser to server using socket.io. 2 - send mic data from server to Deepgram via Deepgram SDK. 3 - Deepgram returns utterances to server. 4 - the server stores utterances. 5 - a user presses a button and emits search event to server. 6 - server searches song on Genius. 7 - Genius sends response to server. 8 - Server emits response to browser. 9 - browser shows result. Steps 1-3 have a green background and steps 4-9 have a blue background.](https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/diagram.png)\n\nThe green area is one set of steps that gets us to the point of transcripts. The blue area covers searching for and displaying songs. Don't worry if that looks like a lot - we'll take it step by step. If you want to look at the final project code, you can find it at https://github.com/deepgram-devs/song-search.\n\n## Before We Start\n\nYou will need:\n\n* Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n* A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n* A Genius API Access Token - [get one here](https://genius.com/api-clients).\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n```\nnpm install dotenv @deepgram/sdk express socket.io axios\n```\n\nCreate a `.env` file and add the following:\n\n```\nDG_KEY=replace_with_deepgram_api_key\nGENIUS_TOKEN=replace_with_genius_access_token\n```\n\nCreate an `index.js` file, a folder called `public`, and inside of the public folder create an `index.html` file. In `index.html` create a boilerplate HTML file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    {/*<!-- Further code goes here -->*/}\n  </body>\n</html>\n```\n\n## Establish a Socket Connection\n\nThe socket.io library can establish a two-way connection between our server (`index.js`) and client (`index.html`). Once connected, we can push data between the two in real-time. We will use this to send data from the user's microphone to our server to be processed by Deepgram and show results from the server logic.\n\nIn the `index.html` `<body>` tag:\n\n```html\n<script src=\"/socket.io/socket.io.js\"><\/script>\n<script>\n  const socket = io()\n  // Further code goes here\n<\/script>\n```\n\nIn `index.js` create a combined express and socket.io server and listen for connections:\n\n```js\n// Require\nconst express = require('express')\nconst app = express()\nconst http = require('http').createServer(app)\nconst io = require('socket.io')(http)\n\n// Configure\napp.use(express.static('public'))\n\n// Logic\nio.on('connection', (socket) => {\n  console.log(`Connected at ${new Date().toISOString()}`)\n})\n\n// Run\nhttp.listen(3000, console.log(`Started at ${new Date().toISOString()}`))\n```\n\nFor this tutorial, I would leave the comments in as I refer to sections later by their names. Start the server in your terminal by navigating to the directory and running `node index.js`. Open your browser to `http://localhost:3000`, and you should see 'Connected at `date`' in your terminal. Once this connection is established, we can send and listen for events on both the server and the client.\n\n## Access and Send Audio\n\nIn [a blog post last month](/blog/2021/11/live-transcription-mic-browser/) we covered how to access and retreive data from user's mic in a web browser. Each of the steps are covered there, so we'll be lifting the examples from it without a deep explanation. In `index.html`:\n\n```js\nnavigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n  const mediaRecorder = new MediaRecorder(stream)\n\n  mediaRecorder.addEventListener('dataavailable', (event) => {\n    if (event.data.size > 0) {\n      socket.emit('microphone-stream', event.data)\n    }\n  })\n  mediaRecorder.start(1000)\n})\n```\n\nThis will immediately ask for access to the microphone and begin accessing data once permitted. When emitting events with socket.io, we can specify a specific event name which we can then listen for on the server. Here, we have called it `microphone-stream` and send it with the raw mic data.\n\n## Listening for Events\n\nIn `index.js` inside of the connection and below the `console.log()` statement:\n\n```js\nsocket.on('microphone-stream', (data) => {\n  console.log('microphone-stream event')\n})\n```\n\nRestart your server and then refresh your web page. Once you grant access to your microphone, you should see a steady stream of logs indicating that data is sent from your browser to the server. You may stop your server while we continue with the next step.\n\n![A terminal showing the server starting, a client connecting, and then 4 microphone stream event logs.](https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/microphone-stream-event.png)\n\n## Setting Up Deepgram\n\nAt the top of the Require section in `index.js` add `dotenv` which will allow access to the `.env` file values.\n\n```js\nrequire('dotenv').config()\n```\n\nAt the bottom of the Require section require the Deepgram Node.js SDK which we installed earlier:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nFinally, in configure, initialize the SDK and create a new live transcription service:\n\n```js\nconst deepgram = new Deepgram(process.env.DG_KEY)\nconst deepgramLive = deepgram.transcription.live({ utterances: true })\n```\n\n## Getting Live Deepgram Transcripts\n\nInside of the `microphone-stream` event handler comment out the `console.log()`. In it's place, take the provided data and send it directly to Deepgram:\n\n```js\nsocket.on('microphone-stream', (data) => {\n  // console.log('microphone-stream event')\n  deepgramLive.send(data)\n})\n\n// Further code goes here\n```\n\n`deepgramLive` provides an event when Deepgram has a transcript ready, and like the [browser live transcription blog post](/blog/2021/11/live-transcription-mic-browser/) we will wait for the final transcript for each of our utterances (phrases).\n\n```js\nlet transcript = ''\ndeepgramLive.addListener('transcriptReceived', (data) => {\n  const result = JSON.parse(data)\n  const utterance = result.channel.alternatives[0].transcript\n  if (result.is_final && utterance) {\n    transcript += ' ' + utterance\n    console.log(transcript)\n  }\n})\n```\n\nRestart your server, refresh your browser, and speak into your microphone. You should see a transcript appear in your terminal.\n\n![A terminal showing give phrases with words spoken, with each adding words on to the last and getting longer.](https://res.cloudinary.com/deepgram/image/upload/v1637178714/blog/2021/12/song-search-js/transcript-terminal-log.png)\n\n## Triggering Song Search\n\nBecause a set of lyrics can take up multiple utterances, we need to have a way to indicate that we are finished and the search should take place. We will attach an event listener to a button that, when pressed, will emit an event.\n\nIn `index.html` add a `<button>` at the top of your `<body>` tag:\n\n```\n<button>Search Song</button>\n```\n\nJust below `mediaRecorder.start(1000)` add the following logic:\n\n```js\nconst button = document.querySelector('button')\nbutton.addEventListener('click', () => {\n  button.remove()\n  mediaRecorder.stop()\n  socket.emit('search')\n})\n```\n\nWhen the button is pressed, it will be removed from the DOM, so we only can click it once; we stop the mediaRecorder (and, in doing so, stop emitting the `microphone-stream` events), and emit a new event called `search`.\n\nIn `index.js` add a new socket event listener just after the block for `microphone-stream` is closed:\n\n```js\nsocket.on('search', async () => {\n  console.log('search event', transcript)\n  // Further code here\n})\n```\n\nRestart your server and refresh the browser. Speak a few phrases and click the button. You should see the search event take place with the final transcript logged.\n\n## Searching for Songs\n\nWe will use the [Genius API](https://docs.genius.com) to search for songs based on lyrics. To make this API call, we'll utilize Node package `axios`. In the Require section of our `index.js` file, add the package:\n\n```js\nconst axios = require('axios')\n```\n\nAnd make the API call when the `search` event is received:\n\n```js\nconst { data } = await axios({\n  method: 'GET',\n  url: `https://api.genius.com/search?q=${transcript}`,\n  headers: {\n    Authorization: `Bearer ${process.env.GENIUS_TOKEN}`,\n  },\n})\nconst topThree = data.response.hits.slice(0, 3)\nconsole.log(topThree)\n\n// Further code here\n```\n\nRestart your server and refresh your browser.\n\n![A terminal showing an array with several items. Each item contains metadata for one song.](https://res.cloudinary.com/deepgram/image/upload/v1637178713/blog/2021/12/song-search-js/songs-returned.png)\n\n**Yay!**\n\n## Displaying Results\n\nThe final step is to show the output to the user by emitting an event from the server back to the client. Doing this is nearly identical to the other direction. In `index.js`:\n\n```js\nsocket.emit('result', topThree)\n```\n\nIn `index.html` add an empty `<ul>` under the `<button>`:\n\n```\n<ul></ul>\n```\n\nAt the bottom of the `<script>` tag, below all other code, listen for the `results` event and add items to the new list:\n\n```js\nsocket.on('results', (data) => {\n  const ul = document.querySelector('ul')\n  for (let song of data) {\n    const li = `\n    <li>\n      <img src=\"${song.result.song_art_image_url}\">\n      <p>${song.result.full_title}</p>\n    </li>\n  `\n    ul.innerHTML += li\n  }\n})\n```\n\nBefore we try this add this minimal styling inside of your `<head>` tag:\n\n```html\n<style>\n  ul {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-gap: 4em;\n    list-style: none;\n  }\n  img {\n    width: 100%;\n  }\n</style>\n```\n\nRestart your server, refresh your browser, and try it out! You can display any of the information provided by Genius.\n\n<YouTube id=\"IFuJiNNoYYw\"></YouTube>\n\nNo one ever said I was a good singer.\n\n## Wrapping Up\n\nThere are quite a lot of improvements you could make here:\n\n* Show utterances to users in the browser\n* Do searches as soon as utterances are available, and update them as more words are said\n* Allow multiple songs without needing to 'reset' by refreshing\n* Give it a festive theme\n\nThis post has also introduced you to the code required to stream your microphone from the browser to Deepgram via a server, thus protecting your API Key from being exposed.\n\nWe'll have some more posts coming out before Christmas, but from me, this is it until January, so please have a wonderful festive period and a wonderful new year. The complete project is available at https://github.com/deepgram-devs/song-search, and if you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).";
}
function compiledContent() {
  return '<p>Love it or hate it, Christmas is a period for music, and that comes the frustrating scenario of knowing lyrics but not quite knowing the song. Of course, you could just search the lyrics, but where\u2019s the fun in that? In this project, we will warm up our vocal cords and use Deepgram and the Genius Song Lyrics API to build a website that should correctly guess spoken or sung lyrics.</p>\n<p>While doing this, we\u2019ll learn how to stream microphone data to Deepgram via a server, so you don\u2019t need to worry about exposing your API Key.</p>\n<p>This is what we\u2019ll be building:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/diagram.png" alt="A diagram showing 9 steps. 1 - emit mic data from browser to server using socket.io. 2 - send mic data from server to Deepgram via Deepgram SDK. 3 - Deepgram returns utterances to server. 4 - the server stores utterances. 5 - a user presses a button and emits search event to server. 6 - server searches song on Genius. 7 - Genius sends response to server. 8 - Server emits response to browser. 9 - browser shows result. Steps 1-3 have a green background and steps 4-9 have a blue background."></p>\n<p>The green area is one set of steps that gets us to the point of transcripts. The blue area covers searching for and displaying songs. Don\u2019t worry if that looks like a lot - we\u2019ll take it step by step. If you want to look at the final project code, you can find it at <a href="https://github.com/deepgram-devs/song-search">https://github.com/deepgram-devs/song-search</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>A Genius API Access Token - <a href="https://genius.com/api-clients">get one here</a>.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install dotenv @deepgram/sdk express socket.io axios</span></span></code></pre>\n<p>Create a <code is:raw>.env</code> file and add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DG_KEY=replace_with_deepgram_api_key</span></span>\n<span class="line"><span style="color: #c9d1d9">GENIUS_TOKEN=replace_with_genius_access_token</span></span></code></pre>\n<p>Create an <code is:raw>index.js</code> file, a folder called <code is:raw>public</code>, and inside of the public folder create an <code is:raw>index.html</code> file. In <code is:raw>index.html</code> create a boilerplate HTML file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">&lt;!-- Further code goes here --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<h2 id="establish-a-socket-connection">Establish a Socket Connection</h2>\n<p>The socket.io library can establish a two-way connection between our server (<code is:raw>index.js</code>) and client (<code is:raw>index.html</code>). Once connected, we can push data between the two in real-time. We will use this to send data from the user\u2019s microphone to our server to be processed by Deepgram and show results from the server logic.</p>\n<p>In the <code is:raw>index.html</code> <code is:raw>&lt;body&gt;</code> tag:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>In <code is:raw>index.js</code> create a combined express and socket.io server and listen for connections:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;http&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">(app)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">io</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;socket.io&#39;</span><span style="color: #C9D1D9">)(http)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Configure</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Logic</span></span>\n<span class="line"><span style="color: #C9D1D9">io.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;connection&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Connected at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Run</span></span>\n<span class="line"><span style="color: #C9D1D9">http.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`Started at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<p>For this tutorial, I would leave the comments in as I refer to sections later by their names. Start the server in your terminal by navigating to the directory and running <code is:raw>node index.js</code>. Open your browser to <code is:raw>http://localhost:3000</code>, and you should see \u2018Connected at <code is:raw>date</code>\u2019 in your terminal. Once this connection is established, we can send and listen for events on both the server and the client.</p>\n<h2 id="access-and-send-audio">Access and Send Audio</h2>\n<p>In <a href="/blog/2021/11/live-transcription-mic-browser/">a blog post last month</a> we covered how to access and retreive data from user\u2019s mic in a web browser. Each of the steps are covered there, so we\u2019ll be lifting the examples from it without a deep explanation. In <code is:raw>index.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This will immediately ask for access to the microphone and begin accessing data once permitted. When emitting events with socket.io, we can specify a specific event name which we can then listen for on the server. Here, we have called it <code is:raw>microphone-stream</code> and send it with the raw mic data.</p>\n<h2 id="listening-for-events">Listening for Events</h2>\n<p>In <code is:raw>index.js</code> inside of the connection and below the <code is:raw>console.log()</code> statement:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream event&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server and then refresh your web page. Once you grant access to your microphone, you should see a steady stream of logs indicating that data is sent from your browser to the server. You may stop your server while we continue with the next step.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/microphone-stream-event.png" alt="A terminal showing the server starting, a client connecting, and then 4 microphone stream event logs."></p>\n<h2 id="setting-up-deepgram">Setting Up Deepgram</h2>\n<p>At the top of the Require section in <code is:raw>index.js</code> add <code is:raw>dotenv</code> which will allow access to the <code is:raw>.env</code> file values.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span></code></pre>\n<p>At the bottom of the Require section require the Deepgram Node.js SDK which we installed earlier:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Finally, in configure, initialize the SDK and create a new live transcription service:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({ utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span></code></pre>\n<h2 id="getting-live-deepgram-transcripts">Getting Live Deepgram Transcripts</h2>\n<p>Inside of the <code is:raw>microphone-stream</code> event handler comment out the <code is:raw>console.log()</code>. In it\u2019s place, take the provided data and send it directly to Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// console.log(&#39;microphone-stream event&#39;)</span></span>\n<span class="line"><span style="color: #C9D1D9">  deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span></code></pre>\n<p><code is:raw>deepgramLive</code> provides an event when Deepgram has a transcript ready, and like the <a href="/blog/2021/11/live-transcription-mic-browser/">browser live transcription blog post</a> we will wait for the final transcript for each of our utterances (phrases).</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> result.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (result.is_final </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> utterance) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcript </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server, refresh your browser, and speak into your microphone. You should see a transcript appear in your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178714/blog/2021/12/song-search-js/transcript-terminal-log.png" alt="A terminal showing give phrases with words spoken, with each adding words on to the last and getting longer."></p>\n<h2 id="triggering-song-search">Triggering Song Search</h2>\n<p>Because a set of lyrics can take up multiple utterances, we need to have a way to indicate that we are finished and the search should take place. We will attach an event listener to a button that, when pressed, will emit an event.</p>\n<p>In <code is:raw>index.html</code> add a <code is:raw>&lt;button&gt;</code> at the top of your <code is:raw>&lt;body&gt;</code> tag:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">&lt;button&gt;Search Song&lt;/button&gt;</span></span></code></pre>\n<p>Just below <code is:raw>mediaRecorder.start(1000)</code> add the following logic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">button</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">button.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  button.</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">stop</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>When the button is pressed, it will be removed from the DOM, so we only can click it once; we stop the mediaRecorder (and, in doing so, stop emitting the <code is:raw>microphone-stream</code> events), and emit a new event called <code is:raw>search</code>.</p>\n<p>In <code is:raw>index.js</code> add a new socket event listener just after the block for <code is:raw>microphone-stream</code> is closed:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search event&#39;</span><span style="color: #C9D1D9">, transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server and refresh the browser. Speak a few phrases and click the button. You should see the search event take place with the final transcript logged.</p>\n<h2 id="searching-for-songs">Searching for Songs</h2>\n<p>We will use the <a href="https://docs.genius.com">Genius API</a> to search for songs based on lyrics. To make this API call, we\u2019ll utilize Node package <code is:raw>axios</code>. In the Require section of our <code is:raw>index.js</code> file, add the package:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>And make the API call when the <code is:raw>search</code> event is received:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  url: </span><span style="color: #A5D6FF">`https://api.genius.com/search?q=${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  headers: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    Authorization: </span><span style="color: #A5D6FF">`Bearer ${</span><span style="color: #C9D1D9">process</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">env</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">GENIUS_TOKEN</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">topThree</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.response.hits.</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(topThree)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>\n<p>Restart your server and refresh your browser.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178713/blog/2021/12/song-search-js/songs-returned.png" alt="A terminal showing an array with several items. Each item contains metadata for one song."></p>\n<p><strong>Yay!</strong></p>\n<h2 id="displaying-results">Displaying Results</h2>\n<p>The final step is to show the output to the user by emitting an event from the server back to the client. Doing this is nearly identical to the other direction. In <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;result&#39;</span><span style="color: #C9D1D9">, topThree)</span></span></code></pre>\n<p>In <code is:raw>index.html</code> add an empty <code is:raw>&lt;ul&gt;</code> under the <code is:raw>&lt;button&gt;</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">&lt;ul&gt;&lt;/ul&gt;</span></span></code></pre>\n<p>At the bottom of the <code is:raw>&lt;script&gt;</code> tag, below all other code, listen for the <code is:raw>results</code> event and add items to the new list:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ul</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ul&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> song </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> data) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">li</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">`</span></span>\n<span class="line"><span style="color: #A5D6FF">    &lt;li&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">      &lt;img src=&quot;${</span><span style="color: #C9D1D9">song</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">result</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">song_art_image_url</span><span style="color: #A5D6FF">}&quot;&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">      &lt;p&gt;${</span><span style="color: #C9D1D9">song</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">result</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">full_title</span><span style="color: #A5D6FF">}&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">    &lt;/li&gt;</span></span>\n<span class="line"><span style="color: #A5D6FF">  `</span></span>\n<span class="line"><span style="color: #C9D1D9">    ul.innerHTML </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> li</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Before we try this add this minimal styling inside of your <code is:raw>&lt;head&gt;</code> tag:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">grid</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">grid-template-columns</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">grid-gap</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">4</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">list-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">100</span><span style="color: #FF7B72">%</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Restart your server, refresh your browser, and try it out! You can display any of the information provided by Genius.</p>\n<YouTube id="IFuJiNNoYYw" />\n<p>No one ever said I was a good singer.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>There are quite a lot of improvements you could make here:</p>\n<ul>\n<li>Show utterances to users in the browser</li>\n<li>Do searches as soon as utterances are available, and update them as more words are said</li>\n<li>Allow multiple songs without needing to \u2018reset\u2019 by refreshing</li>\n<li>Give it a festive theme</li>\n</ul>\n<p>This post has also introduced you to the code required to stream your microphone from the browser to Deepgram via a server, thus protecting your API Key from being exposed.</p>\n<p>We\u2019ll have some more posts coming out before Christmas, but from me, this is it until January, so please have a wonderful festive period and a wonderful new year. The complete project is available at <a href="https://github.com/deepgram-devs/song-search">https://github.com/deepgram-devs/song-search</a>, and if you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/song-search-js/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Love it or hate it, Christmas is a period for music, and that comes the frustrating scenario of knowing lyrics but not quite knowing the song. Of course, you could just search the lyrics, but where’s the fun in that? In this project, we will warm up our vocal cords and use Deepgram and the Genius Song Lyrics API to build a website that should correctly guess spoken or sung lyrics.</p>
<p>While doing this, we’ll learn how to stream microphone data to Deepgram via a server, so you don’t need to worry about exposing your API Key.</p>
<p>This is what we’ll be building:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/diagram.png" alt="A diagram showing 9 steps. 1 - emit mic data from browser to server using socket.io. 2 - send mic data from server to Deepgram via Deepgram SDK. 3 - Deepgram returns utterances to server. 4 - the server stores utterances. 5 - a user presses a button and emits search event to server. 6 - server searches song on Genius. 7 - Genius sends response to server. 8 - Server emits response to browser. 9 - browser shows result. Steps 1-3 have a green background and steps 4-9 have a blue background."></p>
<p>The green area is one set of steps that gets us to the point of transcripts. The blue area covers searching for and displaying songs. Don’t worry if that looks like a lot - we’ll take it step by step. If you want to look at the final project code, you can find it at <a href="https://github.com/deepgram-devs/song-search">https://github.com/deepgram-devs/song-search</a>.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>
<li>A Genius API Access Token - <a href="https://genius.com/api-clients">get one here</a>.</li>
</ul>
<p>Create a new directory and navigate to it with your terminal. Run <code>npm init -y</code> to create a <code>package.json</code> file and then install the following packages:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">npm install dotenv @deepgram/sdk express socket.io axios</span></span></code></pre>
<p>Create a <code>.env</code> file and add the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">DG_KEY=replace_with_deepgram_api_key</span></span>
<span class="line"><span style="color: #c9d1d9">GENIUS_TOKEN=replace_with_genius_access_token</span></span></code></pre>
<p>Create an <code>index.js</code> file, a folder called <code>public</code>, and inside of the public folder create an <code>index.html</code> file. In <code>index.html</code> create a boilerplate HTML file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">&lt;!-- Further code goes here --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<h2 id="establish-a-socket-connection">Establish a Socket Connection</h2>
<p>The socket.io library can establish a two-way connection between our server (<code>index.js</code>) and client (<code>index.html</code>). Once connected, we can push data between the two in real-time. We will use this to send data from the user’s microphone to our server to be processed by Deepgram and show results from the server logic.</p>
<p>In the <code>index.html</code> <code>&lt;body&gt;</code> tag:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>In <code>index.js</code> create a combined express and socket.io server and listen for connections:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #8B949E">// Require</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;http&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">(app)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">io</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;socket.io&#39;</span><span style="color: #C9D1D9">)(http)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Configure</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Logic</span></span>
<span class="line"><span style="color: #C9D1D9">io.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;connection&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`Connected at \${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Run</span></span>
<span class="line"><span style="color: #C9D1D9">http.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">3000</span><span style="color: #C9D1D9">, console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`Started at \${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">))</span></span></code></pre>
<p>For this tutorial, I would leave the comments in as I refer to sections later by their names. Start the server in your terminal by navigating to the directory and running <code>node index.js</code>. Open your browser to <code>http://localhost:3000</code>, and you should see ‘Connected at <code>date</code>’ in your terminal. Once this connection is established, we can send and listen for events on both the server and the client.</p>
<h2 id="access-and-send-audio">Access and Send Audio</h2>
<p>In <a href="/blog/2021/11/live-transcription-mic-browser/">a blog post last month</a> we covered how to access and retreive data from user’s mic in a web browser. Each of the steps are covered there, so we’ll be lifting the examples from it without a deep explanation. In <code>index.html</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices.</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> }).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">mediaRecorder</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">1000</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>This will immediately ask for access to the microphone and begin accessing data once permitted. When emitting events with socket.io, we can specify a specific event name which we can then listen for on the server. Here, we have called it <code>microphone-stream</code> and send it with the raw mic data.</p>
<h2 id="listening-for-events">Listening for Events</h2>
<p>In <code>index.js</code> inside of the connection and below the <code>console.log()</code> statement:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream event&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Restart your server and then refresh your web page. Once you grant access to your microphone, you should see a steady stream of logs indicating that data is sent from your browser to the server. You may stop your server while we continue with the next step.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178711/blog/2021/12/song-search-js/microphone-stream-event.png" alt="A terminal showing the server starting, a client connecting, and then 4 microphone stream event logs."></p>
<h2 id="setting-up-deepgram">Setting Up Deepgram</h2>
<p>At the top of the Require section in <code>index.js</code> add <code>dotenv</code> which will allow access to the <code>.env</code> file values.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span></code></pre>
<p>At the bottom of the Require section require the Deepgram Node.js SDK which we installed earlier:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Finally, in configure, initialize the SDK and create a new live transcription service:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgramLive</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">live</span><span style="color: #C9D1D9">({ utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span></code></pre>
<h2 id="getting-live-deepgram-transcripts">Getting Live Deepgram Transcripts</h2>
<p>Inside of the <code>microphone-stream</code> event handler comment out the <code>console.log()</code>. In it’s place, take the provided data and send it directly to Deepgram:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;microphone-stream&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// console.log(&#39;microphone-stream event&#39;)</span></span>
<span class="line"><span style="color: #C9D1D9">  deepgramLive.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(data)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Further code goes here</span></span></code></pre>
<p><code>deepgramLive</code> provides an event when Deepgram has a transcript ready, and like the <a href="/blog/2021/11/live-transcription-mic-browser/">browser live transcription blog post</a> we will wait for the final transcript for each of our utterances (phrases).</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">deepgramLive.</span><span style="color: #D2A8FF">addListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReceived&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">result</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(data)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">utterance</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> result.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (result.is_final </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> utterance) {</span></span>
<span class="line"><span style="color: #C9D1D9">    transcript </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> utterance</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Restart your server, refresh your browser, and speak into your microphone. You should see a transcript appear in your terminal.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178714/blog/2021/12/song-search-js/transcript-terminal-log.png" alt="A terminal showing give phrases with words spoken, with each adding words on to the last and getting longer."></p>
<h2 id="triggering-song-search">Triggering Song Search</h2>
<p>Because a set of lyrics can take up multiple utterances, we need to have a way to indicate that we are finished and the search should take place. We will attach an event listener to a button that, when pressed, will emit an event.</p>
<p>In <code>index.html</code> add a <code>&lt;button&gt;</code> at the top of your <code>&lt;body&gt;</code> tag:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">&lt;button&gt;Search Song&lt;/button&gt;</span></span></code></pre>
<p>Just below <code>mediaRecorder.start(1000)</code> add the following logic:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">button</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">button.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  button.</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">stop</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>When the button is pressed, it will be removed from the DOM, so we only can click it once; we stop the mediaRecorder (and, in doing so, stop emitting the <code>microphone-stream</code> events), and emit a new event called <code>search</code>.</p>
<p>In <code>index.js</code> add a new socket event listener just after the block for <code>microphone-stream</code> is closed:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;search event&#39;</span><span style="color: #C9D1D9">, transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Restart your server and refresh the browser. Speak a few phrases and click the button. You should see the search event take place with the final transcript logged.</p>
<h2 id="searching-for-songs">Searching for Songs</h2>
<p>We will use the <a href="https://docs.genius.com">Genius API</a> to search for songs based on lyrics. To make this API call, we’ll utilize Node package <code>axios</code>. In the Require section of our <code>index.js</code> file, add the package:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">axios</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;axios&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>And make the API call when the <code>search</code> event is received:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">axios</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">  method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  url: </span><span style="color: #A5D6FF">\`https://api.genius.com/search?q=\${</span><span style="color: #C9D1D9">transcript</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  headers: {</span></span>
<span class="line"><span style="color: #C9D1D9">    Authorization: </span><span style="color: #A5D6FF">\`Bearer \${</span><span style="color: #C9D1D9">process</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">env</span><span style="color: #A5D6FF">.</span><span style="color: #79C0FF">GENIUS_TOKEN</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  },</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">topThree</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.response.hits.</span><span style="color: #D2A8FF">slice</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">3</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(topThree)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Further code here</span></span></code></pre>
<p>Restart your server and refresh your browser.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637178713/blog/2021/12/song-search-js/songs-returned.png" alt="A terminal showing an array with several items. Each item contains metadata for one song."></p>
<p><strong>Yay!</strong></p>
<h2 id="displaying-results">Displaying Results</h2>
<p>The final step is to show the output to the user by emitting an event from the server back to the client. Doing this is nearly identical to the other direction. In <code>index.js</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;result&#39;</span><span style="color: #C9D1D9">, topThree)</span></span></code></pre>
<p>In <code>index.html</code> add an empty <code>&lt;ul&gt;</code> under the <code>&lt;button&gt;</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">&lt;ul&gt;&lt;/ul&gt;</span></span></code></pre>
<p>At the bottom of the <code>&lt;script&gt;</code> tag, below all other code, listen for the <code>results</code> event and add items to the new list:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">ul</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;ul&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> song </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> data) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">li</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">\`</span></span>
<span class="line"><span style="color: #A5D6FF">    &lt;li&gt;</span></span>
<span class="line"><span style="color: #A5D6FF">      &lt;img src=&quot;\${</span><span style="color: #C9D1D9">song</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">result</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">song_art_image_url</span><span style="color: #A5D6FF">}&quot;&gt;</span></span>
<span class="line"><span style="color: #A5D6FF">      &lt;p&gt;\${</span><span style="color: #C9D1D9">song</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">result</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">full_title</span><span style="color: #A5D6FF">}&lt;/p&gt;</span></span>
<span class="line"><span style="color: #A5D6FF">    &lt;/li&gt;</span></span>
<span class="line"><span style="color: #A5D6FF">  \`</span></span>
<span class="line"><span style="color: #C9D1D9">    ul.innerHTML </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> li</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Before we try this add this minimal styling inside of your <code>&lt;head&gt;</code> tag:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">ul</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">grid</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">grid-template-columns</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">fr</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">grid-gap</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">4</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">list-style</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">100</span><span style="color: #FF7B72">%</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">style</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Restart your server, refresh your browser, and try it out! You can display any of the information provided by Genius.</p>
${renderComponent($$result, "YouTube", YouTube, { "id": "IFuJiNNoYYw" })}
<p>No one ever said I was a good singer.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>There are quite a lot of improvements you could make here:</p>
<ul>
<li>Show utterances to users in the browser</li>
<li>Do searches as soon as utterances are available, and update them as more words are said</li>
<li>Allow multiple songs without needing to ‘reset’ by refreshing</li>
<li>Give it a festive theme</li>
</ul>
<p>This post has also introduced you to the code required to stream your microphone from the browser to Deepgram via a server, thus protecting your API Key from being exposed.</p>
<p>We’ll have some more posts coming out before Christmas, but from me, this is it until January, so please have a wonderful festive period and a wonderful new year. The complete project is available at <a href="https://github.com/deepgram-devs/song-search">https://github.com/deepgram-devs/song-search</a>, and if you have any questions, please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
});

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
