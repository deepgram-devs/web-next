import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
/* empty css                           */import 'axios';
/* empty css                          *//* empty css                           *//* empty css                          *//* empty css                              *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           *//* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-you-start", "text": "Before You Start" }, { "depth": 2, "slug": "generating-a-transcript-with-deepgram", "text": "Generating a Transcript With Deepgram" }, { "depth": 2, "slug": "setting-up-the-language-checker", "text": "Setting Up the Language Checker" }, { "depth": 2, "slug": "checking-each-utterances-language", "text": "Checking Each Utterance\u2019s Language" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nPersonal language usage is a journey of learning and adapting, which certainly extends to terms you may not yet realize are non-inclusive or potentially profane to others. By detecting and pointing out some potentially-problematic language, you can work towards being more considerate and kind to others.\n\n[alex](https://alexjs.com) is a lovely command-line tool that takes in text or markdown files and, using [`retext-equality`](https://github.com/retextjs/retext-equality/blob/main/rules.md) and [`retext-profanities`](https://github.com/retextjs/retext-profanities/blob/main/rules.md), highlights suggestions for improvement. alex checks for gendered work titles, gendered proverbs, ableist language, condescending or intolerant language, profanities, and much more.\n\nIn this short tutorial, we'll cover how to use the `retext` libraries `alex` depends on to check your Deepgram transcript [utterances](https://developers.deepgram.com/documentation/features/utterances/) for suggestions.\n\n## Before You Start\n\nBefore we start, you will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\nCreate a new directory and open it in your code editor, navigate to it in your terminal, create a new `package.json` file by running `npm init -y`, and install dependencies:\n\n    npm install retext retext-equality retext-profanities vfile-reporter-json @deepgram/sdk\n\nThe `retext` packages require an ES6 project. The easiest way to do this without needing to compile code with a tool like Babel is to add the following property to your `package.json` file:\n\n    \"type\": \"module\"\n\nCreate and open an `index.js` file in your code editor.\n\n## Generating a Transcript With Deepgram\n\nThe Deepgram Node.js is a CommonJS module, but can be imported via the default export. Because of this, our import will go from this in CommonJS:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nTo this in ES6 (`DG` can be anything as long as it's the same in both uses):\n\n```js\nimport DG from '@deepgram/sdk'\nconst { Deepgram } = DG\n```\n\nThen, generate a transcript. Here I am using a recording of my voice reading out the `alex` sample phrase for demonstration.\n\n```js\nconst deepgram = new Deepgram('YOUR_DEEPGRAM_API_KEY')\nconst url = 'http://lws.io/static/inconsiderate.mp3'\nconst { results } = await deepgram.transcription.preRecorded({ url }, { utterances: true })\nconsole.log(results)\n```\n\nAs the [utterances](https://developers.deepgram.com/documentation/features/utterances/) feature is being used, an array will be provided with each utterance (spoken phrase) along with when it was spoken.\n\nTest it out! Run the file with `node index.js`, and you should see a payload in your terminal. Once you know it works, remove the `console.log()`.\n\n## Setting Up the Language Checker\n\nAt the very top of `index.js`, include the dependencies required to set up `retext` and then report issues found from it:\n\n```js\nimport { reporterJson } from 'vfile-reporter-json'\nimport { retext } from 'retext'\nimport retextProfanities from 'retext-profanities'\nimport retextEquality from 'retext-equality'\n```\n\nThen, create the following reusable function:\n\n```js\nasync function checkText(text) {\n    const file = await retext()\n        .use(retextProfanities)\n        .use(retextEquality)\n        .process(text)\n    const outcome = JSON.parse(reporterJson(file))\n    const warnings = outcome[0].messages.map(r => r.reason)\n    return warnings\n}\n```\n\nThis function processes the provided text through the specified plugins (here, `retextProfanities` and `retextEquality`). The `outcome` is actually quite a large amount of data:\n\n```js\n{\n    reason: '`man` may be insensitive, use `people`, `persons`, `folks` instead',\n    line: 1,\n    column: 9,\n    position: {\n        start: { line: 1, column: 9, offset: 8 },\n        end: { line: 1, column: 12, offset: 11 }\n    },\n    ruleId: 'gals-man',\n    source: 'retext-equality',\n    fatal: false,\n    stack: null\n},\n```\n\nThe `warnings` map in the reusable `checkText` function extracts only the `reason` and returns an array of these strings. Try it out by temporarily adding this line:\n\n```js\nconst testSuggestions = await checkText('He is a butthead.')\nconsole.log(testSuggestions)\n```\n\nThe result should be:\n\n```js\n[\n    'Don\u2019t use `butthead`, it\u2019s profane',\n    '`He` may be insensitive, use `They`, `It` instead'\n]\n```\n\nOnce you know it works, remove the `console.log()`.\n\n## Checking Each Utterance's Language\n\nAdd the following to your `index.js` file below where you generate Deepgram transcripts:\n\n```js\nlet suggestions = []\n\nfor(let utterance of results.utterances) {\n    const { transcript, start } = utterance\n\n    // Get array of warning strings\n    let warnings = await checkText(transcript)\n\n    // Alter strings to be objects including the utterance transcript and start time\n    warnings = warnings.map(warning => ({ warning, transcript, start }))\n\n    // Append to end of array\n    suggestions = [...suggestions, ...warnings]\n}\n\nconsole.log(suggestions)\n```\n\nYour terminal should show all of the suggestions presented by the two `retext` plugins:\n\n![A terminal showing an array of objects. Each object is one suggestion including the original text, a warning, and the utterance start time.](https://res.cloudinary.com/deepgram/image/upload/v1660574296/blog/2022/09/uninclusive-language-retext/final-output.png)\n\n## Wrapping Up\n\nThis full snippet (below) is a great place to start identifying and changing usage and non-inclusive language patterns. You may quickly realize that the `retext` plugins lack nuance and sometimes make suggestions on false-positive matches. Don't consider the suggestions as \"must-dos\", but rather points for consideration and thought.\n\nThere's a whole host of [other `retext` plugins](https://github.com/retextjs/retext/blob/main/doc/plugins.md) which you can process text with, including those that handle assumptions, cliches, passive voice, repetition, overly-complex words, and more. Enjoy!\n\n```js\nimport { reporterJson } from 'vfile-reporter-json'\nimport { retext } from 'retext'\nimport retextProfanities from 'retext-profanities'\nimport retextEquality from 'retext-equality'\nimport DG from '@deepgram/sdk'\nconst { Deepgram } = DG\nconst deepgram = new Deepgram(process.env.DG_KEY)\n\nconst url = 'http://lws.io/static/inconsiderate.mp3'\nconst { results } = await deepgram.transcription.preRecorded({ url }, { utterances: true })\n\nasync function checkText(text) {\n    const file = await retext()\n        .use(retextProfanities)\n        .use(retextEquality)\n        .process(text)\n    const outcome = JSON.parse(reporterJson(file))\n    const warnings = outcome[0].messages.map(r => r.reason)\n    return warnings\n}\n\nlet suggestions = []\nfor(let utterance of results.utterances) {\n    const { transcript, start } = utterance\n    let warnings = await checkText(transcript)\n    warnings = warnings.map(warning => ({ warning, transcript, start }))\n    suggestions = [...suggestions, ...warnings]\n}\n\nconsole.log(suggestions)\n```\n\n", "html": '<p>Personal language usage is a journey of learning and adapting, which certainly extends to terms you may not yet realize are non-inclusive or potentially profane to others. By detecting and pointing out some potentially-problematic language, you can work towards being more considerate and kind to others.</p>\n<p><a href="https://alexjs.com">alex</a> is a lovely command-line tool that takes in text or markdown files and, using <a href="https://github.com/retextjs/retext-equality/blob/main/rules.md"><code is:raw>retext-equality</code></a> and <a href="https://github.com/retextjs/retext-profanities/blob/main/rules.md"><code is:raw>retext-profanities</code></a>, highlights suggestions for improvement. alex checks for gendered work titles, gendered proverbs, ableist language, condescending or intolerant language, profanities, and much more.</p>\n<p>In this short tutorial, we\u2019ll cover how to use the <code is:raw>retext</code> libraries <code is:raw>alex</code> depends on to check your Deepgram transcript <a href="https://developers.deepgram.com/documentation/features/utterances/">utterances</a> for suggestions.</p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>Before we start, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Create a new directory and open it in your code editor, navigate to it in your terminal, create a new <code is:raw>package.json</code> file by running <code is:raw>npm init -y</code>, and install dependencies:</p>\n<p>npm install retext retext-equality retext-profanities vfile-reporter-json @deepgram/sdk</p>\n<p>The <code is:raw>retext</code> packages require an ES6 project. The easiest way to do this without needing to compile code with a tool like Babel is to add the following property to your <code is:raw>package.json</code> file:</p>\n<p>\u201Ctype\u201D: \u201Cmodule\u201D</p>\n<p>Create and open an <code is:raw>index.js</code> file in your code editor.</p>\n<h2 id="generating-a-transcript-with-deepgram">Generating a Transcript With Deepgram</h2>\n<p>The Deepgram Node.js is a CommonJS module, but can be imported via the default export. Because of this, our import will go from this in CommonJS:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>To this in ES6 (<code is:raw>DG</code> can be anything as long as it\u2019s the same in both uses):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> DG </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG</span></span></code></pre>\n<p>Then, generate a transcript. Here I am using a recording of my voice reading out the <code is:raw>alex</code> sample phrase for demonstration.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://lws.io/static/inconsiderate.mp3&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }, { utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results)</span></span></code></pre>\n<p>As the <a href="https://developers.deepgram.com/documentation/features/utterances/">utterances</a> feature is being used, an array will be provided with each utterance (spoken phrase) along with when it was spoken.</p>\n<p>Test it out! Run the file with <code is:raw>node index.js</code>, and you should see a payload in your terminal. Once you know it works, remove the <code is:raw>console.log()</code>.</p>\n<h2 id="setting-up-the-language-checker">Setting Up the Language Checker</h2>\n<p>At the very top of <code is:raw>index.js</code>, include the dependencies required to set up <code is:raw>retext</code> and then report issues found from it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { reporterJson } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vfile-reporter-json&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { retext } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextProfanities </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-profanities&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextEquality </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span></span></code></pre>\n<p>Then, create the following reusable function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">retext</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextProfanities)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextEquality)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">process</span><span style="color: #C9D1D9">(text)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">outcome</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">reporterJson</span><span style="color: #C9D1D9">(file))</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">warnings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> outcome[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].messages.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.reason)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> warnings</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function processes the provided text through the specified plugins (here, <code is:raw>retextProfanities</code> and <code is:raw>retextEquality</code>). The <code is:raw>outcome</code> is actually quite a large amount of data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">reason</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;`man` may be insensitive, use `people`, `persons`, `folks` instead&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">9</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">position</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">start</span><span style="color: #C9D1D9">: { </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">9</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">offset</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">8</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">end</span><span style="color: #C9D1D9">: { </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">offset</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">ruleId</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;gals-man&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">source</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">fatal</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">stack</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>The <code is:raw>warnings</code> map in the reusable <code is:raw>checkText</code> function extracts only the <code is:raw>reason</code> and returns an array of these strings. Try it out by temporarily adding this line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">testSuggestions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;He is a butthead.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(testSuggestions)</span></span></code></pre>\n<p>The result should be:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Don\u2019t use `butthead`, it\u2019s profane&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;`He` may be insensitive, use `They`, `It` instead&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Once you know it works, remove the <code is:raw>console.log()</code>.</p>\n<h2 id="checking-each-utterances-language">Checking Each Utterance\u2019s Language</h2>\n<p>Add the following to your <code is:raw>index.js</code> file below where you generate Deepgram transcripts:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> results.utterances) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> utterance</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get array of warning strings</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Alter strings to be objects including the utterance transcript and start time</span></span>\n<span class="line"><span style="color: #C9D1D9">    warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> warnings.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">warning</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({ warning, transcript, start }))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Append to end of array</span></span>\n<span class="line"><span style="color: #C9D1D9">    suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">suggestions, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">warnings]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(suggestions)</span></span></code></pre>\n<p>Your terminal should show all of the suggestions presented by the two <code is:raw>retext</code> plugins:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660574296/blog/2022/09/uninclusive-language-retext/final-output.png" alt="A terminal showing an array of objects. Each object is one suggestion including the original text, a warning, and the utterance start time."></p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>This full snippet (below) is a great place to start identifying and changing usage and non-inclusive language patterns. You may quickly realize that the <code is:raw>retext</code> plugins lack nuance and sometimes make suggestions on false-positive matches. Don\u2019t consider the suggestions as \u201Cmust-dos\u201D, but rather points for consideration and thought.</p>\n<p>There\u2019s a whole host of <a href="https://github.com/retextjs/retext/blob/main/doc/plugins.md">other <code is:raw>retext</code> plugins</a> which you can process text with, including those that handle assumptions, cliches, passive voice, repetition, overly-complex words, and more. Enjoy!</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { reporterJson } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vfile-reporter-json&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { retext } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextProfanities </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-profanities&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextEquality </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> DG </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://lws.io/static/inconsiderate.mp3&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }, { utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">retext</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextProfanities)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextEquality)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">process</span><span style="color: #C9D1D9">(text)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">outcome</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">reporterJson</span><span style="color: #C9D1D9">(file))</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">warnings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> outcome[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].messages.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.reason)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> warnings</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> results.utterances) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> warnings.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">warning</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({ warning, transcript, start }))</span></span>\n<span class="line"><span style="color: #C9D1D9">    suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">suggestions, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">warnings]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(suggestions)</span></span></code></pre>' };
const frontmatter = { "title": "Detect Non-Inclusive Language with Retext and Node.js", "description": "Learn how to use the retext natural language tool to identify non-inclusive language with JavaScript.", "date": "2022-09-01T18:51:41.053Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1661982184/blog/2022/09/uninclusive-language-retext/cover.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["javascript"], "shorturls": { "share": "https://dpgr.am/fabf193", "twitter": "https://dpgr.am/c1cae38", "linkedin": "https://dpgr.am/62941ab", "reddit": "https://dpgr.am/549cebe", "facebook": "https://dpgr.am/7d895a9" }, "astro": { "headings": [{ "depth": 2, "slug": "before-you-start", "text": "Before You Start" }, { "depth": 2, "slug": "generating-a-transcript-with-deepgram", "text": "Generating a Transcript With Deepgram" }, { "depth": 2, "slug": "setting-up-the-language-checker", "text": "Setting Up the Language Checker" }, { "depth": 2, "slug": "checking-each-utterances-language", "text": "Checking Each Utterance\u2019s Language" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nPersonal language usage is a journey of learning and adapting, which certainly extends to terms you may not yet realize are non-inclusive or potentially profane to others. By detecting and pointing out some potentially-problematic language, you can work towards being more considerate and kind to others.\n\n[alex](https://alexjs.com) is a lovely command-line tool that takes in text or markdown files and, using [`retext-equality`](https://github.com/retextjs/retext-equality/blob/main/rules.md) and [`retext-profanities`](https://github.com/retextjs/retext-profanities/blob/main/rules.md), highlights suggestions for improvement. alex checks for gendered work titles, gendered proverbs, ableist language, condescending or intolerant language, profanities, and much more.\n\nIn this short tutorial, we'll cover how to use the `retext` libraries `alex` depends on to check your Deepgram transcript [utterances](https://developers.deepgram.com/documentation/features/utterances/) for suggestions.\n\n## Before You Start\n\nBefore we start, you will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\nCreate a new directory and open it in your code editor, navigate to it in your terminal, create a new `package.json` file by running `npm init -y`, and install dependencies:\n\n    npm install retext retext-equality retext-profanities vfile-reporter-json @deepgram/sdk\n\nThe `retext` packages require an ES6 project. The easiest way to do this without needing to compile code with a tool like Babel is to add the following property to your `package.json` file:\n\n    \"type\": \"module\"\n\nCreate and open an `index.js` file in your code editor.\n\n## Generating a Transcript With Deepgram\n\nThe Deepgram Node.js is a CommonJS module, but can be imported via the default export. Because of this, our import will go from this in CommonJS:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nTo this in ES6 (`DG` can be anything as long as it's the same in both uses):\n\n```js\nimport DG from '@deepgram/sdk'\nconst { Deepgram } = DG\n```\n\nThen, generate a transcript. Here I am using a recording of my voice reading out the `alex` sample phrase for demonstration.\n\n```js\nconst deepgram = new Deepgram('YOUR_DEEPGRAM_API_KEY')\nconst url = 'http://lws.io/static/inconsiderate.mp3'\nconst { results } = await deepgram.transcription.preRecorded({ url }, { utterances: true })\nconsole.log(results)\n```\n\nAs the [utterances](https://developers.deepgram.com/documentation/features/utterances/) feature is being used, an array will be provided with each utterance (spoken phrase) along with when it was spoken.\n\nTest it out! Run the file with `node index.js`, and you should see a payload in your terminal. Once you know it works, remove the `console.log()`.\n\n## Setting Up the Language Checker\n\nAt the very top of `index.js`, include the dependencies required to set up `retext` and then report issues found from it:\n\n```js\nimport { reporterJson } from 'vfile-reporter-json'\nimport { retext } from 'retext'\nimport retextProfanities from 'retext-profanities'\nimport retextEquality from 'retext-equality'\n```\n\nThen, create the following reusable function:\n\n```js\nasync function checkText(text) {\n    const file = await retext()\n        .use(retextProfanities)\n        .use(retextEquality)\n        .process(text)\n    const outcome = JSON.parse(reporterJson(file))\n    const warnings = outcome[0].messages.map(r => r.reason)\n    return warnings\n}\n```\n\nThis function processes the provided text through the specified plugins (here, `retextProfanities` and `retextEquality`). The `outcome` is actually quite a large amount of data:\n\n```js\n{\n    reason: '`man` may be insensitive, use `people`, `persons`, `folks` instead',\n    line: 1,\n    column: 9,\n    position: {\n        start: { line: 1, column: 9, offset: 8 },\n        end: { line: 1, column: 12, offset: 11 }\n    },\n    ruleId: 'gals-man',\n    source: 'retext-equality',\n    fatal: false,\n    stack: null\n},\n```\n\nThe `warnings` map in the reusable `checkText` function extracts only the `reason` and returns an array of these strings. Try it out by temporarily adding this line:\n\n```js\nconst testSuggestions = await checkText('He is a butthead.')\nconsole.log(testSuggestions)\n```\n\nThe result should be:\n\n```js\n[\n    'Don\u2019t use `butthead`, it\u2019s profane',\n    '`He` may be insensitive, use `They`, `It` instead'\n]\n```\n\nOnce you know it works, remove the `console.log()`.\n\n## Checking Each Utterance's Language\n\nAdd the following to your `index.js` file below where you generate Deepgram transcripts:\n\n```js\nlet suggestions = []\n\nfor(let utterance of results.utterances) {\n    const { transcript, start } = utterance\n\n    // Get array of warning strings\n    let warnings = await checkText(transcript)\n\n    // Alter strings to be objects including the utterance transcript and start time\n    warnings = warnings.map(warning => ({ warning, transcript, start }))\n\n    // Append to end of array\n    suggestions = [...suggestions, ...warnings]\n}\n\nconsole.log(suggestions)\n```\n\nYour terminal should show all of the suggestions presented by the two `retext` plugins:\n\n![A terminal showing an array of objects. Each object is one suggestion including the original text, a warning, and the utterance start time.](https://res.cloudinary.com/deepgram/image/upload/v1660574296/blog/2022/09/uninclusive-language-retext/final-output.png)\n\n## Wrapping Up\n\nThis full snippet (below) is a great place to start identifying and changing usage and non-inclusive language patterns. You may quickly realize that the `retext` plugins lack nuance and sometimes make suggestions on false-positive matches. Don't consider the suggestions as \"must-dos\", but rather points for consideration and thought.\n\nThere's a whole host of [other `retext` plugins](https://github.com/retextjs/retext/blob/main/doc/plugins.md) which you can process text with, including those that handle assumptions, cliches, passive voice, repetition, overly-complex words, and more. Enjoy!\n\n```js\nimport { reporterJson } from 'vfile-reporter-json'\nimport { retext } from 'retext'\nimport retextProfanities from 'retext-profanities'\nimport retextEquality from 'retext-equality'\nimport DG from '@deepgram/sdk'\nconst { Deepgram } = DG\nconst deepgram = new Deepgram(process.env.DG_KEY)\n\nconst url = 'http://lws.io/static/inconsiderate.mp3'\nconst { results } = await deepgram.transcription.preRecorded({ url }, { utterances: true })\n\nasync function checkText(text) {\n    const file = await retext()\n        .use(retextProfanities)\n        .use(retextEquality)\n        .process(text)\n    const outcome = JSON.parse(reporterJson(file))\n    const warnings = outcome[0].messages.map(r => r.reason)\n    return warnings\n}\n\nlet suggestions = []\nfor(let utterance of results.utterances) {\n    const { transcript, start } = utterance\n    let warnings = await checkText(transcript)\n    warnings = warnings.map(warning => ({ warning, transcript, start }))\n    suggestions = [...suggestions, ...warnings]\n}\n\nconsole.log(suggestions)\n```\n\n", "html": '<p>Personal language usage is a journey of learning and adapting, which certainly extends to terms you may not yet realize are non-inclusive or potentially profane to others. By detecting and pointing out some potentially-problematic language, you can work towards being more considerate and kind to others.</p>\n<p><a href="https://alexjs.com">alex</a> is a lovely command-line tool that takes in text or markdown files and, using <a href="https://github.com/retextjs/retext-equality/blob/main/rules.md"><code is:raw>retext-equality</code></a> and <a href="https://github.com/retextjs/retext-profanities/blob/main/rules.md"><code is:raw>retext-profanities</code></a>, highlights suggestions for improvement. alex checks for gendered work titles, gendered proverbs, ableist language, condescending or intolerant language, profanities, and much more.</p>\n<p>In this short tutorial, we\u2019ll cover how to use the <code is:raw>retext</code> libraries <code is:raw>alex</code> depends on to check your Deepgram transcript <a href="https://developers.deepgram.com/documentation/features/utterances/">utterances</a> for suggestions.</p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>Before we start, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Create a new directory and open it in your code editor, navigate to it in your terminal, create a new <code is:raw>package.json</code> file by running <code is:raw>npm init -y</code>, and install dependencies:</p>\n<p>npm install retext retext-equality retext-profanities vfile-reporter-json @deepgram/sdk</p>\n<p>The <code is:raw>retext</code> packages require an ES6 project. The easiest way to do this without needing to compile code with a tool like Babel is to add the following property to your <code is:raw>package.json</code> file:</p>\n<p>\u201Ctype\u201D: \u201Cmodule\u201D</p>\n<p>Create and open an <code is:raw>index.js</code> file in your code editor.</p>\n<h2 id="generating-a-transcript-with-deepgram">Generating a Transcript With Deepgram</h2>\n<p>The Deepgram Node.js is a CommonJS module, but can be imported via the default export. Because of this, our import will go from this in CommonJS:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>To this in ES6 (<code is:raw>DG</code> can be anything as long as it\u2019s the same in both uses):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> DG </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG</span></span></code></pre>\n<p>Then, generate a transcript. Here I am using a recording of my voice reading out the <code is:raw>alex</code> sample phrase for demonstration.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://lws.io/static/inconsiderate.mp3&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }, { utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results)</span></span></code></pre>\n<p>As the <a href="https://developers.deepgram.com/documentation/features/utterances/">utterances</a> feature is being used, an array will be provided with each utterance (spoken phrase) along with when it was spoken.</p>\n<p>Test it out! Run the file with <code is:raw>node index.js</code>, and you should see a payload in your terminal. Once you know it works, remove the <code is:raw>console.log()</code>.</p>\n<h2 id="setting-up-the-language-checker">Setting Up the Language Checker</h2>\n<p>At the very top of <code is:raw>index.js</code>, include the dependencies required to set up <code is:raw>retext</code> and then report issues found from it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { reporterJson } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vfile-reporter-json&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { retext } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextProfanities </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-profanities&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextEquality </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span></span></code></pre>\n<p>Then, create the following reusable function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">retext</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextProfanities)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextEquality)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">process</span><span style="color: #C9D1D9">(text)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">outcome</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">reporterJson</span><span style="color: #C9D1D9">(file))</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">warnings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> outcome[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].messages.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.reason)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> warnings</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function processes the provided text through the specified plugins (here, <code is:raw>retextProfanities</code> and <code is:raw>retextEquality</code>). The <code is:raw>outcome</code> is actually quite a large amount of data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">reason</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;`man` may be insensitive, use `people`, `persons`, `folks` instead&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">9</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">position</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">start</span><span style="color: #C9D1D9">: { </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">9</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">offset</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">8</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">end</span><span style="color: #C9D1D9">: { </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">offset</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">ruleId</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;gals-man&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">source</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">fatal</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">stack</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>The <code is:raw>warnings</code> map in the reusable <code is:raw>checkText</code> function extracts only the <code is:raw>reason</code> and returns an array of these strings. Try it out by temporarily adding this line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">testSuggestions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;He is a butthead.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(testSuggestions)</span></span></code></pre>\n<p>The result should be:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Don\u2019t use `butthead`, it\u2019s profane&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;`He` may be insensitive, use `They`, `It` instead&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Once you know it works, remove the <code is:raw>console.log()</code>.</p>\n<h2 id="checking-each-utterances-language">Checking Each Utterance\u2019s Language</h2>\n<p>Add the following to your <code is:raw>index.js</code> file below where you generate Deepgram transcripts:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> results.utterances) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> utterance</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get array of warning strings</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Alter strings to be objects including the utterance transcript and start time</span></span>\n<span class="line"><span style="color: #C9D1D9">    warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> warnings.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">warning</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({ warning, transcript, start }))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Append to end of array</span></span>\n<span class="line"><span style="color: #C9D1D9">    suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">suggestions, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">warnings]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(suggestions)</span></span></code></pre>\n<p>Your terminal should show all of the suggestions presented by the two <code is:raw>retext</code> plugins:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660574296/blog/2022/09/uninclusive-language-retext/final-output.png" alt="A terminal showing an array of objects. Each object is one suggestion including the original text, a warning, and the utterance start time."></p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>This full snippet (below) is a great place to start identifying and changing usage and non-inclusive language patterns. You may quickly realize that the <code is:raw>retext</code> plugins lack nuance and sometimes make suggestions on false-positive matches. Don\u2019t consider the suggestions as \u201Cmust-dos\u201D, but rather points for consideration and thought.</p>\n<p>There\u2019s a whole host of <a href="https://github.com/retextjs/retext/blob/main/doc/plugins.md">other <code is:raw>retext</code> plugins</a> which you can process text with, including those that handle assumptions, cliches, passive voice, repetition, overly-complex words, and more. Enjoy!</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { reporterJson } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vfile-reporter-json&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { retext } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextProfanities </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-profanities&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextEquality </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> DG </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://lws.io/static/inconsiderate.mp3&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }, { utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">retext</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextProfanities)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextEquality)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">process</span><span style="color: #C9D1D9">(text)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">outcome</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">reporterJson</span><span style="color: #C9D1D9">(file))</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">warnings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> outcome[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].messages.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.reason)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> warnings</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> results.utterances) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> warnings.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">warning</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({ warning, transcript, start }))</span></span>\n<span class="line"><span style="color: #C9D1D9">    suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">suggestions, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">warnings]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(suggestions)</span></span></code></pre>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/detect-non-inclusive-language-with-retext-and-node-js/index.md" };
function rawContent() {
  return "\nPersonal language usage is a journey of learning and adapting, which certainly extends to terms you may not yet realize are non-inclusive or potentially profane to others. By detecting and pointing out some potentially-problematic language, you can work towards being more considerate and kind to others.\n\n[alex](https://alexjs.com) is a lovely command-line tool that takes in text or markdown files and, using [`retext-equality`](https://github.com/retextjs/retext-equality/blob/main/rules.md) and [`retext-profanities`](https://github.com/retextjs/retext-profanities/blob/main/rules.md), highlights suggestions for improvement. alex checks for gendered work titles, gendered proverbs, ableist language, condescending or intolerant language, profanities, and much more.\n\nIn this short tutorial, we'll cover how to use the `retext` libraries `alex` depends on to check your Deepgram transcript [utterances](https://developers.deepgram.com/documentation/features/utterances/) for suggestions.\n\n## Before You Start\n\nBefore we start, you will need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\nCreate a new directory and open it in your code editor, navigate to it in your terminal, create a new `package.json` file by running `npm init -y`, and install dependencies:\n\n    npm install retext retext-equality retext-profanities vfile-reporter-json @deepgram/sdk\n\nThe `retext` packages require an ES6 project. The easiest way to do this without needing to compile code with a tool like Babel is to add the following property to your `package.json` file:\n\n    \"type\": \"module\"\n\nCreate and open an `index.js` file in your code editor.\n\n## Generating a Transcript With Deepgram\n\nThe Deepgram Node.js is a CommonJS module, but can be imported via the default export. Because of this, our import will go from this in CommonJS:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\n```\n\nTo this in ES6 (`DG` can be anything as long as it's the same in both uses):\n\n```js\nimport DG from '@deepgram/sdk'\nconst { Deepgram } = DG\n```\n\nThen, generate a transcript. Here I am using a recording of my voice reading out the `alex` sample phrase for demonstration.\n\n```js\nconst deepgram = new Deepgram('YOUR_DEEPGRAM_API_KEY')\nconst url = 'http://lws.io/static/inconsiderate.mp3'\nconst { results } = await deepgram.transcription.preRecorded({ url }, { utterances: true })\nconsole.log(results)\n```\n\nAs the [utterances](https://developers.deepgram.com/documentation/features/utterances/) feature is being used, an array will be provided with each utterance (spoken phrase) along with when it was spoken.\n\nTest it out! Run the file with `node index.js`, and you should see a payload in your terminal. Once you know it works, remove the `console.log()`.\n\n## Setting Up the Language Checker\n\nAt the very top of `index.js`, include the dependencies required to set up `retext` and then report issues found from it:\n\n```js\nimport { reporterJson } from 'vfile-reporter-json'\nimport { retext } from 'retext'\nimport retextProfanities from 'retext-profanities'\nimport retextEquality from 'retext-equality'\n```\n\nThen, create the following reusable function:\n\n```js\nasync function checkText(text) {\n    const file = await retext()\n        .use(retextProfanities)\n        .use(retextEquality)\n        .process(text)\n    const outcome = JSON.parse(reporterJson(file))\n    const warnings = outcome[0].messages.map(r => r.reason)\n    return warnings\n}\n```\n\nThis function processes the provided text through the specified plugins (here, `retextProfanities` and `retextEquality`). The `outcome` is actually quite a large amount of data:\n\n```js\n{\n    reason: '`man` may be insensitive, use `people`, `persons`, `folks` instead',\n    line: 1,\n    column: 9,\n    position: {\n        start: { line: 1, column: 9, offset: 8 },\n        end: { line: 1, column: 12, offset: 11 }\n    },\n    ruleId: 'gals-man',\n    source: 'retext-equality',\n    fatal: false,\n    stack: null\n},\n```\n\nThe `warnings` map in the reusable `checkText` function extracts only the `reason` and returns an array of these strings. Try it out by temporarily adding this line:\n\n```js\nconst testSuggestions = await checkText('He is a butthead.')\nconsole.log(testSuggestions)\n```\n\nThe result should be:\n\n```js\n[\n    'Don\u2019t use `butthead`, it\u2019s profane',\n    '`He` may be insensitive, use `They`, `It` instead'\n]\n```\n\nOnce you know it works, remove the `console.log()`.\n\n## Checking Each Utterance's Language\n\nAdd the following to your `index.js` file below where you generate Deepgram transcripts:\n\n```js\nlet suggestions = []\n\nfor(let utterance of results.utterances) {\n    const { transcript, start } = utterance\n\n    // Get array of warning strings\n    let warnings = await checkText(transcript)\n\n    // Alter strings to be objects including the utterance transcript and start time\n    warnings = warnings.map(warning => ({ warning, transcript, start }))\n\n    // Append to end of array\n    suggestions = [...suggestions, ...warnings]\n}\n\nconsole.log(suggestions)\n```\n\nYour terminal should show all of the suggestions presented by the two `retext` plugins:\n\n![A terminal showing an array of objects. Each object is one suggestion including the original text, a warning, and the utterance start time.](https://res.cloudinary.com/deepgram/image/upload/v1660574296/blog/2022/09/uninclusive-language-retext/final-output.png)\n\n## Wrapping Up\n\nThis full snippet (below) is a great place to start identifying and changing usage and non-inclusive language patterns. You may quickly realize that the `retext` plugins lack nuance and sometimes make suggestions on false-positive matches. Don't consider the suggestions as \"must-dos\", but rather points for consideration and thought.\n\nThere's a whole host of [other `retext` plugins](https://github.com/retextjs/retext/blob/main/doc/plugins.md) which you can process text with, including those that handle assumptions, cliches, passive voice, repetition, overly-complex words, and more. Enjoy!\n\n```js\nimport { reporterJson } from 'vfile-reporter-json'\nimport { retext } from 'retext'\nimport retextProfanities from 'retext-profanities'\nimport retextEquality from 'retext-equality'\nimport DG from '@deepgram/sdk'\nconst { Deepgram } = DG\nconst deepgram = new Deepgram(process.env.DG_KEY)\n\nconst url = 'http://lws.io/static/inconsiderate.mp3'\nconst { results } = await deepgram.transcription.preRecorded({ url }, { utterances: true })\n\nasync function checkText(text) {\n    const file = await retext()\n        .use(retextProfanities)\n        .use(retextEquality)\n        .process(text)\n    const outcome = JSON.parse(reporterJson(file))\n    const warnings = outcome[0].messages.map(r => r.reason)\n    return warnings\n}\n\nlet suggestions = []\nfor(let utterance of results.utterances) {\n    const { transcript, start } = utterance\n    let warnings = await checkText(transcript)\n    warnings = warnings.map(warning => ({ warning, transcript, start }))\n    suggestions = [...suggestions, ...warnings]\n}\n\nconsole.log(suggestions)\n```\n\n";
}
function compiledContent() {
  return '<p>Personal language usage is a journey of learning and adapting, which certainly extends to terms you may not yet realize are non-inclusive or potentially profane to others. By detecting and pointing out some potentially-problematic language, you can work towards being more considerate and kind to others.</p>\n<p><a href="https://alexjs.com">alex</a> is a lovely command-line tool that takes in text or markdown files and, using <a href="https://github.com/retextjs/retext-equality/blob/main/rules.md"><code is:raw>retext-equality</code></a> and <a href="https://github.com/retextjs/retext-profanities/blob/main/rules.md"><code is:raw>retext-profanities</code></a>, highlights suggestions for improvement. alex checks for gendered work titles, gendered proverbs, ableist language, condescending or intolerant language, profanities, and much more.</p>\n<p>In this short tutorial, we\u2019ll cover how to use the <code is:raw>retext</code> libraries <code is:raw>alex</code> depends on to check your Deepgram transcript <a href="https://developers.deepgram.com/documentation/features/utterances/">utterances</a> for suggestions.</p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>Before we start, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Create a new directory and open it in your code editor, navigate to it in your terminal, create a new <code is:raw>package.json</code> file by running <code is:raw>npm init -y</code>, and install dependencies:</p>\n<p>npm install retext retext-equality retext-profanities vfile-reporter-json @deepgram/sdk</p>\n<p>The <code is:raw>retext</code> packages require an ES6 project. The easiest way to do this without needing to compile code with a tool like Babel is to add the following property to your <code is:raw>package.json</code> file:</p>\n<p>\u201Ctype\u201D: \u201Cmodule\u201D</p>\n<p>Create and open an <code is:raw>index.js</code> file in your code editor.</p>\n<h2 id="generating-a-transcript-with-deepgram">Generating a Transcript With Deepgram</h2>\n<p>The Deepgram Node.js is a CommonJS module, but can be imported via the default export. Because of this, our import will go from this in CommonJS:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>To this in ES6 (<code is:raw>DG</code> can be anything as long as it\u2019s the same in both uses):</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> DG </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG</span></span></code></pre>\n<p>Then, generate a transcript. Here I am using a recording of my voice reading out the <code is:raw>alex</code> sample phrase for demonstration.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://lws.io/static/inconsiderate.mp3&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }, { utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results)</span></span></code></pre>\n<p>As the <a href="https://developers.deepgram.com/documentation/features/utterances/">utterances</a> feature is being used, an array will be provided with each utterance (spoken phrase) along with when it was spoken.</p>\n<p>Test it out! Run the file with <code is:raw>node index.js</code>, and you should see a payload in your terminal. Once you know it works, remove the <code is:raw>console.log()</code>.</p>\n<h2 id="setting-up-the-language-checker">Setting Up the Language Checker</h2>\n<p>At the very top of <code is:raw>index.js</code>, include the dependencies required to set up <code is:raw>retext</code> and then report issues found from it:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { reporterJson } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vfile-reporter-json&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { retext } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextProfanities </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-profanities&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextEquality </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span></span></code></pre>\n<p>Then, create the following reusable function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">retext</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextProfanities)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextEquality)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">process</span><span style="color: #C9D1D9">(text)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">outcome</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">reporterJson</span><span style="color: #C9D1D9">(file))</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">warnings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> outcome[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].messages.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.reason)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> warnings</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>This function processes the provided text through the specified plugins (here, <code is:raw>retextProfanities</code> and <code is:raw>retextEquality</code>). The <code is:raw>outcome</code> is actually quite a large amount of data:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">reason</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;`man` may be insensitive, use `people`, `persons`, `folks` instead&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">9</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">position</span><span style="color: #C9D1D9">: {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">start</span><span style="color: #C9D1D9">: { </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">9</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">offset</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">8</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">end</span><span style="color: #C9D1D9">: { </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">offset</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">ruleId</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;gals-man&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">source</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">fatal</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">stack</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span></span>\n<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>\n<p>The <code is:raw>warnings</code> map in the reusable <code is:raw>checkText</code> function extracts only the <code is:raw>reason</code> and returns an array of these strings. Try it out by temporarily adding this line:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">testSuggestions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;He is a butthead.&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(testSuggestions)</span></span></code></pre>\n<p>The result should be:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Don\u2019t use `butthead`, it\u2019s profane&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;`He` may be insensitive, use `They`, `It` instead&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>\n<p>Once you know it works, remove the <code is:raw>console.log()</code>.</p>\n<h2 id="checking-each-utterances-language">Checking Each Utterance\u2019s Language</h2>\n<p>Add the following to your <code is:raw>index.js</code> file below where you generate Deepgram transcripts:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> results.utterances) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> utterance</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get array of warning strings</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Alter strings to be objects including the utterance transcript and start time</span></span>\n<span class="line"><span style="color: #C9D1D9">    warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> warnings.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">warning</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({ warning, transcript, start }))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Append to end of array</span></span>\n<span class="line"><span style="color: #C9D1D9">    suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">suggestions, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">warnings]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(suggestions)</span></span></code></pre>\n<p>Your terminal should show all of the suggestions presented by the two <code is:raw>retext</code> plugins:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660574296/blog/2022/09/uninclusive-language-retext/final-output.png" alt="A terminal showing an array of objects. Each object is one suggestion including the original text, a warning, and the utterance start time."></p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>This full snippet (below) is a great place to start identifying and changing usage and non-inclusive language patterns. You may quickly realize that the <code is:raw>retext</code> plugins lack nuance and sometimes make suggestions on false-positive matches. Don\u2019t consider the suggestions as \u201Cmust-dos\u201D, but rather points for consideration and thought.</p>\n<p>There\u2019s a whole host of <a href="https://github.com/retextjs/retext/blob/main/doc/plugins.md">other <code is:raw>retext</code> plugins</a> which you can process text with, including those that handle assumptions, cliches, passive voice, repetition, overly-complex words, and more. Enjoy!</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { reporterJson } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vfile-reporter-json&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { retext } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextProfanities </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-profanities&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextEquality </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> DG </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://lws.io/static/inconsiderate.mp3&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }, { utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">retext</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextProfanities)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextEquality)</span></span>\n<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">process</span><span style="color: #C9D1D9">(text)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">outcome</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">reporterJson</span><span style="color: #C9D1D9">(file))</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">warnings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> outcome[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].messages.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.reason)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> warnings</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>\n<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> results.utterances) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> utterance</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(transcript)</span></span>\n<span class="line"><span style="color: #C9D1D9">    warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> warnings.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">warning</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({ warning, transcript, start }))</span></span>\n<span class="line"><span style="color: #C9D1D9">    suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">suggestions, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">warnings]</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(suggestions)</span></span></code></pre>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/detect-non-inclusive-language-with-retext-and-node-js/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Personal language usage is a journey of learning and adapting, which certainly extends to terms you may not yet realize are non-inclusive or potentially profane to others. By detecting and pointing out some potentially-problematic language, you can work towards being more considerate and kind to others.</p>
<p><a href="https://alexjs.com">alex</a> is a lovely command-line tool that takes in text or markdown files and, using <a href="https://github.com/retextjs/retext-equality/blob/main/rules.md"><code>retext-equality</code></a> and <a href="https://github.com/retextjs/retext-profanities/blob/main/rules.md"><code>retext-profanities</code></a>, highlights suggestions for improvement. alex checks for gendered work titles, gendered proverbs, ableist language, condescending or intolerant language, profanities, and much more.</p>
<p>In this short tutorial, we’ll cover how to use the <code>retext</code> libraries <code>alex</code> depends on to check your Deepgram transcript <a href="https://developers.deepgram.com/documentation/features/utterances/">utterances</a> for suggestions.</p>
<h2 id="before-you-start">Before You Start</h2>
<p>Before we start, you will need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>
<p>Create a new directory and open it in your code editor, navigate to it in your terminal, create a new <code>package.json</code> file by running <code>npm init -y</code>, and install dependencies:</p>
<p>npm install retext retext-equality retext-profanities vfile-reporter-json @deepgram/sdk</p>
<p>The <code>retext</code> packages require an ES6 project. The easiest way to do this without needing to compile code with a tool like Babel is to add the following property to your <code>package.json</code> file:</p>
<p>“type”: “module”</p>
<p>Create and open an <code>index.js</code> file in your code editor.</p>
<h2 id="generating-a-transcript-with-deepgram">Generating a Transcript With Deepgram</h2>
<p>The Deepgram Node.js is a CommonJS module, but can be imported via the default export. Because of this, our import will go from this in CommonJS:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>To this in ES6 (<code>DG</code> can be anything as long as it’s the same in both uses):</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> DG </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG</span></span></code></pre>
<p>Then, generate a transcript. Here I am using a recording of my voice reading out the <code>alex</code> sample phrase for demonstration.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;YOUR_DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://lws.io/static/inconsiderate.mp3&#39;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }, { utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(results)</span></span></code></pre>
<p>As the <a href="https://developers.deepgram.com/documentation/features/utterances/">utterances</a> feature is being used, an array will be provided with each utterance (spoken phrase) along with when it was spoken.</p>
<p>Test it out! Run the file with <code>node index.js</code>, and you should see a payload in your terminal. Once you know it works, remove the <code>console.log()</code>.</p>
<h2 id="setting-up-the-language-checker">Setting Up the Language Checker</h2>
<p>At the very top of <code>index.js</code>, include the dependencies required to set up <code>retext</code> and then report issues found from it:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { reporterJson } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vfile-reporter-json&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { retext } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextProfanities </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-profanities&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextEquality </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span></span></code></pre>
<p>Then, create the following reusable function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">retext</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextProfanities)</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextEquality)</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">process</span><span style="color: #C9D1D9">(text)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">outcome</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">reporterJson</span><span style="color: #C9D1D9">(file))</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">warnings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> outcome[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].messages.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.reason)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> warnings</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>This function processes the provided text through the specified plugins (here, <code>retextProfanities</code> and <code>retextEquality</code>). The <code>outcome</code> is actually quite a large amount of data:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">{</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">reason</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;\`man\` may be insensitive, use \`people\`, \`persons\`, \`folks\` instead&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">9</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">position</span><span style="color: #C9D1D9">: {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">start</span><span style="color: #C9D1D9">: { </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">9</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">offset</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">8</span><span style="color: #C9D1D9"> },</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FFA657">end</span><span style="color: #C9D1D9">: { </span><span style="color: #FFA657">line</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">column</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">12</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">offset</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">11</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">    },</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">ruleId</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;gals-man&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">source</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">fatal</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">false</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FFA657">stack</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">null</span></span>
<span class="line"><span style="color: #C9D1D9">},</span></span></code></pre>
<p>The <code>warnings</code> map in the reusable <code>checkText</code> function extracts only the <code>reason</code> and returns an array of these strings. Try it out by temporarily adding this line:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">testSuggestions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;He is a butthead.&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(testSuggestions)</span></span></code></pre>
<p>The result should be:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">[</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;Don’t use \`butthead\`, it’s profane&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&#39;\`He\` may be insensitive, use \`They\`, \`It\` instead&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">]</span></span></code></pre>
<p>Once you know it works, remove the <code>console.log()</code>.</p>
<h2 id="checking-each-utterances-language">Checking Each Utterance’s Language</h2>
<p>Add the following to your <code>index.js</code> file below where you generate Deepgram transcripts:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> results.utterances) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> utterance</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Get array of warning strings</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Alter strings to be objects including the utterance transcript and start time</span></span>
<span class="line"><span style="color: #C9D1D9">    warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> warnings.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">warning</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({ warning, transcript, start }))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Append to end of array</span></span>
<span class="line"><span style="color: #C9D1D9">    suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">suggestions, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">warnings]</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(suggestions)</span></span></code></pre>
<p>Your terminal should show all of the suggestions presented by the two <code>retext</code> plugins:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660574296/blog/2022/09/uninclusive-language-retext/final-output.png" alt="A terminal showing an array of objects. Each object is one suggestion including the original text, a warning, and the utterance start time."></p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>This full snippet (below) is a great place to start identifying and changing usage and non-inclusive language patterns. You may quickly realize that the <code>retext</code> plugins lack nuance and sometimes make suggestions on false-positive matches. Don’t consider the suggestions as “must-dos”, but rather points for consideration and thought.</p>
<p>There’s a whole host of <a href="https://github.com/retextjs/retext/blob/main/doc/plugins.md">other <code>retext</code> plugins</a> which you can process text with, including those that handle assumptions, cliches, passive voice, repetition, overly-complex words, and more. Enjoy!</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { reporterJson } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;vfile-reporter-json&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { retext } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextProfanities </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-profanities&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> retextEquality </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;retext-equality&#39;</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> DG </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">DG</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DG_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;http://lws.io/static/inconsiderate.mp3&#39;</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url }, { utterances: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">text</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">file</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">retext</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextProfanities)</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(retextEquality)</span></span>
<span class="line"><span style="color: #C9D1D9">        .</span><span style="color: #D2A8FF">process</span><span style="color: #C9D1D9">(text)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">outcome</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(</span><span style="color: #D2A8FF">reporterJson</span><span style="color: #C9D1D9">(file))</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">warnings</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> outcome[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].messages.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.reason)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> warnings</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> []</span></span>
<span class="line"><span style="color: #FF7B72">for</span><span style="color: #C9D1D9">(</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> utterance </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> results.utterances) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">start</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> utterance</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">checkText</span><span style="color: #C9D1D9">(transcript)</span></span>
<span class="line"><span style="color: #C9D1D9">    warnings </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> warnings.</span><span style="color: #D2A8FF">map</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">warning</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> ({ warning, transcript, start }))</span></span>
<span class="line"><span style="color: #C9D1D9">    suggestions </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> [</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">suggestions, </span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">warnings]</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(suggestions)</span></span></code></pre>`;
});

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
