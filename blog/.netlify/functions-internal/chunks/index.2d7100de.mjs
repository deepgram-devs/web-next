import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           *//* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-you-start", "text": "Before You Start" }, { "depth": 2, "slug": "dependency-and-file-setup", "text": "Dependency and File Setup" }, { "depth": 2, "slug": "generate-a-transcript", "text": "Generate a Transcript" }, { "depth": 3, "slug": "option-1-hosted-files", "text": "Option 1: Hosted Files" }, { "depth": 3, "slug": "option-2-rss-feed", "text": "Option 2: RSS Feed" }, { "depth": 3, "slug": "option-3-local-file", "text": "Option 3: Local File" }, { "depth": 2, "slug": "speaker-detection-and-paragraphing", "text": "Speaker Detection and Paragraphing" }, { "depth": 2, "slug": "saving-transcript-to-a-file", "text": "Saving Transcript to a File" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nIf you have a podcast, or want to analyze podcasts, this is the post for you! We'll cover how to transcribe your local podcast recordings, those which are hosted online, and the latest episodes from podcast RSS feeds.\n\n## Before You Start\n\nYou must have Python installed on your machine - I'm using Python 3.10 at the time of writing. You will also need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\nCreate a new directory and navigate to it in your terminal. [Create a virtual environment](https://blog.deepgram.com/python-virtual-environments/) with `python3 -m venv virtual_env` and activate it with `source virtual_env/bin/activate`. Install dependencies with `pip install deepgram_sdk asyncio python-dotenv feedparser`.\n\nOpen the directory in a code editor, and create an empty `.env` file. Take your Deepgram API Key, and add the following line to `.env`:\n\n    DEEPGRAM_API_KEY=\"replace-this-bit-with-your-key\"\n\n## Dependency and File Setup\n\nCreate an empty `script.py` file and import the dependencies:\n\n```py\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom deepgram import Deepgram\nimport feedparser\n```\n\nLoad values from the `.env` file and store the Deepgram key into a variable:\n\n```py\nload_dotenv()\nDEEPGRAM_API_KEY = os.getenv('DEEPGRAM_API_KEY')\n```\n\nFinally, set up a `main()` function that is executed automatically when the script is run:\n\n```py\nasync def main():\n    print('Hello world')\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n## Generate a Transcript\n\nDeepgram can transcribe both hosted and local files, and in the context of podcasting, files may also be contained within an RSS feed.\n\nInside of the `main()` function, initialize the Deepgram Python SDK with your API Key:\n\n```py\ndeepgram = Deepgram(DEEPGRAM_API_KEY)\n```\n\n### Option 1: Hosted Files\n\nTo transcribe a hosted file, provide a `url` property:\n\n```py\nurl = 'https://traffic.megaphone.fm/GLT8627189710.mp3?updated=1655947230'\nsource = { 'url': url }\ntranscription_options = { 'punctuate': True }\nresponse = await deepgram.transcription.prerecorded(source, transcription_options)\nprint(response)\n```\n\n### Option 2: RSS Feed\n\nTo transcribe the latest podcast episode, use `feedparser` and select the first returned item:\n\n```py\nrss = feedparser.parse('https://feeds.npr.org/510318/podcast.xml')\nurl = rss.entries[0].enclosures[0].href\nsource = { 'url': url }\ntranscription_options = { 'punctuate': True }\nresponse = await deepgram.transcription.prerecorded(source, transcription_options)\nprint(response)\n```\n\n### Option 3: Local File\n\n```py\nwith open('icymi.mp3', 'rb') as audio:\n    source = { 'buffer': audio, 'mimetype': 'audio/mp3' }\n    transcription_options = { 'punctuate': True }\n    response = await deepgram.transcription.prerecorded(source, transcription_options)\n    print(response)\n```\n\nNote that once you open the file, all further lines must be indented to gain access to the `audio` value.\n\n## Speaker Detection and Paragraphing\n\nThe generated transcript is pretty good, but Deepgram has two additional features which make a huge difference when creating podcast transcripts - [diarization (speaker detection)](https://developers.deepgram.com/documentation/features/diarize/) and [paragraphs](https://developers.deepgram.com/documentation/features/paragraphs/).\n\nUpdate your `transcription_options`:\n\n```py\ntranscription_options = { 'punctuate': True, 'diarize': True, 'paragraphs': True }\n```\n\nReplace `print(response)` with the following to access a nicely-formatted transcript:\n\n```py\ntranscript = response['results']['channels'][0]['alternatives'][0]['paragraphs']['transcript']\nprint(transcript)\n```\n\n![A terminal shows three lines of text which have space between them. Each is started by Speaker One, Two or Three. Then the words they said.](https://res.cloudinary.com/deepgram/image/upload/v1660841103/blog/2022/08/create-readable-transcripts-for-podcasts/final.png)\n\n## Saving Transcript to a File\n\nReplace `print(transcript)` with the following to save a new text file with the output:\n\n```py\nwith open('transcript.txt', 'w') as f:\n  f.write(transcript)\n```\n\n## Wrapping Up\n\nYou can find the full code snippet below. If you have any questions, feel free to get in touch.\n\n```py\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom deepgram import Deepgram\nimport feedparser\n\nload_dotenv()\nDEEPGRAM_API_KEY = os.getenv('DEEPGRAM_API_KEY')\n\nasync def main():\n    print('Hello world')\n    deepgram = Deepgram(DEEPGRAM_API_KEY)\n\n    # Option 1: Hosted File\n    url = 'your-hosted-file-url'\n    source = { 'url': url }\n\n    # Option 2: Latest Podcast Feed Item\n    # rss = feedparser.parse('rss-feed-url')\n    # url = rss.entries[0].enclosures[0].href\n    # source = { 'url': url }\n\n    # Option 3: Local File (Indent further code)\n    # with open('florist.mp3', 'rb') as audio:\n    #     source = { 'buffer': audio, 'mimetype': 'audio/mp3' }\n\n    transcription_options = { 'punctuate': True, 'diarize': True, 'paragraphs': True }\n    response = await deepgram.transcription.prerecorded(source, transcription_options)\n\n    transcript = response['results']['channels'][0]['alternatives'][0]['paragraphs']['transcript']\n\n    with open('transcript.txt', 'w') as f:\n        f.write(transcript)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n        ", "html": '<p>If you have a podcast, or want to analyze podcasts, this is the post for you! We\u2019ll cover how to transcribe your local podcast recordings, those which are hosted online, and the latest episodes from podcast RSS feeds.</p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>You must have Python installed on your machine - I\u2019m using Python 3.10 at the time of writing. You will also need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Create a new directory and navigate to it in your terminal. <a href="https://blog.deepgram.com/python-virtual-environments/">Create a virtual environment</a> with <code is:raw>python3 -m venv virtual_env</code> and activate it with <code is:raw>source virtual_env/bin/activate</code>. Install dependencies with <code is:raw>pip install deepgram_sdk asyncio python-dotenv feedparser</code>.</p>\n<p>Open the directory in a code editor, and create an empty <code is:raw>.env</code> file. Take your Deepgram API Key, and add the following line to <code is:raw>.env</code>:</p>\n<p>DEEPGRAM_API_KEY=\u201Creplace-this-bit-with-your-key\u201D</p>\n<h2 id="dependency-and-file-setup">Dependency and File Setup</h2>\n<p>Create an empty <code is:raw>script.py</code> file and import the dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> feedparser</span></span></code></pre>\n<p>Load values from the <code is:raw>.env</code> file and store the Deepgram key into a variable:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Finally, set up a <code is:raw>main()</code> function that is executed automatically when the script is run:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    asyncio.run(main())</span></span></code></pre>\n<h2 id="generate-a-transcript">Generate a Transcript</h2>\n<p>Deepgram can transcribe both hosted and local files, and in the context of podcasting, files may also be contained within an RSS feed.</p>\n<p>Inside of the <code is:raw>main()</code> function, initialize the Deepgram Python SDK with your API Key:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h3 id="option-1-hosted-files">Option 1: Hosted Files</h3>\n<p>To transcribe a hosted file, provide a <code is:raw>url</code> property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://traffic.megaphone.fm/GLT8627189710.mp3?updated=1655947230&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>\n<span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>\n<h3 id="option-2-rss-feed">Option 2: RSS Feed</h3>\n<p>To transcribe the latest podcast episode, use <code is:raw>feedparser</code> and select the first returned item:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">rss </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> feedparser.parse(</span><span style="color: #A5D6FF">&#39;https://feeds.npr.org/510318/podcast.xml&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> rss.entries[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].enclosures[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].href</span></span>\n<span class="line"><span style="color: #C9D1D9">source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>\n<span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>\n<h3 id="option-3-local-file">Option 3: Local File</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;icymi.mp3&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>\n<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>\n<p>Note that once you open the file, all further lines must be indented to gain access to the <code is:raw>audio</code> value.</p>\n<h2 id="speaker-detection-and-paragraphing">Speaker Detection and Paragraphing</h2>\n<p>The generated transcript is pretty good, but Deepgram has two additional features which make a huge difference when creating podcast transcripts - <a href="https://developers.deepgram.com/documentation/features/diarize/">diarization (speaker detection)</a> and <a href="https://developers.deepgram.com/documentation/features/paragraphs/">paragraphs</a>.</p>\n<p>Update your <code is:raw>transcription_options</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span></code></pre>\n<p>Replace <code is:raw>print(response)</code> with the following to access a nicely-formatted transcript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(transcript)</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660841103/blog/2022/08/create-readable-transcripts-for-podcasts/final.png" alt="A terminal shows three lines of text which have space between them. Each is started by Speaker One, Two or Three. Then the words they said."></p>\n<h2 id="saving-transcript-to-a-file">Saving Transcript to a File</h2>\n<p>Replace <code is:raw>print(transcript)</code> with the following to save a new text file with the output:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript.txt&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;w&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> f:</span></span>\n<span class="line"><span style="color: #C9D1D9">  f.write(transcript)</span></span></code></pre>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>You can find the full code snippet below. If you have any questions, feel free to get in touch.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> feedparser</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 1: Hosted File</span></span>\n<span class="line"><span style="color: #C9D1D9">    url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;your-hosted-file-url&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 2: Latest Podcast Feed Item</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># rss = feedparser.parse(&#39;rss-feed-url&#39;)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># url = rss.entries[0].enclosures[0].href</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># source = { &#39;url&#39;: url }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 3: Local File (Indent further code)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># with open(&#39;florist.mp3&#39;, &#39;rb&#39;) as audio:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">#     source = { &#39;buffer&#39;: audio, &#39;mimetype&#39;: &#39;audio/mp3&#39; }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript.txt&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;w&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> f:</span></span>\n<span class="line"><span style="color: #C9D1D9">        f.write(transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    asyncio.run(main())</span></span></code></pre>' };
const frontmatter = { "title": "How To Transcribe Your Podcast with Python", "description": "Learn how to create lovely readable transcripts with Python for your podcasts, both before and after publishing.", "date": "2022-08-24T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1660841102/blog/2022/08/create-readable-transcripts-for-podcasts/cover.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["python"], "seo": { "title": "How To Transcribe Your Podcast with Python", "description": "Learn how to create lovely readable transcripts with Python for your podcasts, both before and after publishing." }, "shorturls": { "share": "https://dpgr.am/f66d485", "twitter": "https://dpgr.am/d6c2f7c", "linkedin": "https://dpgr.am/9dfba57", "reddit": "https://dpgr.am/ef300d4", "facebook": "https://dpgr.am/e735fb2" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454116/blog/create-readable-transcripts-for-podcasts/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-you-start", "text": "Before You Start" }, { "depth": 2, "slug": "dependency-and-file-setup", "text": "Dependency and File Setup" }, { "depth": 2, "slug": "generate-a-transcript", "text": "Generate a Transcript" }, { "depth": 3, "slug": "option-1-hosted-files", "text": "Option 1: Hosted Files" }, { "depth": 3, "slug": "option-2-rss-feed", "text": "Option 2: RSS Feed" }, { "depth": 3, "slug": "option-3-local-file", "text": "Option 3: Local File" }, { "depth": 2, "slug": "speaker-detection-and-paragraphing", "text": "Speaker Detection and Paragraphing" }, { "depth": 2, "slug": "saving-transcript-to-a-file", "text": "Saving Transcript to a File" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nIf you have a podcast, or want to analyze podcasts, this is the post for you! We'll cover how to transcribe your local podcast recordings, those which are hosted online, and the latest episodes from podcast RSS feeds.\n\n## Before You Start\n\nYou must have Python installed on your machine - I'm using Python 3.10 at the time of writing. You will also need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\nCreate a new directory and navigate to it in your terminal. [Create a virtual environment](https://blog.deepgram.com/python-virtual-environments/) with `python3 -m venv virtual_env` and activate it with `source virtual_env/bin/activate`. Install dependencies with `pip install deepgram_sdk asyncio python-dotenv feedparser`.\n\nOpen the directory in a code editor, and create an empty `.env` file. Take your Deepgram API Key, and add the following line to `.env`:\n\n    DEEPGRAM_API_KEY=\"replace-this-bit-with-your-key\"\n\n## Dependency and File Setup\n\nCreate an empty `script.py` file and import the dependencies:\n\n```py\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom deepgram import Deepgram\nimport feedparser\n```\n\nLoad values from the `.env` file and store the Deepgram key into a variable:\n\n```py\nload_dotenv()\nDEEPGRAM_API_KEY = os.getenv('DEEPGRAM_API_KEY')\n```\n\nFinally, set up a `main()` function that is executed automatically when the script is run:\n\n```py\nasync def main():\n    print('Hello world')\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n## Generate a Transcript\n\nDeepgram can transcribe both hosted and local files, and in the context of podcasting, files may also be contained within an RSS feed.\n\nInside of the `main()` function, initialize the Deepgram Python SDK with your API Key:\n\n```py\ndeepgram = Deepgram(DEEPGRAM_API_KEY)\n```\n\n### Option 1: Hosted Files\n\nTo transcribe a hosted file, provide a `url` property:\n\n```py\nurl = 'https://traffic.megaphone.fm/GLT8627189710.mp3?updated=1655947230'\nsource = { 'url': url }\ntranscription_options = { 'punctuate': True }\nresponse = await deepgram.transcription.prerecorded(source, transcription_options)\nprint(response)\n```\n\n### Option 2: RSS Feed\n\nTo transcribe the latest podcast episode, use `feedparser` and select the first returned item:\n\n```py\nrss = feedparser.parse('https://feeds.npr.org/510318/podcast.xml')\nurl = rss.entries[0].enclosures[0].href\nsource = { 'url': url }\ntranscription_options = { 'punctuate': True }\nresponse = await deepgram.transcription.prerecorded(source, transcription_options)\nprint(response)\n```\n\n### Option 3: Local File\n\n```py\nwith open('icymi.mp3', 'rb') as audio:\n    source = { 'buffer': audio, 'mimetype': 'audio/mp3' }\n    transcription_options = { 'punctuate': True }\n    response = await deepgram.transcription.prerecorded(source, transcription_options)\n    print(response)\n```\n\nNote that once you open the file, all further lines must be indented to gain access to the `audio` value.\n\n## Speaker Detection and Paragraphing\n\nThe generated transcript is pretty good, but Deepgram has two additional features which make a huge difference when creating podcast transcripts - [diarization (speaker detection)](https://developers.deepgram.com/documentation/features/diarize/) and [paragraphs](https://developers.deepgram.com/documentation/features/paragraphs/).\n\nUpdate your `transcription_options`:\n\n```py\ntranscription_options = { 'punctuate': True, 'diarize': True, 'paragraphs': True }\n```\n\nReplace `print(response)` with the following to access a nicely-formatted transcript:\n\n```py\ntranscript = response['results']['channels'][0]['alternatives'][0]['paragraphs']['transcript']\nprint(transcript)\n```\n\n![A terminal shows three lines of text which have space between them. Each is started by Speaker One, Two or Three. Then the words they said.](https://res.cloudinary.com/deepgram/image/upload/v1660841103/blog/2022/08/create-readable-transcripts-for-podcasts/final.png)\n\n## Saving Transcript to a File\n\nReplace `print(transcript)` with the following to save a new text file with the output:\n\n```py\nwith open('transcript.txt', 'w') as f:\n  f.write(transcript)\n```\n\n## Wrapping Up\n\nYou can find the full code snippet below. If you have any questions, feel free to get in touch.\n\n```py\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom deepgram import Deepgram\nimport feedparser\n\nload_dotenv()\nDEEPGRAM_API_KEY = os.getenv('DEEPGRAM_API_KEY')\n\nasync def main():\n    print('Hello world')\n    deepgram = Deepgram(DEEPGRAM_API_KEY)\n\n    # Option 1: Hosted File\n    url = 'your-hosted-file-url'\n    source = { 'url': url }\n\n    # Option 2: Latest Podcast Feed Item\n    # rss = feedparser.parse('rss-feed-url')\n    # url = rss.entries[0].enclosures[0].href\n    # source = { 'url': url }\n\n    # Option 3: Local File (Indent further code)\n    # with open('florist.mp3', 'rb') as audio:\n    #     source = { 'buffer': audio, 'mimetype': 'audio/mp3' }\n\n    transcription_options = { 'punctuate': True, 'diarize': True, 'paragraphs': True }\n    response = await deepgram.transcription.prerecorded(source, transcription_options)\n\n    transcript = response['results']['channels'][0]['alternatives'][0]['paragraphs']['transcript']\n\n    with open('transcript.txt', 'w') as f:\n        f.write(transcript)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n        ", "html": '<p>If you have a podcast, or want to analyze podcasts, this is the post for you! We\u2019ll cover how to transcribe your local podcast recordings, those which are hosted online, and the latest episodes from podcast RSS feeds.</p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>You must have Python installed on your machine - I\u2019m using Python 3.10 at the time of writing. You will also need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Create a new directory and navigate to it in your terminal. <a href="https://blog.deepgram.com/python-virtual-environments/">Create a virtual environment</a> with <code is:raw>python3 -m venv virtual_env</code> and activate it with <code is:raw>source virtual_env/bin/activate</code>. Install dependencies with <code is:raw>pip install deepgram_sdk asyncio python-dotenv feedparser</code>.</p>\n<p>Open the directory in a code editor, and create an empty <code is:raw>.env</code> file. Take your Deepgram API Key, and add the following line to <code is:raw>.env</code>:</p>\n<p>DEEPGRAM_API_KEY=\u201Creplace-this-bit-with-your-key\u201D</p>\n<h2 id="dependency-and-file-setup">Dependency and File Setup</h2>\n<p>Create an empty <code is:raw>script.py</code> file and import the dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> feedparser</span></span></code></pre>\n<p>Load values from the <code is:raw>.env</code> file and store the Deepgram key into a variable:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Finally, set up a <code is:raw>main()</code> function that is executed automatically when the script is run:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    asyncio.run(main())</span></span></code></pre>\n<h2 id="generate-a-transcript">Generate a Transcript</h2>\n<p>Deepgram can transcribe both hosted and local files, and in the context of podcasting, files may also be contained within an RSS feed.</p>\n<p>Inside of the <code is:raw>main()</code> function, initialize the Deepgram Python SDK with your API Key:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h3 id="option-1-hosted-files">Option 1: Hosted Files</h3>\n<p>To transcribe a hosted file, provide a <code is:raw>url</code> property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://traffic.megaphone.fm/GLT8627189710.mp3?updated=1655947230&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>\n<span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>\n<h3 id="option-2-rss-feed">Option 2: RSS Feed</h3>\n<p>To transcribe the latest podcast episode, use <code is:raw>feedparser</code> and select the first returned item:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">rss </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> feedparser.parse(</span><span style="color: #A5D6FF">&#39;https://feeds.npr.org/510318/podcast.xml&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> rss.entries[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].enclosures[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].href</span></span>\n<span class="line"><span style="color: #C9D1D9">source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>\n<span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>\n<h3 id="option-3-local-file">Option 3: Local File</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;icymi.mp3&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>\n<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>\n<p>Note that once you open the file, all further lines must be indented to gain access to the <code is:raw>audio</code> value.</p>\n<h2 id="speaker-detection-and-paragraphing">Speaker Detection and Paragraphing</h2>\n<p>The generated transcript is pretty good, but Deepgram has two additional features which make a huge difference when creating podcast transcripts - <a href="https://developers.deepgram.com/documentation/features/diarize/">diarization (speaker detection)</a> and <a href="https://developers.deepgram.com/documentation/features/paragraphs/">paragraphs</a>.</p>\n<p>Update your <code is:raw>transcription_options</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span></code></pre>\n<p>Replace <code is:raw>print(response)</code> with the following to access a nicely-formatted transcript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(transcript)</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660841103/blog/2022/08/create-readable-transcripts-for-podcasts/final.png" alt="A terminal shows three lines of text which have space between them. Each is started by Speaker One, Two or Three. Then the words they said."></p>\n<h2 id="saving-transcript-to-a-file">Saving Transcript to a File</h2>\n<p>Replace <code is:raw>print(transcript)</code> with the following to save a new text file with the output:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript.txt&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;w&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> f:</span></span>\n<span class="line"><span style="color: #C9D1D9">  f.write(transcript)</span></span></code></pre>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>You can find the full code snippet below. If you have any questions, feel free to get in touch.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> feedparser</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 1: Hosted File</span></span>\n<span class="line"><span style="color: #C9D1D9">    url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;your-hosted-file-url&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 2: Latest Podcast Feed Item</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># rss = feedparser.parse(&#39;rss-feed-url&#39;)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># url = rss.entries[0].enclosures[0].href</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># source = { &#39;url&#39;: url }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 3: Local File (Indent further code)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># with open(&#39;florist.mp3&#39;, &#39;rb&#39;) as audio:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">#     source = { &#39;buffer&#39;: audio, &#39;mimetype&#39;: &#39;audio/mp3&#39; }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript.txt&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;w&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> f:</span></span>\n<span class="line"><span style="color: #C9D1D9">        f.write(transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    asyncio.run(main())</span></span></code></pre>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/create-readable-transcripts-for-podcasts/index.md" };
function rawContent() {
  return "\nIf you have a podcast, or want to analyze podcasts, this is the post for you! We'll cover how to transcribe your local podcast recordings, those which are hosted online, and the latest episodes from podcast RSS feeds.\n\n## Before You Start\n\nYou must have Python installed on your machine - I'm using Python 3.10 at the time of writing. You will also need a Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n\nCreate a new directory and navigate to it in your terminal. [Create a virtual environment](https://blog.deepgram.com/python-virtual-environments/) with `python3 -m venv virtual_env` and activate it with `source virtual_env/bin/activate`. Install dependencies with `pip install deepgram_sdk asyncio python-dotenv feedparser`.\n\nOpen the directory in a code editor, and create an empty `.env` file. Take your Deepgram API Key, and add the following line to `.env`:\n\n    DEEPGRAM_API_KEY=\"replace-this-bit-with-your-key\"\n\n## Dependency and File Setup\n\nCreate an empty `script.py` file and import the dependencies:\n\n```py\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom deepgram import Deepgram\nimport feedparser\n```\n\nLoad values from the `.env` file and store the Deepgram key into a variable:\n\n```py\nload_dotenv()\nDEEPGRAM_API_KEY = os.getenv('DEEPGRAM_API_KEY')\n```\n\nFinally, set up a `main()` function that is executed automatically when the script is run:\n\n```py\nasync def main():\n    print('Hello world')\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n## Generate a Transcript\n\nDeepgram can transcribe both hosted and local files, and in the context of podcasting, files may also be contained within an RSS feed.\n\nInside of the `main()` function, initialize the Deepgram Python SDK with your API Key:\n\n```py\ndeepgram = Deepgram(DEEPGRAM_API_KEY)\n```\n\n### Option 1: Hosted Files\n\nTo transcribe a hosted file, provide a `url` property:\n\n```py\nurl = 'https://traffic.megaphone.fm/GLT8627189710.mp3?updated=1655947230'\nsource = { 'url': url }\ntranscription_options = { 'punctuate': True }\nresponse = await deepgram.transcription.prerecorded(source, transcription_options)\nprint(response)\n```\n\n### Option 2: RSS Feed\n\nTo transcribe the latest podcast episode, use `feedparser` and select the first returned item:\n\n```py\nrss = feedparser.parse('https://feeds.npr.org/510318/podcast.xml')\nurl = rss.entries[0].enclosures[0].href\nsource = { 'url': url }\ntranscription_options = { 'punctuate': True }\nresponse = await deepgram.transcription.prerecorded(source, transcription_options)\nprint(response)\n```\n\n### Option 3: Local File\n\n```py\nwith open('icymi.mp3', 'rb') as audio:\n    source = { 'buffer': audio, 'mimetype': 'audio/mp3' }\n    transcription_options = { 'punctuate': True }\n    response = await deepgram.transcription.prerecorded(source, transcription_options)\n    print(response)\n```\n\nNote that once you open the file, all further lines must be indented to gain access to the `audio` value.\n\n## Speaker Detection and Paragraphing\n\nThe generated transcript is pretty good, but Deepgram has two additional features which make a huge difference when creating podcast transcripts - [diarization (speaker detection)](https://developers.deepgram.com/documentation/features/diarize/) and [paragraphs](https://developers.deepgram.com/documentation/features/paragraphs/).\n\nUpdate your `transcription_options`:\n\n```py\ntranscription_options = { 'punctuate': True, 'diarize': True, 'paragraphs': True }\n```\n\nReplace `print(response)` with the following to access a nicely-formatted transcript:\n\n```py\ntranscript = response['results']['channels'][0]['alternatives'][0]['paragraphs']['transcript']\nprint(transcript)\n```\n\n![A terminal shows three lines of text which have space between them. Each is started by Speaker One, Two or Three. Then the words they said.](https://res.cloudinary.com/deepgram/image/upload/v1660841103/blog/2022/08/create-readable-transcripts-for-podcasts/final.png)\n\n## Saving Transcript to a File\n\nReplace `print(transcript)` with the following to save a new text file with the output:\n\n```py\nwith open('transcript.txt', 'w') as f:\n  f.write(transcript)\n```\n\n## Wrapping Up\n\nYou can find the full code snippet below. If you have any questions, feel free to get in touch.\n\n```py\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom deepgram import Deepgram\nimport feedparser\n\nload_dotenv()\nDEEPGRAM_API_KEY = os.getenv('DEEPGRAM_API_KEY')\n\nasync def main():\n    print('Hello world')\n    deepgram = Deepgram(DEEPGRAM_API_KEY)\n\n    # Option 1: Hosted File\n    url = 'your-hosted-file-url'\n    source = { 'url': url }\n\n    # Option 2: Latest Podcast Feed Item\n    # rss = feedparser.parse('rss-feed-url')\n    # url = rss.entries[0].enclosures[0].href\n    # source = { 'url': url }\n\n    # Option 3: Local File (Indent further code)\n    # with open('florist.mp3', 'rb') as audio:\n    #     source = { 'buffer': audio, 'mimetype': 'audio/mp3' }\n\n    transcription_options = { 'punctuate': True, 'diarize': True, 'paragraphs': True }\n    response = await deepgram.transcription.prerecorded(source, transcription_options)\n\n    transcript = response['results']['channels'][0]['alternatives'][0]['paragraphs']['transcript']\n\n    with open('transcript.txt', 'w') as f:\n        f.write(transcript)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n        ";
}
function compiledContent() {
  return '<p>If you have a podcast, or want to analyze podcasts, this is the post for you! We\u2019ll cover how to transcribe your local podcast recordings, those which are hosted online, and the latest episodes from podcast RSS feeds.</p>\n<h2 id="before-you-start">Before You Start</h2>\n<p>You must have Python installed on your machine - I\u2019m using Python 3.10 at the time of writing. You will also need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>\n<p>Create a new directory and navigate to it in your terminal. <a href="https://blog.deepgram.com/python-virtual-environments/">Create a virtual environment</a> with <code is:raw>python3 -m venv virtual_env</code> and activate it with <code is:raw>source virtual_env/bin/activate</code>. Install dependencies with <code is:raw>pip install deepgram_sdk asyncio python-dotenv feedparser</code>.</p>\n<p>Open the directory in a code editor, and create an empty <code is:raw>.env</code> file. Take your Deepgram API Key, and add the following line to <code is:raw>.env</code>:</p>\n<p>DEEPGRAM_API_KEY=\u201Creplace-this-bit-with-your-key\u201D</p>\n<h2 id="dependency-and-file-setup">Dependency and File Setup</h2>\n<p>Create an empty <code is:raw>script.py</code> file and import the dependencies:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> feedparser</span></span></code></pre>\n<p>Load values from the <code is:raw>.env</code> file and store the Deepgram key into a variable:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<p>Finally, set up a <code is:raw>main()</code> function that is executed automatically when the script is run:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    asyncio.run(main())</span></span></code></pre>\n<h2 id="generate-a-transcript">Generate a Transcript</h2>\n<p>Deepgram can transcribe both hosted and local files, and in the context of podcasting, files may also be contained within an RSS feed.</p>\n<p>Inside of the <code is:raw>main()</code> function, initialize the Deepgram Python SDK with your API Key:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>\n<h3 id="option-1-hosted-files">Option 1: Hosted Files</h3>\n<p>To transcribe a hosted file, provide a <code is:raw>url</code> property:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://traffic.megaphone.fm/GLT8627189710.mp3?updated=1655947230&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>\n<span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>\n<h3 id="option-2-rss-feed">Option 2: RSS Feed</h3>\n<p>To transcribe the latest podcast episode, use <code is:raw>feedparser</code> and select the first returned item:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">rss </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> feedparser.parse(</span><span style="color: #A5D6FF">&#39;https://feeds.npr.org/510318/podcast.xml&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> rss.entries[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].enclosures[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].href</span></span>\n<span class="line"><span style="color: #C9D1D9">source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>\n<span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>\n<h3 id="option-3-local-file">Option 3: Local File</h3>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;icymi.mp3&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>\n<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>\n<p>Note that once you open the file, all further lines must be indented to gain access to the <code is:raw>audio</code> value.</p>\n<h2 id="speaker-detection-and-paragraphing">Speaker Detection and Paragraphing</h2>\n<p>The generated transcript is pretty good, but Deepgram has two additional features which make a huge difference when creating podcast transcripts - <a href="https://developers.deepgram.com/documentation/features/diarize/">diarization (speaker detection)</a> and <a href="https://developers.deepgram.com/documentation/features/paragraphs/">paragraphs</a>.</p>\n<p>Update your <code is:raw>transcription_options</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span></code></pre>\n<p>Replace <code is:raw>print(response)</code> with the following to access a nicely-formatted transcript:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(transcript)</span></span></code></pre>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660841103/blog/2022/08/create-readable-transcripts-for-podcasts/final.png" alt="A terminal shows three lines of text which have space between them. Each is started by Speaker One, Two or Three. Then the words they said."></p>\n<h2 id="saving-transcript-to-a-file">Saving Transcript to a File</h2>\n<p>Replace <code is:raw>print(transcript)</code> with the following to save a new text file with the output:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript.txt&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;w&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> f:</span></span>\n<span class="line"><span style="color: #C9D1D9">  f.write(transcript)</span></span></code></pre>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>You can find the full code snippet below. If you have any questions, feel free to get in touch.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>\n<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> feedparser</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>\n<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">    deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 1: Hosted File</span></span>\n<span class="line"><span style="color: #C9D1D9">    url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;your-hosted-file-url&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 2: Latest Podcast Feed Item</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># rss = feedparser.parse(&#39;rss-feed-url&#39;)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># url = rss.entries[0].enclosures[0].href</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># source = { &#39;url&#39;: url }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 3: Local File (Indent further code)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># with open(&#39;florist.mp3&#39;, &#39;rb&#39;) as audio:</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">#     source = { &#39;buffer&#39;: audio, &#39;mimetype&#39;: &#39;audio/mp3&#39; }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript.txt&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;w&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> f:</span></span>\n<span class="line"><span style="color: #C9D1D9">        f.write(transcript)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>\n<span class="line"><span style="color: #C9D1D9">    asyncio.run(main())</span></span></code></pre>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/create-readable-transcripts-for-podcasts/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>If you have a podcast, or want to analyze podcasts, this is the post for you! We’ll cover how to transcribe your local podcast recordings, those which are hosted online, and the latest episodes from podcast RSS feeds.</p>
<h2 id="before-you-start">Before You Start</h2>
<p>You must have Python installed on your machine - I’m using Python 3.10 at the time of writing. You will also need a Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</p>
<p>Create a new directory and navigate to it in your terminal. <a href="https://blog.deepgram.com/python-virtual-environments/">Create a virtual environment</a> with <code>python3 -m venv virtual_env</code> and activate it with <code>source virtual_env/bin/activate</code>. Install dependencies with <code>pip install deepgram_sdk asyncio python-dotenv feedparser</code>.</p>
<p>Open the directory in a code editor, and create an empty <code>.env</code> file. Take your Deepgram API Key, and add the following line to <code>.env</code>:</p>
<p>DEEPGRAM_API_KEY=“replace-this-bit-with-your-key”</p>
<h2 id="dependency-and-file-setup">Dependency and File Setup</h2>
<p>Create an empty <code>script.py</code> file and import the dependencies:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> feedparser</span></span></code></pre>
<p>Load values from the <code>.env</code> file and store the Deepgram key into a variable:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span></code></pre>
<p>Finally, set up a <code>main()</code> function that is executed automatically when the script is run:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">    asyncio.run(main())</span></span></code></pre>
<h2 id="generate-a-transcript">Generate a Transcript</h2>
<p>Deepgram can transcribe both hosted and local files, and in the context of podcasting, files may also be contained within an RSS feed.</p>
<p>Inside of the <code>main()</code> function, initialize the Deepgram Python SDK with your API Key:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span></code></pre>
<h3 id="option-1-hosted-files">Option 1: Hosted Files</h3>
<p>To transcribe a hosted file, provide a <code>url</code> property:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;https://traffic.megaphone.fm/GLT8627189710.mp3?updated=1655947230&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>
<span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>
<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>
<h3 id="option-2-rss-feed">Option 2: RSS Feed</h3>
<p>To transcribe the latest podcast episode, use <code>feedparser</code> and select the first returned item:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">rss </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> feedparser.parse(</span><span style="color: #A5D6FF">&#39;https://feeds.npr.org/510318/podcast.xml&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> rss.entries[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].enclosures[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].href</span></span>
<span class="line"><span style="color: #C9D1D9">source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>
<span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>
<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>
<h3 id="option-3-local-file">Option 3: Local File</h3>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;icymi.mp3&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;rb&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> audio:</span></span>
<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;buffer&#39;</span><span style="color: #C9D1D9">: audio, </span><span style="color: #A5D6FF">&#39;mimetype&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;audio/mp3&#39;</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">    transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(response)</span></span></code></pre>
<p>Note that once you open the file, all further lines must be indented to gain access to the <code>audio</code> value.</p>
<h2 id="speaker-detection-and-paragraphing">Speaker Detection and Paragraphing</h2>
<p>The generated transcript is pretty good, but Deepgram has two additional features which make a huge difference when creating podcast transcripts - <a href="https://developers.deepgram.com/documentation/features/diarize/">diarization (speaker detection)</a> and <a href="https://developers.deepgram.com/documentation/features/paragraphs/">paragraphs</a>.</p>
<p>Update your <code>transcription_options</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span></code></pre>
<p>Replace <code>print(response)</code> with the following to access a nicely-formatted transcript:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(transcript)</span></span></code></pre>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660841103/blog/2022/08/create-readable-transcripts-for-podcasts/final.png" alt="A terminal shows three lines of text which have space between them. Each is started by Speaker One, Two or Three. Then the words they said."></p>
<h2 id="saving-transcript-to-a-file">Saving Transcript to a File</h2>
<p>Replace <code>print(transcript)</code> with the following to save a new text file with the output:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript.txt&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;w&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> f:</span></span>
<span class="line"><span style="color: #C9D1D9">  f.write(transcript)</span></span></code></pre>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>You can find the full code snippet below. If you have any questions, feel free to get in touch.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> asyncio</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> os</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> dotenv </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> load_dotenv</span></span>
<span class="line"><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> deepgram </span><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> Deepgram</span></span>
<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> feedparser</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">load_dotenv()</span></span>
<span class="line"><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> os.getenv(</span><span style="color: #A5D6FF">&#39;DEEPGRAM_API_KEY&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">def</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">main</span><span style="color: #C9D1D9">():</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #79C0FF">print</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Hello world&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">    deepgram </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> Deepgram(</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 1: Hosted File</span></span>
<span class="line"><span style="color: #C9D1D9">    url </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;your-hosted-file-url&#39;</span></span>
<span class="line"><span style="color: #C9D1D9">    source </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;url&#39;</span><span style="color: #C9D1D9">: url }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 2: Latest Podcast Feed Item</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># rss = feedparser.parse(&#39;rss-feed-url&#39;)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># url = rss.entries[0].enclosures[0].href</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># source = { &#39;url&#39;: url }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># Option 3: Local File (Indent further code)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E"># with open(&#39;florist.mp3&#39;, &#39;rb&#39;) as audio:</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">#     source = { &#39;buffer&#39;: audio, &#39;mimetype&#39;: &#39;audio/mp3&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    transcription_options </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> { </span><span style="color: #A5D6FF">&#39;punctuate&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;diarize&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">True</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">    response </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.prerecorded(source, transcription_options)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    transcript </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> response[</span><span style="color: #A5D6FF">&#39;results&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;channels&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;alternatives&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;paragraphs&#39;</span><span style="color: #C9D1D9">][</span><span style="color: #A5D6FF">&#39;transcript&#39;</span><span style="color: #C9D1D9">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">with</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">open</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcript.txt&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;w&#39;</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">as</span><span style="color: #C9D1D9"> f:</span></span>
<span class="line"><span style="color: #C9D1D9">        f.write(transcript)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">__name__</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;__main__&#39;</span><span style="color: #C9D1D9">:</span></span>
<span class="line"><span style="color: #C9D1D9">    asyncio.run(main())</span></span></code></pre>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/create-readable-transcripts-for-podcasts/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
