import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                          *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
/* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [], "source": '\r\nWe\'re excited to announce an update to our streaming API for enhanced usability.\r\n\r\nWorking with websockets to send audio in real-time can be tricky. Today, we\'re releasing the first step in our plan to make our streaming API easier to use.\r\n\r\nStreaming connections should now be closed by sending the JSON message `{ "type": "CloseStream" }`. This tells Deepgram that no more audio will be sent. Deepgram will then finish processing existing audio, and close the connection once all transcripts are returned.\xA0\r\n\r\nGracefully closing your stream is the best way to ensure you get all your transcripts, and aren\'t charged for audio you don\'t want transcribed.\r\n\r\nHere\'s an example of sending a CloseStream message in Javascript:\r\n\r\n```javascript\r\nsocket.send(JSON.stringify({\r\n    "type": "CloseStream"\r\n}))\r\n```\r\n\r\nAnd an example in Python:\r\n\r\n```python\r\nawait ws.send(json.dumps({\r\n    "type": "CloseStream"\r\n}))\r\n```\r\n\r\nPreviously, streaming connections were closed by sending an empty byte\u2014for example, sending `Uint8Array(0)` in Javascript, or `b\'\'` in Python. This method of closing connections is now deprecated, and we will remove it in a future release. An empty byte doesn\'t inherently translate to closing a connection and some websocket libraries don\'t support sending it. Sending a CloseStream message is a clearer and more universal method to accomplish this.\r\n\r\nWe recommend customers using our API move to using the CloseStream method to avoid potential disruptions. Any customers using our SDK will not need to make changes.\r\n\r\nThis message is the first of many. We\'ll be releasing additional JSON messages in the coming months that will unlock powerful new features in our real-time API. Stay tuned!\r\n\r\nTo learn more about Streaming, please refer to our Streaming [Documentation](https://developers.deepgram.com/documentation/getting-started/streaming/). **We welcome your feedback, please share it with us [here](https://deepgram.hellonext.co/b/feedback).**\r\n\r\n', "html": `<p>We\u2019re excited to announce an update to our streaming API for enhanced usability.</p>
<p>Working with websockets to send audio in real-time can be tricky. Today, we\u2019re releasing the first step in our plan to make our streaming API easier to use.</p>
<p>Streaming connections should now be closed by sending the JSON message <code is:raw>{ "type": "CloseStream" }</code>. This tells Deepgram that no more audio will be sent. Deepgram will then finish processing existing audio, and close the connection once all transcripts are returned.\xA0</p>
<p>Gracefully closing your stream is the best way to ensure you get all your transcripts, and aren\u2019t charged for audio you don\u2019t want transcribed.</p>
<p>Here\u2019s an example of sending a CloseStream message in Javascript:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;CloseStream&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}))</span></span></code></pre>
<p>And an example in Python:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.send(json.dumps({</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;CloseStream&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}))</span></span></code></pre>
<p>Previously, streaming connections were closed by sending an empty byte\u2014for example, sending <code is:raw>Uint8Array(0)</code> in Javascript, or <code is:raw>b''</code> in Python. This method of closing connections is now deprecated, and we will remove it in a future release. An empty byte doesn\u2019t inherently translate to closing a connection and some websocket libraries don\u2019t support sending it. Sending a CloseStream message is a clearer and more universal method to accomplish this.</p>
<p>We recommend customers using our API move to using the CloseStream method to avoid potential disruptions. Any customers using our SDK will not need to make changes.</p>
<p>This message is the first of many. We\u2019ll be releasing additional JSON messages in the coming months that will unlock powerful new features in our real-time API. Stay tuned!</p>
<p>To learn more about Streaming, please refer to our Streaming <a href="https://developers.deepgram.com/documentation/getting-started/streaming/">Documentation</a>. <strong>We welcome your feedback, please share it with us <a href="https://deepgram.hellonext.co/b/feedback">here</a>.</strong></p>` };
const frontmatter = { "title": "Enhanced Messaging in Streaming", "description": "We\u2019re excited to announce an update to our streaming API for enhanced usability.", "date": "2022-10-18T22:09:38.278Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1666120286/blog/Enhanced%20Messaging%20in%20Streaming/2210-close-stream-update-featured-1200x630_2x_e9k8gi.png", "authors": ["shir-goldberg"], "category": "product-news", "tags": ["streaming"], "shorturls": { "share": "https://dpgr.am/2f0143f", "twitter": "https://dpgr.am/8f2ba53", "linkedin": "https://dpgr.am/7a8ef1b", "reddit": "https://dpgr.am/cc4e407", "facebook": "https://dpgr.am/ff26ee9" }, "astro": { "headings": [], "source": '\r\nWe\'re excited to announce an update to our streaming API for enhanced usability.\r\n\r\nWorking with websockets to send audio in real-time can be tricky. Today, we\'re releasing the first step in our plan to make our streaming API easier to use.\r\n\r\nStreaming connections should now be closed by sending the JSON message `{ "type": "CloseStream" }`. This tells Deepgram that no more audio will be sent. Deepgram will then finish processing existing audio, and close the connection once all transcripts are returned.\xA0\r\n\r\nGracefully closing your stream is the best way to ensure you get all your transcripts, and aren\'t charged for audio you don\'t want transcribed.\r\n\r\nHere\'s an example of sending a CloseStream message in Javascript:\r\n\r\n```javascript\r\nsocket.send(JSON.stringify({\r\n    "type": "CloseStream"\r\n}))\r\n```\r\n\r\nAnd an example in Python:\r\n\r\n```python\r\nawait ws.send(json.dumps({\r\n    "type": "CloseStream"\r\n}))\r\n```\r\n\r\nPreviously, streaming connections were closed by sending an empty byte\u2014for example, sending `Uint8Array(0)` in Javascript, or `b\'\'` in Python. This method of closing connections is now deprecated, and we will remove it in a future release. An empty byte doesn\'t inherently translate to closing a connection and some websocket libraries don\'t support sending it. Sending a CloseStream message is a clearer and more universal method to accomplish this.\r\n\r\nWe recommend customers using our API move to using the CloseStream method to avoid potential disruptions. Any customers using our SDK will not need to make changes.\r\n\r\nThis message is the first of many. We\'ll be releasing additional JSON messages in the coming months that will unlock powerful new features in our real-time API. Stay tuned!\r\n\r\nTo learn more about Streaming, please refer to our Streaming [Documentation](https://developers.deepgram.com/documentation/getting-started/streaming/). **We welcome your feedback, please share it with us [here](https://deepgram.hellonext.co/b/feedback).**\r\n\r\n', "html": `<p>We\u2019re excited to announce an update to our streaming API for enhanced usability.</p>
<p>Working with websockets to send audio in real-time can be tricky. Today, we\u2019re releasing the first step in our plan to make our streaming API easier to use.</p>
<p>Streaming connections should now be closed by sending the JSON message <code is:raw>{ "type": "CloseStream" }</code>. This tells Deepgram that no more audio will be sent. Deepgram will then finish processing existing audio, and close the connection once all transcripts are returned.\xA0</p>
<p>Gracefully closing your stream is the best way to ensure you get all your transcripts, and aren\u2019t charged for audio you don\u2019t want transcribed.</p>
<p>Here\u2019s an example of sending a CloseStream message in Javascript:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;CloseStream&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}))</span></span></code></pre>
<p>And an example in Python:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.send(json.dumps({</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;CloseStream&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}))</span></span></code></pre>
<p>Previously, streaming connections were closed by sending an empty byte\u2014for example, sending <code is:raw>Uint8Array(0)</code> in Javascript, or <code is:raw>b''</code> in Python. This method of closing connections is now deprecated, and we will remove it in a future release. An empty byte doesn\u2019t inherently translate to closing a connection and some websocket libraries don\u2019t support sending it. Sending a CloseStream message is a clearer and more universal method to accomplish this.</p>
<p>We recommend customers using our API move to using the CloseStream method to avoid potential disruptions. Any customers using our SDK will not need to make changes.</p>
<p>This message is the first of many. We\u2019ll be releasing additional JSON messages in the coming months that will unlock powerful new features in our real-time API. Stay tuned!</p>
<p>To learn more about Streaming, please refer to our Streaming <a href="https://developers.deepgram.com/documentation/getting-started/streaming/">Documentation</a>. <strong>We welcome your feedback, please share it with us <a href="https://deepgram.hellonext.co/b/feedback">here</a>.</strong></p>` }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/enhanced-messaging-in-streaming/index.md" };
function rawContent() {
  return '\r\nWe\'re excited to announce an update to our streaming API for enhanced usability.\r\n\r\nWorking with websockets to send audio in real-time can be tricky. Today, we\'re releasing the first step in our plan to make our streaming API easier to use.\r\n\r\nStreaming connections should now be closed by sending the JSON message `{ "type": "CloseStream" }`. This tells Deepgram that no more audio will be sent. Deepgram will then finish processing existing audio, and close the connection once all transcripts are returned.\xA0\r\n\r\nGracefully closing your stream is the best way to ensure you get all your transcripts, and aren\'t charged for audio you don\'t want transcribed.\r\n\r\nHere\'s an example of sending a CloseStream message in Javascript:\r\n\r\n```javascript\r\nsocket.send(JSON.stringify({\r\n    "type": "CloseStream"\r\n}))\r\n```\r\n\r\nAnd an example in Python:\r\n\r\n```python\r\nawait ws.send(json.dumps({\r\n    "type": "CloseStream"\r\n}))\r\n```\r\n\r\nPreviously, streaming connections were closed by sending an empty byte\u2014for example, sending `Uint8Array(0)` in Javascript, or `b\'\'` in Python. This method of closing connections is now deprecated, and we will remove it in a future release. An empty byte doesn\'t inherently translate to closing a connection and some websocket libraries don\'t support sending it. Sending a CloseStream message is a clearer and more universal method to accomplish this.\r\n\r\nWe recommend customers using our API move to using the CloseStream method to avoid potential disruptions. Any customers using our SDK will not need to make changes.\r\n\r\nThis message is the first of many. We\'ll be releasing additional JSON messages in the coming months that will unlock powerful new features in our real-time API. Stay tuned!\r\n\r\nTo learn more about Streaming, please refer to our Streaming [Documentation](https://developers.deepgram.com/documentation/getting-started/streaming/). **We welcome your feedback, please share it with us [here](https://deepgram.hellonext.co/b/feedback).**\r\n\r\n';
}
function compiledContent() {
  return `<p>We\u2019re excited to announce an update to our streaming API for enhanced usability.</p>
<p>Working with websockets to send audio in real-time can be tricky. Today, we\u2019re releasing the first step in our plan to make our streaming API easier to use.</p>
<p>Streaming connections should now be closed by sending the JSON message <code is:raw>{ "type": "CloseStream" }</code>. This tells Deepgram that no more audio will be sent. Deepgram will then finish processing existing audio, and close the connection once all transcripts are returned.\xA0</p>
<p>Gracefully closing your stream is the best way to ensure you get all your transcripts, and aren\u2019t charged for audio you don\u2019t want transcribed.</p>
<p>Here\u2019s an example of sending a CloseStream message in Javascript:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;CloseStream&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}))</span></span></code></pre>
<p>And an example in Python:</p>
<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.send(json.dumps({</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;CloseStream&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}))</span></span></code></pre>
<p>Previously, streaming connections were closed by sending an empty byte\u2014for example, sending <code is:raw>Uint8Array(0)</code> in Javascript, or <code is:raw>b''</code> in Python. This method of closing connections is now deprecated, and we will remove it in a future release. An empty byte doesn\u2019t inherently translate to closing a connection and some websocket libraries don\u2019t support sending it. Sending a CloseStream message is a clearer and more universal method to accomplish this.</p>
<p>We recommend customers using our API move to using the CloseStream method to avoid potential disruptions. Any customers using our SDK will not need to make changes.</p>
<p>This message is the first of many. We\u2019ll be releasing additional JSON messages in the coming months that will unlock powerful new features in our real-time API. Stay tuned!</p>
<p>To learn more about Streaming, please refer to our Streaming <a href="https://developers.deepgram.com/documentation/getting-started/streaming/">Documentation</a>. <strong>We welcome your feedback, please share it with us <a href="https://deepgram.hellonext.co/b/feedback">here</a>.</strong></p>`;
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/enhanced-messaging-in-streaming/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>We’re excited to announce an update to our streaming API for enhanced usability.</p>
<p>Working with websockets to send audio in real-time can be tricky. Today, we’re releasing the first step in our plan to make our streaming API easier to use.</p>
<p>Streaming connections should now be closed by sending the JSON message <code>{ "type": "CloseStream" }</code>. This tells Deepgram that no more audio will be sent. Deepgram will then finish processing existing audio, and close the connection once all transcripts are returned. </p>
<p>Gracefully closing your stream is the best way to ensure you get all your transcripts, and aren’t charged for audio you don’t want transcribed.</p>
<p>Here’s an example of sending a CloseStream message in Javascript:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;CloseStream&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}))</span></span></code></pre>
<p>And an example in Python:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> ws.send(json.dumps({</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #A5D6FF">&quot;type&quot;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&quot;CloseStream&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">}))</span></span></code></pre>
<p>Previously, streaming connections were closed by sending an empty byte—for example, sending <code>Uint8Array(0)</code> in Javascript, or <code>b''</code> in Python. This method of closing connections is now deprecated, and we will remove it in a future release. An empty byte doesn’t inherently translate to closing a connection and some websocket libraries don’t support sending it. Sending a CloseStream message is a clearer and more universal method to accomplish this.</p>
<p>We recommend customers using our API move to using the CloseStream method to avoid potential disruptions. Any customers using our SDK will not need to make changes.</p>
<p>This message is the first of many. We’ll be releasing additional JSON messages in the coming months that will unlock powerful new features in our real-time API. Stay tuned!</p>
<p>To learn more about Streaming, please refer to our Streaming <a href="https://developers.deepgram.com/documentation/getting-started/streaming/">Documentation</a>. <strong>We welcome your feedback, please share it with us <a href="https://deepgram.hellonext.co/b/feedback">here</a>.</strong></p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/enhanced-messaging-in-streaming/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
