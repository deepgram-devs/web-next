import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "set-up-netlify-project", "text": "Set Up Netlify Project" }, { "depth": 2, "slug": "your-first-netlify-function", "text": "Your First Netlify Function" }, { "depth": 3, "slug": "test-your-function", "text": "Test Your Function" }, { "depth": 2, "slug": "adding-your-deepgram-api-key", "text": "Adding Your Deepgram API Key" }, { "depth": 2, "slug": "transcribe-hosted-files", "text": "Transcribe Hosted Files" }, { "depth": 2, "slug": "accessing-functions-from-the-web", "text": "Accessing Functions From The Web" }, { "depth": 2, "slug": "transcribe-local-files", "text": "Transcribe Local Files" }, { "depth": 2, "slug": "deploying-functions", "text": "Deploying Functions" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nTraditional server applications typically need to be always on, always using resources and require maintenance to ensure availability. Serverless works differently - functionality is exposed via URLs. When a request is made they spin up, execute logic, and spin back down. Each serverless script (known as a 'function') can be run many times in parallel, so this approach may be suitable for scale, dependent on your use case.\n\nIn this tutorial, you will set up serverless functions with [Netlify](https://www.netlify.com/products/functions/) to get transcripts using [Deepgram's Node.js SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/) - one for hosted files, and one for local files. Because serverless functions do not lend themselves to long-living scripts, it's not recommended to use this approach for live transcription.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   The Netlify CLI installed - [get started guide here](https://docs.netlify.com/cli/get-started/). Also, make sure to log in.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the Deepgram Node.js SDK:\n\n    npm install @deepgram/sdk\n\n## Set Up Netlify Project\n\nYou can set up a Netlify project from the web dashboard, but as we need the Netlify CLI to test our functions, we may as well use it here. Inside of your project directory, run `netlify init`, and when prompted, choose *Create and deploy site manually*.\n\nA new project will now be visible in your Netlify web dashboard - you can open it with `netlify open`.\n\n## Your First Netlify Function\n\nNetlify offer zero-configuration serverless functions if you put your logic in a specific directory - `/netlify/functions`. Create a new file at `/netlify/functions/hello.js` and populate it with the following:\n\n```js\nexports.handler = async (event) => {\n  try {\n    // Any logic goes here, but we'll return a fixed response\n    return { statusCode: 200, body: JSON.stringify({ message: 'ok' }) }\n  } catch (err) {\n    return { statusCode: 500, body: String(err) }\n  }\n}\n```\n\n### Test Your Function\n\nRun `netlify dev` and wait for the local server to start - usually at `http://localhost:8888`. Open another terminal and run the following command to see the response:\n```\n    curl http://localhost:8888/.netlify/functions/hello\n```\n<Alert type=\"info\">Don't be alarmed by the . in the URL - your local directory, which contains your functions, should just be /netlify</Alert>\n\nYour terminal should look something like this:\n\n![A terminal showing the curl command and a response of a json object with message ok](https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/hello.png)\n\n## Adding Your Deepgram API Key\n\nLike most hosting providers, Netlify provides a way to set sensitive keys as environment variables. Netlify CLI will inject any variables from your web dashboard to your local runtime for you - super cool.\n\nOpen your project dashboard with `netlify open` while in your project directory. Heard to **Site settings > Build & deploy > Environment > Environment variables** and create a new variable called `DEEPGRAM_API_KEY` with the value from the [Deepgram Console](https://console.deepgram.com).\n\nIf you are still running your `netlify dev` server, stop it with `ctrl + c` and restart it. You should see the key being injected,meaning it is now available with `process.env.DEEPGRAM_API_KEY`\n\n![netlify dev being run, and then the log 'Injected build settings env var DEEPGRAM\\_API\\_KEY'](https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/key-injection.png)\n\n## Transcribe Hosted Files\n\nInside of your `functions` directory, create `hosted.js` with the following content:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_API_KEY)\n\nexports.handler = async (event) => {\n  try {\n    const { url } = JSON.parse(event.body)\n    const { results } = await deepgram.transcription.preRecorded({ url })\n    return { statusCode: 200, body: JSON.stringify(results) }\n  } catch (err) {\n    return { statusCode: 500, body: String(err) }\n  }\n}\n```\n\nOnce you save the file, the new URL is immediately available. This function requires a data payload with a `url` property. You can test it by once again using cURL:\n```\n  curl -X POST -H \"Content-Type: application/json\" -d '{\"url\": \"https://static.deepgram.com/examples/nasa-spacewalk-interview.wav\"}' http://localhost:8888/.netlify/functions/hosted\n```\n## Accessing Functions From The Web\n\nNetlify makes your functions available on the same domain as your main application (just under the `/.netlify/functions` path). Due to this, we can call Netlify Functions from our main application by specifying the relative URL. This means it will work both locally and once deployed.\n\nCreate an `index.html` file in your main directory:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    <button>Transcribe from URL</button>\n    <script>\n      document.querySelector('button').addEventListener('click', () => {\n        const url = prompt('Please provide an audio file URL')\n        fetch('/.netlify/functions/hosted', {\n          method: 'POST',\n          body: JSON.stringify({ url }),\n        })\n          .then((r) => r.json())\n          .then((data) => {\n            console.log(data)\n          })\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nNavigate to `http://localhost:8888` in your browser, click the button, and provide a static file URL (if you don't have one, use https://static.deepgram.com/examples/nasa-spacewalk-interview.wav). Open your browser console, and you should see the response from Deepgram.\n\n![Browser console showing a large object from Deepgram](https://res.cloudinary.com/deepgram/image/upload/v1640794184/blog/2022/01/transcription-netlify-functions/console.png)\n\n## Transcribe Local Files\n\nCreate a new functions file - `file.js`:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_API_KEY)\n\nexports.handler = async (event) => {\n  try {\n    const { results } = await deepgram.transcription.preRecorded({\n      buffer: Buffer.from(event.body, 'base64'),\n      mimetype: 'audio/wav',\n    })\n    return { statusCode: 200, body: JSON.stringify(results) }\n  } catch (err) {\n    return { statusCode: 500, body: String(err) }\n  }\n}\n```\n\nAdd a `<form>` just below the `<button>` in `index.html`:\n\n```html\n<form\n  enctype=\"multipart/form-data\"\n  action=\"/.netlify/functions/file\"\n  method=\"POST\"\n>\n  <input id=\"file\" type=\"file\" name=\"file\" />\n  <input type=\"submit\" value=\"POST to server\" />\n</form>\n```\n\nRefresh your browser and upload a file - you should see the results in your browser. If you want to handle the results within the page, [Sandra details how to submit a form using JavaScript here](https://blog.deepgram.com/sending-audio-files-to-expressjs-server/#html-and-js-using-a-formdata-object).\n\n## Deploying Functions\n\nReady? `netlify deploy`. That's it.\n\nOnce deployed, you'll be able to access your Netlify functions at **random-name.netlify.app/.netlify/functions/function-name**. Your webpage will work without modifications because it will be served at the same subdomain.\n\nNetlify also supports push-to-deploy with GitHub if you configure your project to deploy from a repo.\n\n## Wrapping Up\n\nNetlify makes deploying serverless functions reasonably straightforward, but if you have any questions after reading this guide, we are here to help! Just pop us a line at [@DeepgramDevs](https://twitter.com/deepgramdevs).", "html": '<p>Traditional server applications typically need to be always on, always using resources and require maintenance to ensure availability. Serverless works differently - functionality is exposed via URLs. When a request is made they spin up, execute logic, and spin back down. Each serverless script (known as a \u2018function\u2019) can be run many times in parallel, so this approach may be suitable for scale, dependent on your use case.</p>\n<p>In this tutorial, you will set up serverless functions with <a href="https://www.netlify.com/products/functions/">Netlify</a> to get transcripts using <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram\u2019s Node.js SDK</a> - one for hosted files, and one for local files. Because serverless functions do not lend themselves to long-living scripts, it\u2019s not recommended to use this approach for live transcription.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>The Netlify CLI installed - <a href="https://docs.netlify.com/cli/get-started/">get started guide here</a>. Also, make sure to log in.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the Deepgram Node.js SDK:</p>\n<p>npm install @deepgram/sdk</p>\n<h2 id="set-up-netlify-project">Set Up Netlify Project</h2>\n<p>You can set up a Netlify project from the web dashboard, but as we need the Netlify CLI to test our functions, we may as well use it here. Inside of your project directory, run <code is:raw>netlify init</code>, and when prompted, choose <em>Create and deploy site manually</em>.</p>\n<p>A new project will now be visible in your Netlify web dashboard - you can open it with <code is:raw>netlify open</code>.</p>\n<h2 id="your-first-netlify-function">Your First Netlify Function</h2>\n<p>Netlify offer zero-configuration serverless functions if you put your logic in a specific directory - <code is:raw>/netlify/functions</code>. Create a new file at <code is:raw>/netlify/functions/hello.js</code> and populate it with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Any logic goes here, but we&#39;ll return a fixed response</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ message: </span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9"> }) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="test-your-function">Test Your Function</h3>\n<p>Run <code is:raw>netlify dev</code> and wait for the local server to start - usually at <code is:raw>http://localhost:8888</code>. Open another terminal and run the following command to see the response:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl http://localhost:8888/.netlify/functions/hello</span></span></code></pre>\n<Alert type="info">Don\u2019t be alarmed by the . in the URL - your local directory, which contains your functions, should just be /netlify</Alert>\n<p>Your terminal should look something like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/hello.png" alt="A terminal showing the curl command and a response of a json object with message ok"></p>\n<h2 id="adding-your-deepgram-api-key">Adding Your Deepgram API Key</h2>\n<p>Like most hosting providers, Netlify provides a way to set sensitive keys as environment variables. Netlify CLI will inject any variables from your web dashboard to your local runtime for you - super cool.</p>\n<p>Open your project dashboard with <code is:raw>netlify open</code> while in your project directory. Heard to <strong>Site settings > Build & deploy > Environment > Environment variables</strong> and create a new variable called <code is:raw>DEEPGRAM_API_KEY</code> with the value from the <a href="https://console.deepgram.com">Deepgram Console</a>.</p>\n<p>If you are still running your <code is:raw>netlify dev</code> server, stop it with <code is:raw>ctrl + c</code> and restart it. You should see the key being injected,meaning it is now available with <code is:raw>process.env.DEEPGRAM_API_KEY</code></p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/key-injection.png" alt="netlify dev being run, and then the log &#x27;Injected build settings env var DEEPGRAM_API_KEY&#x27;"></p>\n<h2 id="transcribe-hosted-files">Transcribe Hosted Files</h2>\n<p>Inside of your <code is:raw>functions</code> directory, create <code is:raw>hosted.js</code> with the following content:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(event.body)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(results) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Once you save the file, the new URL is immediately available. This function requires a data payload with a <code is:raw>url</code> property. You can test it by once again using cURL:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">  curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;url&quot;: &quot;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&quot;}&#39; http://localhost:8888/.netlify/functions/hosted</span></span></code></pre>\n<h2 id="accessing-functions-from-the-web">Accessing Functions From The Web</h2>\n<p>Netlify makes your functions available on the same domain as your main application (just under the <code is:raw>/.netlify/functions</code> path). Due to this, we can call Netlify Functions from our main application by specifying the relative URL. This means it will work both locally and once deployed.</p>\n<p>Create an <code is:raw>index.html</code> file in your main directory:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Transcribe from URL&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">prompt</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Please provide an audio file URL&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/.netlify/functions/hosted&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">          method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ url }),</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"><span style="color: #C9D1D9">          .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">          .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Navigate to <code is:raw>http://localhost:8888</code> in your browser, click the button, and provide a static file URL (if you don\u2019t have one, use <a href="https://static.deepgram.com/examples/nasa-spacewalk-interview.wav">https://static.deepgram.com/examples/nasa-spacewalk-interview.wav</a>). Open your browser console, and you should see the response from Deepgram.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794184/blog/2022/01/transcription-netlify-functions/console.png" alt="Browser console showing a large object from Deepgram"></p>\n<h2 id="transcribe-local-files">Transcribe Local Files</h2>\n<p>Create a new functions file - <code is:raw>file.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">      buffer: Buffer.</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(event.body, </span><span style="color: #A5D6FF">&#39;base64&#39;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">      mimetype: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(results) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Add a <code is:raw>&lt;form&gt;</code> just below the <code is:raw>&lt;button&gt;</code> in <code is:raw>index.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">enctype</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;multipart/form-data&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/.netlify/functions/file&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;POST&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;POST to server&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Refresh your browser and upload a file - you should see the results in your browser. If you want to handle the results within the page, <a href="https://blog.deepgram.com/sending-audio-files-to-expressjs-server/#html-and-js-using-a-formdata-object">Sandra details how to submit a form using JavaScript here</a>.</p>\n<h2 id="deploying-functions">Deploying Functions</h2>\n<p>Ready? <code is:raw>netlify deploy</code>. That\u2019s it.</p>\n<p>Once deployed, you\u2019ll be able to access your Netlify functions at <strong>random-name.netlify.app/.netlify/functions/function-name</strong>. Your webpage will work without modifications because it will be served at the same subdomain.</p>\n<p>Netlify also supports push-to-deploy with GitHub if you configure your project to deploy from a repo.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>Netlify makes deploying serverless functions reasonably straightforward, but if you have any questions after reading this guide, we are here to help! Just pop us a line at <a href="https://twitter.com/deepgramdevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Transcriptions Without a Server Using Netlify and Deepgram", "description": "Use Netlify Functions to transcribe pre-recorded audio without a server", "date": "2022-01-31T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1643628688/blog/2022/01/transcription-netlify-functions/Transcribe-without-server-Netlify-Deepgram%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["nodejs", "netlify", "serverless"], "seo": { "title": "Transcriptions Without a Server Using Netlify and Deepgram", "description": "Use Netlify Functions to transcribe pre-recorded audio without a server" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453852/blog/transcription-netlify-functions/ograph.png" }, "shorturls": { "share": "https://dpgr.am/a0ed7cf", "twitter": "https://dpgr.am/838386f", "linkedin": "https://dpgr.am/038d7a4", "reddit": "https://dpgr.am/f2a916e", "facebook": "https://dpgr.am/1f580fd" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "set-up-netlify-project", "text": "Set Up Netlify Project" }, { "depth": 2, "slug": "your-first-netlify-function", "text": "Your First Netlify Function" }, { "depth": 3, "slug": "test-your-function", "text": "Test Your Function" }, { "depth": 2, "slug": "adding-your-deepgram-api-key", "text": "Adding Your Deepgram API Key" }, { "depth": 2, "slug": "transcribe-hosted-files", "text": "Transcribe Hosted Files" }, { "depth": 2, "slug": "accessing-functions-from-the-web", "text": "Accessing Functions From The Web" }, { "depth": 2, "slug": "transcribe-local-files", "text": "Transcribe Local Files" }, { "depth": 2, "slug": "deploying-functions", "text": "Deploying Functions" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nTraditional server applications typically need to be always on, always using resources and require maintenance to ensure availability. Serverless works differently - functionality is exposed via URLs. When a request is made they spin up, execute logic, and spin back down. Each serverless script (known as a 'function') can be run many times in parallel, so this approach may be suitable for scale, dependent on your use case.\n\nIn this tutorial, you will set up serverless functions with [Netlify](https://www.netlify.com/products/functions/) to get transcripts using [Deepgram's Node.js SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/) - one for hosted files, and one for local files. Because serverless functions do not lend themselves to long-living scripts, it's not recommended to use this approach for live transcription.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   The Netlify CLI installed - [get started guide here](https://docs.netlify.com/cli/get-started/). Also, make sure to log in.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the Deepgram Node.js SDK:\n\n    npm install @deepgram/sdk\n\n## Set Up Netlify Project\n\nYou can set up a Netlify project from the web dashboard, but as we need the Netlify CLI to test our functions, we may as well use it here. Inside of your project directory, run `netlify init`, and when prompted, choose *Create and deploy site manually*.\n\nA new project will now be visible in your Netlify web dashboard - you can open it with `netlify open`.\n\n## Your First Netlify Function\n\nNetlify offer zero-configuration serverless functions if you put your logic in a specific directory - `/netlify/functions`. Create a new file at `/netlify/functions/hello.js` and populate it with the following:\n\n```js\nexports.handler = async (event) => {\n  try {\n    // Any logic goes here, but we'll return a fixed response\n    return { statusCode: 200, body: JSON.stringify({ message: 'ok' }) }\n  } catch (err) {\n    return { statusCode: 500, body: String(err) }\n  }\n}\n```\n\n### Test Your Function\n\nRun `netlify dev` and wait for the local server to start - usually at `http://localhost:8888`. Open another terminal and run the following command to see the response:\n```\n    curl http://localhost:8888/.netlify/functions/hello\n```\n<Alert type=\"info\">Don't be alarmed by the . in the URL - your local directory, which contains your functions, should just be /netlify</Alert>\n\nYour terminal should look something like this:\n\n![A terminal showing the curl command and a response of a json object with message ok](https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/hello.png)\n\n## Adding Your Deepgram API Key\n\nLike most hosting providers, Netlify provides a way to set sensitive keys as environment variables. Netlify CLI will inject any variables from your web dashboard to your local runtime for you - super cool.\n\nOpen your project dashboard with `netlify open` while in your project directory. Heard to **Site settings > Build & deploy > Environment > Environment variables** and create a new variable called `DEEPGRAM_API_KEY` with the value from the [Deepgram Console](https://console.deepgram.com).\n\nIf you are still running your `netlify dev` server, stop it with `ctrl + c` and restart it. You should see the key being injected,meaning it is now available with `process.env.DEEPGRAM_API_KEY`\n\n![netlify dev being run, and then the log 'Injected build settings env var DEEPGRAM\\_API\\_KEY'](https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/key-injection.png)\n\n## Transcribe Hosted Files\n\nInside of your `functions` directory, create `hosted.js` with the following content:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_API_KEY)\n\nexports.handler = async (event) => {\n  try {\n    const { url } = JSON.parse(event.body)\n    const { results } = await deepgram.transcription.preRecorded({ url })\n    return { statusCode: 200, body: JSON.stringify(results) }\n  } catch (err) {\n    return { statusCode: 500, body: String(err) }\n  }\n}\n```\n\nOnce you save the file, the new URL is immediately available. This function requires a data payload with a `url` property. You can test it by once again using cURL:\n```\n  curl -X POST -H \"Content-Type: application/json\" -d '{\"url\": \"https://static.deepgram.com/examples/nasa-spacewalk-interview.wav\"}' http://localhost:8888/.netlify/functions/hosted\n```\n## Accessing Functions From The Web\n\nNetlify makes your functions available on the same domain as your main application (just under the `/.netlify/functions` path). Due to this, we can call Netlify Functions from our main application by specifying the relative URL. This means it will work both locally and once deployed.\n\nCreate an `index.html` file in your main directory:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    <button>Transcribe from URL</button>\n    <script>\n      document.querySelector('button').addEventListener('click', () => {\n        const url = prompt('Please provide an audio file URL')\n        fetch('/.netlify/functions/hosted', {\n          method: 'POST',\n          body: JSON.stringify({ url }),\n        })\n          .then((r) => r.json())\n          .then((data) => {\n            console.log(data)\n          })\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nNavigate to `http://localhost:8888` in your browser, click the button, and provide a static file URL (if you don't have one, use https://static.deepgram.com/examples/nasa-spacewalk-interview.wav). Open your browser console, and you should see the response from Deepgram.\n\n![Browser console showing a large object from Deepgram](https://res.cloudinary.com/deepgram/image/upload/v1640794184/blog/2022/01/transcription-netlify-functions/console.png)\n\n## Transcribe Local Files\n\nCreate a new functions file - `file.js`:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_API_KEY)\n\nexports.handler = async (event) => {\n  try {\n    const { results } = await deepgram.transcription.preRecorded({\n      buffer: Buffer.from(event.body, 'base64'),\n      mimetype: 'audio/wav',\n    })\n    return { statusCode: 200, body: JSON.stringify(results) }\n  } catch (err) {\n    return { statusCode: 500, body: String(err) }\n  }\n}\n```\n\nAdd a `<form>` just below the `<button>` in `index.html`:\n\n```html\n<form\n  enctype=\"multipart/form-data\"\n  action=\"/.netlify/functions/file\"\n  method=\"POST\"\n>\n  <input id=\"file\" type=\"file\" name=\"file\" />\n  <input type=\"submit\" value=\"POST to server\" />\n</form>\n```\n\nRefresh your browser and upload a file - you should see the results in your browser. If you want to handle the results within the page, [Sandra details how to submit a form using JavaScript here](https://blog.deepgram.com/sending-audio-files-to-expressjs-server/#html-and-js-using-a-formdata-object).\n\n## Deploying Functions\n\nReady? `netlify deploy`. That's it.\n\nOnce deployed, you'll be able to access your Netlify functions at **random-name.netlify.app/.netlify/functions/function-name**. Your webpage will work without modifications because it will be served at the same subdomain.\n\nNetlify also supports push-to-deploy with GitHub if you configure your project to deploy from a repo.\n\n## Wrapping Up\n\nNetlify makes deploying serverless functions reasonably straightforward, but if you have any questions after reading this guide, we are here to help! Just pop us a line at [@DeepgramDevs](https://twitter.com/deepgramdevs).", "html": '<p>Traditional server applications typically need to be always on, always using resources and require maintenance to ensure availability. Serverless works differently - functionality is exposed via URLs. When a request is made they spin up, execute logic, and spin back down. Each serverless script (known as a \u2018function\u2019) can be run many times in parallel, so this approach may be suitable for scale, dependent on your use case.</p>\n<p>In this tutorial, you will set up serverless functions with <a href="https://www.netlify.com/products/functions/">Netlify</a> to get transcripts using <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram\u2019s Node.js SDK</a> - one for hosted files, and one for local files. Because serverless functions do not lend themselves to long-living scripts, it\u2019s not recommended to use this approach for live transcription.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>The Netlify CLI installed - <a href="https://docs.netlify.com/cli/get-started/">get started guide here</a>. Also, make sure to log in.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the Deepgram Node.js SDK:</p>\n<p>npm install @deepgram/sdk</p>\n<h2 id="set-up-netlify-project">Set Up Netlify Project</h2>\n<p>You can set up a Netlify project from the web dashboard, but as we need the Netlify CLI to test our functions, we may as well use it here. Inside of your project directory, run <code is:raw>netlify init</code>, and when prompted, choose <em>Create and deploy site manually</em>.</p>\n<p>A new project will now be visible in your Netlify web dashboard - you can open it with <code is:raw>netlify open</code>.</p>\n<h2 id="your-first-netlify-function">Your First Netlify Function</h2>\n<p>Netlify offer zero-configuration serverless functions if you put your logic in a specific directory - <code is:raw>/netlify/functions</code>. Create a new file at <code is:raw>/netlify/functions/hello.js</code> and populate it with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Any logic goes here, but we&#39;ll return a fixed response</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ message: </span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9"> }) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="test-your-function">Test Your Function</h3>\n<p>Run <code is:raw>netlify dev</code> and wait for the local server to start - usually at <code is:raw>http://localhost:8888</code>. Open another terminal and run the following command to see the response:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl http://localhost:8888/.netlify/functions/hello</span></span></code></pre>\n<Alert type="info">Don\u2019t be alarmed by the . in the URL - your local directory, which contains your functions, should just be /netlify</Alert>\n<p>Your terminal should look something like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/hello.png" alt="A terminal showing the curl command and a response of a json object with message ok"></p>\n<h2 id="adding-your-deepgram-api-key">Adding Your Deepgram API Key</h2>\n<p>Like most hosting providers, Netlify provides a way to set sensitive keys as environment variables. Netlify CLI will inject any variables from your web dashboard to your local runtime for you - super cool.</p>\n<p>Open your project dashboard with <code is:raw>netlify open</code> while in your project directory. Heard to <strong>Site settings > Build & deploy > Environment > Environment variables</strong> and create a new variable called <code is:raw>DEEPGRAM_API_KEY</code> with the value from the <a href="https://console.deepgram.com">Deepgram Console</a>.</p>\n<p>If you are still running your <code is:raw>netlify dev</code> server, stop it with <code is:raw>ctrl + c</code> and restart it. You should see the key being injected,meaning it is now available with <code is:raw>process.env.DEEPGRAM_API_KEY</code></p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/key-injection.png" alt="netlify dev being run, and then the log &#x27;Injected build settings env var DEEPGRAM_API_KEY&#x27;"></p>\n<h2 id="transcribe-hosted-files">Transcribe Hosted Files</h2>\n<p>Inside of your <code is:raw>functions</code> directory, create <code is:raw>hosted.js</code> with the following content:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(event.body)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(results) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Once you save the file, the new URL is immediately available. This function requires a data payload with a <code is:raw>url</code> property. You can test it by once again using cURL:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">  curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;url&quot;: &quot;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&quot;}&#39; http://localhost:8888/.netlify/functions/hosted</span></span></code></pre>\n<h2 id="accessing-functions-from-the-web">Accessing Functions From The Web</h2>\n<p>Netlify makes your functions available on the same domain as your main application (just under the <code is:raw>/.netlify/functions</code> path). Due to this, we can call Netlify Functions from our main application by specifying the relative URL. This means it will work both locally and once deployed.</p>\n<p>Create an <code is:raw>index.html</code> file in your main directory:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Transcribe from URL&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">prompt</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Please provide an audio file URL&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/.netlify/functions/hosted&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">          method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ url }),</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"><span style="color: #C9D1D9">          .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">          .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Navigate to <code is:raw>http://localhost:8888</code> in your browser, click the button, and provide a static file URL (if you don\u2019t have one, use <a href="https://static.deepgram.com/examples/nasa-spacewalk-interview.wav">https://static.deepgram.com/examples/nasa-spacewalk-interview.wav</a>). Open your browser console, and you should see the response from Deepgram.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794184/blog/2022/01/transcription-netlify-functions/console.png" alt="Browser console showing a large object from Deepgram"></p>\n<h2 id="transcribe-local-files">Transcribe Local Files</h2>\n<p>Create a new functions file - <code is:raw>file.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">      buffer: Buffer.</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(event.body, </span><span style="color: #A5D6FF">&#39;base64&#39;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">      mimetype: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(results) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Add a <code is:raw>&lt;form&gt;</code> just below the <code is:raw>&lt;button&gt;</code> in <code is:raw>index.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">enctype</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;multipart/form-data&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/.netlify/functions/file&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;POST&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;POST to server&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Refresh your browser and upload a file - you should see the results in your browser. If you want to handle the results within the page, <a href="https://blog.deepgram.com/sending-audio-files-to-expressjs-server/#html-and-js-using-a-formdata-object">Sandra details how to submit a form using JavaScript here</a>.</p>\n<h2 id="deploying-functions">Deploying Functions</h2>\n<p>Ready? <code is:raw>netlify deploy</code>. That\u2019s it.</p>\n<p>Once deployed, you\u2019ll be able to access your Netlify functions at <strong>random-name.netlify.app/.netlify/functions/function-name</strong>. Your webpage will work without modifications because it will be served at the same subdomain.</p>\n<p>Netlify also supports push-to-deploy with GitHub if you configure your project to deploy from a repo.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>Netlify makes deploying serverless functions reasonably straightforward, but if you have any questions after reading this guide, we are here to help! Just pop us a line at <a href="https://twitter.com/deepgramdevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcription-netlify-functions/index.md" };
function rawContent() {
  return "\nTraditional server applications typically need to be always on, always using resources and require maintenance to ensure availability. Serverless works differently - functionality is exposed via URLs. When a request is made they spin up, execute logic, and spin back down. Each serverless script (known as a 'function') can be run many times in parallel, so this approach may be suitable for scale, dependent on your use case.\n\nIn this tutorial, you will set up serverless functions with [Netlify](https://www.netlify.com/products/functions/) to get transcripts using [Deepgram's Node.js SDK](https://developers.deepgram.com/sdks-tools/sdks/node-sdk/) - one for hosted files, and one for local files. Because serverless functions do not lend themselves to long-living scripts, it's not recommended to use this approach for live transcription.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key - [get one here](https://console.deepgram.com/signup?jump=keys).\n*   The Netlify CLI installed - [get started guide here](https://docs.netlify.com/cli/get-started/). Also, make sure to log in.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the Deepgram Node.js SDK:\n\n    npm install @deepgram/sdk\n\n## Set Up Netlify Project\n\nYou can set up a Netlify project from the web dashboard, but as we need the Netlify CLI to test our functions, we may as well use it here. Inside of your project directory, run `netlify init`, and when prompted, choose *Create and deploy site manually*.\n\nA new project will now be visible in your Netlify web dashboard - you can open it with `netlify open`.\n\n## Your First Netlify Function\n\nNetlify offer zero-configuration serverless functions if you put your logic in a specific directory - `/netlify/functions`. Create a new file at `/netlify/functions/hello.js` and populate it with the following:\n\n```js\nexports.handler = async (event) => {\n  try {\n    // Any logic goes here, but we'll return a fixed response\n    return { statusCode: 200, body: JSON.stringify({ message: 'ok' }) }\n  } catch (err) {\n    return { statusCode: 500, body: String(err) }\n  }\n}\n```\n\n### Test Your Function\n\nRun `netlify dev` and wait for the local server to start - usually at `http://localhost:8888`. Open another terminal and run the following command to see the response:\n```\n    curl http://localhost:8888/.netlify/functions/hello\n```\n<Alert type=\"info\">Don't be alarmed by the . in the URL - your local directory, which contains your functions, should just be /netlify</Alert>\n\nYour terminal should look something like this:\n\n![A terminal showing the curl command and a response of a json object with message ok](https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/hello.png)\n\n## Adding Your Deepgram API Key\n\nLike most hosting providers, Netlify provides a way to set sensitive keys as environment variables. Netlify CLI will inject any variables from your web dashboard to your local runtime for you - super cool.\n\nOpen your project dashboard with `netlify open` while in your project directory. Heard to **Site settings > Build & deploy > Environment > Environment variables** and create a new variable called `DEEPGRAM_API_KEY` with the value from the [Deepgram Console](https://console.deepgram.com).\n\nIf you are still running your `netlify dev` server, stop it with `ctrl + c` and restart it. You should see the key being injected,meaning it is now available with `process.env.DEEPGRAM_API_KEY`\n\n![netlify dev being run, and then the log 'Injected build settings env var DEEPGRAM\\_API\\_KEY'](https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/key-injection.png)\n\n## Transcribe Hosted Files\n\nInside of your `functions` directory, create `hosted.js` with the following content:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_API_KEY)\n\nexports.handler = async (event) => {\n  try {\n    const { url } = JSON.parse(event.body)\n    const { results } = await deepgram.transcription.preRecorded({ url })\n    return { statusCode: 200, body: JSON.stringify(results) }\n  } catch (err) {\n    return { statusCode: 500, body: String(err) }\n  }\n}\n```\n\nOnce you save the file, the new URL is immediately available. This function requires a data payload with a `url` property. You can test it by once again using cURL:\n```\n  curl -X POST -H \"Content-Type: application/json\" -d '{\"url\": \"https://static.deepgram.com/examples/nasa-spacewalk-interview.wav\"}' http://localhost:8888/.netlify/functions/hosted\n```\n## Accessing Functions From The Web\n\nNetlify makes your functions available on the same domain as your main application (just under the `/.netlify/functions` path). Due to this, we can call Netlify Functions from our main application by specifying the relative URL. This means it will work both locally and once deployed.\n\nCreate an `index.html` file in your main directory:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    <button>Transcribe from URL</button>\n    <script>\n      document.querySelector('button').addEventListener('click', () => {\n        const url = prompt('Please provide an audio file URL')\n        fetch('/.netlify/functions/hosted', {\n          method: 'POST',\n          body: JSON.stringify({ url }),\n        })\n          .then((r) => r.json())\n          .then((data) => {\n            console.log(data)\n          })\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nNavigate to `http://localhost:8888` in your browser, click the button, and provide a static file URL (if you don't have one, use https://static.deepgram.com/examples/nasa-spacewalk-interview.wav). Open your browser console, and you should see the response from Deepgram.\n\n![Browser console showing a large object from Deepgram](https://res.cloudinary.com/deepgram/image/upload/v1640794184/blog/2022/01/transcription-netlify-functions/console.png)\n\n## Transcribe Local Files\n\nCreate a new functions file - `file.js`:\n\n```js\nconst { Deepgram } = require('@deepgram/sdk')\nconst deepgram = new Deepgram(process.env.DEEPGRAM_API_KEY)\n\nexports.handler = async (event) => {\n  try {\n    const { results } = await deepgram.transcription.preRecorded({\n      buffer: Buffer.from(event.body, 'base64'),\n      mimetype: 'audio/wav',\n    })\n    return { statusCode: 200, body: JSON.stringify(results) }\n  } catch (err) {\n    return { statusCode: 500, body: String(err) }\n  }\n}\n```\n\nAdd a `<form>` just below the `<button>` in `index.html`:\n\n```html\n<form\n  enctype=\"multipart/form-data\"\n  action=\"/.netlify/functions/file\"\n  method=\"POST\"\n>\n  <input id=\"file\" type=\"file\" name=\"file\" />\n  <input type=\"submit\" value=\"POST to server\" />\n</form>\n```\n\nRefresh your browser and upload a file - you should see the results in your browser. If you want to handle the results within the page, [Sandra details how to submit a form using JavaScript here](https://blog.deepgram.com/sending-audio-files-to-expressjs-server/#html-and-js-using-a-formdata-object).\n\n## Deploying Functions\n\nReady? `netlify deploy`. That's it.\n\nOnce deployed, you'll be able to access your Netlify functions at **random-name.netlify.app/.netlify/functions/function-name**. Your webpage will work without modifications because it will be served at the same subdomain.\n\nNetlify also supports push-to-deploy with GitHub if you configure your project to deploy from a repo.\n\n## Wrapping Up\n\nNetlify makes deploying serverless functions reasonably straightforward, but if you have any questions after reading this guide, we are here to help! Just pop us a line at [@DeepgramDevs](https://twitter.com/deepgramdevs).";
}
function compiledContent() {
  return '<p>Traditional server applications typically need to be always on, always using resources and require maintenance to ensure availability. Serverless works differently - functionality is exposed via URLs. When a request is made they spin up, execute logic, and spin back down. Each serverless script (known as a \u2018function\u2019) can be run many times in parallel, so this approach may be suitable for scale, dependent on your use case.</p>\n<p>In this tutorial, you will set up serverless functions with <a href="https://www.netlify.com/products/functions/">Netlify</a> to get transcripts using <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram\u2019s Node.js SDK</a> - one for hosted files, and one for local files. Because serverless functions do not lend themselves to long-living scripts, it\u2019s not recommended to use this approach for live transcription.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>\n<li>The Netlify CLI installed - <a href="https://docs.netlify.com/cli/get-started/">get started guide here</a>. Also, make sure to log in.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the Deepgram Node.js SDK:</p>\n<p>npm install @deepgram/sdk</p>\n<h2 id="set-up-netlify-project">Set Up Netlify Project</h2>\n<p>You can set up a Netlify project from the web dashboard, but as we need the Netlify CLI to test our functions, we may as well use it here. Inside of your project directory, run <code is:raw>netlify init</code>, and when prompted, choose <em>Create and deploy site manually</em>.</p>\n<p>A new project will now be visible in your Netlify web dashboard - you can open it with <code is:raw>netlify open</code>.</p>\n<h2 id="your-first-netlify-function">Your First Netlify Function</h2>\n<p>Netlify offer zero-configuration serverless functions if you put your logic in a specific directory - <code is:raw>/netlify/functions</code>. Create a new file at <code is:raw>/netlify/functions/hello.js</code> and populate it with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Any logic goes here, but we&#39;ll return a fixed response</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ message: </span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9"> }) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<h3 id="test-your-function">Test Your Function</h3>\n<p>Run <code is:raw>netlify dev</code> and wait for the local server to start - usually at <code is:raw>http://localhost:8888</code>. Open another terminal and run the following command to see the response:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl http://localhost:8888/.netlify/functions/hello</span></span></code></pre>\n<Alert type="info">Don\u2019t be alarmed by the . in the URL - your local directory, which contains your functions, should just be /netlify</Alert>\n<p>Your terminal should look something like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/hello.png" alt="A terminal showing the curl command and a response of a json object with message ok"></p>\n<h2 id="adding-your-deepgram-api-key">Adding Your Deepgram API Key</h2>\n<p>Like most hosting providers, Netlify provides a way to set sensitive keys as environment variables. Netlify CLI will inject any variables from your web dashboard to your local runtime for you - super cool.</p>\n<p>Open your project dashboard with <code is:raw>netlify open</code> while in your project directory. Heard to <strong>Site settings > Build & deploy > Environment > Environment variables</strong> and create a new variable called <code is:raw>DEEPGRAM_API_KEY</code> with the value from the <a href="https://console.deepgram.com">Deepgram Console</a>.</p>\n<p>If you are still running your <code is:raw>netlify dev</code> server, stop it with <code is:raw>ctrl + c</code> and restart it. You should see the key being injected,meaning it is now available with <code is:raw>process.env.DEEPGRAM_API_KEY</code></p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/key-injection.png" alt="netlify dev being run, and then the log &#x27;Injected build settings env var DEEPGRAM_API_KEY&#x27;"></p>\n<h2 id="transcribe-hosted-files">Transcribe Hosted Files</h2>\n<p>Inside of your <code is:raw>functions</code> directory, create <code is:raw>hosted.js</code> with the following content:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(event.body)</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(results) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Once you save the file, the new URL is immediately available. This function requires a data payload with a <code is:raw>url</code> property. You can test it by once again using cURL:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">  curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;url&quot;: &quot;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&quot;}&#39; http://localhost:8888/.netlify/functions/hosted</span></span></code></pre>\n<h2 id="accessing-functions-from-the-web">Accessing Functions From The Web</h2>\n<p>Netlify makes your functions available on the same domain as your main application (just under the <code is:raw>/.netlify/functions</code> path). Due to this, we can call Netlify Functions from our main application by specifying the relative URL. This means it will work both locally and once deployed.</p>\n<p>Create an <code is:raw>index.html</code> file in your main directory:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Transcribe from URL&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">prompt</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Please provide an audio file URL&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/.netlify/functions/hosted&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">          method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">          body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ url }),</span></span>\n<span class="line"><span style="color: #C9D1D9">        })</span></span>\n<span class="line"><span style="color: #C9D1D9">          .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">          .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">            console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data)</span></span>\n<span class="line"><span style="color: #C9D1D9">          })</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Navigate to <code is:raw>http://localhost:8888</code> in your browser, click the button, and provide a static file URL (if you don\u2019t have one, use <a href="https://static.deepgram.com/examples/nasa-spacewalk-interview.wav">https://static.deepgram.com/examples/nasa-spacewalk-interview.wav</a>). Open your browser console, and you should see the response from Deepgram.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794184/blog/2022/01/transcription-netlify-functions/console.png" alt="Browser console showing a large object from Deepgram"></p>\n<h2 id="transcribe-local-files">Transcribe Local Files</h2>\n<p>Create a new functions file - <code is:raw>file.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">      buffer: Buffer.</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(event.body, </span><span style="color: #A5D6FF">&#39;base64&#39;</span><span style="color: #C9D1D9">),</span></span>\n<span class="line"><span style="color: #C9D1D9">      mimetype: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(results) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Add a <code is:raw>&lt;form&gt;</code> just below the <code is:raw>&lt;button&gt;</code> in <code is:raw>index.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">enctype</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;multipart/form-data&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/.netlify/functions/file&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;POST&quot;</span></span>\n<span class="line"><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;POST to server&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Refresh your browser and upload a file - you should see the results in your browser. If you want to handle the results within the page, <a href="https://blog.deepgram.com/sending-audio-files-to-expressjs-server/#html-and-js-using-a-formdata-object">Sandra details how to submit a form using JavaScript here</a>.</p>\n<h2 id="deploying-functions">Deploying Functions</h2>\n<p>Ready? <code is:raw>netlify deploy</code>. That\u2019s it.</p>\n<p>Once deployed, you\u2019ll be able to access your Netlify functions at <strong>random-name.netlify.app/.netlify/functions/function-name</strong>. Your webpage will work without modifications because it will be served at the same subdomain.</p>\n<p>Netlify also supports push-to-deploy with GitHub if you configure your project to deploy from a repo.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>Netlify makes deploying serverless functions reasonably straightforward, but if you have any questions after reading this guide, we are here to help! Just pop us a line at <a href="https://twitter.com/deepgramdevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcription-netlify-functions/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Traditional server applications typically need to be always on, always using resources and require maintenance to ensure availability. Serverless works differently - functionality is exposed via URLs. When a request is made they spin up, execute logic, and spin back down. Each serverless script (known as a ‘function’) can be run many times in parallel, so this approach may be suitable for scale, dependent on your use case.</p>
<p>In this tutorial, you will set up serverless functions with <a href="https://www.netlify.com/products/functions/">Netlify</a> to get transcripts using <a href="https://developers.deepgram.com/sdks-tools/sdks/node-sdk/">Deepgram’s Node.js SDK</a> - one for hosted files, and one for local files. Because serverless functions do not lend themselves to long-living scripts, it’s not recommended to use this approach for live transcription.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get one here</a>.</li>
<li>The Netlify CLI installed - <a href="https://docs.netlify.com/cli/get-started/">get started guide here</a>. Also, make sure to log in.</li>
</ul>
<p>Create a new directory and navigate to it with your terminal. Run <code>npm init -y</code> to create a <code>package.json</code> file and then install the Deepgram Node.js SDK:</p>
<p>npm install @deepgram/sdk</p>
<h2 id="set-up-netlify-project">Set Up Netlify Project</h2>
<p>You can set up a Netlify project from the web dashboard, but as we need the Netlify CLI to test our functions, we may as well use it here. Inside of your project directory, run <code>netlify init</code>, and when prompted, choose <em>Create and deploy site manually</em>.</p>
<p>A new project will now be visible in your Netlify web dashboard - you can open it with <code>netlify open</code>.</p>
<h2 id="your-first-netlify-function">Your First Netlify Function</h2>
<p>Netlify offer zero-configuration serverless functions if you put your logic in a specific directory - <code>/netlify/functions</code>. Create a new file at <code>/netlify/functions/hello.js</code> and populate it with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Any logic goes here, but we&#39;ll return a fixed response</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ message: </span><span style="color: #A5D6FF">&#39;ok&#39;</span><span style="color: #C9D1D9"> }) }</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<h3 id="test-your-function">Test Your Function</h3>
<p>Run <code>netlify dev</code> and wait for the local server to start - usually at <code>http://localhost:8888</code>. Open another terminal and run the following command to see the response:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    curl http://localhost:8888/.netlify/functions/hello</span></span></code></pre>
${renderComponent($$result, "Alert", Alert, { "type": "info" }, { "default": () => renderTemplate`Don’t be alarmed by the . in the URL - your local directory, which contains your functions, should just be /netlify` })}
<p>Your terminal should look something like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/hello.png" alt="A terminal showing the curl command and a response of a json object with message ok"></p>
<h2 id="adding-your-deepgram-api-key">Adding Your Deepgram API Key</h2>
<p>Like most hosting providers, Netlify provides a way to set sensitive keys as environment variables. Netlify CLI will inject any variables from your web dashboard to your local runtime for you - super cool.</p>
<p>Open your project dashboard with <code>netlify open</code> while in your project directory. Heard to <strong>Site settings > Build & deploy > Environment > Environment variables</strong> and create a new variable called <code>DEEPGRAM_API_KEY</code> with the value from the <a href="https://console.deepgram.com">Deepgram Console</a>.</p>
<p>If you are still running your <code>netlify dev</code> server, stop it with <code>ctrl + c</code> and restart it. You should see the key being injected,meaning it is now available with <code>process.env.DEEPGRAM_API_KEY</code></p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794183/blog/2022/01/transcription-netlify-functions/key-injection.png" alt="netlify dev being run, and then the log 'Injected build settings env var DEEPGRAM_API_KEY'"></p>
<h2 id="transcribe-hosted-files">Transcribe Hosted Files</h2>
<p>Inside of your <code>functions</code> directory, create <code>hosted.js</code> with the following content:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(event.body)</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({ url })</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(results) }</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Once you save the file, the new URL is immediately available. This function requires a data payload with a <code>url</code> property. You can test it by once again using cURL:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">  curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;url&quot;: &quot;https://static.deepgram.com/examples/nasa-spacewalk-interview.wav&quot;}&#39; http://localhost:8888/.netlify/functions/hosted</span></span></code></pre>
<h2 id="accessing-functions-from-the-web">Accessing Functions From The Web</h2>
<p>Netlify makes your functions available on the same domain as your main application (just under the <code>/.netlify/functions</code> path). Due to this, we can call Netlify Functions from our main application by specifying the relative URL. This means it will work both locally and once deployed.</p>
<p>Create an <code>index.html</code> file in your main directory:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;Transcribe from URL&lt;/</span><span style="color: #7EE787">button</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;button&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;click&#39;</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">prompt</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;Please provide an audio file URL&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/.netlify/functions/hosted&#39;</span><span style="color: #C9D1D9">, {</span></span>
<span class="line"><span style="color: #C9D1D9">          method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">          body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ url }),</span></span>
<span class="line"><span style="color: #C9D1D9">        })</span></span>
<span class="line"><span style="color: #C9D1D9">          .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">          .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">            console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(data)</span></span>
<span class="line"><span style="color: #C9D1D9">          })</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Navigate to <code>http://localhost:8888</code> in your browser, click the button, and provide a static file URL (if you don’t have one, use <a href="https://static.deepgram.com/examples/nasa-spacewalk-interview.wav">https://static.deepgram.com/examples/nasa-spacewalk-interview.wav</a>). Open your browser console, and you should see the response from Deepgram.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1640794184/blog/2022/01/transcription-netlify-functions/console.png" alt="Browser console showing a large object from Deepgram"></p>
<h2 id="transcribe-local-files">Transcribe Local Files</h2>
<p>Create a new functions file - <code>file.js</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_API_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79C0FF">exports</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">handler</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">results</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.transcription.</span><span style="color: #D2A8FF">preRecorded</span><span style="color: #C9D1D9">({</span></span>
<span class="line"><span style="color: #C9D1D9">      buffer: Buffer.</span><span style="color: #D2A8FF">from</span><span style="color: #C9D1D9">(event.body, </span><span style="color: #A5D6FF">&#39;base64&#39;</span><span style="color: #C9D1D9">),</span></span>
<span class="line"><span style="color: #C9D1D9">      mimetype: </span><span style="color: #A5D6FF">&#39;audio/wav&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    })</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">200</span><span style="color: #C9D1D9">, body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">(results) }</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (err) {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> { statusCode: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">, body: </span><span style="color: #D2A8FF">String</span><span style="color: #C9D1D9">(err) }</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Add a <code>&lt;form&gt;</code> just below the <code>&lt;button&gt;</code> in <code>index.html</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">form</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">enctype</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;multipart/form-data&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/.netlify/functions/file&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">method</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;POST&quot;</span></span>
<span class="line"><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;file&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;POST to server&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Refresh your browser and upload a file - you should see the results in your browser. If you want to handle the results within the page, <a href="https://blog.deepgram.com/sending-audio-files-to-expressjs-server/#html-and-js-using-a-formdata-object">Sandra details how to submit a form using JavaScript here</a>.</p>
<h2 id="deploying-functions">Deploying Functions</h2>
<p>Ready? <code>netlify deploy</code>. That’s it.</p>
<p>Once deployed, you’ll be able to access your Netlify functions at <strong>random-name.netlify.app/.netlify/functions/function-name</strong>. Your webpage will work without modifications because it will be served at the same subdomain.</p>
<p>Netlify also supports push-to-deploy with GitHub if you configure your project to deploy from a repo.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Netlify makes deploying serverless functions reasonably straightforward, but if you have any questions after reading this guide, we are here to help! Just pop us a line at <a href="https://twitter.com/deepgramdevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/transcription-netlify-functions/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
