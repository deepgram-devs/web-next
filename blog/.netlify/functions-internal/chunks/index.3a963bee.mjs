import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
/* empty css                           */import 'axios';
/* empty css                          *//* empty css                           *//* empty css                          *//* empty css                              *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           *//* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "who-this-post-is-for", "text": "Who this post is for" }, { "depth": 2, "slug": "setup", "text": "Setup" }, { "depth": 2, "slug": "initializing-the-database", "text": "Initializing the Database" }, { "depth": 2, "slug": "querying-the-database", "text": "Querying the Database" }, { "depth": 3, "slug": "reading-data", "text": "Reading data" }, { "depth": 3, "slug": "inserting-data-via-the-api", "text": "Inserting data via the API" }, { "depth": 3, "slug": "updating-data", "text": "Updating data" }, { "depth": 3, "slug": "deleting-data", "text": "Deleting data" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": '\r\nGetting a database set up and running can be a difficult and time-consuming process. There are quite a few options these days for "quick" solutions. Supabase is one of those options and is gaining popularity very quickly. Let\'s dive in and see what Supabase offers. We\'ll walk through an example of setting up a database for a Reading List app and learn how to add, read, edit, and delete data from it.\r\n\r\n## Who this post is for\r\n\r\nThis post will be easier to follow if you have a general understanding of how databases work.\r\n\r\n## Setup\r\n\r\nThe first thing you\'ll need to do is sign up on [Supabase](https://app.supabase.io/api/login). It asks you to sign up with GitHub, so if you don\'t have an account, you should also sign up for one of those.\r\n\r\nOnce you are signed in, you\'ll click the green button that says "New Project" and select the default organization that was created when you logged in. Mine was called "briancbarrow\'s Org." This will bring up a box where we provide some info about the project. I\'ll name it `reading-list`, give it a strong password, and then I\'m going to select the region `West US (North California)` because that is closest to me.\r\n\r\n![Setting up the project with the name reading-list and selecting the West US region.](https://res.cloudinary.com/deepgram/image/upload/v1636151269/blog/2021/11/getting-started-with-supabase/new-project-modal.png)\r\n\r\nClick the "Create new project" button. It will take a few minutes for the project to be ready, so sit tight until that finishes.\r\n\r\nNow that we have that set up, you should see a page with the name of the project you gave, and below that, it should say "Welcome to your new project." Below that, there are a few features that we can start exploring.\r\n\r\n*   **Database**: The Supabase Database is an instance of a Postgres Database. We\'ll be diving into this more below.\r\n*   **Auth**: The Supabase Auth service makes it relatively easy to set up authentication for your app and also manage your users. We won\'t be covering Auth in this post.\r\n*   **Storage**: Supabase offers a storage service for larger files like images or audio files. We won\'t be covering Storage in this post either.\r\n\r\n## Initializing the Database\r\n\r\nClick on the button in the "Database" card that says "Table editor." This takes us to a blank dashboard where we\'ll be able to add and edit our database tables. Click the `+ New table` button on the left and give it the name `books`. For now don\'t check the "Enable Row Level Security (RLS)." This table will need a few columns in addition to the "id" column. I\'ve listed them below.\r\n\r\n*   Column Name: `title`, Type: `varchar`\r\n*   Column Name: `author`, Type: `varchar`\r\n*   Column Name: `finished` Type: `bool`\r\n\r\nThe table might already have a \'created\\_at\' column in there by default. We won\'t need it so you can remove that one.\r\n\r\n![Add new table with the name \'books\', leave Row Level Security unchecked, and add title column with type varchar, add author column with type varchar, and add finished column with type bool.](https://res.cloudinary.com/deepgram/image/upload/v1637189398/blog/2021/11/getting-started-with-supabase/books-table-setup-2.png)\r\n\r\nSave that, and you\'ve created a table in your database. You should now be able to see it. Let\'s fill in some data now. Click the button that says "Insert Row" and fill in the data with a couple of books you like. Remember that you can only insert the type of data into columns that you specified in the table setup. For example, we couldn\'t store a string inside the "finished" column because it only accepts booleans. [Here is a link to more info on data types](https://www.postgresqltutorial.com/postgresql-data-types/).\r\n\r\nHere is what my table looked like after I inserted two rows of data.\r\n\r\n![Added two rows of data with the respective titles and authors of books. One with \'finished\' set to true and the other to false.](https://res.cloudinary.com/deepgram/image/upload/v1636396685/blog/2021/11/getting-started-with-supabase/books-table-filled.png)\r\n\r\n## Querying the Database\r\n\r\nWith the data added, we can now look at how to send [API requests](https://blog.deepgram.com/getting-started-with-apis/) to it in order to read that data.\r\n\r\nIn the left hand navigation, there is a link to the API documentation. This is auto-generated for us by Supabase and allows us to connect with our database in our code. Right now, we want to test that we can get the data we want from our `books` table. In the left hand menu, there is a section called "Tables and Views". Select the `books` table. Since we don\'t have a JavaScript app set up yet, select the "Bash" tab at the top of the right hand column above the code output. This will show us how a basic request is structured. I am going to be using Postman [(which you can get here)](https://www.postman.com/downloads/) to send these requests.\r\n\r\n### Reading data\r\n\r\nGo down to the section that says "READ ALL ROWS", where you\'ll find the `curl` request to get the information from our database.\r\n\r\nHere is what it should look like:\r\n\r\n```bash\r\ncurl \'https://swmsbxvlhkqilunwmsgs.supabase.co/rest/v1/books?select=*\' \\\r\n-H "apikey: SUPABASE_KEY" \\\r\n-H "Authorization: Bearer SUPABASE_KEY"\r\n```\r\n\r\nYou can put this info into an app like Postman, or you can copy this code and put it directly into your terminal to get the results. Note that the `SUPABASE_KEY` in the above code is just a placeholder for your own key. To get your API keys to populated into the example requests, there is a dropdown labeled "Key" up at the top of the screen. Select `anon key`.\r\n\r\nSince I\'m using Postman for these requests I\'ll first copy the URL from the `curl` line and paste it into the request URL field in Postman. For this request we\'ll keep it as a `GET` request. I\'ll then click on the "Headers" tab inside Postman and add the `apikey` and `Authorization` headers respectively. It will look something like this, with your URL and API Keys instead of mine.\r\n\r\n![Postman GET request with URL parameter specifying to select all](https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/postman-read-request.png)\r\n\r\n### Inserting data via the API\r\n\r\nNow we can send the request and the results will show the contents of our books table. But what if we want to add or update data using the API? Inside of the API page of our Supabase app there are examples of all these types of requests. Let\'s try to insert data. I\'ll find the "Insert Rows" section of the API documentation and create a new request in Postman with the required fields.\r\nThe request with the new headers you\'ll need should look something like this.\r\n\r\n![Postman POST request with just base URL and apikey, Authorization, Content-Type, and Prefer headings set as per the API documentation on Supabase](https://res.cloudinary.com/deepgram/image/upload/v1637015570/blog/2021/11/getting-started-with-supabase/postman-insert-request.png)\r\n\r\nThis request requires a body of data to be sent to the API endpoint. Add some raw JSON data to the body tab of the request like this:\r\n\r\n![Postman POST request showing the body tab of the above request. Body contains a JSON object with title and author values.](https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/insert-body-tab.png)\r\n\r\nWhen we send this, if it is successful, it will return with the item we just inserted.\r\n\r\n### Updating data\r\n\r\nA lot of times we have data in the app that needs to be changed/updated. In the API documentation this will be found under the "Update rows" section. This request is shaped a lot like the Insert request we did above. The first difference is that this is a *PATCH* request instead of a *POST* request. (Note that we use a *PATCH* to update instead of a *PUT* because *PATCH* allows us to update only specific fields, while *PUT* requires us to send the entire object with the request. We could have used *PUT* in this case, but the *PATCH* makes it more flexible in the future. [See this link](https://stackoverflow.com/a/34400076) for more details on the difference). The second difference is in the URL. At the end of the URL there is a parameter. In the example from the API documentation they have it shown as `?some_column=eq.someValue`. This is where we tell the database which row we want updated. So in our case, we can put `?id=eq.2` to update the book with the ID of `2`. Let\'s update the title to "The Graveyard Book" and the author to "Neil Gaiman."\r\n\r\n![Postman PATCH request with URL specifying which row we want updated. Also with JSON body with new title and author values](https://res.cloudinary.com/deepgram/image/upload/v1637107715/blog/2021/11/getting-started-with-supabase/update-rows-request.png)\r\n\r\n### Deleting data\r\n\r\nWe also need to be able to delete data from our table. Like before, look at the example request in the API documentation page. It is similar to the Update request above. There aren\'t as many headers needed though and we don\'t pass any data. We need to specify which row though using a parameter again and make sure you change the type of request to a *DELETE* request. Let\'s delete the same book we just updated. The request will look something like this:\r\n\r\n![Postman DELETE request specifying which row we want to be deleted](https://res.cloudinary.com/deepgram/image/upload/v1637107568/blog/2021/11/getting-started-with-supabase/delete-request.png)\r\n\r\nWhen you navigate back to the Tables page of the Supabase UI, you should only see the first book you created.\r\n\r\n## Conclusion\r\n\r\nNow you know the basics of how to set up and use a Supabase Database. This tutorial just scratched the surface of Supabase, but it should give you a solid start.\r\n\r\nBefore you start using the database in an app, you\'ll also want to add the "Row Level Security" to your tables. This is beyond the scope of this introduction to Supabase blog, but basically it makes it so only authenticated users can affect the data in the tables. You can find out more in the [Supabase documentation page](https://supabase.io/docs/guides/auth/row-level-security).\r\n\r\n        ', "html": '<p>Getting a database set up and running can be a difficult and time-consuming process. There are quite a few options these days for \u201Cquick\u201D solutions. Supabase is one of those options and is gaining popularity very quickly. Let\u2019s dive in and see what Supabase offers. We\u2019ll walk through an example of setting up a database for a Reading List app and learn how to add, read, edit, and delete data from it.</p>\n<h2 id="who-this-post-is-for">Who this post is for</h2>\n<p>This post will be easier to follow if you have a general understanding of how databases work.</p>\n<h2 id="setup">Setup</h2>\n<p>The first thing you\u2019ll need to do is sign up on <a href="https://app.supabase.io/api/login">Supabase</a>. It asks you to sign up with GitHub, so if you don\u2019t have an account, you should also sign up for one of those.</p>\n<p>Once you are signed in, you\u2019ll click the green button that says \u201CNew Project\u201D and select the default organization that was created when you logged in. Mine was called \u201Cbriancbarrow\u2019s Org.\u201D This will bring up a box where we provide some info about the project. I\u2019ll name it <code is:raw>reading-list</code>, give it a strong password, and then I\u2019m going to select the region <code is:raw>West US (North California)</code> because that is closest to me.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1636151269/blog/2021/11/getting-started-with-supabase/new-project-modal.png" alt="Setting up the project with the name reading-list and selecting the West US region."></p>\n<p>Click the \u201CCreate new project\u201D button. It will take a few minutes for the project to be ready, so sit tight until that finishes.</p>\n<p>Now that we have that set up, you should see a page with the name of the project you gave, and below that, it should say \u201CWelcome to your new project.\u201D Below that, there are a few features that we can start exploring.</p>\n<ul>\n<li><strong>Database</strong>: The Supabase Database is an instance of a Postgres Database. We\u2019ll be diving into this more below.</li>\n<li><strong>Auth</strong>: The Supabase Auth service makes it relatively easy to set up authentication for your app and also manage your users. We won\u2019t be covering Auth in this post.</li>\n<li><strong>Storage</strong>: Supabase offers a storage service for larger files like images or audio files. We won\u2019t be covering Storage in this post either.</li>\n</ul>\n<h2 id="initializing-the-database">Initializing the Database</h2>\n<p>Click on the button in the \u201CDatabase\u201D card that says \u201CTable editor.\u201D This takes us to a blank dashboard where we\u2019ll be able to add and edit our database tables. Click the <code is:raw>+ New table</code> button on the left and give it the name <code is:raw>books</code>. For now don\u2019t check the \u201CEnable Row Level Security (RLS).\u201D This table will need a few columns in addition to the \u201Cid\u201D column. I\u2019ve listed them below.</p>\n<ul>\n<li>Column Name: <code is:raw>title</code>, Type: <code is:raw>varchar</code></li>\n<li>Column Name: <code is:raw>author</code>, Type: <code is:raw>varchar</code></li>\n<li>Column Name: <code is:raw>finished</code> Type: <code is:raw>bool</code></li>\n</ul>\n<p>The table might already have a \u2018created_at\u2019 column in there by default. We won\u2019t need it so you can remove that one.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637189398/blog/2021/11/getting-started-with-supabase/books-table-setup-2.png" alt="Add new table with the name &#x27;books&#x27;, leave Row Level Security unchecked, and add title column with type varchar, add author column with type varchar, and add finished column with type bool."></p>\n<p>Save that, and you\u2019ve created a table in your database. You should now be able to see it. Let\u2019s fill in some data now. Click the button that says \u201CInsert Row\u201D and fill in the data with a couple of books you like. Remember that you can only insert the type of data into columns that you specified in the table setup. For example, we couldn\u2019t store a string inside the \u201Cfinished\u201D column because it only accepts booleans. <a href="https://www.postgresqltutorial.com/postgresql-data-types/">Here is a link to more info on data types</a>.</p>\n<p>Here is what my table looked like after I inserted two rows of data.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1636396685/blog/2021/11/getting-started-with-supabase/books-table-filled.png" alt="Added two rows of data with the respective titles and authors of books. One with &#x27;finished&#x27; set to true and the other to false."></p>\n<h2 id="querying-the-database">Querying the Database</h2>\n<p>With the data added, we can now look at how to send <a href="https://blog.deepgram.com/getting-started-with-apis/">API requests</a> to it in order to read that data.</p>\n<p>In the left hand navigation, there is a link to the API documentation. This is auto-generated for us by Supabase and allows us to connect with our database in our code. Right now, we want to test that we can get the data we want from our <code is:raw>books</code> table. In the left hand menu, there is a section called \u201CTables and Views\u201D. Select the <code is:raw>books</code> table. Since we don\u2019t have a JavaScript app set up yet, select the \u201CBash\u201D tab at the top of the right hand column above the code output. This will show us how a basic request is structured. I am going to be using Postman <a href="https://www.postman.com/downloads/">(which you can get here)</a> to send these requests.</p>\n<h3 id="reading-data">Reading data</h3>\n<p>Go down to the section that says \u201CREAD ALL ROWS\u201D, where you\u2019ll find the <code is:raw>curl</code> request to get the information from our database.</p>\n<p>Here is what it should look like:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl </span><span style="color: #A5D6FF">&#39;https://swmsbxvlhkqilunwmsgs.supabase.co/rest/v1/books?select=*&#39;</span><span style="color: #C9D1D9"> \\</span></span>\n<span class="line"><span style="color: #C9D1D9">-H </span><span style="color: #A5D6FF">&quot;apikey: SUPABASE_KEY&quot;</span><span style="color: #C9D1D9"> \\</span></span>\n<span class="line"><span style="color: #C9D1D9">-H </span><span style="color: #A5D6FF">&quot;Authorization: Bearer SUPABASE_KEY&quot;</span></span></code></pre>\n<p>You can put this info into an app like Postman, or you can copy this code and put it directly into your terminal to get the results. Note that the <code is:raw>SUPABASE_KEY</code> in the above code is just a placeholder for your own key. To get your API keys to populated into the example requests, there is a dropdown labeled \u201CKey\u201D up at the top of the screen. Select <code is:raw>anon key</code>.</p>\n<p>Since I\u2019m using Postman for these requests I\u2019ll first copy the URL from the <code is:raw>curl</code> line and paste it into the request URL field in Postman. For this request we\u2019ll keep it as a <code is:raw>GET</code> request. I\u2019ll then click on the \u201CHeaders\u201D tab inside Postman and add the <code is:raw>apikey</code> and <code is:raw>Authorization</code> headers respectively. It will look something like this, with your URL and API Keys instead of mine.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/postman-read-request.png" alt="Postman GET request with URL parameter specifying to select all"></p>\n<h3 id="inserting-data-via-the-api">Inserting data via the API</h3>\n<p>Now we can send the request and the results will show the contents of our books table. But what if we want to add or update data using the API? Inside of the API page of our Supabase app there are examples of all these types of requests. Let\u2019s try to insert data. I\u2019ll find the \u201CInsert Rows\u201D section of the API documentation and create a new request in Postman with the required fields.\r\nThe request with the new headers you\u2019ll need should look something like this.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015570/blog/2021/11/getting-started-with-supabase/postman-insert-request.png" alt="Postman POST request with just base URL and apikey, Authorization, Content-Type, and Prefer headings set as per the API documentation on Supabase"></p>\n<p>This request requires a body of data to be sent to the API endpoint. Add some raw JSON data to the body tab of the request like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/insert-body-tab.png" alt="Postman POST request showing the body tab of the above request. Body contains a JSON object with title and author values."></p>\n<p>When we send this, if it is successful, it will return with the item we just inserted.</p>\n<h3 id="updating-data">Updating data</h3>\n<p>A lot of times we have data in the app that needs to be changed/updated. In the API documentation this will be found under the \u201CUpdate rows\u201D section. This request is shaped a lot like the Insert request we did above. The first difference is that this is a <em>PATCH</em> request instead of a <em>POST</em> request. (Note that we use a <em>PATCH</em> to update instead of a <em>PUT</em> because <em>PATCH</em> allows us to update only specific fields, while <em>PUT</em> requires us to send the entire object with the request. We could have used <em>PUT</em> in this case, but the <em>PATCH</em> makes it more flexible in the future. <a href="https://stackoverflow.com/a/34400076">See this link</a> for more details on the difference). The second difference is in the URL. At the end of the URL there is a parameter. In the example from the API documentation they have it shown as <code is:raw>?some_column=eq.someValue</code>. This is where we tell the database which row we want updated. So in our case, we can put <code is:raw>?id=eq.2</code> to update the book with the ID of <code is:raw>2</code>. Let\u2019s update the title to \u201CThe Graveyard Book\u201D and the author to \u201CNeil Gaiman.\u201D</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637107715/blog/2021/11/getting-started-with-supabase/update-rows-request.png" alt="Postman PATCH request with URL specifying which row we want updated. Also with JSON body with new title and author values"></p>\n<h3 id="deleting-data">Deleting data</h3>\n<p>We also need to be able to delete data from our table. Like before, look at the example request in the API documentation page. It is similar to the Update request above. There aren\u2019t as many headers needed though and we don\u2019t pass any data. We need to specify which row though using a parameter again and make sure you change the type of request to a <em>DELETE</em> request. Let\u2019s delete the same book we just updated. The request will look something like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637107568/blog/2021/11/getting-started-with-supabase/delete-request.png" alt="Postman DELETE request specifying which row we want to be deleted"></p>\n<p>When you navigate back to the Tables page of the Supabase UI, you should only see the first book you created.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>Now you know the basics of how to set up and use a Supabase Database. This tutorial just scratched the surface of Supabase, but it should give you a solid start.</p>\n<p>Before you start using the database in an app, you\u2019ll also want to add the \u201CRow Level Security\u201D to your tables. This is beyond the scope of this introduction to Supabase blog, but basically it makes it so only authenticated users can affect the data in the tables. You can find out more in the <a href="https://supabase.io/docs/guides/auth/row-level-security">Supabase documentation page</a>.</p>' };
const frontmatter = { "title": "Getting Started with Supabase", "description": "Learn how to get started with Supabase, an open-source alternative to Firebase", "date": "2021-11-29T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1637609423/blog/2021/11/getting-started-with-supabase/Getting-Started-with-supabase-blog%402x.jpg", "authors": ["brian-barrow"], "category": "tutorial", "tags": ["supabase", "javascript"], "seo": { "title": "Getting Started with Supabase", "description": "Learn how to get started with Supabase, an open-source alternative to Firebase" }, "shorturls": { "share": "https://dpgr.am/89c7e8e", "twitter": "https://dpgr.am/019c5c1", "linkedin": "https://dpgr.am/96ed603", "reddit": "https://dpgr.am/dfd7669", "facebook": "https://dpgr.am/1b79cea" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453807/blog/getting-started-with-supabase/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "who-this-post-is-for", "text": "Who this post is for" }, { "depth": 2, "slug": "setup", "text": "Setup" }, { "depth": 2, "slug": "initializing-the-database", "text": "Initializing the Database" }, { "depth": 2, "slug": "querying-the-database", "text": "Querying the Database" }, { "depth": 3, "slug": "reading-data", "text": "Reading data" }, { "depth": 3, "slug": "inserting-data-via-the-api", "text": "Inserting data via the API" }, { "depth": 3, "slug": "updating-data", "text": "Updating data" }, { "depth": 3, "slug": "deleting-data", "text": "Deleting data" }, { "depth": 2, "slug": "conclusion", "text": "Conclusion" }], "source": '\r\nGetting a database set up and running can be a difficult and time-consuming process. There are quite a few options these days for "quick" solutions. Supabase is one of those options and is gaining popularity very quickly. Let\'s dive in and see what Supabase offers. We\'ll walk through an example of setting up a database for a Reading List app and learn how to add, read, edit, and delete data from it.\r\n\r\n## Who this post is for\r\n\r\nThis post will be easier to follow if you have a general understanding of how databases work.\r\n\r\n## Setup\r\n\r\nThe first thing you\'ll need to do is sign up on [Supabase](https://app.supabase.io/api/login). It asks you to sign up with GitHub, so if you don\'t have an account, you should also sign up for one of those.\r\n\r\nOnce you are signed in, you\'ll click the green button that says "New Project" and select the default organization that was created when you logged in. Mine was called "briancbarrow\'s Org." This will bring up a box where we provide some info about the project. I\'ll name it `reading-list`, give it a strong password, and then I\'m going to select the region `West US (North California)` because that is closest to me.\r\n\r\n![Setting up the project with the name reading-list and selecting the West US region.](https://res.cloudinary.com/deepgram/image/upload/v1636151269/blog/2021/11/getting-started-with-supabase/new-project-modal.png)\r\n\r\nClick the "Create new project" button. It will take a few minutes for the project to be ready, so sit tight until that finishes.\r\n\r\nNow that we have that set up, you should see a page with the name of the project you gave, and below that, it should say "Welcome to your new project." Below that, there are a few features that we can start exploring.\r\n\r\n*   **Database**: The Supabase Database is an instance of a Postgres Database. We\'ll be diving into this more below.\r\n*   **Auth**: The Supabase Auth service makes it relatively easy to set up authentication for your app and also manage your users. We won\'t be covering Auth in this post.\r\n*   **Storage**: Supabase offers a storage service for larger files like images or audio files. We won\'t be covering Storage in this post either.\r\n\r\n## Initializing the Database\r\n\r\nClick on the button in the "Database" card that says "Table editor." This takes us to a blank dashboard where we\'ll be able to add and edit our database tables. Click the `+ New table` button on the left and give it the name `books`. For now don\'t check the "Enable Row Level Security (RLS)." This table will need a few columns in addition to the "id" column. I\'ve listed them below.\r\n\r\n*   Column Name: `title`, Type: `varchar`\r\n*   Column Name: `author`, Type: `varchar`\r\n*   Column Name: `finished` Type: `bool`\r\n\r\nThe table might already have a \'created\\_at\' column in there by default. We won\'t need it so you can remove that one.\r\n\r\n![Add new table with the name \'books\', leave Row Level Security unchecked, and add title column with type varchar, add author column with type varchar, and add finished column with type bool.](https://res.cloudinary.com/deepgram/image/upload/v1637189398/blog/2021/11/getting-started-with-supabase/books-table-setup-2.png)\r\n\r\nSave that, and you\'ve created a table in your database. You should now be able to see it. Let\'s fill in some data now. Click the button that says "Insert Row" and fill in the data with a couple of books you like. Remember that you can only insert the type of data into columns that you specified in the table setup. For example, we couldn\'t store a string inside the "finished" column because it only accepts booleans. [Here is a link to more info on data types](https://www.postgresqltutorial.com/postgresql-data-types/).\r\n\r\nHere is what my table looked like after I inserted two rows of data.\r\n\r\n![Added two rows of data with the respective titles and authors of books. One with \'finished\' set to true and the other to false.](https://res.cloudinary.com/deepgram/image/upload/v1636396685/blog/2021/11/getting-started-with-supabase/books-table-filled.png)\r\n\r\n## Querying the Database\r\n\r\nWith the data added, we can now look at how to send [API requests](https://blog.deepgram.com/getting-started-with-apis/) to it in order to read that data.\r\n\r\nIn the left hand navigation, there is a link to the API documentation. This is auto-generated for us by Supabase and allows us to connect with our database in our code. Right now, we want to test that we can get the data we want from our `books` table. In the left hand menu, there is a section called "Tables and Views". Select the `books` table. Since we don\'t have a JavaScript app set up yet, select the "Bash" tab at the top of the right hand column above the code output. This will show us how a basic request is structured. I am going to be using Postman [(which you can get here)](https://www.postman.com/downloads/) to send these requests.\r\n\r\n### Reading data\r\n\r\nGo down to the section that says "READ ALL ROWS", where you\'ll find the `curl` request to get the information from our database.\r\n\r\nHere is what it should look like:\r\n\r\n```bash\r\ncurl \'https://swmsbxvlhkqilunwmsgs.supabase.co/rest/v1/books?select=*\' \\\r\n-H "apikey: SUPABASE_KEY" \\\r\n-H "Authorization: Bearer SUPABASE_KEY"\r\n```\r\n\r\nYou can put this info into an app like Postman, or you can copy this code and put it directly into your terminal to get the results. Note that the `SUPABASE_KEY` in the above code is just a placeholder for your own key. To get your API keys to populated into the example requests, there is a dropdown labeled "Key" up at the top of the screen. Select `anon key`.\r\n\r\nSince I\'m using Postman for these requests I\'ll first copy the URL from the `curl` line and paste it into the request URL field in Postman. For this request we\'ll keep it as a `GET` request. I\'ll then click on the "Headers" tab inside Postman and add the `apikey` and `Authorization` headers respectively. It will look something like this, with your URL and API Keys instead of mine.\r\n\r\n![Postman GET request with URL parameter specifying to select all](https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/postman-read-request.png)\r\n\r\n### Inserting data via the API\r\n\r\nNow we can send the request and the results will show the contents of our books table. But what if we want to add or update data using the API? Inside of the API page of our Supabase app there are examples of all these types of requests. Let\'s try to insert data. I\'ll find the "Insert Rows" section of the API documentation and create a new request in Postman with the required fields.\r\nThe request with the new headers you\'ll need should look something like this.\r\n\r\n![Postman POST request with just base URL and apikey, Authorization, Content-Type, and Prefer headings set as per the API documentation on Supabase](https://res.cloudinary.com/deepgram/image/upload/v1637015570/blog/2021/11/getting-started-with-supabase/postman-insert-request.png)\r\n\r\nThis request requires a body of data to be sent to the API endpoint. Add some raw JSON data to the body tab of the request like this:\r\n\r\n![Postman POST request showing the body tab of the above request. Body contains a JSON object with title and author values.](https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/insert-body-tab.png)\r\n\r\nWhen we send this, if it is successful, it will return with the item we just inserted.\r\n\r\n### Updating data\r\n\r\nA lot of times we have data in the app that needs to be changed/updated. In the API documentation this will be found under the "Update rows" section. This request is shaped a lot like the Insert request we did above. The first difference is that this is a *PATCH* request instead of a *POST* request. (Note that we use a *PATCH* to update instead of a *PUT* because *PATCH* allows us to update only specific fields, while *PUT* requires us to send the entire object with the request. We could have used *PUT* in this case, but the *PATCH* makes it more flexible in the future. [See this link](https://stackoverflow.com/a/34400076) for more details on the difference). The second difference is in the URL. At the end of the URL there is a parameter. In the example from the API documentation they have it shown as `?some_column=eq.someValue`. This is where we tell the database which row we want updated. So in our case, we can put `?id=eq.2` to update the book with the ID of `2`. Let\'s update the title to "The Graveyard Book" and the author to "Neil Gaiman."\r\n\r\n![Postman PATCH request with URL specifying which row we want updated. Also with JSON body with new title and author values](https://res.cloudinary.com/deepgram/image/upload/v1637107715/blog/2021/11/getting-started-with-supabase/update-rows-request.png)\r\n\r\n### Deleting data\r\n\r\nWe also need to be able to delete data from our table. Like before, look at the example request in the API documentation page. It is similar to the Update request above. There aren\'t as many headers needed though and we don\'t pass any data. We need to specify which row though using a parameter again and make sure you change the type of request to a *DELETE* request. Let\'s delete the same book we just updated. The request will look something like this:\r\n\r\n![Postman DELETE request specifying which row we want to be deleted](https://res.cloudinary.com/deepgram/image/upload/v1637107568/blog/2021/11/getting-started-with-supabase/delete-request.png)\r\n\r\nWhen you navigate back to the Tables page of the Supabase UI, you should only see the first book you created.\r\n\r\n## Conclusion\r\n\r\nNow you know the basics of how to set up and use a Supabase Database. This tutorial just scratched the surface of Supabase, but it should give you a solid start.\r\n\r\nBefore you start using the database in an app, you\'ll also want to add the "Row Level Security" to your tables. This is beyond the scope of this introduction to Supabase blog, but basically it makes it so only authenticated users can affect the data in the tables. You can find out more in the [Supabase documentation page](https://supabase.io/docs/guides/auth/row-level-security).\r\n\r\n        ', "html": '<p>Getting a database set up and running can be a difficult and time-consuming process. There are quite a few options these days for \u201Cquick\u201D solutions. Supabase is one of those options and is gaining popularity very quickly. Let\u2019s dive in and see what Supabase offers. We\u2019ll walk through an example of setting up a database for a Reading List app and learn how to add, read, edit, and delete data from it.</p>\n<h2 id="who-this-post-is-for">Who this post is for</h2>\n<p>This post will be easier to follow if you have a general understanding of how databases work.</p>\n<h2 id="setup">Setup</h2>\n<p>The first thing you\u2019ll need to do is sign up on <a href="https://app.supabase.io/api/login">Supabase</a>. It asks you to sign up with GitHub, so if you don\u2019t have an account, you should also sign up for one of those.</p>\n<p>Once you are signed in, you\u2019ll click the green button that says \u201CNew Project\u201D and select the default organization that was created when you logged in. Mine was called \u201Cbriancbarrow\u2019s Org.\u201D This will bring up a box where we provide some info about the project. I\u2019ll name it <code is:raw>reading-list</code>, give it a strong password, and then I\u2019m going to select the region <code is:raw>West US (North California)</code> because that is closest to me.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1636151269/blog/2021/11/getting-started-with-supabase/new-project-modal.png" alt="Setting up the project with the name reading-list and selecting the West US region."></p>\n<p>Click the \u201CCreate new project\u201D button. It will take a few minutes for the project to be ready, so sit tight until that finishes.</p>\n<p>Now that we have that set up, you should see a page with the name of the project you gave, and below that, it should say \u201CWelcome to your new project.\u201D Below that, there are a few features that we can start exploring.</p>\n<ul>\n<li><strong>Database</strong>: The Supabase Database is an instance of a Postgres Database. We\u2019ll be diving into this more below.</li>\n<li><strong>Auth</strong>: The Supabase Auth service makes it relatively easy to set up authentication for your app and also manage your users. We won\u2019t be covering Auth in this post.</li>\n<li><strong>Storage</strong>: Supabase offers a storage service for larger files like images or audio files. We won\u2019t be covering Storage in this post either.</li>\n</ul>\n<h2 id="initializing-the-database">Initializing the Database</h2>\n<p>Click on the button in the \u201CDatabase\u201D card that says \u201CTable editor.\u201D This takes us to a blank dashboard where we\u2019ll be able to add and edit our database tables. Click the <code is:raw>+ New table</code> button on the left and give it the name <code is:raw>books</code>. For now don\u2019t check the \u201CEnable Row Level Security (RLS).\u201D This table will need a few columns in addition to the \u201Cid\u201D column. I\u2019ve listed them below.</p>\n<ul>\n<li>Column Name: <code is:raw>title</code>, Type: <code is:raw>varchar</code></li>\n<li>Column Name: <code is:raw>author</code>, Type: <code is:raw>varchar</code></li>\n<li>Column Name: <code is:raw>finished</code> Type: <code is:raw>bool</code></li>\n</ul>\n<p>The table might already have a \u2018created_at\u2019 column in there by default. We won\u2019t need it so you can remove that one.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637189398/blog/2021/11/getting-started-with-supabase/books-table-setup-2.png" alt="Add new table with the name &#x27;books&#x27;, leave Row Level Security unchecked, and add title column with type varchar, add author column with type varchar, and add finished column with type bool."></p>\n<p>Save that, and you\u2019ve created a table in your database. You should now be able to see it. Let\u2019s fill in some data now. Click the button that says \u201CInsert Row\u201D and fill in the data with a couple of books you like. Remember that you can only insert the type of data into columns that you specified in the table setup. For example, we couldn\u2019t store a string inside the \u201Cfinished\u201D column because it only accepts booleans. <a href="https://www.postgresqltutorial.com/postgresql-data-types/">Here is a link to more info on data types</a>.</p>\n<p>Here is what my table looked like after I inserted two rows of data.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1636396685/blog/2021/11/getting-started-with-supabase/books-table-filled.png" alt="Added two rows of data with the respective titles and authors of books. One with &#x27;finished&#x27; set to true and the other to false."></p>\n<h2 id="querying-the-database">Querying the Database</h2>\n<p>With the data added, we can now look at how to send <a href="https://blog.deepgram.com/getting-started-with-apis/">API requests</a> to it in order to read that data.</p>\n<p>In the left hand navigation, there is a link to the API documentation. This is auto-generated for us by Supabase and allows us to connect with our database in our code. Right now, we want to test that we can get the data we want from our <code is:raw>books</code> table. In the left hand menu, there is a section called \u201CTables and Views\u201D. Select the <code is:raw>books</code> table. Since we don\u2019t have a JavaScript app set up yet, select the \u201CBash\u201D tab at the top of the right hand column above the code output. This will show us how a basic request is structured. I am going to be using Postman <a href="https://www.postman.com/downloads/">(which you can get here)</a> to send these requests.</p>\n<h3 id="reading-data">Reading data</h3>\n<p>Go down to the section that says \u201CREAD ALL ROWS\u201D, where you\u2019ll find the <code is:raw>curl</code> request to get the information from our database.</p>\n<p>Here is what it should look like:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl </span><span style="color: #A5D6FF">&#39;https://swmsbxvlhkqilunwmsgs.supabase.co/rest/v1/books?select=*&#39;</span><span style="color: #C9D1D9"> \\</span></span>\n<span class="line"><span style="color: #C9D1D9">-H </span><span style="color: #A5D6FF">&quot;apikey: SUPABASE_KEY&quot;</span><span style="color: #C9D1D9"> \\</span></span>\n<span class="line"><span style="color: #C9D1D9">-H </span><span style="color: #A5D6FF">&quot;Authorization: Bearer SUPABASE_KEY&quot;</span></span></code></pre>\n<p>You can put this info into an app like Postman, or you can copy this code and put it directly into your terminal to get the results. Note that the <code is:raw>SUPABASE_KEY</code> in the above code is just a placeholder for your own key. To get your API keys to populated into the example requests, there is a dropdown labeled \u201CKey\u201D up at the top of the screen. Select <code is:raw>anon key</code>.</p>\n<p>Since I\u2019m using Postman for these requests I\u2019ll first copy the URL from the <code is:raw>curl</code> line and paste it into the request URL field in Postman. For this request we\u2019ll keep it as a <code is:raw>GET</code> request. I\u2019ll then click on the \u201CHeaders\u201D tab inside Postman and add the <code is:raw>apikey</code> and <code is:raw>Authorization</code> headers respectively. It will look something like this, with your URL and API Keys instead of mine.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/postman-read-request.png" alt="Postman GET request with URL parameter specifying to select all"></p>\n<h3 id="inserting-data-via-the-api">Inserting data via the API</h3>\n<p>Now we can send the request and the results will show the contents of our books table. But what if we want to add or update data using the API? Inside of the API page of our Supabase app there are examples of all these types of requests. Let\u2019s try to insert data. I\u2019ll find the \u201CInsert Rows\u201D section of the API documentation and create a new request in Postman with the required fields.\r\nThe request with the new headers you\u2019ll need should look something like this.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015570/blog/2021/11/getting-started-with-supabase/postman-insert-request.png" alt="Postman POST request with just base URL and apikey, Authorization, Content-Type, and Prefer headings set as per the API documentation on Supabase"></p>\n<p>This request requires a body of data to be sent to the API endpoint. Add some raw JSON data to the body tab of the request like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/insert-body-tab.png" alt="Postman POST request showing the body tab of the above request. Body contains a JSON object with title and author values."></p>\n<p>When we send this, if it is successful, it will return with the item we just inserted.</p>\n<h3 id="updating-data">Updating data</h3>\n<p>A lot of times we have data in the app that needs to be changed/updated. In the API documentation this will be found under the \u201CUpdate rows\u201D section. This request is shaped a lot like the Insert request we did above. The first difference is that this is a <em>PATCH</em> request instead of a <em>POST</em> request. (Note that we use a <em>PATCH</em> to update instead of a <em>PUT</em> because <em>PATCH</em> allows us to update only specific fields, while <em>PUT</em> requires us to send the entire object with the request. We could have used <em>PUT</em> in this case, but the <em>PATCH</em> makes it more flexible in the future. <a href="https://stackoverflow.com/a/34400076">See this link</a> for more details on the difference). The second difference is in the URL. At the end of the URL there is a parameter. In the example from the API documentation they have it shown as <code is:raw>?some_column=eq.someValue</code>. This is where we tell the database which row we want updated. So in our case, we can put <code is:raw>?id=eq.2</code> to update the book with the ID of <code is:raw>2</code>. Let\u2019s update the title to \u201CThe Graveyard Book\u201D and the author to \u201CNeil Gaiman.\u201D</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637107715/blog/2021/11/getting-started-with-supabase/update-rows-request.png" alt="Postman PATCH request with URL specifying which row we want updated. Also with JSON body with new title and author values"></p>\n<h3 id="deleting-data">Deleting data</h3>\n<p>We also need to be able to delete data from our table. Like before, look at the example request in the API documentation page. It is similar to the Update request above. There aren\u2019t as many headers needed though and we don\u2019t pass any data. We need to specify which row though using a parameter again and make sure you change the type of request to a <em>DELETE</em> request. Let\u2019s delete the same book we just updated. The request will look something like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637107568/blog/2021/11/getting-started-with-supabase/delete-request.png" alt="Postman DELETE request specifying which row we want to be deleted"></p>\n<p>When you navigate back to the Tables page of the Supabase UI, you should only see the first book you created.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>Now you know the basics of how to set up and use a Supabase Database. This tutorial just scratched the surface of Supabase, but it should give you a solid start.</p>\n<p>Before you start using the database in an app, you\u2019ll also want to add the \u201CRow Level Security\u201D to your tables. This is beyond the scope of this introduction to Supabase blog, but basically it makes it so only authenticated users can affect the data in the tables. You can find out more in the <a href="https://supabase.io/docs/guides/auth/row-level-security">Supabase documentation page</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/getting-started-with-supabase/index.md" };
function rawContent() {
  return '\r\nGetting a database set up and running can be a difficult and time-consuming process. There are quite a few options these days for "quick" solutions. Supabase is one of those options and is gaining popularity very quickly. Let\'s dive in and see what Supabase offers. We\'ll walk through an example of setting up a database for a Reading List app and learn how to add, read, edit, and delete data from it.\r\n\r\n## Who this post is for\r\n\r\nThis post will be easier to follow if you have a general understanding of how databases work.\r\n\r\n## Setup\r\n\r\nThe first thing you\'ll need to do is sign up on [Supabase](https://app.supabase.io/api/login). It asks you to sign up with GitHub, so if you don\'t have an account, you should also sign up for one of those.\r\n\r\nOnce you are signed in, you\'ll click the green button that says "New Project" and select the default organization that was created when you logged in. Mine was called "briancbarrow\'s Org." This will bring up a box where we provide some info about the project. I\'ll name it `reading-list`, give it a strong password, and then I\'m going to select the region `West US (North California)` because that is closest to me.\r\n\r\n![Setting up the project with the name reading-list and selecting the West US region.](https://res.cloudinary.com/deepgram/image/upload/v1636151269/blog/2021/11/getting-started-with-supabase/new-project-modal.png)\r\n\r\nClick the "Create new project" button. It will take a few minutes for the project to be ready, so sit tight until that finishes.\r\n\r\nNow that we have that set up, you should see a page with the name of the project you gave, and below that, it should say "Welcome to your new project." Below that, there are a few features that we can start exploring.\r\n\r\n*   **Database**: The Supabase Database is an instance of a Postgres Database. We\'ll be diving into this more below.\r\n*   **Auth**: The Supabase Auth service makes it relatively easy to set up authentication for your app and also manage your users. We won\'t be covering Auth in this post.\r\n*   **Storage**: Supabase offers a storage service for larger files like images or audio files. We won\'t be covering Storage in this post either.\r\n\r\n## Initializing the Database\r\n\r\nClick on the button in the "Database" card that says "Table editor." This takes us to a blank dashboard where we\'ll be able to add and edit our database tables. Click the `+ New table` button on the left and give it the name `books`. For now don\'t check the "Enable Row Level Security (RLS)." This table will need a few columns in addition to the "id" column. I\'ve listed them below.\r\n\r\n*   Column Name: `title`, Type: `varchar`\r\n*   Column Name: `author`, Type: `varchar`\r\n*   Column Name: `finished` Type: `bool`\r\n\r\nThe table might already have a \'created\\_at\' column in there by default. We won\'t need it so you can remove that one.\r\n\r\n![Add new table with the name \'books\', leave Row Level Security unchecked, and add title column with type varchar, add author column with type varchar, and add finished column with type bool.](https://res.cloudinary.com/deepgram/image/upload/v1637189398/blog/2021/11/getting-started-with-supabase/books-table-setup-2.png)\r\n\r\nSave that, and you\'ve created a table in your database. You should now be able to see it. Let\'s fill in some data now. Click the button that says "Insert Row" and fill in the data with a couple of books you like. Remember that you can only insert the type of data into columns that you specified in the table setup. For example, we couldn\'t store a string inside the "finished" column because it only accepts booleans. [Here is a link to more info on data types](https://www.postgresqltutorial.com/postgresql-data-types/).\r\n\r\nHere is what my table looked like after I inserted two rows of data.\r\n\r\n![Added two rows of data with the respective titles and authors of books. One with \'finished\' set to true and the other to false.](https://res.cloudinary.com/deepgram/image/upload/v1636396685/blog/2021/11/getting-started-with-supabase/books-table-filled.png)\r\n\r\n## Querying the Database\r\n\r\nWith the data added, we can now look at how to send [API requests](https://blog.deepgram.com/getting-started-with-apis/) to it in order to read that data.\r\n\r\nIn the left hand navigation, there is a link to the API documentation. This is auto-generated for us by Supabase and allows us to connect with our database in our code. Right now, we want to test that we can get the data we want from our `books` table. In the left hand menu, there is a section called "Tables and Views". Select the `books` table. Since we don\'t have a JavaScript app set up yet, select the "Bash" tab at the top of the right hand column above the code output. This will show us how a basic request is structured. I am going to be using Postman [(which you can get here)](https://www.postman.com/downloads/) to send these requests.\r\n\r\n### Reading data\r\n\r\nGo down to the section that says "READ ALL ROWS", where you\'ll find the `curl` request to get the information from our database.\r\n\r\nHere is what it should look like:\r\n\r\n```bash\r\ncurl \'https://swmsbxvlhkqilunwmsgs.supabase.co/rest/v1/books?select=*\' \\\r\n-H "apikey: SUPABASE_KEY" \\\r\n-H "Authorization: Bearer SUPABASE_KEY"\r\n```\r\n\r\nYou can put this info into an app like Postman, or you can copy this code and put it directly into your terminal to get the results. Note that the `SUPABASE_KEY` in the above code is just a placeholder for your own key. To get your API keys to populated into the example requests, there is a dropdown labeled "Key" up at the top of the screen. Select `anon key`.\r\n\r\nSince I\'m using Postman for these requests I\'ll first copy the URL from the `curl` line and paste it into the request URL field in Postman. For this request we\'ll keep it as a `GET` request. I\'ll then click on the "Headers" tab inside Postman and add the `apikey` and `Authorization` headers respectively. It will look something like this, with your URL and API Keys instead of mine.\r\n\r\n![Postman GET request with URL parameter specifying to select all](https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/postman-read-request.png)\r\n\r\n### Inserting data via the API\r\n\r\nNow we can send the request and the results will show the contents of our books table. But what if we want to add or update data using the API? Inside of the API page of our Supabase app there are examples of all these types of requests. Let\'s try to insert data. I\'ll find the "Insert Rows" section of the API documentation and create a new request in Postman with the required fields.\r\nThe request with the new headers you\'ll need should look something like this.\r\n\r\n![Postman POST request with just base URL and apikey, Authorization, Content-Type, and Prefer headings set as per the API documentation on Supabase](https://res.cloudinary.com/deepgram/image/upload/v1637015570/blog/2021/11/getting-started-with-supabase/postman-insert-request.png)\r\n\r\nThis request requires a body of data to be sent to the API endpoint. Add some raw JSON data to the body tab of the request like this:\r\n\r\n![Postman POST request showing the body tab of the above request. Body contains a JSON object with title and author values.](https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/insert-body-tab.png)\r\n\r\nWhen we send this, if it is successful, it will return with the item we just inserted.\r\n\r\n### Updating data\r\n\r\nA lot of times we have data in the app that needs to be changed/updated. In the API documentation this will be found under the "Update rows" section. This request is shaped a lot like the Insert request we did above. The first difference is that this is a *PATCH* request instead of a *POST* request. (Note that we use a *PATCH* to update instead of a *PUT* because *PATCH* allows us to update only specific fields, while *PUT* requires us to send the entire object with the request. We could have used *PUT* in this case, but the *PATCH* makes it more flexible in the future. [See this link](https://stackoverflow.com/a/34400076) for more details on the difference). The second difference is in the URL. At the end of the URL there is a parameter. In the example from the API documentation they have it shown as `?some_column=eq.someValue`. This is where we tell the database which row we want updated. So in our case, we can put `?id=eq.2` to update the book with the ID of `2`. Let\'s update the title to "The Graveyard Book" and the author to "Neil Gaiman."\r\n\r\n![Postman PATCH request with URL specifying which row we want updated. Also with JSON body with new title and author values](https://res.cloudinary.com/deepgram/image/upload/v1637107715/blog/2021/11/getting-started-with-supabase/update-rows-request.png)\r\n\r\n### Deleting data\r\n\r\nWe also need to be able to delete data from our table. Like before, look at the example request in the API documentation page. It is similar to the Update request above. There aren\'t as many headers needed though and we don\'t pass any data. We need to specify which row though using a parameter again and make sure you change the type of request to a *DELETE* request. Let\'s delete the same book we just updated. The request will look something like this:\r\n\r\n![Postman DELETE request specifying which row we want to be deleted](https://res.cloudinary.com/deepgram/image/upload/v1637107568/blog/2021/11/getting-started-with-supabase/delete-request.png)\r\n\r\nWhen you navigate back to the Tables page of the Supabase UI, you should only see the first book you created.\r\n\r\n## Conclusion\r\n\r\nNow you know the basics of how to set up and use a Supabase Database. This tutorial just scratched the surface of Supabase, but it should give you a solid start.\r\n\r\nBefore you start using the database in an app, you\'ll also want to add the "Row Level Security" to your tables. This is beyond the scope of this introduction to Supabase blog, but basically it makes it so only authenticated users can affect the data in the tables. You can find out more in the [Supabase documentation page](https://supabase.io/docs/guides/auth/row-level-security).\r\n\r\n        ';
}
function compiledContent() {
  return '<p>Getting a database set up and running can be a difficult and time-consuming process. There are quite a few options these days for \u201Cquick\u201D solutions. Supabase is one of those options and is gaining popularity very quickly. Let\u2019s dive in and see what Supabase offers. We\u2019ll walk through an example of setting up a database for a Reading List app and learn how to add, read, edit, and delete data from it.</p>\n<h2 id="who-this-post-is-for">Who this post is for</h2>\n<p>This post will be easier to follow if you have a general understanding of how databases work.</p>\n<h2 id="setup">Setup</h2>\n<p>The first thing you\u2019ll need to do is sign up on <a href="https://app.supabase.io/api/login">Supabase</a>. It asks you to sign up with GitHub, so if you don\u2019t have an account, you should also sign up for one of those.</p>\n<p>Once you are signed in, you\u2019ll click the green button that says \u201CNew Project\u201D and select the default organization that was created when you logged in. Mine was called \u201Cbriancbarrow\u2019s Org.\u201D This will bring up a box where we provide some info about the project. I\u2019ll name it <code is:raw>reading-list</code>, give it a strong password, and then I\u2019m going to select the region <code is:raw>West US (North California)</code> because that is closest to me.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1636151269/blog/2021/11/getting-started-with-supabase/new-project-modal.png" alt="Setting up the project with the name reading-list and selecting the West US region."></p>\n<p>Click the \u201CCreate new project\u201D button. It will take a few minutes for the project to be ready, so sit tight until that finishes.</p>\n<p>Now that we have that set up, you should see a page with the name of the project you gave, and below that, it should say \u201CWelcome to your new project.\u201D Below that, there are a few features that we can start exploring.</p>\n<ul>\n<li><strong>Database</strong>: The Supabase Database is an instance of a Postgres Database. We\u2019ll be diving into this more below.</li>\n<li><strong>Auth</strong>: The Supabase Auth service makes it relatively easy to set up authentication for your app and also manage your users. We won\u2019t be covering Auth in this post.</li>\n<li><strong>Storage</strong>: Supabase offers a storage service for larger files like images or audio files. We won\u2019t be covering Storage in this post either.</li>\n</ul>\n<h2 id="initializing-the-database">Initializing the Database</h2>\n<p>Click on the button in the \u201CDatabase\u201D card that says \u201CTable editor.\u201D This takes us to a blank dashboard where we\u2019ll be able to add and edit our database tables. Click the <code is:raw>+ New table</code> button on the left and give it the name <code is:raw>books</code>. For now don\u2019t check the \u201CEnable Row Level Security (RLS).\u201D This table will need a few columns in addition to the \u201Cid\u201D column. I\u2019ve listed them below.</p>\n<ul>\n<li>Column Name: <code is:raw>title</code>, Type: <code is:raw>varchar</code></li>\n<li>Column Name: <code is:raw>author</code>, Type: <code is:raw>varchar</code></li>\n<li>Column Name: <code is:raw>finished</code> Type: <code is:raw>bool</code></li>\n</ul>\n<p>The table might already have a \u2018created_at\u2019 column in there by default. We won\u2019t need it so you can remove that one.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637189398/blog/2021/11/getting-started-with-supabase/books-table-setup-2.png" alt="Add new table with the name &#x27;books&#x27;, leave Row Level Security unchecked, and add title column with type varchar, add author column with type varchar, and add finished column with type bool."></p>\n<p>Save that, and you\u2019ve created a table in your database. You should now be able to see it. Let\u2019s fill in some data now. Click the button that says \u201CInsert Row\u201D and fill in the data with a couple of books you like. Remember that you can only insert the type of data into columns that you specified in the table setup. For example, we couldn\u2019t store a string inside the \u201Cfinished\u201D column because it only accepts booleans. <a href="https://www.postgresqltutorial.com/postgresql-data-types/">Here is a link to more info on data types</a>.</p>\n<p>Here is what my table looked like after I inserted two rows of data.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1636396685/blog/2021/11/getting-started-with-supabase/books-table-filled.png" alt="Added two rows of data with the respective titles and authors of books. One with &#x27;finished&#x27; set to true and the other to false."></p>\n<h2 id="querying-the-database">Querying the Database</h2>\n<p>With the data added, we can now look at how to send <a href="https://blog.deepgram.com/getting-started-with-apis/">API requests</a> to it in order to read that data.</p>\n<p>In the left hand navigation, there is a link to the API documentation. This is auto-generated for us by Supabase and allows us to connect with our database in our code. Right now, we want to test that we can get the data we want from our <code is:raw>books</code> table. In the left hand menu, there is a section called \u201CTables and Views\u201D. Select the <code is:raw>books</code> table. Since we don\u2019t have a JavaScript app set up yet, select the \u201CBash\u201D tab at the top of the right hand column above the code output. This will show us how a basic request is structured. I am going to be using Postman <a href="https://www.postman.com/downloads/">(which you can get here)</a> to send these requests.</p>\n<h3 id="reading-data">Reading data</h3>\n<p>Go down to the section that says \u201CREAD ALL ROWS\u201D, where you\u2019ll find the <code is:raw>curl</code> request to get the information from our database.</p>\n<p>Here is what it should look like:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl </span><span style="color: #A5D6FF">&#39;https://swmsbxvlhkqilunwmsgs.supabase.co/rest/v1/books?select=*&#39;</span><span style="color: #C9D1D9"> \\</span></span>\n<span class="line"><span style="color: #C9D1D9">-H </span><span style="color: #A5D6FF">&quot;apikey: SUPABASE_KEY&quot;</span><span style="color: #C9D1D9"> \\</span></span>\n<span class="line"><span style="color: #C9D1D9">-H </span><span style="color: #A5D6FF">&quot;Authorization: Bearer SUPABASE_KEY&quot;</span></span></code></pre>\n<p>You can put this info into an app like Postman, or you can copy this code and put it directly into your terminal to get the results. Note that the <code is:raw>SUPABASE_KEY</code> in the above code is just a placeholder for your own key. To get your API keys to populated into the example requests, there is a dropdown labeled \u201CKey\u201D up at the top of the screen. Select <code is:raw>anon key</code>.</p>\n<p>Since I\u2019m using Postman for these requests I\u2019ll first copy the URL from the <code is:raw>curl</code> line and paste it into the request URL field in Postman. For this request we\u2019ll keep it as a <code is:raw>GET</code> request. I\u2019ll then click on the \u201CHeaders\u201D tab inside Postman and add the <code is:raw>apikey</code> and <code is:raw>Authorization</code> headers respectively. It will look something like this, with your URL and API Keys instead of mine.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/postman-read-request.png" alt="Postman GET request with URL parameter specifying to select all"></p>\n<h3 id="inserting-data-via-the-api">Inserting data via the API</h3>\n<p>Now we can send the request and the results will show the contents of our books table. But what if we want to add or update data using the API? Inside of the API page of our Supabase app there are examples of all these types of requests. Let\u2019s try to insert data. I\u2019ll find the \u201CInsert Rows\u201D section of the API documentation and create a new request in Postman with the required fields.\r\nThe request with the new headers you\u2019ll need should look something like this.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015570/blog/2021/11/getting-started-with-supabase/postman-insert-request.png" alt="Postman POST request with just base URL and apikey, Authorization, Content-Type, and Prefer headings set as per the API documentation on Supabase"></p>\n<p>This request requires a body of data to be sent to the API endpoint. Add some raw JSON data to the body tab of the request like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/insert-body-tab.png" alt="Postman POST request showing the body tab of the above request. Body contains a JSON object with title and author values."></p>\n<p>When we send this, if it is successful, it will return with the item we just inserted.</p>\n<h3 id="updating-data">Updating data</h3>\n<p>A lot of times we have data in the app that needs to be changed/updated. In the API documentation this will be found under the \u201CUpdate rows\u201D section. This request is shaped a lot like the Insert request we did above. The first difference is that this is a <em>PATCH</em> request instead of a <em>POST</em> request. (Note that we use a <em>PATCH</em> to update instead of a <em>PUT</em> because <em>PATCH</em> allows us to update only specific fields, while <em>PUT</em> requires us to send the entire object with the request. We could have used <em>PUT</em> in this case, but the <em>PATCH</em> makes it more flexible in the future. <a href="https://stackoverflow.com/a/34400076">See this link</a> for more details on the difference). The second difference is in the URL. At the end of the URL there is a parameter. In the example from the API documentation they have it shown as <code is:raw>?some_column=eq.someValue</code>. This is where we tell the database which row we want updated. So in our case, we can put <code is:raw>?id=eq.2</code> to update the book with the ID of <code is:raw>2</code>. Let\u2019s update the title to \u201CThe Graveyard Book\u201D and the author to \u201CNeil Gaiman.\u201D</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637107715/blog/2021/11/getting-started-with-supabase/update-rows-request.png" alt="Postman PATCH request with URL specifying which row we want updated. Also with JSON body with new title and author values"></p>\n<h3 id="deleting-data">Deleting data</h3>\n<p>We also need to be able to delete data from our table. Like before, look at the example request in the API documentation page. It is similar to the Update request above. There aren\u2019t as many headers needed though and we don\u2019t pass any data. We need to specify which row though using a parameter again and make sure you change the type of request to a <em>DELETE</em> request. Let\u2019s delete the same book we just updated. The request will look something like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637107568/blog/2021/11/getting-started-with-supabase/delete-request.png" alt="Postman DELETE request specifying which row we want to be deleted"></p>\n<p>When you navigate back to the Tables page of the Supabase UI, you should only see the first book you created.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>Now you know the basics of how to set up and use a Supabase Database. This tutorial just scratched the surface of Supabase, but it should give you a solid start.</p>\n<p>Before you start using the database in an app, you\u2019ll also want to add the \u201CRow Level Security\u201D to your tables. This is beyond the scope of this introduction to Supabase blog, but basically it makes it so only authenticated users can affect the data in the tables. You can find out more in the <a href="https://supabase.io/docs/guides/auth/row-level-security">Supabase documentation page</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/getting-started-with-supabase/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Getting a database set up and running can be a difficult and time-consuming process. There are quite a few options these days for “quick” solutions. Supabase is one of those options and is gaining popularity very quickly. Let’s dive in and see what Supabase offers. We’ll walk through an example of setting up a database for a Reading List app and learn how to add, read, edit, and delete data from it.</p>
<h2 id="who-this-post-is-for">Who this post is for</h2>
<p>This post will be easier to follow if you have a general understanding of how databases work.</p>
<h2 id="setup">Setup</h2>
<p>The first thing you’ll need to do is sign up on <a href="https://app.supabase.io/api/login">Supabase</a>. It asks you to sign up with GitHub, so if you don’t have an account, you should also sign up for one of those.</p>
<p>Once you are signed in, you’ll click the green button that says “New Project” and select the default organization that was created when you logged in. Mine was called “briancbarrow’s Org.” This will bring up a box where we provide some info about the project. I’ll name it <code>reading-list</code>, give it a strong password, and then I’m going to select the region <code>West US (North California)</code> because that is closest to me.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1636151269/blog/2021/11/getting-started-with-supabase/new-project-modal.png" alt="Setting up the project with the name reading-list and selecting the West US region."></p>
<p>Click the “Create new project” button. It will take a few minutes for the project to be ready, so sit tight until that finishes.</p>
<p>Now that we have that set up, you should see a page with the name of the project you gave, and below that, it should say “Welcome to your new project.” Below that, there are a few features that we can start exploring.</p>
<ul>
<li><strong>Database</strong>: The Supabase Database is an instance of a Postgres Database. We’ll be diving into this more below.</li>
<li><strong>Auth</strong>: The Supabase Auth service makes it relatively easy to set up authentication for your app and also manage your users. We won’t be covering Auth in this post.</li>
<li><strong>Storage</strong>: Supabase offers a storage service for larger files like images or audio files. We won’t be covering Storage in this post either.</li>
</ul>
<h2 id="initializing-the-database">Initializing the Database</h2>
<p>Click on the button in the “Database” card that says “Table editor.” This takes us to a blank dashboard where we’ll be able to add and edit our database tables. Click the <code>+ New table</code> button on the left and give it the name <code>books</code>. For now don’t check the “Enable Row Level Security (RLS).” This table will need a few columns in addition to the “id” column. I’ve listed them below.</p>
<ul>
<li>Column Name: <code>title</code>, Type: <code>varchar</code></li>
<li>Column Name: <code>author</code>, Type: <code>varchar</code></li>
<li>Column Name: <code>finished</code> Type: <code>bool</code></li>
</ul>
<p>The table might already have a ‘created_at’ column in there by default. We won’t need it so you can remove that one.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637189398/blog/2021/11/getting-started-with-supabase/books-table-setup-2.png" alt="Add new table with the name 'books', leave Row Level Security unchecked, and add title column with type varchar, add author column with type varchar, and add finished column with type bool."></p>
<p>Save that, and you’ve created a table in your database. You should now be able to see it. Let’s fill in some data now. Click the button that says “Insert Row” and fill in the data with a couple of books you like. Remember that you can only insert the type of data into columns that you specified in the table setup. For example, we couldn’t store a string inside the “finished” column because it only accepts booleans. <a href="https://www.postgresqltutorial.com/postgresql-data-types/">Here is a link to more info on data types</a>.</p>
<p>Here is what my table looked like after I inserted two rows of data.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1636396685/blog/2021/11/getting-started-with-supabase/books-table-filled.png" alt="Added two rows of data with the respective titles and authors of books. One with 'finished' set to true and the other to false."></p>
<h2 id="querying-the-database">Querying the Database</h2>
<p>With the data added, we can now look at how to send <a href="https://blog.deepgram.com/getting-started-with-apis/">API requests</a> to it in order to read that data.</p>
<p>In the left hand navigation, there is a link to the API documentation. This is auto-generated for us by Supabase and allows us to connect with our database in our code. Right now, we want to test that we can get the data we want from our <code>books</code> table. In the left hand menu, there is a section called “Tables and Views”. Select the <code>books</code> table. Since we don’t have a JavaScript app set up yet, select the “Bash” tab at the top of the right hand column above the code output. This will show us how a basic request is structured. I am going to be using Postman <a href="https://www.postman.com/downloads/">(which you can get here)</a> to send these requests.</p>
<h3 id="reading-data">Reading data</h3>
<p>Go down to the section that says “READ ALL ROWS”, where you’ll find the <code>curl</code> request to get the information from our database.</p>
<p>Here is what it should look like:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">curl </span><span style="color: #A5D6FF">&#39;https://swmsbxvlhkqilunwmsgs.supabase.co/rest/v1/books?select=*&#39;</span><span style="color: #C9D1D9"> \\</span></span>
<span class="line"><span style="color: #C9D1D9">-H </span><span style="color: #A5D6FF">&quot;apikey: SUPABASE_KEY&quot;</span><span style="color: #C9D1D9"> \\</span></span>
<span class="line"><span style="color: #C9D1D9">-H </span><span style="color: #A5D6FF">&quot;Authorization: Bearer SUPABASE_KEY&quot;</span></span></code></pre>
<p>You can put this info into an app like Postman, or you can copy this code and put it directly into your terminal to get the results. Note that the <code>SUPABASE_KEY</code> in the above code is just a placeholder for your own key. To get your API keys to populated into the example requests, there is a dropdown labeled “Key” up at the top of the screen. Select <code>anon key</code>.</p>
<p>Since I’m using Postman for these requests I’ll first copy the URL from the <code>curl</code> line and paste it into the request URL field in Postman. For this request we’ll keep it as a <code>GET</code> request. I’ll then click on the “Headers” tab inside Postman and add the <code>apikey</code> and <code>Authorization</code> headers respectively. It will look something like this, with your URL and API Keys instead of mine.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/postman-read-request.png" alt="Postman GET request with URL parameter specifying to select all"></p>
<h3 id="inserting-data-via-the-api">Inserting data via the API</h3>
<p>Now we can send the request and the results will show the contents of our books table. But what if we want to add or update data using the API? Inside of the API page of our Supabase app there are examples of all these types of requests. Let’s try to insert data. I’ll find the “Insert Rows” section of the API documentation and create a new request in Postman with the required fields.
The request with the new headers you’ll need should look something like this.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015570/blog/2021/11/getting-started-with-supabase/postman-insert-request.png" alt="Postman POST request with just base URL and apikey, Authorization, Content-Type, and Prefer headings set as per the API documentation on Supabase"></p>
<p>This request requires a body of data to be sent to the API endpoint. Add some raw JSON data to the body tab of the request like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637015560/blog/2021/11/getting-started-with-supabase/insert-body-tab.png" alt="Postman POST request showing the body tab of the above request. Body contains a JSON object with title and author values."></p>
<p>When we send this, if it is successful, it will return with the item we just inserted.</p>
<h3 id="updating-data">Updating data</h3>
<p>A lot of times we have data in the app that needs to be changed/updated. In the API documentation this will be found under the “Update rows” section. This request is shaped a lot like the Insert request we did above. The first difference is that this is a <em>PATCH</em> request instead of a <em>POST</em> request. (Note that we use a <em>PATCH</em> to update instead of a <em>PUT</em> because <em>PATCH</em> allows us to update only specific fields, while <em>PUT</em> requires us to send the entire object with the request. We could have used <em>PUT</em> in this case, but the <em>PATCH</em> makes it more flexible in the future. <a href="https://stackoverflow.com/a/34400076">See this link</a> for more details on the difference). The second difference is in the URL. At the end of the URL there is a parameter. In the example from the API documentation they have it shown as <code>?some_column=eq.someValue</code>. This is where we tell the database which row we want updated. So in our case, we can put <code>?id=eq.2</code> to update the book with the ID of <code>2</code>. Let’s update the title to “The Graveyard Book” and the author to “Neil Gaiman.”</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637107715/blog/2021/11/getting-started-with-supabase/update-rows-request.png" alt="Postman PATCH request with URL specifying which row we want updated. Also with JSON body with new title and author values"></p>
<h3 id="deleting-data">Deleting data</h3>
<p>We also need to be able to delete data from our table. Like before, look at the example request in the API documentation page. It is similar to the Update request above. There aren’t as many headers needed though and we don’t pass any data. We need to specify which row though using a parameter again and make sure you change the type of request to a <em>DELETE</em> request. Let’s delete the same book we just updated. The request will look something like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1637107568/blog/2021/11/getting-started-with-supabase/delete-request.png" alt="Postman DELETE request specifying which row we want to be deleted"></p>
<p>When you navigate back to the Tables page of the Supabase UI, you should only see the first book you created.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Now you know the basics of how to set up and use a Supabase Database. This tutorial just scratched the surface of Supabase, but it should give you a solid start.</p>
<p>Before you start using the database in an app, you’ll also want to add the “Row Level Security” to your tables. This is beyond the scope of this introduction to Supabase blog, but basically it makes it so only authenticated users can affect the data in the tables. You can find out more in the <a href="https://supabase.io/docs/guides/auth/row-level-security">Supabase documentation page</a>.</p>`;
});

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
