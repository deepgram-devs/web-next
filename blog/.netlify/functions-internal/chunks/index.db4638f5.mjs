import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
/* empty css                           */import 'axios';
/* empty css                          *//* empty css                           *//* empty css                          *//* empty css                              *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           *//* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "pre-requisites", "text": "Pre-requisites" }, { "depth": 2, "slug": "try-the-demo", "text": "Try the Demo" }, { "depth": 2, "slug": "building-the-demo", "text": "Building the Demo" }, { "depth": 2, "slug": "setting-up-the-project", "text": "Setting Up the Project" }, { "depth": 2, "slug": "creating-physics-objects", "text": "Creating Physics Objects" }, { "depth": 2, "slug": "implementing-the-deepgram-integration", "text": "Implementing the Deepgram Integration" }, { "depth": 2, "slug": "build-new-features", "text": "Build New Features" }, { "depth": 2, "slug": "final-thoughts", "text": "Final Thoughts" }], "source": '\r\nIn this tutorial, we will be making a simple physics simulation in Unity with actions triggered by Deepgram\'s\r\nautomatic speech recognition (ASR) engine. Why use Deepgram with Unity? Well, Unity is an industry standard when it comes to game development,\r\nand while speech-enhanced games have been around for decades, high performance, easy-to-use ASR is relatively new, and Deepgram represents the cream-of-the-crop.\r\nSo if you are looking to try something new with your games, perhaps for a more immersive or accessible experience, I highly recommend trying this out!\r\n\r\nThis tutorial assumes no prior experience with Unity or C# (the language Unity uses for scripting). However, its\r\nfocus is on getting you quickly set up to integrate Deepgram in your Unity\r\nproject, and does not cover Unity game development or the C# language in depth. There are a plethora of resources out there to learn game development with Unity,\r\nand I highly recommend [checking out their learning website](https://learn.unity.com/) as a starting point!\r\n\r\nFinally, for an example of a simple game built with Deepgram ASR, you can check out [Spooky Speech Spells](https://spookyspeechspells.deepgram.com).\r\n\r\n## Pre-requisites\r\n\r\nYou will need:\r\n\r\n*   Unity installed on your machine - [download Unity here](https://unity.com/download). This tutorial was written with the Unity Editor version `2020.3.30f1`.\r\n*   *(Optional)* [VS Code](https://code.visualstudio.com/docs/other/unity) or [Script Inspector 3](https://assetstore.unity.com/packages/tools/visual-scripting/script-inspector-3-3535) for editing C# Unity scripts (you can use any text editor, but these are highly recommended for their Unity integration).\r\n*   A Deepgram API Key - [get an API Key here](https://console.deepgram.com/signup?jump=keys).\r\n\r\n## Try the Demo\r\n\r\nTo run the demo we are going to build and browse its files:\r\n\r\n*   Download [this repository](https://github.com/deepgram/UnityDeepgramDemo), open Unity, click "Open", and browse to and select the directory `UnityDeepgramDemo`.\r\n*   Edit the script `UnityDeepgramDemo/Assets/DeepgramInstance.cs` and replace the string `INSERT_YOUR_API_KEY` with your Deepgram API key.\r\n*   In the bottom left "Project" tab open `Assets -> Scenes` and double click "SampleScene" to load this scene.\r\n*   In the top center of the Unity editor, hit the "Play" (\u25BA) button.\r\n*   Say "left," "right," "up," and "down" to move the ball around!\r\n\r\n## Building the Demo\r\n\r\nIn the following sections, we will walk through step-by-step how to make this demo where you can move\r\na ball around a simulated physics environment just by commanding it via your computer\'s microphone.\r\n\r\n## Setting Up the Project\r\n\r\nOpen Unity and click "New project".\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/new_project.png" alt="Create a new project." style="max-width: 2272px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nYou will be presented with a list of templates - choose "2D", and under the "Project Settings" panel name the project "UnityDeepgramDemo" (or whatever you\'d like!)\r\nand choose a location for the project on your filesystem.\r\nThen click "Create project."\r\n\r\n![Create the project from the "2D" template.](https://res.cloudinary.com/deepgram/image/upload/v1647261812/blog/2022/03/deepgram-unity-tutorial/assets/create_the_project.png)\r\n\r\nWe are now in the Unity Editor. Our demo will rely on one external package to help us handle the websocket connection to Deepgram - [Native WebSockets](https://github.com/endel/NativeWebSocket).\r\nTo install Native WebSockets, first, open the Package Manager from `Window -> Package Manager`.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/open_package_manager.png" alt="Open the Package Manager." style="max-width: 466px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nThen click the "+" drop-down and click "Add package from git URL...".\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/add_package_from_git_url.png" alt="Add a package from a git URL." style="max-width: 400px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nEnter the URL: https://github.com/endel/NativeWebSocket.git#upm and click "Add."\r\n\r\nWe are now ready to start putting the demo together!\r\n\r\n## Creating Physics Objects\r\n\r\nIn the center of the Unity Editor are the "Scene" and "Game" tabs. We will spend most of our time in the "Scene" tab, though when we play the game, we will be shifted over to the "Game"\r\ntab. On the left side of the Unity Editor is the "Hierarchy" tab - this is where we will be adding our game objects.\r\n\r\nLet\'s add some physics objects to our scene - we are going to create a box out of 4 static (non-movable) walls, and add a dynamic (movable) ball in the center.\r\n\r\nIn the "Hierarchy" tab, right-click and select `2D Object -> Physics -> Static Sprite`.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_static_sprite.png" alt="Add a Static Sprite." style="max-width: 1166px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nWe now have a static square sprite in the center of our scene. Let\'s move this square to the left and make it a vertical rectangle to start building our box.\r\nTo do this, go to the "Inspector" tab on the right. Under "Transform," change the "X" "Position" to -5 and the "Y" "Scale" to 5. This will stretch the square\r\ninto a vertical rectangle 5 units tall, and place it 5 units to the left.\r\n\r\n![Create a static wall.](https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/wall_left.png)\r\n\r\nNow, right-click the "Static Sprite" object in the "Hierarchy" tab, click "Rename," and rename it "WallLeft." Let\'s do the same procedure to make a "WallRight," "WallUp," and "WallDown."\r\n\r\nFor "WallRight," change the "X" "Position" to 5 and the "Y" "Scale" to 5.\r\nFor "WallUp," change the "Y" "Position" to 3 and the "X" "Scale" to 9.\r\nAnd for the "WallDown," change the "Y" "Position" to -3 and the "X" "Scale" to 9.\r\nYou should now have a box which looks like this:\r\n\r\n![Our completed box.](https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/complete_box.png)\r\n\r\nLet\'s add a dynamic ball inside the box. Right-click inside the "Hierarchy" tab and select `2D Object -> Physics -> Dynamic Sprite` and name the object "Ball."\r\nDynamic sprites have gravity applied to them by default, and this can be changed if desired in the "Gravity Scale" field of the "Rigidbody 2D" node in the "Inspector" tab.\r\nFor now, let\'s leave it at the default value. Feel free to press "Play" (\u25BA) to start the game! You should see the ball fall to the bottom of the box - not much going on yet.\r\n(Note, however, that you will not be able to do certain edits on the game until you stop playing the game by pressing again on the "Play" (\u25BA) button.)\r\n\r\nFinally, let\'s attach a script to our "Ball" object. In the bottom panel, select the "Project" tab and open the "Assets" directory. Right-click in the "Assets"\r\npanel and select `Create -> C# Script`. Name the script `Ball` (on your OS\'s filesystem, the file will exist as `Ball.cs`). Open this script with your text\r\neditor of choice, and paste the following contents:\r\n\r\n```\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using UnityEngine;\r\n\r\n    public class Ball : MonoBehaviour\r\n    {\r\n        public int forceFactor = 300;\r\n\r\n        void Start()\r\n        {\r\n\r\n        }\r\n\r\n        void Update()\r\n        {\r\n\r\n        }\r\n\r\n        public void PushLeft()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.left * forceFactor);\r\n        }\r\n        public void PushRight()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.right * forceFactor);\r\n        }\r\n        public void PushUp()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.up * forceFactor);\r\n        }\r\n        public void PushDown()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.down * forceFactor);\r\n        }\r\n    }\r\n```\r\n\r\nThis script defines the class `Ball`, which inherits from Unity\'s `MonoBehavior` class. The class has one member variable, `forceFactor`, and defines\r\n4 methods that can be used to move the object, `PushLeft`, `PushRight`, `PushUp`, and `PushDown`. We will not use these methods yet, but when we\r\nimplement our Deepgram integration, we will trigger these methods when you say the words "left," "right," "up," and "down."\r\n\r\nSo now we have a "Ball" script and a "Ball" object, but they are not coupled yet! To attach the script to the object, click the object in the "Hierarchy"\r\ntab, and drag the "Ball" script to the "Add Component" button found at the bottom of the "Inspector" tab.\r\n\r\n## Implementing the Deepgram Integration\r\n\r\nTo implement the Deepgram integration, we will need to create an object which handles microphone input and an object which handles the websocket\r\nconnection to Deepgram.\r\n\r\nLet\'s start with the websocket handler. Right-click in the "Hierarchy" tab and select "Create Empty" - name this object "DeepgramObject." Now,\r\ncreate a new script and name it "DeepgramInstance." Edit the script and add the following contents:\r\n\r\n```\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using UnityEngine;\r\n    using UnityEditor;\r\n    using System.Text.RegularExpressions;\r\n\r\n    using NativeWebSocket;\r\n\r\n    [System.Serializable]\r\n    public class DeepgramResponse\r\n    {\r\n        public int[] channel_index;\r\n        public bool is_final;\r\n        public Channel channel;\r\n    }\r\n\r\n    [System.Serializable]\r\n    public class Channel\r\n    {\r\n        public Alternative[] alternatives;\r\n    }\r\n\r\n    [System.Serializable]\r\n    public class Alternative\r\n    {\r\n        public string transcript;\r\n    }\r\n\r\n    public class DeepgramInstance : MonoBehaviour\r\n    {\r\n        WebSocket websocket;\r\n\r\n        public Ball _ball;\r\n\r\n        async void Start()\r\n        {\r\n            var headers = new Dictionary<string, string>\r\n            {\r\n                { "Authorization", "Token INSERT_YOUR_API_KEY" }\r\n            };\r\n            websocket = new WebSocket("wss://api.deepgram.com/v1/listen?encoding=linear16&sample_rate=" + AudioSettings.outputSampleRate.ToString(), headers);\r\n\r\n            websocket.OnOpen += () =>\r\n            {\r\n                Debug.Log("Connected to Deepgram!");\r\n            };\r\n\r\n            websocket.OnError += (e) =>\r\n            {\r\n                Debug.Log("Error: " + e);\r\n            };\r\n\r\n            websocket.OnClose += (e) =>\r\n            {\r\n                Debug.Log("Connection closed!");\r\n            };\r\n\r\n            websocket.OnMessage += (bytes) =>\r\n            {\r\n                var message = System.Text.Encoding.UTF8.GetString(bytes);\r\n                Debug.Log("OnMessage: " + message);\r\n\r\n                DeepgramResponse deepgramResponse = new DeepgramResponse();\r\n                object boxedDeepgramResponse = deepgramResponse;\r\n                EditorJsonUtility.FromJsonOverwrite(message, boxedDeepgramResponse);\r\n                deepgramResponse = (DeepgramResponse) boxedDeepgramResponse;\r\n                if (deepgramResponse.is_final)\r\n                {\r\n                    var transcript = deepgramResponse.channel.alternatives[0].transcript;\r\n                    Debug.Log(transcript);\r\n                    int leftCount = new Regex(Regex.Escape("left")).Matches(transcript).Count;\r\n                    int rightCount = new Regex(Regex.Escape("right")).Matches(transcript).Count;\r\n                    int upCount = new Regex(Regex.Escape("up")).Matches(transcript).Count;\r\n                    int downCount = new Regex(Regex.Escape("down")).Matches(transcript).Count;\r\n                    for (int i = 0; i < leftCount; i++)\r\n                    {\r\n                        _ball.PushLeft();\r\n                    }\r\n                    for (int i = 0; i < rightCount; i++)\r\n                    {\r\n                        _ball.PushRight();\r\n                    }\r\n                    for (int i = 0; i < upCount; i++)\r\n                    {\r\n                        _ball.PushUp();\r\n                    }\r\n                    for (int i = 0; i < downCount; i++)\r\n                    {\r\n                        _ball.PushDown();\r\n                    }\r\n                }\r\n            };\r\n\r\n            await websocket.Connect();\r\n        }\r\n        void Update()\r\n        {\r\n        #if !UNITY_WEBGL || UNITY_EDITOR\r\n            websocket.DispatchMessageQueue();\r\n        #endif\r\n        }\r\n\r\n        private async void OnApplicationQuit()\r\n        {\r\n            await websocket.Close();\r\n        }\r\n\r\n        public async void ProcessAudio(byte[] audio)\r\n        {\r\n            if (websocket.State == WebSocketState.Open)\r\n            {\r\n                await websocket.Send(audio);\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nInsert your Deepgram API key where the script says "INSERT\\_YOUR\\_API\\_KEY," then\r\nattach this script to the "DeepgramObject", and in the "Inspector" tab click the "Ball" field and select the "Ball" object we created earlier.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647404524/blog/2022/03/deepgram-unity-tutorial/assets/add_ball_to_deepgram_object.png" alt="Adding a Ball object reference to the DeepgramObject." style="max-width: 556px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nOk, so what\'s going on here? Well, first the script defines the classes `DeepgramResponse`, `Channel`, and `Alternative` which we will use to deserialize\r\nthe Deepgram ASR response, which is in JSON format. Then the script defines the class `DeepgramInstace` which has two member variables: a `WebSocket` object,\r\ndefined by `NativeWebSocket`, and a `Ball` object, defined by us in the "Ball" script.\r\n\r\nWhen the object that this script is attached to gets created, the `Start` method gets called. Inside `Start`, we create a new websocket connection to Deepgram\r\nand define functions that need to get executed when that connection opens, closes, receives an error, and receives a message. When the websocket connection\r\nreceives a message, we first parse it as a string, and then use `EditorJsonUtility` to parse the string as a JSON object, deserializing it as a `DeepgramResponse`\r\nobject. We can then directly access the transcript contained in this Deepgram message, count how many times the words "left," "right," "up," and "down" were spoken,\r\nand for each time these words were spoken, we call the `PushLeft`, `PushRight`, `PushUp`, and `PushDown` methods on our `Ball` object!\r\n\r\nNear the end of the script is one more method of note: `ProcessAudio`. This method will be called by our microphone object, which will pass in raw audio. `ProcessAudio`\r\nwill then check to see if the websocket connection is open, and if it is, pass the audio along to Deepgram.\r\n\r\nNow let\'s create an object to handle the microphone input. Right-click in the "Hierarchy" tab, select `Audio -> AudioSource`, and name this object "MicrophoneObject."\r\nThen create a new script called "MicrophoneInstance" and make its contents the following:\r\n\r\n```\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using UnityEngine;\r\n    using UnityEngine.Audio;\r\n\r\n    [RequireComponent (typeof (AudioSource))]\r\n    public class MicrophoneInstance : MonoBehaviour\r\n    {\r\n        AudioSource _audioSource;\r\n        int lastPosition, currentPosition;\r\n\r\n        public DeepgramInstance _deepgramInstance;\r\n\r\n        void Start()\r\n        {\r\n            _audioSource = GetComponent<AudioSource> ();\r\n            if (Microphone.devices.Length > 0)\r\n            {\r\n                _audioSource.clip = Microphone.Start(null, true, 10, AudioSettings.outputSampleRate);\r\n            }\r\n            else\r\n            {\r\n                Debug.Log("This will crash!");\r\n            }\r\n\r\n            _audioSource.Play();\r\n        }\r\n\r\n        void Update()\r\n        {\r\n            if ((currentPosition = Microphone.GetPosition(null)) > 0)\r\n            {\r\n                if (lastPosition > currentPosition)\r\n                    lastPosition = 0;\r\n\r\n                if (currentPosition - lastPosition > 0)\r\n                {\r\n                    float[] samples = new float[(currentPosition - lastPosition) * _audioSource.clip.channels];\r\n                    _audioSource.clip.GetData(samples, lastPosition);\r\n\r\n                    short[] samplesAsShorts = new short[(currentPosition - lastPosition) * _audioSource.clip.channels];\r\n                    for (int i = 0; i < samples.Length; i++)\r\n                    {\r\n                        samplesAsShorts[i] = f32_to_i16(samples[i]);\r\n                    }\r\n\r\n                    var samplesAsBytes = new byte[samplesAsShorts.Length * 2];\r\n                    System.Buffer.BlockCopy(samplesAsShorts, 0, samplesAsBytes, 0, samplesAsBytes.Length);\r\n                    _deepgramInstance.ProcessAudio(samplesAsBytes);\r\n\r\n                    if (!GetComponent<AudioSource>().isPlaying)\r\n                        GetComponent<AudioSource>().Play();\r\n                    lastPosition = currentPosition;\r\n                }\r\n            }\r\n        }\r\n\r\n        short f32_to_i16(float sample)\r\n        {\r\n            sample = sample * 32768;\r\n            if (sample > 32767)\r\n            {\r\n                return 32767;\r\n            }\r\n            if (sample < -32768)\r\n            {\r\n                return -32768;\r\n            }\r\n            return (short) sample;\r\n        }\r\n    }\r\n```\r\n\r\nAttach this script to the "MicrophoneObject", and in the "Inspector" tab click the "DeepgramInstance" field and select the "DeepgramObject" object we created earlier.\r\n\r\nIn this script, we define the `MicrophoneInstance` class which contains an `AudioSource` member variable, a `DeepgramInstance` member variable, and 2 integer member\r\nvariables which help to keep track of where we are in the microphone\'s audio stream. The `Start` method will set up the microphone to stream audio data into\r\nthe `clip` of the `AudioSource` object, and will start playback of the `AudioSource`.\r\n\r\nThe `Update` method of a `MonoBehavior` class gets called by the under-the-hood game loop every frame and is the typical place to handle game logic.\r\nIn our case, it gets the current position of the microphone\'s audio stream, compares it to the last position of the microphone\'s audio stream to\r\ncreate a buffer, `samples`, of floats the right size to store all of the new audio data since the last time `Update` was called, grabs that audio data via the method `GetData`\r\nand stores it in `samples`. Then, these `f32` samples are converted to `i16` samples, and then converted to raw bytes, and finally passed to the `DeepgramInstance`\'s `ProcessAudio`\r\nmethod which, as we mentioned before, will then pass that audio on to Deepgram to get transcribed!\r\n\r\nNow, we are *almost* ready to try out our demo. There is one more task to do to make the demo reasonably playable, and if you try to play the demo now, you may see what it is!\r\nCurrently, in order to get the microphone\'s audio data, the microphone\'s audio stream must play. However, having the microphone\'s audio play through your computer\'s speakers\r\ncan be problematic and lead to feedback issues (plus, hearing your voice in the game isn\'t the point). To fix this issue, go to the "Assets" panel, right-click,\r\nand select `Create -> Audio Mixer`. Name the mixer "Mixer."\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_audio_mixer.png" alt="Add a Mixer." style="max-width: 1176px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nDouble click "Mixer" in the "Assets" panel, then next to "Groups" click the "+" button and name the group "Microphone."\r\nNow go to the fader for this group and turn it all the way down.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/turn_fader_down.png" alt="Silence the Microphone group." style="max-width: 1090px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nNow, click the "MicrophoneObject" in the "Hierarchy" tab and then click on the field for "Output" in the "Audio Source" node in the "Inspector" tab and select "Microphone (Mixer)."\r\nThis will ensure the microphone audio can stream its data without being directed to your speakers!\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/send_audio_source_to_mixer_group.png" alt="Silence the Microphone group." style="max-width: 568px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nYou should now be able to press "Play" (\u25BA) and make the ball jump around by saying "left," "right," "up," or "down" in the microphone!\r\n\r\n## Build New Features\r\n\r\nControlling a single ball with commands has a noticeable amount of latency. This can be alleviated somewhat\r\nby using [interim results](https://developers.deepgram.com/documentation/features/interim-results/), however,\r\nthe same transcribed word might be present in subsequent interim results, so logic would have to be added\r\nto avoid double counting commands. Still, the use of interim results can vastly reduce latency, so I strongly\r\nsuggest trying it out! In addition, here are a few more things to think about and try out with this demo before diving into\r\na full-on speech-enhanced game:\r\n\r\n*   Change the [Physics Material](https://docs.unity3d.com/Manual/class-PhysicMaterial.html) of the ball to make it bounce instead of stick to walls.\r\n*   Add more balls to the box - try making just one of them, several of them, or all of them react to the speech commands.\r\n*   Give the balls different colors, and implement logic to control each group (like "red, left!", "blue, up!").\r\n*   Remove gravity for balls and exchange the simple box with a sprawling level of walls.\r\n\r\nIf you try out the above ideas, you may come to a fun idea for a game - how about a game along the lines of Pikmin, where you command\r\ndifferent groups of creatures to move to different parts of the map to accomplish objectives? Instead of using a complex user interface\r\nof buttons, mice, and/or a keyboard, the game could simply require you to dictate commands!\r\n\r\n## Final Thoughts\r\n\r\nSpeech-enhanced games are not necessarily new, but until recently they have mostly centered around a handful of command words.\r\nWith today\'s ASR engines like Deepgram, supporting thousands of command words out of the box has become trivial, indeed transcribing entire\r\nconversations and complex commands is now easily within reach and has the power to enrich games. I\'ll end with a few ideas which\r\nmay give you some inspiration!\r\n\r\n*   Along the lines of the example mentioned in the previous section, build an RTS where you control units with your voice. There may be more\r\n    latency than you get with a mouse click, but this could be turned into a core game mechanic - maybe you are communicating with your units\r\n    via a radio, and any network + transcription latency would feel like latency of your units receiving your message.\r\n*   Also following up on this idea, make a game where you primarily control a single player, but have the option to give commands to other\r\n    AI players on your team - these commands could be conveyed with your voice without having to swap to a complex menu, interrupting the control of\r\n    your primary character. (For a concrete example, think Hyrule Warriors.)\r\n*   For MOBAs where voice chat is not easily available (think Pok\xE9mon Unite), allow for command phrases to be selected via ASR instead of clunky menus.\r\n*   To avoid issues with latency entirely, make speech-enhanced sections of your game occur during context-sensitive situations where the main action\r\n    of the game pauses so that reaction time becomes a non-issue. As an example, in many Zelda games, the game freezes when you pull out an instrument,\r\n    and playing the right notes on the instrument can cause events to occur - imagine this but with ASR and specific phrases.\r\n*   For in-game voice chat, write a plugin that performs ASR for each player in their preferred\r\n    language (see Deepgram\'s supported languages [here](https://developers.deepgram.com/documentation/features/language/), and then passes\r\n    the resulting transcripts through a translator to display everyone\'s speech to everyone else in their preferred language.\r\n\r\nSpeech-in-games is a relatively untapped area, so this list of ideas and suggestions is far from exhaustive, but I sincerely hope this helps\r\non the journey towards making games more immersive, interesting, and inclusive!\r\n\r\nIf you have any questions, please feel free to reach out on Twitter - we\'re @DeepgramDevs.\r\n\r\n        ', "html": '<p>In this tutorial, we will be making a simple physics simulation in Unity with actions triggered by Deepgram\u2019s\r\nautomatic speech recognition (ASR) engine. Why use Deepgram with Unity? Well, Unity is an industry standard when it comes to game development,\r\nand while speech-enhanced games have been around for decades, high performance, easy-to-use ASR is relatively new, and Deepgram represents the cream-of-the-crop.\r\nSo if you are looking to try something new with your games, perhaps for a more immersive or accessible experience, I highly recommend trying this out!</p>\n<p>This tutorial assumes no prior experience with Unity or C# (the language Unity uses for scripting). However, its\r\nfocus is on getting you quickly set up to integrate Deepgram in your Unity\r\nproject, and does not cover Unity game development or the C# language in depth. There are a plethora of resources out there to learn game development with Unity,\r\nand I highly recommend <a href="https://learn.unity.com/">checking out their learning website</a> as a starting point!</p>\n<p>Finally, for an example of a simple game built with Deepgram ASR, you can check out <a href="https://spookyspeechspells.deepgram.com">Spooky Speech Spells</a>.</p>\n<h2 id="pre-requisites">Pre-requisites</h2>\n<p>You will need:</p>\n<ul>\n<li>Unity installed on your machine - <a href="https://unity.com/download">download Unity here</a>. This tutorial was written with the Unity Editor version <code is:raw>2020.3.30f1</code>.</li>\n<li><em>(Optional)</em> <a href="https://code.visualstudio.com/docs/other/unity">VS Code</a> or <a href="https://assetstore.unity.com/packages/tools/visual-scripting/script-inspector-3-3535">Script Inspector 3</a> for editing C# Unity scripts (you can use any text editor, but these are highly recommended for their Unity integration).</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get an API Key here</a>.</li>\n</ul>\n<h2 id="try-the-demo">Try the Demo</h2>\n<p>To run the demo we are going to build and browse its files:</p>\n<ul>\n<li>Download <a href="https://github.com/deepgram/UnityDeepgramDemo">this repository</a>, open Unity, click \u201COpen\u201D, and browse to and select the directory <code is:raw>UnityDeepgramDemo</code>.</li>\n<li>Edit the script <code is:raw>UnityDeepgramDemo/Assets/DeepgramInstance.cs</code> and replace the string <code is:raw>INSERT_YOUR_API_KEY</code> with your Deepgram API key.</li>\n<li>In the bottom left \u201CProject\u201D tab open <code is:raw>Assets -&gt; Scenes</code> and double click \u201CSampleScene\u201D to load this scene.</li>\n<li>In the top center of the Unity editor, hit the \u201CPlay\u201D (\u25BA) button.</li>\n<li>Say \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D and \u201Cdown\u201D to move the ball around!</li>\n</ul>\n<h2 id="building-the-demo">Building the Demo</h2>\n<p>In the following sections, we will walk through step-by-step how to make this demo where you can move\r\na ball around a simulated physics environment just by commanding it via your computer\u2019s microphone.</p>\n<h2 id="setting-up-the-project">Setting Up the Project</h2>\n<p>Open Unity and click \u201CNew project\u201D.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/new_project.png" alt="Create a new project." style="max-width: 2272px;display: block;margin-left: auto;margin-right: auto;" />\n<p>You will be presented with a list of templates - choose \u201C2D\u201D, and under the \u201CProject Settings\u201D panel name the project \u201CUnityDeepgramDemo\u201D (or whatever you\u2019d like!)\r\nand choose a location for the project on your filesystem.\r\nThen click \u201CCreate project.\u201D</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647261812/blog/2022/03/deepgram-unity-tutorial/assets/create_the_project.png" alt="Create the project from the &#x22;2D&#x22; template."></p>\n<p>We are now in the Unity Editor. Our demo will rely on one external package to help us handle the websocket connection to Deepgram - <a href="https://github.com/endel/NativeWebSocket">Native WebSockets</a>.\r\nTo install Native WebSockets, first, open the Package Manager from <code is:raw>Window -&gt; Package Manager</code>.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/open_package_manager.png" alt="Open the Package Manager." style="max-width: 466px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Then click the \u201D+\u201D drop-down and click \u201CAdd package from git URL\u2026\u201C.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/add_package_from_git_url.png" alt="Add a package from a git URL." style="max-width: 400px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Enter the URL: <a href="https://github.com/endel/NativeWebSocket.git#upm">https://github.com/endel/NativeWebSocket.git#upm</a> and click \u201CAdd.\u201D</p>\n<p>We are now ready to start putting the demo together!</p>\n<h2 id="creating-physics-objects">Creating Physics Objects</h2>\n<p>In the center of the Unity Editor are the \u201CScene\u201D and \u201CGame\u201D tabs. We will spend most of our time in the \u201CScene\u201D tab, though when we play the game, we will be shifted over to the \u201CGame\u201D\r\ntab. On the left side of the Unity Editor is the \u201CHierarchy\u201D tab - this is where we will be adding our game objects.</p>\n<p>Let\u2019s add some physics objects to our scene - we are going to create a box out of 4 static (non-movable) walls, and add a dynamic (movable) ball in the center.</p>\n<p>In the \u201CHierarchy\u201D tab, right-click and select <code is:raw>2D Object -&gt; Physics -&gt; Static Sprite</code>.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_static_sprite.png" alt="Add a Static Sprite." style="max-width: 1166px;display: block;margin-left: auto;margin-right: auto;" />\n<p>We now have a static square sprite in the center of our scene. Let\u2019s move this square to the left and make it a vertical rectangle to start building our box.\r\nTo do this, go to the \u201CInspector\u201D tab on the right. Under \u201CTransform,\u201D change the \u201CX\u201D \u201CPosition\u201D to -5 and the \u201CY\u201D \u201CScale\u201D to 5. This will stretch the square\r\ninto a vertical rectangle 5 units tall, and place it 5 units to the left.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/wall_left.png" alt="Create a static wall."></p>\n<p>Now, right-click the \u201CStatic Sprite\u201D object in the \u201CHierarchy\u201D tab, click \u201CRename,\u201D and rename it \u201CWallLeft.\u201D Let\u2019s do the same procedure to make a \u201CWallRight,\u201D \u201CWallUp,\u201D and \u201CWallDown.\u201D</p>\n<p>For \u201CWallRight,\u201D change the \u201CX\u201D \u201CPosition\u201D to 5 and the \u201CY\u201D \u201CScale\u201D to 5.\r\nFor \u201CWallUp,\u201D change the \u201CY\u201D \u201CPosition\u201D to 3 and the \u201CX\u201D \u201CScale\u201D to 9.\r\nAnd for the \u201CWallDown,\u201D change the \u201CY\u201D \u201CPosition\u201D to -3 and the \u201CX\u201D \u201CScale\u201D to 9.\r\nYou should now have a box which looks like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/complete_box.png" alt="Our completed box."></p>\n<p>Let\u2019s add a dynamic ball inside the box. Right-click inside the \u201CHierarchy\u201D tab and select <code is:raw>2D Object -&gt; Physics -&gt; Dynamic Sprite</code> and name the object \u201CBall.\u201D\r\nDynamic sprites have gravity applied to them by default, and this can be changed if desired in the \u201CGravity Scale\u201D field of the \u201CRigidbody 2D\u201D node in the \u201CInspector\u201D tab.\r\nFor now, let\u2019s leave it at the default value. Feel free to press \u201CPlay\u201D (\u25BA) to start the game! You should see the ball fall to the bottom of the box - not much going on yet.\r\n(Note, however, that you will not be able to do certain edits on the game until you stop playing the game by pressing again on the \u201CPlay\u201D (\u25BA) button.)</p>\n<p>Finally, let\u2019s attach a script to our \u201CBall\u201D object. In the bottom panel, select the \u201CProject\u201D tab and open the \u201CAssets\u201D directory. Right-click in the \u201CAssets\u201D\r\npanel and select <code is:raw>Create -&gt; C# Script</code>. Name the script <code is:raw>Ball</code> (on your OS\u2019s filesystem, the file will exist as <code is:raw>Ball.cs</code>). Open this script with your text\r\neditor of choice, and paste the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    public class Ball : MonoBehaviour</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public int forceFactor = 300;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Start()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushLeft()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.left * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushRight()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.right * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushUp()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.up * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushDown()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.down * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>This script defines the class <code is:raw>Ball</code>, which inherits from Unity\u2019s <code is:raw>MonoBehavior</code> class. The class has one member variable, <code is:raw>forceFactor</code>, and defines\r\n4 methods that can be used to move the object, <code is:raw>PushLeft</code>, <code is:raw>PushRight</code>, <code is:raw>PushUp</code>, and <code is:raw>PushDown</code>. We will not use these methods yet, but when we\r\nimplement our Deepgram integration, we will trigger these methods when you say the words \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D and \u201Cdown.\u201D</p>\n<p>So now we have a \u201CBall\u201D script and a \u201CBall\u201D object, but they are not coupled yet! To attach the script to the object, click the object in the \u201CHierarchy\u201D\r\ntab, and drag the \u201CBall\u201D script to the \u201CAdd Component\u201D button found at the bottom of the \u201CInspector\u201D tab.</p>\n<h2 id="implementing-the-deepgram-integration">Implementing the Deepgram Integration</h2>\n<p>To implement the Deepgram integration, we will need to create an object which handles microphone input and an object which handles the websocket\r\nconnection to Deepgram.</p>\n<p>Let\u2019s start with the websocket handler. Right-click in the \u201CHierarchy\u201D tab and select \u201CCreate Empty\u201D - name this object \u201CDeepgramObject.\u201D Now,\r\ncreate a new script and name it \u201CDeepgramInstance.\u201D Edit the script and add the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEditor;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Text.RegularExpressions;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    using NativeWebSocket;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class DeepgramResponse</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public int[] channel_index;</span></span>\n<span class="line"><span style="color: #c9d1d9">        public bool is_final;</span></span>\n<span class="line"><span style="color: #c9d1d9">        public Channel channel;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class Channel</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public Alternative[] alternatives;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class Alternative</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public string transcript;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    public class DeepgramInstance : MonoBehaviour</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        WebSocket websocket;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public Ball _ball;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        async void Start()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            var headers = new Dictionary&lt;string, string&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                { &quot;Authorization&quot;, &quot;Token INSERT_YOUR_API_KEY&quot; }</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket = new WebSocket(&quot;wss://api.deepgram.com/v1/listen?encoding=linear16&amp;sample_rate=&quot; + AudioSettings.outputSampleRate.ToString(), headers);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnOpen += () =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Connected to Deepgram!&quot;);</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnError += (e) =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Error: &quot; + e);</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnClose += (e) =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Connection closed!&quot;);</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnMessage += (bytes) =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                var message = System.Text.Encoding.UTF8.GetString(bytes);</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;OnMessage: &quot; + message);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                DeepgramResponse deepgramResponse = new DeepgramResponse();</span></span>\n<span class="line"><span style="color: #c9d1d9">                object boxedDeepgramResponse = deepgramResponse;</span></span>\n<span class="line"><span style="color: #c9d1d9">                EditorJsonUtility.FromJsonOverwrite(message, boxedDeepgramResponse);</span></span>\n<span class="line"><span style="color: #c9d1d9">                deepgramResponse = (DeepgramResponse) boxedDeepgramResponse;</span></span>\n<span class="line"><span style="color: #c9d1d9">                if (deepgramResponse.is_final)</span></span>\n<span class="line"><span style="color: #c9d1d9">                {</span></span>\n<span class="line"><span style="color: #c9d1d9">                    var transcript = deepgramResponse.channel.alternatives[0].transcript;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    Debug.Log(transcript);</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int leftCount = new Regex(Regex.Escape(&quot;left&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int rightCount = new Regex(Regex.Escape(&quot;right&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int upCount = new Regex(Regex.Escape(&quot;up&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int downCount = new Regex(Regex.Escape(&quot;down&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; leftCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushLeft();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; rightCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushRight();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; upCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushUp();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; downCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushDown();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                }</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            await websocket.Connect();</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">        #if !UNITY_WEBGL || UNITY_EDITOR</span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.DispatchMessageQueue();</span></span>\n<span class="line"><span style="color: #c9d1d9">        #endif</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        private async void OnApplicationQuit()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            await websocket.Close();</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public async void ProcessAudio(byte[] audio)</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (websocket.State == WebSocketState.Open)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                await websocket.Send(audio);</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Insert your Deepgram API key where the script says \u201CINSERT_YOUR_API_KEY,\u201D then\r\nattach this script to the \u201CDeepgramObject\u201D, and in the \u201CInspector\u201D tab click the \u201CBall\u201D field and select the \u201CBall\u201D object we created earlier.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647404524/blog/2022/03/deepgram-unity-tutorial/assets/add_ball_to_deepgram_object.png" alt="Adding a Ball object reference to the DeepgramObject." style="max-width: 556px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Ok, so what\u2019s going on here? Well, first the script defines the classes <code is:raw>DeepgramResponse</code>, <code is:raw>Channel</code>, and <code is:raw>Alternative</code> which we will use to deserialize\r\nthe Deepgram ASR response, which is in JSON format. Then the script defines the class <code is:raw>DeepgramInstace</code> which has two member variables: a <code is:raw>WebSocket</code> object,\r\ndefined by <code is:raw>NativeWebSocket</code>, and a <code is:raw>Ball</code> object, defined by us in the \u201CBall\u201D script.</p>\n<p>When the object that this script is attached to gets created, the <code is:raw>Start</code> method gets called. Inside <code is:raw>Start</code>, we create a new websocket connection to Deepgram\r\nand define functions that need to get executed when that connection opens, closes, receives an error, and receives a message. When the websocket connection\r\nreceives a message, we first parse it as a string, and then use <code is:raw>EditorJsonUtility</code> to parse the string as a JSON object, deserializing it as a <code is:raw>DeepgramResponse</code>\r\nobject. We can then directly access the transcript contained in this Deepgram message, count how many times the words \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D and \u201Cdown\u201D were spoken,\r\nand for each time these words were spoken, we call the <code is:raw>PushLeft</code>, <code is:raw>PushRight</code>, <code is:raw>PushUp</code>, and <code is:raw>PushDown</code> methods on our <code is:raw>Ball</code> object!</p>\n<p>Near the end of the script is one more method of note: <code is:raw>ProcessAudio</code>. This method will be called by our microphone object, which will pass in raw audio. <code is:raw>ProcessAudio</code>\r\nwill then check to see if the websocket connection is open, and if it is, pass the audio along to Deepgram.</p>\n<p>Now let\u2019s create an object to handle the microphone input. Right-click in the \u201CHierarchy\u201D tab, select <code is:raw>Audio -&gt; AudioSource</code>, and name this object \u201CMicrophoneObject.\u201D\r\nThen create a new script called \u201CMicrophoneInstance\u201D and make its contents the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine.Audio;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [RequireComponent (typeof (AudioSource))]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class MicrophoneInstance : MonoBehaviour</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        AudioSource _audioSource;</span></span>\n<span class="line"><span style="color: #c9d1d9">        int lastPosition, currentPosition;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public DeepgramInstance _deepgramInstance;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Start()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            _audioSource = GetComponent&lt;AudioSource&gt; ();</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (Microphone.devices.Length &gt; 0)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                _audioSource.clip = Microphone.Start(null, true, 10, AudioSettings.outputSampleRate);</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">            else</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;This will crash!&quot;);</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            _audioSource.Play();</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            if ((currentPosition = Microphone.GetPosition(null)) &gt; 0)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                if (lastPosition &gt; currentPosition)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    lastPosition = 0;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                if (currentPosition - lastPosition &gt; 0)</span></span>\n<span class="line"><span style="color: #c9d1d9">                {</span></span>\n<span class="line"><span style="color: #c9d1d9">                    float[] samples = new float[(currentPosition - lastPosition) * _audioSource.clip.channels];</span></span>\n<span class="line"><span style="color: #c9d1d9">                    _audioSource.clip.GetData(samples, lastPosition);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                    short[] samplesAsShorts = new short[(currentPosition - lastPosition) * _audioSource.clip.channels];</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; samples.Length; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        samplesAsShorts[i] = f32_to_i16(samples[i]);</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                    var samplesAsBytes = new byte[samplesAsShorts.Length * 2];</span></span>\n<span class="line"><span style="color: #c9d1d9">                    System.Buffer.BlockCopy(samplesAsShorts, 0, samplesAsBytes, 0, samplesAsBytes.Length);</span></span>\n<span class="line"><span style="color: #c9d1d9">                    _deepgramInstance.ProcessAudio(samplesAsBytes);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                    if (!GetComponent&lt;AudioSource&gt;().isPlaying)</span></span>\n<span class="line"><span style="color: #c9d1d9">                        GetComponent&lt;AudioSource&gt;().Play();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    lastPosition = currentPosition;</span></span>\n<span class="line"><span style="color: #c9d1d9">                }</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        short f32_to_i16(float sample)</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            sample = sample * 32768;</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (sample &gt; 32767)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                return 32767;</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (sample &lt; -32768)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                return -32768;</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">            return (short) sample;</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Attach this script to the \u201CMicrophoneObject\u201D, and in the \u201CInspector\u201D tab click the \u201CDeepgramInstance\u201D field and select the \u201CDeepgramObject\u201D object we created earlier.</p>\n<p>In this script, we define the <code is:raw>MicrophoneInstance</code> class which contains an <code is:raw>AudioSource</code> member variable, a <code is:raw>DeepgramInstance</code> member variable, and 2 integer member\r\nvariables which help to keep track of where we are in the microphone\u2019s audio stream. The <code is:raw>Start</code> method will set up the microphone to stream audio data into\r\nthe <code is:raw>clip</code> of the <code is:raw>AudioSource</code> object, and will start playback of the <code is:raw>AudioSource</code>.</p>\n<p>The <code is:raw>Update</code> method of a <code is:raw>MonoBehavior</code> class gets called by the under-the-hood game loop every frame and is the typical place to handle game logic.\r\nIn our case, it gets the current position of the microphone\u2019s audio stream, compares it to the last position of the microphone\u2019s audio stream to\r\ncreate a buffer, <code is:raw>samples</code>, of floats the right size to store all of the new audio data since the last time <code is:raw>Update</code> was called, grabs that audio data via the method <code is:raw>GetData</code>\r\nand stores it in <code is:raw>samples</code>. Then, these <code is:raw>f32</code> samples are converted to <code is:raw>i16</code> samples, and then converted to raw bytes, and finally passed to the <code is:raw>DeepgramInstance</code>\u2019s <code is:raw>ProcessAudio</code>\r\nmethod which, as we mentioned before, will then pass that audio on to Deepgram to get transcribed!</p>\n<p>Now, we are <em>almost</em> ready to try out our demo. There is one more task to do to make the demo reasonably playable, and if you try to play the demo now, you may see what it is!\r\nCurrently, in order to get the microphone\u2019s audio data, the microphone\u2019s audio stream must play. However, having the microphone\u2019s audio play through your computer\u2019s speakers\r\ncan be problematic and lead to feedback issues (plus, hearing your voice in the game isn\u2019t the point). To fix this issue, go to the \u201CAssets\u201D panel, right-click,\r\nand select <code is:raw>Create -&gt; Audio Mixer</code>. Name the mixer \u201CMixer.\u201D</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_audio_mixer.png" alt="Add a Mixer." style="max-width: 1176px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Double click \u201CMixer\u201D in the \u201CAssets\u201D panel, then next to \u201CGroups\u201D click the \u201D+\u201D button and name the group \u201CMicrophone.\u201D\r\nNow go to the fader for this group and turn it all the way down.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/turn_fader_down.png" alt="Silence the Microphone group." style="max-width: 1090px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Now, click the \u201CMicrophoneObject\u201D in the \u201CHierarchy\u201D tab and then click on the field for \u201COutput\u201D in the \u201CAudio Source\u201D node in the \u201CInspector\u201D tab and select \u201CMicrophone (Mixer).\u201D\r\nThis will ensure the microphone audio can stream its data without being directed to your speakers!</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/send_audio_source_to_mixer_group.png" alt="Silence the Microphone group." style="max-width: 568px;display: block;margin-left: auto;margin-right: auto;" />\n<p>You should now be able to press \u201CPlay\u201D (\u25BA) and make the ball jump around by saying \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D or \u201Cdown\u201D in the microphone!</p>\n<h2 id="build-new-features">Build New Features</h2>\n<p>Controlling a single ball with commands has a noticeable amount of latency. This can be alleviated somewhat\r\nby using <a href="https://developers.deepgram.com/documentation/features/interim-results/">interim results</a>, however,\r\nthe same transcribed word might be present in subsequent interim results, so logic would have to be added\r\nto avoid double counting commands. Still, the use of interim results can vastly reduce latency, so I strongly\r\nsuggest trying it out! In addition, here are a few more things to think about and try out with this demo before diving into\r\na full-on speech-enhanced game:</p>\n<ul>\n<li>Change the <a href="https://docs.unity3d.com/Manual/class-PhysicMaterial.html">Physics Material</a> of the ball to make it bounce instead of stick to walls.</li>\n<li>Add more balls to the box - try making just one of them, several of them, or all of them react to the speech commands.</li>\n<li>Give the balls different colors, and implement logic to control each group (like \u201Cred, left!\u201D, \u201Cblue, up!\u201D).</li>\n<li>Remove gravity for balls and exchange the simple box with a sprawling level of walls.</li>\n</ul>\n<p>If you try out the above ideas, you may come to a fun idea for a game - how about a game along the lines of Pikmin, where you command\r\ndifferent groups of creatures to move to different parts of the map to accomplish objectives? Instead of using a complex user interface\r\nof buttons, mice, and/or a keyboard, the game could simply require you to dictate commands!</p>\n<h2 id="final-thoughts">Final Thoughts</h2>\n<p>Speech-enhanced games are not necessarily new, but until recently they have mostly centered around a handful of command words.\r\nWith today\u2019s ASR engines like Deepgram, supporting thousands of command words out of the box has become trivial, indeed transcribing entire\r\nconversations and complex commands is now easily within reach and has the power to enrich games. I\u2019ll end with a few ideas which\r\nmay give you some inspiration!</p>\n<ul>\n<li>Along the lines of the example mentioned in the previous section, build an RTS where you control units with your voice. There may be more\r\nlatency than you get with a mouse click, but this could be turned into a core game mechanic - maybe you are communicating with your units\r\nvia a radio, and any network + transcription latency would feel like latency of your units receiving your message.</li>\n<li>Also following up on this idea, make a game where you primarily control a single player, but have the option to give commands to other\r\nAI players on your team - these commands could be conveyed with your voice without having to swap to a complex menu, interrupting the control of\r\nyour primary character. (For a concrete example, think Hyrule Warriors.)</li>\n<li>For MOBAs where voice chat is not easily available (think Pok\xE9mon Unite), allow for command phrases to be selected via ASR instead of clunky menus.</li>\n<li>To avoid issues with latency entirely, make speech-enhanced sections of your game occur during context-sensitive situations where the main action\r\nof the game pauses so that reaction time becomes a non-issue. As an example, in many Zelda games, the game freezes when you pull out an instrument,\r\nand playing the right notes on the instrument can cause events to occur - imagine this but with ASR and specific phrases.</li>\n<li>For in-game voice chat, write a plugin that performs ASR for each player in their preferred\r\nlanguage (see Deepgram\u2019s supported languages <a href="https://developers.deepgram.com/documentation/features/language/">here</a>, and then passes\r\nthe resulting transcripts through a translator to display everyone\u2019s speech to everyone else in their preferred language.</li>\n</ul>\n<p>Speech-in-games is a relatively untapped area, so this list of ideas and suggestions is far from exhaustive, but I sincerely hope this helps\r\non the journey towards making games more immersive, interesting, and inclusive!</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re @DeepgramDevs.</p>' };
const frontmatter = { "title": "How to Add Deepgram Speech Recognition to Your Unity Game", "description": "In this tutorial, learn how to integrate Deepgram's automatic speech recognition engine into your Unity game.", "date": "2022-03-16T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1647451573/blog/2022/03/deepgram-unity-tutorial/assets/Building-a-Game-w-Unity-Deepgram%402x.jpg", "authors": ["nikola-whallon"], "category": "tutorial", "tags": ["game-dev", "unity"], "seo": { "title": "How to Add Deepgram Speech Recognition to Your Unity Game", "description": "In this tutorial, learn how to integrate Deepgram's automatic speech recognition engine into your Unity game." }, "shorturls": { "share": "https://dpgr.am/0692b8d", "twitter": "https://dpgr.am/fb3493d", "linkedin": "https://dpgr.am/da35424", "reddit": "https://dpgr.am/6adc409", "facebook": "https://dpgr.am/3ce4691" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661454022/blog/deepgram-unity-tutorial/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "pre-requisites", "text": "Pre-requisites" }, { "depth": 2, "slug": "try-the-demo", "text": "Try the Demo" }, { "depth": 2, "slug": "building-the-demo", "text": "Building the Demo" }, { "depth": 2, "slug": "setting-up-the-project", "text": "Setting Up the Project" }, { "depth": 2, "slug": "creating-physics-objects", "text": "Creating Physics Objects" }, { "depth": 2, "slug": "implementing-the-deepgram-integration", "text": "Implementing the Deepgram Integration" }, { "depth": 2, "slug": "build-new-features", "text": "Build New Features" }, { "depth": 2, "slug": "final-thoughts", "text": "Final Thoughts" }], "source": '\r\nIn this tutorial, we will be making a simple physics simulation in Unity with actions triggered by Deepgram\'s\r\nautomatic speech recognition (ASR) engine. Why use Deepgram with Unity? Well, Unity is an industry standard when it comes to game development,\r\nand while speech-enhanced games have been around for decades, high performance, easy-to-use ASR is relatively new, and Deepgram represents the cream-of-the-crop.\r\nSo if you are looking to try something new with your games, perhaps for a more immersive or accessible experience, I highly recommend trying this out!\r\n\r\nThis tutorial assumes no prior experience with Unity or C# (the language Unity uses for scripting). However, its\r\nfocus is on getting you quickly set up to integrate Deepgram in your Unity\r\nproject, and does not cover Unity game development or the C# language in depth. There are a plethora of resources out there to learn game development with Unity,\r\nand I highly recommend [checking out their learning website](https://learn.unity.com/) as a starting point!\r\n\r\nFinally, for an example of a simple game built with Deepgram ASR, you can check out [Spooky Speech Spells](https://spookyspeechspells.deepgram.com).\r\n\r\n## Pre-requisites\r\n\r\nYou will need:\r\n\r\n*   Unity installed on your machine - [download Unity here](https://unity.com/download). This tutorial was written with the Unity Editor version `2020.3.30f1`.\r\n*   *(Optional)* [VS Code](https://code.visualstudio.com/docs/other/unity) or [Script Inspector 3](https://assetstore.unity.com/packages/tools/visual-scripting/script-inspector-3-3535) for editing C# Unity scripts (you can use any text editor, but these are highly recommended for their Unity integration).\r\n*   A Deepgram API Key - [get an API Key here](https://console.deepgram.com/signup?jump=keys).\r\n\r\n## Try the Demo\r\n\r\nTo run the demo we are going to build and browse its files:\r\n\r\n*   Download [this repository](https://github.com/deepgram/UnityDeepgramDemo), open Unity, click "Open", and browse to and select the directory `UnityDeepgramDemo`.\r\n*   Edit the script `UnityDeepgramDemo/Assets/DeepgramInstance.cs` and replace the string `INSERT_YOUR_API_KEY` with your Deepgram API key.\r\n*   In the bottom left "Project" tab open `Assets -> Scenes` and double click "SampleScene" to load this scene.\r\n*   In the top center of the Unity editor, hit the "Play" (\u25BA) button.\r\n*   Say "left," "right," "up," and "down" to move the ball around!\r\n\r\n## Building the Demo\r\n\r\nIn the following sections, we will walk through step-by-step how to make this demo where you can move\r\na ball around a simulated physics environment just by commanding it via your computer\'s microphone.\r\n\r\n## Setting Up the Project\r\n\r\nOpen Unity and click "New project".\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/new_project.png" alt="Create a new project." style="max-width: 2272px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nYou will be presented with a list of templates - choose "2D", and under the "Project Settings" panel name the project "UnityDeepgramDemo" (or whatever you\'d like!)\r\nand choose a location for the project on your filesystem.\r\nThen click "Create project."\r\n\r\n![Create the project from the "2D" template.](https://res.cloudinary.com/deepgram/image/upload/v1647261812/blog/2022/03/deepgram-unity-tutorial/assets/create_the_project.png)\r\n\r\nWe are now in the Unity Editor. Our demo will rely on one external package to help us handle the websocket connection to Deepgram - [Native WebSockets](https://github.com/endel/NativeWebSocket).\r\nTo install Native WebSockets, first, open the Package Manager from `Window -> Package Manager`.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/open_package_manager.png" alt="Open the Package Manager." style="max-width: 466px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nThen click the "+" drop-down and click "Add package from git URL...".\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/add_package_from_git_url.png" alt="Add a package from a git URL." style="max-width: 400px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nEnter the URL: https://github.com/endel/NativeWebSocket.git#upm and click "Add."\r\n\r\nWe are now ready to start putting the demo together!\r\n\r\n## Creating Physics Objects\r\n\r\nIn the center of the Unity Editor are the "Scene" and "Game" tabs. We will spend most of our time in the "Scene" tab, though when we play the game, we will be shifted over to the "Game"\r\ntab. On the left side of the Unity Editor is the "Hierarchy" tab - this is where we will be adding our game objects.\r\n\r\nLet\'s add some physics objects to our scene - we are going to create a box out of 4 static (non-movable) walls, and add a dynamic (movable) ball in the center.\r\n\r\nIn the "Hierarchy" tab, right-click and select `2D Object -> Physics -> Static Sprite`.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_static_sprite.png" alt="Add a Static Sprite." style="max-width: 1166px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nWe now have a static square sprite in the center of our scene. Let\'s move this square to the left and make it a vertical rectangle to start building our box.\r\nTo do this, go to the "Inspector" tab on the right. Under "Transform," change the "X" "Position" to -5 and the "Y" "Scale" to 5. This will stretch the square\r\ninto a vertical rectangle 5 units tall, and place it 5 units to the left.\r\n\r\n![Create a static wall.](https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/wall_left.png)\r\n\r\nNow, right-click the "Static Sprite" object in the "Hierarchy" tab, click "Rename," and rename it "WallLeft." Let\'s do the same procedure to make a "WallRight," "WallUp," and "WallDown."\r\n\r\nFor "WallRight," change the "X" "Position" to 5 and the "Y" "Scale" to 5.\r\nFor "WallUp," change the "Y" "Position" to 3 and the "X" "Scale" to 9.\r\nAnd for the "WallDown," change the "Y" "Position" to -3 and the "X" "Scale" to 9.\r\nYou should now have a box which looks like this:\r\n\r\n![Our completed box.](https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/complete_box.png)\r\n\r\nLet\'s add a dynamic ball inside the box. Right-click inside the "Hierarchy" tab and select `2D Object -> Physics -> Dynamic Sprite` and name the object "Ball."\r\nDynamic sprites have gravity applied to them by default, and this can be changed if desired in the "Gravity Scale" field of the "Rigidbody 2D" node in the "Inspector" tab.\r\nFor now, let\'s leave it at the default value. Feel free to press "Play" (\u25BA) to start the game! You should see the ball fall to the bottom of the box - not much going on yet.\r\n(Note, however, that you will not be able to do certain edits on the game until you stop playing the game by pressing again on the "Play" (\u25BA) button.)\r\n\r\nFinally, let\'s attach a script to our "Ball" object. In the bottom panel, select the "Project" tab and open the "Assets" directory. Right-click in the "Assets"\r\npanel and select `Create -> C# Script`. Name the script `Ball` (on your OS\'s filesystem, the file will exist as `Ball.cs`). Open this script with your text\r\neditor of choice, and paste the following contents:\r\n\r\n```\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using UnityEngine;\r\n\r\n    public class Ball : MonoBehaviour\r\n    {\r\n        public int forceFactor = 300;\r\n\r\n        void Start()\r\n        {\r\n\r\n        }\r\n\r\n        void Update()\r\n        {\r\n\r\n        }\r\n\r\n        public void PushLeft()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.left * forceFactor);\r\n        }\r\n        public void PushRight()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.right * forceFactor);\r\n        }\r\n        public void PushUp()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.up * forceFactor);\r\n        }\r\n        public void PushDown()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.down * forceFactor);\r\n        }\r\n    }\r\n```\r\n\r\nThis script defines the class `Ball`, which inherits from Unity\'s `MonoBehavior` class. The class has one member variable, `forceFactor`, and defines\r\n4 methods that can be used to move the object, `PushLeft`, `PushRight`, `PushUp`, and `PushDown`. We will not use these methods yet, but when we\r\nimplement our Deepgram integration, we will trigger these methods when you say the words "left," "right," "up," and "down."\r\n\r\nSo now we have a "Ball" script and a "Ball" object, but they are not coupled yet! To attach the script to the object, click the object in the "Hierarchy"\r\ntab, and drag the "Ball" script to the "Add Component" button found at the bottom of the "Inspector" tab.\r\n\r\n## Implementing the Deepgram Integration\r\n\r\nTo implement the Deepgram integration, we will need to create an object which handles microphone input and an object which handles the websocket\r\nconnection to Deepgram.\r\n\r\nLet\'s start with the websocket handler. Right-click in the "Hierarchy" tab and select "Create Empty" - name this object "DeepgramObject." Now,\r\ncreate a new script and name it "DeepgramInstance." Edit the script and add the following contents:\r\n\r\n```\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using UnityEngine;\r\n    using UnityEditor;\r\n    using System.Text.RegularExpressions;\r\n\r\n    using NativeWebSocket;\r\n\r\n    [System.Serializable]\r\n    public class DeepgramResponse\r\n    {\r\n        public int[] channel_index;\r\n        public bool is_final;\r\n        public Channel channel;\r\n    }\r\n\r\n    [System.Serializable]\r\n    public class Channel\r\n    {\r\n        public Alternative[] alternatives;\r\n    }\r\n\r\n    [System.Serializable]\r\n    public class Alternative\r\n    {\r\n        public string transcript;\r\n    }\r\n\r\n    public class DeepgramInstance : MonoBehaviour\r\n    {\r\n        WebSocket websocket;\r\n\r\n        public Ball _ball;\r\n\r\n        async void Start()\r\n        {\r\n            var headers = new Dictionary<string, string>\r\n            {\r\n                { "Authorization", "Token INSERT_YOUR_API_KEY" }\r\n            };\r\n            websocket = new WebSocket("wss://api.deepgram.com/v1/listen?encoding=linear16&sample_rate=" + AudioSettings.outputSampleRate.ToString(), headers);\r\n\r\n            websocket.OnOpen += () =>\r\n            {\r\n                Debug.Log("Connected to Deepgram!");\r\n            };\r\n\r\n            websocket.OnError += (e) =>\r\n            {\r\n                Debug.Log("Error: " + e);\r\n            };\r\n\r\n            websocket.OnClose += (e) =>\r\n            {\r\n                Debug.Log("Connection closed!");\r\n            };\r\n\r\n            websocket.OnMessage += (bytes) =>\r\n            {\r\n                var message = System.Text.Encoding.UTF8.GetString(bytes);\r\n                Debug.Log("OnMessage: " + message);\r\n\r\n                DeepgramResponse deepgramResponse = new DeepgramResponse();\r\n                object boxedDeepgramResponse = deepgramResponse;\r\n                EditorJsonUtility.FromJsonOverwrite(message, boxedDeepgramResponse);\r\n                deepgramResponse = (DeepgramResponse) boxedDeepgramResponse;\r\n                if (deepgramResponse.is_final)\r\n                {\r\n                    var transcript = deepgramResponse.channel.alternatives[0].transcript;\r\n                    Debug.Log(transcript);\r\n                    int leftCount = new Regex(Regex.Escape("left")).Matches(transcript).Count;\r\n                    int rightCount = new Regex(Regex.Escape("right")).Matches(transcript).Count;\r\n                    int upCount = new Regex(Regex.Escape("up")).Matches(transcript).Count;\r\n                    int downCount = new Regex(Regex.Escape("down")).Matches(transcript).Count;\r\n                    for (int i = 0; i < leftCount; i++)\r\n                    {\r\n                        _ball.PushLeft();\r\n                    }\r\n                    for (int i = 0; i < rightCount; i++)\r\n                    {\r\n                        _ball.PushRight();\r\n                    }\r\n                    for (int i = 0; i < upCount; i++)\r\n                    {\r\n                        _ball.PushUp();\r\n                    }\r\n                    for (int i = 0; i < downCount; i++)\r\n                    {\r\n                        _ball.PushDown();\r\n                    }\r\n                }\r\n            };\r\n\r\n            await websocket.Connect();\r\n        }\r\n        void Update()\r\n        {\r\n        #if !UNITY_WEBGL || UNITY_EDITOR\r\n            websocket.DispatchMessageQueue();\r\n        #endif\r\n        }\r\n\r\n        private async void OnApplicationQuit()\r\n        {\r\n            await websocket.Close();\r\n        }\r\n\r\n        public async void ProcessAudio(byte[] audio)\r\n        {\r\n            if (websocket.State == WebSocketState.Open)\r\n            {\r\n                await websocket.Send(audio);\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nInsert your Deepgram API key where the script says "INSERT\\_YOUR\\_API\\_KEY," then\r\nattach this script to the "DeepgramObject", and in the "Inspector" tab click the "Ball" field and select the "Ball" object we created earlier.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647404524/blog/2022/03/deepgram-unity-tutorial/assets/add_ball_to_deepgram_object.png" alt="Adding a Ball object reference to the DeepgramObject." style="max-width: 556px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nOk, so what\'s going on here? Well, first the script defines the classes `DeepgramResponse`, `Channel`, and `Alternative` which we will use to deserialize\r\nthe Deepgram ASR response, which is in JSON format. Then the script defines the class `DeepgramInstace` which has two member variables: a `WebSocket` object,\r\ndefined by `NativeWebSocket`, and a `Ball` object, defined by us in the "Ball" script.\r\n\r\nWhen the object that this script is attached to gets created, the `Start` method gets called. Inside `Start`, we create a new websocket connection to Deepgram\r\nand define functions that need to get executed when that connection opens, closes, receives an error, and receives a message. When the websocket connection\r\nreceives a message, we first parse it as a string, and then use `EditorJsonUtility` to parse the string as a JSON object, deserializing it as a `DeepgramResponse`\r\nobject. We can then directly access the transcript contained in this Deepgram message, count how many times the words "left," "right," "up," and "down" were spoken,\r\nand for each time these words were spoken, we call the `PushLeft`, `PushRight`, `PushUp`, and `PushDown` methods on our `Ball` object!\r\n\r\nNear the end of the script is one more method of note: `ProcessAudio`. This method will be called by our microphone object, which will pass in raw audio. `ProcessAudio`\r\nwill then check to see if the websocket connection is open, and if it is, pass the audio along to Deepgram.\r\n\r\nNow let\'s create an object to handle the microphone input. Right-click in the "Hierarchy" tab, select `Audio -> AudioSource`, and name this object "MicrophoneObject."\r\nThen create a new script called "MicrophoneInstance" and make its contents the following:\r\n\r\n```\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using UnityEngine;\r\n    using UnityEngine.Audio;\r\n\r\n    [RequireComponent (typeof (AudioSource))]\r\n    public class MicrophoneInstance : MonoBehaviour\r\n    {\r\n        AudioSource _audioSource;\r\n        int lastPosition, currentPosition;\r\n\r\n        public DeepgramInstance _deepgramInstance;\r\n\r\n        void Start()\r\n        {\r\n            _audioSource = GetComponent<AudioSource> ();\r\n            if (Microphone.devices.Length > 0)\r\n            {\r\n                _audioSource.clip = Microphone.Start(null, true, 10, AudioSettings.outputSampleRate);\r\n            }\r\n            else\r\n            {\r\n                Debug.Log("This will crash!");\r\n            }\r\n\r\n            _audioSource.Play();\r\n        }\r\n\r\n        void Update()\r\n        {\r\n            if ((currentPosition = Microphone.GetPosition(null)) > 0)\r\n            {\r\n                if (lastPosition > currentPosition)\r\n                    lastPosition = 0;\r\n\r\n                if (currentPosition - lastPosition > 0)\r\n                {\r\n                    float[] samples = new float[(currentPosition - lastPosition) * _audioSource.clip.channels];\r\n                    _audioSource.clip.GetData(samples, lastPosition);\r\n\r\n                    short[] samplesAsShorts = new short[(currentPosition - lastPosition) * _audioSource.clip.channels];\r\n                    for (int i = 0; i < samples.Length; i++)\r\n                    {\r\n                        samplesAsShorts[i] = f32_to_i16(samples[i]);\r\n                    }\r\n\r\n                    var samplesAsBytes = new byte[samplesAsShorts.Length * 2];\r\n                    System.Buffer.BlockCopy(samplesAsShorts, 0, samplesAsBytes, 0, samplesAsBytes.Length);\r\n                    _deepgramInstance.ProcessAudio(samplesAsBytes);\r\n\r\n                    if (!GetComponent<AudioSource>().isPlaying)\r\n                        GetComponent<AudioSource>().Play();\r\n                    lastPosition = currentPosition;\r\n                }\r\n            }\r\n        }\r\n\r\n        short f32_to_i16(float sample)\r\n        {\r\n            sample = sample * 32768;\r\n            if (sample > 32767)\r\n            {\r\n                return 32767;\r\n            }\r\n            if (sample < -32768)\r\n            {\r\n                return -32768;\r\n            }\r\n            return (short) sample;\r\n        }\r\n    }\r\n```\r\n\r\nAttach this script to the "MicrophoneObject", and in the "Inspector" tab click the "DeepgramInstance" field and select the "DeepgramObject" object we created earlier.\r\n\r\nIn this script, we define the `MicrophoneInstance` class which contains an `AudioSource` member variable, a `DeepgramInstance` member variable, and 2 integer member\r\nvariables which help to keep track of where we are in the microphone\'s audio stream. The `Start` method will set up the microphone to stream audio data into\r\nthe `clip` of the `AudioSource` object, and will start playback of the `AudioSource`.\r\n\r\nThe `Update` method of a `MonoBehavior` class gets called by the under-the-hood game loop every frame and is the typical place to handle game logic.\r\nIn our case, it gets the current position of the microphone\'s audio stream, compares it to the last position of the microphone\'s audio stream to\r\ncreate a buffer, `samples`, of floats the right size to store all of the new audio data since the last time `Update` was called, grabs that audio data via the method `GetData`\r\nand stores it in `samples`. Then, these `f32` samples are converted to `i16` samples, and then converted to raw bytes, and finally passed to the `DeepgramInstance`\'s `ProcessAudio`\r\nmethod which, as we mentioned before, will then pass that audio on to Deepgram to get transcribed!\r\n\r\nNow, we are *almost* ready to try out our demo. There is one more task to do to make the demo reasonably playable, and if you try to play the demo now, you may see what it is!\r\nCurrently, in order to get the microphone\'s audio data, the microphone\'s audio stream must play. However, having the microphone\'s audio play through your computer\'s speakers\r\ncan be problematic and lead to feedback issues (plus, hearing your voice in the game isn\'t the point). To fix this issue, go to the "Assets" panel, right-click,\r\nand select `Create -> Audio Mixer`. Name the mixer "Mixer."\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_audio_mixer.png" alt="Add a Mixer." style="max-width: 1176px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nDouble click "Mixer" in the "Assets" panel, then next to "Groups" click the "+" button and name the group "Microphone."\r\nNow go to the fader for this group and turn it all the way down.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/turn_fader_down.png" alt="Silence the Microphone group." style="max-width: 1090px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nNow, click the "MicrophoneObject" in the "Hierarchy" tab and then click on the field for "Output" in the "Audio Source" node in the "Inspector" tab and select "Microphone (Mixer)."\r\nThis will ensure the microphone audio can stream its data without being directed to your speakers!\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/send_audio_source_to_mixer_group.png" alt="Silence the Microphone group." style="max-width: 568px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nYou should now be able to press "Play" (\u25BA) and make the ball jump around by saying "left," "right," "up," or "down" in the microphone!\r\n\r\n## Build New Features\r\n\r\nControlling a single ball with commands has a noticeable amount of latency. This can be alleviated somewhat\r\nby using [interim results](https://developers.deepgram.com/documentation/features/interim-results/), however,\r\nthe same transcribed word might be present in subsequent interim results, so logic would have to be added\r\nto avoid double counting commands. Still, the use of interim results can vastly reduce latency, so I strongly\r\nsuggest trying it out! In addition, here are a few more things to think about and try out with this demo before diving into\r\na full-on speech-enhanced game:\r\n\r\n*   Change the [Physics Material](https://docs.unity3d.com/Manual/class-PhysicMaterial.html) of the ball to make it bounce instead of stick to walls.\r\n*   Add more balls to the box - try making just one of them, several of them, or all of them react to the speech commands.\r\n*   Give the balls different colors, and implement logic to control each group (like "red, left!", "blue, up!").\r\n*   Remove gravity for balls and exchange the simple box with a sprawling level of walls.\r\n\r\nIf you try out the above ideas, you may come to a fun idea for a game - how about a game along the lines of Pikmin, where you command\r\ndifferent groups of creatures to move to different parts of the map to accomplish objectives? Instead of using a complex user interface\r\nof buttons, mice, and/or a keyboard, the game could simply require you to dictate commands!\r\n\r\n## Final Thoughts\r\n\r\nSpeech-enhanced games are not necessarily new, but until recently they have mostly centered around a handful of command words.\r\nWith today\'s ASR engines like Deepgram, supporting thousands of command words out of the box has become trivial, indeed transcribing entire\r\nconversations and complex commands is now easily within reach and has the power to enrich games. I\'ll end with a few ideas which\r\nmay give you some inspiration!\r\n\r\n*   Along the lines of the example mentioned in the previous section, build an RTS where you control units with your voice. There may be more\r\n    latency than you get with a mouse click, but this could be turned into a core game mechanic - maybe you are communicating with your units\r\n    via a radio, and any network + transcription latency would feel like latency of your units receiving your message.\r\n*   Also following up on this idea, make a game where you primarily control a single player, but have the option to give commands to other\r\n    AI players on your team - these commands could be conveyed with your voice without having to swap to a complex menu, interrupting the control of\r\n    your primary character. (For a concrete example, think Hyrule Warriors.)\r\n*   For MOBAs where voice chat is not easily available (think Pok\xE9mon Unite), allow for command phrases to be selected via ASR instead of clunky menus.\r\n*   To avoid issues with latency entirely, make speech-enhanced sections of your game occur during context-sensitive situations where the main action\r\n    of the game pauses so that reaction time becomes a non-issue. As an example, in many Zelda games, the game freezes when you pull out an instrument,\r\n    and playing the right notes on the instrument can cause events to occur - imagine this but with ASR and specific phrases.\r\n*   For in-game voice chat, write a plugin that performs ASR for each player in their preferred\r\n    language (see Deepgram\'s supported languages [here](https://developers.deepgram.com/documentation/features/language/), and then passes\r\n    the resulting transcripts through a translator to display everyone\'s speech to everyone else in their preferred language.\r\n\r\nSpeech-in-games is a relatively untapped area, so this list of ideas and suggestions is far from exhaustive, but I sincerely hope this helps\r\non the journey towards making games more immersive, interesting, and inclusive!\r\n\r\nIf you have any questions, please feel free to reach out on Twitter - we\'re @DeepgramDevs.\r\n\r\n        ', "html": '<p>In this tutorial, we will be making a simple physics simulation in Unity with actions triggered by Deepgram\u2019s\r\nautomatic speech recognition (ASR) engine. Why use Deepgram with Unity? Well, Unity is an industry standard when it comes to game development,\r\nand while speech-enhanced games have been around for decades, high performance, easy-to-use ASR is relatively new, and Deepgram represents the cream-of-the-crop.\r\nSo if you are looking to try something new with your games, perhaps for a more immersive or accessible experience, I highly recommend trying this out!</p>\n<p>This tutorial assumes no prior experience with Unity or C# (the language Unity uses for scripting). However, its\r\nfocus is on getting you quickly set up to integrate Deepgram in your Unity\r\nproject, and does not cover Unity game development or the C# language in depth. There are a plethora of resources out there to learn game development with Unity,\r\nand I highly recommend <a href="https://learn.unity.com/">checking out their learning website</a> as a starting point!</p>\n<p>Finally, for an example of a simple game built with Deepgram ASR, you can check out <a href="https://spookyspeechspells.deepgram.com">Spooky Speech Spells</a>.</p>\n<h2 id="pre-requisites">Pre-requisites</h2>\n<p>You will need:</p>\n<ul>\n<li>Unity installed on your machine - <a href="https://unity.com/download">download Unity here</a>. This tutorial was written with the Unity Editor version <code is:raw>2020.3.30f1</code>.</li>\n<li><em>(Optional)</em> <a href="https://code.visualstudio.com/docs/other/unity">VS Code</a> or <a href="https://assetstore.unity.com/packages/tools/visual-scripting/script-inspector-3-3535">Script Inspector 3</a> for editing C# Unity scripts (you can use any text editor, but these are highly recommended for their Unity integration).</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get an API Key here</a>.</li>\n</ul>\n<h2 id="try-the-demo">Try the Demo</h2>\n<p>To run the demo we are going to build and browse its files:</p>\n<ul>\n<li>Download <a href="https://github.com/deepgram/UnityDeepgramDemo">this repository</a>, open Unity, click \u201COpen\u201D, and browse to and select the directory <code is:raw>UnityDeepgramDemo</code>.</li>\n<li>Edit the script <code is:raw>UnityDeepgramDemo/Assets/DeepgramInstance.cs</code> and replace the string <code is:raw>INSERT_YOUR_API_KEY</code> with your Deepgram API key.</li>\n<li>In the bottom left \u201CProject\u201D tab open <code is:raw>Assets -&gt; Scenes</code> and double click \u201CSampleScene\u201D to load this scene.</li>\n<li>In the top center of the Unity editor, hit the \u201CPlay\u201D (\u25BA) button.</li>\n<li>Say \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D and \u201Cdown\u201D to move the ball around!</li>\n</ul>\n<h2 id="building-the-demo">Building the Demo</h2>\n<p>In the following sections, we will walk through step-by-step how to make this demo where you can move\r\na ball around a simulated physics environment just by commanding it via your computer\u2019s microphone.</p>\n<h2 id="setting-up-the-project">Setting Up the Project</h2>\n<p>Open Unity and click \u201CNew project\u201D.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/new_project.png" alt="Create a new project." style="max-width: 2272px;display: block;margin-left: auto;margin-right: auto;" />\n<p>You will be presented with a list of templates - choose \u201C2D\u201D, and under the \u201CProject Settings\u201D panel name the project \u201CUnityDeepgramDemo\u201D (or whatever you\u2019d like!)\r\nand choose a location for the project on your filesystem.\r\nThen click \u201CCreate project.\u201D</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647261812/blog/2022/03/deepgram-unity-tutorial/assets/create_the_project.png" alt="Create the project from the &#x22;2D&#x22; template."></p>\n<p>We are now in the Unity Editor. Our demo will rely on one external package to help us handle the websocket connection to Deepgram - <a href="https://github.com/endel/NativeWebSocket">Native WebSockets</a>.\r\nTo install Native WebSockets, first, open the Package Manager from <code is:raw>Window -&gt; Package Manager</code>.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/open_package_manager.png" alt="Open the Package Manager." style="max-width: 466px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Then click the \u201D+\u201D drop-down and click \u201CAdd package from git URL\u2026\u201C.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/add_package_from_git_url.png" alt="Add a package from a git URL." style="max-width: 400px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Enter the URL: <a href="https://github.com/endel/NativeWebSocket.git#upm">https://github.com/endel/NativeWebSocket.git#upm</a> and click \u201CAdd.\u201D</p>\n<p>We are now ready to start putting the demo together!</p>\n<h2 id="creating-physics-objects">Creating Physics Objects</h2>\n<p>In the center of the Unity Editor are the \u201CScene\u201D and \u201CGame\u201D tabs. We will spend most of our time in the \u201CScene\u201D tab, though when we play the game, we will be shifted over to the \u201CGame\u201D\r\ntab. On the left side of the Unity Editor is the \u201CHierarchy\u201D tab - this is where we will be adding our game objects.</p>\n<p>Let\u2019s add some physics objects to our scene - we are going to create a box out of 4 static (non-movable) walls, and add a dynamic (movable) ball in the center.</p>\n<p>In the \u201CHierarchy\u201D tab, right-click and select <code is:raw>2D Object -&gt; Physics -&gt; Static Sprite</code>.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_static_sprite.png" alt="Add a Static Sprite." style="max-width: 1166px;display: block;margin-left: auto;margin-right: auto;" />\n<p>We now have a static square sprite in the center of our scene. Let\u2019s move this square to the left and make it a vertical rectangle to start building our box.\r\nTo do this, go to the \u201CInspector\u201D tab on the right. Under \u201CTransform,\u201D change the \u201CX\u201D \u201CPosition\u201D to -5 and the \u201CY\u201D \u201CScale\u201D to 5. This will stretch the square\r\ninto a vertical rectangle 5 units tall, and place it 5 units to the left.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/wall_left.png" alt="Create a static wall."></p>\n<p>Now, right-click the \u201CStatic Sprite\u201D object in the \u201CHierarchy\u201D tab, click \u201CRename,\u201D and rename it \u201CWallLeft.\u201D Let\u2019s do the same procedure to make a \u201CWallRight,\u201D \u201CWallUp,\u201D and \u201CWallDown.\u201D</p>\n<p>For \u201CWallRight,\u201D change the \u201CX\u201D \u201CPosition\u201D to 5 and the \u201CY\u201D \u201CScale\u201D to 5.\r\nFor \u201CWallUp,\u201D change the \u201CY\u201D \u201CPosition\u201D to 3 and the \u201CX\u201D \u201CScale\u201D to 9.\r\nAnd for the \u201CWallDown,\u201D change the \u201CY\u201D \u201CPosition\u201D to -3 and the \u201CX\u201D \u201CScale\u201D to 9.\r\nYou should now have a box which looks like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/complete_box.png" alt="Our completed box."></p>\n<p>Let\u2019s add a dynamic ball inside the box. Right-click inside the \u201CHierarchy\u201D tab and select <code is:raw>2D Object -&gt; Physics -&gt; Dynamic Sprite</code> and name the object \u201CBall.\u201D\r\nDynamic sprites have gravity applied to them by default, and this can be changed if desired in the \u201CGravity Scale\u201D field of the \u201CRigidbody 2D\u201D node in the \u201CInspector\u201D tab.\r\nFor now, let\u2019s leave it at the default value. Feel free to press \u201CPlay\u201D (\u25BA) to start the game! You should see the ball fall to the bottom of the box - not much going on yet.\r\n(Note, however, that you will not be able to do certain edits on the game until you stop playing the game by pressing again on the \u201CPlay\u201D (\u25BA) button.)</p>\n<p>Finally, let\u2019s attach a script to our \u201CBall\u201D object. In the bottom panel, select the \u201CProject\u201D tab and open the \u201CAssets\u201D directory. Right-click in the \u201CAssets\u201D\r\npanel and select <code is:raw>Create -&gt; C# Script</code>. Name the script <code is:raw>Ball</code> (on your OS\u2019s filesystem, the file will exist as <code is:raw>Ball.cs</code>). Open this script with your text\r\neditor of choice, and paste the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    public class Ball : MonoBehaviour</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public int forceFactor = 300;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Start()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushLeft()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.left * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushRight()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.right * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushUp()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.up * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushDown()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.down * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>This script defines the class <code is:raw>Ball</code>, which inherits from Unity\u2019s <code is:raw>MonoBehavior</code> class. The class has one member variable, <code is:raw>forceFactor</code>, and defines\r\n4 methods that can be used to move the object, <code is:raw>PushLeft</code>, <code is:raw>PushRight</code>, <code is:raw>PushUp</code>, and <code is:raw>PushDown</code>. We will not use these methods yet, but when we\r\nimplement our Deepgram integration, we will trigger these methods when you say the words \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D and \u201Cdown.\u201D</p>\n<p>So now we have a \u201CBall\u201D script and a \u201CBall\u201D object, but they are not coupled yet! To attach the script to the object, click the object in the \u201CHierarchy\u201D\r\ntab, and drag the \u201CBall\u201D script to the \u201CAdd Component\u201D button found at the bottom of the \u201CInspector\u201D tab.</p>\n<h2 id="implementing-the-deepgram-integration">Implementing the Deepgram Integration</h2>\n<p>To implement the Deepgram integration, we will need to create an object which handles microphone input and an object which handles the websocket\r\nconnection to Deepgram.</p>\n<p>Let\u2019s start with the websocket handler. Right-click in the \u201CHierarchy\u201D tab and select \u201CCreate Empty\u201D - name this object \u201CDeepgramObject.\u201D Now,\r\ncreate a new script and name it \u201CDeepgramInstance.\u201D Edit the script and add the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEditor;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Text.RegularExpressions;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    using NativeWebSocket;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class DeepgramResponse</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public int[] channel_index;</span></span>\n<span class="line"><span style="color: #c9d1d9">        public bool is_final;</span></span>\n<span class="line"><span style="color: #c9d1d9">        public Channel channel;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class Channel</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public Alternative[] alternatives;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class Alternative</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public string transcript;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    public class DeepgramInstance : MonoBehaviour</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        WebSocket websocket;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public Ball _ball;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        async void Start()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            var headers = new Dictionary&lt;string, string&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                { &quot;Authorization&quot;, &quot;Token INSERT_YOUR_API_KEY&quot; }</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket = new WebSocket(&quot;wss://api.deepgram.com/v1/listen?encoding=linear16&amp;sample_rate=&quot; + AudioSettings.outputSampleRate.ToString(), headers);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnOpen += () =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Connected to Deepgram!&quot;);</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnError += (e) =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Error: &quot; + e);</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnClose += (e) =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Connection closed!&quot;);</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnMessage += (bytes) =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                var message = System.Text.Encoding.UTF8.GetString(bytes);</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;OnMessage: &quot; + message);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                DeepgramResponse deepgramResponse = new DeepgramResponse();</span></span>\n<span class="line"><span style="color: #c9d1d9">                object boxedDeepgramResponse = deepgramResponse;</span></span>\n<span class="line"><span style="color: #c9d1d9">                EditorJsonUtility.FromJsonOverwrite(message, boxedDeepgramResponse);</span></span>\n<span class="line"><span style="color: #c9d1d9">                deepgramResponse = (DeepgramResponse) boxedDeepgramResponse;</span></span>\n<span class="line"><span style="color: #c9d1d9">                if (deepgramResponse.is_final)</span></span>\n<span class="line"><span style="color: #c9d1d9">                {</span></span>\n<span class="line"><span style="color: #c9d1d9">                    var transcript = deepgramResponse.channel.alternatives[0].transcript;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    Debug.Log(transcript);</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int leftCount = new Regex(Regex.Escape(&quot;left&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int rightCount = new Regex(Regex.Escape(&quot;right&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int upCount = new Regex(Regex.Escape(&quot;up&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int downCount = new Regex(Regex.Escape(&quot;down&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; leftCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushLeft();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; rightCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushRight();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; upCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushUp();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; downCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushDown();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                }</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            await websocket.Connect();</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">        #if !UNITY_WEBGL || UNITY_EDITOR</span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.DispatchMessageQueue();</span></span>\n<span class="line"><span style="color: #c9d1d9">        #endif</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        private async void OnApplicationQuit()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            await websocket.Close();</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public async void ProcessAudio(byte[] audio)</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (websocket.State == WebSocketState.Open)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                await websocket.Send(audio);</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Insert your Deepgram API key where the script says \u201CINSERT_YOUR_API_KEY,\u201D then\r\nattach this script to the \u201CDeepgramObject\u201D, and in the \u201CInspector\u201D tab click the \u201CBall\u201D field and select the \u201CBall\u201D object we created earlier.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647404524/blog/2022/03/deepgram-unity-tutorial/assets/add_ball_to_deepgram_object.png" alt="Adding a Ball object reference to the DeepgramObject." style="max-width: 556px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Ok, so what\u2019s going on here? Well, first the script defines the classes <code is:raw>DeepgramResponse</code>, <code is:raw>Channel</code>, and <code is:raw>Alternative</code> which we will use to deserialize\r\nthe Deepgram ASR response, which is in JSON format. Then the script defines the class <code is:raw>DeepgramInstace</code> which has two member variables: a <code is:raw>WebSocket</code> object,\r\ndefined by <code is:raw>NativeWebSocket</code>, and a <code is:raw>Ball</code> object, defined by us in the \u201CBall\u201D script.</p>\n<p>When the object that this script is attached to gets created, the <code is:raw>Start</code> method gets called. Inside <code is:raw>Start</code>, we create a new websocket connection to Deepgram\r\nand define functions that need to get executed when that connection opens, closes, receives an error, and receives a message. When the websocket connection\r\nreceives a message, we first parse it as a string, and then use <code is:raw>EditorJsonUtility</code> to parse the string as a JSON object, deserializing it as a <code is:raw>DeepgramResponse</code>\r\nobject. We can then directly access the transcript contained in this Deepgram message, count how many times the words \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D and \u201Cdown\u201D were spoken,\r\nand for each time these words were spoken, we call the <code is:raw>PushLeft</code>, <code is:raw>PushRight</code>, <code is:raw>PushUp</code>, and <code is:raw>PushDown</code> methods on our <code is:raw>Ball</code> object!</p>\n<p>Near the end of the script is one more method of note: <code is:raw>ProcessAudio</code>. This method will be called by our microphone object, which will pass in raw audio. <code is:raw>ProcessAudio</code>\r\nwill then check to see if the websocket connection is open, and if it is, pass the audio along to Deepgram.</p>\n<p>Now let\u2019s create an object to handle the microphone input. Right-click in the \u201CHierarchy\u201D tab, select <code is:raw>Audio -&gt; AudioSource</code>, and name this object \u201CMicrophoneObject.\u201D\r\nThen create a new script called \u201CMicrophoneInstance\u201D and make its contents the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine.Audio;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [RequireComponent (typeof (AudioSource))]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class MicrophoneInstance : MonoBehaviour</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        AudioSource _audioSource;</span></span>\n<span class="line"><span style="color: #c9d1d9">        int lastPosition, currentPosition;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public DeepgramInstance _deepgramInstance;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Start()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            _audioSource = GetComponent&lt;AudioSource&gt; ();</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (Microphone.devices.Length &gt; 0)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                _audioSource.clip = Microphone.Start(null, true, 10, AudioSettings.outputSampleRate);</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">            else</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;This will crash!&quot;);</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            _audioSource.Play();</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            if ((currentPosition = Microphone.GetPosition(null)) &gt; 0)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                if (lastPosition &gt; currentPosition)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    lastPosition = 0;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                if (currentPosition - lastPosition &gt; 0)</span></span>\n<span class="line"><span style="color: #c9d1d9">                {</span></span>\n<span class="line"><span style="color: #c9d1d9">                    float[] samples = new float[(currentPosition - lastPosition) * _audioSource.clip.channels];</span></span>\n<span class="line"><span style="color: #c9d1d9">                    _audioSource.clip.GetData(samples, lastPosition);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                    short[] samplesAsShorts = new short[(currentPosition - lastPosition) * _audioSource.clip.channels];</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; samples.Length; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        samplesAsShorts[i] = f32_to_i16(samples[i]);</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                    var samplesAsBytes = new byte[samplesAsShorts.Length * 2];</span></span>\n<span class="line"><span style="color: #c9d1d9">                    System.Buffer.BlockCopy(samplesAsShorts, 0, samplesAsBytes, 0, samplesAsBytes.Length);</span></span>\n<span class="line"><span style="color: #c9d1d9">                    _deepgramInstance.ProcessAudio(samplesAsBytes);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                    if (!GetComponent&lt;AudioSource&gt;().isPlaying)</span></span>\n<span class="line"><span style="color: #c9d1d9">                        GetComponent&lt;AudioSource&gt;().Play();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    lastPosition = currentPosition;</span></span>\n<span class="line"><span style="color: #c9d1d9">                }</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        short f32_to_i16(float sample)</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            sample = sample * 32768;</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (sample &gt; 32767)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                return 32767;</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (sample &lt; -32768)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                return -32768;</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">            return (short) sample;</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Attach this script to the \u201CMicrophoneObject\u201D, and in the \u201CInspector\u201D tab click the \u201CDeepgramInstance\u201D field and select the \u201CDeepgramObject\u201D object we created earlier.</p>\n<p>In this script, we define the <code is:raw>MicrophoneInstance</code> class which contains an <code is:raw>AudioSource</code> member variable, a <code is:raw>DeepgramInstance</code> member variable, and 2 integer member\r\nvariables which help to keep track of where we are in the microphone\u2019s audio stream. The <code is:raw>Start</code> method will set up the microphone to stream audio data into\r\nthe <code is:raw>clip</code> of the <code is:raw>AudioSource</code> object, and will start playback of the <code is:raw>AudioSource</code>.</p>\n<p>The <code is:raw>Update</code> method of a <code is:raw>MonoBehavior</code> class gets called by the under-the-hood game loop every frame and is the typical place to handle game logic.\r\nIn our case, it gets the current position of the microphone\u2019s audio stream, compares it to the last position of the microphone\u2019s audio stream to\r\ncreate a buffer, <code is:raw>samples</code>, of floats the right size to store all of the new audio data since the last time <code is:raw>Update</code> was called, grabs that audio data via the method <code is:raw>GetData</code>\r\nand stores it in <code is:raw>samples</code>. Then, these <code is:raw>f32</code> samples are converted to <code is:raw>i16</code> samples, and then converted to raw bytes, and finally passed to the <code is:raw>DeepgramInstance</code>\u2019s <code is:raw>ProcessAudio</code>\r\nmethod which, as we mentioned before, will then pass that audio on to Deepgram to get transcribed!</p>\n<p>Now, we are <em>almost</em> ready to try out our demo. There is one more task to do to make the demo reasonably playable, and if you try to play the demo now, you may see what it is!\r\nCurrently, in order to get the microphone\u2019s audio data, the microphone\u2019s audio stream must play. However, having the microphone\u2019s audio play through your computer\u2019s speakers\r\ncan be problematic and lead to feedback issues (plus, hearing your voice in the game isn\u2019t the point). To fix this issue, go to the \u201CAssets\u201D panel, right-click,\r\nand select <code is:raw>Create -&gt; Audio Mixer</code>. Name the mixer \u201CMixer.\u201D</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_audio_mixer.png" alt="Add a Mixer." style="max-width: 1176px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Double click \u201CMixer\u201D in the \u201CAssets\u201D panel, then next to \u201CGroups\u201D click the \u201D+\u201D button and name the group \u201CMicrophone.\u201D\r\nNow go to the fader for this group and turn it all the way down.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/turn_fader_down.png" alt="Silence the Microphone group." style="max-width: 1090px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Now, click the \u201CMicrophoneObject\u201D in the \u201CHierarchy\u201D tab and then click on the field for \u201COutput\u201D in the \u201CAudio Source\u201D node in the \u201CInspector\u201D tab and select \u201CMicrophone (Mixer).\u201D\r\nThis will ensure the microphone audio can stream its data without being directed to your speakers!</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/send_audio_source_to_mixer_group.png" alt="Silence the Microphone group." style="max-width: 568px;display: block;margin-left: auto;margin-right: auto;" />\n<p>You should now be able to press \u201CPlay\u201D (\u25BA) and make the ball jump around by saying \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D or \u201Cdown\u201D in the microphone!</p>\n<h2 id="build-new-features">Build New Features</h2>\n<p>Controlling a single ball with commands has a noticeable amount of latency. This can be alleviated somewhat\r\nby using <a href="https://developers.deepgram.com/documentation/features/interim-results/">interim results</a>, however,\r\nthe same transcribed word might be present in subsequent interim results, so logic would have to be added\r\nto avoid double counting commands. Still, the use of interim results can vastly reduce latency, so I strongly\r\nsuggest trying it out! In addition, here are a few more things to think about and try out with this demo before diving into\r\na full-on speech-enhanced game:</p>\n<ul>\n<li>Change the <a href="https://docs.unity3d.com/Manual/class-PhysicMaterial.html">Physics Material</a> of the ball to make it bounce instead of stick to walls.</li>\n<li>Add more balls to the box - try making just one of them, several of them, or all of them react to the speech commands.</li>\n<li>Give the balls different colors, and implement logic to control each group (like \u201Cred, left!\u201D, \u201Cblue, up!\u201D).</li>\n<li>Remove gravity for balls and exchange the simple box with a sprawling level of walls.</li>\n</ul>\n<p>If you try out the above ideas, you may come to a fun idea for a game - how about a game along the lines of Pikmin, where you command\r\ndifferent groups of creatures to move to different parts of the map to accomplish objectives? Instead of using a complex user interface\r\nof buttons, mice, and/or a keyboard, the game could simply require you to dictate commands!</p>\n<h2 id="final-thoughts">Final Thoughts</h2>\n<p>Speech-enhanced games are not necessarily new, but until recently they have mostly centered around a handful of command words.\r\nWith today\u2019s ASR engines like Deepgram, supporting thousands of command words out of the box has become trivial, indeed transcribing entire\r\nconversations and complex commands is now easily within reach and has the power to enrich games. I\u2019ll end with a few ideas which\r\nmay give you some inspiration!</p>\n<ul>\n<li>Along the lines of the example mentioned in the previous section, build an RTS where you control units with your voice. There may be more\r\nlatency than you get with a mouse click, but this could be turned into a core game mechanic - maybe you are communicating with your units\r\nvia a radio, and any network + transcription latency would feel like latency of your units receiving your message.</li>\n<li>Also following up on this idea, make a game where you primarily control a single player, but have the option to give commands to other\r\nAI players on your team - these commands could be conveyed with your voice without having to swap to a complex menu, interrupting the control of\r\nyour primary character. (For a concrete example, think Hyrule Warriors.)</li>\n<li>For MOBAs where voice chat is not easily available (think Pok\xE9mon Unite), allow for command phrases to be selected via ASR instead of clunky menus.</li>\n<li>To avoid issues with latency entirely, make speech-enhanced sections of your game occur during context-sensitive situations where the main action\r\nof the game pauses so that reaction time becomes a non-issue. As an example, in many Zelda games, the game freezes when you pull out an instrument,\r\nand playing the right notes on the instrument can cause events to occur - imagine this but with ASR and specific phrases.</li>\n<li>For in-game voice chat, write a plugin that performs ASR for each player in their preferred\r\nlanguage (see Deepgram\u2019s supported languages <a href="https://developers.deepgram.com/documentation/features/language/">here</a>, and then passes\r\nthe resulting transcripts through a translator to display everyone\u2019s speech to everyone else in their preferred language.</li>\n</ul>\n<p>Speech-in-games is a relatively untapped area, so this list of ideas and suggestions is far from exhaustive, but I sincerely hope this helps\r\non the journey towards making games more immersive, interesting, and inclusive!</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re @DeepgramDevs.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/deepgram-unity-tutorial/index.md" };
function rawContent() {
  return '\r\nIn this tutorial, we will be making a simple physics simulation in Unity with actions triggered by Deepgram\'s\r\nautomatic speech recognition (ASR) engine. Why use Deepgram with Unity? Well, Unity is an industry standard when it comes to game development,\r\nand while speech-enhanced games have been around for decades, high performance, easy-to-use ASR is relatively new, and Deepgram represents the cream-of-the-crop.\r\nSo if you are looking to try something new with your games, perhaps for a more immersive or accessible experience, I highly recommend trying this out!\r\n\r\nThis tutorial assumes no prior experience with Unity or C# (the language Unity uses for scripting). However, its\r\nfocus is on getting you quickly set up to integrate Deepgram in your Unity\r\nproject, and does not cover Unity game development or the C# language in depth. There are a plethora of resources out there to learn game development with Unity,\r\nand I highly recommend [checking out their learning website](https://learn.unity.com/) as a starting point!\r\n\r\nFinally, for an example of a simple game built with Deepgram ASR, you can check out [Spooky Speech Spells](https://spookyspeechspells.deepgram.com).\r\n\r\n## Pre-requisites\r\n\r\nYou will need:\r\n\r\n*   Unity installed on your machine - [download Unity here](https://unity.com/download). This tutorial was written with the Unity Editor version `2020.3.30f1`.\r\n*   *(Optional)* [VS Code](https://code.visualstudio.com/docs/other/unity) or [Script Inspector 3](https://assetstore.unity.com/packages/tools/visual-scripting/script-inspector-3-3535) for editing C# Unity scripts (you can use any text editor, but these are highly recommended for their Unity integration).\r\n*   A Deepgram API Key - [get an API Key here](https://console.deepgram.com/signup?jump=keys).\r\n\r\n## Try the Demo\r\n\r\nTo run the demo we are going to build and browse its files:\r\n\r\n*   Download [this repository](https://github.com/deepgram/UnityDeepgramDemo), open Unity, click "Open", and browse to and select the directory `UnityDeepgramDemo`.\r\n*   Edit the script `UnityDeepgramDemo/Assets/DeepgramInstance.cs` and replace the string `INSERT_YOUR_API_KEY` with your Deepgram API key.\r\n*   In the bottom left "Project" tab open `Assets -> Scenes` and double click "SampleScene" to load this scene.\r\n*   In the top center of the Unity editor, hit the "Play" (\u25BA) button.\r\n*   Say "left," "right," "up," and "down" to move the ball around!\r\n\r\n## Building the Demo\r\n\r\nIn the following sections, we will walk through step-by-step how to make this demo where you can move\r\na ball around a simulated physics environment just by commanding it via your computer\'s microphone.\r\n\r\n## Setting Up the Project\r\n\r\nOpen Unity and click "New project".\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/new_project.png" alt="Create a new project." style="max-width: 2272px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nYou will be presented with a list of templates - choose "2D", and under the "Project Settings" panel name the project "UnityDeepgramDemo" (or whatever you\'d like!)\r\nand choose a location for the project on your filesystem.\r\nThen click "Create project."\r\n\r\n![Create the project from the "2D" template.](https://res.cloudinary.com/deepgram/image/upload/v1647261812/blog/2022/03/deepgram-unity-tutorial/assets/create_the_project.png)\r\n\r\nWe are now in the Unity Editor. Our demo will rely on one external package to help us handle the websocket connection to Deepgram - [Native WebSockets](https://github.com/endel/NativeWebSocket).\r\nTo install Native WebSockets, first, open the Package Manager from `Window -> Package Manager`.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/open_package_manager.png" alt="Open the Package Manager." style="max-width: 466px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nThen click the "+" drop-down and click "Add package from git URL...".\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/add_package_from_git_url.png" alt="Add a package from a git URL." style="max-width: 400px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nEnter the URL: https://github.com/endel/NativeWebSocket.git#upm and click "Add."\r\n\r\nWe are now ready to start putting the demo together!\r\n\r\n## Creating Physics Objects\r\n\r\nIn the center of the Unity Editor are the "Scene" and "Game" tabs. We will spend most of our time in the "Scene" tab, though when we play the game, we will be shifted over to the "Game"\r\ntab. On the left side of the Unity Editor is the "Hierarchy" tab - this is where we will be adding our game objects.\r\n\r\nLet\'s add some physics objects to our scene - we are going to create a box out of 4 static (non-movable) walls, and add a dynamic (movable) ball in the center.\r\n\r\nIn the "Hierarchy" tab, right-click and select `2D Object -> Physics -> Static Sprite`.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_static_sprite.png" alt="Add a Static Sprite." style="max-width: 1166px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nWe now have a static square sprite in the center of our scene. Let\'s move this square to the left and make it a vertical rectangle to start building our box.\r\nTo do this, go to the "Inspector" tab on the right. Under "Transform," change the "X" "Position" to -5 and the "Y" "Scale" to 5. This will stretch the square\r\ninto a vertical rectangle 5 units tall, and place it 5 units to the left.\r\n\r\n![Create a static wall.](https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/wall_left.png)\r\n\r\nNow, right-click the "Static Sprite" object in the "Hierarchy" tab, click "Rename," and rename it "WallLeft." Let\'s do the same procedure to make a "WallRight," "WallUp," and "WallDown."\r\n\r\nFor "WallRight," change the "X" "Position" to 5 and the "Y" "Scale" to 5.\r\nFor "WallUp," change the "Y" "Position" to 3 and the "X" "Scale" to 9.\r\nAnd for the "WallDown," change the "Y" "Position" to -3 and the "X" "Scale" to 9.\r\nYou should now have a box which looks like this:\r\n\r\n![Our completed box.](https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/complete_box.png)\r\n\r\nLet\'s add a dynamic ball inside the box. Right-click inside the "Hierarchy" tab and select `2D Object -> Physics -> Dynamic Sprite` and name the object "Ball."\r\nDynamic sprites have gravity applied to them by default, and this can be changed if desired in the "Gravity Scale" field of the "Rigidbody 2D" node in the "Inspector" tab.\r\nFor now, let\'s leave it at the default value. Feel free to press "Play" (\u25BA) to start the game! You should see the ball fall to the bottom of the box - not much going on yet.\r\n(Note, however, that you will not be able to do certain edits on the game until you stop playing the game by pressing again on the "Play" (\u25BA) button.)\r\n\r\nFinally, let\'s attach a script to our "Ball" object. In the bottom panel, select the "Project" tab and open the "Assets" directory. Right-click in the "Assets"\r\npanel and select `Create -> C# Script`. Name the script `Ball` (on your OS\'s filesystem, the file will exist as `Ball.cs`). Open this script with your text\r\neditor of choice, and paste the following contents:\r\n\r\n```\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using UnityEngine;\r\n\r\n    public class Ball : MonoBehaviour\r\n    {\r\n        public int forceFactor = 300;\r\n\r\n        void Start()\r\n        {\r\n\r\n        }\r\n\r\n        void Update()\r\n        {\r\n\r\n        }\r\n\r\n        public void PushLeft()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.left * forceFactor);\r\n        }\r\n        public void PushRight()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.right * forceFactor);\r\n        }\r\n        public void PushUp()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.up * forceFactor);\r\n        }\r\n        public void PushDown()\r\n        {\r\n            Rigidbody2D rigidBody = GetComponent<Rigidbody2D>();\r\n            rigidBody.AddForce(Vector2.down * forceFactor);\r\n        }\r\n    }\r\n```\r\n\r\nThis script defines the class `Ball`, which inherits from Unity\'s `MonoBehavior` class. The class has one member variable, `forceFactor`, and defines\r\n4 methods that can be used to move the object, `PushLeft`, `PushRight`, `PushUp`, and `PushDown`. We will not use these methods yet, but when we\r\nimplement our Deepgram integration, we will trigger these methods when you say the words "left," "right," "up," and "down."\r\n\r\nSo now we have a "Ball" script and a "Ball" object, but they are not coupled yet! To attach the script to the object, click the object in the "Hierarchy"\r\ntab, and drag the "Ball" script to the "Add Component" button found at the bottom of the "Inspector" tab.\r\n\r\n## Implementing the Deepgram Integration\r\n\r\nTo implement the Deepgram integration, we will need to create an object which handles microphone input and an object which handles the websocket\r\nconnection to Deepgram.\r\n\r\nLet\'s start with the websocket handler. Right-click in the "Hierarchy" tab and select "Create Empty" - name this object "DeepgramObject." Now,\r\ncreate a new script and name it "DeepgramInstance." Edit the script and add the following contents:\r\n\r\n```\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using UnityEngine;\r\n    using UnityEditor;\r\n    using System.Text.RegularExpressions;\r\n\r\n    using NativeWebSocket;\r\n\r\n    [System.Serializable]\r\n    public class DeepgramResponse\r\n    {\r\n        public int[] channel_index;\r\n        public bool is_final;\r\n        public Channel channel;\r\n    }\r\n\r\n    [System.Serializable]\r\n    public class Channel\r\n    {\r\n        public Alternative[] alternatives;\r\n    }\r\n\r\n    [System.Serializable]\r\n    public class Alternative\r\n    {\r\n        public string transcript;\r\n    }\r\n\r\n    public class DeepgramInstance : MonoBehaviour\r\n    {\r\n        WebSocket websocket;\r\n\r\n        public Ball _ball;\r\n\r\n        async void Start()\r\n        {\r\n            var headers = new Dictionary<string, string>\r\n            {\r\n                { "Authorization", "Token INSERT_YOUR_API_KEY" }\r\n            };\r\n            websocket = new WebSocket("wss://api.deepgram.com/v1/listen?encoding=linear16&sample_rate=" + AudioSettings.outputSampleRate.ToString(), headers);\r\n\r\n            websocket.OnOpen += () =>\r\n            {\r\n                Debug.Log("Connected to Deepgram!");\r\n            };\r\n\r\n            websocket.OnError += (e) =>\r\n            {\r\n                Debug.Log("Error: " + e);\r\n            };\r\n\r\n            websocket.OnClose += (e) =>\r\n            {\r\n                Debug.Log("Connection closed!");\r\n            };\r\n\r\n            websocket.OnMessage += (bytes) =>\r\n            {\r\n                var message = System.Text.Encoding.UTF8.GetString(bytes);\r\n                Debug.Log("OnMessage: " + message);\r\n\r\n                DeepgramResponse deepgramResponse = new DeepgramResponse();\r\n                object boxedDeepgramResponse = deepgramResponse;\r\n                EditorJsonUtility.FromJsonOverwrite(message, boxedDeepgramResponse);\r\n                deepgramResponse = (DeepgramResponse) boxedDeepgramResponse;\r\n                if (deepgramResponse.is_final)\r\n                {\r\n                    var transcript = deepgramResponse.channel.alternatives[0].transcript;\r\n                    Debug.Log(transcript);\r\n                    int leftCount = new Regex(Regex.Escape("left")).Matches(transcript).Count;\r\n                    int rightCount = new Regex(Regex.Escape("right")).Matches(transcript).Count;\r\n                    int upCount = new Regex(Regex.Escape("up")).Matches(transcript).Count;\r\n                    int downCount = new Regex(Regex.Escape("down")).Matches(transcript).Count;\r\n                    for (int i = 0; i < leftCount; i++)\r\n                    {\r\n                        _ball.PushLeft();\r\n                    }\r\n                    for (int i = 0; i < rightCount; i++)\r\n                    {\r\n                        _ball.PushRight();\r\n                    }\r\n                    for (int i = 0; i < upCount; i++)\r\n                    {\r\n                        _ball.PushUp();\r\n                    }\r\n                    for (int i = 0; i < downCount; i++)\r\n                    {\r\n                        _ball.PushDown();\r\n                    }\r\n                }\r\n            };\r\n\r\n            await websocket.Connect();\r\n        }\r\n        void Update()\r\n        {\r\n        #if !UNITY_WEBGL || UNITY_EDITOR\r\n            websocket.DispatchMessageQueue();\r\n        #endif\r\n        }\r\n\r\n        private async void OnApplicationQuit()\r\n        {\r\n            await websocket.Close();\r\n        }\r\n\r\n        public async void ProcessAudio(byte[] audio)\r\n        {\r\n            if (websocket.State == WebSocketState.Open)\r\n            {\r\n                await websocket.Send(audio);\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nInsert your Deepgram API key where the script says "INSERT\\_YOUR\\_API\\_KEY," then\r\nattach this script to the "DeepgramObject", and in the "Inspector" tab click the "Ball" field and select the "Ball" object we created earlier.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647404524/blog/2022/03/deepgram-unity-tutorial/assets/add_ball_to_deepgram_object.png" alt="Adding a Ball object reference to the DeepgramObject." style="max-width: 556px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nOk, so what\'s going on here? Well, first the script defines the classes `DeepgramResponse`, `Channel`, and `Alternative` which we will use to deserialize\r\nthe Deepgram ASR response, which is in JSON format. Then the script defines the class `DeepgramInstace` which has two member variables: a `WebSocket` object,\r\ndefined by `NativeWebSocket`, and a `Ball` object, defined by us in the "Ball" script.\r\n\r\nWhen the object that this script is attached to gets created, the `Start` method gets called. Inside `Start`, we create a new websocket connection to Deepgram\r\nand define functions that need to get executed when that connection opens, closes, receives an error, and receives a message. When the websocket connection\r\nreceives a message, we first parse it as a string, and then use `EditorJsonUtility` to parse the string as a JSON object, deserializing it as a `DeepgramResponse`\r\nobject. We can then directly access the transcript contained in this Deepgram message, count how many times the words "left," "right," "up," and "down" were spoken,\r\nand for each time these words were spoken, we call the `PushLeft`, `PushRight`, `PushUp`, and `PushDown` methods on our `Ball` object!\r\n\r\nNear the end of the script is one more method of note: `ProcessAudio`. This method will be called by our microphone object, which will pass in raw audio. `ProcessAudio`\r\nwill then check to see if the websocket connection is open, and if it is, pass the audio along to Deepgram.\r\n\r\nNow let\'s create an object to handle the microphone input. Right-click in the "Hierarchy" tab, select `Audio -> AudioSource`, and name this object "MicrophoneObject."\r\nThen create a new script called "MicrophoneInstance" and make its contents the following:\r\n\r\n```\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using UnityEngine;\r\n    using UnityEngine.Audio;\r\n\r\n    [RequireComponent (typeof (AudioSource))]\r\n    public class MicrophoneInstance : MonoBehaviour\r\n    {\r\n        AudioSource _audioSource;\r\n        int lastPosition, currentPosition;\r\n\r\n        public DeepgramInstance _deepgramInstance;\r\n\r\n        void Start()\r\n        {\r\n            _audioSource = GetComponent<AudioSource> ();\r\n            if (Microphone.devices.Length > 0)\r\n            {\r\n                _audioSource.clip = Microphone.Start(null, true, 10, AudioSettings.outputSampleRate);\r\n            }\r\n            else\r\n            {\r\n                Debug.Log("This will crash!");\r\n            }\r\n\r\n            _audioSource.Play();\r\n        }\r\n\r\n        void Update()\r\n        {\r\n            if ((currentPosition = Microphone.GetPosition(null)) > 0)\r\n            {\r\n                if (lastPosition > currentPosition)\r\n                    lastPosition = 0;\r\n\r\n                if (currentPosition - lastPosition > 0)\r\n                {\r\n                    float[] samples = new float[(currentPosition - lastPosition) * _audioSource.clip.channels];\r\n                    _audioSource.clip.GetData(samples, lastPosition);\r\n\r\n                    short[] samplesAsShorts = new short[(currentPosition - lastPosition) * _audioSource.clip.channels];\r\n                    for (int i = 0; i < samples.Length; i++)\r\n                    {\r\n                        samplesAsShorts[i] = f32_to_i16(samples[i]);\r\n                    }\r\n\r\n                    var samplesAsBytes = new byte[samplesAsShorts.Length * 2];\r\n                    System.Buffer.BlockCopy(samplesAsShorts, 0, samplesAsBytes, 0, samplesAsBytes.Length);\r\n                    _deepgramInstance.ProcessAudio(samplesAsBytes);\r\n\r\n                    if (!GetComponent<AudioSource>().isPlaying)\r\n                        GetComponent<AudioSource>().Play();\r\n                    lastPosition = currentPosition;\r\n                }\r\n            }\r\n        }\r\n\r\n        short f32_to_i16(float sample)\r\n        {\r\n            sample = sample * 32768;\r\n            if (sample > 32767)\r\n            {\r\n                return 32767;\r\n            }\r\n            if (sample < -32768)\r\n            {\r\n                return -32768;\r\n            }\r\n            return (short) sample;\r\n        }\r\n    }\r\n```\r\n\r\nAttach this script to the "MicrophoneObject", and in the "Inspector" tab click the "DeepgramInstance" field and select the "DeepgramObject" object we created earlier.\r\n\r\nIn this script, we define the `MicrophoneInstance` class which contains an `AudioSource` member variable, a `DeepgramInstance` member variable, and 2 integer member\r\nvariables which help to keep track of where we are in the microphone\'s audio stream. The `Start` method will set up the microphone to stream audio data into\r\nthe `clip` of the `AudioSource` object, and will start playback of the `AudioSource`.\r\n\r\nThe `Update` method of a `MonoBehavior` class gets called by the under-the-hood game loop every frame and is the typical place to handle game logic.\r\nIn our case, it gets the current position of the microphone\'s audio stream, compares it to the last position of the microphone\'s audio stream to\r\ncreate a buffer, `samples`, of floats the right size to store all of the new audio data since the last time `Update` was called, grabs that audio data via the method `GetData`\r\nand stores it in `samples`. Then, these `f32` samples are converted to `i16` samples, and then converted to raw bytes, and finally passed to the `DeepgramInstance`\'s `ProcessAudio`\r\nmethod which, as we mentioned before, will then pass that audio on to Deepgram to get transcribed!\r\n\r\nNow, we are *almost* ready to try out our demo. There is one more task to do to make the demo reasonably playable, and if you try to play the demo now, you may see what it is!\r\nCurrently, in order to get the microphone\'s audio data, the microphone\'s audio stream must play. However, having the microphone\'s audio play through your computer\'s speakers\r\ncan be problematic and lead to feedback issues (plus, hearing your voice in the game isn\'t the point). To fix this issue, go to the "Assets" panel, right-click,\r\nand select `Create -> Audio Mixer`. Name the mixer "Mixer."\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_audio_mixer.png" alt="Add a Mixer." style="max-width: 1176px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nDouble click "Mixer" in the "Assets" panel, then next to "Groups" click the "+" button and name the group "Microphone."\r\nNow go to the fader for this group and turn it all the way down.\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/turn_fader_down.png" alt="Silence the Microphone group." style="max-width: 1090px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nNow, click the "MicrophoneObject" in the "Hierarchy" tab and then click on the field for "Output" in the "Audio Source" node in the "Inspector" tab and select "Microphone (Mixer)."\r\nThis will ensure the microphone audio can stream its data without being directed to your speakers!\r\n\r\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/send_audio_source_to_mixer_group.png" alt="Silence the Microphone group." style="max-width: 568px;display: block;margin-left: auto;margin-right: auto;">\r\n\r\nYou should now be able to press "Play" (\u25BA) and make the ball jump around by saying "left," "right," "up," or "down" in the microphone!\r\n\r\n## Build New Features\r\n\r\nControlling a single ball with commands has a noticeable amount of latency. This can be alleviated somewhat\r\nby using [interim results](https://developers.deepgram.com/documentation/features/interim-results/), however,\r\nthe same transcribed word might be present in subsequent interim results, so logic would have to be added\r\nto avoid double counting commands. Still, the use of interim results can vastly reduce latency, so I strongly\r\nsuggest trying it out! In addition, here are a few more things to think about and try out with this demo before diving into\r\na full-on speech-enhanced game:\r\n\r\n*   Change the [Physics Material](https://docs.unity3d.com/Manual/class-PhysicMaterial.html) of the ball to make it bounce instead of stick to walls.\r\n*   Add more balls to the box - try making just one of them, several of them, or all of them react to the speech commands.\r\n*   Give the balls different colors, and implement logic to control each group (like "red, left!", "blue, up!").\r\n*   Remove gravity for balls and exchange the simple box with a sprawling level of walls.\r\n\r\nIf you try out the above ideas, you may come to a fun idea for a game - how about a game along the lines of Pikmin, where you command\r\ndifferent groups of creatures to move to different parts of the map to accomplish objectives? Instead of using a complex user interface\r\nof buttons, mice, and/or a keyboard, the game could simply require you to dictate commands!\r\n\r\n## Final Thoughts\r\n\r\nSpeech-enhanced games are not necessarily new, but until recently they have mostly centered around a handful of command words.\r\nWith today\'s ASR engines like Deepgram, supporting thousands of command words out of the box has become trivial, indeed transcribing entire\r\nconversations and complex commands is now easily within reach and has the power to enrich games. I\'ll end with a few ideas which\r\nmay give you some inspiration!\r\n\r\n*   Along the lines of the example mentioned in the previous section, build an RTS where you control units with your voice. There may be more\r\n    latency than you get with a mouse click, but this could be turned into a core game mechanic - maybe you are communicating with your units\r\n    via a radio, and any network + transcription latency would feel like latency of your units receiving your message.\r\n*   Also following up on this idea, make a game where you primarily control a single player, but have the option to give commands to other\r\n    AI players on your team - these commands could be conveyed with your voice without having to swap to a complex menu, interrupting the control of\r\n    your primary character. (For a concrete example, think Hyrule Warriors.)\r\n*   For MOBAs where voice chat is not easily available (think Pok\xE9mon Unite), allow for command phrases to be selected via ASR instead of clunky menus.\r\n*   To avoid issues with latency entirely, make speech-enhanced sections of your game occur during context-sensitive situations where the main action\r\n    of the game pauses so that reaction time becomes a non-issue. As an example, in many Zelda games, the game freezes when you pull out an instrument,\r\n    and playing the right notes on the instrument can cause events to occur - imagine this but with ASR and specific phrases.\r\n*   For in-game voice chat, write a plugin that performs ASR for each player in their preferred\r\n    language (see Deepgram\'s supported languages [here](https://developers.deepgram.com/documentation/features/language/), and then passes\r\n    the resulting transcripts through a translator to display everyone\'s speech to everyone else in their preferred language.\r\n\r\nSpeech-in-games is a relatively untapped area, so this list of ideas and suggestions is far from exhaustive, but I sincerely hope this helps\r\non the journey towards making games more immersive, interesting, and inclusive!\r\n\r\nIf you have any questions, please feel free to reach out on Twitter - we\'re @DeepgramDevs.\r\n\r\n        ';
}
function compiledContent() {
  return '<p>In this tutorial, we will be making a simple physics simulation in Unity with actions triggered by Deepgram\u2019s\r\nautomatic speech recognition (ASR) engine. Why use Deepgram with Unity? Well, Unity is an industry standard when it comes to game development,\r\nand while speech-enhanced games have been around for decades, high performance, easy-to-use ASR is relatively new, and Deepgram represents the cream-of-the-crop.\r\nSo if you are looking to try something new with your games, perhaps for a more immersive or accessible experience, I highly recommend trying this out!</p>\n<p>This tutorial assumes no prior experience with Unity or C# (the language Unity uses for scripting). However, its\r\nfocus is on getting you quickly set up to integrate Deepgram in your Unity\r\nproject, and does not cover Unity game development or the C# language in depth. There are a plethora of resources out there to learn game development with Unity,\r\nand I highly recommend <a href="https://learn.unity.com/">checking out their learning website</a> as a starting point!</p>\n<p>Finally, for an example of a simple game built with Deepgram ASR, you can check out <a href="https://spookyspeechspells.deepgram.com">Spooky Speech Spells</a>.</p>\n<h2 id="pre-requisites">Pre-requisites</h2>\n<p>You will need:</p>\n<ul>\n<li>Unity installed on your machine - <a href="https://unity.com/download">download Unity here</a>. This tutorial was written with the Unity Editor version <code is:raw>2020.3.30f1</code>.</li>\n<li><em>(Optional)</em> <a href="https://code.visualstudio.com/docs/other/unity">VS Code</a> or <a href="https://assetstore.unity.com/packages/tools/visual-scripting/script-inspector-3-3535">Script Inspector 3</a> for editing C# Unity scripts (you can use any text editor, but these are highly recommended for their Unity integration).</li>\n<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get an API Key here</a>.</li>\n</ul>\n<h2 id="try-the-demo">Try the Demo</h2>\n<p>To run the demo we are going to build and browse its files:</p>\n<ul>\n<li>Download <a href="https://github.com/deepgram/UnityDeepgramDemo">this repository</a>, open Unity, click \u201COpen\u201D, and browse to and select the directory <code is:raw>UnityDeepgramDemo</code>.</li>\n<li>Edit the script <code is:raw>UnityDeepgramDemo/Assets/DeepgramInstance.cs</code> and replace the string <code is:raw>INSERT_YOUR_API_KEY</code> with your Deepgram API key.</li>\n<li>In the bottom left \u201CProject\u201D tab open <code is:raw>Assets -&gt; Scenes</code> and double click \u201CSampleScene\u201D to load this scene.</li>\n<li>In the top center of the Unity editor, hit the \u201CPlay\u201D (\u25BA) button.</li>\n<li>Say \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D and \u201Cdown\u201D to move the ball around!</li>\n</ul>\n<h2 id="building-the-demo">Building the Demo</h2>\n<p>In the following sections, we will walk through step-by-step how to make this demo where you can move\r\na ball around a simulated physics environment just by commanding it via your computer\u2019s microphone.</p>\n<h2 id="setting-up-the-project">Setting Up the Project</h2>\n<p>Open Unity and click \u201CNew project\u201D.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/new_project.png" alt="Create a new project." style="max-width: 2272px;display: block;margin-left: auto;margin-right: auto;" />\n<p>You will be presented with a list of templates - choose \u201C2D\u201D, and under the \u201CProject Settings\u201D panel name the project \u201CUnityDeepgramDemo\u201D (or whatever you\u2019d like!)\r\nand choose a location for the project on your filesystem.\r\nThen click \u201CCreate project.\u201D</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647261812/blog/2022/03/deepgram-unity-tutorial/assets/create_the_project.png" alt="Create the project from the &#x22;2D&#x22; template."></p>\n<p>We are now in the Unity Editor. Our demo will rely on one external package to help us handle the websocket connection to Deepgram - <a href="https://github.com/endel/NativeWebSocket">Native WebSockets</a>.\r\nTo install Native WebSockets, first, open the Package Manager from <code is:raw>Window -&gt; Package Manager</code>.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/open_package_manager.png" alt="Open the Package Manager." style="max-width: 466px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Then click the \u201D+\u201D drop-down and click \u201CAdd package from git URL\u2026\u201C.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/add_package_from_git_url.png" alt="Add a package from a git URL." style="max-width: 400px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Enter the URL: <a href="https://github.com/endel/NativeWebSocket.git#upm">https://github.com/endel/NativeWebSocket.git#upm</a> and click \u201CAdd.\u201D</p>\n<p>We are now ready to start putting the demo together!</p>\n<h2 id="creating-physics-objects">Creating Physics Objects</h2>\n<p>In the center of the Unity Editor are the \u201CScene\u201D and \u201CGame\u201D tabs. We will spend most of our time in the \u201CScene\u201D tab, though when we play the game, we will be shifted over to the \u201CGame\u201D\r\ntab. On the left side of the Unity Editor is the \u201CHierarchy\u201D tab - this is where we will be adding our game objects.</p>\n<p>Let\u2019s add some physics objects to our scene - we are going to create a box out of 4 static (non-movable) walls, and add a dynamic (movable) ball in the center.</p>\n<p>In the \u201CHierarchy\u201D tab, right-click and select <code is:raw>2D Object -&gt; Physics -&gt; Static Sprite</code>.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_static_sprite.png" alt="Add a Static Sprite." style="max-width: 1166px;display: block;margin-left: auto;margin-right: auto;" />\n<p>We now have a static square sprite in the center of our scene. Let\u2019s move this square to the left and make it a vertical rectangle to start building our box.\r\nTo do this, go to the \u201CInspector\u201D tab on the right. Under \u201CTransform,\u201D change the \u201CX\u201D \u201CPosition\u201D to -5 and the \u201CY\u201D \u201CScale\u201D to 5. This will stretch the square\r\ninto a vertical rectangle 5 units tall, and place it 5 units to the left.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/wall_left.png" alt="Create a static wall."></p>\n<p>Now, right-click the \u201CStatic Sprite\u201D object in the \u201CHierarchy\u201D tab, click \u201CRename,\u201D and rename it \u201CWallLeft.\u201D Let\u2019s do the same procedure to make a \u201CWallRight,\u201D \u201CWallUp,\u201D and \u201CWallDown.\u201D</p>\n<p>For \u201CWallRight,\u201D change the \u201CX\u201D \u201CPosition\u201D to 5 and the \u201CY\u201D \u201CScale\u201D to 5.\r\nFor \u201CWallUp,\u201D change the \u201CY\u201D \u201CPosition\u201D to 3 and the \u201CX\u201D \u201CScale\u201D to 9.\r\nAnd for the \u201CWallDown,\u201D change the \u201CY\u201D \u201CPosition\u201D to -3 and the \u201CX\u201D \u201CScale\u201D to 9.\r\nYou should now have a box which looks like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/complete_box.png" alt="Our completed box."></p>\n<p>Let\u2019s add a dynamic ball inside the box. Right-click inside the \u201CHierarchy\u201D tab and select <code is:raw>2D Object -&gt; Physics -&gt; Dynamic Sprite</code> and name the object \u201CBall.\u201D\r\nDynamic sprites have gravity applied to them by default, and this can be changed if desired in the \u201CGravity Scale\u201D field of the \u201CRigidbody 2D\u201D node in the \u201CInspector\u201D tab.\r\nFor now, let\u2019s leave it at the default value. Feel free to press \u201CPlay\u201D (\u25BA) to start the game! You should see the ball fall to the bottom of the box - not much going on yet.\r\n(Note, however, that you will not be able to do certain edits on the game until you stop playing the game by pressing again on the \u201CPlay\u201D (\u25BA) button.)</p>\n<p>Finally, let\u2019s attach a script to our \u201CBall\u201D object. In the bottom panel, select the \u201CProject\u201D tab and open the \u201CAssets\u201D directory. Right-click in the \u201CAssets\u201D\r\npanel and select <code is:raw>Create -&gt; C# Script</code>. Name the script <code is:raw>Ball</code> (on your OS\u2019s filesystem, the file will exist as <code is:raw>Ball.cs</code>). Open this script with your text\r\neditor of choice, and paste the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    public class Ball : MonoBehaviour</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public int forceFactor = 300;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Start()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushLeft()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.left * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushRight()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.right * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushUp()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.up * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        public void PushDown()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>\n<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.down * forceFactor);</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>This script defines the class <code is:raw>Ball</code>, which inherits from Unity\u2019s <code is:raw>MonoBehavior</code> class. The class has one member variable, <code is:raw>forceFactor</code>, and defines\r\n4 methods that can be used to move the object, <code is:raw>PushLeft</code>, <code is:raw>PushRight</code>, <code is:raw>PushUp</code>, and <code is:raw>PushDown</code>. We will not use these methods yet, but when we\r\nimplement our Deepgram integration, we will trigger these methods when you say the words \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D and \u201Cdown.\u201D</p>\n<p>So now we have a \u201CBall\u201D script and a \u201CBall\u201D object, but they are not coupled yet! To attach the script to the object, click the object in the \u201CHierarchy\u201D\r\ntab, and drag the \u201CBall\u201D script to the \u201CAdd Component\u201D button found at the bottom of the \u201CInspector\u201D tab.</p>\n<h2 id="implementing-the-deepgram-integration">Implementing the Deepgram Integration</h2>\n<p>To implement the Deepgram integration, we will need to create an object which handles microphone input and an object which handles the websocket\r\nconnection to Deepgram.</p>\n<p>Let\u2019s start with the websocket handler. Right-click in the \u201CHierarchy\u201D tab and select \u201CCreate Empty\u201D - name this object \u201CDeepgramObject.\u201D Now,\r\ncreate a new script and name it \u201CDeepgramInstance.\u201D Edit the script and add the following contents:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEditor;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Text.RegularExpressions;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    using NativeWebSocket;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class DeepgramResponse</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public int[] channel_index;</span></span>\n<span class="line"><span style="color: #c9d1d9">        public bool is_final;</span></span>\n<span class="line"><span style="color: #c9d1d9">        public Channel channel;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class Channel</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public Alternative[] alternatives;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class Alternative</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        public string transcript;</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    public class DeepgramInstance : MonoBehaviour</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        WebSocket websocket;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public Ball _ball;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        async void Start()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            var headers = new Dictionary&lt;string, string&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                { &quot;Authorization&quot;, &quot;Token INSERT_YOUR_API_KEY&quot; }</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket = new WebSocket(&quot;wss://api.deepgram.com/v1/listen?encoding=linear16&amp;sample_rate=&quot; + AudioSettings.outputSampleRate.ToString(), headers);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnOpen += () =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Connected to Deepgram!&quot;);</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnError += (e) =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Error: &quot; + e);</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnClose += (e) =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Connection closed!&quot;);</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.OnMessage += (bytes) =&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                var message = System.Text.Encoding.UTF8.GetString(bytes);</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;OnMessage: &quot; + message);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                DeepgramResponse deepgramResponse = new DeepgramResponse();</span></span>\n<span class="line"><span style="color: #c9d1d9">                object boxedDeepgramResponse = deepgramResponse;</span></span>\n<span class="line"><span style="color: #c9d1d9">                EditorJsonUtility.FromJsonOverwrite(message, boxedDeepgramResponse);</span></span>\n<span class="line"><span style="color: #c9d1d9">                deepgramResponse = (DeepgramResponse) boxedDeepgramResponse;</span></span>\n<span class="line"><span style="color: #c9d1d9">                if (deepgramResponse.is_final)</span></span>\n<span class="line"><span style="color: #c9d1d9">                {</span></span>\n<span class="line"><span style="color: #c9d1d9">                    var transcript = deepgramResponse.channel.alternatives[0].transcript;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    Debug.Log(transcript);</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int leftCount = new Regex(Regex.Escape(&quot;left&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int rightCount = new Regex(Regex.Escape(&quot;right&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int upCount = new Regex(Regex.Escape(&quot;up&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    int downCount = new Regex(Regex.Escape(&quot;down&quot;)).Matches(transcript).Count;</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; leftCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushLeft();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; rightCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushRight();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; upCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushUp();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; downCount; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        _ball.PushDown();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9">                }</span></span>\n<span class="line"><span style="color: #c9d1d9">            };</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            await websocket.Connect();</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">        #if !UNITY_WEBGL || UNITY_EDITOR</span></span>\n<span class="line"><span style="color: #c9d1d9">            websocket.DispatchMessageQueue();</span></span>\n<span class="line"><span style="color: #c9d1d9">        #endif</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        private async void OnApplicationQuit()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            await websocket.Close();</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public async void ProcessAudio(byte[] audio)</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (websocket.State == WebSocketState.Open)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                await websocket.Send(audio);</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Insert your Deepgram API key where the script says \u201CINSERT_YOUR_API_KEY,\u201D then\r\nattach this script to the \u201CDeepgramObject\u201D, and in the \u201CInspector\u201D tab click the \u201CBall\u201D field and select the \u201CBall\u201D object we created earlier.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647404524/blog/2022/03/deepgram-unity-tutorial/assets/add_ball_to_deepgram_object.png" alt="Adding a Ball object reference to the DeepgramObject." style="max-width: 556px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Ok, so what\u2019s going on here? Well, first the script defines the classes <code is:raw>DeepgramResponse</code>, <code is:raw>Channel</code>, and <code is:raw>Alternative</code> which we will use to deserialize\r\nthe Deepgram ASR response, which is in JSON format. Then the script defines the class <code is:raw>DeepgramInstace</code> which has two member variables: a <code is:raw>WebSocket</code> object,\r\ndefined by <code is:raw>NativeWebSocket</code>, and a <code is:raw>Ball</code> object, defined by us in the \u201CBall\u201D script.</p>\n<p>When the object that this script is attached to gets created, the <code is:raw>Start</code> method gets called. Inside <code is:raw>Start</code>, we create a new websocket connection to Deepgram\r\nand define functions that need to get executed when that connection opens, closes, receives an error, and receives a message. When the websocket connection\r\nreceives a message, we first parse it as a string, and then use <code is:raw>EditorJsonUtility</code> to parse the string as a JSON object, deserializing it as a <code is:raw>DeepgramResponse</code>\r\nobject. We can then directly access the transcript contained in this Deepgram message, count how many times the words \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D and \u201Cdown\u201D were spoken,\r\nand for each time these words were spoken, we call the <code is:raw>PushLeft</code>, <code is:raw>PushRight</code>, <code is:raw>PushUp</code>, and <code is:raw>PushDown</code> methods on our <code is:raw>Ball</code> object!</p>\n<p>Near the end of the script is one more method of note: <code is:raw>ProcessAudio</code>. This method will be called by our microphone object, which will pass in raw audio. <code is:raw>ProcessAudio</code>\r\nwill then check to see if the websocket connection is open, and if it is, pass the audio along to Deepgram.</p>\n<p>Now let\u2019s create an object to handle the microphone input. Right-click in the \u201CHierarchy\u201D tab, select <code is:raw>Audio -&gt; AudioSource</code>, and name this object \u201CMicrophoneObject.\u201D\r\nThen create a new script called \u201CMicrophoneInstance\u201D and make its contents the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>\n<span class="line"><span style="color: #c9d1d9">    using UnityEngine.Audio;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">    [RequireComponent (typeof (AudioSource))]</span></span>\n<span class="line"><span style="color: #c9d1d9">    public class MicrophoneInstance : MonoBehaviour</span></span>\n<span class="line"><span style="color: #c9d1d9">    {</span></span>\n<span class="line"><span style="color: #c9d1d9">        AudioSource _audioSource;</span></span>\n<span class="line"><span style="color: #c9d1d9">        int lastPosition, currentPosition;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        public DeepgramInstance _deepgramInstance;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Start()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            _audioSource = GetComponent&lt;AudioSource&gt; ();</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (Microphone.devices.Length &gt; 0)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                _audioSource.clip = Microphone.Start(null, true, 10, AudioSettings.outputSampleRate);</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">            else</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;This will crash!&quot;);</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">            _audioSource.Play();</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            if ((currentPosition = Microphone.GetPosition(null)) &gt; 0)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                if (lastPosition &gt; currentPosition)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    lastPosition = 0;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                if (currentPosition - lastPosition &gt; 0)</span></span>\n<span class="line"><span style="color: #c9d1d9">                {</span></span>\n<span class="line"><span style="color: #c9d1d9">                    float[] samples = new float[(currentPosition - lastPosition) * _audioSource.clip.channels];</span></span>\n<span class="line"><span style="color: #c9d1d9">                    _audioSource.clip.GetData(samples, lastPosition);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                    short[] samplesAsShorts = new short[(currentPosition - lastPosition) * _audioSource.clip.channels];</span></span>\n<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; samples.Length; i++)</span></span>\n<span class="line"><span style="color: #c9d1d9">                    {</span></span>\n<span class="line"><span style="color: #c9d1d9">                        samplesAsShorts[i] = f32_to_i16(samples[i]);</span></span>\n<span class="line"><span style="color: #c9d1d9">                    }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                    var samplesAsBytes = new byte[samplesAsShorts.Length * 2];</span></span>\n<span class="line"><span style="color: #c9d1d9">                    System.Buffer.BlockCopy(samplesAsShorts, 0, samplesAsBytes, 0, samplesAsBytes.Length);</span></span>\n<span class="line"><span style="color: #c9d1d9">                    _deepgramInstance.ProcessAudio(samplesAsBytes);</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">                    if (!GetComponent&lt;AudioSource&gt;().isPlaying)</span></span>\n<span class="line"><span style="color: #c9d1d9">                        GetComponent&lt;AudioSource&gt;().Play();</span></span>\n<span class="line"><span style="color: #c9d1d9">                    lastPosition = currentPosition;</span></span>\n<span class="line"><span style="color: #c9d1d9">                }</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">        short f32_to_i16(float sample)</span></span>\n<span class="line"><span style="color: #c9d1d9">        {</span></span>\n<span class="line"><span style="color: #c9d1d9">            sample = sample * 32768;</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (sample &gt; 32767)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                return 32767;</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">            if (sample &lt; -32768)</span></span>\n<span class="line"><span style="color: #c9d1d9">            {</span></span>\n<span class="line"><span style="color: #c9d1d9">                return -32768;</span></span>\n<span class="line"><span style="color: #c9d1d9">            }</span></span>\n<span class="line"><span style="color: #c9d1d9">            return (short) sample;</span></span>\n<span class="line"><span style="color: #c9d1d9">        }</span></span>\n<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>\n<p>Attach this script to the \u201CMicrophoneObject\u201D, and in the \u201CInspector\u201D tab click the \u201CDeepgramInstance\u201D field and select the \u201CDeepgramObject\u201D object we created earlier.</p>\n<p>In this script, we define the <code is:raw>MicrophoneInstance</code> class which contains an <code is:raw>AudioSource</code> member variable, a <code is:raw>DeepgramInstance</code> member variable, and 2 integer member\r\nvariables which help to keep track of where we are in the microphone\u2019s audio stream. The <code is:raw>Start</code> method will set up the microphone to stream audio data into\r\nthe <code is:raw>clip</code> of the <code is:raw>AudioSource</code> object, and will start playback of the <code is:raw>AudioSource</code>.</p>\n<p>The <code is:raw>Update</code> method of a <code is:raw>MonoBehavior</code> class gets called by the under-the-hood game loop every frame and is the typical place to handle game logic.\r\nIn our case, it gets the current position of the microphone\u2019s audio stream, compares it to the last position of the microphone\u2019s audio stream to\r\ncreate a buffer, <code is:raw>samples</code>, of floats the right size to store all of the new audio data since the last time <code is:raw>Update</code> was called, grabs that audio data via the method <code is:raw>GetData</code>\r\nand stores it in <code is:raw>samples</code>. Then, these <code is:raw>f32</code> samples are converted to <code is:raw>i16</code> samples, and then converted to raw bytes, and finally passed to the <code is:raw>DeepgramInstance</code>\u2019s <code is:raw>ProcessAudio</code>\r\nmethod which, as we mentioned before, will then pass that audio on to Deepgram to get transcribed!</p>\n<p>Now, we are <em>almost</em> ready to try out our demo. There is one more task to do to make the demo reasonably playable, and if you try to play the demo now, you may see what it is!\r\nCurrently, in order to get the microphone\u2019s audio data, the microphone\u2019s audio stream must play. However, having the microphone\u2019s audio play through your computer\u2019s speakers\r\ncan be problematic and lead to feedback issues (plus, hearing your voice in the game isn\u2019t the point). To fix this issue, go to the \u201CAssets\u201D panel, right-click,\r\nand select <code is:raw>Create -&gt; Audio Mixer</code>. Name the mixer \u201CMixer.\u201D</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_audio_mixer.png" alt="Add a Mixer." style="max-width: 1176px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Double click \u201CMixer\u201D in the \u201CAssets\u201D panel, then next to \u201CGroups\u201D click the \u201D+\u201D button and name the group \u201CMicrophone.\u201D\r\nNow go to the fader for this group and turn it all the way down.</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/turn_fader_down.png" alt="Silence the Microphone group." style="max-width: 1090px;display: block;margin-left: auto;margin-right: auto;" />\n<p>Now, click the \u201CMicrophoneObject\u201D in the \u201CHierarchy\u201D tab and then click on the field for \u201COutput\u201D in the \u201CAudio Source\u201D node in the \u201CInspector\u201D tab and select \u201CMicrophone (Mixer).\u201D\r\nThis will ensure the microphone audio can stream its data without being directed to your speakers!</p>\n<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/send_audio_source_to_mixer_group.png" alt="Silence the Microphone group." style="max-width: 568px;display: block;margin-left: auto;margin-right: auto;" />\n<p>You should now be able to press \u201CPlay\u201D (\u25BA) and make the ball jump around by saying \u201Cleft,\u201D \u201Cright,\u201D \u201Cup,\u201D or \u201Cdown\u201D in the microphone!</p>\n<h2 id="build-new-features">Build New Features</h2>\n<p>Controlling a single ball with commands has a noticeable amount of latency. This can be alleviated somewhat\r\nby using <a href="https://developers.deepgram.com/documentation/features/interim-results/">interim results</a>, however,\r\nthe same transcribed word might be present in subsequent interim results, so logic would have to be added\r\nto avoid double counting commands. Still, the use of interim results can vastly reduce latency, so I strongly\r\nsuggest trying it out! In addition, here are a few more things to think about and try out with this demo before diving into\r\na full-on speech-enhanced game:</p>\n<ul>\n<li>Change the <a href="https://docs.unity3d.com/Manual/class-PhysicMaterial.html">Physics Material</a> of the ball to make it bounce instead of stick to walls.</li>\n<li>Add more balls to the box - try making just one of them, several of them, or all of them react to the speech commands.</li>\n<li>Give the balls different colors, and implement logic to control each group (like \u201Cred, left!\u201D, \u201Cblue, up!\u201D).</li>\n<li>Remove gravity for balls and exchange the simple box with a sprawling level of walls.</li>\n</ul>\n<p>If you try out the above ideas, you may come to a fun idea for a game - how about a game along the lines of Pikmin, where you command\r\ndifferent groups of creatures to move to different parts of the map to accomplish objectives? Instead of using a complex user interface\r\nof buttons, mice, and/or a keyboard, the game could simply require you to dictate commands!</p>\n<h2 id="final-thoughts">Final Thoughts</h2>\n<p>Speech-enhanced games are not necessarily new, but until recently they have mostly centered around a handful of command words.\r\nWith today\u2019s ASR engines like Deepgram, supporting thousands of command words out of the box has become trivial, indeed transcribing entire\r\nconversations and complex commands is now easily within reach and has the power to enrich games. I\u2019ll end with a few ideas which\r\nmay give you some inspiration!</p>\n<ul>\n<li>Along the lines of the example mentioned in the previous section, build an RTS where you control units with your voice. There may be more\r\nlatency than you get with a mouse click, but this could be turned into a core game mechanic - maybe you are communicating with your units\r\nvia a radio, and any network + transcription latency would feel like latency of your units receiving your message.</li>\n<li>Also following up on this idea, make a game where you primarily control a single player, but have the option to give commands to other\r\nAI players on your team - these commands could be conveyed with your voice without having to swap to a complex menu, interrupting the control of\r\nyour primary character. (For a concrete example, think Hyrule Warriors.)</li>\n<li>For MOBAs where voice chat is not easily available (think Pok\xE9mon Unite), allow for command phrases to be selected via ASR instead of clunky menus.</li>\n<li>To avoid issues with latency entirely, make speech-enhanced sections of your game occur during context-sensitive situations where the main action\r\nof the game pauses so that reaction time becomes a non-issue. As an example, in many Zelda games, the game freezes when you pull out an instrument,\r\nand playing the right notes on the instrument can cause events to occur - imagine this but with ASR and specific phrases.</li>\n<li>For in-game voice chat, write a plugin that performs ASR for each player in their preferred\r\nlanguage (see Deepgram\u2019s supported languages <a href="https://developers.deepgram.com/documentation/features/language/">here</a>, and then passes\r\nthe resulting transcripts through a translator to display everyone\u2019s speech to everyone else in their preferred language.</li>\n</ul>\n<p>Speech-in-games is a relatively untapped area, so this list of ideas and suggestions is far from exhaustive, but I sincerely hope this helps\r\non the journey towards making games more immersive, interesting, and inclusive!</p>\n<p>If you have any questions, please feel free to reach out on Twitter - we\u2019re @DeepgramDevs.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/deepgram-unity-tutorial/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>In this tutorial, we will be making a simple physics simulation in Unity with actions triggered by Deepgram’s
automatic speech recognition (ASR) engine. Why use Deepgram with Unity? Well, Unity is an industry standard when it comes to game development,
and while speech-enhanced games have been around for decades, high performance, easy-to-use ASR is relatively new, and Deepgram represents the cream-of-the-crop.
So if you are looking to try something new with your games, perhaps for a more immersive or accessible experience, I highly recommend trying this out!</p>
<p>This tutorial assumes no prior experience with Unity or C# (the language Unity uses for scripting). However, its
focus is on getting you quickly set up to integrate Deepgram in your Unity
project, and does not cover Unity game development or the C# language in depth. There are a plethora of resources out there to learn game development with Unity,
and I highly recommend <a href="https://learn.unity.com/">checking out their learning website</a> as a starting point!</p>
<p>Finally, for an example of a simple game built with Deepgram ASR, you can check out <a href="https://spookyspeechspells.deepgram.com">Spooky Speech Spells</a>.</p>
<h2 id="pre-requisites">Pre-requisites</h2>
<p>You will need:</p>
<ul>
<li>Unity installed on your machine - <a href="https://unity.com/download">download Unity here</a>. This tutorial was written with the Unity Editor version <code>2020.3.30f1</code>.</li>
<li><em>(Optional)</em> <a href="https://code.visualstudio.com/docs/other/unity">VS Code</a> or <a href="https://assetstore.unity.com/packages/tools/visual-scripting/script-inspector-3-3535">Script Inspector 3</a> for editing C# Unity scripts (you can use any text editor, but these are highly recommended for their Unity integration).</li>
<li>A Deepgram API Key - <a href="https://console.deepgram.com/signup?jump=keys">get an API Key here</a>.</li>
</ul>
<h2 id="try-the-demo">Try the Demo</h2>
<p>To run the demo we are going to build and browse its files:</p>
<ul>
<li>Download <a href="https://github.com/deepgram/UnityDeepgramDemo">this repository</a>, open Unity, click “Open”, and browse to and select the directory <code>UnityDeepgramDemo</code>.</li>
<li>Edit the script <code>UnityDeepgramDemo/Assets/DeepgramInstance.cs</code> and replace the string <code>INSERT_YOUR_API_KEY</code> with your Deepgram API key.</li>
<li>In the bottom left “Project” tab open <code>Assets -&gt; Scenes</code> and double click “SampleScene” to load this scene.</li>
<li>In the top center of the Unity editor, hit the “Play” (►) button.</li>
<li>Say “left,” “right,” “up,” and “down” to move the ball around!</li>
</ul>
<h2 id="building-the-demo">Building the Demo</h2>
<p>In the following sections, we will walk through step-by-step how to make this demo where you can move
a ball around a simulated physics environment just by commanding it via your computer’s microphone.</p>
<h2 id="setting-up-the-project">Setting Up the Project</h2>
<p>Open Unity and click “New project”.</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/new_project.png" alt="Create a new project." style="max-width: 2272px;display: block;margin-left: auto;margin-right: auto;">
<p>You will be presented with a list of templates - choose “2D”, and under the “Project Settings” panel name the project “UnityDeepgramDemo” (or whatever you’d like!)
and choose a location for the project on your filesystem.
Then click “Create project.”</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647261812/blog/2022/03/deepgram-unity-tutorial/assets/create_the_project.png" alt="Create the project from the &quot;2D&quot; template."></p>
<p>We are now in the Unity Editor. Our demo will rely on one external package to help us handle the websocket connection to Deepgram - <a href="https://github.com/endel/NativeWebSocket">Native WebSockets</a>.
To install Native WebSockets, first, open the Package Manager from <code>Window -&gt; Package Manager</code>.</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/open_package_manager.png" alt="Open the Package Manager." style="max-width: 466px;display: block;margin-left: auto;margin-right: auto;">
<p>Then click the ”+” drop-down and click “Add package from git URL…“.</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/add_package_from_git_url.png" alt="Add a package from a git URL." style="max-width: 400px;display: block;margin-left: auto;margin-right: auto;">
<p>Enter the URL: <a href="https://github.com/endel/NativeWebSocket.git#upm">https://github.com/endel/NativeWebSocket.git#upm</a> and click “Add.”</p>
<p>We are now ready to start putting the demo together!</p>
<h2 id="creating-physics-objects">Creating Physics Objects</h2>
<p>In the center of the Unity Editor are the “Scene” and “Game” tabs. We will spend most of our time in the “Scene” tab, though when we play the game, we will be shifted over to the “Game”
tab. On the left side of the Unity Editor is the “Hierarchy” tab - this is where we will be adding our game objects.</p>
<p>Let’s add some physics objects to our scene - we are going to create a box out of 4 static (non-movable) walls, and add a dynamic (movable) ball in the center.</p>
<p>In the “Hierarchy” tab, right-click and select <code>2D Object -&gt; Physics -&gt; Static Sprite</code>.</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_static_sprite.png" alt="Add a Static Sprite." style="max-width: 1166px;display: block;margin-left: auto;margin-right: auto;">
<p>We now have a static square sprite in the center of our scene. Let’s move this square to the left and make it a vertical rectangle to start building our box.
To do this, go to the “Inspector” tab on the right. Under “Transform,” change the “X” “Position” to -5 and the “Y” “Scale” to 5. This will stretch the square
into a vertical rectangle 5 units tall, and place it 5 units to the left.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/wall_left.png" alt="Create a static wall."></p>
<p>Now, right-click the “Static Sprite” object in the “Hierarchy” tab, click “Rename,” and rename it “WallLeft.” Let’s do the same procedure to make a “WallRight,” “WallUp,” and “WallDown.”</p>
<p>For “WallRight,” change the “X” “Position” to 5 and the “Y” “Scale” to 5.
For “WallUp,” change the “Y” “Position” to 3 and the “X” “Scale” to 9.
And for the “WallDown,” change the “Y” “Position” to -3 and the “X” “Scale” to 9.
You should now have a box which looks like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1647404529/blog/2022/03/deepgram-unity-tutorial/assets/complete_box.png" alt="Our completed box."></p>
<p>Let’s add a dynamic ball inside the box. Right-click inside the “Hierarchy” tab and select <code>2D Object -&gt; Physics -&gt; Dynamic Sprite</code> and name the object “Ball.”
Dynamic sprites have gravity applied to them by default, and this can be changed if desired in the “Gravity Scale” field of the “Rigidbody 2D” node in the “Inspector” tab.
For now, let’s leave it at the default value. Feel free to press “Play” (►) to start the game! You should see the ball fall to the bottom of the box - not much going on yet.
(Note, however, that you will not be able to do certain edits on the game until you stop playing the game by pressing again on the “Play” (►) button.)</p>
<p>Finally, let’s attach a script to our “Ball” object. In the bottom panel, select the “Project” tab and open the “Assets” directory. Right-click in the “Assets”
panel and select <code>Create -&gt; C# Script</code>. Name the script <code>Ball</code> (on your OS’s filesystem, the file will exist as <code>Ball.cs</code>). Open this script with your text
editor of choice, and paste the following contents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>
<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>
<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">    public class Ball : MonoBehaviour</span></span>
<span class="line"><span style="color: #c9d1d9">    {</span></span>
<span class="line"><span style="color: #c9d1d9">        public int forceFactor = 300;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        void Start()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        public void PushLeft()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>
<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.left * forceFactor);</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9">        public void PushRight()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>
<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.right * forceFactor);</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9">        public void PushUp()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>
<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.up * forceFactor);</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9">        public void PushDown()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">            Rigidbody2D rigidBody = GetComponent&lt;Rigidbody2D&gt;();</span></span>
<span class="line"><span style="color: #c9d1d9">            rigidBody.AddForce(Vector2.down * forceFactor);</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>
<p>This script defines the class <code>Ball</code>, which inherits from Unity’s <code>MonoBehavior</code> class. The class has one member variable, <code>forceFactor</code>, and defines
4 methods that can be used to move the object, <code>PushLeft</code>, <code>PushRight</code>, <code>PushUp</code>, and <code>PushDown</code>. We will not use these methods yet, but when we
implement our Deepgram integration, we will trigger these methods when you say the words “left,” “right,” “up,” and “down.”</p>
<p>So now we have a “Ball” script and a “Ball” object, but they are not coupled yet! To attach the script to the object, click the object in the “Hierarchy”
tab, and drag the “Ball” script to the “Add Component” button found at the bottom of the “Inspector” tab.</p>
<h2 id="implementing-the-deepgram-integration">Implementing the Deepgram Integration</h2>
<p>To implement the Deepgram integration, we will need to create an object which handles microphone input and an object which handles the websocket
connection to Deepgram.</p>
<p>Let’s start with the websocket handler. Right-click in the “Hierarchy” tab and select “Create Empty” - name this object “DeepgramObject.” Now,
create a new script and name it “DeepgramInstance.” Edit the script and add the following contents:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System;</span></span>
<span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>
<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>
<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>
<span class="line"><span style="color: #c9d1d9">    using UnityEditor;</span></span>
<span class="line"><span style="color: #c9d1d9">    using System.Text.RegularExpressions;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">    using NativeWebSocket;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>
<span class="line"><span style="color: #c9d1d9">    public class DeepgramResponse</span></span>
<span class="line"><span style="color: #c9d1d9">    {</span></span>
<span class="line"><span style="color: #c9d1d9">        public int[] channel_index;</span></span>
<span class="line"><span style="color: #c9d1d9">        public bool is_final;</span></span>
<span class="line"><span style="color: #c9d1d9">        public Channel channel;</span></span>
<span class="line"><span style="color: #c9d1d9">    }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>
<span class="line"><span style="color: #c9d1d9">    public class Channel</span></span>
<span class="line"><span style="color: #c9d1d9">    {</span></span>
<span class="line"><span style="color: #c9d1d9">        public Alternative[] alternatives;</span></span>
<span class="line"><span style="color: #c9d1d9">    }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">    [System.Serializable]</span></span>
<span class="line"><span style="color: #c9d1d9">    public class Alternative</span></span>
<span class="line"><span style="color: #c9d1d9">    {</span></span>
<span class="line"><span style="color: #c9d1d9">        public string transcript;</span></span>
<span class="line"><span style="color: #c9d1d9">    }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">    public class DeepgramInstance : MonoBehaviour</span></span>
<span class="line"><span style="color: #c9d1d9">    {</span></span>
<span class="line"><span style="color: #c9d1d9">        WebSocket websocket;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        public Ball _ball;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        async void Start()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">            var headers = new Dictionary&lt;string, string&gt;</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                { &quot;Authorization&quot;, &quot;Token INSERT_YOUR_API_KEY&quot; }</span></span>
<span class="line"><span style="color: #c9d1d9">            };</span></span>
<span class="line"><span style="color: #c9d1d9">            websocket = new WebSocket(&quot;wss://api.deepgram.com/v1/listen?encoding=linear16&amp;sample_rate=&quot; + AudioSettings.outputSampleRate.ToString(), headers);</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">            websocket.OnOpen += () =&gt;</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Connected to Deepgram!&quot;);</span></span>
<span class="line"><span style="color: #c9d1d9">            };</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">            websocket.OnError += (e) =&gt;</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Error: &quot; + e);</span></span>
<span class="line"><span style="color: #c9d1d9">            };</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">            websocket.OnClose += (e) =&gt;</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;Connection closed!&quot;);</span></span>
<span class="line"><span style="color: #c9d1d9">            };</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">            websocket.OnMessage += (bytes) =&gt;</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                var message = System.Text.Encoding.UTF8.GetString(bytes);</span></span>
<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;OnMessage: &quot; + message);</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">                DeepgramResponse deepgramResponse = new DeepgramResponse();</span></span>
<span class="line"><span style="color: #c9d1d9">                object boxedDeepgramResponse = deepgramResponse;</span></span>
<span class="line"><span style="color: #c9d1d9">                EditorJsonUtility.FromJsonOverwrite(message, boxedDeepgramResponse);</span></span>
<span class="line"><span style="color: #c9d1d9">                deepgramResponse = (DeepgramResponse) boxedDeepgramResponse;</span></span>
<span class="line"><span style="color: #c9d1d9">                if (deepgramResponse.is_final)</span></span>
<span class="line"><span style="color: #c9d1d9">                {</span></span>
<span class="line"><span style="color: #c9d1d9">                    var transcript = deepgramResponse.channel.alternatives[0].transcript;</span></span>
<span class="line"><span style="color: #c9d1d9">                    Debug.Log(transcript);</span></span>
<span class="line"><span style="color: #c9d1d9">                    int leftCount = new Regex(Regex.Escape(&quot;left&quot;)).Matches(transcript).Count;</span></span>
<span class="line"><span style="color: #c9d1d9">                    int rightCount = new Regex(Regex.Escape(&quot;right&quot;)).Matches(transcript).Count;</span></span>
<span class="line"><span style="color: #c9d1d9">                    int upCount = new Regex(Regex.Escape(&quot;up&quot;)).Matches(transcript).Count;</span></span>
<span class="line"><span style="color: #c9d1d9">                    int downCount = new Regex(Regex.Escape(&quot;down&quot;)).Matches(transcript).Count;</span></span>
<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; leftCount; i++)</span></span>
<span class="line"><span style="color: #c9d1d9">                    {</span></span>
<span class="line"><span style="color: #c9d1d9">                        _ball.PushLeft();</span></span>
<span class="line"><span style="color: #c9d1d9">                    }</span></span>
<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; rightCount; i++)</span></span>
<span class="line"><span style="color: #c9d1d9">                    {</span></span>
<span class="line"><span style="color: #c9d1d9">                        _ball.PushRight();</span></span>
<span class="line"><span style="color: #c9d1d9">                    }</span></span>
<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; upCount; i++)</span></span>
<span class="line"><span style="color: #c9d1d9">                    {</span></span>
<span class="line"><span style="color: #c9d1d9">                        _ball.PushUp();</span></span>
<span class="line"><span style="color: #c9d1d9">                    }</span></span>
<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; downCount; i++)</span></span>
<span class="line"><span style="color: #c9d1d9">                    {</span></span>
<span class="line"><span style="color: #c9d1d9">                        _ball.PushDown();</span></span>
<span class="line"><span style="color: #c9d1d9">                    }</span></span>
<span class="line"><span style="color: #c9d1d9">                }</span></span>
<span class="line"><span style="color: #c9d1d9">            };</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">            await websocket.Connect();</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">        #if !UNITY_WEBGL || UNITY_EDITOR</span></span>
<span class="line"><span style="color: #c9d1d9">            websocket.DispatchMessageQueue();</span></span>
<span class="line"><span style="color: #c9d1d9">        #endif</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        private async void OnApplicationQuit()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">            await websocket.Close();</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        public async void ProcessAudio(byte[] audio)</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">            if (websocket.State == WebSocketState.Open)</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                await websocket.Send(audio);</span></span>
<span class="line"><span style="color: #c9d1d9">            }</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>
<p>Insert your Deepgram API key where the script says “INSERT_YOUR_API_KEY,” then
attach this script to the “DeepgramObject”, and in the “Inspector” tab click the “Ball” field and select the “Ball” object we created earlier.</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1647404524/blog/2022/03/deepgram-unity-tutorial/assets/add_ball_to_deepgram_object.png" alt="Adding a Ball object reference to the DeepgramObject." style="max-width: 556px;display: block;margin-left: auto;margin-right: auto;">
<p>Ok, so what’s going on here? Well, first the script defines the classes <code>DeepgramResponse</code>, <code>Channel</code>, and <code>Alternative</code> which we will use to deserialize
the Deepgram ASR response, which is in JSON format. Then the script defines the class <code>DeepgramInstace</code> which has two member variables: a <code>WebSocket</code> object,
defined by <code>NativeWebSocket</code>, and a <code>Ball</code> object, defined by us in the “Ball” script.</p>
<p>When the object that this script is attached to gets created, the <code>Start</code> method gets called. Inside <code>Start</code>, we create a new websocket connection to Deepgram
and define functions that need to get executed when that connection opens, closes, receives an error, and receives a message. When the websocket connection
receives a message, we first parse it as a string, and then use <code>EditorJsonUtility</code> to parse the string as a JSON object, deserializing it as a <code>DeepgramResponse</code>
object. We can then directly access the transcript contained in this Deepgram message, count how many times the words “left,” “right,” “up,” and “down” were spoken,
and for each time these words were spoken, we call the <code>PushLeft</code>, <code>PushRight</code>, <code>PushUp</code>, and <code>PushDown</code> methods on our <code>Ball</code> object!</p>
<p>Near the end of the script is one more method of note: <code>ProcessAudio</code>. This method will be called by our microphone object, which will pass in raw audio. <code>ProcessAudio</code>
will then check to see if the websocket connection is open, and if it is, pass the audio along to Deepgram.</p>
<p>Now let’s create an object to handle the microphone input. Right-click in the “Hierarchy” tab, select <code>Audio -&gt; AudioSource</code>, and name this object “MicrophoneObject.”
Then create a new script called “MicrophoneInstance” and make its contents the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #c9d1d9">    using System.Collections;</span></span>
<span class="line"><span style="color: #c9d1d9">    using System.Collections.Generic;</span></span>
<span class="line"><span style="color: #c9d1d9">    using UnityEngine;</span></span>
<span class="line"><span style="color: #c9d1d9">    using UnityEngine.Audio;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">    [RequireComponent (typeof (AudioSource))]</span></span>
<span class="line"><span style="color: #c9d1d9">    public class MicrophoneInstance : MonoBehaviour</span></span>
<span class="line"><span style="color: #c9d1d9">    {</span></span>
<span class="line"><span style="color: #c9d1d9">        AudioSource _audioSource;</span></span>
<span class="line"><span style="color: #c9d1d9">        int lastPosition, currentPosition;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        public DeepgramInstance _deepgramInstance;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        void Start()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">            _audioSource = GetComponent&lt;AudioSource&gt; ();</span></span>
<span class="line"><span style="color: #c9d1d9">            if (Microphone.devices.Length &gt; 0)</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                _audioSource.clip = Microphone.Start(null, true, 10, AudioSettings.outputSampleRate);</span></span>
<span class="line"><span style="color: #c9d1d9">            }</span></span>
<span class="line"><span style="color: #c9d1d9">            else</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                Debug.Log(&quot;This will crash!&quot;);</span></span>
<span class="line"><span style="color: #c9d1d9">            }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">            _audioSource.Play();</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        void Update()</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">            if ((currentPosition = Microphone.GetPosition(null)) &gt; 0)</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                if (lastPosition &gt; currentPosition)</span></span>
<span class="line"><span style="color: #c9d1d9">                    lastPosition = 0;</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">                if (currentPosition - lastPosition &gt; 0)</span></span>
<span class="line"><span style="color: #c9d1d9">                {</span></span>
<span class="line"><span style="color: #c9d1d9">                    float[] samples = new float[(currentPosition - lastPosition) * _audioSource.clip.channels];</span></span>
<span class="line"><span style="color: #c9d1d9">                    _audioSource.clip.GetData(samples, lastPosition);</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">                    short[] samplesAsShorts = new short[(currentPosition - lastPosition) * _audioSource.clip.channels];</span></span>
<span class="line"><span style="color: #c9d1d9">                    for (int i = 0; i &lt; samples.Length; i++)</span></span>
<span class="line"><span style="color: #c9d1d9">                    {</span></span>
<span class="line"><span style="color: #c9d1d9">                        samplesAsShorts[i] = f32_to_i16(samples[i]);</span></span>
<span class="line"><span style="color: #c9d1d9">                    }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">                    var samplesAsBytes = new byte[samplesAsShorts.Length * 2];</span></span>
<span class="line"><span style="color: #c9d1d9">                    System.Buffer.BlockCopy(samplesAsShorts, 0, samplesAsBytes, 0, samplesAsBytes.Length);</span></span>
<span class="line"><span style="color: #c9d1d9">                    _deepgramInstance.ProcessAudio(samplesAsBytes);</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">                    if (!GetComponent&lt;AudioSource&gt;().isPlaying)</span></span>
<span class="line"><span style="color: #c9d1d9">                        GetComponent&lt;AudioSource&gt;().Play();</span></span>
<span class="line"><span style="color: #c9d1d9">                    lastPosition = currentPosition;</span></span>
<span class="line"><span style="color: #c9d1d9">                }</span></span>
<span class="line"><span style="color: #c9d1d9">            }</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9"></span></span>
<span class="line"><span style="color: #c9d1d9">        short f32_to_i16(float sample)</span></span>
<span class="line"><span style="color: #c9d1d9">        {</span></span>
<span class="line"><span style="color: #c9d1d9">            sample = sample * 32768;</span></span>
<span class="line"><span style="color: #c9d1d9">            if (sample &gt; 32767)</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                return 32767;</span></span>
<span class="line"><span style="color: #c9d1d9">            }</span></span>
<span class="line"><span style="color: #c9d1d9">            if (sample &lt; -32768)</span></span>
<span class="line"><span style="color: #c9d1d9">            {</span></span>
<span class="line"><span style="color: #c9d1d9">                return -32768;</span></span>
<span class="line"><span style="color: #c9d1d9">            }</span></span>
<span class="line"><span style="color: #c9d1d9">            return (short) sample;</span></span>
<span class="line"><span style="color: #c9d1d9">        }</span></span>
<span class="line"><span style="color: #c9d1d9">    }</span></span></code></pre>
<p>Attach this script to the “MicrophoneObject”, and in the “Inspector” tab click the “DeepgramInstance” field and select the “DeepgramObject” object we created earlier.</p>
<p>In this script, we define the <code>MicrophoneInstance</code> class which contains an <code>AudioSource</code> member variable, a <code>DeepgramInstance</code> member variable, and 2 integer member
variables which help to keep track of where we are in the microphone’s audio stream. The <code>Start</code> method will set up the microphone to stream audio data into
the <code>clip</code> of the <code>AudioSource</code> object, and will start playback of the <code>AudioSource</code>.</p>
<p>The <code>Update</code> method of a <code>MonoBehavior</code> class gets called by the under-the-hood game loop every frame and is the typical place to handle game logic.
In our case, it gets the current position of the microphone’s audio stream, compares it to the last position of the microphone’s audio stream to
create a buffer, <code>samples</code>, of floats the right size to store all of the new audio data since the last time <code>Update</code> was called, grabs that audio data via the method <code>GetData</code>
and stores it in <code>samples</code>. Then, these <code>f32</code> samples are converted to <code>i16</code> samples, and then converted to raw bytes, and finally passed to the <code>DeepgramInstance</code>’s <code>ProcessAudio</code>
method which, as we mentioned before, will then pass that audio on to Deepgram to get transcribed!</p>
<p>Now, we are <em>almost</em> ready to try out our demo. There is one more task to do to make the demo reasonably playable, and if you try to play the demo now, you may see what it is!
Currently, in order to get the microphone’s audio data, the microphone’s audio stream must play. However, having the microphone’s audio play through your computer’s speakers
can be problematic and lead to feedback issues (plus, hearing your voice in the game isn’t the point). To fix this issue, go to the “Assets” panel, right-click,
and select <code>Create -&gt; Audio Mixer</code>. Name the mixer “Mixer.”</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377747/blog/2022/03/deepgram-unity-tutorial/assets/add_audio_mixer.png" alt="Add a Mixer." style="max-width: 1176px;display: block;margin-left: auto;margin-right: auto;">
<p>Double click “Mixer” in the “Assets” panel, then next to “Groups” click the ”+” button and name the group “Microphone.”
Now go to the fader for this group and turn it all the way down.</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/turn_fader_down.png" alt="Silence the Microphone group." style="max-width: 1090px;display: block;margin-left: auto;margin-right: auto;">
<p>Now, click the “MicrophoneObject” in the “Hierarchy” tab and then click on the field for “Output” in the “Audio Source” node in the “Inspector” tab and select “Microphone (Mixer).”
This will ensure the microphone audio can stream its data without being directed to your speakers!</p>
<img src="https://res.cloudinary.com/deepgram/image/upload/v1647377746/blog/2022/03/deepgram-unity-tutorial/assets/send_audio_source_to_mixer_group.png" alt="Silence the Microphone group." style="max-width: 568px;display: block;margin-left: auto;margin-right: auto;">
<p>You should now be able to press “Play” (►) and make the ball jump around by saying “left,” “right,” “up,” or “down” in the microphone!</p>
<h2 id="build-new-features">Build New Features</h2>
<p>Controlling a single ball with commands has a noticeable amount of latency. This can be alleviated somewhat
by using <a href="https://developers.deepgram.com/documentation/features/interim-results/">interim results</a>, however,
the same transcribed word might be present in subsequent interim results, so logic would have to be added
to avoid double counting commands. Still, the use of interim results can vastly reduce latency, so I strongly
suggest trying it out! In addition, here are a few more things to think about and try out with this demo before diving into
a full-on speech-enhanced game:</p>
<ul>
<li>Change the <a href="https://docs.unity3d.com/Manual/class-PhysicMaterial.html">Physics Material</a> of the ball to make it bounce instead of stick to walls.</li>
<li>Add more balls to the box - try making just one of them, several of them, or all of them react to the speech commands.</li>
<li>Give the balls different colors, and implement logic to control each group (like “red, left!”, “blue, up!”).</li>
<li>Remove gravity for balls and exchange the simple box with a sprawling level of walls.</li>
</ul>
<p>If you try out the above ideas, you may come to a fun idea for a game - how about a game along the lines of Pikmin, where you command
different groups of creatures to move to different parts of the map to accomplish objectives? Instead of using a complex user interface
of buttons, mice, and/or a keyboard, the game could simply require you to dictate commands!</p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>Speech-enhanced games are not necessarily new, but until recently they have mostly centered around a handful of command words.
With today’s ASR engines like Deepgram, supporting thousands of command words out of the box has become trivial, indeed transcribing entire
conversations and complex commands is now easily within reach and has the power to enrich games. I’ll end with a few ideas which
may give you some inspiration!</p>
<ul>
<li>Along the lines of the example mentioned in the previous section, build an RTS where you control units with your voice. There may be more
latency than you get with a mouse click, but this could be turned into a core game mechanic - maybe you are communicating with your units
via a radio, and any network + transcription latency would feel like latency of your units receiving your message.</li>
<li>Also following up on this idea, make a game where you primarily control a single player, but have the option to give commands to other
AI players on your team - these commands could be conveyed with your voice without having to swap to a complex menu, interrupting the control of
your primary character. (For a concrete example, think Hyrule Warriors.)</li>
<li>For MOBAs where voice chat is not easily available (think Pokémon Unite), allow for command phrases to be selected via ASR instead of clunky menus.</li>
<li>To avoid issues with latency entirely, make speech-enhanced sections of your game occur during context-sensitive situations where the main action
of the game pauses so that reaction time becomes a non-issue. As an example, in many Zelda games, the game freezes when you pull out an instrument,
and playing the right notes on the instrument can cause events to occur - imagine this but with ASR and specific phrases.</li>
<li>For in-game voice chat, write a plugin that performs ASR for each player in their preferred
language (see Deepgram’s supported languages <a href="https://developers.deepgram.com/documentation/features/language/">here</a>, and then passes
the resulting transcripts through a translator to display everyone’s speech to everyone else in their preferred language.</li>
</ul>
<p>Speech-in-games is a relatively untapped area, so this list of ideas and suggestions is far from exhaustive, but I sincerely hope this helps
on the journey towards making games more immersive, interesting, and inclusive!</p>
<p>If you have any questions, please feel free to reach out on Twitter - we’re @DeepgramDevs.</p>`;
});

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
