import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                           *//* empty css                          */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "exploring-tfjs-models", "text": "Exploring TFJS Models" }, { "depth": 3, "slug": "pre-trained-tensorflowjs-models-repository", "text": "Pre-trained TensorFlow.js models repository" }, { "depth": 3, "slug": "tensorflow-hub", "text": "TensorFlow Hub" }, { "depth": 2, "slug": "getting-started-with-tfjs", "text": "Getting Started with TFJS" }, { "depth": 3, "slug": "import-an-existing-pre-trained-model", "text": "Import an Existing, Pre-trained Model" }, { "depth": 4, "slug": "mobilenet", "text": "MobileNet" }, { "depth": 3, "slug": "retrain-an-imported-machine-learning-model", "text": "Retrain an Imported Machine Learning Model" }, { "depth": 3, "slug": "create-a-new-model", "text": "Create a New Model" }, { "depth": 2, "slug": "should-we-use-tensorflowjs-for-deep-learning", "text": "Should we use TensorFlow.js for Deep Learning?" }], "source": "\nMachine Learning (ML) has historically belonged to Python engineers, Data Scientists, and mathematicians, with frontend developers having very usage and support. In fact, JavaScript ranks 5th of all languages used for Machine Learning, coming in at around 7%. With access to microphones and webcams in the browser, we're just getting started with exploring a whole new landscape of what we can do as front-end developers. This is where TensorFlow.js comes in.\n\nTensorFlow.js (TFJS) is a JavaScript framework that we can use to create machine learning models for desktop, web, mobile, and cloud, giving us access to images, video, audio, and text models. We can use this technology for augmented reality, sound recognition, sentiment analysis, web page optimization, accessibility, and more.\n\n## Exploring TFJS Models\n\n### [Pre-trained TensorFlow.js models repository](https://github.com/tensorflow/tfjs-models/)\n\nThis repository contains ten different ready-to-use models, categorizes each of them by type of model (images, audio, text, and general utilities), shares the details of each, gives installation directions, links to the source code, and provides a demo for most of the models.\n\n### [TensorFlow Hub](https://tfhub.dev/)\n\nTensorFlow Hub is a centralized site with hundreds of trained models. It includes model formats for TF.js, TFLite, and Coral, so be sure to select `TF.js` to explore other models that are available for TFJS. Within the hub, the name of the model, the type of the model, description, and dataset used are listed. If we click on an entry, we'll see more information, including an overview, how to implement the model, how to fine-tune a model--if that's an option--and more.\n\n## Getting Started with TFJS\n\nThere are three different ways we can use TFJS; each requiring a little more knowledge and understanding of how the models work.\n\n### Import an Existing, Pre-trained Model\n\nWe can take a TensorFlow or Keras model that's been trained offline and load it into the browser. If we want to explore existing models and their demos, we can check out the [TFJS models repository](https://github.com/tensorflow/tfjs-models/).\n\nWhen we take an existing model, we can get it working immediately with a couple of lines of JavaScript. We can get this up and running using a script tag or installing with `npm` or `yarn`.\n\n#### MobileNet\n\nWe're going to implement the MobileNet model, using the code they've give us in the [MobileNet repository](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet)\n\n> MobileNets are small, low-latency, low-power models parameterized to meet the resource  constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used.\n> We're going to use the model to classify an image. We can see a working codesandbox [here](https://codesandbox.io/s/mobilenet-e1gmmh) or checkout the code below:\n\n```js\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n    <body>\n      <h1>Check the console for our predictions!</h1>\n    </body>\n  \n    {/*<!-- Load TensorFlow.js. This is required to use MobileNet. -->*/}\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.1\"> <\/script>\n    {/*<!-- Load the MobileNet model. -->*/}\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0\"> <\/script>\n    {/*<!-- Replace this with your image. Make sure CORS settings allow reading the image! -->*/}\n    <img id=\"img\" src=\"cat.jpg\" style=\"width:200px;height:300px\">\n    {/*<!-- Place your code in the script tag below. You can also use an external .js file -->*/}\n    <script>\n      // Notice there is no 'import' statement. 'mobilenet' and 'tf' is\n      // available on the index-page because of the script tag above.\n      const img = document.getElementById('img');\n      // Load the model.\n      mobilenet.load().then(model => {\n        // Classify the image.\n        model.classify(img).then(predictions => {\n          console.log({predictions});\n        });\n      });\n    <\/script>\n</html>\n\n```\n\nNotice in the console, we're given three predictions for the image. And all of this is put together in fewer than 30 lines of code.\n\n![](https://res.cloudinary.com/deepgram/image/upload/v1660235143/blog/2022/08/getting-started-with-tensorflowjs/predictions.png)\n\n### Retrain an Imported Machine Learning Model\n\nWe can do more than use existing models straight of out the box. We can use transfer learning to continue to train a model (known as a base model) that was trained offline with data we collect from the browser. Transfer learning is when we take a pre-trained model and re-use it for a related task. For example, we might take a model trained with image detection. It already knows how to identify features of objects like shapes. We might take this model and further train it to identify a specific object. This gives us a speedy way to train that doesn't require us to invest the full amount of time training and developing a new model.\n\n### Create a New Model\n\nOnce we understand models and layers, we can progress to creating our own model. Using the Layers API or the Core API, we can create our own model. This allows us to have control over defining what our model will do, how we train our model, and the output when we run it. It's generally recommended to use the Layers API first since it's modeled after the Keras API.\n\n## Should we use TensorFlow.js for Deep Learning?\n\nDepending on your use case, TFJS can be an incredible valuable tool that allows for browser interaction, including using the webcam and the microphone. There are use cases that create more interactive experiences for education, healthcare support, accessibility advancements, and opportunities for just plain fun.\n\nAs front-end developers, we're often kept out of conversations about ML, data science, etc. Tensorflow.js gives us an opportunity to help shape a developing field, access tools we haven't before, and expand the horizon of the frontend experience.  Having a variety of voices in conversations that impact, well, everyone is critical. Diversity of thought, input into development, and different backgrounds can help to not only push the industry forward, but to redefine what we can do in the frontend landscape. Tech that's belonged to Data Scientists can be part of what we do and allow us to keep pushing boundaries on what we're creating and the problems we're solving.\n\nTo get started with TensorFlow.js, you can find a tutorial [here](https://www.tensorflow.org/js/tutorials). If you want to see a TFJS + Deepgram Project, you can check out [Add Live Speech Bubbles to YouTube Videos with Autobubble](https://blog.deepgram.com/autobubble-youtube-speech-bubbles/), and, as always, you can hit us up with any questions on Twitter [@deepgramAI](https://twitter.com/DeepgramAI).\n\n", "html": '<p>Machine Learning (ML) has historically belonged to Python engineers, Data Scientists, and mathematicians, with frontend developers having very usage and support. In fact, JavaScript ranks 5th of all languages used for Machine Learning, coming in at around 7%. With access to microphones and webcams in the browser, we\u2019re just getting started with exploring a whole new landscape of what we can do as front-end developers. This is where TensorFlow.js comes in.</p>\n<p>TensorFlow.js (TFJS) is a JavaScript framework that we can use to create machine learning models for desktop, web, mobile, and cloud, giving us access to images, video, audio, and text models. We can use this technology for augmented reality, sound recognition, sentiment analysis, web page optimization, accessibility, and more.</p>\n<h2 id="exploring-tfjs-models">Exploring TFJS Models</h2>\n<h3 id="pre-trained-tensorflowjs-models-repository"><a href="https://github.com/tensorflow/tfjs-models/">Pre-trained TensorFlow.js models repository</a></h3>\n<p>This repository contains ten different ready-to-use models, categorizes each of them by type of model (images, audio, text, and general utilities), shares the details of each, gives installation directions, links to the source code, and provides a demo for most of the models.</p>\n<h3 id="tensorflow-hub"><a href="https://tfhub.dev/">TensorFlow Hub</a></h3>\n<p>TensorFlow Hub is a centralized site with hundreds of trained models. It includes model formats for TF.js, TFLite, and Coral, so be sure to select <code is:raw>TF.js</code> to explore other models that are available for TFJS. Within the hub, the name of the model, the type of the model, description, and dataset used are listed. If we click on an entry, we\u2019ll see more information, including an overview, how to implement the model, how to fine-tune a model\u2014if that\u2019s an option\u2014and more.</p>\n<h2 id="getting-started-with-tfjs">Getting Started with TFJS</h2>\n<p>There are three different ways we can use TFJS; each requiring a little more knowledge and understanding of how the models work.</p>\n<h3 id="import-an-existing-pre-trained-model">Import an Existing, Pre-trained Model</h3>\n<p>We can take a TensorFlow or Keras model that\u2019s been trained offline and load it into the browser. If we want to explore existing models and their demos, we can check out the <a href="https://github.com/tensorflow/tfjs-models/">TFJS models repository</a>.</p>\n<p>When we take an existing model, we can get it working immediately with a couple of lines of JavaScript. We can get this up and running using a script tag or installing with <code is:raw>npm</code> or <code is:raw>yarn</code>.</p>\n<h4 id="mobilenet">MobileNet</h4>\n<p>We\u2019re going to implement the MobileNet model, using the code they\u2019ve give us in the <a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet">MobileNet repository</a></p>\n<blockquote>\n<p>MobileNets are small, low-latency, low-power models parameterized to meet the resource  constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used.\nWe\u2019re going to use the model to classify an image. We can see a working codesandbox <a href="https://codesandbox.io/s/mobilenet-e1gmmh">here</a> or checkout the code below:</p>\n</blockquote>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">&lt;!</span><span style="color: #79C0FF">DOCTYPE</span><span style="color: #C9D1D9"> html</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Check the console for our predictions!&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Load TensorFlow.js. This is required to use MobileNet. --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.1&quot;</span><span style="color: #C9D1D9">&gt; &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Load the MobileNet model. --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0&quot;</span><span style="color: #C9D1D9">&gt; &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Replace this with your image. Make sure CORS settings allow reading the image! --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;img&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;cat.jpg&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;width:200px;height:300px&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Place your code in the script tag below. You can also use an external .js file --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      // Notice there is no &#39;import&#39; statement. &#39;mobilenet&#39; and &#39;tf&#39; is</span></span>\n<span class="line"><span style="color: #C9D1D9">      // available on the index-page because of the script tag above.</span></span>\n<span class="line"><span style="color: #C9D1D9">      const img = document.getElementById(&#39;img&#39;);</span></span>\n<span class="line"><span style="color: #C9D1D9">      // Load the model.</span></span>\n<span class="line"><span style="color: #C9D1D9">      mobilenet.load().then(model =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Classify the image.</span></span>\n<span class="line"><span style="color: #C9D1D9">        model.</span><span style="color: #D2A8FF">classify</span><span style="color: #C9D1D9">(img).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">predictions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({predictions});</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span></code></pre>\n<p>Notice in the console, we\u2019re given three predictions for the image. And all of this is put together in fewer than 30 lines of code.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660235143/blog/2022/08/getting-started-with-tensorflowjs/predictions.png" alt=""></p>\n<h3 id="retrain-an-imported-machine-learning-model">Retrain an Imported Machine Learning Model</h3>\n<p>We can do more than use existing models straight of out the box. We can use transfer learning to continue to train a model (known as a base model) that was trained offline with data we collect from the browser. Transfer learning is when we take a pre-trained model and re-use it for a related task. For example, we might take a model trained with image detection. It already knows how to identify features of objects like shapes. We might take this model and further train it to identify a specific object. This gives us a speedy way to train that doesn\u2019t require us to invest the full amount of time training and developing a new model.</p>\n<h3 id="create-a-new-model">Create a New Model</h3>\n<p>Once we understand models and layers, we can progress to creating our own model. Using the Layers API or the Core API, we can create our own model. This allows us to have control over defining what our model will do, how we train our model, and the output when we run it. It\u2019s generally recommended to use the Layers API first since it\u2019s modeled after the Keras API.</p>\n<h2 id="should-we-use-tensorflowjs-for-deep-learning">Should we use TensorFlow.js for Deep Learning?</h2>\n<p>Depending on your use case, TFJS can be an incredible valuable tool that allows for browser interaction, including using the webcam and the microphone. There are use cases that create more interactive experiences for education, healthcare support, accessibility advancements, and opportunities for just plain fun.</p>\n<p>As front-end developers, we\u2019re often kept out of conversations about ML, data science, etc. Tensorflow.js gives us an opportunity to help shape a developing field, access tools we haven\u2019t before, and expand the horizon of the frontend experience.  Having a variety of voices in conversations that impact, well, everyone is critical. Diversity of thought, input into development, and different backgrounds can help to not only push the industry forward, but to redefine what we can do in the frontend landscape. Tech that\u2019s belonged to Data Scientists can be part of what we do and allow us to keep pushing boundaries on what we\u2019re creating and the problems we\u2019re solving.</p>\n<p>To get started with TensorFlow.js, you can find a tutorial <a href="https://www.tensorflow.org/js/tutorials">here</a>. If you want to see a TFJS + Deepgram Project, you can check out <a href="https://blog.deepgram.com/autobubble-youtube-speech-bubbles/">Add Live Speech Bubbles to YouTube Videos with Autobubble</a>, and, as always, you can hit us up with any questions on Twitter <a href="https://twitter.com/DeepgramAI">@deepgramAI</a>.</p>' };
const frontmatter = { "title": "Machine Learning for Front-end Developers: Get Started with TensorFlow.js", "description": "Machine Learning used to be just for Data Scientists and Python developers, but with TensorFlow.js, front-end developers have more access than ever.", "date": "2022-09-05T18:54:17.740Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1660592694/blog/2022/08/getting-started-with-tensorflowjs/tfjs-for-beginners-blog%402x.jpg", "authors": ["bekah-hawrot-weigel"], "category": "tutorial", "tags": ["machine-learning", "tensorflowjs"], "shorturls": { "share": "https://dpgr.am/4a1060f", "twitter": "https://dpgr.am/15b7a58", "linkedin": "https://dpgr.am/fc88674", "reddit": "https://dpgr.am/ecae480", "facebook": "https://dpgr.am/4ff184b" }, "astro": { "headings": [{ "depth": 2, "slug": "exploring-tfjs-models", "text": "Exploring TFJS Models" }, { "depth": 3, "slug": "pre-trained-tensorflowjs-models-repository", "text": "Pre-trained TensorFlow.js models repository" }, { "depth": 3, "slug": "tensorflow-hub", "text": "TensorFlow Hub" }, { "depth": 2, "slug": "getting-started-with-tfjs", "text": "Getting Started with TFJS" }, { "depth": 3, "slug": "import-an-existing-pre-trained-model", "text": "Import an Existing, Pre-trained Model" }, { "depth": 4, "slug": "mobilenet", "text": "MobileNet" }, { "depth": 3, "slug": "retrain-an-imported-machine-learning-model", "text": "Retrain an Imported Machine Learning Model" }, { "depth": 3, "slug": "create-a-new-model", "text": "Create a New Model" }, { "depth": 2, "slug": "should-we-use-tensorflowjs-for-deep-learning", "text": "Should we use TensorFlow.js for Deep Learning?" }], "source": "\nMachine Learning (ML) has historically belonged to Python engineers, Data Scientists, and mathematicians, with frontend developers having very usage and support. In fact, JavaScript ranks 5th of all languages used for Machine Learning, coming in at around 7%. With access to microphones and webcams in the browser, we're just getting started with exploring a whole new landscape of what we can do as front-end developers. This is where TensorFlow.js comes in.\n\nTensorFlow.js (TFJS) is a JavaScript framework that we can use to create machine learning models for desktop, web, mobile, and cloud, giving us access to images, video, audio, and text models. We can use this technology for augmented reality, sound recognition, sentiment analysis, web page optimization, accessibility, and more.\n\n## Exploring TFJS Models\n\n### [Pre-trained TensorFlow.js models repository](https://github.com/tensorflow/tfjs-models/)\n\nThis repository contains ten different ready-to-use models, categorizes each of them by type of model (images, audio, text, and general utilities), shares the details of each, gives installation directions, links to the source code, and provides a demo for most of the models.\n\n### [TensorFlow Hub](https://tfhub.dev/)\n\nTensorFlow Hub is a centralized site with hundreds of trained models. It includes model formats for TF.js, TFLite, and Coral, so be sure to select `TF.js` to explore other models that are available for TFJS. Within the hub, the name of the model, the type of the model, description, and dataset used are listed. If we click on an entry, we'll see more information, including an overview, how to implement the model, how to fine-tune a model--if that's an option--and more.\n\n## Getting Started with TFJS\n\nThere are three different ways we can use TFJS; each requiring a little more knowledge and understanding of how the models work.\n\n### Import an Existing, Pre-trained Model\n\nWe can take a TensorFlow or Keras model that's been trained offline and load it into the browser. If we want to explore existing models and their demos, we can check out the [TFJS models repository](https://github.com/tensorflow/tfjs-models/).\n\nWhen we take an existing model, we can get it working immediately with a couple of lines of JavaScript. We can get this up and running using a script tag or installing with `npm` or `yarn`.\n\n#### MobileNet\n\nWe're going to implement the MobileNet model, using the code they've give us in the [MobileNet repository](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet)\n\n> MobileNets are small, low-latency, low-power models parameterized to meet the resource  constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used.\n> We're going to use the model to classify an image. We can see a working codesandbox [here](https://codesandbox.io/s/mobilenet-e1gmmh) or checkout the code below:\n\n```js\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n    <body>\n      <h1>Check the console for our predictions!</h1>\n    </body>\n  \n    {/*<!-- Load TensorFlow.js. This is required to use MobileNet. -->*/}\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.1\"> <\/script>\n    {/*<!-- Load the MobileNet model. -->*/}\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0\"> <\/script>\n    {/*<!-- Replace this with your image. Make sure CORS settings allow reading the image! -->*/}\n    <img id=\"img\" src=\"cat.jpg\" style=\"width:200px;height:300px\">\n    {/*<!-- Place your code in the script tag below. You can also use an external .js file -->*/}\n    <script>\n      // Notice there is no 'import' statement. 'mobilenet' and 'tf' is\n      // available on the index-page because of the script tag above.\n      const img = document.getElementById('img');\n      // Load the model.\n      mobilenet.load().then(model => {\n        // Classify the image.\n        model.classify(img).then(predictions => {\n          console.log({predictions});\n        });\n      });\n    <\/script>\n</html>\n\n```\n\nNotice in the console, we're given three predictions for the image. And all of this is put together in fewer than 30 lines of code.\n\n![](https://res.cloudinary.com/deepgram/image/upload/v1660235143/blog/2022/08/getting-started-with-tensorflowjs/predictions.png)\n\n### Retrain an Imported Machine Learning Model\n\nWe can do more than use existing models straight of out the box. We can use transfer learning to continue to train a model (known as a base model) that was trained offline with data we collect from the browser. Transfer learning is when we take a pre-trained model and re-use it for a related task. For example, we might take a model trained with image detection. It already knows how to identify features of objects like shapes. We might take this model and further train it to identify a specific object. This gives us a speedy way to train that doesn't require us to invest the full amount of time training and developing a new model.\n\n### Create a New Model\n\nOnce we understand models and layers, we can progress to creating our own model. Using the Layers API or the Core API, we can create our own model. This allows us to have control over defining what our model will do, how we train our model, and the output when we run it. It's generally recommended to use the Layers API first since it's modeled after the Keras API.\n\n## Should we use TensorFlow.js for Deep Learning?\n\nDepending on your use case, TFJS can be an incredible valuable tool that allows for browser interaction, including using the webcam and the microphone. There are use cases that create more interactive experiences for education, healthcare support, accessibility advancements, and opportunities for just plain fun.\n\nAs front-end developers, we're often kept out of conversations about ML, data science, etc. Tensorflow.js gives us an opportunity to help shape a developing field, access tools we haven't before, and expand the horizon of the frontend experience.  Having a variety of voices in conversations that impact, well, everyone is critical. Diversity of thought, input into development, and different backgrounds can help to not only push the industry forward, but to redefine what we can do in the frontend landscape. Tech that's belonged to Data Scientists can be part of what we do and allow us to keep pushing boundaries on what we're creating and the problems we're solving.\n\nTo get started with TensorFlow.js, you can find a tutorial [here](https://www.tensorflow.org/js/tutorials). If you want to see a TFJS + Deepgram Project, you can check out [Add Live Speech Bubbles to YouTube Videos with Autobubble](https://blog.deepgram.com/autobubble-youtube-speech-bubbles/), and, as always, you can hit us up with any questions on Twitter [@deepgramAI](https://twitter.com/DeepgramAI).\n\n", "html": '<p>Machine Learning (ML) has historically belonged to Python engineers, Data Scientists, and mathematicians, with frontend developers having very usage and support. In fact, JavaScript ranks 5th of all languages used for Machine Learning, coming in at around 7%. With access to microphones and webcams in the browser, we\u2019re just getting started with exploring a whole new landscape of what we can do as front-end developers. This is where TensorFlow.js comes in.</p>\n<p>TensorFlow.js (TFJS) is a JavaScript framework that we can use to create machine learning models for desktop, web, mobile, and cloud, giving us access to images, video, audio, and text models. We can use this technology for augmented reality, sound recognition, sentiment analysis, web page optimization, accessibility, and more.</p>\n<h2 id="exploring-tfjs-models">Exploring TFJS Models</h2>\n<h3 id="pre-trained-tensorflowjs-models-repository"><a href="https://github.com/tensorflow/tfjs-models/">Pre-trained TensorFlow.js models repository</a></h3>\n<p>This repository contains ten different ready-to-use models, categorizes each of them by type of model (images, audio, text, and general utilities), shares the details of each, gives installation directions, links to the source code, and provides a demo for most of the models.</p>\n<h3 id="tensorflow-hub"><a href="https://tfhub.dev/">TensorFlow Hub</a></h3>\n<p>TensorFlow Hub is a centralized site with hundreds of trained models. It includes model formats for TF.js, TFLite, and Coral, so be sure to select <code is:raw>TF.js</code> to explore other models that are available for TFJS. Within the hub, the name of the model, the type of the model, description, and dataset used are listed. If we click on an entry, we\u2019ll see more information, including an overview, how to implement the model, how to fine-tune a model\u2014if that\u2019s an option\u2014and more.</p>\n<h2 id="getting-started-with-tfjs">Getting Started with TFJS</h2>\n<p>There are three different ways we can use TFJS; each requiring a little more knowledge and understanding of how the models work.</p>\n<h3 id="import-an-existing-pre-trained-model">Import an Existing, Pre-trained Model</h3>\n<p>We can take a TensorFlow or Keras model that\u2019s been trained offline and load it into the browser. If we want to explore existing models and their demos, we can check out the <a href="https://github.com/tensorflow/tfjs-models/">TFJS models repository</a>.</p>\n<p>When we take an existing model, we can get it working immediately with a couple of lines of JavaScript. We can get this up and running using a script tag or installing with <code is:raw>npm</code> or <code is:raw>yarn</code>.</p>\n<h4 id="mobilenet">MobileNet</h4>\n<p>We\u2019re going to implement the MobileNet model, using the code they\u2019ve give us in the <a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet">MobileNet repository</a></p>\n<blockquote>\n<p>MobileNets are small, low-latency, low-power models parameterized to meet the resource  constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used.\nWe\u2019re going to use the model to classify an image. We can see a working codesandbox <a href="https://codesandbox.io/s/mobilenet-e1gmmh">here</a> or checkout the code below:</p>\n</blockquote>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">&lt;!</span><span style="color: #79C0FF">DOCTYPE</span><span style="color: #C9D1D9"> html</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Check the console for our predictions!&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Load TensorFlow.js. This is required to use MobileNet. --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.1&quot;</span><span style="color: #C9D1D9">&gt; &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Load the MobileNet model. --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0&quot;</span><span style="color: #C9D1D9">&gt; &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Replace this with your image. Make sure CORS settings allow reading the image! --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;img&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;cat.jpg&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;width:200px;height:300px&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Place your code in the script tag below. You can also use an external .js file --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      // Notice there is no &#39;import&#39; statement. &#39;mobilenet&#39; and &#39;tf&#39; is</span></span>\n<span class="line"><span style="color: #C9D1D9">      // available on the index-page because of the script tag above.</span></span>\n<span class="line"><span style="color: #C9D1D9">      const img = document.getElementById(&#39;img&#39;);</span></span>\n<span class="line"><span style="color: #C9D1D9">      // Load the model.</span></span>\n<span class="line"><span style="color: #C9D1D9">      mobilenet.load().then(model =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Classify the image.</span></span>\n<span class="line"><span style="color: #C9D1D9">        model.</span><span style="color: #D2A8FF">classify</span><span style="color: #C9D1D9">(img).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">predictions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({predictions});</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span></code></pre>\n<p>Notice in the console, we\u2019re given three predictions for the image. And all of this is put together in fewer than 30 lines of code.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660235143/blog/2022/08/getting-started-with-tensorflowjs/predictions.png" alt=""></p>\n<h3 id="retrain-an-imported-machine-learning-model">Retrain an Imported Machine Learning Model</h3>\n<p>We can do more than use existing models straight of out the box. We can use transfer learning to continue to train a model (known as a base model) that was trained offline with data we collect from the browser. Transfer learning is when we take a pre-trained model and re-use it for a related task. For example, we might take a model trained with image detection. It already knows how to identify features of objects like shapes. We might take this model and further train it to identify a specific object. This gives us a speedy way to train that doesn\u2019t require us to invest the full amount of time training and developing a new model.</p>\n<h3 id="create-a-new-model">Create a New Model</h3>\n<p>Once we understand models and layers, we can progress to creating our own model. Using the Layers API or the Core API, we can create our own model. This allows us to have control over defining what our model will do, how we train our model, and the output when we run it. It\u2019s generally recommended to use the Layers API first since it\u2019s modeled after the Keras API.</p>\n<h2 id="should-we-use-tensorflowjs-for-deep-learning">Should we use TensorFlow.js for Deep Learning?</h2>\n<p>Depending on your use case, TFJS can be an incredible valuable tool that allows for browser interaction, including using the webcam and the microphone. There are use cases that create more interactive experiences for education, healthcare support, accessibility advancements, and opportunities for just plain fun.</p>\n<p>As front-end developers, we\u2019re often kept out of conversations about ML, data science, etc. Tensorflow.js gives us an opportunity to help shape a developing field, access tools we haven\u2019t before, and expand the horizon of the frontend experience.  Having a variety of voices in conversations that impact, well, everyone is critical. Diversity of thought, input into development, and different backgrounds can help to not only push the industry forward, but to redefine what we can do in the frontend landscape. Tech that\u2019s belonged to Data Scientists can be part of what we do and allow us to keep pushing boundaries on what we\u2019re creating and the problems we\u2019re solving.</p>\n<p>To get started with TensorFlow.js, you can find a tutorial <a href="https://www.tensorflow.org/js/tutorials">here</a>. If you want to see a TFJS + Deepgram Project, you can check out <a href="https://blog.deepgram.com/autobubble-youtube-speech-bubbles/">Add Live Speech Bubbles to YouTube Videos with Autobubble</a>, and, as always, you can hit us up with any questions on Twitter <a href="https://twitter.com/DeepgramAI">@deepgramAI</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/machine-learning-for-front-end-developers-get-started-with-tensorflow-js/index.md" };
function rawContent() {
  return "\nMachine Learning (ML) has historically belonged to Python engineers, Data Scientists, and mathematicians, with frontend developers having very usage and support. In fact, JavaScript ranks 5th of all languages used for Machine Learning, coming in at around 7%. With access to microphones and webcams in the browser, we're just getting started with exploring a whole new landscape of what we can do as front-end developers. This is where TensorFlow.js comes in.\n\nTensorFlow.js (TFJS) is a JavaScript framework that we can use to create machine learning models for desktop, web, mobile, and cloud, giving us access to images, video, audio, and text models. We can use this technology for augmented reality, sound recognition, sentiment analysis, web page optimization, accessibility, and more.\n\n## Exploring TFJS Models\n\n### [Pre-trained TensorFlow.js models repository](https://github.com/tensorflow/tfjs-models/)\n\nThis repository contains ten different ready-to-use models, categorizes each of them by type of model (images, audio, text, and general utilities), shares the details of each, gives installation directions, links to the source code, and provides a demo for most of the models.\n\n### [TensorFlow Hub](https://tfhub.dev/)\n\nTensorFlow Hub is a centralized site with hundreds of trained models. It includes model formats for TF.js, TFLite, and Coral, so be sure to select `TF.js` to explore other models that are available for TFJS. Within the hub, the name of the model, the type of the model, description, and dataset used are listed. If we click on an entry, we'll see more information, including an overview, how to implement the model, how to fine-tune a model--if that's an option--and more.\n\n## Getting Started with TFJS\n\nThere are three different ways we can use TFJS; each requiring a little more knowledge and understanding of how the models work.\n\n### Import an Existing, Pre-trained Model\n\nWe can take a TensorFlow or Keras model that's been trained offline and load it into the browser. If we want to explore existing models and their demos, we can check out the [TFJS models repository](https://github.com/tensorflow/tfjs-models/).\n\nWhen we take an existing model, we can get it working immediately with a couple of lines of JavaScript. We can get this up and running using a script tag or installing with `npm` or `yarn`.\n\n#### MobileNet\n\nWe're going to implement the MobileNet model, using the code they've give us in the [MobileNet repository](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet)\n\n> MobileNets are small, low-latency, low-power models parameterized to meet the resource  constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used.\n> We're going to use the model to classify an image. We can see a working codesandbox [here](https://codesandbox.io/s/mobilenet-e1gmmh) or checkout the code below:\n\n```js\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n    <body>\n      <h1>Check the console for our predictions!</h1>\n    </body>\n  \n    {/*<!-- Load TensorFlow.js. This is required to use MobileNet. -->*/}\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.1\"> <\/script>\n    {/*<!-- Load the MobileNet model. -->*/}\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0\"> <\/script>\n    {/*<!-- Replace this with your image. Make sure CORS settings allow reading the image! -->*/}\n    <img id=\"img\" src=\"cat.jpg\" style=\"width:200px;height:300px\">\n    {/*<!-- Place your code in the script tag below. You can also use an external .js file -->*/}\n    <script>\n      // Notice there is no 'import' statement. 'mobilenet' and 'tf' is\n      // available on the index-page because of the script tag above.\n      const img = document.getElementById('img');\n      // Load the model.\n      mobilenet.load().then(model => {\n        // Classify the image.\n        model.classify(img).then(predictions => {\n          console.log({predictions});\n        });\n      });\n    <\/script>\n</html>\n\n```\n\nNotice in the console, we're given three predictions for the image. And all of this is put together in fewer than 30 lines of code.\n\n![](https://res.cloudinary.com/deepgram/image/upload/v1660235143/blog/2022/08/getting-started-with-tensorflowjs/predictions.png)\n\n### Retrain an Imported Machine Learning Model\n\nWe can do more than use existing models straight of out the box. We can use transfer learning to continue to train a model (known as a base model) that was trained offline with data we collect from the browser. Transfer learning is when we take a pre-trained model and re-use it for a related task. For example, we might take a model trained with image detection. It already knows how to identify features of objects like shapes. We might take this model and further train it to identify a specific object. This gives us a speedy way to train that doesn't require us to invest the full amount of time training and developing a new model.\n\n### Create a New Model\n\nOnce we understand models and layers, we can progress to creating our own model. Using the Layers API or the Core API, we can create our own model. This allows us to have control over defining what our model will do, how we train our model, and the output when we run it. It's generally recommended to use the Layers API first since it's modeled after the Keras API.\n\n## Should we use TensorFlow.js for Deep Learning?\n\nDepending on your use case, TFJS can be an incredible valuable tool that allows for browser interaction, including using the webcam and the microphone. There are use cases that create more interactive experiences for education, healthcare support, accessibility advancements, and opportunities for just plain fun.\n\nAs front-end developers, we're often kept out of conversations about ML, data science, etc. Tensorflow.js gives us an opportunity to help shape a developing field, access tools we haven't before, and expand the horizon of the frontend experience.  Having a variety of voices in conversations that impact, well, everyone is critical. Diversity of thought, input into development, and different backgrounds can help to not only push the industry forward, but to redefine what we can do in the frontend landscape. Tech that's belonged to Data Scientists can be part of what we do and allow us to keep pushing boundaries on what we're creating and the problems we're solving.\n\nTo get started with TensorFlow.js, you can find a tutorial [here](https://www.tensorflow.org/js/tutorials). If you want to see a TFJS + Deepgram Project, you can check out [Add Live Speech Bubbles to YouTube Videos with Autobubble](https://blog.deepgram.com/autobubble-youtube-speech-bubbles/), and, as always, you can hit us up with any questions on Twitter [@deepgramAI](https://twitter.com/DeepgramAI).\n\n";
}
function compiledContent() {
  return '<p>Machine Learning (ML) has historically belonged to Python engineers, Data Scientists, and mathematicians, with frontend developers having very usage and support. In fact, JavaScript ranks 5th of all languages used for Machine Learning, coming in at around 7%. With access to microphones and webcams in the browser, we\u2019re just getting started with exploring a whole new landscape of what we can do as front-end developers. This is where TensorFlow.js comes in.</p>\n<p>TensorFlow.js (TFJS) is a JavaScript framework that we can use to create machine learning models for desktop, web, mobile, and cloud, giving us access to images, video, audio, and text models. We can use this technology for augmented reality, sound recognition, sentiment analysis, web page optimization, accessibility, and more.</p>\n<h2 id="exploring-tfjs-models">Exploring TFJS Models</h2>\n<h3 id="pre-trained-tensorflowjs-models-repository"><a href="https://github.com/tensorflow/tfjs-models/">Pre-trained TensorFlow.js models repository</a></h3>\n<p>This repository contains ten different ready-to-use models, categorizes each of them by type of model (images, audio, text, and general utilities), shares the details of each, gives installation directions, links to the source code, and provides a demo for most of the models.</p>\n<h3 id="tensorflow-hub"><a href="https://tfhub.dev/">TensorFlow Hub</a></h3>\n<p>TensorFlow Hub is a centralized site with hundreds of trained models. It includes model formats for TF.js, TFLite, and Coral, so be sure to select <code is:raw>TF.js</code> to explore other models that are available for TFJS. Within the hub, the name of the model, the type of the model, description, and dataset used are listed. If we click on an entry, we\u2019ll see more information, including an overview, how to implement the model, how to fine-tune a model\u2014if that\u2019s an option\u2014and more.</p>\n<h2 id="getting-started-with-tfjs">Getting Started with TFJS</h2>\n<p>There are three different ways we can use TFJS; each requiring a little more knowledge and understanding of how the models work.</p>\n<h3 id="import-an-existing-pre-trained-model">Import an Existing, Pre-trained Model</h3>\n<p>We can take a TensorFlow or Keras model that\u2019s been trained offline and load it into the browser. If we want to explore existing models and their demos, we can check out the <a href="https://github.com/tensorflow/tfjs-models/">TFJS models repository</a>.</p>\n<p>When we take an existing model, we can get it working immediately with a couple of lines of JavaScript. We can get this up and running using a script tag or installing with <code is:raw>npm</code> or <code is:raw>yarn</code>.</p>\n<h4 id="mobilenet">MobileNet</h4>\n<p>We\u2019re going to implement the MobileNet model, using the code they\u2019ve give us in the <a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet">MobileNet repository</a></p>\n<blockquote>\n<p>MobileNets are small, low-latency, low-power models parameterized to meet the resource  constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used.\nWe\u2019re going to use the model to classify an image. We can see a working codesandbox <a href="https://codesandbox.io/s/mobilenet-e1gmmh">here</a> or checkout the code below:</p>\n</blockquote>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">&lt;!</span><span style="color: #79C0FF">DOCTYPE</span><span style="color: #C9D1D9"> html</span><span style="color: #FF7B72">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Check the console for our predictions!&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Load TensorFlow.js. This is required to use MobileNet. --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.1&quot;</span><span style="color: #C9D1D9">&gt; &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Load the MobileNet model. --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0&quot;</span><span style="color: #C9D1D9">&gt; &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Replace this with your image. Make sure CORS settings allow reading the image! --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;img&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;cat.jpg&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;width:200px;height:300px&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;!-- Place your code in the script tag below. You can also use an external .js file --&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      // Notice there is no &#39;import&#39; statement. &#39;mobilenet&#39; and &#39;tf&#39; is</span></span>\n<span class="line"><span style="color: #C9D1D9">      // available on the index-page because of the script tag above.</span></span>\n<span class="line"><span style="color: #C9D1D9">      const img = document.getElementById(&#39;img&#39;);</span></span>\n<span class="line"><span style="color: #C9D1D9">      // Load the model.</span></span>\n<span class="line"><span style="color: #C9D1D9">      mobilenet.load().then(model =&gt; </span><span style="color: #FF7B72">{</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Classify the image.</span></span>\n<span class="line"><span style="color: #C9D1D9">        model.</span><span style="color: #D2A8FF">classify</span><span style="color: #C9D1D9">(img).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">predictions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({predictions});</span></span>\n<span class="line"><span style="color: #C9D1D9">        });</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span></code></pre>\n<p>Notice in the console, we\u2019re given three predictions for the image. And all of this is put together in fewer than 30 lines of code.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660235143/blog/2022/08/getting-started-with-tensorflowjs/predictions.png" alt=""></p>\n<h3 id="retrain-an-imported-machine-learning-model">Retrain an Imported Machine Learning Model</h3>\n<p>We can do more than use existing models straight of out the box. We can use transfer learning to continue to train a model (known as a base model) that was trained offline with data we collect from the browser. Transfer learning is when we take a pre-trained model and re-use it for a related task. For example, we might take a model trained with image detection. It already knows how to identify features of objects like shapes. We might take this model and further train it to identify a specific object. This gives us a speedy way to train that doesn\u2019t require us to invest the full amount of time training and developing a new model.</p>\n<h3 id="create-a-new-model">Create a New Model</h3>\n<p>Once we understand models and layers, we can progress to creating our own model. Using the Layers API or the Core API, we can create our own model. This allows us to have control over defining what our model will do, how we train our model, and the output when we run it. It\u2019s generally recommended to use the Layers API first since it\u2019s modeled after the Keras API.</p>\n<h2 id="should-we-use-tensorflowjs-for-deep-learning">Should we use TensorFlow.js for Deep Learning?</h2>\n<p>Depending on your use case, TFJS can be an incredible valuable tool that allows for browser interaction, including using the webcam and the microphone. There are use cases that create more interactive experiences for education, healthcare support, accessibility advancements, and opportunities for just plain fun.</p>\n<p>As front-end developers, we\u2019re often kept out of conversations about ML, data science, etc. Tensorflow.js gives us an opportunity to help shape a developing field, access tools we haven\u2019t before, and expand the horizon of the frontend experience.  Having a variety of voices in conversations that impact, well, everyone is critical. Diversity of thought, input into development, and different backgrounds can help to not only push the industry forward, but to redefine what we can do in the frontend landscape. Tech that\u2019s belonged to Data Scientists can be part of what we do and allow us to keep pushing boundaries on what we\u2019re creating and the problems we\u2019re solving.</p>\n<p>To get started with TensorFlow.js, you can find a tutorial <a href="https://www.tensorflow.org/js/tutorials">here</a>. If you want to see a TFJS + Deepgram Project, you can check out <a href="https://blog.deepgram.com/autobubble-youtube-speech-bubbles/">Add Live Speech Bubbles to YouTube Videos with Autobubble</a>, and, as always, you can hit us up with any questions on Twitter <a href="https://twitter.com/DeepgramAI">@deepgramAI</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/machine-learning-for-front-end-developers-get-started-with-tensorflow-js/index.md", "https://blog.deepgram.com/", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Machine Learning (ML) has historically belonged to Python engineers, Data Scientists, and mathematicians, with frontend developers having very usage and support. In fact, JavaScript ranks 5th of all languages used for Machine Learning, coming in at around 7%. With access to microphones and webcams in the browser, we’re just getting started with exploring a whole new landscape of what we can do as front-end developers. This is where TensorFlow.js comes in.</p>
<p>TensorFlow.js (TFJS) is a JavaScript framework that we can use to create machine learning models for desktop, web, mobile, and cloud, giving us access to images, video, audio, and text models. We can use this technology for augmented reality, sound recognition, sentiment analysis, web page optimization, accessibility, and more.</p>
<h2 id="exploring-tfjs-models">Exploring TFJS Models</h2>
<h3 id="pre-trained-tensorflowjs-models-repository"><a href="https://github.com/tensorflow/tfjs-models/">Pre-trained TensorFlow.js models repository</a></h3>
<p>This repository contains ten different ready-to-use models, categorizes each of them by type of model (images, audio, text, and general utilities), shares the details of each, gives installation directions, links to the source code, and provides a demo for most of the models.</p>
<h3 id="tensorflow-hub"><a href="https://tfhub.dev/">TensorFlow Hub</a></h3>
<p>TensorFlow Hub is a centralized site with hundreds of trained models. It includes model formats for TF.js, TFLite, and Coral, so be sure to select <code>TF.js</code> to explore other models that are available for TFJS. Within the hub, the name of the model, the type of the model, description, and dataset used are listed. If we click on an entry, we’ll see more information, including an overview, how to implement the model, how to fine-tune a model—if that’s an option—and more.</p>
<h2 id="getting-started-with-tfjs">Getting Started with TFJS</h2>
<p>There are three different ways we can use TFJS; each requiring a little more knowledge and understanding of how the models work.</p>
<h3 id="import-an-existing-pre-trained-model">Import an Existing, Pre-trained Model</h3>
<p>We can take a TensorFlow or Keras model that’s been trained offline and load it into the browser. If we want to explore existing models and their demos, we can check out the <a href="https://github.com/tensorflow/tfjs-models/">TFJS models repository</a>.</p>
<p>When we take an existing model, we can get it working immediately with a couple of lines of JavaScript. We can get this up and running using a script tag or installing with <code>npm</code> or <code>yarn</code>.</p>
<h4 id="mobilenet">MobileNet</h4>
<p>We’re going to implement the MobileNet model, using the code they’ve give us in the <a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet">MobileNet repository</a></p>
<blockquote>
<p>MobileNets are small, low-latency, low-power models parameterized to meet the resource  constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used.
We’re going to use the model to classify an image. We can see a working codesandbox <a href="https://codesandbox.io/s/mobilenet-e1gmmh">here</a> or checkout the code below:</p>
</blockquote>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">&lt;!</span><span style="color: #79C0FF">DOCTYPE</span><span style="color: #C9D1D9"> html</span><span style="color: #FF7B72">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Check the console for our predictions!&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;!-- Load TensorFlow.js. This is required to use MobileNet. --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.1&quot;</span><span style="color: #C9D1D9">&gt; &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;!-- Load the MobileNet model. --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0&quot;</span><span style="color: #C9D1D9">&gt; &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;!-- Replace this with your image. Make sure CORS settings allow reading the image! --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">img</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;img&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;cat.jpg&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">style</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&quot;width:200px;height:300px&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;!-- Place your code in the script tag below. You can also use an external .js file --&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      // Notice there is no &#39;import&#39; statement. &#39;mobilenet&#39; and &#39;tf&#39; is</span></span>
<span class="line"><span style="color: #C9D1D9">      // available on the index-page because of the script tag above.</span></span>
<span class="line"><span style="color: #C9D1D9">      const img = document.getElementById(&#39;img&#39;);</span></span>
<span class="line"><span style="color: #C9D1D9">      // Load the model.</span></span>
<span class="line"><span style="color: #C9D1D9">      mobilenet.load().then(model =&gt; </span><span style="color: #FF7B72">{</span></span>
<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// Classify the image.</span></span>
<span class="line"><span style="color: #C9D1D9">        model.</span><span style="color: #D2A8FF">classify</span><span style="color: #C9D1D9">(img).</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">predictions</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">          console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">({predictions});</span></span>
<span class="line"><span style="color: #C9D1D9">        });</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">}</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span></code></pre>
<p>Notice in the console, we’re given three predictions for the image. And all of this is put together in fewer than 30 lines of code.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1660235143/blog/2022/08/getting-started-with-tensorflowjs/predictions.png" alt=""></p>
<h3 id="retrain-an-imported-machine-learning-model">Retrain an Imported Machine Learning Model</h3>
<p>We can do more than use existing models straight of out the box. We can use transfer learning to continue to train a model (known as a base model) that was trained offline with data we collect from the browser. Transfer learning is when we take a pre-trained model and re-use it for a related task. For example, we might take a model trained with image detection. It already knows how to identify features of objects like shapes. We might take this model and further train it to identify a specific object. This gives us a speedy way to train that doesn’t require us to invest the full amount of time training and developing a new model.</p>
<h3 id="create-a-new-model">Create a New Model</h3>
<p>Once we understand models and layers, we can progress to creating our own model. Using the Layers API or the Core API, we can create our own model. This allows us to have control over defining what our model will do, how we train our model, and the output when we run it. It’s generally recommended to use the Layers API first since it’s modeled after the Keras API.</p>
<h2 id="should-we-use-tensorflowjs-for-deep-learning">Should we use TensorFlow.js for Deep Learning?</h2>
<p>Depending on your use case, TFJS can be an incredible valuable tool that allows for browser interaction, including using the webcam and the microphone. There are use cases that create more interactive experiences for education, healthcare support, accessibility advancements, and opportunities for just plain fun.</p>
<p>As front-end developers, we’re often kept out of conversations about ML, data science, etc. Tensorflow.js gives us an opportunity to help shape a developing field, access tools we haven’t before, and expand the horizon of the frontend experience.  Having a variety of voices in conversations that impact, well, everyone is critical. Diversity of thought, input into development, and different backgrounds can help to not only push the industry forward, but to redefine what we can do in the frontend landscape. Tech that’s belonged to Data Scientists can be part of what we do and allow us to keep pushing boundaries on what we’re creating and the problems we’re solving.</p>
<p>To get started with TensorFlow.js, you can find a tutorial <a href="https://www.tensorflow.org/js/tutorials">here</a>. If you want to see a TFJS + Deepgram Project, you can check out <a href="https://blog.deepgram.com/autobubble-youtube-speech-bubbles/">Add Live Speech Bubbles to YouTube Videos with Autobubble</a>, and, as always, you can hit us up with any questions on Twitter <a href="https://twitter.com/DeepgramAI">@deepgramAI</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/machine-learning-for-front-end-developers-get-started-with-tensorflow-js/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
