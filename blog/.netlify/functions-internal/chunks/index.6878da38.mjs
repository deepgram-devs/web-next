import { c as createAstro, a as createComponent, r as renderTemplate, b as renderHead, d as renderComponent } from '../entry.mjs';
import Slugger from 'github-slugger';
import '@astrojs/netlify/netlify-functions.js';
import 'preact';
import 'preact-render-to-string';
import 'vue';
import 'vue/server-renderer';
import 'html-escaper';
import 'node-html-parser';
import 'axios';
/* empty css                           *//* empty css                           *//* empty css                           */import '@storyblok/js';
/* empty css                          *//* empty css                              */import 'clone-deep';
import 'slugify';
import 'shiki';
/* empty css                           */import 'camelcase';
/* empty css                              */import '@astrojs/rss';
/* empty css                           */import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'path-browserify';
import 'path-to-regexp';

const metadata = { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "setting-up-server", "text": "Setting Up Server" }, { "depth": 2, "slug": "landing-page", "text": "Landing Page" }, { "depth": 2, "slug": "understanding-socket-rooms", "text": "Understanding Socket Rooms" }, { "depth": 2, "slug": "lecturer-view", "text": "Lecturer View" }, { "depth": 3, "slug": "add-user-to-socket-room", "text": "Add User To Socket Room" }, { "depth": 3, "slug": "accessing-lecturers-microphone", "text": "Accessing Lecturer\u2019s Microphone" }, { "depth": 3, "slug": "validate-lecturer-key", "text": "Validate Lecturer Key" }, { "depth": 3, "slug": "live-transcribe-lecturer", "text": "Live Transcribe Lecturer" }, { "depth": 3, "slug": "emit-socket-event-with-transcript", "text": "Emit Socket Event With Transcript" }, { "depth": 2, "slug": "emit-transcript", "text": "Emit Transcript" }, { "depth": 2, "slug": "student-view", "text": "Student View" }, { "depth": 2, "slug": "adding-styling", "text": "Adding Styling" }, { "depth": 2, "slug": "run-your-own", "text": "Run Your Own" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nMany places of study offer accessibility accommodations for students who need them to understand and participate in lectures and seminars. However, the process for asking for and receiving this help can limit who can have it, and it really [isn't good enough](https://blog.deepgram.com/automatic-speech-recognition-education/).\n\n![A lecturer at the front of a classroom](https://res.cloudinary.com/deepgram/image/upload/v1644272678/blog/2022/02/classroom-captioner/iglt.jpg)\n\n*A photo of a large lecture hall at Goldsmiths, University of London, my alma mater. [Photo source](https://virtualtours.gold.ac.uk/map/learn/ian-gulland-lecture-theatre/)*\n\nThis project, Classroom Captioner, aims to alleviate the concerns of students who need or prefer a text representation of what's happening in a lecture. Most lecturers will present from a computer - either their own or one built into a podium. At the start of a session, lecturers can:\n\n1.  Open a browser tab to the application.\n2.  Create a new room and provide the lecture key needed to validate themselves as the lecturer.\n3.  Provide the room code to students to put in the same web application.\n4.  Speak as usual - the tab can be left in the background.\n\nIf you want to see the finished code and deploy your own version of this project in one click, visit <a href=\"https://github.com/deepgram-devs/classroom-captioner\">https://github.com/deepgram-devs/classroom-captioner</a>.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key and Project ID - [get them here](https://console.deepgram.com/signup?jump=keys). Make sure your API Key has either an admin or owner role.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n    npm install @deepgram/sdk dotenv express socket.io\n\nCreate a file called `.env` and add the following to it:\n\n    DEEPGRAM_KEY=your-api-key\n    DEEPGRAM_PROJECT=your-project-id\n    LECTURE_KEY=any-passphrase\n\n<Alert type=\"warning\">Do not let others access your .env file as it contains sensitive values. If you share your code, omit this file.</Alert>\n\n## Setting Up Server\n\nThis application uses a combined express and socket.io server. Express is used to serve files, authenticate our lecture key, and generate temporary Deepgram API keys. Socket.io is used for realtime communication - sending completed transcriptions from the lecturer's view to their students.\n\nCreate an `index.js` file and add the following code to create this combined server and set up Deepgram for later use:\n\n```js\nrequire('dotenv').config()\nconst http = require('http')\nconst express = require('express')\nconst Socket = require('socket.io').Server\nconst { Deepgram } = require('@deepgram/sdk')\n\nconst app = express()\nconst server = http.createServer(app)\nconst io = new Socket(server)\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\n\napp.use(express.static('public'))\napp.use(express.json())\n\n// Further code goes here\n\nconst PORT = process.env.PORT || 3000\nserver.listen(PORT, () => {\n  console.log(`listening on ${PORT} at ${new Date().toISOString()}`)\n})\n```\n\nFinally, create a `views` and `public` directory.\n\n## Landing Page\n\nThe first of three pages to build is our landing page. It will allow users to navigate to a room as either a lecturer or a student.\n\nWe must create a route handler to tell express which file to load when a user navigates to our page. While we are here, we will also create route handlers for other pages. In `index.js`:\n\n```js\napp.get('/', (req, res) => {\n  res.sendFile(__dirname + '/views/index.html')\n})\napp.get('/student', (req, res) => {\n  res.sendFile(__dirname + '/views/student.html')\n})\napp.get('/lecturer', (req, res) => {\n  res.sendFile(__dirname + '/views/lecturer.html')\n})\n```\n\nWe'll create the student and lecturer views later. For now, add an `index.html` page to your `views` directory, and open it in your code editor:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Classroom Captioner</title>\n  </head>\n  <body>\n    <h1>Classroom Captioner</h1>\n\n    <h2>Join as a student</h2>\n    <form action=\"/student\">\n      <label for=\"id\">Room ID</label>\n      <input type=\"text\" id=\"id\" name=\"id\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n\n    <h2>Create as a lecturer</h2>\n    <form action=\"/lecturer\">\n      <label for=\"id\">Room ID</label>\n      <input type=\"text\" id=\"id\" name=\"id\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  </body>\n</html>\n```\n\nStart your server by running `node index.js` and navigate to `http://localhost:3000`. Type a value into the first input and submit the form. You should be sent to `http://localhost:3000/student?id=TYPEDVALUE` (which should present an error as there is no file yet for that page). However, this confirms that our landing page can direct users to the student and lecturer pages.\n\n![Webpage with the title \"Classroom Captioner\" with two forms. The first form says \"join as a student\" and asks for a Room ID. The second form is the same except it starts \"create as a lecturer\".](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/landing-no-style.png)\n\n## Understanding Socket Rooms\n\nWhen using socket.io for realtime communication, there are two main concepts:\n\n1.  Sending (*broadcasting* or *emitting*) and receiving (*listening*) events with data.\n2.  All users (*clients*) connect to a *server*. Messages get sent to and from the server - you can think of the server as an intermediary between all other connections in this context.\n\nTypically, data sent from the server will be sent to all clients connected to it, except the sender, or to one specific client. However, this project needs to handle multiple ongoing rooms with many users in each, and that's where rooms come in.\n\nAny socket connection can be assigned to any number of rooms, which you can think of as groups. When emitting an event from the server, you can specify which rooms should be sent the data. All users in those rooms get it, and those not assigned do not - perfect!\n\nWhen a client establishes a new connection via socket.io, they are automatically assigned to a room with the name of their unique identifier. This means users are immediately in one room, and they will need to be added to the shared class-wide room when joining. Just keep this in mind as we move into the next section.\n\n## Lecturer View\n\nInside of the *views* directory, add `lecturer.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Class Captioner: Lecturer</title>\n  </head>\n  <body>\n    <h1>Room <span id=\"id\"></span></h1>\n    <form>\n      <label for=\"key\">Lecturer Key</label>\n      <input type=\"password\" id=\"key\" name=\"key\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n\n    <p></p>\n\n    <script src=\"/socket.io/socket.io.js\"><\/script>\n    <script>\n      const url = new URL(location.href)\n      const search = new URLSearchParams(url.search)\n      const id = search.get('id')\n      document.querySelector('#id').textContent = id\n\n      const socket = io()\n      socket.emit('join', id)\n\n      // Further code goes here\n    <\/script>\n  </body>\n</html>\n```\n\nLet's talk about this page:\n\n1.  There is a form which is asking for a lecturer key. We'll use this shortly to validate the user.\n2.  We include the socket.io client file.\n3.  We get access to the room name from the URL, store it in a variable called `id`, and display it to the user.\n4.  We connect to our socket server, and immediately emit an event called `join` along with the `id` value.\n\n### Add User To Socket Room\n\nIt is now time to listen for, and handle, the `join` event. Just below the route handlers in `index.js`:\n\n```js\nio.on('connection', (socket) => {\n  socket.on('join', (roomId) => {\n    socket.join(roomId)\n    console.log(`${socket.id} joins ${roomId}`)\n  })\n})\n```\n\nRestart your server, and navigate to a room as a lecturer. Look at your terminal.\n\n![Terminal displays a log of a user joining the specified room name - here \"test\"](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/socket-user-joins-room.png)\n\n### Accessing Lecturer's Microphone\n\nThere are parts of this project which build on our [\"Get Live Speech Transcriptions In Your Browser\"](https://blog.deepgram.com/live-transcription-mic-browser/) blog post and video. I'll call these out, and go into less depth about the code. This is one of them - add this code to `lecturer.html` to get access to the user's mic:\n\n```js\nnavigator.mediaDevices\n  .getUserMedia({ audio: true })\n  .then((stream) => {\n    mediaRecorder = new MediaRecorder(stream)\n  })\n  .catch(() => alert('You must provide access to the microphone'))\n```\n\n### Validate Lecturer Key\n\nThe main visual difference between the lecturer and student views is the inclusion of a form that prompts for a \"lecturer key\". This value must be compared against the `LECTURE_KEY` in our `.env` file, and if it's correct, we must issue a temporary Deepgram API Key to allow transcription to begin. Finally, this new key will be used to establish a connection with Deepgram and begin transcription.\n\nTo build this validation system, add a route handler to the `index.js` file:\n\n```js\napp.post('/auth', async (req, res) => {\n  try {\n    const { id, key } = req.body\n    if (req.body.key != process.env.LECTURE_KEY)\n      return res.json({ error: 'Key is missing or incorrect' })\n    const newKey = await deepgram.keys.create(\n      process.env.DEEPGRAM_PROJECT,\n      'Temporary key - works for 10 secs',\n      ['usage:write'],\n      { timeToLive: 10 }\n    )\n    res.json({ deepgramToken: newKey.key })\n  } catch (error) {\n    res.json({ error })\n  }\n})\n```\n\nA new short-lived Deepgram API Key with minimal permissions will be generated and returned if the provided key is correct. If the provided key is wrong, or an error occurs, we will show this to the browser in the returned payload.\n\nWhen the form in `lecturer.html` is submitted, let's send a request to our new route handler:\n\n```js\ndocument.querySelector('form').addEventListener('submit', async (event) => {\n  event.preventDefault()\n  const key = document.querySelector('#key').value\n\n  const resp = await fetch('/auth', {\n    method: 'POST',\n    body: JSON.stringify({ id, key }),\n    headers: { 'Content-Type': 'application/json' },\n  })\n    .then((r) => r.json())\n    .catch((error) => alert(error))\n\n  if (resp.error) return alert(resp.error)\n\n  document.querySelector('form').remove()\n\n  // Further code here [1]\n})\n\n// Further code here [2]\n```\n\nErrors will be shown to users in a popup. Success will lead to the form disappearing. Restart your server and try it out!\n\n### Live Transcribe Lecturer\n\nNow there is a valid Deepgram API Key in our web page, immediately establish a connection with Deepgram. In the first annotated spot above, connect to Deepgram:\n\n```js\nws = new WebSocket('wss://api.deepgram.com/v1/listen', [\n  'token',\n  resp.deepgramToken,\n])\nws.onopen = start\nws.onmessage = handleResponse\n```\n\nIn the second annotated spot, add our event handlers for a connection being opened, and receiving data back from Deepgram. Take a look at [\"Get Live Speech Transcriptions In Your Browser\"](https://blog.deepgram.com/live-transcription-mic-browser/) for more explanation.\n\n```js\nfunction start() {\n  mediaRecorder.addEventListener('dataavailable', (event) => {\n    if (event.data.size > 0 && ws.readyState == 1) {\n      ws.send(event.data)\n    }\n  })\n  mediaRecorder.start(250)\n}\n\nfunction handleResponse(message) {\n  const data = JSON.parse(message.data)\n  const transcript = data.channel.alternatives[0].transcript\n  if (transcript && data.is_final) {\n    document.querySelector('p').textContent += ' ' + transcript\n    // Further code here\n  }\n}\n```\n\nRestart your server, and you should see transcripts displayed in the browser.\n\n![A webpage reads \"Hello I hope you've had a wonderful week so far and I'm very excited for today's class\"](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/lecturer-transcript.png)\n\n### Emit Socket Event With Transcript\n\nThe final step on the lecturer side is to emit a socket event with this transcript, so we can bring it into students' pages. Add the following line to the `handleResponse` function:\n\n```js\nsocket.emit('transcriptReady', transcript)\n```\n\nNow, as transcripts are displayed on the lecturer's page, a `transcriptReady` event will also be triggered.\n\n## Emit Transcript\n\nIn `index.js`, add a new listener to the socket right below where the `socket.on('join')` callback ends:\n\n```js\nsocket.on('transcriptReady', (message) => {\n  for (let room of socket.rooms) {\n    socket.to(room).emit('transcriptComplete', message)\n  }\n})\n```\n\nThis goes through all of the rooms this current socket belongs to (which includes the room they joined with the `join` event) and emits a `transcriptComplete` event with the transcript to just the sockets in those rooms.\n\nIf the room you navigated to in the browser is called \"my-awesome-room\" the `join` event will have added your connection to a socket room of the same name. If students join the same room, they will receive the transcripts too.\n\n## Student View\n\nThe student view is just a stripped-back version of the lecturer view. Create a `student.html` page in the `views` directory and add the following:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Class Captioner</title>\n  </head>\n  <body>\n    <h1>Room <span id=\"id\"></span></h1>\n\n    <p></p>\n\n    <script src=\"/socket.io/socket.io.js\"><\/script>\n    <script>\n      const url = new URL(location.href)\n      const search = new URLSearchParams(url.search)\n      const id = search.get('id')\n      document.querySelector('#id').textContent = id\n\n      const socket = io()\n      socket.emit('join', id)\n\n      socket.on('transcriptComplete', (message) => {\n        document.querySelector('p').textContent += ' ' + message\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nRestart your server, open the application in various browser windows, with one window acting as the lecturer and the others as students. You should see the transcript appear on all screens.\n\n## Adding Styling\n\nCreate a `style.css` file in your `public` directory with the following:\n\n```css\n@import url('https://fonts.googleapis.com/css2?family=Cairo&display=swap');\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  padding: 2em;\n  font-family: 'Cairo', sans-serif;\n  background: #141e29;\n  color: white;\n}\nh2 {\n  margin-top: 1.5rem;\n}\ninput {\n  display: block;\n  font-size: 1em;\n  font-family: inherit;\n  padding: 0 0.5em;\n  width: 200px;\n}\ninput[type='submit'] {\n  background: #38edac;\n  color: #141e29;\n  border: none;\n  margin-top: 0.5em;\n}\n```\n\nThen, just before the `</head>` in all three `.html` files, add the following:\n\n```html\n<link rel=\"stylesheet\" href=\"style.css\" />\n```\n\nRestart your server one final time and your application should look like this:\n\n![Four browser windows. One is a broadcaster in room test1. Two are students in room test1. The final window is a student in room test 2. The first three have identical text displayed, and the other is empty](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/fin.png)\n\n## Run Your Own\n\nIf you want to see the finished code and deploy your own version of this project in one click, visit <a href=\"https://github.com/deepgram-devs/classroom-captioner\">https://github.com/deepgram-devs/classroom-captioner</a>.\n\n## Wrapping Up\n\nSharing knowledge as an educator feels wonderful, and now you can ensure all of your students have an equal experience in the classroom. If you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>Many places of study offer accessibility accommodations for students who need them to understand and participate in lectures and seminars. However, the process for asking for and receiving this help can limit who can have it, and it really <a href="https://blog.deepgram.com/automatic-speech-recognition-education/">isn\u2019t good enough</a>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272678/blog/2022/02/classroom-captioner/iglt.jpg" alt="A lecturer at the front of a classroom"></p>\n<p><em>A photo of a large lecture hall at Goldsmiths, University of London, my alma mater. <a href="https://virtualtours.gold.ac.uk/map/learn/ian-gulland-lecture-theatre/">Photo source</a></em></p>\n<p>This project, Classroom Captioner, aims to alleviate the concerns of students who need or prefer a text representation of what\u2019s happening in a lecture. Most lecturers will present from a computer - either their own or one built into a podium. At the start of a session, lecturers can:</p>\n<ol>\n<li>Open a browser tab to the application.</li>\n<li>Create a new room and provide the lecture key needed to validate themselves as the lecturer.</li>\n<li>Provide the room code to students to put in the same web application.</li>\n<li>Speak as usual - the tab can be left in the background.</li>\n</ol>\n<p>If you want to see the finished code and deploy your own version of this project in one click, visit <a href="https://github.com/deepgram-devs/classroom-captioner">https://github.com/deepgram-devs/classroom-captioner</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key and Project ID - <a href="https://console.deepgram.com/signup?jump=keys">get them here</a>. Make sure your API Key has either an admin or owner role.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<p>npm install @deepgram/sdk dotenv express socket.io</p>\n<p>Create a file called <code is:raw>.env</code> and add the following to it:</p>\n<p>DEEPGRAM_KEY=your-api-key\nDEEPGRAM_PROJECT=your-project-id\nLECTURE_KEY=any-passphrase</p>\n<Alert type="warning">Do not let others access your .env file as it contains sensitive values. If you share your code, omit this file.</Alert>\n<h2 id="setting-up-server">Setting Up Server</h2>\n<p>This application uses a combined express and socket.io server. Express is used to serve files, authenticate our lecture key, and generate temporary Deepgram API keys. Socket.io is used for realtime communication - sending completed transcriptions from the lecturer\u2019s view to their students.</p>\n<p>Create an <code is:raw>index.js</code> file and add the following code to create this combined server and set up Deepgram for later use:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;http&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;socket.io&#39;</span><span style="color: #C9D1D9">).Server</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> http.</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">(app)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">io</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Socket</span><span style="color: #C9D1D9">(server)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3000</span></span>\n<span class="line"><span style="color: #C9D1D9">server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`listening on ${</span><span style="color: #79C0FF">PORT</span><span style="color: #A5D6FF">} at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Finally, create a <code is:raw>views</code> and <code is:raw>public</code> directory.</p>\n<h2 id="landing-page">Landing Page</h2>\n<p>The first of three pages to build is our landing page. It will allow users to navigate to a room as either a lecturer or a student.</p>\n<p>We must create a route handler to tell express which file to load when a user navigates to our page. While we are here, we will also create route handlers for other pages. In <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/index.html&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/student&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/student.html&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/lecturer&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/lecturer.html&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>We\u2019ll create the student and lecturer views later. For now, add an <code is:raw>index.html</code> page to your <code is:raw>views</code> directory, and open it in your code editor:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Classroom Captioner&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Classroom Captioner&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Join as a student&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/student&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;Room ID&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Create as a lecturer&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/lecturer&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;Room ID&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Start your server by running <code is:raw>node index.js</code> and navigate to <code is:raw>http://localhost:3000</code>. Type a value into the first input and submit the form. You should be sent to <code is:raw>http://localhost:3000/student?id=TYPEDVALUE</code> (which should present an error as there is no file yet for that page). However, this confirms that our landing page can direct users to the student and lecturer pages.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/landing-no-style.png" alt="Webpage with the title &#x22;Classroom Captioner&#x22; with two forms. The first form says &#x22;join as a student&#x22; and asks for a Room ID. The second form is the same except it starts &#x22;create as a lecturer&#x22;."></p>\n<h2 id="understanding-socket-rooms">Understanding Socket Rooms</h2>\n<p>When using socket.io for realtime communication, there are two main concepts:</p>\n<ol>\n<li>Sending (<em>broadcasting</em> or <em>emitting</em>) and receiving (<em>listening</em>) events with data.</li>\n<li>All users (<em>clients</em>) connect to a <em>server</em>. Messages get sent to and from the server - you can think of the server as an intermediary between all other connections in this context.</li>\n</ol>\n<p>Typically, data sent from the server will be sent to all clients connected to it, except the sender, or to one specific client. However, this project needs to handle multiple ongoing rooms with many users in each, and that\u2019s where rooms come in.</p>\n<p>Any socket connection can be assigned to any number of rooms, which you can think of as groups. When emitting an event from the server, you can specify which rooms should be sent the data. All users in those rooms get it, and those not assigned do not - perfect!</p>\n<p>When a client establishes a new connection via socket.io, they are automatically assigned to a room with the name of their unique identifier. This means users are immediately in one room, and they will need to be added to the shared class-wide room when joining. Just keep this in mind as we move into the next section.</p>\n<h2 id="lecturer-view">Lecturer View</h2>\n<p>Inside of the <em>views</em> directory, add <code is:raw>lecturer.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Class Captioner: Lecturer&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Room &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9">&gt;Lecturer Key&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;password&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URL</span><span style="color: #C9D1D9">(location.href)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">search</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URLSearchParams</span><span style="color: #C9D1D9">(url.search)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;id&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#id&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> id</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, id)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Let\u2019s talk about this page:</p>\n<ol>\n<li>There is a form which is asking for a lecturer key. We\u2019ll use this shortly to validate the user.</li>\n<li>We include the socket.io client file.</li>\n<li>We get access to the room name from the URL, store it in a variable called <code is:raw>id</code>, and display it to the user.</li>\n<li>We connect to our socket server, and immediately emit an event called <code is:raw>join</code> along with the <code is:raw>id</code> value.</li>\n</ol>\n<h3 id="add-user-to-socket-room">Add User To Socket Room</h3>\n<p>It is now time to listen for, and handle, the <code is:raw>join</code> event. Just below the route handlers in <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">io.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;connection&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">roomId</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(roomId)</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">socket</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">} joins ${</span><span style="color: #C9D1D9">roomId</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server, and navigate to a room as a lecturer. Look at your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/socket-user-joins-room.png" alt="Terminal displays a log of a user joining the specified room name - here &#x22;test&#x22;"></p>\n<h3 id="accessing-lecturers-microphone">Accessing Lecturer\u2019s Microphone</h3>\n<p>There are parts of this project which build on our <a href="https://blog.deepgram.com/live-transcription-mic-browser/">\u201CGet Live Speech Transcriptions In Your Browser\u201D</a> blog post and video. I\u2019ll call these out, and go into less depth about the code. This is one of them - add this code to <code is:raw>lecturer.html</code> to get access to the user\u2019s mic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide access to the microphone&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<h3 id="validate-lecturer-key">Validate Lecturer Key</h3>\n<p>The main visual difference between the lecturer and student views is the inclusion of a form that prompts for a \u201Clecturer key\u201D. This value must be compared against the <code is:raw>LECTURE_KEY</code> in our <code is:raw>.env</code> file, and if it\u2019s correct, we must issue a temporary Deepgram API Key to allow transcription to begin. Finally, this new key will be used to establish a connection with Deepgram and begin transcription.</p>\n<p>To build this validation system, add a route handler to the <code is:raw>index.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/auth&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (req.body.key </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">LECTURE_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ error: </span><span style="color: #A5D6FF">&#39;Key is missing or incorrect&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">newKey</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.keys.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">      process.env.</span><span style="color: #79C0FF">DEEPGRAM_PROJECT</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Temporary key - works for 10 secs&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      [</span><span style="color: #A5D6FF">&#39;usage:write&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">      { timeToLive: </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    )</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ deepgramToken: newKey.key })</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ error })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>A new short-lived Deepgram API Key with minimal permissions will be generated and returned if the provided key is correct. If the provided key is wrong, or an error occurs, we will show this to the browser in the returned payload.</p>\n<p>When the form in <code is:raw>lecturer.html</code> is submitted, let\u2019s send a request to our new route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;form&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;submit&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  event.</span><span style="color: #D2A8FF">preventDefault</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#key&#39;</span><span style="color: #C9D1D9">).value</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">resp</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/auth&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ id, key }),</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: { </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (resp.error) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(resp.error)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;form&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here [1]</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here [2]</span></span></code></pre>\n<p>Errors will be shown to users in a popup. Success will lead to the form disappearing. Restart your server and try it out!</p>\n<h3 id="live-transcribe-lecturer">Live Transcribe Lecturer</h3>\n<p>Now there is a valid Deepgram API Key in our web page, immediately establish a connection with Deepgram. In the first annotated spot above, connect to Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">ws </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  resp.deepgramToken,</span></span>\n<span class="line"><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">ws.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> start</span></span>\n<span class="line"><span style="color: #C9D1D9">ws.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> handleResponse</span></span></code></pre>\n<p>In the second annotated spot, add our event handlers for a connection being opened, and receiving data back from Deepgram. Take a look at <a href="https://blog.deepgram.com/live-transcription-mic-browser/">\u201CGet Live Speech Transcriptions In Your Browser\u201D</a> for more explanation.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> ws.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      ws.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> data.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;p&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Restart your server, and you should see transcripts displayed in the browser.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/lecturer-transcript.png" alt="A webpage reads &#x22;Hello I hope you&#x27;ve had a wonderful week so far and I&#x27;m very excited for today&#x27;s class&#x22;"></p>\n<h3 id="emit-socket-event-with-transcript">Emit Socket Event With Transcript</h3>\n<p>The final step on the lecturer side is to emit a socket event with this transcript, so we can bring it into students\u2019 pages. Add the following line to the <code is:raw>handleResponse</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReady&#39;</span><span style="color: #C9D1D9">, transcript)</span></span></code></pre>\n<p>Now, as transcripts are displayed on the lecturer\u2019s page, a <code is:raw>transcriptReady</code> event will also be triggered.</p>\n<h2 id="emit-transcript">Emit Transcript</h2>\n<p>In <code is:raw>index.js</code>, add a new listener to the socket right below where the <code is:raw>socket.on(\'join\')</code> callback ends:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReady&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> room </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> socket.rooms) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">to</span><span style="color: #C9D1D9">(room).</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptComplete&#39;</span><span style="color: #C9D1D9">, message)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This goes through all of the rooms this current socket belongs to (which includes the room they joined with the <code is:raw>join</code> event) and emits a <code is:raw>transcriptComplete</code> event with the transcript to just the sockets in those rooms.</p>\n<p>If the room you navigated to in the browser is called \u201Cmy-awesome-room\u201D the <code is:raw>join</code> event will have added your connection to a socket room of the same name. If students join the same room, they will receive the transcripts too.</p>\n<h2 id="student-view">Student View</h2>\n<p>The student view is just a stripped-back version of the lecturer view. Create a <code is:raw>student.html</code> page in the <code is:raw>views</code> directory and add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Class Captioner&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Room &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URL</span><span style="color: #C9D1D9">(location.href)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">search</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URLSearchParams</span><span style="color: #C9D1D9">(url.search)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;id&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#id&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> id</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, id)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptComplete&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;p&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> message</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Restart your server, open the application in various browser windows, with one window acting as the lecturer and the others as students. You should see the transcript appear on all screens.</p>\n<h2 id="adding-styling">Adding Styling</h2>\n<p>Create a <code is:raw>style.css</code> file in your <code is:raw>public</code> directory with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@import</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https://fonts.googleapis.com/css2?family=Cairo&amp;display=swap&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">box-sizing</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">border-box</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Cairo&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">sans-serif</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#141e29</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">white</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">h2</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin-top</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1.5</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">block</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">inherit</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">200</span><span style="color: #FF7B72">px</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">type</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;submit&#39;</span><span style="color: #C9D1D9">] {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#38edac</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#141e29</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">border</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin-top</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then, just before the <code is:raw>&lt;/head&gt;</code> in all three <code is:raw>.html</code> files, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">link</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rel</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;stylesheet&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;style.css&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span></code></pre>\n<p>Restart your server one final time and your application should look like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/fin.png" alt="Four browser windows. One is a broadcaster in room test1. Two are students in room test1. The final window is a student in room test 2. The first three have identical text displayed, and the other is empty"></p>\n<h2 id="run-your-own">Run Your Own</h2>\n<p>If you want to see the finished code and deploy your own version of this project in one click, visit <a href="https://github.com/deepgram-devs/classroom-captioner">https://github.com/deepgram-devs/classroom-captioner</a>.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>Sharing knowledge as an educator feels wonderful, and now you can ensure all of your students have an equal experience in the classroom. If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' };
const frontmatter = { "title": "Adding Live Captions To Your Classroom With Deepgram", "description": "Make your lectures more accessible with live automatic captioning.", "date": "2022-02-09T00:00:00.000Z", "cover": "https://res.cloudinary.com/deepgram/image/upload/v1644272672/blog/2022/02/classroom-captioner/Adding-Live-Captions-To-Your-Classroom%402x.jpg", "authors": ["kevin-lewis"], "category": "tutorial", "tags": ["nodejs", "education"], "seo": { "title": "Adding Live Captions To Your Classroom With Deepgram", "description": "Make your lectures more accessible with live automatic captioning." }, "shorturls": { "share": "https://dpgr.am/e0788f9", "twitter": "https://dpgr.am/9c1aee5", "linkedin": "https://dpgr.am/105bb6d", "reddit": "https://dpgr.am/b5d0747", "facebook": "https://dpgr.am/565f0de" }, "og": { "image": "https://res.cloudinary.com/deepgram/image/upload/v1661453858/blog/classroom-captioner/ograph.png" }, "astro": { "headings": [{ "depth": 2, "slug": "before-we-start", "text": "Before We Start" }, { "depth": 2, "slug": "setting-up-server", "text": "Setting Up Server" }, { "depth": 2, "slug": "landing-page", "text": "Landing Page" }, { "depth": 2, "slug": "understanding-socket-rooms", "text": "Understanding Socket Rooms" }, { "depth": 2, "slug": "lecturer-view", "text": "Lecturer View" }, { "depth": 3, "slug": "add-user-to-socket-room", "text": "Add User To Socket Room" }, { "depth": 3, "slug": "accessing-lecturers-microphone", "text": "Accessing Lecturer\u2019s Microphone" }, { "depth": 3, "slug": "validate-lecturer-key", "text": "Validate Lecturer Key" }, { "depth": 3, "slug": "live-transcribe-lecturer", "text": "Live Transcribe Lecturer" }, { "depth": 3, "slug": "emit-socket-event-with-transcript", "text": "Emit Socket Event With Transcript" }, { "depth": 2, "slug": "emit-transcript", "text": "Emit Transcript" }, { "depth": 2, "slug": "student-view", "text": "Student View" }, { "depth": 2, "slug": "adding-styling", "text": "Adding Styling" }, { "depth": 2, "slug": "run-your-own", "text": "Run Your Own" }, { "depth": 2, "slug": "wrapping-up", "text": "Wrapping Up" }], "source": "\nMany places of study offer accessibility accommodations for students who need them to understand and participate in lectures and seminars. However, the process for asking for and receiving this help can limit who can have it, and it really [isn't good enough](https://blog.deepgram.com/automatic-speech-recognition-education/).\n\n![A lecturer at the front of a classroom](https://res.cloudinary.com/deepgram/image/upload/v1644272678/blog/2022/02/classroom-captioner/iglt.jpg)\n\n*A photo of a large lecture hall at Goldsmiths, University of London, my alma mater. [Photo source](https://virtualtours.gold.ac.uk/map/learn/ian-gulland-lecture-theatre/)*\n\nThis project, Classroom Captioner, aims to alleviate the concerns of students who need or prefer a text representation of what's happening in a lecture. Most lecturers will present from a computer - either their own or one built into a podium. At the start of a session, lecturers can:\n\n1.  Open a browser tab to the application.\n2.  Create a new room and provide the lecture key needed to validate themselves as the lecturer.\n3.  Provide the room code to students to put in the same web application.\n4.  Speak as usual - the tab can be left in the background.\n\nIf you want to see the finished code and deploy your own version of this project in one click, visit <a href=\"https://github.com/deepgram-devs/classroom-captioner\">https://github.com/deepgram-devs/classroom-captioner</a>.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key and Project ID - [get them here](https://console.deepgram.com/signup?jump=keys). Make sure your API Key has either an admin or owner role.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n    npm install @deepgram/sdk dotenv express socket.io\n\nCreate a file called `.env` and add the following to it:\n\n    DEEPGRAM_KEY=your-api-key\n    DEEPGRAM_PROJECT=your-project-id\n    LECTURE_KEY=any-passphrase\n\n<Alert type=\"warning\">Do not let others access your .env file as it contains sensitive values. If you share your code, omit this file.</Alert>\n\n## Setting Up Server\n\nThis application uses a combined express and socket.io server. Express is used to serve files, authenticate our lecture key, and generate temporary Deepgram API keys. Socket.io is used for realtime communication - sending completed transcriptions from the lecturer's view to their students.\n\nCreate an `index.js` file and add the following code to create this combined server and set up Deepgram for later use:\n\n```js\nrequire('dotenv').config()\nconst http = require('http')\nconst express = require('express')\nconst Socket = require('socket.io').Server\nconst { Deepgram } = require('@deepgram/sdk')\n\nconst app = express()\nconst server = http.createServer(app)\nconst io = new Socket(server)\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\n\napp.use(express.static('public'))\napp.use(express.json())\n\n// Further code goes here\n\nconst PORT = process.env.PORT || 3000\nserver.listen(PORT, () => {\n  console.log(`listening on ${PORT} at ${new Date().toISOString()}`)\n})\n```\n\nFinally, create a `views` and `public` directory.\n\n## Landing Page\n\nThe first of three pages to build is our landing page. It will allow users to navigate to a room as either a lecturer or a student.\n\nWe must create a route handler to tell express which file to load when a user navigates to our page. While we are here, we will also create route handlers for other pages. In `index.js`:\n\n```js\napp.get('/', (req, res) => {\n  res.sendFile(__dirname + '/views/index.html')\n})\napp.get('/student', (req, res) => {\n  res.sendFile(__dirname + '/views/student.html')\n})\napp.get('/lecturer', (req, res) => {\n  res.sendFile(__dirname + '/views/lecturer.html')\n})\n```\n\nWe'll create the student and lecturer views later. For now, add an `index.html` page to your `views` directory, and open it in your code editor:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Classroom Captioner</title>\n  </head>\n  <body>\n    <h1>Classroom Captioner</h1>\n\n    <h2>Join as a student</h2>\n    <form action=\"/student\">\n      <label for=\"id\">Room ID</label>\n      <input type=\"text\" id=\"id\" name=\"id\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n\n    <h2>Create as a lecturer</h2>\n    <form action=\"/lecturer\">\n      <label for=\"id\">Room ID</label>\n      <input type=\"text\" id=\"id\" name=\"id\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  </body>\n</html>\n```\n\nStart your server by running `node index.js` and navigate to `http://localhost:3000`. Type a value into the first input and submit the form. You should be sent to `http://localhost:3000/student?id=TYPEDVALUE` (which should present an error as there is no file yet for that page). However, this confirms that our landing page can direct users to the student and lecturer pages.\n\n![Webpage with the title \"Classroom Captioner\" with two forms. The first form says \"join as a student\" and asks for a Room ID. The second form is the same except it starts \"create as a lecturer\".](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/landing-no-style.png)\n\n## Understanding Socket Rooms\n\nWhen using socket.io for realtime communication, there are two main concepts:\n\n1.  Sending (*broadcasting* or *emitting*) and receiving (*listening*) events with data.\n2.  All users (*clients*) connect to a *server*. Messages get sent to and from the server - you can think of the server as an intermediary between all other connections in this context.\n\nTypically, data sent from the server will be sent to all clients connected to it, except the sender, or to one specific client. However, this project needs to handle multiple ongoing rooms with many users in each, and that's where rooms come in.\n\nAny socket connection can be assigned to any number of rooms, which you can think of as groups. When emitting an event from the server, you can specify which rooms should be sent the data. All users in those rooms get it, and those not assigned do not - perfect!\n\nWhen a client establishes a new connection via socket.io, they are automatically assigned to a room with the name of their unique identifier. This means users are immediately in one room, and they will need to be added to the shared class-wide room when joining. Just keep this in mind as we move into the next section.\n\n## Lecturer View\n\nInside of the *views* directory, add `lecturer.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Class Captioner: Lecturer</title>\n  </head>\n  <body>\n    <h1>Room <span id=\"id\"></span></h1>\n    <form>\n      <label for=\"key\">Lecturer Key</label>\n      <input type=\"password\" id=\"key\" name=\"key\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n\n    <p></p>\n\n    <script src=\"/socket.io/socket.io.js\"><\/script>\n    <script>\n      const url = new URL(location.href)\n      const search = new URLSearchParams(url.search)\n      const id = search.get('id')\n      document.querySelector('#id').textContent = id\n\n      const socket = io()\n      socket.emit('join', id)\n\n      // Further code goes here\n    <\/script>\n  </body>\n</html>\n```\n\nLet's talk about this page:\n\n1.  There is a form which is asking for a lecturer key. We'll use this shortly to validate the user.\n2.  We include the socket.io client file.\n3.  We get access to the room name from the URL, store it in a variable called `id`, and display it to the user.\n4.  We connect to our socket server, and immediately emit an event called `join` along with the `id` value.\n\n### Add User To Socket Room\n\nIt is now time to listen for, and handle, the `join` event. Just below the route handlers in `index.js`:\n\n```js\nio.on('connection', (socket) => {\n  socket.on('join', (roomId) => {\n    socket.join(roomId)\n    console.log(`${socket.id} joins ${roomId}`)\n  })\n})\n```\n\nRestart your server, and navigate to a room as a lecturer. Look at your terminal.\n\n![Terminal displays a log of a user joining the specified room name - here \"test\"](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/socket-user-joins-room.png)\n\n### Accessing Lecturer's Microphone\n\nThere are parts of this project which build on our [\"Get Live Speech Transcriptions In Your Browser\"](https://blog.deepgram.com/live-transcription-mic-browser/) blog post and video. I'll call these out, and go into less depth about the code. This is one of them - add this code to `lecturer.html` to get access to the user's mic:\n\n```js\nnavigator.mediaDevices\n  .getUserMedia({ audio: true })\n  .then((stream) => {\n    mediaRecorder = new MediaRecorder(stream)\n  })\n  .catch(() => alert('You must provide access to the microphone'))\n```\n\n### Validate Lecturer Key\n\nThe main visual difference between the lecturer and student views is the inclusion of a form that prompts for a \"lecturer key\". This value must be compared against the `LECTURE_KEY` in our `.env` file, and if it's correct, we must issue a temporary Deepgram API Key to allow transcription to begin. Finally, this new key will be used to establish a connection with Deepgram and begin transcription.\n\nTo build this validation system, add a route handler to the `index.js` file:\n\n```js\napp.post('/auth', async (req, res) => {\n  try {\n    const { id, key } = req.body\n    if (req.body.key != process.env.LECTURE_KEY)\n      return res.json({ error: 'Key is missing or incorrect' })\n    const newKey = await deepgram.keys.create(\n      process.env.DEEPGRAM_PROJECT,\n      'Temporary key - works for 10 secs',\n      ['usage:write'],\n      { timeToLive: 10 }\n    )\n    res.json({ deepgramToken: newKey.key })\n  } catch (error) {\n    res.json({ error })\n  }\n})\n```\n\nA new short-lived Deepgram API Key with minimal permissions will be generated and returned if the provided key is correct. If the provided key is wrong, or an error occurs, we will show this to the browser in the returned payload.\n\nWhen the form in `lecturer.html` is submitted, let's send a request to our new route handler:\n\n```js\ndocument.querySelector('form').addEventListener('submit', async (event) => {\n  event.preventDefault()\n  const key = document.querySelector('#key').value\n\n  const resp = await fetch('/auth', {\n    method: 'POST',\n    body: JSON.stringify({ id, key }),\n    headers: { 'Content-Type': 'application/json' },\n  })\n    .then((r) => r.json())\n    .catch((error) => alert(error))\n\n  if (resp.error) return alert(resp.error)\n\n  document.querySelector('form').remove()\n\n  // Further code here [1]\n})\n\n// Further code here [2]\n```\n\nErrors will be shown to users in a popup. Success will lead to the form disappearing. Restart your server and try it out!\n\n### Live Transcribe Lecturer\n\nNow there is a valid Deepgram API Key in our web page, immediately establish a connection with Deepgram. In the first annotated spot above, connect to Deepgram:\n\n```js\nws = new WebSocket('wss://api.deepgram.com/v1/listen', [\n  'token',\n  resp.deepgramToken,\n])\nws.onopen = start\nws.onmessage = handleResponse\n```\n\nIn the second annotated spot, add our event handlers for a connection being opened, and receiving data back from Deepgram. Take a look at [\"Get Live Speech Transcriptions In Your Browser\"](https://blog.deepgram.com/live-transcription-mic-browser/) for more explanation.\n\n```js\nfunction start() {\n  mediaRecorder.addEventListener('dataavailable', (event) => {\n    if (event.data.size > 0 && ws.readyState == 1) {\n      ws.send(event.data)\n    }\n  })\n  mediaRecorder.start(250)\n}\n\nfunction handleResponse(message) {\n  const data = JSON.parse(message.data)\n  const transcript = data.channel.alternatives[0].transcript\n  if (transcript && data.is_final) {\n    document.querySelector('p').textContent += ' ' + transcript\n    // Further code here\n  }\n}\n```\n\nRestart your server, and you should see transcripts displayed in the browser.\n\n![A webpage reads \"Hello I hope you've had a wonderful week so far and I'm very excited for today's class\"](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/lecturer-transcript.png)\n\n### Emit Socket Event With Transcript\n\nThe final step on the lecturer side is to emit a socket event with this transcript, so we can bring it into students' pages. Add the following line to the `handleResponse` function:\n\n```js\nsocket.emit('transcriptReady', transcript)\n```\n\nNow, as transcripts are displayed on the lecturer's page, a `transcriptReady` event will also be triggered.\n\n## Emit Transcript\n\nIn `index.js`, add a new listener to the socket right below where the `socket.on('join')` callback ends:\n\n```js\nsocket.on('transcriptReady', (message) => {\n  for (let room of socket.rooms) {\n    socket.to(room).emit('transcriptComplete', message)\n  }\n})\n```\n\nThis goes through all of the rooms this current socket belongs to (which includes the room they joined with the `join` event) and emits a `transcriptComplete` event with the transcript to just the sockets in those rooms.\n\nIf the room you navigated to in the browser is called \"my-awesome-room\" the `join` event will have added your connection to a socket room of the same name. If students join the same room, they will receive the transcripts too.\n\n## Student View\n\nThe student view is just a stripped-back version of the lecturer view. Create a `student.html` page in the `views` directory and add the following:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Class Captioner</title>\n  </head>\n  <body>\n    <h1>Room <span id=\"id\"></span></h1>\n\n    <p></p>\n\n    <script src=\"/socket.io/socket.io.js\"><\/script>\n    <script>\n      const url = new URL(location.href)\n      const search = new URLSearchParams(url.search)\n      const id = search.get('id')\n      document.querySelector('#id').textContent = id\n\n      const socket = io()\n      socket.emit('join', id)\n\n      socket.on('transcriptComplete', (message) => {\n        document.querySelector('p').textContent += ' ' + message\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nRestart your server, open the application in various browser windows, with one window acting as the lecturer and the others as students. You should see the transcript appear on all screens.\n\n## Adding Styling\n\nCreate a `style.css` file in your `public` directory with the following:\n\n```css\n@import url('https://fonts.googleapis.com/css2?family=Cairo&display=swap');\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  padding: 2em;\n  font-family: 'Cairo', sans-serif;\n  background: #141e29;\n  color: white;\n}\nh2 {\n  margin-top: 1.5rem;\n}\ninput {\n  display: block;\n  font-size: 1em;\n  font-family: inherit;\n  padding: 0 0.5em;\n  width: 200px;\n}\ninput[type='submit'] {\n  background: #38edac;\n  color: #141e29;\n  border: none;\n  margin-top: 0.5em;\n}\n```\n\nThen, just before the `</head>` in all three `.html` files, add the following:\n\n```html\n<link rel=\"stylesheet\" href=\"style.css\" />\n```\n\nRestart your server one final time and your application should look like this:\n\n![Four browser windows. One is a broadcaster in room test1. Two are students in room test1. The final window is a student in room test 2. The first three have identical text displayed, and the other is empty](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/fin.png)\n\n## Run Your Own\n\nIf you want to see the finished code and deploy your own version of this project in one click, visit <a href=\"https://github.com/deepgram-devs/classroom-captioner\">https://github.com/deepgram-devs/classroom-captioner</a>.\n\n## Wrapping Up\n\nSharing knowledge as an educator feels wonderful, and now you can ensure all of your students have an equal experience in the classroom. If you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ", "html": '<p>Many places of study offer accessibility accommodations for students who need them to understand and participate in lectures and seminars. However, the process for asking for and receiving this help can limit who can have it, and it really <a href="https://blog.deepgram.com/automatic-speech-recognition-education/">isn\u2019t good enough</a>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272678/blog/2022/02/classroom-captioner/iglt.jpg" alt="A lecturer at the front of a classroom"></p>\n<p><em>A photo of a large lecture hall at Goldsmiths, University of London, my alma mater. <a href="https://virtualtours.gold.ac.uk/map/learn/ian-gulland-lecture-theatre/">Photo source</a></em></p>\n<p>This project, Classroom Captioner, aims to alleviate the concerns of students who need or prefer a text representation of what\u2019s happening in a lecture. Most lecturers will present from a computer - either their own or one built into a podium. At the start of a session, lecturers can:</p>\n<ol>\n<li>Open a browser tab to the application.</li>\n<li>Create a new room and provide the lecture key needed to validate themselves as the lecturer.</li>\n<li>Provide the room code to students to put in the same web application.</li>\n<li>Speak as usual - the tab can be left in the background.</li>\n</ol>\n<p>If you want to see the finished code and deploy your own version of this project in one click, visit <a href="https://github.com/deepgram-devs/classroom-captioner">https://github.com/deepgram-devs/classroom-captioner</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key and Project ID - <a href="https://console.deepgram.com/signup?jump=keys">get them here</a>. Make sure your API Key has either an admin or owner role.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<p>npm install @deepgram/sdk dotenv express socket.io</p>\n<p>Create a file called <code is:raw>.env</code> and add the following to it:</p>\n<p>DEEPGRAM_KEY=your-api-key\nDEEPGRAM_PROJECT=your-project-id\nLECTURE_KEY=any-passphrase</p>\n<Alert type="warning">Do not let others access your .env file as it contains sensitive values. If you share your code, omit this file.</Alert>\n<h2 id="setting-up-server">Setting Up Server</h2>\n<p>This application uses a combined express and socket.io server. Express is used to serve files, authenticate our lecture key, and generate temporary Deepgram API keys. Socket.io is used for realtime communication - sending completed transcriptions from the lecturer\u2019s view to their students.</p>\n<p>Create an <code is:raw>index.js</code> file and add the following code to create this combined server and set up Deepgram for later use:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;http&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;socket.io&#39;</span><span style="color: #C9D1D9">).Server</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> http.</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">(app)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">io</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Socket</span><span style="color: #C9D1D9">(server)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3000</span></span>\n<span class="line"><span style="color: #C9D1D9">server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`listening on ${</span><span style="color: #79C0FF">PORT</span><span style="color: #A5D6FF">} at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Finally, create a <code is:raw>views</code> and <code is:raw>public</code> directory.</p>\n<h2 id="landing-page">Landing Page</h2>\n<p>The first of three pages to build is our landing page. It will allow users to navigate to a room as either a lecturer or a student.</p>\n<p>We must create a route handler to tell express which file to load when a user navigates to our page. While we are here, we will also create route handlers for other pages. In <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/index.html&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/student&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/student.html&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/lecturer&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/lecturer.html&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>We\u2019ll create the student and lecturer views later. For now, add an <code is:raw>index.html</code> page to your <code is:raw>views</code> directory, and open it in your code editor:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Classroom Captioner&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Classroom Captioner&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Join as a student&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/student&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;Room ID&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Create as a lecturer&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/lecturer&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;Room ID&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Start your server by running <code is:raw>node index.js</code> and navigate to <code is:raw>http://localhost:3000</code>. Type a value into the first input and submit the form. You should be sent to <code is:raw>http://localhost:3000/student?id=TYPEDVALUE</code> (which should present an error as there is no file yet for that page). However, this confirms that our landing page can direct users to the student and lecturer pages.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/landing-no-style.png" alt="Webpage with the title &#x22;Classroom Captioner&#x22; with two forms. The first form says &#x22;join as a student&#x22; and asks for a Room ID. The second form is the same except it starts &#x22;create as a lecturer&#x22;."></p>\n<h2 id="understanding-socket-rooms">Understanding Socket Rooms</h2>\n<p>When using socket.io for realtime communication, there are two main concepts:</p>\n<ol>\n<li>Sending (<em>broadcasting</em> or <em>emitting</em>) and receiving (<em>listening</em>) events with data.</li>\n<li>All users (<em>clients</em>) connect to a <em>server</em>. Messages get sent to and from the server - you can think of the server as an intermediary between all other connections in this context.</li>\n</ol>\n<p>Typically, data sent from the server will be sent to all clients connected to it, except the sender, or to one specific client. However, this project needs to handle multiple ongoing rooms with many users in each, and that\u2019s where rooms come in.</p>\n<p>Any socket connection can be assigned to any number of rooms, which you can think of as groups. When emitting an event from the server, you can specify which rooms should be sent the data. All users in those rooms get it, and those not assigned do not - perfect!</p>\n<p>When a client establishes a new connection via socket.io, they are automatically assigned to a room with the name of their unique identifier. This means users are immediately in one room, and they will need to be added to the shared class-wide room when joining. Just keep this in mind as we move into the next section.</p>\n<h2 id="lecturer-view">Lecturer View</h2>\n<p>Inside of the <em>views</em> directory, add <code is:raw>lecturer.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Class Captioner: Lecturer&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Room &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9">&gt;Lecturer Key&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;password&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URL</span><span style="color: #C9D1D9">(location.href)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">search</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URLSearchParams</span><span style="color: #C9D1D9">(url.search)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;id&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#id&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> id</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, id)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Let\u2019s talk about this page:</p>\n<ol>\n<li>There is a form which is asking for a lecturer key. We\u2019ll use this shortly to validate the user.</li>\n<li>We include the socket.io client file.</li>\n<li>We get access to the room name from the URL, store it in a variable called <code is:raw>id</code>, and display it to the user.</li>\n<li>We connect to our socket server, and immediately emit an event called <code is:raw>join</code> along with the <code is:raw>id</code> value.</li>\n</ol>\n<h3 id="add-user-to-socket-room">Add User To Socket Room</h3>\n<p>It is now time to listen for, and handle, the <code is:raw>join</code> event. Just below the route handlers in <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">io.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;connection&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">roomId</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(roomId)</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">socket</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">} joins ${</span><span style="color: #C9D1D9">roomId</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server, and navigate to a room as a lecturer. Look at your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/socket-user-joins-room.png" alt="Terminal displays a log of a user joining the specified room name - here &#x22;test&#x22;"></p>\n<h3 id="accessing-lecturers-microphone">Accessing Lecturer\u2019s Microphone</h3>\n<p>There are parts of this project which build on our <a href="https://blog.deepgram.com/live-transcription-mic-browser/">\u201CGet Live Speech Transcriptions In Your Browser\u201D</a> blog post and video. I\u2019ll call these out, and go into less depth about the code. This is one of them - add this code to <code is:raw>lecturer.html</code> to get access to the user\u2019s mic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide access to the microphone&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<h3 id="validate-lecturer-key">Validate Lecturer Key</h3>\n<p>The main visual difference between the lecturer and student views is the inclusion of a form that prompts for a \u201Clecturer key\u201D. This value must be compared against the <code is:raw>LECTURE_KEY</code> in our <code is:raw>.env</code> file, and if it\u2019s correct, we must issue a temporary Deepgram API Key to allow transcription to begin. Finally, this new key will be used to establish a connection with Deepgram and begin transcription.</p>\n<p>To build this validation system, add a route handler to the <code is:raw>index.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/auth&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (req.body.key </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">LECTURE_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ error: </span><span style="color: #A5D6FF">&#39;Key is missing or incorrect&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">newKey</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.keys.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">      process.env.</span><span style="color: #79C0FF">DEEPGRAM_PROJECT</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Temporary key - works for 10 secs&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      [</span><span style="color: #A5D6FF">&#39;usage:write&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">      { timeToLive: </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    )</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ deepgramToken: newKey.key })</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ error })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>A new short-lived Deepgram API Key with minimal permissions will be generated and returned if the provided key is correct. If the provided key is wrong, or an error occurs, we will show this to the browser in the returned payload.</p>\n<p>When the form in <code is:raw>lecturer.html</code> is submitted, let\u2019s send a request to our new route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;form&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;submit&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  event.</span><span style="color: #D2A8FF">preventDefault</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#key&#39;</span><span style="color: #C9D1D9">).value</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">resp</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/auth&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ id, key }),</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: { </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (resp.error) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(resp.error)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;form&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here [1]</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here [2]</span></span></code></pre>\n<p>Errors will be shown to users in a popup. Success will lead to the form disappearing. Restart your server and try it out!</p>\n<h3 id="live-transcribe-lecturer">Live Transcribe Lecturer</h3>\n<p>Now there is a valid Deepgram API Key in our web page, immediately establish a connection with Deepgram. In the first annotated spot above, connect to Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">ws </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  resp.deepgramToken,</span></span>\n<span class="line"><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">ws.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> start</span></span>\n<span class="line"><span style="color: #C9D1D9">ws.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> handleResponse</span></span></code></pre>\n<p>In the second annotated spot, add our event handlers for a connection being opened, and receiving data back from Deepgram. Take a look at <a href="https://blog.deepgram.com/live-transcription-mic-browser/">\u201CGet Live Speech Transcriptions In Your Browser\u201D</a> for more explanation.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> ws.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      ws.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> data.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;p&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Restart your server, and you should see transcripts displayed in the browser.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/lecturer-transcript.png" alt="A webpage reads &#x22;Hello I hope you&#x27;ve had a wonderful week so far and I&#x27;m very excited for today&#x27;s class&#x22;"></p>\n<h3 id="emit-socket-event-with-transcript">Emit Socket Event With Transcript</h3>\n<p>The final step on the lecturer side is to emit a socket event with this transcript, so we can bring it into students\u2019 pages. Add the following line to the <code is:raw>handleResponse</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReady&#39;</span><span style="color: #C9D1D9">, transcript)</span></span></code></pre>\n<p>Now, as transcripts are displayed on the lecturer\u2019s page, a <code is:raw>transcriptReady</code> event will also be triggered.</p>\n<h2 id="emit-transcript">Emit Transcript</h2>\n<p>In <code is:raw>index.js</code>, add a new listener to the socket right below where the <code is:raw>socket.on(\'join\')</code> callback ends:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReady&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> room </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> socket.rooms) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">to</span><span style="color: #C9D1D9">(room).</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptComplete&#39;</span><span style="color: #C9D1D9">, message)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This goes through all of the rooms this current socket belongs to (which includes the room they joined with the <code is:raw>join</code> event) and emits a <code is:raw>transcriptComplete</code> event with the transcript to just the sockets in those rooms.</p>\n<p>If the room you navigated to in the browser is called \u201Cmy-awesome-room\u201D the <code is:raw>join</code> event will have added your connection to a socket room of the same name. If students join the same room, they will receive the transcripts too.</p>\n<h2 id="student-view">Student View</h2>\n<p>The student view is just a stripped-back version of the lecturer view. Create a <code is:raw>student.html</code> page in the <code is:raw>views</code> directory and add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Class Captioner&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Room &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URL</span><span style="color: #C9D1D9">(location.href)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">search</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URLSearchParams</span><span style="color: #C9D1D9">(url.search)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;id&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#id&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> id</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, id)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptComplete&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;p&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> message</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Restart your server, open the application in various browser windows, with one window acting as the lecturer and the others as students. You should see the transcript appear on all screens.</p>\n<h2 id="adding-styling">Adding Styling</h2>\n<p>Create a <code is:raw>style.css</code> file in your <code is:raw>public</code> directory with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@import</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https://fonts.googleapis.com/css2?family=Cairo&amp;display=swap&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">box-sizing</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">border-box</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Cairo&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">sans-serif</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#141e29</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">white</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">h2</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin-top</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1.5</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">block</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">inherit</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">200</span><span style="color: #FF7B72">px</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">type</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;submit&#39;</span><span style="color: #C9D1D9">] {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#38edac</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#141e29</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">border</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin-top</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then, just before the <code is:raw>&lt;/head&gt;</code> in all three <code is:raw>.html</code> files, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">link</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rel</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;stylesheet&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;style.css&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span></code></pre>\n<p>Restart your server one final time and your application should look like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/fin.png" alt="Four browser windows. One is a broadcaster in room test1. Two are students in room test1. The final window is a student in room test 2. The first three have identical text displayed, and the other is empty"></p>\n<h2 id="run-your-own">Run Your Own</h2>\n<p>If you want to see the finished code and deploy your own version of this project in one click, visit <a href="https://github.com/deepgram-devs/classroom-captioner">https://github.com/deepgram-devs/classroom-captioner</a>.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>Sharing knowledge as an educator feels wonderful, and now you can ensure all of your students have an equal experience in the classroom. If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>' }, "file": "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/classroom-captioner/index.md" };
function rawContent() {
  return "\nMany places of study offer accessibility accommodations for students who need them to understand and participate in lectures and seminars. However, the process for asking for and receiving this help can limit who can have it, and it really [isn't good enough](https://blog.deepgram.com/automatic-speech-recognition-education/).\n\n![A lecturer at the front of a classroom](https://res.cloudinary.com/deepgram/image/upload/v1644272678/blog/2022/02/classroom-captioner/iglt.jpg)\n\n*A photo of a large lecture hall at Goldsmiths, University of London, my alma mater. [Photo source](https://virtualtours.gold.ac.uk/map/learn/ian-gulland-lecture-theatre/)*\n\nThis project, Classroom Captioner, aims to alleviate the concerns of students who need or prefer a text representation of what's happening in a lecture. Most lecturers will present from a computer - either their own or one built into a podium. At the start of a session, lecturers can:\n\n1.  Open a browser tab to the application.\n2.  Create a new room and provide the lecture key needed to validate themselves as the lecturer.\n3.  Provide the room code to students to put in the same web application.\n4.  Speak as usual - the tab can be left in the background.\n\nIf you want to see the finished code and deploy your own version of this project in one click, visit <a href=\"https://github.com/deepgram-devs/classroom-captioner\">https://github.com/deepgram-devs/classroom-captioner</a>.\n\n## Before We Start\n\nYou will need:\n\n*   Node.js installed on your machine - [download it here](https://nodejs.org/en/).\n*   A Deepgram API Key and Project ID - [get them here](https://console.deepgram.com/signup?jump=keys). Make sure your API Key has either an admin or owner role.\n\nCreate a new directory and navigate to it with your terminal. Run `npm init -y` to create a `package.json` file and then install the following packages:\n\n    npm install @deepgram/sdk dotenv express socket.io\n\nCreate a file called `.env` and add the following to it:\n\n    DEEPGRAM_KEY=your-api-key\n    DEEPGRAM_PROJECT=your-project-id\n    LECTURE_KEY=any-passphrase\n\n<Alert type=\"warning\">Do not let others access your .env file as it contains sensitive values. If you share your code, omit this file.</Alert>\n\n## Setting Up Server\n\nThis application uses a combined express and socket.io server. Express is used to serve files, authenticate our lecture key, and generate temporary Deepgram API keys. Socket.io is used for realtime communication - sending completed transcriptions from the lecturer's view to their students.\n\nCreate an `index.js` file and add the following code to create this combined server and set up Deepgram for later use:\n\n```js\nrequire('dotenv').config()\nconst http = require('http')\nconst express = require('express')\nconst Socket = require('socket.io').Server\nconst { Deepgram } = require('@deepgram/sdk')\n\nconst app = express()\nconst server = http.createServer(app)\nconst io = new Socket(server)\nconst deepgram = new Deepgram(process.env.DEEPGRAM_KEY)\n\napp.use(express.static('public'))\napp.use(express.json())\n\n// Further code goes here\n\nconst PORT = process.env.PORT || 3000\nserver.listen(PORT, () => {\n  console.log(`listening on ${PORT} at ${new Date().toISOString()}`)\n})\n```\n\nFinally, create a `views` and `public` directory.\n\n## Landing Page\n\nThe first of three pages to build is our landing page. It will allow users to navigate to a room as either a lecturer or a student.\n\nWe must create a route handler to tell express which file to load when a user navigates to our page. While we are here, we will also create route handlers for other pages. In `index.js`:\n\n```js\napp.get('/', (req, res) => {\n  res.sendFile(__dirname + '/views/index.html')\n})\napp.get('/student', (req, res) => {\n  res.sendFile(__dirname + '/views/student.html')\n})\napp.get('/lecturer', (req, res) => {\n  res.sendFile(__dirname + '/views/lecturer.html')\n})\n```\n\nWe'll create the student and lecturer views later. For now, add an `index.html` page to your `views` directory, and open it in your code editor:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Classroom Captioner</title>\n  </head>\n  <body>\n    <h1>Classroom Captioner</h1>\n\n    <h2>Join as a student</h2>\n    <form action=\"/student\">\n      <label for=\"id\">Room ID</label>\n      <input type=\"text\" id=\"id\" name=\"id\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n\n    <h2>Create as a lecturer</h2>\n    <form action=\"/lecturer\">\n      <label for=\"id\">Room ID</label>\n      <input type=\"text\" id=\"id\" name=\"id\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  </body>\n</html>\n```\n\nStart your server by running `node index.js` and navigate to `http://localhost:3000`. Type a value into the first input and submit the form. You should be sent to `http://localhost:3000/student?id=TYPEDVALUE` (which should present an error as there is no file yet for that page). However, this confirms that our landing page can direct users to the student and lecturer pages.\n\n![Webpage with the title \"Classroom Captioner\" with two forms. The first form says \"join as a student\" and asks for a Room ID. The second form is the same except it starts \"create as a lecturer\".](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/landing-no-style.png)\n\n## Understanding Socket Rooms\n\nWhen using socket.io for realtime communication, there are two main concepts:\n\n1.  Sending (*broadcasting* or *emitting*) and receiving (*listening*) events with data.\n2.  All users (*clients*) connect to a *server*. Messages get sent to and from the server - you can think of the server as an intermediary between all other connections in this context.\n\nTypically, data sent from the server will be sent to all clients connected to it, except the sender, or to one specific client. However, this project needs to handle multiple ongoing rooms with many users in each, and that's where rooms come in.\n\nAny socket connection can be assigned to any number of rooms, which you can think of as groups. When emitting an event from the server, you can specify which rooms should be sent the data. All users in those rooms get it, and those not assigned do not - perfect!\n\nWhen a client establishes a new connection via socket.io, they are automatically assigned to a room with the name of their unique identifier. This means users are immediately in one room, and they will need to be added to the shared class-wide room when joining. Just keep this in mind as we move into the next section.\n\n## Lecturer View\n\nInside of the *views* directory, add `lecturer.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Class Captioner: Lecturer</title>\n  </head>\n  <body>\n    <h1>Room <span id=\"id\"></span></h1>\n    <form>\n      <label for=\"key\">Lecturer Key</label>\n      <input type=\"password\" id=\"key\" name=\"key\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n\n    <p></p>\n\n    <script src=\"/socket.io/socket.io.js\"><\/script>\n    <script>\n      const url = new URL(location.href)\n      const search = new URLSearchParams(url.search)\n      const id = search.get('id')\n      document.querySelector('#id').textContent = id\n\n      const socket = io()\n      socket.emit('join', id)\n\n      // Further code goes here\n    <\/script>\n  </body>\n</html>\n```\n\nLet's talk about this page:\n\n1.  There is a form which is asking for a lecturer key. We'll use this shortly to validate the user.\n2.  We include the socket.io client file.\n3.  We get access to the room name from the URL, store it in a variable called `id`, and display it to the user.\n4.  We connect to our socket server, and immediately emit an event called `join` along with the `id` value.\n\n### Add User To Socket Room\n\nIt is now time to listen for, and handle, the `join` event. Just below the route handlers in `index.js`:\n\n```js\nio.on('connection', (socket) => {\n  socket.on('join', (roomId) => {\n    socket.join(roomId)\n    console.log(`${socket.id} joins ${roomId}`)\n  })\n})\n```\n\nRestart your server, and navigate to a room as a lecturer. Look at your terminal.\n\n![Terminal displays a log of a user joining the specified room name - here \"test\"](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/socket-user-joins-room.png)\n\n### Accessing Lecturer's Microphone\n\nThere are parts of this project which build on our [\"Get Live Speech Transcriptions In Your Browser\"](https://blog.deepgram.com/live-transcription-mic-browser/) blog post and video. I'll call these out, and go into less depth about the code. This is one of them - add this code to `lecturer.html` to get access to the user's mic:\n\n```js\nnavigator.mediaDevices\n  .getUserMedia({ audio: true })\n  .then((stream) => {\n    mediaRecorder = new MediaRecorder(stream)\n  })\n  .catch(() => alert('You must provide access to the microphone'))\n```\n\n### Validate Lecturer Key\n\nThe main visual difference between the lecturer and student views is the inclusion of a form that prompts for a \"lecturer key\". This value must be compared against the `LECTURE_KEY` in our `.env` file, and if it's correct, we must issue a temporary Deepgram API Key to allow transcription to begin. Finally, this new key will be used to establish a connection with Deepgram and begin transcription.\n\nTo build this validation system, add a route handler to the `index.js` file:\n\n```js\napp.post('/auth', async (req, res) => {\n  try {\n    const { id, key } = req.body\n    if (req.body.key != process.env.LECTURE_KEY)\n      return res.json({ error: 'Key is missing or incorrect' })\n    const newKey = await deepgram.keys.create(\n      process.env.DEEPGRAM_PROJECT,\n      'Temporary key - works for 10 secs',\n      ['usage:write'],\n      { timeToLive: 10 }\n    )\n    res.json({ deepgramToken: newKey.key })\n  } catch (error) {\n    res.json({ error })\n  }\n})\n```\n\nA new short-lived Deepgram API Key with minimal permissions will be generated and returned if the provided key is correct. If the provided key is wrong, or an error occurs, we will show this to the browser in the returned payload.\n\nWhen the form in `lecturer.html` is submitted, let's send a request to our new route handler:\n\n```js\ndocument.querySelector('form').addEventListener('submit', async (event) => {\n  event.preventDefault()\n  const key = document.querySelector('#key').value\n\n  const resp = await fetch('/auth', {\n    method: 'POST',\n    body: JSON.stringify({ id, key }),\n    headers: { 'Content-Type': 'application/json' },\n  })\n    .then((r) => r.json())\n    .catch((error) => alert(error))\n\n  if (resp.error) return alert(resp.error)\n\n  document.querySelector('form').remove()\n\n  // Further code here [1]\n})\n\n// Further code here [2]\n```\n\nErrors will be shown to users in a popup. Success will lead to the form disappearing. Restart your server and try it out!\n\n### Live Transcribe Lecturer\n\nNow there is a valid Deepgram API Key in our web page, immediately establish a connection with Deepgram. In the first annotated spot above, connect to Deepgram:\n\n```js\nws = new WebSocket('wss://api.deepgram.com/v1/listen', [\n  'token',\n  resp.deepgramToken,\n])\nws.onopen = start\nws.onmessage = handleResponse\n```\n\nIn the second annotated spot, add our event handlers for a connection being opened, and receiving data back from Deepgram. Take a look at [\"Get Live Speech Transcriptions In Your Browser\"](https://blog.deepgram.com/live-transcription-mic-browser/) for more explanation.\n\n```js\nfunction start() {\n  mediaRecorder.addEventListener('dataavailable', (event) => {\n    if (event.data.size > 0 && ws.readyState == 1) {\n      ws.send(event.data)\n    }\n  })\n  mediaRecorder.start(250)\n}\n\nfunction handleResponse(message) {\n  const data = JSON.parse(message.data)\n  const transcript = data.channel.alternatives[0].transcript\n  if (transcript && data.is_final) {\n    document.querySelector('p').textContent += ' ' + transcript\n    // Further code here\n  }\n}\n```\n\nRestart your server, and you should see transcripts displayed in the browser.\n\n![A webpage reads \"Hello I hope you've had a wonderful week so far and I'm very excited for today's class\"](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/lecturer-transcript.png)\n\n### Emit Socket Event With Transcript\n\nThe final step on the lecturer side is to emit a socket event with this transcript, so we can bring it into students' pages. Add the following line to the `handleResponse` function:\n\n```js\nsocket.emit('transcriptReady', transcript)\n```\n\nNow, as transcripts are displayed on the lecturer's page, a `transcriptReady` event will also be triggered.\n\n## Emit Transcript\n\nIn `index.js`, add a new listener to the socket right below where the `socket.on('join')` callback ends:\n\n```js\nsocket.on('transcriptReady', (message) => {\n  for (let room of socket.rooms) {\n    socket.to(room).emit('transcriptComplete', message)\n  }\n})\n```\n\nThis goes through all of the rooms this current socket belongs to (which includes the room they joined with the `join` event) and emits a `transcriptComplete` event with the transcript to just the sockets in those rooms.\n\nIf the room you navigated to in the browser is called \"my-awesome-room\" the `join` event will have added your connection to a socket room of the same name. If students join the same room, they will receive the transcripts too.\n\n## Student View\n\nThe student view is just a stripped-back version of the lecturer view. Create a `student.html` page in the `views` directory and add the following:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Class Captioner</title>\n  </head>\n  <body>\n    <h1>Room <span id=\"id\"></span></h1>\n\n    <p></p>\n\n    <script src=\"/socket.io/socket.io.js\"><\/script>\n    <script>\n      const url = new URL(location.href)\n      const search = new URLSearchParams(url.search)\n      const id = search.get('id')\n      document.querySelector('#id').textContent = id\n\n      const socket = io()\n      socket.emit('join', id)\n\n      socket.on('transcriptComplete', (message) => {\n        document.querySelector('p').textContent += ' ' + message\n      })\n    <\/script>\n  </body>\n</html>\n```\n\nRestart your server, open the application in various browser windows, with one window acting as the lecturer and the others as students. You should see the transcript appear on all screens.\n\n## Adding Styling\n\nCreate a `style.css` file in your `public` directory with the following:\n\n```css\n@import url('https://fonts.googleapis.com/css2?family=Cairo&display=swap');\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  padding: 2em;\n  font-family: 'Cairo', sans-serif;\n  background: #141e29;\n  color: white;\n}\nh2 {\n  margin-top: 1.5rem;\n}\ninput {\n  display: block;\n  font-size: 1em;\n  font-family: inherit;\n  padding: 0 0.5em;\n  width: 200px;\n}\ninput[type='submit'] {\n  background: #38edac;\n  color: #141e29;\n  border: none;\n  margin-top: 0.5em;\n}\n```\n\nThen, just before the `</head>` in all three `.html` files, add the following:\n\n```html\n<link rel=\"stylesheet\" href=\"style.css\" />\n```\n\nRestart your server one final time and your application should look like this:\n\n![Four browser windows. One is a broadcaster in room test1. Two are students in room test1. The final window is a student in room test 2. The first three have identical text displayed, and the other is empty](https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/fin.png)\n\n## Run Your Own\n\nIf you want to see the finished code and deploy your own version of this project in one click, visit <a href=\"https://github.com/deepgram-devs/classroom-captioner\">https://github.com/deepgram-devs/classroom-captioner</a>.\n\n## Wrapping Up\n\nSharing knowledge as an educator feels wonderful, and now you can ensure all of your students have an equal experience in the classroom. If you have any questions, please feel free to reach out on Twitter - we're [@DeepgramDevs](https://twitter.com/DeepgramDevs).\n\n        ";
}
function compiledContent() {
  return '<p>Many places of study offer accessibility accommodations for students who need them to understand and participate in lectures and seminars. However, the process for asking for and receiving this help can limit who can have it, and it really <a href="https://blog.deepgram.com/automatic-speech-recognition-education/">isn\u2019t good enough</a>.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272678/blog/2022/02/classroom-captioner/iglt.jpg" alt="A lecturer at the front of a classroom"></p>\n<p><em>A photo of a large lecture hall at Goldsmiths, University of London, my alma mater. <a href="https://virtualtours.gold.ac.uk/map/learn/ian-gulland-lecture-theatre/">Photo source</a></em></p>\n<p>This project, Classroom Captioner, aims to alleviate the concerns of students who need or prefer a text representation of what\u2019s happening in a lecture. Most lecturers will present from a computer - either their own or one built into a podium. At the start of a session, lecturers can:</p>\n<ol>\n<li>Open a browser tab to the application.</li>\n<li>Create a new room and provide the lecture key needed to validate themselves as the lecturer.</li>\n<li>Provide the room code to students to put in the same web application.</li>\n<li>Speak as usual - the tab can be left in the background.</li>\n</ol>\n<p>If you want to see the finished code and deploy your own version of this project in one click, visit <a href="https://github.com/deepgram-devs/classroom-captioner">https://github.com/deepgram-devs/classroom-captioner</a>.</p>\n<h2 id="before-we-start">Before We Start</h2>\n<p>You will need:</p>\n<ul>\n<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>\n<li>A Deepgram API Key and Project ID - <a href="https://console.deepgram.com/signup?jump=keys">get them here</a>. Make sure your API Key has either an admin or owner role.</li>\n</ul>\n<p>Create a new directory and navigate to it with your terminal. Run <code is:raw>npm init -y</code> to create a <code is:raw>package.json</code> file and then install the following packages:</p>\n<p>npm install @deepgram/sdk dotenv express socket.io</p>\n<p>Create a file called <code is:raw>.env</code> and add the following to it:</p>\n<p>DEEPGRAM_KEY=your-api-key\nDEEPGRAM_PROJECT=your-project-id\nLECTURE_KEY=any-passphrase</p>\n<Alert type="warning">Do not let others access your .env file as it contains sensitive values. If you share your code, omit this file.</Alert>\n<h2 id="setting-up-server">Setting Up Server</h2>\n<p>This application uses a combined express and socket.io server. Express is used to serve files, authenticate our lecture key, and generate temporary Deepgram API keys. Socket.io is used for realtime communication - sending completed transcriptions from the lecturer\u2019s view to their students.</p>\n<p>Create an <code is:raw>index.js</code> file and add the following code to create this combined server and set up Deepgram for later use:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;http&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;socket.io&#39;</span><span style="color: #C9D1D9">).Server</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> http.</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">(app)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">io</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Socket</span><span style="color: #C9D1D9">(server)</span></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3000</span></span>\n<span class="line"><span style="color: #C9D1D9">server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`listening on ${</span><span style="color: #79C0FF">PORT</span><span style="color: #A5D6FF">} at ${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Finally, create a <code is:raw>views</code> and <code is:raw>public</code> directory.</p>\n<h2 id="landing-page">Landing Page</h2>\n<p>The first of three pages to build is our landing page. It will allow users to navigate to a room as either a lecturer or a student.</p>\n<p>We must create a route handler to tell express which file to load when a user navigates to our page. While we are here, we will also create route handlers for other pages. In <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/index.html&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/student&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/student.html&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/lecturer&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/lecturer.html&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>We\u2019ll create the student and lecturer views later. For now, add an <code is:raw>index.html</code> page to your <code is:raw>views</code> directory, and open it in your code editor:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Classroom Captioner&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Classroom Captioner&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Join as a student&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/student&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;Room ID&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Create as a lecturer&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/lecturer&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;Room ID&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Start your server by running <code is:raw>node index.js</code> and navigate to <code is:raw>http://localhost:3000</code>. Type a value into the first input and submit the form. You should be sent to <code is:raw>http://localhost:3000/student?id=TYPEDVALUE</code> (which should present an error as there is no file yet for that page). However, this confirms that our landing page can direct users to the student and lecturer pages.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/landing-no-style.png" alt="Webpage with the title &#x22;Classroom Captioner&#x22; with two forms. The first form says &#x22;join as a student&#x22; and asks for a Room ID. The second form is the same except it starts &#x22;create as a lecturer&#x22;."></p>\n<h2 id="understanding-socket-rooms">Understanding Socket Rooms</h2>\n<p>When using socket.io for realtime communication, there are two main concepts:</p>\n<ol>\n<li>Sending (<em>broadcasting</em> or <em>emitting</em>) and receiving (<em>listening</em>) events with data.</li>\n<li>All users (<em>clients</em>) connect to a <em>server</em>. Messages get sent to and from the server - you can think of the server as an intermediary between all other connections in this context.</li>\n</ol>\n<p>Typically, data sent from the server will be sent to all clients connected to it, except the sender, or to one specific client. However, this project needs to handle multiple ongoing rooms with many users in each, and that\u2019s where rooms come in.</p>\n<p>Any socket connection can be assigned to any number of rooms, which you can think of as groups. When emitting an event from the server, you can specify which rooms should be sent the data. All users in those rooms get it, and those not assigned do not - perfect!</p>\n<p>When a client establishes a new connection via socket.io, they are automatically assigned to a room with the name of their unique identifier. This means users are immediately in one room, and they will need to be added to the shared class-wide room when joining. Just keep this in mind as we move into the next section.</p>\n<h2 id="lecturer-view">Lecturer View</h2>\n<p>Inside of the <em>views</em> directory, add <code is:raw>lecturer.html</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Class Captioner: Lecturer&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Room &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9">&gt;Lecturer Key&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;password&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URL</span><span style="color: #C9D1D9">(location.href)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">search</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URLSearchParams</span><span style="color: #C9D1D9">(url.search)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;id&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#id&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> id</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, id)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Further code goes here</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Let\u2019s talk about this page:</p>\n<ol>\n<li>There is a form which is asking for a lecturer key. We\u2019ll use this shortly to validate the user.</li>\n<li>We include the socket.io client file.</li>\n<li>We get access to the room name from the URL, store it in a variable called <code is:raw>id</code>, and display it to the user.</li>\n<li>We connect to our socket server, and immediately emit an event called <code is:raw>join</code> along with the <code is:raw>id</code> value.</li>\n</ol>\n<h3 id="add-user-to-socket-room">Add User To Socket Room</h3>\n<p>It is now time to listen for, and handle, the <code is:raw>join</code> event. Just below the route handlers in <code is:raw>index.js</code>:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">io.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;connection&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">roomId</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(roomId)</span></span>\n<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">`${</span><span style="color: #C9D1D9">socket</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">} joins ${</span><span style="color: #C9D1D9">roomId</span><span style="color: #A5D6FF">}`</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>Restart your server, and navigate to a room as a lecturer. Look at your terminal.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/socket-user-joins-room.png" alt="Terminal displays a log of a user joining the specified room name - here &#x22;test&#x22;"></p>\n<h3 id="accessing-lecturers-microphone">Accessing Lecturer\u2019s Microphone</h3>\n<p>There are parts of this project which build on our <a href="https://blog.deepgram.com/live-transcription-mic-browser/">\u201CGet Live Speech Transcriptions In Your Browser\u201D</a> blog post and video. I\u2019ll call these out, and go into less depth about the code. This is one of them - add this code to <code is:raw>lecturer.html</code> to get access to the user\u2019s mic:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide access to the microphone&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>\n<h3 id="validate-lecturer-key">Validate Lecturer Key</h3>\n<p>The main visual difference between the lecturer and student views is the inclusion of a form that prompts for a \u201Clecturer key\u201D. This value must be compared against the <code is:raw>LECTURE_KEY</code> in our <code is:raw>.env</code> file, and if it\u2019s correct, we must issue a temporary Deepgram API Key to allow transcription to begin. Finally, this new key will be used to establish a connection with Deepgram and begin transcription.</p>\n<p>To build this validation system, add a route handler to the <code is:raw>index.js</code> file:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/auth&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (req.body.key </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">LECTURE_KEY</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ error: </span><span style="color: #A5D6FF">&#39;Key is missing or incorrect&#39;</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">newKey</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.keys.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span></span>\n<span class="line"><span style="color: #C9D1D9">      process.env.</span><span style="color: #79C0FF">DEEPGRAM_PROJECT</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Temporary key - works for 10 secs&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      [</span><span style="color: #A5D6FF">&#39;usage:write&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">      { timeToLive: </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9"> }</span></span>\n<span class="line"><span style="color: #C9D1D9">    )</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ deepgramToken: newKey.key })</span></span>\n<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ error })</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>A new short-lived Deepgram API Key with minimal permissions will be generated and returned if the provided key is correct. If the provided key is wrong, or an error occurs, we will show this to the browser in the returned payload.</p>\n<p>When the form in <code is:raw>lecturer.html</code> is submitted, let\u2019s send a request to our new route handler:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;form&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;submit&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  event.</span><span style="color: #D2A8FF">preventDefault</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#key&#39;</span><span style="color: #C9D1D9">).value</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">resp</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/auth&#39;</span><span style="color: #C9D1D9">, {</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ id, key }),</span></span>\n<span class="line"><span style="color: #C9D1D9">    headers: { </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9"> },</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>\n<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (resp.error) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(resp.error)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;form&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here [1]</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// Further code here [2]</span></span></code></pre>\n<p>Errors will be shown to users in a popup. Success will lead to the form disappearing. Restart your server and try it out!</p>\n<h3 id="live-transcribe-lecturer">Live Transcribe Lecturer</h3>\n<p>Now there is a valid Deepgram API Key in our web page, immediately establish a connection with Deepgram. In the first annotated spot above, connect to Deepgram:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">ws </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  resp.deepgramToken,</span></span>\n<span class="line"><span style="color: #C9D1D9">])</span></span>\n<span class="line"><span style="color: #C9D1D9">ws.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> start</span></span>\n<span class="line"><span style="color: #C9D1D9">ws.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> handleResponse</span></span></code></pre>\n<p>In the second annotated spot, add our event handlers for a connection being opened, and receiving data back from Deepgram. Take a look at <a href="https://blog.deepgram.com/live-transcription-mic-browser/">\u201CGet Live Speech Transcriptions In Your Browser\u201D</a> for more explanation.</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> ws.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      ws.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">    }</span></span>\n<span class="line"><span style="color: #C9D1D9">  })</span></span>\n<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> data.is_final) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;p&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> transcript</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Restart your server, and you should see transcripts displayed in the browser.</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/lecturer-transcript.png" alt="A webpage reads &#x22;Hello I hope you&#x27;ve had a wonderful week so far and I&#x27;m very excited for today&#x27;s class&#x22;"></p>\n<h3 id="emit-socket-event-with-transcript">Emit Socket Event With Transcript</h3>\n<p>The final step on the lecturer side is to emit a socket event with this transcript, so we can bring it into students\u2019 pages. Add the following line to the <code is:raw>handleResponse</code> function:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReady&#39;</span><span style="color: #C9D1D9">, transcript)</span></span></code></pre>\n<p>Now, as transcripts are displayed on the lecturer\u2019s page, a <code is:raw>transcriptReady</code> event will also be triggered.</p>\n<h2 id="emit-transcript">Emit Transcript</h2>\n<p>In <code is:raw>index.js</code>, add a new listener to the socket right below where the <code is:raw>socket.on(\'join\')</code> callback ends:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReady&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> room </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> socket.rooms) {</span></span>\n<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">to</span><span style="color: #C9D1D9">(room).</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptComplete&#39;</span><span style="color: #C9D1D9">, message)</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>\n<p>This goes through all of the rooms this current socket belongs to (which includes the room they joined with the <code is:raw>join</code> event) and emits a <code is:raw>transcriptComplete</code> event with the transcript to just the sockets in those rooms.</p>\n<p>If the room you navigated to in the browser is called \u201Cmy-awesome-room\u201D the <code is:raw>join</code> event will have added your connection to a socket room of the same name. If students join the same room, they will receive the transcripts too.</p>\n<h2 id="student-view">Student View</h2>\n<p>The student view is just a stripped-back version of the lecturer view. Create a <code is:raw>student.html</code> page in the <code is:raw>views</code> directory and add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Class Captioner&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Room &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URL</span><span style="color: #C9D1D9">(location.href)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">search</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URLSearchParams</span><span style="color: #C9D1D9">(url.search)</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;id&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#id&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> id</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, id)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptComplete&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;p&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> message</span></span>\n<span class="line"><span style="color: #C9D1D9">      })</span></span>\n<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>\n<p>Restart your server, open the application in various browser windows, with one window acting as the lecturer and the others as students. You should see the transcript appear on all screens.</p>\n<h2 id="adding-styling">Adding Styling</h2>\n<p>Create a <code is:raw>style.css</code> file in your <code is:raw>public</code> directory with the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@import</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https://fonts.googleapis.com/css2?family=Cairo&amp;display=swap&#39;</span><span style="color: #C9D1D9">);</span></span>\n<span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">box-sizing</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">border-box</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Cairo&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">sans-serif</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#141e29</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">white</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">h2</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin-top</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1.5</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">block</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">inherit</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">200</span><span style="color: #FF7B72">px</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">type</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;submit&#39;</span><span style="color: #C9D1D9">] {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#38edac</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#141e29</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">border</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin-top</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>\n<p>Then, just before the <code is:raw>&lt;/head&gt;</code> in all three <code is:raw>.html</code> files, add the following:</p>\n<pre is:raw class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">link</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rel</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;stylesheet&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;style.css&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span></code></pre>\n<p>Restart your server one final time and your application should look like this:</p>\n<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/fin.png" alt="Four browser windows. One is a broadcaster in room test1. Two are students in room test1. The final window is a student in room test 2. The first three have identical text displayed, and the other is empty"></p>\n<h2 id="run-your-own">Run Your Own</h2>\n<p>If you want to see the finished code and deploy your own version of this project in one click, visit <a href="https://github.com/deepgram-devs/classroom-captioner">https://github.com/deepgram-devs/classroom-captioner</a>.</p>\n<h2 id="wrapping-up">Wrapping Up</h2>\n<p>Sharing knowledge as an educator feels wonderful, and now you can ensure all of your students have an equal experience in the classroom. If you have any questions, please feel free to reach out on Twitter - we\u2019re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>';
}
const $$Astro = createAstro("/Users/sandrarodgers/web-next/blog/src/content/blog/posts/classroom-captioner/index.md", "", "file:///Users/sandrarodgers/web-next/blog/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  new Slugger();
  return renderTemplate`<head>${renderHead($$result)}</head><p>Many places of study offer accessibility accommodations for students who need them to understand and participate in lectures and seminars. However, the process for asking for and receiving this help can limit who can have it, and it really <a href="https://blog.deepgram.com/automatic-speech-recognition-education/">isn’t good enough</a>.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272678/blog/2022/02/classroom-captioner/iglt.jpg" alt="A lecturer at the front of a classroom"></p>
<p><em>A photo of a large lecture hall at Goldsmiths, University of London, my alma mater. <a href="https://virtualtours.gold.ac.uk/map/learn/ian-gulland-lecture-theatre/">Photo source</a></em></p>
<p>This project, Classroom Captioner, aims to alleviate the concerns of students who need or prefer a text representation of what’s happening in a lecture. Most lecturers will present from a computer - either their own or one built into a podium. At the start of a session, lecturers can:</p>
<ol>
<li>Open a browser tab to the application.</li>
<li>Create a new room and provide the lecture key needed to validate themselves as the lecturer.</li>
<li>Provide the room code to students to put in the same web application.</li>
<li>Speak as usual - the tab can be left in the background.</li>
</ol>
<p>If you want to see the finished code and deploy your own version of this project in one click, visit <a href="https://github.com/deepgram-devs/classroom-captioner">https://github.com/deepgram-devs/classroom-captioner</a>.</p>
<h2 id="before-we-start">Before We Start</h2>
<p>You will need:</p>
<ul>
<li>Node.js installed on your machine - <a href="https://nodejs.org/en/">download it here</a>.</li>
<li>A Deepgram API Key and Project ID - <a href="https://console.deepgram.com/signup?jump=keys">get them here</a>. Make sure your API Key has either an admin or owner role.</li>
</ul>
<p>Create a new directory and navigate to it with your terminal. Run <code>npm init -y</code> to create a <code>package.json</code> file and then install the following packages:</p>
<p>npm install @deepgram/sdk dotenv express socket.io</p>
<p>Create a file called <code>.env</code> and add the following to it:</p>
<p>DEEPGRAM_KEY=your-api-key
DEEPGRAM_PROJECT=your-project-id
LECTURE_KEY=any-passphrase</p>
${renderComponent($$result, "Alert", Alert, { "type": "warning" }, { "default": () => renderTemplate`Do not let others access your .env file as it contains sensitive values. If you share your code, omit this file.` })}
<h2 id="setting-up-server">Setting Up Server</h2>
<p>This application uses a combined express and socket.io server. Express is used to serve files, authenticate our lecture key, and generate temporary Deepgram API keys. Socket.io is used for realtime communication - sending completed transcriptions from the lecturer’s view to their students.</p>
<p>Create an <code>index.js</code> file and add the following code to create this combined server and set up Deepgram for later use:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dotenv&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">config</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;http&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">express</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;express&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">Socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;socket.io&#39;</span><span style="color: #C9D1D9">).Server</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">Deepgram</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">require</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;@deepgram/sdk&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">app</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">express</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">server</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> http.</span><span style="color: #D2A8FF">createServer</span><span style="color: #C9D1D9">(app)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">io</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Socket</span><span style="color: #C9D1D9">(server)</span></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">deepgram</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">Deepgram</span><span style="color: #C9D1D9">(process.env.</span><span style="color: #79C0FF">DEEPGRAM_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">static</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;public&#39;</span><span style="color: #C9D1D9">))</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(express.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">||</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">3000</span></span>
<span class="line"><span style="color: #C9D1D9">server.</span><span style="color: #D2A8FF">listen</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">PORT</span><span style="color: #C9D1D9">, () </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`listening on \${</span><span style="color: #79C0FF">PORT</span><span style="color: #A5D6FF">} at \${</span><span style="color: #FF7B72">new</span><span style="color: #A5D6FF"> </span><span style="color: #D2A8FF">Date</span><span style="color: #A5D6FF">().</span><span style="color: #D2A8FF">toISOString</span><span style="color: #A5D6FF">()</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Finally, create a <code>views</code> and <code>public</code> directory.</p>
<h2 id="landing-page">Landing Page</h2>
<p>The first of three pages to build is our landing page. It will allow users to navigate to a room as either a lecturer or a student.</p>
<p>We must create a route handler to tell express which file to load when a user navigates to our page. While we are here, we will also create route handlers for other pages. In <code>index.js</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/index.html&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/student&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/student.html&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/lecturer&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  res.</span><span style="color: #D2A8FF">sendFile</span><span style="color: #C9D1D9">(__dirname </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;/views/lecturer.html&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>We’ll create the student and lecturer views later. For now, add an <code>index.html</code> page to your <code>views</code> directory, and open it in your code editor:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Classroom Captioner&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Classroom Captioner&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Join as a student&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/student&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;Room ID&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;Create as a lecturer&lt;/</span><span style="color: #7EE787">h2</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">action</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/lecturer&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;Room ID&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;text&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Start your server by running <code>node index.js</code> and navigate to <code>http://localhost:3000</code>. Type a value into the first input and submit the form. You should be sent to <code>http://localhost:3000/student?id=TYPEDVALUE</code> (which should present an error as there is no file yet for that page). However, this confirms that our landing page can direct users to the student and lecturer pages.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/landing-no-style.png" alt="Webpage with the title &quot;Classroom Captioner&quot; with two forms. The first form says &quot;join as a student&quot; and asks for a Room ID. The second form is the same except it starts &quot;create as a lecturer&quot;."></p>
<h2 id="understanding-socket-rooms">Understanding Socket Rooms</h2>
<p>When using socket.io for realtime communication, there are two main concepts:</p>
<ol>
<li>Sending (<em>broadcasting</em> or <em>emitting</em>) and receiving (<em>listening</em>) events with data.</li>
<li>All users (<em>clients</em>) connect to a <em>server</em>. Messages get sent to and from the server - you can think of the server as an intermediary between all other connections in this context.</li>
</ol>
<p>Typically, data sent from the server will be sent to all clients connected to it, except the sender, or to one specific client. However, this project needs to handle multiple ongoing rooms with many users in each, and that’s where rooms come in.</p>
<p>Any socket connection can be assigned to any number of rooms, which you can think of as groups. When emitting an event from the server, you can specify which rooms should be sent the data. All users in those rooms get it, and those not assigned do not - perfect!</p>
<p>When a client establishes a new connection via socket.io, they are automatically assigned to a room with the name of their unique identifier. This means users are immediately in one room, and they will need to be added to the shared class-wide room when joining. Just keep this in mind as we move into the next section.</p>
<h2 id="lecturer-view">Lecturer View</h2>
<p>Inside of the <em>views</em> directory, add <code>lecturer.html</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Class Captioner: Lecturer&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Room &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">for</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9">&gt;Lecturer Key&lt;/</span><span style="color: #7EE787">label</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;password&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;key&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      &lt;</span><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">type</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;submit&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">value</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;Submit&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">form</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URL</span><span style="color: #C9D1D9">(location.href)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">search</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URLSearchParams</span><span style="color: #C9D1D9">(url.search)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;id&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#id&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> id</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, id)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #8B949E">// Further code goes here</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Let’s talk about this page:</p>
<ol>
<li>There is a form which is asking for a lecturer key. We’ll use this shortly to validate the user.</li>
<li>We include the socket.io client file.</li>
<li>We get access to the room name from the URL, store it in a variable called <code>id</code>, and display it to the user.</li>
<li>We connect to our socket server, and immediately emit an event called <code>join</code> along with the <code>id</code> value.</li>
</ol>
<h3 id="add-user-to-socket-room">Add User To Socket Room</h3>
<p>It is now time to listen for, and handle, the <code>join</code> event. Just below the route handlers in <code>index.js</code>:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">io.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;connection&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">socket</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">roomId</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">join</span><span style="color: #C9D1D9">(roomId)</span></span>
<span class="line"><span style="color: #C9D1D9">    console.</span><span style="color: #D2A8FF">log</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">\`\${</span><span style="color: #C9D1D9">socket</span><span style="color: #A5D6FF">.</span><span style="color: #C9D1D9">id</span><span style="color: #A5D6FF">} joins \${</span><span style="color: #C9D1D9">roomId</span><span style="color: #A5D6FF">}\`</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>Restart your server, and navigate to a room as a lecturer. Look at your terminal.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/socket-user-joins-room.png" alt="Terminal displays a log of a user joining the specified room name - here &quot;test&quot;"></p>
<h3 id="accessing-lecturers-microphone">Accessing Lecturer’s Microphone</h3>
<p>There are parts of this project which build on our <a href="https://blog.deepgram.com/live-transcription-mic-browser/">“Get Live Speech Transcriptions In Your Browser”</a> blog post and video. I’ll call these out, and go into less depth about the code. This is one of them - add this code to <code>lecturer.html</code> to get access to the user’s mic:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">navigator.mediaDevices</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">getUserMedia</span><span style="color: #C9D1D9">({ audio: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">stream</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    mediaRecorder </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">MediaRecorder</span><span style="color: #C9D1D9">(stream)</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">  .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">(() </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;You must provide access to the microphone&#39;</span><span style="color: #C9D1D9">))</span></span></code></pre>
<h3 id="validate-lecturer-key">Validate Lecturer Key</h3>
<p>The main visual difference between the lecturer and student views is the inclusion of a form that prompts for a “lecturer key”. This value must be compared against the <code>LECTURE_KEY</code> in our <code>.env</code> file, and if it’s correct, we must issue a temporary Deepgram API Key to allow transcription to begin. Finally, this new key will be used to establish a connection with Deepgram and begin transcription.</p>
<p>To build this validation system, add a route handler to the <code>index.js</code> file:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">post</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/auth&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">req</span><span style="color: #C9D1D9">, </span><span style="color: #FFA657">res</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> { </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> } </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> req.body</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (req.body.key </span><span style="color: #FF7B72">!=</span><span style="color: #C9D1D9"> process.env.</span><span style="color: #79C0FF">LECTURE_KEY</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ error: </span><span style="color: #A5D6FF">&#39;Key is missing or incorrect&#39;</span><span style="color: #C9D1D9"> })</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">newKey</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> deepgram.keys.</span><span style="color: #D2A8FF">create</span><span style="color: #C9D1D9">(</span></span>
<span class="line"><span style="color: #C9D1D9">      process.env.</span><span style="color: #79C0FF">DEEPGRAM_PROJECT</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #A5D6FF">&#39;Temporary key - works for 10 secs&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">      [</span><span style="color: #A5D6FF">&#39;usage:write&#39;</span><span style="color: #C9D1D9">],</span></span>
<span class="line"><span style="color: #C9D1D9">      { timeToLive: </span><span style="color: #79C0FF">10</span><span style="color: #C9D1D9"> }</span></span>
<span class="line"><span style="color: #C9D1D9">    )</span></span>
<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ deepgramToken: newKey.key })</span></span>
<span class="line"><span style="color: #C9D1D9">  } </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (error) {</span></span>
<span class="line"><span style="color: #C9D1D9">    res.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">({ error })</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>A new short-lived Deepgram API Key with minimal permissions will be generated and returned if the provided key is correct. If the provided key is wrong, or an error occurs, we will show this to the browser in the returned payload.</p>
<p>When the form in <code>lecturer.html</code> is submitted, let’s send a request to our new route handler:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;form&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;submit&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #FF7B72">async</span><span style="color: #C9D1D9"> (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  event.</span><span style="color: #D2A8FF">preventDefault</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">key</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#key&#39;</span><span style="color: #C9D1D9">).value</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">resp</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;/auth&#39;</span><span style="color: #C9D1D9">, {</span></span>
<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;POST&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">    body: </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">stringify</span><span style="color: #C9D1D9">({ id, key }),</span></span>
<span class="line"><span style="color: #C9D1D9">    headers: { </span><span style="color: #A5D6FF">&#39;Content-Type&#39;</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;application/json&#39;</span><span style="color: #C9D1D9"> },</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">then</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">r</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> r.</span><span style="color: #D2A8FF">json</span><span style="color: #C9D1D9">())</span></span>
<span class="line"><span style="color: #C9D1D9">    .</span><span style="color: #D2A8FF">catch</span><span style="color: #C9D1D9">((</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(error))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (resp.error) </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">alert</span><span style="color: #C9D1D9">(resp.error)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;form&#39;</span><span style="color: #C9D1D9">).</span><span style="color: #D2A8FF">remove</span><span style="color: #C9D1D9">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #8B949E">// Further code here [1]</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #8B949E">// Further code here [2]</span></span></code></pre>
<p>Errors will be shown to users in a popup. Success will lead to the form disappearing. Restart your server and try it out!</p>
<h3 id="live-transcribe-lecturer">Live Transcribe Lecturer</h3>
<p>Now there is a valid Deepgram API Key in our web page, immediately establish a connection with Deepgram. In the first annotated spot above, connect to Deepgram:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">ws </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">WebSocket</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;wss://api.deepgram.com/v1/listen&#39;</span><span style="color: #C9D1D9">, [</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #A5D6FF">&#39;token&#39;</span><span style="color: #C9D1D9">,</span></span>
<span class="line"><span style="color: #C9D1D9">  resp.deepgramToken,</span></span>
<span class="line"><span style="color: #C9D1D9">])</span></span>
<span class="line"><span style="color: #C9D1D9">ws.onopen </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> start</span></span>
<span class="line"><span style="color: #C9D1D9">ws.onmessage </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> handleResponse</span></span></code></pre>
<p>In the second annotated spot, add our event handlers for a connection being opened, and receiving data back from Deepgram. Take a look at <a href="https://blog.deepgram.com/live-transcription-mic-browser/">“Get Live Speech Transcriptions In Your Browser”</a> for more explanation.</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">() {</span></span>
<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">addEventListener</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;dataavailable&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">event</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (event.data.size </span><span style="color: #FF7B72">&gt;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> ws.readyState </span><span style="color: #FF7B72">==</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">      ws.</span><span style="color: #D2A8FF">send</span><span style="color: #C9D1D9">(event.data)</span></span>
<span class="line"><span style="color: #C9D1D9">    }</span></span>
<span class="line"><span style="color: #C9D1D9">  })</span></span>
<span class="line"><span style="color: #C9D1D9">  mediaRecorder.</span><span style="color: #D2A8FF">start</span><span style="color: #C9D1D9">(</span><span style="color: #79C0FF">250</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF7B72">function</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">handleResponse</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">JSON</span><span style="color: #C9D1D9">.</span><span style="color: #D2A8FF">parse</span><span style="color: #C9D1D9">(message.data)</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">transcript</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> data.channel.alternatives[</span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">].transcript</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (transcript </span><span style="color: #FF7B72">&amp;&amp;</span><span style="color: #C9D1D9"> data.is_final) {</span></span>
<span class="line"><span style="color: #C9D1D9">    document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;p&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> transcript</span></span>
<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// Further code here</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Restart your server, and you should see transcripts displayed in the browser.</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/lecturer-transcript.png" alt="A webpage reads &quot;Hello I hope you've had a wonderful week so far and I'm very excited for today's class&quot;"></p>
<h3 id="emit-socket-event-with-transcript">Emit Socket Event With Transcript</h3>
<p>The final step on the lecturer side is to emit a socket event with this transcript, so we can bring it into students’ pages. Add the following line to the <code>handleResponse</code> function:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReady&#39;</span><span style="color: #C9D1D9">, transcript)</span></span></code></pre>
<p>Now, as transcripts are displayed on the lecturer’s page, a <code>transcriptReady</code> event will also be triggered.</p>
<h2 id="emit-transcript">Emit Transcript</h2>
<p>In <code>index.js</code>, add a new listener to the socket right below where the <code>socket.on('join')</code> callback ends:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptReady&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> room </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> socket.rooms) {</span></span>
<span class="line"><span style="color: #C9D1D9">    socket.</span><span style="color: #D2A8FF">to</span><span style="color: #C9D1D9">(room).</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptComplete&#39;</span><span style="color: #C9D1D9">, message)</span></span>
<span class="line"><span style="color: #C9D1D9">  }</span></span>
<span class="line"><span style="color: #C9D1D9">})</span></span></code></pre>
<p>This goes through all of the rooms this current socket belongs to (which includes the room they joined with the <code>join</code> event) and emits a <code>transcriptComplete</code> event with the transcript to just the sockets in those rooms.</p>
<p>If the room you navigated to in the browser is called “my-awesome-room” the <code>join</code> event will have added your connection to a socket room of the same name. If students join the same room, they will receive the transcripts too.</p>
<h2 id="student-view">Student View</h2>
<p>The student view is just a stripped-back version of the lecturer view. Create a <code>student.html</code> page in the <code>views</code> directory and add the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;!</span><span style="color: #7EE787">DOCTYPE</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">html</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">lang</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;en&quot;</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">charset</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;UTF-8&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">http-equiv</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;X-UA-Compatible&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;IE=edge&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">meta</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">name</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;viewport&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">content</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;Class Captioner&lt;/</span><span style="color: #7EE787">title</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">head</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;Room &lt;</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;id&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">span</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">h1</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">p</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">src</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;/socket.io/socket.io.js&quot;</span><span style="color: #C9D1D9">&gt;&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URL</span><span style="color: #C9D1D9">(location.href)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">search</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">new</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">URLSearchParams</span><span style="color: #C9D1D9">(url.search)</span></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">id</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> search.</span><span style="color: #D2A8FF">get</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;id&#39;</span><span style="color: #C9D1D9">)</span></span>
<span class="line"><span style="color: #C9D1D9">      document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;#id&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> id</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">const</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">socket</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">io</span><span style="color: #C9D1D9">()</span></span>
<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">emit</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;join&#39;</span><span style="color: #C9D1D9">, id)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C9D1D9">      socket.</span><span style="color: #D2A8FF">on</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;transcriptComplete&#39;</span><span style="color: #C9D1D9">, (</span><span style="color: #FFA657">message</span><span style="color: #C9D1D9">) </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">        document.</span><span style="color: #D2A8FF">querySelector</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;p&#39;</span><span style="color: #C9D1D9">).textContent </span><span style="color: #FF7B72">+=</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39; &#39;</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">+</span><span style="color: #C9D1D9"> message</span></span>
<span class="line"><span style="color: #C9D1D9">      })</span></span>
<span class="line"><span style="color: #C9D1D9">    &lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">body</span><span style="color: #C9D1D9">&gt;</span></span>
<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">html</span><span style="color: #C9D1D9">&gt;</span></span></code></pre>
<p>Restart your server, open the application in various browser windows, with one window acting as the lecturer and the others as students. You should see the transcript appear on all screens.</p>
<h2 id="adding-styling">Adding Styling</h2>
<p>Create a <code>style.css</code> file in your <code>public</code> directory with the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #FF7B72">@import</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">url</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https://fonts.googleapis.com/css2?family=Cairo&amp;display=swap&#39;</span><span style="color: #C9D1D9">);</span></span>
<span class="line"><span style="color: #7EE787">*</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">box-sizing</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">border-box</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #7EE787">body</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">2</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #A5D6FF">&#39;Cairo&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #79C0FF">sans-serif</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#141e29</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">white</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #7EE787">h2</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin-top</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1.5</span><span style="color: #FF7B72">rem</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9"> {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">display</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">block</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-size</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">1</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">font-family</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">inherit</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">padding</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">width</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">200</span><span style="color: #FF7B72">px</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span>
<span class="line"><span style="color: #7EE787">input</span><span style="color: #C9D1D9">[</span><span style="color: #79C0FF">type</span><span style="color: #FF7B72">=</span><span style="color: #A5D6FF">&#39;submit&#39;</span><span style="color: #C9D1D9">] {</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">background</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#38edac</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">color</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">#141e29</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">border</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">none</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #79C0FF">margin-top</span><span style="color: #C9D1D9">: </span><span style="color: #79C0FF">0.5</span><span style="color: #FF7B72">em</span><span style="color: #C9D1D9">;</span></span>
<span class="line"><span style="color: #C9D1D9">}</span></span></code></pre>
<p>Then, just before the <code>&lt;/head&gt;</code> in all three <code>.html</code> files, add the following:</p>
<pre class="astro-code" style="background-color: #0d1117; overflow-x: auto;"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">link</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">rel</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;stylesheet&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">href</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;style.css&quot;</span><span style="color: #C9D1D9"> /&gt;</span></span></code></pre>
<p>Restart your server one final time and your application should look like this:</p>
<p><img src="https://res.cloudinary.com/deepgram/image/upload/v1644272676/blog/2022/02/classroom-captioner/fin.png" alt="Four browser windows. One is a broadcaster in room test1. Two are students in room test1. The final window is a student in room test 2. The first three have identical text displayed, and the other is empty"></p>
<h2 id="run-your-own">Run Your Own</h2>
<p>If you want to see the finished code and deploy your own version of this project in one click, visit <a href="https://github.com/deepgram-devs/classroom-captioner">https://github.com/deepgram-devs/classroom-captioner</a>.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Sharing knowledge as an educator feels wonderful, and now you can ensure all of your students have an equal experience in the classroom. If you have any questions, please feel free to reach out on Twitter - we’re <a href="https://twitter.com/DeepgramDevs">@DeepgramDevs</a>.</p>`;
}, "/Users/sandrarodgers/web-next/blog/src/content/blog/posts/classroom-captioner/index.md");

export { compiledContent, $$Index as default, frontmatter, metadata, rawContent };
