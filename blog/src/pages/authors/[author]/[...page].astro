---
import PrimarySection from "../../../shared/components/layout/PrimarySection.astro";
import Layout from "../../../layouts/Default.astro";
import AuthorPostsPage from "../../../components/authors/AuthorPostsPage.astro";
import ContrastSection from "../../../shared/components/decoration/ContrastSection.astro";
import AuthorHero from "../../../components/authors/AuthorHero.astro";
import Title from "../../../shared/components/meta/Title.astro";
import Description from "../../../shared/components/meta/Description.astro";
import Meta from "../../../shared/components/meta/Meta.astro";
import Backlink from "../../../components/nav/Backlink.astro";
import JsonLD from "../../../shared/components/meta/JsonLD.astro";

import { useStoryblokApi } from "@storyblok/astro";

export async function getStaticPaths({ paginate }) {
	const sbApi = useStoryblokApi();
	const { data: allPosts } = await sbApi.get("cdn/stories", {
		by_slugs: "blog-posts/*",
	});
	const { data: authors } = await sbApi.get("cdn/stories", {
		by_slugs: "authors/*",
	});

	const sortedPosts = allPosts.stories.sort((a, b) => {
		const aDate = new Date(b.content.date);
		const bDate = new Date(a.content.date);
		return aDate.getTime() - bDate.getTime();
	});

	return authors.stories.map((author) => {
		const posts = sortedPosts.filter((post) => {
			if (post.content.authors) {
				return post.content.authors.includes(author.uuid);
			}

			return false;
		});

		return paginate(posts, {
			params: {
				author: author.slug,
			},
			pageSize: 20,
			props: {
				author,
			},
		});
	});
}

const { page, author } = Astro.props;
const name = author.content.title.split(" ");
const firstName = name.pop();
const lastName = name.join("");

const socials = [];

if (author.content.twitter) {
	socials.push(`https://twitter.com/${author.content.twitter}`);
}

if (author.content.linkedin) {
	socials.push(author.content.linkedin);
}

if (author.content.github) {
	socials.push(author.content.github);
}

if (author.content.twitch) {
	socials.push(author.content.twitch);
}

if (author.content.website) {
	socials.push(author.content.website);
}

if (author.content.youtube) {
	socials.push(author.content.youtube);
}

// build json schema as a string
const schema = [
	{
		"@context": "https://schema.org",
		"@type": "Person",
		image: author.content.picture ? author.content.picture : null,
		name: author.content.title,
		jobTitle: author.content.team ? (author.content.jobtitle ? author.content.jobtitle : "Deepgram Team") : author.content.alumni ? "Deepgram Alumni" : "Guest Author",
		url: Astro.url,
		sameAs: socials,
	},
	{
		"@context": "https://schema.org",
		"@type": "BreadcrumbList",
		itemListElement: [
			{
				"@type": "ListItem",
				position: 1,
				name: "Deepgram Home",
				item: "https://deepgram.com",
			},
			{
				"@type": "ListItem",
				position: 2,
				name: "Blog",
				item: Astro.url.origin,
			},
			{
				"@type": "ListItem",
				position: 3,
				name: "Authors",
				item: `${Astro.url.origin}/authors`,
			},
			{
				"@type": "ListItem",
				position: 4,
				name: author.content.title,
			},
		],
	},
];
---

<Layout>
	<JsonLD slot="json:ld" {schema} />

	<Title slot="head:title" title={`${author.content.title} - ${author.content.jobtitle} - Deepgram Blog ⚡️`} />
	<Description
		slot="head:description"
		name="description"
		content={author.content.bio ? author.content.bio : `${author.content.title} is a ${author.content.jobtitle} writing content for the Deepgram blog.`}
	/>
	<Meta slot="og:title" property="og:title" content={`${author.content.title} - ${author.content.jobtitle} - Deepgram Blog ⚡️`} />
	<Meta
		slot="og:description"
		property="og:description"
		content={author.content.bio ? author.content.bio : `${author.content.title} is a ${author.content.jobtitle} writing content for the Deepgram blog.`}
	/>
	<Meta slot="og:type" property="og:type" content="profile" />
	{author.content.picture.filename && <Meta slot="og:image" property="og:image" content={author.content.picture.filename} />}
	{author.content.picture.filename && (
		<Meta
			slot="og:image:alt"
			property="og:image:alt"
			content={
				author.content.bio
					? `Profile pic for ${author.content.title}. ${author.content.bio}`
					: `Profile pic for ${author.content.title}, a ${author.content.jobtitle} writing content for the Deepgram blog.`
			}
		/>
	)}
	<Meta slot="head" property="profile:username" content={author.slug} />
	<Meta slot="head" property="profile:first_name" content={firstName} />
	<Meta slot="head" property="profile:last_name" content={lastName} />
	{author.content.twitter && <Meta slot="head" property="twitter:creator" content={`@${author.content.twitter}`} />}

	<ContrastSection contrast="darkCharcoal" background="white" bottomDivider="eclipse-divider" class="-mb-32">
		<PrimarySection class="bg-darkCharcoal pt-[6.75rem] md:pt-[7.03125rem] lg:pt-[7.3125rem] xl:pt-[7.875rem]">
			<Backlink href="/authors" class="mb-6 md:mb-8 lg:mb-10 xl:mb-12">All authors</Backlink>

			<AuthorHero author={author} />
		</PrimarySection>
	</ContrastSection>
	<PrimarySection>
		<AuthorPostsPage slug={`authors/${author.slug}`} page={page} posts={page.data} link="/authors" linkText="All authors" subtitle={`All ${author.content.title} posts`} />
	</PrimarySection>
</Layout>
