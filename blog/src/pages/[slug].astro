---
import render from "preact-render-to-string";
import PrimarySection from "../shared/components/layout/PrimarySection.astro";
import Layout from "../layouts/Default.astro";
import HasGutters from "../shared/components/layout/HasGutters.astro";
import ContrastSection from "../shared/components/decoration/ContrastSection.astro";
import PostImage from "../components/posts/PostImage.astro";
import PostMeta from "../components/posts/PostMeta.astro";
import PostHeading from "../components/posts/PostHeading.astro";
import Feedback from "../shared/components/forms/Feedback.astro";
import TagsList from "../shared/components/lists/TagsList.astro";
import Title from "../shared/components/meta/Title.astro";
import Description from "../shared/components/meta/Description.astro";
import Meta from "../shared/components/meta/Meta.astro";
import Icon from "../shared/components/general/Icon.astro";
import RelatedResources from "../components/posts/RelatedResources.astro";
import Link from "../shared/components/general/Link.astro";
import MetaLink from "../shared/components/meta/Link.astro";
import Backlink from "../components/nav/Backlink.astro";
import InlineIcon from "../shared/components/general/InlineIcon.astro";
import JsonLD from "../shared/components/meta/JsonLD.astro";
import { useStoryblokApi, renderRichText, RichTextSchema } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import slugify from "slugify";

import "../assets/styles/prism.css";
export async function getStaticPaths() {
	const sbApi = useStoryblokApi();
	const allPosts = await sbApi.getAll("cdn/stories", {
		by_slugs: "blog-posts/*",
	});
	const sortedPosts = allPosts.sort((a, b) => {
		const aDate = new Date(b.content.date);
		const bDate = new Date(a.content.date);
		return aDate.getTime() - bDate.getTime();
	});

	return sortedPosts.map((post) => {
		const slug = post.slug;
		// uncomment this for debugging purposes in GH actions
		// will give better insight into which post is failing
		// console.log("slug", slug);
		return {
			params: {
				slug,
			},
			props: {
				post,
			},
		};
	});
}

function snakeCase(heading) {
	return slugify(heading, { lower: true });
}

function getHeadingsSB(post) {
	const richTextSections = post.content.body.filter((section) => {
		return section.component === "RichTextSection";
	});
	const headings = richTextSections.map((section) => {
		return section.content.content.filter((richText) => {
			if (richText.type === "heading") {
				// console.log("richText", richText);
				return richText.content[0].text;
			}
		});
	});
	return headings.flat();
}
const sbApi = useStoryblokApi();

const { post } = Astro.props;
const { slug } = Astro.params;

const headings = await getHeadingsSB(post);
const postAuthors = post.content.authors;
const { data: authorsWithContent } = await sbApi.get("cdn/stories", {
	by_uuids: postAuthors.toString(),
});

const { data: categoryData } = await sbApi.get(`cdn/stories/${post.content.category}`, {
	find_by: "uuid",
});
const postCategory = categoryData.story;
const seo = {
	title: post.content.seo_title ? post.content.seo_title : post.content.title,
	description: post.content.seo_description ? post.content.seo_description : post.content.description,
	url: post.content.seo && post.content.seo.canonical ? post.content.seo.canonical : Astro.url,
};

const og = {
	title: seo.title,
	description: seo.description,
	image: post.content.og && post.content.og.filename !== "" ? post.content.og.filename : post.content.cover_image.filename,
};

// build short URLs
const shorturls = {
	share: post.content.shorturls && post.content.shorturls.share ? post.content.shorturls.share : Astro.url,
	twitter: post.content.shorturls && post.content.shorturls.twitter ? post.content.shorturls.twitter : Astro.url,
	linkedin: post.content.shorturls && post.content.shorturls.linkedin ? post.content.shorturls.linkedin : Astro.url,
	reddit: post.content.shorturls && post.content.shorturls.reddit ? post.content.shorturls.reddit : Astro.url,
	facebook: post.content.shorturls && post.content.shorturls.facebook ? post.content.shorturls.facebook : Astro.url,
	fullUrl: Astro.url,
};

// build json schema object
const schema = [
	{
		"@context": "http://schema.org",
		"@type": "BlogPosting",
		image: og.image,
		url: seo.url,
		headline: seo.title,
		alternativeHeadline: og.title,
		dateCreated: post.created_at,
		datePublished: post.first_published_at,
		dateModified: post.published_at,
		inLanguage: "en-US",
		isFamilyFriendly: "true",
		copyrightYear: new Date().getFullYear(),
		copyrightHolder: "Deepgram",
		contentLocation: {
			"@type": "Place",
			name: "San Francisco, California, 94110, USA",
		},
		author: authorsWithContent.stories.map((a) => ({
			"@type": "Person",
			image: a.picture ? a.picture : null,
			name: a.title,
			jobTitle: a.team ? (a.jobtitle ? a.jobtitle : "Deepgram Team") : a.alumni ? "Deepgram Alumni" : "Guest Author",
			url: `${Astro.url.origin}/authors/${a.slug}`,
		})),
		publisher: {
			"@type": "Organization",
			name: "Deepgram",
			url: "https://deepgram.com",
			logo: {
				"@type": "ImageObject",
				url: "https://github.com/deepgram/.github/raw/main/profile/dg-logo.png",
				width: "223",
				height: "28",
			},
		},
		mainEntityOfPage: "True",
		keywords: post.tag_list,
		genre: ["Speech Recognition", "Automatic Speech Recognition", "Speech-to-Text", "API"],
		articleSection: postCategory.content.title,
	},
	...authorsWithContent.stories.map((a) => {
		return {
			"@context": "https://schema.org",
			"@type": "Person",
			image: a.content.picture.filename ? a.content.picture.filename : null,
			name: a.content.title,
			jobTitle: a.content.team === "team" ? "Deepgram Team" : a.content.team === "alum" ? "Deepgram Alumni" : "Guest Author",
			url: `${Astro.url.origin}/authors/${a.slug}`,
		};
	}),
	{
		"@context": "https://schema.org",
		"@type": "BreadcrumbList",
		itemListElement: [
			{
				"@type": "ListItem",
				position: 1,
				name: "Deepgram Home",
				item: "https://deepgram.com",
			},
			{
				"@type": "ListItem",
				position: 2,
				name: "Blog",
				item: Astro.url.origin,
			},
			{
				"@type": "ListItem",
				position: 3,
				name: seo.title,
			},
		],
	},
];
---

<Layout>
	<!-- <link href="../../prism.css" rel="stylesheet" /> -->
	<script src="../prism.js">

	</script>
	<JsonLD slot="json:ld" {schema} />
	<Title slot="head:title" title={`${seo.title} - Deepgram Blog ⚡️`} />
	<Description slot="head:description" name="description" content={seo.description} />
	<MetaLink slot="head:canonical" rel="canonical" href={seo.url} />

	<Meta slot="og:title" property="og:title" content={og.title} />
	<Meta slot="og:description" property="og:description" content={og.description} />
	<Meta slot="og:type" property="og:type" content="article" />
	<Meta slot="og:image" property="og:image" itemprop="image" content={og.image} />
	<Meta slot="og:image:width" property="og:image:width" content="1200" />
	<Meta slot="og:image:height" property="og:image:height" content="762" />
	<Meta slot="og:image:alt" property="og:image:alt" content={`Deepgram Blog - A post titled: ${og.title}`} />

	<Meta slot="head" property="article:published_time" content={post.first_published_at} />
	{authorsWithContent && authorsWithContent.stories.map((author) => <Meta slot="head" property="article:author" content={author.title} />)}
	<Meta slot="head" property="article:section" content={postCategory.content.title} />
	{post.tag_list && post.tag_list.map((tag) => <Meta slot="head" property="article:tag" content={tag} />)}

	<article>
		<ContrastSection contrast="mist" background="white" bottomDivider="eclipse-divider" bottomOverlay>
			<PrimarySection class="pt-[6.75rem] md:pt-[7.03125rem] lg:pt-[7.3125rem] xl:pt-[7.875rem]">
				<Backlink linkClass="inline-block nudge-icon nudge-icon--left draw-underline underline-right" href="/posts" class="mb-6 md:mb-8 lg:mb-10 xl:mb-12"
					><span>All posts</span>
				</Backlink>

				<HasGutters>
					<header class="flex flex-col">
						<PostHeading post={post} />
						<PostMeta post={post} authors={authorsWithContent.stories} category={postCategory} />
						<PostImage post={post} />
					</header>
				</HasGutters>
			</PrimarySection>
		</ContrastSection>
		<PrimarySection class="mt-32 xl:mt-56">
			<HasGutters>
				<div class="post">
					<div class="post-prose markdown-body">
						{post.content.body.map((section) => <StoryblokComponent blok={section} />)}
					</div>
					<p class="italic">If you have any feedback about this post, or anything else around Deepgram, we'd love to hear from you. Please let us know in our <a href="https://github.com/orgs/deepgram/discussions/categories/feedback">GitHub discussions</a>.</p>
					<h4>More with these tags:</h4>
					<TagsList tags={post.tag_list} link />

					<Feedback />
				</div>

				<div slot="right" class="mb-5 xl:mb-0 mx-0 md:mx-20 lg:mx-32 xl:mx-0">
					<h5 class="pb-5"><InlineIcon icon="share">Share</InlineIcon></h5>
					<div class="flex gap-2 text-2xl">
						<Link
							href={`mailto:?body=Check%20out%20this%20awesome%20post%20on%20Deepgram!%0A%0A${encodeURIComponent(post.content.title)}%0A%0A${encodeURIComponent(shorturls.share)}`}
							target="_blank"
							rel="noopener noreferrer"
							><Icon icon="email" class="w-[1em] fill-darkIris" />
						</Link>
						<Link
							href={`https://twitter.com/intent/tweet?text=Check%20out%20this%20awesome%20post%20on%20Deepgram%20%40deepgramai%20%20${encodeURIComponent(shorturls.twitter)}`}
							target="_blank"
							rel="noopener noreferrer"
							><Icon icon="twitter" class="w-[1em] fill-darkIris" />
						</Link>
						<Link
							href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shorturls.fullUrl)}&title=${encodeURIComponent(post.content.title)}`}
							target="_blank"
							rel="noopener noreferrer"
							><Icon icon="linkedin" class="w-[1em] fill-darkIris" />
						</Link>
						<Link href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shorturls.facebook)}`} target="_blank" rel="noopener noreferrer"
							><Icon icon="facebook" class="w-[1em] fill-darkIris" />
						</Link>
					</div>

					{headings && headings.length > 0 && <h5 class="hidden pt-8 pb-5 xl:block">In this blog post</h5>}
					<ul class="hidden xl:block">
						{headings &&
							headings.length > 0 &&
							headings
								.filter((heading) => heading.attrs.level <= 2)
								.map((heading) => (
									<li class="pb-4">
										<Link class="text-black" href={`#${snakeCase(heading.content[0].text)}`}>
											{heading.content[0].text}
										</Link>
									</li>
								))}
					</ul>
				</div>
			</HasGutters>
			<div class="mt-20">
				<h3 class="mb-10 text-center">Related Resources</h3>
				<RelatedResources post={post} category={postCategory} />
			</div>
		</PrimarySection>
	</article>
</Layout>

<style>
	.post {
		@apply md:mx-20 lg:mx-32;
	}

	.post-prose :global(img),
	.post-prose :global(p img) {
		@apply mx-auto object-cover;
		@apply mb-4;
	}

	.post-prose :global(small) {
		@apply text-sm;
	}

	.post-prose :global(h1),
	.post-prose :global(h2),
	.post-prose :global(h3),
	.post-prose :global(h4),
	.post :global(h4),
	.post-prose :global(h5),
	.post-prose :global(h6) {
		@apply pt-6 pb-2;
	}

	.post-prose :global(p) {
		@apply pb-4 leading-loose lg:leading-normal;
	}

	.post-prose :global(* a) {
		@apply text-darkIris;
	}

	.post-prose :global(pre) {
		@apply m-0 mb-14;
		color: #f5f5f5;
		background-color: #0d1117;
		overflow-x: auto;
		max-height: 24rem;
		overflow: scroll;
		padding: 1.75rem 2.5rem;
		margin: 0;
		margin-bottom: 1.5rem;
	}

	.post-prose :global(p:not(pre.astro-code) code) {
		@apply bg-casper/50 py-[0.0625rem] px-[0.25rem];
	}

	.post-prose :global(ol) {
		@apply m-0 mb-5 pl-8;
	}

	.post-prose :global(ul:not(.contains-task-list)) {
		@apply m-0 mb-5 pl-6;
	}

	.post-prose :global(ol) {
		counter-reset: li;
	}

	.post-prose :global(ol li) {
		@apply relative;
	}

	.post-prose :global(ol li),
	.post-prose :global(ul:not(.contains-task-list) li),
	.post-prose :global(ul li.task-list-item) {
		@apply py-1;
	}

	.post-prose :global(ol li::marker) {
  	color: transparent;
	}

	.post-prose :global(ol li::before) {
		content: counter(li);
		counter-increment: li;
		@apply absolute -left-8 h-6 w-6 rounded-full border border-black text-center text-black;
	}

	.post-prose :global(ul:not(.contains-task-list)) {
		@apply list-disc;
	}

	.post-prose :global(ul:not(.contains-task-list) li::marker) {
		@apply text-casper;
	}

	.post-prose :global(ul:not(.contains-task-list) li) {
		@apply pl-1 text-black;
	}

	.post-prose :global(li.task-list-item input) {
		@apply appearance-none accent-pink-500;
	}

	.post-prose :global(li.task-list-item input:checked::before) {
		content: "✔";
		@apply text-meadow text-lg;
	}

	.post-prose :global(li.task-list-item input:not(:checked)::before) {
		content: "✖";
		@apply text-coral text-lg;
	}

	.post-prose :global(table) {
		@apply mb-4 block border-collapse overflow-auto;
	}

	.post-prose :global(table) + :global(p small) {
		@apply -mt-2 block text-center text-sm font-bold;
	}

	.post-prose :global(td),
	.post-prose :global(th) {
		@apply border-casper table-auto  border;
	}

	.post-prose :global(thead > tr > th) {
		@apply font-bold;
	}

	.post-prose :global(tbody > tr > th) {
		@apply font-normal;
	}

	.post-prose :global(tr) {
		@apply bg-mist;
	}

	.post-prose :global(td),
	.post-prose :global(th) {
		@apply px-6 py-2;
	}

	.post-prose :global(.promo-container) {
		@apply md:-mx-20 lg:-mx-32;
	}

	.post-prose :global(iframe) {
		margin-top: 1rem;
		margin-bottom: 1.5rem;
	}

	.post-prose :global(blockquote) {
		box-sizing: border-box;
		display: block;
		margin-bottom: 2rem;
		margin-top: 2rem;
		@apply pl-[2.8125rem] font-[500];
		position: relative;
		width: 100%;
	}

	.post-prose :global(blockquote p) {
		padding-bottom: 0rem;
		@apply text-steel;
		font-weight: 500;
	}

	.post-prose :global(blockquote:before) {
		@apply bg-coral absolute;
		bottom: 0.3125rem;
		content: "";
		left: 1.5625rem;
		top: 0.3125rem;
		width: 0.125rem;
	}
</style>
