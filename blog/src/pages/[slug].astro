---
import PrimarySection from "../shared/components/layout/PrimarySection.astro";
import Layout from "../layouts/Default.astro";
import HasGutters from "../shared/components/layout/HasGutters.astro";
import ContrastSection from "../shared/components/decoration/ContrastSection.astro";

import PostImage from "../components/posts/PostImage.astro";
import PostMeta from "../components/posts/PostMeta.astro";
import PostHeading from "../components/posts/PostHeading.astro";
import Feedback from "../shared/components/forms/Feedback.astro";
import TagsList from "../shared/components/lists/TagsList.astro";
import Title from "../shared/components/meta/Title.astro";
import Description from "../shared/components/meta/Description.astro";
import Meta from "../shared/components/meta/Meta.astro";
import Icon from "../shared/components/general/Icon.astro";
import RelatedResources from "../components/posts/RelatedResources.astro";
import Link from "../shared/components/general/Link.astro";
import MetaLink from "../shared/components/meta/Link.astro";
import Backlink from "../components/nav/Backlink.astro";
import InlineIcon from "../shared/components/general/InlineIcon.astro";
import JsonLD from "../shared/components/meta/JsonLD.astro";
import { getSluggedJson } from "../shared/util";

export async function getStaticPaths() {
	const allPosts = await Astro.glob("/src/content/blog/posts/**/*.md");
	const sortedPosts = allPosts.sort((a, b) => {
		const aDate = new Date(b.frontmatter.date);
		const bDate = new Date(a.frontmatter.date);
		return aDate.getTime() - bDate.getTime();
	});

	return sortedPosts.map((post) => {
		const slug = post.frontmatter.slug || post.file.split("/")[post.file.split("/").length - 2];

		return {
			params: {
				slug,
			},
			props: {
				post,
			},
		};
	});
}

const { post } = Astro.props;
const { slug } = Astro.params;

const headings = await post.getHeadings();

const allAuthors = await getSluggedJson("blog/authors");
const postAuthors = allAuthors.filter((a) => post.frontmatter.authors.includes(a.slug));

const allCategories = await getSluggedJson("blog/category");
const postCategory = allCategories.find((c) => post.frontmatter.category === c.slug);

const seo = {
	title: post.frontmatter.seo && post.frontmatter.seo.title ? post.frontmatter.seo.title : post.frontmatter.title,
	description: post.frontmatter.seo && post.frontmatter.seo.description ? post.frontmatter.seo.description : post.frontmatter.description,
	url: post.frontmatter.seo && post.frontmatter.seo.canonical ? post.frontmatter.seo.canonical : Astro.url,
};

const og = {
	title: post.frontmatter.og && post.frontmatter.og.title ? post.frontmatter.og.title : seo.title,
	description: post.frontmatter.og && post.frontmatter.og.description ? post.frontmatter.og.description : seo.description,
	image: post.frontmatter.og && post.frontmatter.og.image ? post.frontmatter.og.image : post.frontmatter.cover,
};

// resize-og-image-to-fit
if (og && og.image) {
	const version = og.image.match(/(.*)\/image\/upload\/(?<version>v[0-9]+)\/(.*)\.(.*)/).groups.version;
	og.image = og.image.replace(version, "c_fit,h_627,w_1200");
}

// build short URLs
const shorturls = {
	share: post.frontmatter.shorturls && post.frontmatter.shorturls.share ? post.frontmatter.shorturls.share : Astro.url,
	twitter: post.frontmatter.shorturls && post.frontmatter.shorturls.twitter ? post.frontmatter.shorturls.twitter : Astro.url,
	linkedin: post.frontmatter.shorturls && post.frontmatter.shorturls.linkedin ? post.frontmatter.shorturls.linkedin : Astro.url,
	reddit: post.frontmatter.shorturls && post.frontmatter.shorturls.reddit ? post.frontmatter.shorturls.reddit : Astro.url,
	facebook: post.frontmatter.shorturls && post.frontmatter.shorturls.facebook ? post.frontmatter.shorturls.facebook : Astro.url,
	fullUrl: Astro.url,
};

// build json schema object
const schema = [
	{
		"@context": "http://schema.org",
		"@type": "BlogPosting",
		image: og.image,
		url: seo.url,
		headline: seo.title,
		alternativeHeadline: og.title,
		dateCreated: post.frontmatter.date,
		datePublished: post.frontmatter.date,
		dateModified: post.frontmatter.date,
		inLanguage: "en-US",
		isFamilyFriendly: "true",
		copyrightYear: new Date().getFullYear(),
		copyrightHolder: "Deepgram",
		contentLocation: {
			"@type": "Place",
			name: "San Francisco, California, 94110, USA",
		},
		author: postAuthors.map((a) => ({
			"@type": "Person",
			image: a.picture ? a.picture : null,
			name: a.title,
			jobTitle: a.team ? (a.jobtitle ? a.jobtitle : "Deepgram Team") : a.alumni ? "Deepgram Alumni" : "Guest Author",
			url: `${Astro.url.origin}/authors/${a.slug}`,
		})),
		publisher: {
			"@type": "Organization",
			name: "Deepgram",
			url: "https://deepgram.com",
			logo: {
				"@type": "ImageObject",
				url: "https://github.com/deepgram/.github/raw/main/profile/dg-logo.png",
				width: "223",
				height: "28",
			},
		},
		mainEntityOfPage: "True",
		keywords: post.frontmatter.tags,
		genre: ["Speech Recognition", "Automatic Speech Recognition", "Speech-to-Text", "API"],
		articleSection: postCategory.title,
	},
	...postAuthors.map((a) => ({
		"@context": "https://schema.org",
		"@type": "Person",
		image: a.picture ? a.picture : null,
		name: a.title,
		jobTitle: a.team ? (a.jobtitle ? a.jobtitle : "Deepgram Team") : a.alumni ? "Deepgram Alumni" : "Guest Author",
		url: `${Astro.url.origin}/authors/${a.slug}`,
	})),
	{
		"@context": "https://schema.org",
		"@type": "BreadcrumbList",
		itemListElement: [
			{
				"@type": "ListItem",
				position: 1,
				name: "Deepgram Home",
				item: "https://deepgram.com",
			},
			{
				"@type": "ListItem",
				position: 2,
				name: "Blog",
				item: Astro.url.origin,
			},
			{
				"@type": "ListItem",
				position: 3,
				name: seo.title,
			},
		],
	},
];
---

<Layout>
	<JsonLD slot="json:ld" {schema} />

	<Title slot="head:title" title={`${seo.title} - Deepgram Blog ⚡️`} />
	<Description slot="head:description" name="description" content={seo.description} />
	<MetaLink slot="head:canonical" rel="canonical" href={seo.url} />

	<Meta slot="og:title" property="og:title" content={og.title} />
	<Meta slot="og:description" property="og:description" content={og.description} />
	<Meta slot="og:type" property="og:type" content="article" />
	<Meta slot="og:image" property="og:image" itemprop="image" content={og.image} />
	<Meta slot="og:image:width" property="og:image:width" content="1200" />
	<Meta slot="og:image:height" property="og:image:height" content="762" />
	<Meta slot="og:image:alt" property="og:image:alt" content={`Deepgram Blog - A post titled: ${og.title}`} />

	<Meta slot="head" property="article:published_time" content={post.frontmatter.date} />
	{postAuthors && postAuthors.map((author) => <Meta slot="head" property="article:author" content={author.title} />)}
	<Meta slot="head" property="article:section" content={postCategory.title} />
	{post.frontmatter.tags && post.frontmatter.tags.map((tag) => <Meta slot="head" property="article:tag" content={tag} />)}

	<article>
		<ContrastSection contrast="mist" background="white" bottomDivider="eclipse-divider" bottomOverlay>
			<PrimarySection class="pt-[6.75rem] md:pt-[7.03125rem] lg:pt-[7.3125rem] xl:pt-[7.875rem]">
				<Backlink linkClass="inline-block nudge-icon nudge-icon--left draw-underline underline-right" href="/posts" class="mb-6 md:mb-8 lg:mb-10 xl:mb-12 text-iris"
					><span>All posts</span>
				</Backlink>

				<HasGutters>
					<header class="flex flex-col">
						<PostHeading post={post} />
						<PostMeta post={post} />
						<PostImage post={post} />
					</header>
				</HasGutters>
			</PrimarySection>
		</ContrastSection>
		<PrimarySection class="pt-12">
			<HasGutters>
				<div class="post">
					<div class="post-prose">
						<post.Content />
					</div>
					<h4>More with these tags:</h4>
					<TagsList tags={post.frontmatter.tags} link />

					<Feedback />
				</div>

				<div slot="right" class="mb-5 xl:mb-0 mx-0 md:mx-20 lg:mx-32 xl:mx-0">
					<h5 class="pb-5"><InlineIcon icon="share">Share</InlineIcon></h5>
					<div class="flex gap-2 text-2xl">
						<Link
							href={`mailto:?body=Check%20out%20this%20awesome%20post%20on%20Deepgram!%0A%0A${encodeURIComponent(post.frontmatter.title)}%0A%0A${encodeURIComponent(
								shorturls.share
							)}`}
							target="_blank"
							rel="noopener noreferrer"
							><Icon icon="email" class="w-[1em] fill-iris" />
						</Link>
						<Link
							href={`https://twitter.com/intent/tweet?text=Check%20out%20this%20awesome%20post%20on%20Deepgram%20%40deepgramai%20%20${encodeURIComponent(shorturls.twitter)}`}
							target="_blank"
							rel="noopener noreferrer"
							><Icon icon="twitter" class="w-[1em] fill-iris" />
						</Link>
						<Link
							href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shorturls.fullUrl)}&title=${encodeURIComponent(post.frontmatter.title)}`}
							target="_blank"
							rel="noopener noreferrer"
							><Icon icon="linkedin" class="w-[1em] fill-iris" />
						</Link>
						<Link href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shorturls.facebook)}`} target="_blank" rel="noopener noreferrer"
							><Icon icon="facebook" class="w-[1em] fill-iris" />
						</Link>
					</div>

					{headings.length > 0 && <h5 class="hidden pt-8 pb-5 xl:block">In this blog post</h5>}
					<ul class="hidden xl:block">
						{headings.length > 0 &&
							headings
								.filter((heading) => heading.depth <= 2)
								.map((heading) => (
									<li class="pb-4">
										<Link class="text-black" href={`#${heading.slug}`}>
											{heading.text}
										</Link>
									</li>
								))}
					</ul>
				</div>
			</HasGutters>
			<div class="mt-20">
				<h3 class="mb-10 text-center">Related Resources</h3>
				<RelatedResources post={post} />
			</div>
		</PrimarySection>
	</article>
</Layout>

<style>
	.post {
		@apply md:mx-20 lg:mx-32;
	}

	.post-prose > :global(img),
	.post-prose > :global(p img) {
		@apply mx-auto object-cover;
	}

	.post-prose > :global(small) {
		@apply text-sm;
	}

	.post-prose > :global(h1),
	.post-prose > :global(h2),
	.post-prose > :global(h3),
	.post-prose > :global(h4),
	.post :global(h4),
	.post-prose > :global(h5),
	.post-prose > :global(h6) {
		@apply pt-6 pb-2;
	}

	.post-prose > :global(p) {
		@apply pb-4 leading-loose lg:leading-normal;
	}

	.post-prose > :global(* a) {
		@apply text-iris;
	}

	.post-prose > :global(pre.astro-code) {
		@apply m-0 mb-14;
	}

	.post-prose > :global(p:not(pre.astro-code) code) {
		@apply bg-casper/50 py-[0.0625rem] px-[0.25rem];
	}

	.post-prose > :global(ol) {
		@apply m-0 mb-5 pl-8;
	}

	.post-prose > :global(ul:not(.contains-task-list)) {
		@apply m-0 mb-5 pl-6;
	}

	.post-prose > :global(ol) {
		counter-reset: li;
	}

	.post-prose > :global(ol li) {
		@apply relative;
	}

	.post-prose > :global(ol li),
	.post-prose > :global(ul:not(.contains-task-list) li),
	.post-prose > :global(ul li.task-list-item) {
		@apply py-1;
	}

	.post-prose > :global(ol li::before) {
		content: counter(li);
		counter-increment: li;
		@apply absolute -left-8 h-6 w-6 rounded-full border border-black text-center text-black;
	}

	.post-prose > :global(ul:not(.contains-task-list)) {
		@apply list-disc;
	}

	.post-prose > :global(ul:not(.contains-task-list) li::marker) {
		@apply text-casper;
	}

	.post-prose > :global(ul:not(.contains-task-list) li) {
		@apply pl-1 text-black;
	}

	.post-prose > :global(li.task-list-item input) {
		@apply appearance-none accent-pink-500;
	}

	.post-prose > :global(li.task-list-item input:checked::before) {
		content: "✔";
		@apply text-meadow text-lg;
	}

	.post-prose > :global(li.task-list-item input:not(:checked)::before) {
		content: "✖";
		@apply text-coral text-lg;
	}

	.post-prose > :global(table) {
		@apply mb-4 block border-collapse overflow-auto whitespace-nowrap;
	}

	.post-prose > :global(table) + :global(p small) {
		@apply -mt-2 block text-center text-sm font-bold;
	}

	.post-prose > :global(td),
	.post-prose > :global(th) {
		@apply border-casper table-auto  border;
	}

	.post-prose > :global(th) {
		@apply bg-mist;
	}

	.post-prose > :global(td),
	.post-prose > :global(th) {
		@apply px-6 py-2;
	}

	.post-prose > :global(.promo-container) {
		@apply md:-mx-20 lg:-mx-32;
	}

	.post-prose > :global(iframe) {
		margin-top: 1rem;
		margin-bottom: 1.5rem;
	}

	.post-prose :global(blockquote) {
		box-sizing: border-box;
		display: block;
		margin-bottom: 2rem;
		margin-top: 2rem;
		@apply pl-[2.8125rem] font-[500];
		position: relative;
		width: 100%;
	}

	.post-prose :global(blockquote p) {
		padding-bottom: 0rem;
		@apply text-steel;
		font-weight: 500;
	}

	.post-prose :global(blockquote:before) {
		@apply bg-coral absolute;
		bottom: 0.3125rem;
		content: "";
		left: 1.5625rem;
		top: 0.3125rem;
		width: 0.125rem;
	}
</style>
