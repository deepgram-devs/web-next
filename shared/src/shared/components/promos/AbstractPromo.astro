---
const { class: classes, strapline, title, backgroundImage, theme } = Astro.props;

let themeStyles;
if (theme) {
	switch (theme) {
		case "black":
			themeStyles = "theme--black";
			break;
		case "white":
			themeStyles = "theme--white";
			break;
		case "red":
			themeStyles = "theme--red";
			break;
	}
}

const rawHTMLString = "&nbsp;";
---

<div class="promo-container">
	<div class:list={["promo", classes ? classes : "", themeStyles]} style={`background-image: url('${backgroundImage}');`}>
		<header>
			{strapline ? <h6 class="uppercase">{strapline}</h6> : <h6 class="uppercase" set:html={rawHTMLString} />}
			<h2>{title}</h2>
		</header>
		<div>
			<slot />
		</div>
	</div>
</div>

<style scoped>
	.promo-container {
		@apply my-20;
		@apply shadow-dg;
	}

	.promo {
		@apply max-w-[76.25rem];
		@apply  min-h-[35rem] md:min-h-[14rem] w-full;
		@apply flex flex-col space-y-1;
		@apply px-8 py-4;
		@apply justify-between;
		@apply shadow-dg rounded-[1px];
		@apply bg-right-bottom bg-no-repeat lg:bg-right bg-contain;
	}

	header h2 {
		@apply sm:text-h2-d text-h2-m;
	}

	header h6 {
		@apply pb-2;
	}

	/* White Theme Styles */
	.theme--white {
		@apply bg-white;
	}

	.theme--white h6 {
		@apply text-fireEngine;
	}

	.theme--white h2,
	.theme--white :global(h4.date),
	.theme--white :global(p) {
		@apply text-black;
	}

	/* Black Theme Styles */
	.theme--black {
		@apply bg-ink;
	}

	.theme--black h6 {
		@apply text-coral;
	}

	.theme--black h2,
	.theme--black :global(h4.date),
	.theme--black :global(p) {
		@apply text-white;
	}

	/* Red Theme Styles */
	.theme--red {
		@apply bg-fireEngine;
	}

	.theme--red h6,
	.theme--red h2,
	.theme--red :global(h4.date),
	.theme--red :global(p) {
		@apply text-black;
	}
</style>
